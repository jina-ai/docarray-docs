Search.setIndex({"docnames": ["advanced/document-store/annlite", "advanced/document-store/benchmark", "advanced/document-store/elasticsearch", "advanced/document-store/extend", "advanced/document-store/index", "advanced/document-store/qdrant", "advanced/document-store/redis", "advanced/document-store/sqlite", "advanced/document-store/weaviate", "advanced/graphql-support/index", "advanced/torch-support/index", "api", "api/docarray", "api/docarray.array", "api/docarray.array.annlite", "api/docarray.array.base", "api/docarray.array.chunk", "api/docarray.array.document", "api/docarray.array.elastic", "api/docarray.array.match", "api/docarray.array.memory", "api/docarray.array.mixins", "api/docarray.array.mixins.content", "api/docarray.array.mixins.dataloader", "api/docarray.array.mixins.dataloader.helper", "api/docarray.array.mixins.delitem", "api/docarray.array.mixins.embed", "api/docarray.array.mixins.empty", "api/docarray.array.mixins.evaluation", "api/docarray.array.mixins.find", "api/docarray.array.mixins.getattr", "api/docarray.array.mixins.getitem", "api/docarray.array.mixins.group", "api/docarray.array.mixins.io", "api/docarray.array.mixins.io.binary", "api/docarray.array.mixins.io.common", "api/docarray.array.mixins.io.csv", "api/docarray.array.mixins.io.dataframe", "api/docarray.array.mixins.io.from_gen", "api/docarray.array.mixins.io.json", "api/docarray.array.mixins.io.pbar", "api/docarray.array.mixins.io.pushpull", "api/docarray.array.mixins.match", "api/docarray.array.mixins.parallel", "api/docarray.array.mixins.plot", "api/docarray.array.mixins.post", "api/docarray.array.mixins.pydantic", "api/docarray.array.mixins.reduce", "api/docarray.array.mixins.sample", "api/docarray.array.mixins.setitem", "api/docarray.array.mixins.strawberry", "api/docarray.array.mixins.text", "api/docarray.array.mixins.traverse", "api/docarray.array.qdrant", "api/docarray.array.queryset", "api/docarray.array.queryset.lookup", "api/docarray.array.queryset.parser", "api/docarray.array.redis", "api/docarray.array.sqlite", "api/docarray.array.storage", "api/docarray.array.storage.annlite", "api/docarray.array.storage.annlite.backend", "api/docarray.array.storage.annlite.find", "api/docarray.array.storage.annlite.getsetdel", "api/docarray.array.storage.annlite.helper", "api/docarray.array.storage.annlite.seqlike", "api/docarray.array.storage.base", "api/docarray.array.storage.base.backend", "api/docarray.array.storage.base.getsetdel", "api/docarray.array.storage.base.helper", "api/docarray.array.storage.base.seqlike", "api/docarray.array.storage.elastic", "api/docarray.array.storage.elastic.backend", "api/docarray.array.storage.elastic.find", "api/docarray.array.storage.elastic.getsetdel", "api/docarray.array.storage.elastic.seqlike", "api/docarray.array.storage.memory", "api/docarray.array.storage.memory.backend", "api/docarray.array.storage.memory.find", "api/docarray.array.storage.memory.getsetdel", "api/docarray.array.storage.memory.seqlike", "api/docarray.array.storage.qdrant", "api/docarray.array.storage.qdrant.backend", "api/docarray.array.storage.qdrant.find", "api/docarray.array.storage.qdrant.getsetdel", "api/docarray.array.storage.qdrant.helper", "api/docarray.array.storage.qdrant.seqlike", "api/docarray.array.storage.redis", "api/docarray.array.storage.redis.backend", "api/docarray.array.storage.redis.find", "api/docarray.array.storage.redis.getsetdel", "api/docarray.array.storage.redis.seqlike", "api/docarray.array.storage.registry", "api/docarray.array.storage.sqlite", "api/docarray.array.storage.sqlite.backend", "api/docarray.array.storage.sqlite.getsetdel", "api/docarray.array.storage.sqlite.helper", "api/docarray.array.storage.sqlite.seqlike", "api/docarray.array.storage.weaviate", "api/docarray.array.storage.weaviate.backend", "api/docarray.array.storage.weaviate.find", "api/docarray.array.storage.weaviate.getsetdel", "api/docarray.array.storage.weaviate.seqlike", "api/docarray.array.weaviate", "api/docarray.base", "api/docarray.dataclasses", "api/docarray.dataclasses.enums", "api/docarray.dataclasses.getter", "api/docarray.dataclasses.setter", "api/docarray.dataclasses.types", "api/docarray.document", "api/docarray.document.data", "api/docarray.document.generators", "api/docarray.document.mixins", "api/docarray.document.mixins.attribute", "api/docarray.document.mixins.audio", "api/docarray.document.mixins.blob", "api/docarray.document.mixins.content", "api/docarray.document.mixins.convert", "api/docarray.document.mixins.dump", "api/docarray.document.mixins.featurehash", "api/docarray.document.mixins.helper", "api/docarray.document.mixins.image", "api/docarray.document.mixins.mesh", "api/docarray.document.mixins.multimodal", "api/docarray.document.mixins.plot", "api/docarray.document.mixins.porting", "api/docarray.document.mixins.property", "api/docarray.document.mixins.protobuf", "api/docarray.document.mixins.pydantic", "api/docarray.document.mixins.rich_embedding", "api/docarray.document.mixins.strawberry", "api/docarray.document.mixins.sugar", "api/docarray.document.mixins.text", "api/docarray.document.mixins.video", "api/docarray.document.pydantic_model", "api/docarray.document.strawberry_type", "api/docarray.helper", "api/docarray.math", "api/docarray.math.distance", "api/docarray.math.distance.numpy", "api/docarray.math.distance.paddle", "api/docarray.math.distance.tensorflow", "api/docarray.math.distance.torch", "api/docarray.math.evaluation", "api/docarray.math.helper", "api/docarray.math.ndarray", "api/docarray.proto", "api/docarray.proto.docarray_pb2", "api/docarray.proto.io", "api/docarray.proto.io.ndarray", "api/docarray.proto.pb", "api/docarray.proto.pb.docarray_pb2", "api/docarray.proto.pb2", "api/docarray.proto.pb2.docarray_pb2", "api/docarray.score", "api/docarray.score.data", "api/docarray.score.mixins", "api/docarray.score.mixins.property", "api/docarray.score.mixins.representer", "api/docarray.typing", "api/modules", "changelog/index", "datatypes/audio/index", "datatypes/image/index", "datatypes/index", "datatypes/mesh/index", "datatypes/multimodal/index", "datatypes/tabular/index", "datatypes/text/index", "datatypes/video/index", "fundamentals/cloud-support/data", "fundamentals/cloud-support/index", "fundamentals/cloud-support/login", "fundamentals/dataclass/access", "fundamentals/dataclass/construct", "fundamentals/dataclass/example", "fundamentals/dataclass/index", "fundamentals/dataclass/new-type", "fundamentals/document/attribute", "fundamentals/document/construct", "fundamentals/document/embedding", "fundamentals/document/fluent-interface", "fundamentals/document/index", "fundamentals/document/nested", "fundamentals/document/serialization", "fundamentals/document/visualization", "fundamentals/documentarray/access-attributes", "fundamentals/documentarray/access-elements", "fundamentals/documentarray/construct", "fundamentals/documentarray/embedding", "fundamentals/documentarray/evaluation", "fundamentals/documentarray/find", "fundamentals/documentarray/index", "fundamentals/documentarray/matching", "fundamentals/documentarray/parallelization", "fundamentals/documentarray/post-external", "fundamentals/documentarray/serialization", "fundamentals/documentarray/subindex", "fundamentals/documentarray/visualization", "fundamentals/fastapi-support/index", "fundamentals/notebook-support/index", "get-started/install", "get-started/what-is", "index", "proto/docs", "proto/index"], "filenames": ["advanced/document-store/annlite.md", "advanced/document-store/benchmark.md", "advanced/document-store/elasticsearch.md", "advanced/document-store/extend.md", "advanced/document-store/index.md", "advanced/document-store/qdrant.md", "advanced/document-store/redis.md", "advanced/document-store/sqlite.md", "advanced/document-store/weaviate.md", "advanced/graphql-support/index.md", "advanced/torch-support/index.md", "api.rst", "api/docarray.rst", "api/docarray.array.rst", "api/docarray.array.annlite.rst", "api/docarray.array.base.rst", "api/docarray.array.chunk.rst", "api/docarray.array.document.rst", "api/docarray.array.elastic.rst", "api/docarray.array.match.rst", "api/docarray.array.memory.rst", "api/docarray.array.mixins.rst", "api/docarray.array.mixins.content.rst", "api/docarray.array.mixins.dataloader.rst", "api/docarray.array.mixins.dataloader.helper.rst", "api/docarray.array.mixins.delitem.rst", "api/docarray.array.mixins.embed.rst", "api/docarray.array.mixins.empty.rst", "api/docarray.array.mixins.evaluation.rst", "api/docarray.array.mixins.find.rst", "api/docarray.array.mixins.getattr.rst", "api/docarray.array.mixins.getitem.rst", "api/docarray.array.mixins.group.rst", "api/docarray.array.mixins.io.rst", "api/docarray.array.mixins.io.binary.rst", "api/docarray.array.mixins.io.common.rst", "api/docarray.array.mixins.io.csv.rst", "api/docarray.array.mixins.io.dataframe.rst", "api/docarray.array.mixins.io.from_gen.rst", "api/docarray.array.mixins.io.json.rst", "api/docarray.array.mixins.io.pbar.rst", "api/docarray.array.mixins.io.pushpull.rst", "api/docarray.array.mixins.match.rst", "api/docarray.array.mixins.parallel.rst", "api/docarray.array.mixins.plot.rst", "api/docarray.array.mixins.post.rst", "api/docarray.array.mixins.pydantic.rst", "api/docarray.array.mixins.reduce.rst", "api/docarray.array.mixins.sample.rst", "api/docarray.array.mixins.setitem.rst", "api/docarray.array.mixins.strawberry.rst", "api/docarray.array.mixins.text.rst", "api/docarray.array.mixins.traverse.rst", "api/docarray.array.qdrant.rst", "api/docarray.array.queryset.rst", "api/docarray.array.queryset.lookup.rst", "api/docarray.array.queryset.parser.rst", "api/docarray.array.redis.rst", "api/docarray.array.sqlite.rst", "api/docarray.array.storage.rst", "api/docarray.array.storage.annlite.rst", "api/docarray.array.storage.annlite.backend.rst", "api/docarray.array.storage.annlite.find.rst", "api/docarray.array.storage.annlite.getsetdel.rst", "api/docarray.array.storage.annlite.helper.rst", "api/docarray.array.storage.annlite.seqlike.rst", "api/docarray.array.storage.base.rst", "api/docarray.array.storage.base.backend.rst", "api/docarray.array.storage.base.getsetdel.rst", "api/docarray.array.storage.base.helper.rst", "api/docarray.array.storage.base.seqlike.rst", "api/docarray.array.storage.elastic.rst", "api/docarray.array.storage.elastic.backend.rst", "api/docarray.array.storage.elastic.find.rst", "api/docarray.array.storage.elastic.getsetdel.rst", "api/docarray.array.storage.elastic.seqlike.rst", "api/docarray.array.storage.memory.rst", "api/docarray.array.storage.memory.backend.rst", "api/docarray.array.storage.memory.find.rst", "api/docarray.array.storage.memory.getsetdel.rst", "api/docarray.array.storage.memory.seqlike.rst", "api/docarray.array.storage.qdrant.rst", "api/docarray.array.storage.qdrant.backend.rst", "api/docarray.array.storage.qdrant.find.rst", "api/docarray.array.storage.qdrant.getsetdel.rst", "api/docarray.array.storage.qdrant.helper.rst", "api/docarray.array.storage.qdrant.seqlike.rst", "api/docarray.array.storage.redis.rst", "api/docarray.array.storage.redis.backend.rst", "api/docarray.array.storage.redis.find.rst", "api/docarray.array.storage.redis.getsetdel.rst", "api/docarray.array.storage.redis.seqlike.rst", "api/docarray.array.storage.registry.rst", "api/docarray.array.storage.sqlite.rst", "api/docarray.array.storage.sqlite.backend.rst", "api/docarray.array.storage.sqlite.getsetdel.rst", "api/docarray.array.storage.sqlite.helper.rst", "api/docarray.array.storage.sqlite.seqlike.rst", "api/docarray.array.storage.weaviate.rst", "api/docarray.array.storage.weaviate.backend.rst", "api/docarray.array.storage.weaviate.find.rst", "api/docarray.array.storage.weaviate.getsetdel.rst", "api/docarray.array.storage.weaviate.seqlike.rst", "api/docarray.array.weaviate.rst", "api/docarray.base.rst", "api/docarray.dataclasses.rst", "api/docarray.dataclasses.enums.rst", "api/docarray.dataclasses.getter.rst", "api/docarray.dataclasses.setter.rst", "api/docarray.dataclasses.types.rst", "api/docarray.document.rst", "api/docarray.document.data.rst", "api/docarray.document.generators.rst", "api/docarray.document.mixins.rst", "api/docarray.document.mixins.attribute.rst", "api/docarray.document.mixins.audio.rst", "api/docarray.document.mixins.blob.rst", "api/docarray.document.mixins.content.rst", "api/docarray.document.mixins.convert.rst", "api/docarray.document.mixins.dump.rst", "api/docarray.document.mixins.featurehash.rst", "api/docarray.document.mixins.helper.rst", "api/docarray.document.mixins.image.rst", "api/docarray.document.mixins.mesh.rst", "api/docarray.document.mixins.multimodal.rst", "api/docarray.document.mixins.plot.rst", "api/docarray.document.mixins.porting.rst", "api/docarray.document.mixins.property.rst", "api/docarray.document.mixins.protobuf.rst", "api/docarray.document.mixins.pydantic.rst", "api/docarray.document.mixins.rich_embedding.rst", "api/docarray.document.mixins.strawberry.rst", "api/docarray.document.mixins.sugar.rst", "api/docarray.document.mixins.text.rst", "api/docarray.document.mixins.video.rst", "api/docarray.document.pydantic_model.rst", "api/docarray.document.strawberry_type.rst", "api/docarray.helper.rst", "api/docarray.math.rst", "api/docarray.math.distance.rst", "api/docarray.math.distance.numpy.rst", "api/docarray.math.distance.paddle.rst", "api/docarray.math.distance.tensorflow.rst", "api/docarray.math.distance.torch.rst", "api/docarray.math.evaluation.rst", "api/docarray.math.helper.rst", "api/docarray.math.ndarray.rst", "api/docarray.proto.rst", "api/docarray.proto.docarray_pb2.rst", "api/docarray.proto.io.rst", "api/docarray.proto.io.ndarray.rst", "api/docarray.proto.pb.rst", "api/docarray.proto.pb.docarray_pb2.rst", "api/docarray.proto.pb2.rst", "api/docarray.proto.pb2.docarray_pb2.rst", "api/docarray.score.rst", "api/docarray.score.data.rst", "api/docarray.score.mixins.rst", "api/docarray.score.mixins.property.rst", "api/docarray.score.mixins.representer.rst", "api/docarray.typing.rst", "api/modules.rst", "changelog/index.md", "datatypes/audio/index.md", "datatypes/image/index.md", "datatypes/index.md", "datatypes/mesh/index.md", "datatypes/multimodal/index.md", "datatypes/tabular/index.md", "datatypes/text/index.md", "datatypes/video/index.md", "fundamentals/cloud-support/data.md", "fundamentals/cloud-support/index.md", "fundamentals/cloud-support/login.md", "fundamentals/dataclass/access.md", "fundamentals/dataclass/construct.md", "fundamentals/dataclass/example.md", "fundamentals/dataclass/index.md", "fundamentals/dataclass/new-type.md", "fundamentals/document/attribute.md", "fundamentals/document/construct.md", "fundamentals/document/embedding.md", "fundamentals/document/fluent-interface.md", "fundamentals/document/index.md", "fundamentals/document/nested.md", "fundamentals/document/serialization.md", "fundamentals/document/visualization.md", "fundamentals/documentarray/access-attributes.md", "fundamentals/documentarray/access-elements.md", "fundamentals/documentarray/construct.md", "fundamentals/documentarray/embedding.md", "fundamentals/documentarray/evaluation.md", "fundamentals/documentarray/find.md", "fundamentals/documentarray/index.md", "fundamentals/documentarray/matching.md", "fundamentals/documentarray/parallelization.md", "fundamentals/documentarray/post-external.md", "fundamentals/documentarray/serialization.md", "fundamentals/documentarray/subindex.md", "fundamentals/documentarray/visualization.md", "fundamentals/fastapi-support/index.md", "fundamentals/notebook-support/index.md", "get-started/install.md", "get-started/what-is.md", "index.md", "proto/docs.md", "proto/index.md"], "titles": ["Annlite", "One Million Scale Benchmark", "Elasticsearch", "Add New Document Store", "Document Store", "Qdrant", "Redis", "SQLite", "Weaviate", "GraphQL", "PyTorch/Deep Learning Frameworks", "<span class=\"fab fa-python\"></span> Python API", "docarray package", "docarray.array package", "docarray.array.annlite module", "docarray.array.base module", "docarray.array.chunk module", "docarray.array.document module", "docarray.array.elastic module", "docarray.array.match module", "docarray.array.memory module", "docarray.array.mixins package", "docarray.array.mixins.content module", "docarray.array.mixins.dataloader package", "docarray.array.mixins.dataloader.helper module", "docarray.array.mixins.delitem module", "docarray.array.mixins.embed module", "docarray.array.mixins.empty module", "docarray.array.mixins.evaluation module", "docarray.array.mixins.find module", "docarray.array.mixins.getattr module", "docarray.array.mixins.getitem module", "docarray.array.mixins.group module", "docarray.array.mixins.io package", "docarray.array.mixins.io.binary module", "docarray.array.mixins.io.common module", "docarray.array.mixins.io.csv module", "docarray.array.mixins.io.dataframe module", "docarray.array.mixins.io.from_gen module", "docarray.array.mixins.io.json module", "docarray.array.mixins.io.pbar module", "docarray.array.mixins.io.pushpull module", "docarray.array.mixins.match module", "docarray.array.mixins.parallel module", "docarray.array.mixins.plot module", "docarray.array.mixins.post module", "docarray.array.mixins.pydantic module", "docarray.array.mixins.reduce module", "docarray.array.mixins.sample module", "docarray.array.mixins.setitem module", "docarray.array.mixins.strawberry module", "docarray.array.mixins.text module", "docarray.array.mixins.traverse module", "docarray.array.qdrant module", "docarray.array.queryset package", "docarray.array.queryset.lookup module", "docarray.array.queryset.parser module", "docarray.array.redis module", "docarray.array.sqlite module", "docarray.array.storage package", "docarray.array.storage.annlite package", "docarray.array.storage.annlite.backend module", "docarray.array.storage.annlite.find module", "docarray.array.storage.annlite.getsetdel module", "docarray.array.storage.annlite.helper module", "docarray.array.storage.annlite.seqlike module", "docarray.array.storage.base package", "docarray.array.storage.base.backend module", "docarray.array.storage.base.getsetdel module", "docarray.array.storage.base.helper module", "docarray.array.storage.base.seqlike module", "docarray.array.storage.elastic package", "docarray.array.storage.elastic.backend module", "docarray.array.storage.elastic.find module", "docarray.array.storage.elastic.getsetdel module", "docarray.array.storage.elastic.seqlike module", "docarray.array.storage.memory package", "docarray.array.storage.memory.backend module", "docarray.array.storage.memory.find module", "docarray.array.storage.memory.getsetdel module", "docarray.array.storage.memory.seqlike module", "docarray.array.storage.qdrant package", "docarray.array.storage.qdrant.backend module", "docarray.array.storage.qdrant.find module", "docarray.array.storage.qdrant.getsetdel module", "docarray.array.storage.qdrant.helper module", "docarray.array.storage.qdrant.seqlike module", "docarray.array.storage.redis package", "docarray.array.storage.redis.backend module", "docarray.array.storage.redis.find module", "docarray.array.storage.redis.getsetdel module", "docarray.array.storage.redis.seqlike module", "docarray.array.storage.registry module", "docarray.array.storage.sqlite package", "docarray.array.storage.sqlite.backend module", "docarray.array.storage.sqlite.getsetdel module", "docarray.array.storage.sqlite.helper module", "docarray.array.storage.sqlite.seqlike module", "docarray.array.storage.weaviate package", "docarray.array.storage.weaviate.backend module", "docarray.array.storage.weaviate.find module", "docarray.array.storage.weaviate.getsetdel module", "docarray.array.storage.weaviate.seqlike module", "docarray.array.weaviate module", "docarray.base module", "docarray.dataclasses package", "docarray.dataclasses.enums module", "docarray.dataclasses.getter module", "docarray.dataclasses.setter module", "docarray.dataclasses.types module", "docarray.document package", "docarray.document.data module", "docarray.document.generators module", "docarray.document.mixins package", "docarray.document.mixins.attribute module", "docarray.document.mixins.audio module", "docarray.document.mixins.blob module", "docarray.document.mixins.content module", "docarray.document.mixins.convert module", "docarray.document.mixins.dump module", "docarray.document.mixins.featurehash module", "docarray.document.mixins.helper module", "docarray.document.mixins.image module", "docarray.document.mixins.mesh module", "docarray.document.mixins.multimodal module", "docarray.document.mixins.plot module", "docarray.document.mixins.porting module", "docarray.document.mixins.property module", "docarray.document.mixins.protobuf module", "docarray.document.mixins.pydantic module", "docarray.document.mixins.rich_embedding module", "docarray.document.mixins.strawberry module", "docarray.document.mixins.sugar module", "docarray.document.mixins.text module", "docarray.document.mixins.video module", "docarray.document.pydantic_model module", "docarray.document.strawberry_type module", "docarray.helper module", "docarray.math package", "docarray.math.distance package", "docarray.math.distance.numpy module", "docarray.math.distance.paddle module", "docarray.math.distance.tensorflow module", "docarray.math.distance.torch module", "docarray.math.evaluation module", "docarray.math.helper module", "docarray.math.ndarray module", "docarray.proto package", "docarray.proto.docarray_pb2 module", "docarray.proto.io package", "docarray.proto.io.ndarray module", "docarray.proto.pb package", "docarray.proto.pb.docarray_pb2 module", "docarray.proto.pb2 package", "docarray.proto.pb2.docarray_pb2 module", "docarray.score package", "docarray.score.data module", "docarray.score.mixins package", "docarray.score.mixins.property module", "docarray.score.mixins.representer module", "docarray.typing package", "docarray", "Changelog", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-unmute\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.563 2.069A.75.75 0 018 2.75v10.5a.75.75 0 01-1.238.57L3.472 11H1.75A1.75 1.75 0 010 9.25v-2.5C0 5.784.784 5 1.75 5h1.723l3.289-2.82a.75.75 0 01.801-.111zM6.5 4.38L4.238 6.319a.75.75 0 01-.488.181h-2a.25.25 0 00-.25.25v2.5c0 .138.112.25.25.25h2a.75.75 0 01.488.18L6.5 11.62V4.38zm6.096-2.038a.75.75 0 011.06 0 8 8 0 010 11.314.75.75 0 01-1.06-1.06 6.5 6.5 0 000-9.193.75.75 0 010-1.06v-.001zm-1.06 2.121a.75.75 0 10-1.061 1.061 3.5 3.5 0 010 4.95.75.75 0 101.06 1.06 5 5 0 000-7.07l.001-.001z\"></path></svg> Audio", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-image\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M1.75 2.5a.25.25 0 00-.25.25v10.5c0 .138.112.25.25.25h.94a.76.76 0 01.03-.03l6.077-6.078a1.75 1.75 0 012.412-.06L14.5 10.31V2.75a.25.25 0 00-.25-.25H1.75zm12.5 11H4.81l5.048-5.047a.25.25 0 01.344-.009l4.298 3.889v.917a.25.25 0 01-.25.25zm1.75-.25V2.75A1.75 1.75 0 0014.25 1H1.75A1.75 1.75 0 000 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0016 13.25zM5.5 6a.5.5 0 11-1 0 .5.5 0 011 0zM7 6a2 2 0 11-4 0 2 2 0 014 0z\"></path></svg> Image", "Multimodal Data", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-package\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M8.878.392a1.75 1.75 0 00-1.756 0l-5.25 3.045A1.75 1.75 0 001 4.951v6.098c0 .624.332 1.2.872 1.514l5.25 3.045a1.75 1.75 0 001.756 0l5.25-3.045c.54-.313.872-.89.872-1.514V4.951c0-.624-.332-1.2-.872-1.514L8.878.392zM7.875 1.69a.25.25 0 01.25 0l4.63 2.685L8 7.133 3.245 4.375l4.63-2.685zM2.5 5.677v5.372c0 .09.047.171.125.216l4.625 2.683V8.432L2.5 5.677zm6.25 8.271l4.625-2.683a.25.25 0 00.125-.216V5.677L8.75 8.432v5.516z\"></path></svg> 3D Mesh", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-stack\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.122.392a1.75 1.75 0 011.756 0l5.003 2.902c.83.481.83 1.68 0 2.162L8.878 8.358a1.75 1.75 0 01-1.756 0L2.119 5.456a1.25 1.25 0 010-2.162L7.122.392zM8.125 1.69a.25.25 0 00-.25 0l-4.63 2.685 4.63 2.685a.25.25 0 00.25 0l4.63-2.685-4.63-2.685zM1.601 7.789a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0L1.874 8.814A.75.75 0 011.6 7.789zm0 3.5a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0l-5.248-3.044a.75.75 0 01-.273-1.025z\"></path></svg> Multi-modal", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-table\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v3.585a.746.746 0 010 .83v8.085A1.75 1.75 0 0114.25 16H6.309a.748.748 0 01-1.118 0H1.75A1.75 1.75 0 010 14.25V6.165a.746.746 0 010-.83V1.75zM1.5 6.5v7.75c0 .138.112.25.25.25H5v-8H1.5zM5 5H1.5V1.75a.25.25 0 01.25-.25H5V5zm1.5 1.5v8h7.75a.25.25 0 00.25-.25V6.5h-8zm8-1.5h-8V1.5h7.75a.25.25 0 01.25.25V5z\"></path></svg> Table", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-typography\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M6.21 8.5L4.574 3.594 2.857 8.5H6.21zm.5 1.5l.829 2.487a.75.75 0 001.423-.474L5.735 2.332a1.216 1.216 0 00-2.302-.018l-3.39 9.688a.75.75 0 001.415.496L2.332 10H6.71zm3.13-4.358C10.53 4.374 11.87 4 13 4c1.5 0 3 .939 3 2.601v5.649a.75.75 0 01-1.448.275C13.995 12.82 13.3 13 12.5 13c-.77 0-1.514-.231-2.078-.709-.577-.488-.922-1.199-.922-2.041 0-.694.265-1.411.887-1.944C11 7.78 11.88 7.5 13 7.5h1.5v-.899c0-.54-.5-1.101-1.5-1.101-.869 0-1.528.282-1.84.858a.75.75 0 11-1.32-.716zM14.5 9H13c-.881 0-1.375.22-1.637.444-.253.217-.363.5-.363.806 0 .408.155.697.39.896.249.21.63.354 1.11.354.732 0 1.26-.209 1.588-.449.35-.257.412-.495.412-.551V9z\"></path></svg> Text", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-device-camera-video\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M16 3.75a.75.75 0 00-1.136-.643L11 5.425V4.75A1.75 1.75 0 009.25 3h-7.5A1.75 1.75 0 000 4.75v6.5C0 12.216.784 13 1.75 13h7.5A1.75 1.75 0 0011 11.25v-.675l3.864 2.318A.75.75 0 0016 12.25v-8.5zm-5 5.075l3.5 2.1v-5.85l-3.5 2.1v1.65zM9.5 6.75v-2a.25.25 0 00-.25-.25h-7.5a.25.25 0 00-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-4.5z\"></path></svg> Video", "Data Management", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-rocket\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M14.064 0a8.75 8.75 0 00-6.187 2.563l-.459.458c-.314.314-.616.641-.904.979H3.31a1.75 1.75 0 00-1.49.833L.11 7.607a.75.75 0 00.418 1.11l3.102.954c.037.051.079.1.124.145l2.429 2.428c.046.046.094.088.145.125l.954 3.102a.75.75 0 001.11.418l2.774-1.707a1.75 1.75 0 00.833-1.49V9.485c.338-.288.665-.59.979-.904l.458-.459A8.75 8.75 0 0016 1.936V1.75A1.75 1.75 0 0014.25 0h-.186zM10.5 10.625c-.088.06-.177.118-.266.175l-2.35 1.521.548 1.783 1.949-1.2a.25.25 0 00.119-.213v-2.066zM3.678 8.116L5.2 5.766c.058-.09.117-.178.176-.266H3.309a.25.25 0 00-.213.119l-1.2 1.95 1.782.547zm5.26-4.493A7.25 7.25 0 0114.063 1.5h.186a.25.25 0 01.25.25v.186a7.25 7.25 0 01-2.123 5.127l-.459.458a15.21 15.21 0 01-2.499 2.02l-2.317 1.5-2.143-2.143 1.5-2.317a15.25 15.25 0 012.02-2.5l.458-.458h.002zM12 5a1 1 0 11-2 0 1 1 0 012 0zm-8.44 9.56a1.5 1.5 0 10-2.12-2.12c-.734.73-1.047 2.332-1.15 3.003a.23.23 0 00.265.265c.671-.103 2.273-.416 3.005-1.148z\"></path></svg> Cloud Support", "Authentication", "Access Modality", "Construct", "Process Modality", "Dataclass", "Support New Modality", "Access Attributes", "Construct", "Embedding", "Fluent Interface", "Document", "Nested Structure", "Serialization", "Visualization", "Access Attributes", "Access Documents", "Construct", "Embed via Neural Network", "Evaluate Matches", "Query by Conditions", "DocumentArray", "Find Nearest Neighbours", "Parallelization", "Process via External Flow or Executor", "Serialization", "Search over Nested Structure", "Visualization", "FastAPI/Pydantic", "Jupyter Notebook/Colab", "Install", "What is DocArray?", "Welcome to DocArray!", "Protocol Documentation", "Protocol Documentation"], "terms": {"One": [0, 2, 3, 4, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 162, 164, 168, 169, 170, 175, 177, 179, 180, 183, 185, 187, 188, 189, 191, 192, 194, 195, 196, 197, 200, 203, 204], "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 32, 34, 35, 36, 39, 41, 42, 43, 44, 45, 53, 57, 58, 68, 71, 73, 87, 89, 103, 110, 112, 113, 122, 124, 128, 132, 133, 134, 137, 139, 142, 143, 144, 145, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 34, 35, 36, 39, 40, 41, 42, 43, 44, 47, 51, 52, 53, 55, 57, 58, 68, 71, 73, 87, 89, 103, 109, 110, 112, 113, 116, 118, 120, 122, 125, 126, 132, 133, 137, 144, 162, 163, 164, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "document": [0, 1, 2, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 32, 34, 36, 42, 43, 44, 45, 47, 48, 51, 52, 53, 55, 57, 58, 60, 65, 70, 71, 73, 75, 76, 80, 81, 84, 86, 87, 89, 91, 93, 97, 98, 102, 103, 104, 105, 106, 108, 109, 137, 144, 146, 149, 155, 161, 163, 164, 165, 166, 168, 176, 177, 178, 179, 182, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204], "store": [0, 2, 5, 6, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 32, 34, 36, 41, 42, 44, 53, 57, 58, 98, 99, 103, 110, 113, 118, 122, 123, 125, 137, 162, 166, 167, 168, 169, 170, 171, 174, 177, 178, 179, 182, 188, 191, 192, 193, 194, 197, 198, 201, 203, 204], "documentarrai": [0, 1, 7, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 57, 58, 60, 65, 68, 70, 71, 73, 75, 76, 78, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 110, 111, 113, 124, 132, 133, 146, 164, 165, 167, 168, 169, 171, 172, 176, 177, 180, 182, 183, 184, 185, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 202, 203, 204], "It": [0, 2, 3, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 26, 36, 44, 53, 55, 57, 58, 103, 162, 164, 166, 175, 176, 177, 180, 181, 185, 188, 191, 193, 195, 196, 197, 198, 202, 203, 204], "i": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 32, 34, 35, 36, 39, 41, 42, 43, 44, 47, 48, 51, 52, 53, 55, 57, 58, 60, 65, 67, 68, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 109, 110, 112, 113, 115, 116, 118, 119, 122, 125, 132, 133, 134, 135, 137, 139, 144, 145, 146, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206], "when": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 32, 34, 36, 42, 43, 44, 47, 52, 53, 57, 58, 71, 73, 87, 89, 103, 109, 110, 112, 113, 122, 123, 132, 145, 162, 164, 167, 169, 175, 178, 179, 180, 184, 185, 186, 187, 188, 190, 191, 193, 194, 196, 197, 198, 200, 203, 205, 206], "one": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 32, 42, 43, 45, 47, 52, 53, 57, 58, 64, 103, 110, 112, 113, 123, 132, 144, 164, 168, 169, 170, 174, 175, 177, 178, 179, 180, 182, 185, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 201, 202, 203], "want": [0, 2, 3, 4, 5, 6, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 41, 44, 47, 53, 57, 58, 68, 103, 110, 113, 122, 137, 162, 164, 167, 168, 169, 174, 177, 178, 179, 180, 181, 183, 185, 187, 188, 190, 191, 195, 196, 197, 200, 202], "have": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 52, 53, 55, 57, 58, 103, 110, 113, 122, 144, 167, 169, 170, 171, 174, 175, 176, 177, 180, 181, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 200, 202, 203, 204, 205, 206], "faster": [0, 2, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 22, 34, 35, 53, 57, 58, 103, 181, 185, 195], "retriev": [0, 1, 2, 3, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 41, 42, 53, 57, 58, 71, 73, 87, 89, 103, 144, 145, 191, 198], "embed": [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26, 28, 36, 42, 44, 53, 57, 58, 103, 110, 111, 113, 120, 127, 132, 135, 136, 165, 169, 174, 175, 176, 183, 185, 186, 190, 191, 192, 194, 197, 198, 200, 202, 203, 204, 205, 206], "e": [0, 1, 2, 3, 4, 5, 6, 8, 9, 16, 112, 144, 164, 169, 177, 179, 180, 184, 185, 187, 188, 190, 191, 195, 196, 197, 203, 204], "match": [0, 2, 4, 5, 6, 8, 9, 12, 13, 14, 16, 17, 18, 20, 21, 28, 29, 47, 52, 53, 55, 57, 58, 71, 73, 87, 89, 103, 110, 111, 112, 113, 122, 125, 127, 132, 135, 136, 165, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 197, 198, 200, 203, 204, 205, 206], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 34, 36, 41, 42, 43, 44, 47, 52, 53, 55, 57, 58, 61, 64, 71, 72, 73, 77, 87, 88, 89, 94, 98, 99, 103, 104, 109, 110, 112, 113, 117, 118, 120, 122, 124, 125, 132, 133, 134, 135, 137, 144, 155, 162, 164, 166, 167, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "featur": [0, 1, 2, 3, 5, 6, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 110, 113, 120, 134, 162, 163, 165, 166, 167, 170, 174, 175, 177, 181, 182, 185, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204], "requir": [0, 2, 3, 4, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 28, 37, 53, 55, 57, 58, 63, 79, 95, 103, 110, 113, 120, 134, 164, 166, 167, 170, 175, 183, 184, 185, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206], "you": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 37, 41, 42, 43, 44, 47, 53, 57, 58, 68, 71, 73, 87, 89, 103, 110, 112, 113, 122, 133, 135, 144, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "instal": [0, 2, 5, 6, 8, 9, 14, 37, 53, 103, 164, 166, 170, 185, 196, 197, 199, 200, 201], "via": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 39, 41, 43, 52, 53, 57, 58, 103, 164, 165, 166, 168, 170, 175, 177, 184, 185, 186, 187, 188, 194, 197, 200, 201, 202, 203, 204], "pip": [0, 2, 5, 6, 8, 9, 14, 53, 103, 164, 166, 170, 185, 196, 197, 199, 200, 201, 202, 204], "docarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 201], "instanti": [0, 2, 5, 6, 8, 18, 53, 57, 103, 165], "storag": [0, 1, 2, 3, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 29, 41, 53, 57, 58, 103, 169, 171, 198, 203], "like": [0, 1, 2, 3, 5, 6, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 28, 34, 38, 41, 44, 53, 57, 58, 65, 70, 75, 80, 91, 97, 102, 103, 110, 113, 115, 120, 122, 123, 128, 134, 140, 164, 166, 167, 169, 170, 174, 175, 179, 181, 183, 185, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 203, 205, 206], "so": [0, 3, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 41, 53, 55, 57, 58, 103, 110, 113, 133, 164, 176, 177, 178, 185, 187, 188, 191, 194, 195, 203], "from": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 24, 26, 28, 29, 32, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 47, 48, 51, 53, 55, 57, 58, 60, 65, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 104, 109, 110, 112, 113, 116, 118, 122, 123, 125, 126, 129, 131, 132, 133, 134, 135, 137, 144, 145, 146, 155, 162, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 176, 177, 178, 181, 182, 183, 186, 187, 188, 190, 191, 192, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206], "import": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 24, 26, 37, 43, 53, 57, 58, 103, 109, 110, 146, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204], "da": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 24, 36, 42, 43, 51, 53, 57, 58, 103, 162, 164, 167, 168, 169, 171, 174, 176, 181, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 203], "n_dim": [0, 2, 4, 5, 6, 8, 13, 14, 17, 18, 53, 57, 59, 60, 61, 71, 72, 81, 82, 84, 87, 88, 98, 99, 103, 110, 113, 120, 169, 198], "10": [0, 1, 2, 3, 4, 5, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 43, 44, 53, 57, 58, 98, 99, 103, 110, 113, 125, 169, 170, 171, 181, 187, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 202], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 32, 35, 41, 43, 47, 48, 51, 53, 55, 57, 58, 60, 65, 68, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 109, 110, 112, 113, 122, 125, 134, 137, 162, 164, 169, 170, 173, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206], "would": [0, 1, 2, 3, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103, 169, 177, 179, 183, 187, 189, 203], "same": [0, 1, 2, 3, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 32, 41, 42, 43, 44, 47, 53, 57, 58, 71, 73, 87, 89, 103, 110, 113, 122, 132, 146, 167, 169, 170, 175, 177, 180, 183, 184, 185, 187, 188, 191, 193, 197, 200, 201, 205, 206], "ordinari": [0, 2, 5, 6, 8], "To": [0, 2, 3, 4, 5, 6, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 28, 34, 42, 43, 53, 57, 58, 103, 110, 113, 133, 162, 163, 167, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 188, 189, 191, 192, 194, 195, 197, 198, 202, 206], "access": [0, 1, 2, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 117, 165, 171, 175, 177, 180, 182, 184, 192, 193, 198, 203], "formerli": [0, 2, 5, 7, 8], "persist": [0, 2, 3, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "specifi": [0, 2, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 24, 28, 29, 32, 34, 42, 44, 53, 57, 58, 71, 73, 87, 89, 103, 110, 112, 135, 137, 164, 175, 178, 180, 185, 188, 190, 191, 192, 194, 197, 198, 205, 206], "data_path": [0, 3, 4, 13, 14, 59, 60, 61, 64, 169, 198], "data": [0, 1, 2, 3, 4, 6, 8, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 23, 34, 35, 36, 39, 46, 47, 53, 57, 58, 60, 65, 69, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 110, 112, 113, 115, 116, 118, 119, 122, 123, 125, 126, 129, 131, 133, 134, 135, 137, 145, 155, 166, 168, 169, 172, 174, 175, 177, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "summari": [0, 2, 5, 6, 7, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 125, 166, 167, 168, 169, 171, 174, 175, 178, 180, 181, 184, 186, 187, 188, 189, 191, 192, 196, 197, 198], "note": [0, 1, 3, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 24, 28, 32, 35, 42, 53, 57, 58, 103, 110, 113, 120, 132, 134, 135, 137, 144, 162, 164, 170, 182, 184, 185, 188, 189, 190, 191, 194, 201, 202, 205, 206], "mandatori": [0, 5, 6], "befor": [0, 1, 5, 9, 14, 15, 16, 17, 18, 19, 20, 21, 24, 28, 32, 43, 53, 55, 57, 58, 103, 135, 162, 164, 167, 169, 174, 175, 176, 177, 195, 200, 202], "backend": [0, 1, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 42, 43, 53, 57, 58, 59, 60, 66, 68, 71, 73, 76, 81, 87, 89, 93, 98, 103, 110, 113, 132, 185, 192], "other": [0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 47, 53, 55, 57, 58, 68, 71, 73, 87, 89, 103, 104, 110, 113, 132, 135, 144, 155, 164, 165, 167, 175, 179, 181, 183, 185, 191, 195, 197, 198, 203, 205, 206], "function": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 34, 35, 36, 37, 38, 42, 43, 44, 45, 48, 49, 51, 52, 53, 55, 57, 58, 60, 61, 63, 71, 72, 77, 78, 79, 88, 94, 95, 98, 99, 103, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 129, 131, 133, 134, 135, 137, 144, 162, 164, 167, 169, 175, 178, 179, 182, 183, 190, 192, 194, 195, 203, 205, 206], "behav": [0, 2, 5, 6, 7, 8, 135, 187], "memori": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 28, 34, 43, 53, 57, 58, 59, 103, 167, 171, 180, 189, 190, 191, 193, 194, 197, 203, 204], "follow": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 29, 45, 53, 55, 57, 58, 68, 71, 73, 87, 89, 103, 110, 113, 125, 132, 162, 164, 166, 167, 174, 175, 176, 177, 180, 181, 182, 183, 185, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 202, 204], "set": [0, 2, 3, 4, 5, 6, 7, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 32, 34, 36, 41, 42, 43, 44, 47, 48, 53, 55, 57, 58, 71, 73, 87, 89, 103, 109, 110, 112, 113, 114, 116, 118, 120, 122, 125, 128, 132, 133, 134, 135, 137, 146, 162, 175, 177, 178, 179, 180, 181, 183, 185, 187, 188, 189, 190, 191, 194, 195, 197, 203], "name": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 14, 16, 17, 18, 19, 20, 21, 24, 26, 28, 32, 36, 41, 44, 53, 55, 57, 58, 59, 60, 64, 98, 99, 103, 104, 110, 112, 113, 115, 134, 137, 155, 166, 168, 171, 174, 175, 177, 179, 187, 188, 190, 192, 196, 198, 205, 206], "descript": [0, 2, 5, 6, 7, 8, 12, 40, 109, 155, 156, 157, 158, 167, 174, 175, 177, 183, 184, 192, 197, 205, 206], "default": [0, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 24, 26, 28, 29, 32, 35, 36, 39, 41, 42, 43, 48, 53, 57, 58, 60, 65, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 104, 109, 110, 112, 113, 118, 122, 132, 135, 137, 155, 175, 178, 185, 190, 191, 194, 195, 196, 197], "number": [0, 1, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 42, 43, 45, 48, 53, 57, 58, 60, 65, 67, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 99, 102, 103, 104, 110, 112, 113, 118, 120, 123, 125, 132, 137, 144, 145, 146, 155, 164, 166, 174, 179, 191, 192, 203, 205, 206], "dimens": [0, 1, 2, 5, 6, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103, 110, 112, 113, 120, 145, 170, 205, 206], "alwai": [0, 5, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 44, 53, 57, 58, 103, 146, 165, 168, 174, 175, 176, 182, 183, 185, 188, 190, 194, 205, 206], "folder": [0, 14, 16, 17, 18, 19, 20, 21, 41, 44, 53, 57, 58, 103], "where": [0, 2, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 34, 41, 42, 44, 51, 53, 57, 58, 103, 110, 113, 132, 133, 144, 146, 169, 170, 174, 178, 187, 188, 191, 195, 197, 202, 203], "locat": [0, 4, 6, 12, 110, 111, 113, 127, 135, 136, 183, 185, 197, 205, 206], "A": [0, 1, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 24, 28, 29, 42, 43, 47, 48, 52, 53, 55, 56, 57, 58, 78, 103, 110, 137, 164, 166, 174, 175, 177, 179, 183, 188, 192, 194, 201, 205, 206], "random": [0, 4, 5, 7, 9, 10, 14, 16, 17, 18, 19, 20, 21, 44, 48, 53, 57, 58, 103, 137, 180, 181, 187, 190, 191, 194, 198, 199, 200, 203], "temp": [0, 7], "metric": [0, 1, 2, 4, 5, 6, 8, 13, 14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 53, 57, 58, 59, 60, 61, 71, 73, 87, 89, 103, 110, 113, 132, 139, 144, 169, 183, 194, 198, 205, 206], "distanc": [0, 1, 2, 5, 6, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 53, 57, 58, 59, 71, 72, 73, 81, 82, 83, 87, 88, 89, 98, 99, 103, 110, 113, 132, 138, 145, 194], "dure": [0, 1, 3, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 41, 52, 53, 57, 58, 103, 110, 169, 180, 203], "cosin": [0, 2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 53, 57, 58, 60, 61, 71, 72, 73, 81, 82, 87, 88, 89, 103, 132, 138, 139, 140, 142, 143, 167, 169, 187, 194, 198], "dot": [0, 5, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 183], "euclidean": [0, 4, 5, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 138, 139, 140, 142, 143, 194], "ef_construct": [0, 1, 2, 5, 6, 8, 13, 14, 18, 53, 57, 59, 60, 61, 71, 72, 81, 82, 87, 88, 98, 99, 103, 198], "size": [0, 1, 2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 27, 32, 35, 38, 39, 43, 44, 53, 57, 58, 60, 64, 103, 110, 112, 113, 122, 125, 164, 166, 167, 170, 174, 191, 192, 197], "dynam": [0, 1, 2, 8, 183, 203, 205, 206], "list": [0, 1, 2, 3, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 28, 29, 32, 34, 38, 39, 41, 46, 47, 48, 50, 52, 53, 57, 58, 60, 61, 64, 65, 70, 71, 72, 73, 75, 76, 80, 81, 82, 86, 87, 88, 89, 91, 93, 97, 98, 99, 102, 103, 110, 111, 112, 113, 127, 128, 135, 136, 137, 144, 146, 165, 175, 179, 181, 183, 184, 185, 187, 188, 191, 193, 194, 196, 200, 203, 204, 205, 206], "nearest": [0, 2, 3, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 191, 192, 204], "neighbor": [0, 1, 2, 3, 6, 8, 14, 16, 17, 18, 19, 20, 21, 28, 29, 53, 57, 58, 71, 73, 87, 89, 103, 110, 113, 122], "construct": [0, 1, 2, 3, 5, 8, 110, 135, 174, 176, 177, 183, 188, 193], "none": [0, 2, 3, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 48, 52, 53, 57, 58, 60, 61, 64, 65, 69, 70, 71, 72, 73, 75, 76, 80, 81, 82, 86, 87, 88, 89, 91, 93, 94, 96, 97, 98, 99, 102, 103, 104, 109, 110, 111, 112, 113, 118, 122, 125, 126, 128, 132, 133, 134, 135, 136, 137, 144, 145, 146, 149, 150, 155, 156, 166, 167, 176, 179, 185, 189, 191, 197, 198, 200], "valu": [0, 1, 2, 3, 4, 5, 6, 8, 9, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 32, 39, 42, 43, 44, 47, 51, 53, 55, 57, 58, 60, 65, 67, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 104, 106, 108, 109, 110, 113, 122, 124, 126, 132, 133, 135, 137, 144, 145, 146, 150, 155, 156, 157, 158, 162, 167, 168, 169, 174, 175, 178, 179, 180, 183, 185, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 199, 200, 203], "packag": [0, 1, 134, 161, 163, 175, 181, 202, 203, 204], "ef_search": [0, 13, 14, 59, 60, 61, 198], "max_connect": [0, 1, 8, 13, 14, 59, 60, 61, 98, 99, 103, 198], "bi": [0, 1], "direct": [0, 1, 64], "link": [0, 1], "creat": [0, 1, 9, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 32, 34, 53, 55, 57, 58, 64, 67, 103, 109, 110, 112, 113, 134, 135, 137, 165, 166, 167, 169, 174, 175, 176, 179, 188, 191, 198, 203], "everi": [0, 1, 4, 14, 16, 17, 18, 19, 20, 21, 24, 28, 43, 44, 47, 53, 57, 58, 103, 162, 180, 191, 195], "new": [0, 1, 4, 8, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 64, 67, 103, 109, 110, 113, 122, 132, 135, 137, 162, 177, 188, 189, 198, 203], "element": [0, 1, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 34, 35, 36, 39, 42, 43, 48, 53, 55, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 110, 113, 132, 144, 146, 164, 183, 185, 187, 188, 193, 194, 195, 197, 203, 205, 206], "n_compon": [0, 13, 14, 59, 60, 61], "output": [0, 4, 6, 14, 16, 17, 18, 19, 20, 21, 23, 24, 36, 43, 44, 48, 53, 57, 58, 103, 110, 113, 120, 122, 125, 137, 162, 167, 169, 174, 185, 190, 200, 201, 202, 203], "pca": 0, "model": [0, 8, 14, 16, 17, 18, 19, 20, 21, 26, 28, 46, 50, 53, 57, 58, 103, 110, 113, 122, 129, 131, 132, 135, 165, 166, 169, 174, 176, 177, 181, 182, 185, 190, 197, 205, 206], "should": [0, 3, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 40, 43, 53, 57, 58, 68, 103, 110, 112, 113, 120, 125, 133, 135, 162, 164, 171, 176, 177, 180, 181, 185, 191, 194, 195, 202, 203, 204], "posit": [0, 1, 3, 4, 8, 14, 16, 18, 19, 20, 53, 57, 58, 60, 65, 69, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 144, 183, 205, 206], "less": [0, 1, 5, 6, 8, 137, 162, 185, 192, 197], "than": [0, 1, 2, 3, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 57, 58, 103, 110, 113, 133, 137, 169, 179, 181, 188, 191, 192, 195, 197, 200, 205, 206], "": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 26, 28, 29, 41, 47, 53, 55, 57, 58, 60, 65, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 137, 163, 164, 166, 167, 169, 170, 173, 174, 176, 179, 181, 186, 187, 190, 191, 192, 194, 195, 197, 200, 201, 203], "list_lik": [0, 2, 3, 4, 5, 6, 7, 8, 13, 14, 18, 53, 57, 58, 59, 60, 61, 69, 71, 72, 81, 82, 87, 88, 93, 94, 98, 99, 103], "control": [0, 1, 2, 3, 5, 6, 7, 8, 9, 162, 170, 185, 189], "order": [0, 2, 3, 4, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 24, 32, 47, 53, 57, 58, 103, 109, 137, 144, 171, 188], "databas": [0, 1, 2, 3, 4, 5, 6, 7, 8, 58, 64, 137, 162, 169, 204], "disabl": [0, 2, 3, 4, 5, 6, 7, 8, 40], "break": [0, 2, 5, 6, 7, 8, 162, 187], "improv": [0, 1, 2, 4, 5, 6, 7, 8, 195, 201, 203], "perform": [0, 1, 2, 3, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103, 135, 137, 165, 183, 195, 202, 203, 205, 206], "true": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 28, 34, 36, 38, 40, 41, 42, 44, 53, 55, 57, 58, 60, 61, 64, 69, 71, 72, 81, 82, 87, 88, 93, 94, 98, 99, 103, 109, 110, 112, 113, 122, 124, 125, 134, 135, 137, 146, 171, 173, 174, 175, 180, 181, 185, 187, 188, 189, 190, 191, 192, 194, 196, 197, 198, 199, 200, 201], "check": [0, 3, 4, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 55, 57, 58, 103, 146, 167, 179, 185, 188, 191, 197, 200], "sourc": [0, 3, 6, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 142, 143, 144, 145, 146, 149, 150, 155, 156, 157, 158, 159, 163, 166, 196], "code": [0, 1, 2, 4, 5, 6, 8, 9, 11, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 110, 113, 117, 152, 154, 176, 177, 179, 189, 191, 195, 196, 197, 203, 204], "restrict": [0, 2, 5, 6, 8, 55, 110, 113, 134, 163, 174, 188, 197, 200], "user": [0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 14, 17, 20, 53, 58, 103, 110, 162, 164, 171, 177, 181, 189, 192, 193, 194, 197, 200], "defin": [0, 2, 3, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 36, 52, 53, 57, 58, 103, 109, 112, 164, 166, 167, 169, 174, 177, 178, 179, 185, 189, 191, 192, 194, 200, 205, 206], "guidelin": [0, 2, 5, 8], "provid": [0, 1, 2, 3, 4, 6, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 25, 28, 29, 30, 31, 38, 42, 43, 47, 48, 49, 53, 55, 57, 58, 61, 68, 71, 72, 73, 74, 77, 78, 87, 88, 89, 90, 94, 99, 101, 103, 110, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 129, 131, 132, 133, 134, 144, 164, 169, 175, 177, 182, 183, 185, 187, 188, 191, 195, 197, 203], "repositori": [0, 1, 176], "consid": [0, 1, 2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 51, 53, 57, 58, 71, 73, 87, 89, 103, 110, 112, 113, 120, 132, 144, 169, 175, 177, 188, 189, 191, 192, 193, 197], "certain": [0, 2, 4, 8, 14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 103, 164, 184, 188, 200], "tag": [0, 1, 4, 5, 8, 12, 14, 16, 17, 18, 19, 20, 21, 24, 28, 29, 32, 36, 53, 55, 57, 58, 71, 73, 87, 89, 103, 110, 111, 113, 120, 127, 134, 135, 136, 166, 167, 168, 169, 175, 177, 180, 183, 185, 187, 191, 192, 197, 205, 206], "price": [0, 2, 4, 5, 6, 8, 14, 17], "all": [0, 1, 2, 3, 4, 6, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 34, 36, 41, 42, 44, 47, 51, 52, 53, 55, 57, 58, 71, 73, 87, 89, 103, 104, 110, 113, 118, 122, 128, 132, 133, 134, 135, 144, 146, 155, 162, 164, 167, 169, 171, 172, 174, 175, 177, 178, 179, 181, 182, 187, 188, 189, 191, 192, 193, 195, 199, 200, 201, 202, 203, 204], "lower": [0, 1, 2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 185, 191], "equal": [0, 1, 2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 22, 44, 53, 57, 58, 103, 191, 192], "some": [0, 1, 2, 3, 4, 6, 8, 9, 10, 17, 20, 104, 110, 155, 162, 163, 164, 165, 167, 169, 175, 177, 181, 184, 185, 187, 189, 191, 192, 194, 195, 196, 200, 201, 202, 203], "max_pric": [0, 2, 4, 5, 6, 8, 14], "index": [0, 1, 2, 3, 5, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 29, 31, 44, 49, 51, 53, 57, 58, 59, 60, 65, 66, 67, 69, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 110, 113, 133, 137, 166, 169, 183, 198, 202, 203, 204, 205, 206], "numpi": [0, 2, 3, 4, 5, 6, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 26, 34, 36, 53, 57, 58, 103, 110, 112, 113, 118, 128, 138, 139, 144, 145, 146, 167, 169, 175, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 191, 193, 194, 198, 199, 202, 203, 204], "np": [0, 2, 3, 4, 5, 6, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 29, 38, 53, 57, 58, 103, 132, 139, 140, 142, 143, 146, 167, 169, 179, 181, 185, 186, 187, 190, 191, 194, 198, 199, 200, 203], "3": [0, 1, 2, 4, 5, 6, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 24, 43, 53, 57, 58, 103, 110, 146, 174, 175, 179, 180, 181, 185, 187, 188, 189, 191, 194, 195, 196, 199, 200, 202, 203, 204], "column": [0, 2, 4, 5, 6, 8, 13, 14, 16, 17, 18, 19, 20, 21, 36, 40, 53, 57, 58, 59, 60, 61, 71, 72, 81, 82, 87, 88, 98, 99, 103, 168, 174, 175, 177, 198, 203], "float": [0, 2, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 28, 29, 38, 40, 42, 44, 53, 57, 58, 60, 61, 71, 72, 73, 87, 88, 89, 98, 99, 103, 110, 111, 112, 113, 118, 122, 127, 132, 135, 136, 140, 142, 143, 144, 145, 146, 155, 156, 157, 158, 183, 205, 206], "extend": [0, 1, 2, 3, 4, 5, 6, 8, 13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 60, 65, 66, 69, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 169, 189, 191, 195, 198], "id": [0, 1, 2, 3, 4, 5, 6, 8, 9, 12, 14, 16, 17, 18, 19, 20, 21, 24, 28, 29, 32, 42, 44, 53, 57, 58, 64, 69, 71, 73, 87, 89, 98, 99, 103, 110, 111, 113, 122, 125, 127, 132, 135, 136, 137, 164, 166, 167, 168, 169, 170, 174, 179, 180, 181, 183, 184, 185, 186, 187, 189, 191, 192, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206], "f": [0, 2, 4, 5, 6, 8, 14, 17, 55, 166, 167, 170, 194, 195, 203], "r": [0, 2, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 34, 38, 52, 53, 57, 58, 103, 112, 144, 169, 174, 188, 192, 196, 203], "rang": [0, 2, 4, 5, 6, 8, 14, 15, 16, 17, 18, 19, 20, 21, 24, 28, 42, 43, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 110, 113, 132, 145, 189, 191, 192, 196, 198, 203], "print": [0, 2, 4, 5, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 43, 44, 53, 57, 58, 103, 110, 113, 125, 163, 164, 166, 167, 169, 170, 174, 175, 176, 178, 179, 180, 185, 187, 188, 189, 190, 191, 192, 194, 195, 197, 199, 200, 201, 204], "nindex": [0, 2, 5, 6, 8], "n": [0, 1, 2, 5, 6, 8, 139, 169, 203, 205, 206], "tags__pric": [0, 2, 5, 6, 8], "t": [0, 2, 4, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 34, 35, 36, 37, 38, 39, 41, 43, 46, 47, 50, 52, 53, 57, 58, 68, 103, 104, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 126, 128, 129, 131, 132, 133, 134, 155, 164, 169, 177, 180, 181, 185, 188, 191, 200, 203], "Then": [0, 2, 5, 6, 8, 167, 171, 190, 193, 197, 200], "whose": [0, 2, 6, 8, 110, 113, 122, 192, 202], "appli": [0, 1, 2, 6, 8, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 35, 36, 43, 47, 52, 53, 55, 57, 58, 71, 73, 87, 89, 103, 110, 113, 122, 144, 162, 167, 169, 175, 177, 187, 191, 195, 200], "n_limit": [0, 2, 4, 5, 6, 8, 14], "4": [0, 1, 2, 4, 5, 6, 8, 9, 10, 14, 146, 174, 181, 188, 189, 191, 194, 195], "lte": [0, 2, 4, 5, 14, 192], "result": [0, 2, 3, 4, 5, 6, 9, 14, 16, 17, 18, 19, 20, 21, 24, 28, 29, 42, 43, 47, 53, 57, 58, 71, 73, 87, 89, 103, 110, 113, 120, 132, 174, 185, 187, 191, 194, 195, 197, 199, 203], "return": [0, 2, 3, 6, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 57, 58, 60, 64, 65, 67, 70, 71, 73, 75, 76, 77, 80, 81, 82, 83, 84, 86, 87, 89, 91, 93, 96, 97, 98, 99, 102, 103, 104, 108, 109, 110, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 143, 144, 145, 146, 149, 150, 155, 157, 158, 167, 169, 178, 184, 187, 188, 191, 195, 198, 202, 203], "verifi": [0, 2, 6, 8], "most": [0, 1, 2, 3, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 42, 47, 53, 57, 58, 103, 110, 113, 132, 162, 166, 167, 177, 179, 180, 185, 188, 197, 202, 204], "satisfi": [0, 2, 6, 8, 110, 113, 116, 118, 133, 175], "condit": [0, 1, 2, 6, 8, 55, 56], "0": [0, 1, 2, 4, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 22, 27, 38, 42, 44, 45, 51, 53, 57, 58, 67, 93, 94, 103, 110, 112, 113, 118, 122, 132, 133, 139, 144, 145, 146, 174, 175, 176, 179, 181, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 202, 203, 204], "1": [0, 1, 2, 4, 5, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 28, 42, 44, 45, 51, 52, 53, 57, 58, 64, 67, 103, 109, 110, 112, 113, 118, 122, 125, 132, 133, 137, 144, 145, 146, 162, 171, 174, 175, 176, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206], "2": [0, 1, 2, 4, 5, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 46, 47, 51, 52, 53, 55, 57, 58, 103, 110, 113, 115, 129, 139, 140, 142, 143, 146, 174, 175, 179, 180, 181, 185, 187, 188, 189, 191, 192, 194, 195, 196, 197, 200, 203, 205, 206], "up": [0, 1, 2, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103, 195, 202], "9": [0, 1, 2, 5, 6, 8, 17, 20, 146, 191], "ha": [0, 1, 2, 3, 4, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 28, 35, 44, 53, 57, 58, 103, 110, 113, 122, 125, 164, 166, 167, 168, 174, 175, 177, 181, 183, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 202], "we": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 137, 164, 167, 169, 170, 175, 176, 177, 181, 185, 187, 188, 189, 191, 192, 193, 194, 195, 199, 200, 201, 202, 203], "ones": [0, 2, 4, 5, 6, 8, 17, 165, 187, 188, 189, 197], "8": [0, 1, 2, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 35, 36, 39, 53, 57, 58, 103, 110, 112, 113, 116, 118, 133, 146, 179, 192, 205, 206], "must": [0, 2, 3, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 68, 71, 73, 87, 89, 103, 185, 188, 195, 205, 206], "As": [0, 1, 2, 3, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 164, 169, 179, 185, 187, 189, 195, 202, 203], "an": [0, 1, 2, 3, 4, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 32, 34, 43, 44, 52, 53, 55, 57, 58, 71, 73, 87, 89, 98, 99, 103, 106, 109, 110, 112, 113, 115, 120, 122, 125, 133, 135, 162, 164, 166, 167, 169, 175, 176, 177, 178, 179, 182, 183, 185, 186, 187, 188, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206], "let": [0, 2, 3, 4, 6, 8, 9, 10, 139, 163, 164, 167, 169, 170, 175, 176, 177, 179, 181, 183, 187, 188, 190, 191, 192, 193, 194, 195, 200, 203], "encod": [0, 2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 35, 36, 39, 53, 57, 58, 103, 110, 112, 113, 116, 118, 126, 133, 134, 135, 169, 176, 205, 206], "inform": [0, 2, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 36, 41, 53, 57, 58, 103, 137, 164, 171, 174, 175, 177, 179, 180, 181, 183, 185, 188, 189, 191, 200], "propos": [0, 2, 5, 6, 8], "implement": [0, 1, 2, 4, 5, 8, 9, 10, 14, 20, 26, 53, 58, 63, 65, 68, 70, 74, 75, 79, 80, 90, 91, 95, 97, 101, 102, 103, 162, 188, 191, 193, 195, 197, 200], "7": [0, 1, 2, 4, 5, 6, 8, 146, 176, 189, 194, 202, 204, 205, 206], "np_queri": [0, 2, 4, 5, 6, 8, 17], "nqueri": [0, 2, 5, 6, 8], "limit": [0, 2, 3, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 28, 29, 35, 42, 53, 55, 57, 58, 71, 73, 87, 89, 103, 110, 113, 132, 134, 169, 187, 191, 194, 203], "nembed": [0, 2, 5, 6, 8], "neighbour": [0, 2, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 103, 184, 191, 192], "zip": [0, 2, 5, 8, 112], "tembed": [0, 2, 5, 6, 8], "6": [0, 1, 2, 4, 5, 6, 8, 144, 146, 169, 181, 188, 191, 194, 203], "5": [0, 1, 2, 4, 5, 6, 8, 144, 146, 176, 181, 188, 189, 191, 192, 194, 195, 196, 197, 199], "base": [1, 2, 3, 5, 6, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 106, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 145, 155, 156, 157, 158, 159, 161, 162, 164, 167, 169, 170, 177, 179, 188, 191, 192, 194, 200], "sift1m": 1, "dataset": [1, 110, 112, 113, 122, 164, 167, 191], "contain": [1, 2, 3, 4, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 27, 28, 29, 32, 36, 42, 47, 52, 53, 57, 58, 71, 73, 87, 89, 103, 110, 112, 113, 122, 125, 132, 137, 164, 167, 168, 169, 170, 175, 177, 179, 181, 185, 187, 188, 191, 193, 196, 199, 200, 202, 203, 205, 206], "object": [1, 2, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 69, 71, 72, 73, 78, 81, 82, 83, 87, 88, 89, 93, 94, 98, 99, 100, 103, 104, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 146, 156, 158, 159, 162, 166, 171, 172, 175, 176, 177, 178, 179, 180, 182, 183, 185, 187, 191, 192, 193, 194, 197, 201, 203], "each": [1, 3, 4, 5, 7, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 32, 42, 43, 44, 45, 52, 53, 57, 58, 71, 73, 87, 89, 103, 110, 112, 113, 120, 122, 123, 132, 139, 140, 142, 143, 146, 164, 165, 166, 168, 169, 170, 174, 175, 177, 178, 179, 181, 183, 185, 188, 189, 191, 194, 195, 197, 198, 205, 206], "128": [1, 2, 5, 6, 190, 198], "l2": [1, 6, 8], "summar": [1, 174, 188, 197, 202], "below": [1, 4, 8, 175, 183, 184, 188, 191, 195, 196, 197, 201, 203], "includ": [1, 3, 11, 55, 110, 112, 113, 122, 133, 135, 162, 174, 185, 198, 200, 203, 204], "classic": 1, "vector": [1, 3, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103, 167, 169, 181, 190, 204], "api": [1, 3, 5, 8, 9, 110, 113, 134, 164, 169, 173, 176, 177, 179, 180, 185, 188, 190, 193, 195, 197, 200, 203, 204], "usag": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 24, 34, 43, 53, 57, 58, 103, 109, 137, 162, 180, 197], "version": [1, 2, 3, 5, 6, 8, 68, 137, 162, 196, 197, 202, 204], "In": [1, 3, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 34, 43, 53, 57, 58, 71, 73, 87, 89, 103, 110, 113, 133, 166, 168, 170, 171, 174, 175, 176, 177, 179, 181, 183, 185, 187, 189, 191, 193, 194, 197, 200, 201, 202, 203, 204, 205, 206], "18": [1, 194], "sqlite": [1, 3, 4, 12, 13, 17, 59], "weaviat": [1, 4, 12, 13, 17, 59, 204], "16": [1, 6, 8, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 187, 195], "qdrant": [1, 4, 12, 13, 59, 204], "annlit": [1, 4, 12, 13, 17, 59, 169, 198, 204], "anlit": 1, "13": 1, "elasticsearch": [1, 4, 17, 18, 204], "redi": [1, 4, 12, 13, 17, 59, 204], "focus": [1, 203], "task": [1, 40, 167, 197, 203], "add": [1, 8, 16, 17, 19, 135, 164, 167, 174, 184, 185, 188, 189, 191, 197], "capabl": [1, 4], "applic": [1, 2, 6, 164, 169, 203], "read": [1, 2, 3, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103, 110, 112, 113, 116, 118, 162, 168, 172, 173, 174, 175, 177, 179, 180, 182, 185, 189, 197, 200, 203, 204], "exist": [1, 3, 6, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 41, 43, 44, 47, 53, 55, 57, 58, 103, 171, 176, 177, 184, 192, 196], "some_id": 1, "updat": [1, 2, 3, 4, 8, 66, 68, 69, 135, 145, 188, 198, 203], "delet": [1, 3, 4, 7, 8, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 187, 188, 191, 198], "del": [1, 187, 188], "find": [1, 2, 4, 6, 13, 14, 16, 17, 18, 19, 20, 21, 53, 55, 57, 58, 59, 60, 71, 76, 81, 87, 98, 103, 145, 165, 169, 185, 189, 190, 192, 195, 198, 201, 202], "boolean": [1, 2, 6, 18, 71, 72, 192, 205, 206], "filter": [1, 9, 14, 16, 17, 18, 19, 20, 21, 24, 29, 32, 42, 52, 53, 57, 58, 71, 73, 87, 89, 103, 112, 137, 185, 188, 197], "side": [1, 2, 4, 6, 14, 16, 17, 18, 19, 20, 21, 28, 29, 53, 57, 58, 71, 73, 87, 89, 103, 110, 113, 133, 183, 191, 200, 203], "possibl": [1, 4, 5, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 180, 186, 202], "describ": [1, 110, 113, 134, 139, 162, 179, 180, 185, 191, 192, 194, 196, 197], "queri": [1, 3, 4, 5, 9, 14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 53, 56, 57, 58, 71, 73, 87, 89, 103, 110, 113, 125, 144, 167, 169, 198, 204], "approxim": [1, 2, 3, 4, 6, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103], "abov": [1, 3, 4, 8, 9, 55, 68, 167, 175, 177, 182, 191, 194, 196, 197, 203], "ar": [1, 3, 4, 5, 6, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 24, 28, 32, 34, 35, 42, 47, 52, 53, 55, 57, 58, 68, 103, 104, 110, 112, 113, 120, 122, 133, 134, 135, 144, 146, 155, 162, 163, 164, 165, 166, 167, 168, 169, 173, 175, 176, 177, 179, 180, 185, 187, 188, 189, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206], "often": [1, 3, 4, 8, 164, 168, 169, 181, 182, 183, 185, 195, 197, 203, 205, 206], "atom": 1, "oper": [1, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 68, 103, 202, 205, 206], "high": [1, 3, 8, 10, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 163, 176, 177, 203], "level": [1, 3, 8, 10, 47, 137, 163, 165, 167, 177, 183, 187, 188, 195, 197, 198, 203, 205, 206], "henc": [1, 164, 166, 168, 185, 195, 196, 203], "understand": [1, 4, 180, 200, 201, 203], "give": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 35, 44, 53, 57, 58, 103, 109, 164, 180, 185, 187, 195, 200, 202], "good": [1, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 168, 203], "estim": [1, 197], "differ": [1, 3, 4, 6, 14, 16, 17, 18, 19, 20, 21, 42, 44, 52, 53, 57, 58, 103, 110, 113, 122, 123, 167, 169, 178, 180, 185, 187, 191, 192, 195, 197, 203], "interest": [1, 164, 188, 191, 198, 200], "singl": [1, 2, 3, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 43, 44, 52, 53, 57, 58, 68, 103, 110, 113, 125, 164, 172, 175, 185, 194, 196, 200], "which": [1, 2, 3, 4, 6, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 32, 34, 35, 36, 39, 41, 43, 53, 55, 57, 58, 68, 103, 110, 112, 113, 116, 119, 120, 122, 125, 134, 135, 137, 162, 164, 166, 167, 169, 170, 175, 176, 177, 179, 180, 181, 183, 185, 188, 191, 192, 195, 197, 199, 202, 203, 205, 206], "mean": [1, 4, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 103, 110, 113, 118, 122, 144, 163, 170, 173, 175, 178, 179, 181, 182, 187, 191, 194, 196, 198, 200, 202], "evalu": [1, 4, 12, 13, 14, 16, 17, 18, 19, 20, 21, 26, 42, 53, 54, 55, 56, 57, 58, 103, 110, 111, 113, 127, 135, 136, 138, 183, 184, 185, 193, 197, 203, 204, 205, 206], "time": [1, 2, 4, 5, 6, 10, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 137, 167, 169, 170, 177, 185, 194, 197, 203], "repeatedli": [1, 4, 166], "report": 1, "averag": [1, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 144, 191, 203], "conduct": [1, 164, 191, 195, 197, 203], "end": [1, 8, 14, 15, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 110, 113, 133, 183, 205, 206], "call": [1, 2, 3, 4, 14, 16, 17, 18, 19, 20, 21, 28, 44, 53, 57, 58, 103, 175, 178, 181, 185, 191, 196, 200], "just": [1, 3, 4, 8, 9, 137, 164, 175, 187, 188, 192, 201], "underli": [1, 4], "therefor": [1, 3, 6, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 68, 103, 203], "particular": [1, 4, 14, 16, 17, 18, 19, 20, 21, 36, 53, 55, 57, 58, 103, 112, 197], "influenc": 1, "neg": [1, 205, 206], "our": [1, 4, 14, 17, 20, 53, 58, 103, 110, 167, 170, 174, 177, 181, 188, 190, 191, 195], "interfac": [1, 2, 3, 5, 162, 163, 185, 189, 192, 193, 203], "If": [1, 2, 3, 4, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 32, 34, 42, 43, 44, 47, 48, 53, 55, 57, 58, 71, 73, 87, 89, 103, 110, 112, 113, 122, 125, 132, 137, 144, 162, 167, 168, 169, 174, 175, 179, 180, 181, 185, 186, 187, 188, 189, 190, 191, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204], "spot": 1, "bottleneck": [1, 3], "thrill": 1, "know": [1, 4, 8, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 112, 177, 188, 193, 195, 197, 203, 204], "about": [1, 2, 4, 5, 6, 8, 9, 162, 171, 172, 173, 174, 175, 177, 178, 180, 185, 187, 188, 194, 197, 200, 203], "them": [1, 3, 10, 14, 16, 17, 18, 19, 20, 21, 23, 42, 47, 53, 57, 58, 103, 110, 113, 132, 162, 164, 165, 168, 169, 170, 174, 175, 176, 177, 181, 183, 185, 187, 188, 191, 194, 198, 200, 201, 202, 203], "accordingli": [1, 110, 113, 118, 122, 162], "similar": [1, 2, 6, 8, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 167, 169, 185, 187, 194, 195, 197, 203], "algorithm": [1, 6, 8, 14, 16, 17, 18, 19, 20, 21, 23, 34, 53, 57, 58, 103, 137, 164, 166, 177, 197], "try": [1, 4, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 112, 135, 168, 185], "paramet": [1, 2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 32, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 57, 58, 60, 64, 65, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 104, 109, 110, 112, 113, 115, 116, 118, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 143, 144, 145, 146, 155, 170, 171, 173, 175, 185, 197, 198, 205, 206], "ef": [1, 8, 13, 59, 98, 99, 103], "hnsw": [1, 2, 5, 6, 8, 57, 87, 88], "might": [1, 2, 4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 32, 43, 47, 53, 57, 58, 103, 167, 169, 191], "fix": [1, 110, 113, 120, 166, 197], "big": [1, 9, 10, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 109, 110, 113, 132, 169, 188, 193, 194, 200, 203], "impact": [1, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "even": [1, 3, 4, 8, 137, 174, 191, 201], "configur": [1, 2, 3, 5, 8, 53, 103, 198, 201], "cannot": [1, 135], "easili": [1, 2, 3, 4, 10, 168, 169, 176, 177, 179, 189, 197, 200, 203], "compar": [1, 9, 14, 16, 17, 18, 19, 20, 21, 28, 34, 39, 44, 53, 57, 58, 103, 109, 166, 167, 175, 195], "research": 1, "showcas": [1, 4, 176], "what": [1, 2, 4, 6, 9, 164, 170, 179, 195, 200], "expect": [1, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 68, 103, 110, 113, 134, 162, 185, 187], "get": [1, 2, 3, 4, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 22, 34, 40, 45, 51, 53, 57, 58, 103, 104, 109, 110, 113, 114, 117, 132, 133, 137, 146, 155, 164, 169, 179, 180, 183, 184, 185, 187, 188, 190, 192, 197, 200, 201], "without": [1, 3, 14, 16, 17, 18, 19, 20, 21, 26, 42, 48, 53, 55, 57, 58, 103, 146, 175, 176, 177, 187, 188, 197], "tune": [1, 2], "hyper": 1, "practic": [1, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 177, 179, 188, 195, 197], "strongli": [1, 200], "recommend": [1, 4, 9, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 110, 113, 122, 162, 173, 177, 180, 185, 197, 200, 203, 204], "achiev": [1, 200], "qualiti": 1, "tabl": [1, 3, 4, 7, 14, 16, 17, 18, 19, 20, 21, 40, 41, 53, 57, 58, 64, 103, 165, 175, 188, 197, 201], "depict": [1, 183, 188, 203], "recal": [1, 144, 189], "fraction": 1, "found": [1, 4, 8, 137, 175, 185, 197, 203], "over": [1, 4, 5, 10, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 112, 135, 162, 184, 185, 188, 191, 197, 203], "against": [1, 14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 55, 57, 58, 103, 110, 113, 132, 181, 194], "qp": 1, "per": [1, 5, 8, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 110, 113, 134, 135, 144, 145, 174, 175, 191, 194], "second": [1, 4, 14, 16, 17, 18, 19, 20, 21, 47, 53, 55, 57, 58, 103, 110, 113, 134, 137, 145, 146, 167, 177, 187, 191, 195, 200], "smaller": [1, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 34, 35, 42, 43, 53, 57, 58, 103, 185, 188, 200], "more": [1, 2, 3, 4, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 34, 41, 47, 53, 57, 58, 68, 103, 112, 162, 163, 167, 168, 169, 172, 173, 174, 175, 179, 180, 181, 185, 187, 188, 190, 191, 193, 195, 197, 199, 200, 203, 204, 205, 206], "upper": [1, 3, 8, 14, 16, 17, 18, 19, 20, 21, 24, 43, 53, 57, 58, 103, 170], "right": [1, 4, 14, 16, 17, 18, 19, 20, 21, 28, 44, 53, 55, 57, 58, 103, 110, 113, 133, 170, 177, 181, 191, 194, 195, 202], "better": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 164, 186, 188, 195, 197, 202], "m": [1, 2, 5, 6, 13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 59, 71, 72, 81, 82, 87, 88, 103, 175, 187, 188, 191, 194, 202], "1m": 1, "000": [1, 191, 203], "37": 1, "11": [1, 192, 195], "17": [1, 6], "06": 1, "05": 1, "14": [1, 171, 192], "64": [1, 2, 5, 6, 10, 18, 53, 57, 71, 72, 81, 82, 87, 88, 110, 113, 122, 164, 182, 203], "32": [1, 2, 6, 10, 14, 16, 17, 18, 19, 20, 21, 24, 32, 43, 53, 57, 58, 103, 176, 190, 195], "873": 1, "42": 1, "40": 1, "114": 1, "30": [1, 110, 113, 134, 192], "36": 1, "12": [1, 6, 162, 188, 189, 196, 200], "93": 1, "01": [1, 176], "942": 1, "51": 1, "38": [1, 6], "43": 1, "15": [1, 9, 188, 192], "977": 1, "76": 1, "39": 1, "135": 1, "75": [1, 192], "35": [1, 194], "66": 1, "256": [1, 14, 16, 17, 18, 19, 20, 21, 26, 28, 53, 57, 58, 103, 110, 113, 120, 132, 167, 175, 181, 188, 194, 198, 199], "986": 1, "98": [1, 6], "111": 1, "897": 1, "134": 1, "94": 1, "34": 1, "82": 1, "08": [1, 6], "960": 1, "53": 1, "148": 1, "67": 1, "24": 1, "46": 1, "988": 1, "136": 1, "90": [1, 191], "31": 1, "996": 1, "99": 1, "95": 1, "905": 1, "200": [1, 6, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 200], "29": 1, "965": 1, "54": [1, 171], "186": 1, "45": [1, 191, 192], "990": 1, "68": 1, "173": 1, "60": [1, 98, 99, 103, 170], "997": 1, "07": [1, 140, 142, 143, 145, 167], "183": 1, "86": 1, "895": 1, "49": 1, "116": 1, "33": 1, "63": 1, "55": 1, "954": 1, "59": 1, "112": 1, "83": 1, "74": 1, "26": 1, "983": 1, "993": 1, "88": 1, "930": 1, "52": 1, "142": 1, "975": 1, "58": 1, "156": [1, 185], "41": 1, "81": 1, "147": 1, "19": 1, "87": 1, "998": 1, "144": [1, 195], "62": 1, "21": [1, 192], "946": 1, "196": 1, "20": [1, 14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 110, 113, 132], "984": 1, "211": 1, "65": 1, "194": 1, "97": [1, 194], "72": 1, "999": 1, "25": [1, 8, 192], "204": [1, 176], "22": [1, 192], "50": [1, 98, 99, 103, 188, 192], "403": 1, "70": 1, "448": 1, "396": 1, "453": 1, "71": [1, 6], "80": 1, "995": 1, "09": [1, 171], "418": 1, "456": [1, 110, 113, 122], "00": 1, "03": 1, "410": 1, "459": 1, "57": 1, "974": 1, "412": 1, "48": [1, 6], "462": 1, "392": 1, "27": [1, 6, 110, 113, 134], "460": 1, "56": [1, 205, 206], "79": 1, "379": 1, "69": 1, "461": 1, "96": 1, "381": 1, "85": [1, 192], "982": 1, "387": 1, "77": 1, "386": 1, "463": 1, "47": 1, "92": 1, "385": 1, "84": 1, "78": 1, "393": 1, "464": 1, "969": 1, "390": 1, "992": 1, "399": 1, "458": 1, "426": 1, "91": 1, "89": 1, "389": 1, "73": 1, "397": 1, "375": 1, "871": 1, "574": 1, "939": 1, "580": 1, "44": 1, "577": 1, "639": 1, "655": 1, "61": 1, "659": 1, "23": [1, 200], "818": 1, "906": 1, "787": 1, "04": 1, "782": 1, "784": 1, "780": 1, "1022": 1, "955": 1, "1001": 1, "981": 1, "929": 1, "675": 1, "673": 1, "1297": 1, "1383": 1, "1846": 1, "1926": 1, "1364": 1, "1966": 1, "889": 1, "508": 1, "947": 1, "449": 1, "980": 1, "434": 1, "504": [1, 175], "688": 1, "953": 1, "678": 1, "719": 1, "720": 1, "902": 1, "048": 1, "958": 1, "138": 1, "077": 1, "108": [1, 6], "945": 1, "02": [1, 176], "471": 1, "976": 1, "480": 1, "527": 1, "487": 1, "790": 1, "812": 1, "861": 1, "840": 1, "959": 1, "424": 1, "987": 1, "506": 1, "408": 1, "872": 1, "563": 1, "941": 1, "991": 1, "562": 1, "754": 1, "721": 1, "775": 1, "28": [1, 205, 206], "799": 1, "1091": 1, "1196": 1, "1232": 1, "1203": 1, "896": 1, "625": 1, "626": 1, "994": 1, "921": 1, "926": 1, "1315": 1, "1489": 1, "1511": 1, "1534": [1, 176], "421": 1, "convert": [1, 9, 14, 16, 17, 18, 19, 20, 21, 34, 39, 46, 50, 53, 57, 58, 60, 61, 66, 67, 71, 72, 87, 88, 98, 99, 103, 110, 113, 115, 116, 117, 120, 122, 123, 126, 128, 129, 131, 133, 134, 164, 165, 166, 168, 175, 176, 180, 197, 203], "dp": 1, "higher": [1, 8, 191], "284": 1, "061": 1, "505": 1, "246": 1, "706": 1, "519": 1, "749": 1, "762": 1, "662": 1, "674": 1, "758": 1, "570": 1, "597": 1, "366": 1, "825": 1, "956": 1, "155": 1, "698": 1, "710": 1, "411": 1, "652": 1, "611": 1, "726": 1, "786": 1, "599": 1, "670": 1, "304": 1, "729": 1, "440": 1, "751": 1, "663": [1, 176], "695": 1, "681": 1, "648": 1, "594": 1, "540": 1, "730": 1, "483": 1, "445": 1, "671": 1, "585": 1, "003": 1, "629": 1, "725": 1, "863": 1, "915": 1, "572": 1, "747": 1, "723": 1, "657": 1, "017": 1, "882": 1, "632": 1, "500": [1, 2, 8], "394": 1, "553": 1, "703": 1, "800": 1, "465": 1, "660": 1, "914": 1, "985": 1, "672": 1, "646": 1, "092": 1, "809": 1, "618": [1, 164, 167], "874": 1, "531": 1, "734": 1, "129": 1, "040": 1, "740": 1, "886": 1, "286": 1, "227": 1, "267": 1, "532": 1, "244": 1, "308": 1, "557": 1, "253": 1, "197": 1, "189": 1, "501": 1, "248": 1, "191": 1, "176": [1, 170, 197], "636": 1, "250": [1, 170], "199": 1, "162": 1, "691": 1, "245": 1, "195": 1, "172": 1, "641": [1, 164, 167], "559": 1, "263": 1, "231": 1, "166": 1, "537": 1, "653": 1, "260": 1, "190": [1, 191], "161": 1, "633": 1, "554": 1, "168": [1, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 110, 113, 132, 196], "157": 1, "680": 1, "521": 1, "174": 1, "561": 1, "159": 1, "153": 1, "616": 1, "543": 1, "221": 1, "547": 1, "254": 1, "177": 1, "643": 1, "541": 1, "187": 1, "535": 1, "182": 1, "178": 1, "666": [1, 185], "184": 1, "635": 1, "533": 1, "251": 1, "235": 1, "160": 1, "257": 1, "682": 1, "262": 1, "165": 1, "154": 1, "647": 1, "266": 1, "163": 1, "676": 1, "524": 1, "252": 1, "685": 1, "255": [1, 164, 167, 174, 179], "687": 1, "560": 1, "226": 1, "598": 1, "261": 1, "207": 1, "436": 1, "739": 1, "205": 1, "722": 1, "241": 1, "106": 1, "416": 1, "732": 1, "103": 1, "422": [1, 200], "277": 1, "104": 1, "405": 1, "525": 1, "222": 1, "217": 1, "427": 1, "516": 1, "380": 1, "236": 1, "139": 1, "220": 1, "218": 1, "208": 1, "206": 1, "430": 1, "271": 1, "388": 1, "402": 1, "382": 1, "179": 1, "425": 1, "275": 1, "378": 1, "435": 1, "282": 1, "384": 1, "198": 1, "978": 1, "233": 1, "258": 1, "141": 1, "064": 1, "279": 1, "185": 1, "414": 1, "364": 1, "280": 1, "126": 1, "019": 1, "370": 1, "203": 1, "485": [1, 110, 113, 122], "223": 1, "409": 1, "771": 1, "224": [1, 110, 113, 122, 164, 167], "417": 1, "213": 1, "118": 1, "542": 1, "216": 1, "202": 1, "318": 1, "391": 1, "143": 1, "415": 1, "733": 1, "151": 1, "169": 1, "228": 1, "133": 1, "302": 1, "113": 1, "473": 1, "229": [1, 110, 113, 122], "878": 1, "928": 1, "137": 1, "122": 1, "081": 1, "053": 1, "149": 1, "265": 1, "175": 1, "131": 1, "702": 1, "664": [1, 185, 203], "125": 1, "130": 1, "600": 1, "776": 1, "001": 1, "595": 1, "018": 1, "058": 1, "431": 1, "795": 1, "778": 1, "094": 1, "499": 1, "579": 1, "621": 1, "325": 1, "099": 1, "338": 1, "961": 1, "432": 1, "420": 1, "290": 1, "804": 1, "567": 1, "943": 1, "368": 1, "587": 1, "916": 1, "080": 1, "313": 1, "836": 1, "971": 1, "429": 1, "811": 1, "273": 1, "357": 1, "493": 1, "831": 1, "951": 1, "225": [1, 110, 113, 122], "488": 1, "596": 1, "083": 1, "575": 1, "789": 1, "065": 1, "014": 1, "612": 1, "558": 1, "060": 1, "476": [1, 195], "490": 1, "049": 1, "948": 1, "085": 1, "970": 1, "327": 1, "326": [1, 195], "079": 1, "548": 1, "760": 1, "238": 1, "438": 1, "952": 1, "306": 1, "here": [1, 2, 3, 4, 5, 6, 8, 9, 137, 162, 163, 165, 167, 169, 170, 175, 177, 179, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 202, 203], "chose": 1, "been": [1, 144, 198, 200, 203], "commonli": [1, 55], "method": [1, 2, 3, 4, 5, 6, 8, 13, 14, 16, 17, 18, 19, 20, 21, 28, 34, 47, 52, 53, 57, 58, 59, 65, 68, 70, 75, 80, 87, 88, 91, 97, 102, 103, 110, 112, 113, 126, 132, 137, 144, 163, 171, 173, 175, 177, 180, 184, 185, 191, 197, 200], "structur": [1, 3, 8, 14, 16, 17, 18, 19, 20, 21, 28, 35, 44, 53, 57, 58, 103, 110, 113, 125, 166, 167, 174, 175, 177, 178, 180, 183, 186, 191, 193, 201, 203, 204, 205, 206], "94ee6627ee7f582e5e28124e78c3d2f9": 1, "49841760378680844": 1, "703959752118305": 1, "6920759535687985": 1, "10248648858410625": 1, "k": [1, 14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 103, 144, 145, 191, 194, 204], "indic": [1, 2, 4, 6, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 122, 125, 145, 174, 180, 205, 206], "do": [1, 2, 3, 4, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 41, 43, 47, 53, 55, 57, 58, 68, 103, 110, 113, 122, 164, 167, 168, 169, 170, 174, 175, 177, 178, 179, 181, 182, 183, 185, 187, 188, 190, 191, 194, 195, 197, 199, 200, 202, 204], "exhaust": [1, 8, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103], "instead": [1, 4, 8, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 112, 137, 174, 175, 177, 178, 179, 181, 185, 187, 191, 195, 202, 203, 205, 206], "thei": [1, 3, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 41, 47, 53, 57, 58, 68, 103, 109, 162, 167, 170, 177, 179, 180, 184, 185, 187, 188, 191, 197, 200, 202], "maximum": [1, 8, 14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 110, 112, 113, 132, 133, 144, 174, 185, 197], "slowest": 1, "were": 1, "aw": 1, "ec2": 1, "t2": 1, "2xlarg": 1, "instanc": [1, 3, 8, 67, 109, 135], "intel": 1, "xeon": 1, "cpu": [1, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 42, 43, 53, 57, 58, 103, 110, 113, 132, 139, 142, 143, 176, 188, 190, 194, 202, 204], "e5": 1, "2676": 1, "v3": [1, 8], "40ghz": 1, "python": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 34, 39, 53, 57, 58, 103, 110, 112, 113, 126, 134, 163, 173, 175, 177, 179, 181, 183, 185, 187, 188, 189, 192, 193, 195, 197, 203, 204, 205, 206], "pattern": [1, 4, 10, 38, 112, 167, 179, 189, 197, 200], "offici": [1, 2, 9], "docker": [1, 2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 110, 113, 132, 196, 206], "imag": [1, 2, 5, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 110, 113, 125, 137, 165, 167, 170, 174, 175, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 195, 198, 202, 203, 204, 205, 206], "node": [1, 2, 5, 55], "gb": 1, "ram": 1, "alloc": 1, "That": [1, 164, 175, 177, 179, 180, 182, 188, 193, 203], "onli": [1, 3, 5, 9, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 34, 35, 41, 42, 43, 44, 53, 55, 57, 58, 71, 73, 87, 89, 103, 110, 112, 113, 122, 132, 134, 144, 162, 170, 174, 175, 177, 178, 179, 180, 185, 188, 189, 190, 191, 194, 195, 197, 200, 203], "replica": 1, "shard": 1, "did": [1, 4], "opt": [1, 202], "cluster": 1, "becaus": [1, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 162, 164, 176, 191, 195, 200], "mainli": [1, 55, 68, 162, 200], "aim": [1, 3, 203], "assess": 1, "mai": [1, 4, 9, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 41, 43, 53, 57, 58, 103, 110, 112, 113, 116, 118, 133, 137, 164, 167, 169, 175, 178, 183, 185, 187, 188, 189, 191, 197, 200, 201, 202, 203, 205, 206], "overhead": [1, 197], "come": [1, 3, 4, 9, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 169, 174, 185, 188, 203, 205, 206], "unless": [1, 3, 175, 197], "specif": [1, 2, 3, 4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 36, 53, 57, 58, 71, 73, 87, 89, 103, 112, 162, 167, 174, 175, 177, 178, 185, 191], "effici": [1, 4, 6, 8, 68, 110, 113, 116, 118, 133, 188, 193, 203, 204, 205, 206], "own": [1, 110, 113, 122, 177, 191, 192, 195, 198, 202, 203], "build": [1, 2, 5, 6, 8, 9, 27, 40, 110, 113, 126, 129, 131, 166, 169, 175, 181, 185, 187, 189, 197, 200, 203, 204], "accuraci": [1, 2, 8], "lead": [1, 8, 180], "longer": [1, 4, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 110, 113, 133, 169], "connect": [1, 4, 7, 8, 13, 53, 55, 58, 59, 93, 94, 98, 99, 103, 110, 113, 133, 196], "work": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 34, 43, 53, 57, 58, 103, 112, 137, 164, 165, 167, 175, 177, 179, 183, 185, 187, 188, 190, 191, 193, 194, 195, 197, 200, 201, 203, 204], "intrins": [1, 198], "dimension": [1, 2, 6, 110, 113, 120, 122, 139, 181, 203], "while": [1, 8, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 164, 175, 180, 191, 203], "low": [1, 8, 162, 176], "slower": [1, 8, 14, 16, 17, 18, 19, 20, 21, 39, 53, 57, 58, 103], "final": [1, 3, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 47, 53, 55, 57, 58, 103, 163, 164, 167, 177, 192, 193, 200], "full": [1, 3, 4, 6, 9, 11, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 162, 164, 166, 170, 175, 179, 185, 197, 199, 200, 202, 203, 204], "script": [1, 4], "avail": [1, 4, 8, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 68, 103, 137, 162, 195, 202], "fair": 1, "across": [1, 185, 197], "favour": 1, "benefit": [1, 4, 177], "wa": [1, 4, 8, 135, 167, 169, 179, 188, 197, 203], "imposs": 1, "its": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 110, 113, 117, 122, 125, 133, 162, 166, 167, 168, 180, 185, 189, 191, 195, 197, 199, 200, 201, 203], "definit": [1, 135, 164, 200], "vari": 1, "principl": [1, 179, 185], "cover": [1, 167, 203], "offer": [1, 58, 171, 173, 175, 188], "six": 1, "crud": 1, "measur": [1, 144], "Not": [1, 191, 192, 197], "speed": [1, 2, 8, 14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 58, 103, 195, 203], "also": [1, 2, 3, 4, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 42, 44, 47, 53, 57, 58, 103, 110, 144, 162, 164, 169, 170, 173, 175, 176, 177, 178, 179, 180, 183, 185, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 200, 201, 203], "show": [1, 5, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 34, 36, 41, 43, 44, 45, 53, 57, 58, 103, 110, 113, 125, 132, 134, 164, 171, 176, 180, 188, 189, 197], "trade": 1, "off": [1, 4, 7, 8, 58, 93, 94, 110, 113, 133], "between": [1, 3, 4, 8, 110, 112, 113, 118, 122, 139, 140, 142, 143, 168, 175, 182, 185, 192, 197, 203, 205, 206], "your": [1, 3, 4, 6, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 36, 41, 43, 53, 57, 58, 103, 110, 112, 113, 122, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 177, 179, 180, 185, 190, 191, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206], "built": [1, 9, 14, 16, 17, 18, 19, 20, 21, 26, 28, 53, 57, 58, 103, 175, 178, 180, 195, 204], "top": [1, 3, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 125, 144, 145, 167, 183, 187, 188, 191, 194, 198, 205, 206], "furthermor": [1, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103], "made": [1, 4, 162, 166, 175, 185, 203], "sure": [1, 2, 3, 4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 42, 44, 53, 57, 58, 68, 103, 175, 195, 202, 204], "run": [1, 2, 4, 5, 8, 9, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 194, 195, 200, 201, 202, 206], "seri": 1, "support": [1, 3, 4, 6, 8, 9, 14, 15, 16, 17, 18, 19, 20, 21, 28, 29, 42, 53, 57, 58, 60, 65, 68, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 110, 113, 115, 118, 122, 123, 132, 133, 134, 137, 146, 166, 169, 173, 175, 182, 185, 188, 190, 192, 195, 196, 197, 200, 202, 203, 204], "local": [1, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 179, 183, 196, 197, 202, 203, 204, 205, 206], "allow": [1, 3, 4, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 41, 49, 53, 57, 58, 103, 114, 117, 135, 162, 167, 169, 175, 177, 179, 182, 185, 188, 193, 197, 203, 204], "network": [1, 2, 10, 17, 176, 185, 197, 203, 204], "resourc": [1, 172, 173, 179, 195], "those": [1, 2, 3, 4, 6, 14, 16, 17, 18, 19, 20, 21, 28, 36, 53, 57, 58, 68, 103, 137, 169, 177, 183, 185, 191, 193], "much": [1, 14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 58, 103, 164, 169, 180, 181, 185, 188, 189, 200, 201, 202], "favor": [1, 162], "grpc": [1, 5, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 110, 113, 132, 176, 196], "http": [1, 2, 5, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 44, 45, 53, 55, 57, 58, 59, 71, 72, 81, 82, 98, 99, 103, 110, 112, 113, 132, 134, 144, 169, 174, 175, 179, 180, 183, 195, 196, 198, 202, 205, 206], "batch": [1, 2, 3, 5, 6, 8, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 32, 42, 43, 53, 57, 58, 68, 103, 110, 113, 132, 195], "re": [1, 8, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 137, 162, 165, 169, 183, 188, 200, 202], "okai": [1, 188, 195], "long": [1, 8, 18, 57, 71, 72, 87, 88, 165, 195, 203, 205, 206], "jina": [1, 3, 14, 16, 17, 18, 19, 20, 21, 41, 45, 53, 57, 58, 103, 110, 112, 113, 133, 137, 167, 171, 172, 173, 174, 175, 176, 177, 180, 192, 195, 196, 197, 198, 202, 204, 205, 206], "open": [1, 3, 9, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 112, 113, 115, 134, 163, 166, 176], "constantli": 1, "believ": 1, "miss": [1, 109, 202, 203, 204], "optim": [1, 4, 8, 190, 201, 203, 204], "g": [1, 2, 3, 4, 6, 8, 9, 112, 177, 179, 184, 187, 188, 191, 196, 197, 203], "recent": [1, 4], "upstream": [1, 197, 203], "avoid": [1, 3, 4, 10, 140, 142, 143, 145, 162, 167, 197], "unnecessari": [1, 197], "step": [1, 4, 10, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 68, 103, 164, 185, 197, 199, 201], "feel": [1, 4, 175], "free": [1, 55, 163, 166], "rais": [1, 4, 14, 15, 16, 17, 18, 19, 20, 21, 29, 53, 55, 57, 58, 60, 65, 67, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 135, 180], "pr": [1, 144], "issu": [1, 137, 167, 195], "contribut": [1, 3], "ann": [1, 3, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103], "librari": [1, 55, 112, 137, 165, 185, 203, 204], "faiss": 1, "annoi": [1, 200], "scann": 1, "fact": [1, 174, 175, 185], "itself": [1, 4, 8, 14, 16, 17, 18, 19, 20, 21, 24, 26, 28, 34, 37, 43, 45, 53, 57, 58, 103, 110, 113, 115, 116, 117, 118, 119, 122, 123, 125, 126, 132, 133, 134, 162, 187, 189, 191, 194, 197, 200], "intern": [1, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103, 110, 113, 116], "yet": [1, 167, 203], "integr": [1, 10, 162, 176, 185, 200, 203, 204], "although": [1, 200, 203], "real": [1, 144, 164, 177, 200, 201], "life": 1, "scenario": [1, 191], "live": [1, 4, 203], "machin": [1, 53, 103, 175, 181, 183, 197, 202], "potenti": [1, 195, 200], "multipl": [1, 14, 16, 17, 18, 19, 20, 21, 24, 32, 44, 52, 53, 57, 58, 103, 110, 113, 123, 167, 169, 179, 184, 185, 187, 188, 191, 193, 197, 203], "parallel": [1, 2, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 42, 53, 57, 58, 103, 110, 113, 132, 188, 193], "keep": [1, 3, 8, 58, 68, 110, 113, 134, 177, 178, 180, 194], "both": [1, 6, 7, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 162, 179, 184, 190, 191, 194, 200, 203], "process": [1, 8, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 43, 53, 57, 58, 103, 110, 113, 115, 116, 117, 118, 119, 122, 123, 133, 134, 163, 165, 167, 177, 178, 182, 188, 191, 197, 200, 202, 203, 204], "minim": [1, 5, 188], "hope": [1, 195], "help": [1, 8, 25, 51, 112, 164, 177, 179, 180, 185, 200, 204], "select": [1, 9, 175, 176, 187, 188, 192], "suit": [1, 166], "case": [1, 3, 4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 34, 53, 57, 58, 68, 71, 73, 87, 89, 103, 137, 167, 173, 174, 175, 179, 185, 191, 194, 197], "depend": [1, 4, 8, 14, 16, 17, 18, 19, 20, 21, 29, 42, 47, 53, 57, 58, 71, 73, 87, 89, 103, 110, 113, 134, 164, 170, 185, 190, 192, 194, 195, 196, 197, 199, 200, 201, 204], "desir": [1, 4, 110, 113, 122, 198], "prefer": [1, 185], "fewer": [1, 8], "enjoi": [1, 3, 8, 177, 202], "best": [1, 4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 110, 113, 117, 145, 168, 185, 193, 197, 198], "reason": [1, 4, 8, 177, 185, 197, 200, 203], "latenc": [1, 176, 197], "sai": [1, 10, 178, 179, 185, 191, 194, 195, 197, 200], "doe": [1, 4, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 103, 110, 112, 113, 122, 132, 180, 185, 189, 190, 191, 192], "fit": [1, 3, 4, 7, 10, 55, 175, 185, 190, 191, 193, 194, 203], "care": [1, 168, 175], "great": [1, 175], "need": [1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 28, 44, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 162, 164, 168, 169, 171, 173, 175, 176, 177, 178, 179, 185, 188, 190, 191, 192, 193, 195, 197, 198, 200, 201, 202], "isol": 1, "mind": [1, 3, 68, 177, 194], "unlik": [1, 181, 185], "moreov": [1, 4, 197], "monolith": [1, 203], "howev": [1, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 144, 162, 175, 185, 188, 191, 195, 203], "still": [1, 8, 162, 167, 175, 188, 195], "compos": [2, 5, 6, 8, 55], "yml": [2, 5, 6, 8], "co": [2, 112], "environ": [2, 8, 137, 173, 201, 202, 204], "xpack": 2, "enabl": [2, 4, 6, 25, 31, 61, 72, 77, 88, 94, 99, 162, 200, 201, 202, 204], "fals": [2, 4, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 32, 34, 38, 41, 42, 43, 44, 45, 53, 55, 57, 58, 71, 72, 73, 81, 82, 87, 88, 89, 98, 99, 103, 104, 109, 110, 112, 113, 116, 118, 120, 122, 123, 125, 132, 133, 134, 135, 137, 145, 155, 168, 174, 175, 180, 187, 188, 189, 191, 192, 196, 197, 198, 199], "discoveri": 2, "type": [2, 4, 6, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 64, 65, 66, 67, 70, 71, 72, 73, 75, 76, 77, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 93, 96, 97, 98, 99, 102, 103, 104, 105, 108, 110, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 139, 140, 142, 143, 144, 145, 146, 149, 150, 155, 157, 158, 161, 165, 168, 175, 176, 177, 179, 183, 185, 187, 188, 189, 191, 192, 193, 196, 197, 198, 199, 200, 203, 204], "port": [2, 5, 6, 8, 13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 59, 81, 82, 87, 88, 98, 99, 103, 110, 113, 137, 196], "9200": [2, 18, 71, 72], "u": [2, 5, 6, 8, 110, 113, 116, 118, 133, 169, 195, 196, 202], "assum": [2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 22, 34, 53, 57, 58, 103, 110, 113, 118, 122, 167, 185, 194, 195], "server": [2, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 98, 99, 103, 200, 204], "address": [2, 5, 6, 8, 53, 103, 137, 180, 196], "localhost": [2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 71, 72, 81, 82, 87, 88, 98, 99, 103, 196], "creation": [2, 6, 197], "By": [2, 3, 4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 35, 36, 39, 53, 57, 58, 71, 73, 87, 89, 103, 110, 112, 113, 122, 163, 177, 185, 190, 191, 194, 195], "layer": [2, 8, 190], "plain": [2, 110, 180, 185, 194, 197], "pass": [2, 3, 4, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 36, 37, 43, 53, 55, 57, 58, 103, 110, 112, 113, 116, 122, 126, 133, 135, 162, 170, 178, 185, 191, 197, 198, 203], "host": [2, 5, 6, 8, 13, 14, 16, 17, 18, 19, 20, 21, 44, 45, 53, 57, 58, 59, 71, 72, 81, 82, 87, 88, 98, 99, 103, 110, 113, 132, 196], "api_id": 2, "ca_cert": 2, "insid": [2, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 110, 113, 122, 171, 180, 185, 188, 189, 194, 195, 196], "es_config": [2, 13, 18, 59, 71, 72], "constructor": [2, 3, 4, 6, 16, 178, 180, 184, 185], "For": [2, 3, 4, 5, 6, 8, 11, 14, 16, 17, 18, 19, 20, 21, 26, 28, 34, 42, 53, 57, 58, 103, 110, 164, 167, 168, 169, 170, 173, 174, 175, 177, 180, 181, 182, 184, 185, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 204], "exampl": [2, 6, 7, 14, 16, 17, 18, 19, 20, 21, 24, 34, 43, 52, 53, 57, 58, 68, 103, 109, 110, 113, 122, 137, 144, 146, 164, 165, 167, 168, 169, 170, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 200, 201, 202, 203], "prq7je_hj4i4auh": 2, "hq": 2, "hanxiao": [2, 164, 181], "http_ca": 2, "crt": 2, "certif": 2, "password": 2, "etc": [2, 3, 146, 162, 175, 177, 193, 198, 204], "index_nam": [2, 4, 6, 13, 18, 57, 59, 71, 72, 87, 88], "previous": [2, 6, 8, 53, 58, 103, 162], "old_stuff": 2, "_": [2, 6, 14, 16, 17, 18, 19, 20, 21, 24, 43, 53, 57, 58, 103, 189, 198], "1000": [2, 6, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 164, 166, 167, 188, 199], "da2": [2, 4, 6, 189, 194], "length": [2, 3, 4, 5, 6, 9, 14, 16, 17, 18, 19, 20, 21, 24, 28, 32, 53, 57, 58, 103, 110, 113, 133, 168, 169, 170, 171, 174, 178, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199, 205, 206], "2000": 2, "homogen": [2, 4, 6, 9, 168, 174, 187, 188, 189, 191, 192, 196, 197, 198, 199], "common": [2, 4, 6, 9, 10, 21, 33, 167, 168, 174, 175, 179, 180, 183, 185, 187, 188, 189, 191, 192, 196, 197, 198, 199, 201, 202, 203, 204], "attribut": [2, 4, 6, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 24, 28, 29, 30, 32, 44, 47, 51, 52, 53, 57, 58, 71, 73, 87, 89, 103, 110, 113, 120, 124, 133, 167, 168, 174, 175, 178, 181, 183, 184, 185, 188, 189, 191, 192, 193, 196, 197, 198, 199, 203, 205, 206], "uniqu": [2, 3, 4, 6, 9, 110, 113, 117, 168, 174, 180, 183, 187, 188, 189, 191, 192, 196, 197, 198, 199, 203, 205, 206], "empti": [2, 3, 4, 5, 6, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 32, 44, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 104, 110, 113, 125, 144, 155, 168, 174, 175, 179, 181, 185, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 203], "ndarrai": [2, 3, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 26, 28, 29, 34, 38, 42, 53, 57, 58, 71, 73, 87, 89, 103, 105, 106, 110, 112, 113, 118, 120, 122, 128, 132, 134, 138, 139, 140, 142, 143, 145, 147, 149, 162, 165, 166, 167, 174, 175, 179, 181, 182, 183, 185, 190, 191, 192, 193, 194, 198, 201, 203, 205, 206], "str": [2, 3, 4, 6, 9, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 32, 34, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 51, 52, 53, 57, 58, 60, 61, 64, 67, 71, 72, 73, 76, 77, 81, 82, 83, 84, 86, 87, 88, 89, 93, 94, 98, 99, 103, 104, 106, 109, 110, 111, 112, 113, 115, 116, 118, 119, 120, 122, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 139, 142, 143, 146, 155, 156, 157, 158, 168, 169, 174, 175, 178, 180, 187, 188, 189, 191, 192, 196, 197, 198, 199, 200, 205, 206], "14890289": 2, "3168339": 2, "03050802": 2, "06785086": 2, "94719299": 2, "32490566": 2, "how": [2, 3, 4, 5, 8, 9, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 110, 113, 122, 164, 167, 175, 176, 177, 178, 179, 180, 183, 185, 188, 189, 191, 193, 195, 197, 200, 202, 203, 204], "being": [2, 4, 8, 110, 113, 134], "sent": [2, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "ad": [2, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 28, 47, 53, 57, 58, 103, 177, 178, 189, 198], "addit": [2, 5, 9, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 112, 174, 175, 191, 202, 204], "kwarg": [2, 3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 28, 29, 34, 35, 36, 37, 38, 39, 41, 42, 45, 53, 55, 57, 58, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 104, 110, 112, 113, 116, 122, 126, 132, 133, 134, 137, 144, 155, 185, 191], "see": [2, 3, 4, 8, 9, 14, 17, 20, 53, 58, 103, 110, 137, 164, 167, 170, 173, 175, 177, 179, 180, 183, 186, 187, 188, 189, 191, 192, 193, 195, 198, 200, 201, 203], "detail": [2, 4, 11, 14, 17, 20, 53, 58, 103, 110, 112, 162, 164, 168, 175, 185, 190, 200, 203], "int": [2, 3, 6, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 32, 38, 42, 43, 44, 45, 48, 51, 53, 57, 58, 60, 61, 64, 65, 70, 71, 72, 73, 75, 76, 80, 81, 82, 84, 86, 87, 88, 89, 91, 93, 97, 98, 99, 102, 103, 104, 110, 111, 112, 113, 115, 117, 118, 120, 122, 123, 125, 127, 132, 133, 134, 135, 136, 137, 144, 145, 146, 155, 174, 175, 183, 188, 191, 192, 200, 205, 206], "l2_norm": 2, "thread_count": 2, "chunk_siz": 2, "max_chunk_byt": 2, "104857600": 2, "queue_siz": 2, "batch_siz": [2, 3, 6, 10, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 32, 42, 43, 45, 53, 57, 58, 59, 71, 72, 87, 88, 98, 99, 103, 110, 113, 132, 188, 190, 194, 195], "overriden": 2, "pre": [2, 6, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 135, 176, 185, 191, 197, 202], "dsl": 2, "addition": [2, 3, 14, 53, 103], "knn": 2, "num_candid": 2, "100": [2, 5, 14, 16, 17, 18, 19, 20, 21, 24, 43, 53, 57, 58, 103, 110, 113, 125, 166, 188, 191, 192], "Such": [2, 4, 5, 6, 8, 195, 196, 198], "leverag": [2, 3, 4, 9, 68, 169, 175, 176, 177, 178, 180, 185, 194, 195, 196, 200], "flag": [2, 3, 6], "index_text": [2, 6, 13, 18, 57, 59, 71, 72, 87, 88], "sever": [2, 4, 6, 173], "pizza": 2, "person": [2, 55], "eat": 2, "restaur": 2, "pizza_doc": 2, "part": [2, 3, 6, 9, 55, 169, 179, 185, 188], "mostli": [2, 6, 8], "split": [2, 6, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 55, 57, 58, 103, 169], "group": [2, 6, 13, 14, 16, 17, 18, 19, 20, 21, 24, 36, 53, 57, 58, 103, 112, 183, 188], "item": [2, 3, 6, 14, 15, 16, 17, 18, 19, 20, 53, 55, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 110, 113, 118, 144, 164, 188, 200], "tag_indic": [2, 6, 13, 18, 57, 59, 71, 72, 87, 88], "food_typ": [2, 6], "italian": [2, 6], "spanish": [2, 6], "food": [2, 6], "cheap": [2, 6], "french": [2, 6], "expens": [2, 6, 8], "chines": [2, 6], "noddl": [2, 6], "quit": [2, 6, 170, 195, 200, 203], "results_cheap": [2, 6], "results_italian": [2, 6], "tags__food_typ": [2, 6], "don": [2, 6, 9, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 68, 103, 112, 169, 177, 180, 181, 188], "make": [2, 3, 4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 41, 42, 44, 53, 57, 58, 68, 103, 110, 113, 122, 135, 170, 175, 179, 180, 185, 189, 191, 193, 195, 198, 202, 204], "hostnam": [2, 5, 8], "dict": [2, 3, 4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 24, 28, 29, 32, 36, 38, 41, 42, 45, 51, 53, 56, 57, 58, 60, 61, 67, 71, 72, 73, 76, 77, 81, 82, 83, 84, 87, 88, 89, 93, 94, 98, 99, 103, 109, 110, 111, 112, 113, 126, 127, 133, 134, 135, 137, 168, 175, 180, 183, 188, 192, 197, 200, 203], "client": [2, 3, 5, 6, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 59, 71, 73, 81, 82, 83, 84, 86, 87, 89, 103, 176, 200], "cloud_id": 2, "api_kei": [2, 5, 13, 53, 59, 81, 82], "class": [2, 3, 4, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 144, 155, 156, 157, 158, 159, 174, 176, 177, 178, 185, 187, 198, 200, 205, 206], "whether": [2, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 53, 55, 57, 58, 71, 73, 87, 89, 103, 110, 112, 113, 120, 165, 178, 183, 190, 201], "handl": [2, 3, 6, 68, 116, 163, 166, 177, 182, 185, 200], "refresh": 2, "plural": 2, "compli": 2, "seen": [3, 177], "previou": [3, 4, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 144, 164, 183, 197, 205, 206], "chapter": [3, 162, 175, 177, 180, 183, 185, 187, 188, 189, 192, 200, 201, 203], "sql": [3, 4, 64], "nosql": 3, "motiv": [3, 165, 203], "board": 3, "advanc": [3, 9, 25, 31, 49, 114, 163, 167, 184, 193, 202, 203, 204], "languag": [3, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103, 167, 169, 176, 179, 192, 197], "vendor": 3, "power": [3, 26, 63, 79, 95, 187, 193], "well": [3, 8, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 162, 167, 173, 177, 180, 183, 200, 201, 202], "design": [3, 110, 113, 116, 118, 133, 174, 175, 177, 181, 185, 191, 197, 204], "maintain": [3, 179, 185], "plug": 3, "ai": [3, 110, 137, 167, 171, 172, 173, 174, 175, 176, 180, 195, 197, 198], "ecosystem": [3, 177, 185], "hub": [3, 112, 176, 177, 196], "clip": [3, 177, 183, 204, 205, 206], "servic": [3, 9, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 177, 200, 203, 204], "finetun": [3, 177, 203], "synergi": 3, "after": [3, 8, 9, 14, 16, 17, 18, 19, 20, 21, 24, 26, 43, 53, 55, 57, 58, 103, 110, 113, 115, 116, 117, 118, 119, 122, 123, 132, 133, 134, 144, 164, 167, 174, 175, 190, 191, 197, 200], "extens": [3, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 137, 197, 203], "conveni": [3, 169, 173], "promis": [3, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "experi": [3, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 193, 201, 203, 204], "regular": [3, 4, 192, 205, 206], "extra": [3, 4, 14, 16, 17, 18, 19, 20, 21, 36, 37, 42, 53, 57, 58, 103, 110, 113, 126, 135, 162, 185, 201, 202, 204], "learn": [3, 4, 9, 164, 166, 174, 175, 176, 177, 180, 181, 183, 188, 193, 200, 203, 204], "walk": [3, 167], "through": [3, 4, 167, 174, 177, 179, 188], "mydocstor": 3, "look": [3, 4, 110, 113, 122, 164, 167, 170, 175, 181, 190, 191, 195, 197, 200, 203], "config": [3, 6, 13, 14, 17, 53, 58, 59, 81, 86, 98, 99, 103, 110, 135, 169, 198], "start": [3, 4, 14, 15, 16, 17, 18, 19, 20, 21, 44, 52, 53, 57, 58, 60, 65, 67, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 110, 113, 118, 122, 171, 174, 183, 188, 205, 206], "go": [3, 4, 167, 185, 188, 197, 205, 206], "arrai": [3, 12, 110, 112, 113, 118, 130, 133, 139, 140, 142, 143, 145, 146, 161, 170, 179, 180, 181, 185, 186, 187, 192, 194, 197, 200, 203, 205, 206], "sub": [3, 14, 16, 17, 18, 19, 20, 21, 44, 52, 53, 57, 58, 103, 112, 166, 169, 170, 174, 175, 177, 178, 179, 183, 184, 188, 205, 206], "four": [3, 166, 203, 205, 206], "file": [3, 7, 14, 16, 17, 18, 19, 20, 21, 34, 35, 36, 38, 39, 44, 53, 55, 57, 58, 103, 110, 112, 113, 115, 116, 119, 122, 123, 134, 137, 162, 165, 166, 169, 175, 179, 182, 183, 185, 195, 197, 205, 206], "readm": [3, 169], "md": 3, "These": [3, 8, 14, 16, 17, 18, 19, 20, 21, 28, 32, 37, 53, 57, 58, 68, 103, 180, 191, 193, 200, 205, 206], "consist": [3, 8, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 166, 167, 177, 183, 203, 204, 205, 206], "necessari": [3, 61, 72, 77, 88, 94, 99, 144, 175], "search": [3, 8, 9, 14, 16, 17, 18, 19, 20, 21, 29, 42, 48, 53, 57, 58, 71, 73, 87, 88, 89, 103, 164, 165, 176, 177, 181, 183, 204, 205, 206], "anoth": [3, 4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 42, 43, 53, 57, 58, 103, 104, 110, 155, 174, 175, 179, 181, 182, 189, 194], "basegetsetdelmixin": [3, 59, 63, 66, 68, 74, 79, 84, 90, 95, 101], "getsetdelmixin": [3, 59, 60, 63, 71, 74, 76, 79, 81, 84, 87, 90, 93, 95, 98, 101], "def": [3, 4, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 43, 53, 57, 58, 103, 109, 167, 169, 178, 191, 195, 200], "_get_doc_by_id": [3, 68], "self": [3, 14, 16, 17, 18, 19, 20, 21, 24, 28, 32, 42, 44, 53, 55, 57, 58, 103, 104, 110, 155, 195], "_id": [3, 69], "_del_doc_by_id": [3, 68], "_set_doc_by_id": [3, 68], "_load_offset2id": 3, "_save_offset2id": 3, "five": [3, 169, 203], "correspond": [3, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 137, 166, 167, 168, 169, 174, 175, 178, 179, 183, 194, 205, 206], "logic": [3, 4, 47, 187, 192, 200], "string": [3, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 34, 36, 39, 42, 45, 52, 53, 57, 58, 71, 73, 87, 89, 98, 99, 103, 110, 112, 113, 115, 125, 126, 132, 134, 137, 139, 179, 180, 183, 185, 187, 188, 190, 192, 197, 200, 205, 206], "essenti": 3, "ensur": [3, 4, 174, 185], "offset2id": [3, 59, 64, 66, 68, 69], "map": [3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 36, 43, 51, 53, 57, 58, 71, 72, 103, 109, 110, 112, 113, 133, 168, 175, 177, 178, 180, 183, 195, 205, 206], "behaviour": [3, 109], "inherit": [3, 16, 19, 132, 182, 198], "introduc": [3, 4, 162, 180, 185, 187, 200], "adapt": 3, "_offset2id": 3, "member": [3, 8, 109], "variabl": [3, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 98, 99, 103, 137, 190, 197, 205, 206], "_list_lik": 3, "_get_offset2ids_meta": 3, "els": [3, 55, 137, 144, 176, 193], "upsert": 3, "remov": [3, 13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 60, 65, 66, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 137, 185, 187, 203], "old": [3, 137, 162, 169, 203], "recommened": 3, "_get_docs_by_id": [3, 68], "_del_docs_by_id": [3, 68], "_clear_storag": [3, 68], "_set_doc_value_pair": 3, "_set_doc_value_pairs_nest": 3, "_set_docs_by_id": [3, 68], "signatur": 3, "fine": [3, 162], "grain": [3, 162], "frequent": [3, 8, 110, 113, 116, 118, 133, 180, 183, 185, 197, 203], "fulli": [3, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 28, 32, 53, 57, 58, 103, 110, 113, 122, 179, 188, 198], "option": [3, 6, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 32, 34, 36, 38, 40, 41, 42, 43, 44, 45, 48, 52, 53, 57, 58, 60, 61, 65, 70, 71, 72, 73, 75, 76, 80, 81, 82, 86, 87, 88, 89, 91, 93, 94, 97, 98, 99, 102, 103, 109, 110, 111, 112, 113, 118, 122, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 144, 145, 146, 155, 156, 157, 158, 173, 188, 196, 200, 201], "gener": [3, 5, 8, 12, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 32, 34, 38, 43, 44, 48, 53, 57, 58, 68, 103, 110, 113, 122, 125, 133, 134, 135, 137, 152, 154, 162, 165, 168, 170, 179, 189, 203, 205, 206], "slow": [3, 4, 10, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 68, 103], "refer": [3, 8, 11, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 166, 175, 185, 188, 189, 196, 197], "out": [3, 9, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 32, 43, 53, 55, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 137, 167, 173, 177, 181, 185, 197, 204], "iter": [3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 38, 43, 52, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 84, 86, 87, 91, 93, 97, 98, 102, 103, 112, 189, 195, 203], "union": [3, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 34, 35, 36, 38, 39, 42, 43, 53, 57, 58, 60, 61, 71, 72, 73, 81, 82, 87, 88, 89, 93, 94, 98, 99, 103, 110, 111, 112, 113, 115, 116, 119, 122, 126, 127, 132, 133, 134, 135, 139, 145], "type_check": 3, "basesequencelikemixin": [3, 59, 65, 66, 70, 75, 80, 86, 91, 97, 102], "sequencelikemixin": [3, 59, 60, 65, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102], "__eq__": 3, "__contains__": 3, "x": [3, 10, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103, 109, 139, 145, 146, 162, 175, 178, 183, 185, 197, 203, 205, 206], "__repr__": 3, "__add__": 3, "insert": [3, 8, 13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 60, 65, 66, 69, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 198], "custom": [3, 5, 7, 14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 103, 109, 174, 198], "_append": 3, "overrid": [3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 29, 41, 53, 57, 58, 68, 103, 109, 191], "last": [3, 4, 8, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 32, 43, 44, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 110, 113, 122, 125, 145, 164, 168, 170, 177, 187, 188, 195], "_extend": 3, "append": [3, 4, 13, 14, 15, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 59, 60, 65, 66, 69, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 170, 184, 186, 189, 191], "__len__": 3, "reli": [3, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 184, 187, 195, 203], "__iter__": 3, "standard": [3, 110, 113, 122, 175, 177], "mutablesequ": [3, 15, 70], "doc": [3, 4, 6, 9, 14, 16, 17, 18, 19, 20, 21, 24, 32, 43, 52, 53, 55, 56, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 107, 109, 110, 112, 113, 134, 146, 149, 162, 164, 166, 167, 174, 175, 177, 178, 179, 183, 184, 190, 192, 195, 196, 197, 199, 200, 205, 206], "batch_of_doc": 3, "_config": 3, "_upload_batch": 3, "dataclass": [3, 4, 6, 12, 110, 113, 124, 161, 165, 169, 176, 178, 179, 180, 188, 198, 203], "basebackendmixin": [3, 59, 61, 66, 67, 72, 77, 82, 88, 94, 99], "documentarraysourcetyp": [3, 17], "mydocstoreconfig": 3, "config1": 3, "config2": 3, "config3": 3, "backendmixin": [3, 59, 60, 61, 71, 72, 76, 77, 81, 82, 87, 88, 93, 94, 98, 99], "_init_storag": 3, "_doc": [3, 17, 198], "super": [3, 179, 180, 204], "_ensure_unique_config": 3, "config_root": 3, "config_subindex": 3, "config_join": 3, "subindex_nam": 3, "identifi": [3, 168, 180, 183, 190, 205, 206], "expos": [3, 9], "argument": [3, 8, 14, 15, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 110, 112, 113, 116, 122, 132, 133, 134, 135, 175, 178, 180, 185, 189, 191, 194, 197], "init_storag": 3, "pars": [3, 4, 56, 110, 113, 126, 135, 185], "either": [3, 4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 42, 43, 52, 53, 57, 58, 103, 110, 113, 122, 125, 132, 134, 139, 142, 143, 171, 179, 192, 194, 196, 197, 201, 205, 206], "accept": [3, 174, 175, 178, 179, 191, 192], "bool": [3, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 32, 34, 36, 38, 41, 42, 43, 44, 45, 52, 53, 55, 57, 58, 60, 61, 71, 72, 73, 81, 82, 87, 88, 89, 93, 94, 98, 99, 103, 109, 110, 112, 113, 116, 118, 120, 122, 123, 124, 125, 132, 133, 134, 135, 137, 145, 146, 205, 206], "further": [3, 8, 11, 14, 17, 20, 53, 58, 103, 110, 167, 169, 174, 183, 200], "outsid": [3, 110, 113, 122], "take": [3, 4, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 135, 164, 176, 191, 195, 200], "form": [3, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 110, 113, 116, 118, 133, 135, 174, 191, 192, 197], "appropri": 3, "veri": [3, 4, 8, 10, 14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 58, 103, 162, 164, 169, 175, 181, 188, 189, 191, 195, 200, 203], "copi": [3, 17, 55, 104, 110, 135, 155, 174, 191, 194], "behavior": [3, 4, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 162, 178, 180, 185, 189, 191], "subindex": [3, 4, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 165, 198], "root": [3, 14, 16, 17, 18, 19, 20, 21, 47, 52, 53, 57, 58, 103, 175, 180, 187, 188, 191], "field": [3, 5, 8, 9, 12, 14, 16, 17, 18, 19, 20, 21, 28, 29, 36, 53, 55, 57, 58, 67, 71, 73, 87, 88, 89, 103, 104, 105, 109, 110, 112, 113, 120, 125, 133, 135, 146, 155, 168, 169, 176, 177, 178, 179, 180, 181, 183, 185, 187, 188, 191, 192, 197, 198, 201, 205, 206], "explicitli": [3, 4, 137, 185], "usual": [3, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 169, 178, 181], "table_nam": [3, 4, 7, 13, 58, 59, 93, 94, 96], "clash": 3, "actual": [3, 4, 26, 55, 68, 110, 113, 134, 167, 179, 191, 202, 205, 206], "parent": [3, 16, 165, 177, 183, 198, 200, 205, 206], "und": 3, "subindic": 3, "despit": 3, "within": [3, 6, 8, 14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 103, 166], "typevar": [3, 109, 178], "input": [3, 4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 43, 53, 57, 58, 71, 73, 87, 89, 103, 110, 113, 122, 135, 137, 146, 185, 187, 190, 191, 200, 203], "mydocumentstorearraytyp": 3, "findmixin": [3, 13, 21, 29, 59, 60, 62, 71, 73, 76, 78, 81, 83, 87, 89, 93, 98, 100], "_find_similar_vector": 3, "_find": [3, 29], "elasticarraytyp": 3, "given": [3, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 42, 43, 44, 53, 57, 58, 71, 73, 87, 89, 103, 110, 112, 113, 122, 125, 132, 169, 175, 177, 178, 179, 180, 190, 191, 192, 194, 197, 198], "otherwis": [3, 8, 9, 14, 16, 17, 18, 19, 20, 21, 29, 44, 53, 55, 57, 58, 71, 73, 87, 89, 103, 110, 113, 115, 122, 137, 175], "closest": [3, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103, 167, 169, 194], "abc": [3, 21, 60, 67, 68, 71, 76, 87, 93, 98], "__all__": 3, "storagemixin": [3, 14, 18, 20, 53, 57, 58, 59, 60, 71, 76, 81, 87, 93, 98, 103], "past": 3, "modul": [3, 8, 161, 175, 177, 191, 204], "under": [3, 4, 55, 144, 162, 169, 175, 177, 187, 197, 198, 202, 203], "content": [3, 14, 16, 17, 18, 19, 20, 41, 53, 57, 58, 103, 111, 112, 119, 127, 161, 180, 181, 182, 183, 189, 192], "documentarraymydocstor": 3, "__new__": [3, 18, 53, 57, 103], "cl": [3, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 109], "arg": [3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 34, 37, 38, 41, 53, 54, 55, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 110, 112, 113, 126, 132, 162], "almost": [3, 4, 177], "now": [3, 4, 8, 9, 10, 162, 164, 169, 176, 178, 187, 188, 189, 190, 191, 195, 197, 200, 202, 203], "allmixin": [3, 13, 17, 21, 110, 113, 155, 157], "basedocumentarrai": [3, 12, 13, 15, 17], "documentarraylik": [3, 14, 16, 17, 18, 19, 20, 21, 28, 39, 53, 57, 58, 103], "elif": 3, "documentarrayinmemori": [3, 9, 12, 13, 16, 19, 20], "done": [3, 10, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 179, 191, 195, 197, 200], "abl": [3, 9, 200], "welcom": 3, "back": [3, 4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 43, 45, 53, 57, 58, 103, 110, 113, 132, 162, 164, 165, 175, 188, 197, 200, 202], "least": [3, 164, 188], "unit": [3, 176, 177, 179], "test_advance_index": 3, "test_sequ": 3, "test_construct": 3, "pleas": [3, 11, 14, 16, 17, 18, 19, 20, 21, 24, 34, 42, 43, 53, 57, 58, 68, 103, 110, 113, 122, 144, 162, 180, 185, 188, 191, 196, 197, 200, 201, 202], "overload": 3, "readi": [3, 176, 185, 195, 197, 203, 204], "commit": [3, 4, 60, 64], "extern": [4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 162, 180], "switch": [4, 164, 185, 193, 194], "idiom": [4, 9, 177, 203, 204], "simpl": [4, 8, 112, 163, 165, 175, 176, 177, 182, 184, 188, 190, 194, 195, 197, 203], "db": [4, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "multimod": [4, 6, 109, 110, 113, 174, 175, 176, 177, 188, 198, 203, 204], "documentarraysqlit": [4, 12, 13, 58], "documentarraysqlite97c8c833586444a89272ff0ff4287edb": 4, "serialize_config": [4, 5, 7, 8, 13, 14, 53, 58, 59, 60, 61, 81, 82, 83, 93, 94, 98, 99, 103, 198], "conn_config": [4, 7, 13, 58, 59, 93, 94], "journal_mod": [4, 7, 13, 58, 59, 93, 94], "synchron": [4, 7, 13, 58, 59, 93, 94], "modifi": [4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 43, 45, 53, 55, 57, 58, 103, 110, 113, 132, 180, 182, 195], "statement": 4, "properli": 4, "save": [4, 9, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 35, 36, 37, 39, 44, 48, 53, 57, 58, 66, 69, 103, 110, 113, 115, 116, 119, 122, 134, 165, 166, 194, 195, 197], "unexpect": [4, 180], "yield": [4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 43, 52, 53, 57, 58, 103, 110, 112, 113, 134, 170, 185, 189, 195, 197], "inaccess": 4, "procedur": [4, 169, 195, 200], "ident": [4, 8, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 180, 189, 191], "emb": [4, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 110, 113, 132, 165, 177, 179, 181, 182, 187, 194, 204], "plot_embed": [4, 13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 190, 199, 201], "box": [4, 9, 177], "There": [4, 8, 10, 167, 175, 179, 195, 202, 203], "two": [4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 28, 53, 55, 57, 58, 103, 110, 113, 122, 133, 146, 167, 170, 175, 177, 184, 187, 191, 192, 195, 201], "wai": [4, 6, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 167, 173, 175, 177, 180, 187, 188, 191, 193, 195, 198, 200, 201], "initi": [4, 8, 14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 98, 99, 103, 110, 180], "4477814032": 4, "alia": [4, 55, 67, 98, 99, 103], "choos": [4, 135, 194, 197], "style": [4, 40, 112, 166, 201], "Of": [4, 187, 200], "cours": [4, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 169, 187, 200], "explicit": 4, "nest": [4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 35, 52, 53, 57, 58, 103, 105, 106, 110, 113, 125, 137, 165, 168, 169, 175, 177, 179, 181, 183, 186, 191, 192, 193, 200, 201, 203, 204], "modal": [4, 12, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 110, 111, 113, 127, 135, 136, 165, 175, 179, 180, 183, 185, 188, 192, 197, 198, 203, 204, 205, 206], "load": [4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 23, 33, 34, 35, 36, 37, 39, 42, 53, 57, 58, 60, 64, 66, 69, 103, 110, 112, 113, 132, 162, 165, 166, 167, 169, 176, 178, 185, 190, 195, 197, 203], "former": [4, 174, 185], "sqliteconfig": [4, 12, 13, 17, 58, 59, 93, 94], "cfg": 4, "test": [4, 5, 6, 10, 109, 162, 174, 175, 178, 191, 195, 202, 204], "flexibl": [4, 174], "error": [4, 191, 200], "prone": 4, "placehold": 4, "prototyp": [4, 9, 201], "product": [4, 9, 197, 201, 203], "unnecessarili": 4, "relev": [4, 144, 191, 205, 206], "choic": [4, 14, 16, 17, 18, 19, 20, 21, 24, 43, 53, 57, 58, 103], "scale": [4, 110, 113, 122, 203], "eas": 4, "setup": 4, "million": [4, 10, 110, 113, 122, 185, 194, 197], "benchmark": [4, 6, 194, 197, 203], "exact": [4, 20, 58, 191], "scan": [4, 13, 53, 59, 81, 84, 164, 189], "explan": [4, 8, 196], "consider": [4, 8], "think": [4, 175, 188], "program": [4, 163, 195], "view": [4, 110, 113, 122, 164, 171], "sync": [4, 13, 14, 16, 18, 19, 20, 53, 57, 58, 59, 60, 63, 66, 68, 71, 74, 76, 79, 81, 84, 87, 90, 93, 95, 98, 101, 103], "da1": [4, 7, 58, 189, 194], "my_index": 4, "len": [4, 169, 175, 185, 191, 195, 197, 199, 200, 203], "execut": [4, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 60, 64, 103, 190, 191], "line": [4, 38, 112, 163, 164, 169, 175], "fresh": 4, "increment": 4, "seem": [4, 177, 203], "happen": [4, 195], "sinc": [4, 8, 110, 113, 122, 135, 137, 167, 191, 203], "scope": [4, 9, 183, 205, 206], "exit": [4, 8, 110, 113, 134, 170], "destroi": 4, "first": [4, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 41, 44, 47, 53, 55, 57, 58, 60, 65, 67, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 110, 113, 116, 134, 137, 144, 145, 146, 164, 167, 168, 169, 170, 174, 175, 177, 183, 185, 187, 188, 190, 191, 192, 195, 202, 203, 204], "But": [4, 164, 177, 179, 185, 187, 194], "had": [4, 169, 203], "occur": [4, 144], "correctli": [4, 10, 191, 201], "prove": 4, "yourself": [4, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 179, 195], "comment": 4, "third": 4, "explor": [4, 166], "predict": [4, 191], "manner": 4, "another_index": 4, "hurrai": 4, "problem": [4, 10, 164, 194, 195, 200], "point": [4, 5, 110, 113, 122, 123, 165, 172, 175, 179, 182, 191, 199, 201], "temp3": 4, "text": [4, 5, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 29, 40, 43, 53, 55, 57, 58, 71, 72, 73, 87, 88, 89, 103, 109, 110, 111, 112, 113, 116, 118, 120, 127, 135, 136, 165, 167, 174, 175, 177, 179, 180, 181, 182, 183, 185, 187, 189, 190, 191, 192, 196, 197, 198, 200, 203, 204, 205, 206], "hello": [4, 14, 16, 17, 18, 19, 20, 21, 45, 53, 55, 57, 58, 103, 110, 113, 132, 163, 167, 168, 169, 175, 179, 180, 185, 187, 189, 196, 197, 198, 200, 203], "realli": [4, 175, 185], "date": 4, "sens": [4, 8, 110, 113, 122, 170, 191], "speak": 4, "alreadi": [4, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 171, 188, 191, 193, 199, 202], "written": [4, 14, 16, 17, 18, 19, 20, 21, 26, 28, 53, 57, 58, 103, 110, 113, 132, 169, 196], "snippet": [4, 9, 176, 177, 191, 197], "increas": [4, 137, 203], "simpli": [4, 8, 164, 166, 167, 169, 174, 175, 179, 182, 185, 187, 188, 190, 191, 193, 194, 197, 200], "put": [4, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 125, 164, 170, 174, 175, 177, 181, 203], "meta": [4, 177, 205, 206], "immedi": [4, 195], "costli": 4, "consequ": 4, "block": [4, 10, 188, 191, 195, 203], "solv": [4, 175, 177, 195], "refactor": [4, 162, 176, 203], "temp4": 4, "correct": [4, 185, 191, 197], "home": 4, "messag": [4, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 110, 113, 128, 180, 185, 189, 197], "write": [4, 168, 191, 194, 204], "row": [4, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103, 139, 140, 142, 143, 145, 146, 168, 175, 194, 203], "ani": [4, 8, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 55, 57, 58, 71, 72, 87, 88, 103, 110, 111, 112, 113, 116, 118, 122, 126, 127, 133, 135, 137, 146, 162, 167, 174, 175, 179, 183, 187, 188, 191, 192, 196, 198, 200, 203, 205, 206], "any_store_beyond_in_memori": 4, "d": [4, 5, 10, 110, 113, 133, 137, 174, 175, 176, 179, 180, 181, 182, 184, 185, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 200, 203, 205, 206], "slice": [4, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 188], "NOT": [4, 55, 110, 113, 122], "chang": [4, 6, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 135, 164, 171, 177, 178, 180, 185, 189, 191, 203], "solut": [4, 176, 177, 179], "selector": [4, 162, 174, 175, 176, 188], "offset": [4, 12, 64, 110, 111, 113, 118, 127, 135, 136, 183, 185, 188, 197, 205, 206], "along": [4, 14, 16, 17, 18, 19, 20, 21, 22, 24, 29, 32, 53, 57, 58, 71, 73, 87, 89, 103], "concurr": 4, "besid": [4, 6, 168, 192, 203], "cost": 4, "d1": [4, 110, 179, 180, 181, 186, 189], "d2": [4, 110, 180, 181, 186], "d3": [4, 110, 180, 181, 186], "obvious": 4, "disk": [4, 8, 10, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 162, 193], "concern": 4, "overwhelm": 4, "affect": [4, 162], "On": [4, 8, 190, 201], "bright": 4, "modern": [4, 185, 200, 204], "highli": [4, 164, 177, 185, 197, 203], "resolv": [4, 9, 168], "activ": [4, 181, 190, 203], "continu": [4, 175, 177, 187, 188, 197], "v0": [5, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 110, 113, 132, 196], "6333": [5, 53, 81, 82], "6334": [5, 53, 81, 82], "ulimit": 5, "lot": [5, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103, 195], "collect": [5, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 125, 164, 177, 191], "nofil": 5, "soft": 5, "65535": 5, "hard": [5, 164], "collection_nam": [5, 13, 53, 59, 81, 82, 83, 84, 86], "grpc_port": [5, 13, 53, 59, 81, 82], "prefer_grpc": [5, 13, 53, 59, 81, 82], "gprc": 5, "whenev": [5, 68], "kei": [5, 8, 14, 16, 17, 18, 19, 20, 21, 26, 28, 51, 53, 55, 57, 58, 103, 109, 110, 113, 126, 133, 134, 137, 162, 165, 198, 205, 206], "authent": [5, 189], "cloud": [5, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 110, 113, 123, 137, 165, 171, 173, 175, 182, 201, 202, 203, 204], "ssl": [5, 6], "protocol": [5, 8, 10, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 34, 39, 53, 57, 58, 59, 98, 99, 103, 110, 113, 126, 137, 152, 154, 162, 185, 195, 196, 197, 203], "serial": [5, 7, 8, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 110, 113, 126, 137, 168, 193, 195, 200, 202, 203, 204], "scroll_batch_s": [5, 13, 53, 59, 81, 82, 84], "scroll": 5, "larger": [5, 14, 16, 17, 18, 19, 20, 21, 39, 53, 57, 58, 103, 110, 113, 120], "accur": [5, 8, 167], "full_scan_threshold": [5, 13, 53, 59, 81, 82], "kilobyt": 5, "payload": 5, "edg": [5, 8], "graph": [5, 6, 8, 146], "space": [5, 139, 166, 188], "init": [5, 109, 175, 197], "4917906896": 5, "ndocumentarrai": [5, 197], "search_param": 5, "hnsw_ef": 5, "suppos": [5, 167], "npoint": 5, "redislab": 6, "redisearch": 6, "6379": [6, 57, 87, 88], "previuosli": 6, "idx": [6, 69, 170], "documentarrayredi": [6, 12, 13, 57, 90], "update_schema": [6, 13, 57, 59, 87, 88], "redis_config": [6, 13, 57, 59, 87, 88], "ef_runtim": [6, 13, 57, 59, 87, 88], "block_siz": [6, 13, 57, 59, 87, 88], "1048576": 6, "initial_cap": [6, 13, 57, 59, 87, 88], "socket_timeout": 6, "redissearch": 6, "ip": 6, "flat": [6, 8, 188], "syntax": [6, 132, 162, 174, 175, 176, 182, 188, 196, 203], "color": [6, 10, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 122, 125, 164], "stock": 6, "blue": 6, "red": [6, 109, 188], "inf": 6, "score": [6, 8, 12, 14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 103, 110, 111, 113, 127, 135, 136, 144, 161, 167, 181, 183, 185, 187, 191, 194, 197, 205, 206], "192": [6, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 110, 113, 132, 196], "integ": [6, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 60, 65, 70, 71, 72, 75, 76, 80, 81, 86, 87, 88, 91, 93, 97, 98, 102, 103, 110, 113, 133, 169, 188, 205, 206], "treat": [6, 110, 113, 115], "With": [6, 8, 14, 20, 53, 58, 103, 167, 169, 189, 195], "geospati": 6, "geo": [6, 57, 87, 88], "max_dist": 6, "earth": 6, "coordin": [6, 183, 205, 206], "km": 6, "brute": [6, 8], "forc": [6, 8, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 110, 113, 128, 137], "robust": 6, "hierarch": 6, "navig": 6, "small": [6, 8, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 110, 113, 120, 140, 142, 143, 145, 165, 169, 188, 197], "world": [6, 167, 168, 169, 175, 177, 179, 180, 185, 187, 189, 197, 198, 200, 204], "configuratoin": 6, "current": [6, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 110, 113, 122, 132, 146], "96046447754e": 6, "token1": 6, "token2": 6, "token3": 6, "token4": 6, "rank": [6, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 144, 191], "bm25": 6, "tfidf": 6, "docnorm": 6, "dismax": 6, "docscor": 6, "ham": [6, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "scorer": 6, "larg": [7, 8, 14, 16, 17, 18, 19, 20, 21, 28, 44, 53, 57, 58, 103, 110, 113, 120, 162, 165, 188, 190, 191, 194, 195, 203], "reconnect": 7, "mine": [7, 58], "filenam": [7, 14, 16, 17, 18, 19, 20, 21, 23, 34, 35, 36, 39, 53, 57, 58, 103, 110, 112, 113, 116, 119, 122, 137, 189, 197], "sqlite3": 7, "pragma": 7, "journal": [7, 167, 192], "mode": [7, 112, 137, 169], "video": [8, 110, 113, 165, 175, 179, 182, 183, 201, 202, 203, 204, 205, 206], "tutori": [8, 9], "guid": [8, 11, 14, 17, 20, 53, 58, 103, 110, 162], "command": [8, 57, 87, 88, 163], "8080": [8, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 98, 99, 103, 110, 113, 132], "scheme": [8, 183, 205, 206], "semitechnologi": 8, "restart": 8, "failur": 8, "query_defaults_limit": 8, "authentication_anonymous_access_en": 8, "persistence_data_path": 8, "var": 8, "lib": 8, "default_vectorizer_modul": 8, "enable_modul": 8, "cluster_hostnam": 8, "node1": 8, "bound": [8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 109, 170, 178, 195], "capit": 8, "1234": [8, 103, 190], "preses": 8, "comput": [8, 14, 16, 17, 18, 19, 20, 21, 26, 28, 42, 53, 57, 58, 103, 110, 113, 122, 132, 139, 142, 143, 169, 183, 188, 193, 194, 197, 200, 203, 205, 206], "squar": [8, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 140, 142, 143, 174], "chosen": [8, 137, 194], "becom": [8, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 188], "tradeoff": 8, "timeout_config": [8, 13, 59, 98, 99, 103], "timeout": [8, 110, 113, 116, 122, 133], "request": [8, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 110, 113, 132, 195, 197, 202, 204], "dynamic_ef_min": [8, 13, 59, 98, 99, 103], "act": 8, "boundari": 8, "enough": [8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 191, 203], "suggest": [8, 195], "never": [8, 185], "drop": [8, 60, 64, 180], "dynamic_ef_max": [8, 13, 59, 98, 99, 103], "cap": 8, "massiv": 8, "dynamic_ef_factor": [8, 13, 59, 98, 99, 103], "determin": [8, 14, 16, 17, 18, 19, 20, 21, 28, 52, 53, 57, 58, 103, 110, 113, 122, 134, 137, 144, 170, 175, 191], "factor": 8, "vector_cache_max_object": [8, 13, 59, 98, 99, 103], "held": 8, "2m": 8, "lookup": [8, 13, 54, 56], "magnitud": 8, "cach": [8, 137], "sparingli": 8, "flat_search_cutoff": [8, 13, 59, 98, 99, 103], "absolut": 8, "threshold": 8, "cutoff": 8, "bypass": 8, "entir": [8, 167], "40000": 8, "turn": [8, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "cleanup_interval_second": [8, 13, 59, 98, 99, 103], "async": [8, 200], "repair": 8, "prior": 8, "cleanup": 8, "mark": [8, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 110, 113, 132, 169], "reassign": 8, "datapoint": 8, "typic": [8, 55], "adjust": 8, "down": [8, 202], "clean": [8, 200], "skip": [8, 13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 59, 98, 99, 103, 110, 113, 125], "situat": 8, "doesn": [8, 164], "meant": 8, "glue": 8, "duplic": [8, 135], "candid": 8, "worst": 8, "earli": [8, 188, 201], "met": 8, "togeth": [8, 14, 16, 17, 18, 19, 20, 21, 22, 24, 32, 36, 53, 57, 58, 103, 112, 137, 164, 188, 189], "normal": [8, 14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 103, 110, 113, 122, 125, 132, 144, 145, 164, 182, 195], "immut": 8, "And": [8, 55, 169, 192, 200], "fast": [8, 9, 14, 17, 53, 103, 203, 204], "bert": 8, "transform": 8, "automodel": 8, "autotoken": 8, "token": [8, 14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 137, 169, 173, 176, 197], "from_pretrain": 8, "uncas": 8, "collate_fn": [8, 14, 16, 17, 18, 19, 20, 21, 26, 28, 53, 57, 58, 103], "return_tensor": 8, "pt": 8, "truncat": 8, "pad": [8, 14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 110, 113, 122, 133, 169, 188], "path": [8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 34, 44, 52, 53, 57, 58, 103, 110, 112, 113, 125, 135, 137, 175, 183, 187, 188, 189, 196, 198, 205, 206], "lessthanequ": 8, "valuenumb": 8, "lowerthanequ": 8, "valueint": 8, "upgrad": 8, "primit": [8, 105, 106, 175], "natur": [8, 162, 179, 187, 189], "highest": 8, "lowest": 8, "dummi": [8, 9], "word": [8, 14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 110, 113, 133, 162, 169, 177, 188, 198, 203], "desc": 8, "asc": 8, "ascend": 8, "nearvector": 8, "combin": [8, 165, 183, 197], "sometim": [8, 110, 113, 116, 118, 133, 169], "query_param": 8, "dictionari": [8, 14, 16, 17, 18, 19, 20, 21, 28, 51, 53, 57, 58, 103, 110, 113, 133, 135, 192, 198], "bodi": [8, 166, 200], "familiar": [8, 167, 174, 177, 199, 203], "graphql": [8, 202, 204], "goe": 8, "36840257": 8, "13973749": 8, "28994447": 8, "_addit": 8, "said": [8, 195], "theoret": 8, "anyth": [8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 193, 194], "weaviate_certainti": 8, "someth": [8, 181], "0000001": 8, "cosine_similar": 8, "0000002000000001": 8, "attach": [8, 110, 113, 134, 199], "featureproject": 8, "classif": 8, "core": [8, 10, 195, 200, 202, 203], "page": [8, 167, 171, 179], "text2vec": 8, "contextionari": 8, "respons": [8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 195, 204], "param": [8, 14, 16, 17, 18, 19, 20, 21, 41, 47, 53, 55, 57, 58, 103, 110, 113, 125, 137, 139, 140, 146], "creationtimeunix": 8, "lastupdatetimeunix": 8, "tags__creationtimeunix": 8, "tags__lastupdatetimeunix": 8, "1656020204563": 8, "exactli": [9, 175, 191], "too": [9, 164, 188, 189, 191, 193, 194, 200, 203], "verbos": 9, "rest": [9, 185, 195, 197, 200, 203], "stabl": [9, 110, 113, 134], "app": [9, 200, 204], "endpoint": [9, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 110, 113, 132, 196, 200], "schema": [9, 14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 58, 60, 64, 98, 99, 103, 110, 113, 129, 135, 162, 178, 183, 185, 204], "strawberri": [9, 13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 58, 103, 110, 113, 202, 204], "debug": [9, 137, 201], "articl": [9, 174, 175, 177, 202], "serv": [9, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 181], "introduct": [9, 162], "background": [9, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "stronli": 9, "confus": [9, 162], "matcharrai": [9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 110, 113, 127, 187, 188, 191], "rememb": [9, 169, 174, 197], "fetch": [9, 179], "strawberry_typ": [9, 12, 110], "strawberrydocu": [9, 12, 14, 16, 17, 18, 19, 20, 21, 50, 53, 57, 58, 103, 110, 113, 131, 136], "lambda": [9, 109, 167, 169, 175, 176, 178, 191], "to_strawberry_typ": [9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 50, 53, 57, 58, 103, 110, 113, 131], "notic": [9, 55, 192], "could": [9, 14, 16, 17, 18, 19, 20, 21, 36, 41, 53, 57, 58, 103, 112, 164, 167, 183, 195, 205, 206], "preprocess": [9, 10, 164, 176, 182, 195, 197], "toi": [9, 163, 168, 170], "py": [9, 112], "consol": [9, 197, 201], "8000": 9, "browser": [9, 173], "graphiql": 9, "playground": 9, "url": [9, 137, 183, 202, 205, 206], "beyond": [9, 201], "decid": [9, 110, 113, 125], "perfect": [9, 176, 204], "short": [9, 162, 169], "wrap": [9, 68, 110, 113, 124, 137, 175, 180], "asgi": 9, "graphql_app": 9, "add_rout": 9, "add_websocket_rout": 9, "tensorflow": [10, 138, 139, 179, 181, 183, 187, 190, 194, 203, 204], "paddlepaddl": [10, 179, 181, 183, 187, 190, 203, 204], "tensor": [10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26, 28, 44, 53, 57, 58, 103, 110, 111, 113, 115, 118, 122, 123, 125, 127, 133, 134, 135, 136, 142, 143, 146, 162, 163, 164, 166, 167, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 190, 194, 195, 197, 201, 202, 203, 204, 205, 206], "spars": [10, 14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 103, 110, 113, 120, 132, 139, 140, 146, 179, 181, 183, 187, 194, 202, 204, 205, 206], "dens": [10, 110, 113, 120, 146, 164, 179, 181, 183, 185, 187, 190, 194, 205, 206], "pickl": [10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 34, 43, 53, 57, 58, 103, 110, 113, 126, 162, 185], "protobuf": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 34, 39, 53, 57, 58, 103, 104, 110, 112, 113, 126, 137, 155, 162, 180, 189, 195, 202, 203, 204, 205], "o": [10, 169, 177, 188], "compress": [10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 34, 53, 57, 58, 103, 110, 113, 126, 137, 185, 195, 197, 202, 203, 204], "transit": [10, 203, 204], "preserv": [10, 14, 16, 17, 18, 19, 20, 21, 24, 32, 44, 53, 57, 58, 103, 110, 113, 115, 188], "paddl": [10, 14, 16, 17, 18, 19, 20, 21, 26, 28, 53, 57, 58, 103, 110, 113, 132, 138, 139, 190, 194], "torch": [10, 26, 138, 139, 146, 167, 174, 176, 181, 190, 194, 202, 203, 204], "to_spars": 10, "to_tensor": 10, "save_binari": [10, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 39, 53, 57, 58, 103, 197], "gz": [10, 112], "again": [10, 191, 197, 200], "load_binari": [10, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 58, 103, 162, 197], "engin": [10, 18, 53, 57, 103, 175, 185, 200, 203, 204], "gpu": [10, 188, 190, 196, 197, 203, 204], "intens": [10, 203], "stuff": 10, "mani": [10, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 110, 113, 122, 164, 177, 197, 200, 201, 203], "pitfal": 10, "few": [10, 177], "util": [10, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103], "drain": [10, 195], "dataload": [10, 13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 58, 103], "figur": [10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 44, 53, 57, 58, 103, 176, 197, 203], "illustr": [10, 176, 184], "14gb": 10, "cpu_job": [10, 195], "sleep": [10, 195], "job": [10, 195], "gpu_job": [10, 195], "func": [10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 43, 53, 57, 58, 77, 103, 137, 195], "num_work": [10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 42, 43, 53, 57, 58, 103, 110, 113, 132, 195], "donecpu": 10, "section": [11, 171, 175, 177, 180, 193, 195, 197, 200, 202, 203], "codebas": [11, 176, 197, 203], "extract": [11, 110, 113, 122, 137, 163, 165], "docstr": 11, "mixin": [12, 13, 78, 110, 155], "queryset": [12, 13], "annliteconfig": [12, 13, 14, 17, 59, 60, 61], "documentarrayannlit": [12, 13, 14, 198], "chunk": [12, 13, 14, 17, 18, 19, 20, 21, 47, 52, 53, 57, 58, 103, 110, 111, 113, 122, 123, 127, 135, 136, 164, 165, 166, 167, 170, 174, 175, 177, 178, 179, 180, 183, 184, 185, 186, 187, 188, 195, 197, 198, 203, 205, 206], "chunkarrai": [12, 13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 110, 113, 127, 164, 187, 188, 198], "elast": [12, 13, 59], "documentarrayelast": [12, 13, 18, 74], "elasticconfig": [12, 13, 17, 18, 59, 71, 72], "documentarrayqdr": [12, 13, 53], "qdrantconfig": [12, 13, 53, 59, 81, 82], "redisconfig": [12, 13, 17, 57, 59, 87, 88], "documentarrayweavi": [12, 13, 98, 99, 101, 103], "weaviateconfig": [12, 13, 17, 59, 98, 99, 103], "enum": [12, 105], "documentmetadata": [12, 105, 106], "attributetyp": [12, 105, 106], "imagetyp": [12, 105, 106], "getter": [12, 22, 30, 105, 109, 176, 178, 179], "image_gett": [12, 105, 107, 109], "text_gett": [12, 105, 107, 109], "uri_gett": [12, 105, 107], "audio_gett": [12, 105, 107], "video_gett": [12, 105, 107], "mesh_gett": [12, 105, 107], "tabular_gett": [12, 105, 107], "blob_gett": [12, 105, 107], "json_gett": [12, 105, 107], "setter": [12, 22, 105, 109, 176, 178, 179], "image_sett": [12, 105, 108, 109], "text_sett": [12, 105, 108, 109], "uri_sett": [12, 105, 108], "audio_sett": [12, 105, 108], "video_sett": [12, 105, 108], "mesh_sett": [12, 105, 108], "blob_sett": [12, 105, 108], "json_sett": [12, 105, 108], "tabular_sett": [12, 105, 108], "is_multimod": [12, 105, 109, 110, 113, 124, 175], "documentdata": [12, 110, 111], "from_ndarrai": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 58, 103, 110, 112], "from_fil": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 58, 103, 110, 112, 164, 189, 195, 199], "from_csv": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 58, 103, 110, 112, 168], "from_huggingface_dataset": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 58, 103, 110, 112], "from_ndjson": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 58, 103, 110, 112], "from_lin": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 58, 103, 110, 112], "pydantic_model": [12, 110, 200], "pydanticdocu": [12, 14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 58, 103, 110, 113, 129, 135, 200], "strawberrydocumentinput": [12, 110, 136], "adjac": [12, 13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 110, 111, 113, 127, 135, 136, 180, 181, 183, 184, 185, 186, 188, 191, 197, 205, 206], "blob": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103, 110, 111, 113, 118, 122, 127, 135, 136, 162, 175, 178, 179, 180, 181, 182, 183, 185, 187, 197, 205, 206], "clear": [12, 13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 60, 64, 65, 66, 69, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 104, 110, 155, 179, 184], "content_hash": [12, 110, 113, 117], "content_typ": [12, 110, 113, 127, 135, 179], "convert_blob_to_datauri": [12, 110, 113, 116, 182], "convert_blob_to_image_tensor": [12, 110, 113, 122, 182], "convert_blob_to_tensor": [12, 110, 113, 118, 182], "convert_content_to_datauri": [12, 110, 113, 117, 182], "convert_image_tensor_to_blob": [12, 110, 113, 122, 182], "convert_image_tensor_to_sliding_window": [12, 110, 113, 122, 164, 182], "convert_image_tensor_to_uri": [12, 110, 113, 122, 182], "convert_tensor_to_blob": [12, 110, 113, 118, 182], "convert_tensor_to_text": [12, 110, 113, 133, 169, 182], "convert_text_to_datauri": [12, 110, 113, 133, 182], "convert_text_to_tensor": [12, 110, 113, 133, 169, 182], "convert_uri_to_datauri": [12, 110, 113, 118, 179, 182], "copy_from": [12, 104, 110, 155, 180], "displai": [12, 110, 113, 125, 165, 166, 186], "display_3d": [12, 110, 113, 125], "display_tensor": [12, 110, 113, 125], "display_uri": [12, 110, 113, 125], "embed_feature_hash": [12, 17, 20, 110, 113, 120, 167, 169, 182], "from_base64": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 58, 103, 110, 113, 126, 182, 185, 197], "from_byt": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 58, 103, 110, 113, 126, 162, 182, 185, 197], "from_dict": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 37, 39, 53, 57, 58, 103, 110, 113, 126, 162, 182, 185], "from_json": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 58, 103, 110, 113, 126, 162, 182, 185, 197, 200], "from_protobuf": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 58, 103, 110, 113, 128, 182, 185, 197], "from_pydantic_model": [12, 13, 14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 58, 103, 110, 113, 129, 182, 197, 200], "from_strawberry_typ": [12, 13, 14, 16, 17, 18, 19, 20, 21, 50, 53, 57, 58, 103, 110, 113, 131, 182], "generator_from_webcam": [12, 110, 113, 134, 170], "get_json_schema": [12, 13, 14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 58, 103, 110, 113, 129, 200], "get_multi_modal_attribut": [12, 110, 113, 124], "get_vocabulari": [12, 13, 14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 110, 113, 133, 169], "granular": [12, 13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 110, 111, 113, 127, 135, 136, 166, 167, 169, 174, 175, 178, 180, 183, 184, 185, 186, 188, 197, 205, 206], "load_pil_image_to_datauri": [12, 110, 113, 122], "load_uri_to_audio_tensor": [12, 110, 113, 115, 163, 182], "load_uri_to_blob": [12, 109, 110, 113, 116, 178, 182], "load_uri_to_image_tensor": [12, 110, 113, 122, 164, 179, 181, 182, 195, 198], "load_uri_to_point_cloud_tensor": [12, 110, 113, 123, 166, 182], "load_uri_to_text": [12, 110, 113, 133, 169, 179, 182], "load_uri_to_vertices_and_fac": [12, 110, 113, 123, 166], "load_uri_to_video_tensor": [12, 110, 113, 134, 170, 182], "load_vertices_and_faces_to_point_cloud": [12, 110, 113, 123], "mime_typ": [12, 110, 111, 113, 127, 135, 136, 164, 167, 169, 174, 175, 178, 179, 180, 183, 185, 187, 189, 196, 197, 205, 206], "nbyte": [12, 104, 110, 155], "non_empty_field": [12, 104, 110, 155, 179], "parent_id": [12, 110, 111, 113, 127, 135, 136, 166, 167, 169, 174, 175, 178, 180, 183, 184, 185, 186, 188, 197, 198, 205, 206], "plot_matches_sprit": [12, 110, 113, 125, 199], "pop": [12, 13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 60, 65, 66, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 104, 110, 155, 179], "post": [12, 13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 58, 103, 110, 113, 132, 174, 177, 195, 196, 200], "save_audio_tensor_to_fil": [12, 110, 113, 115, 163, 182], "save_blob_to_fil": [12, 110, 113, 116, 182], "save_image_tensor_to_fil": [12, 110, 113, 122, 164, 170, 182], "save_uri_to_fil": [12, 110, 113, 119, 182], "save_video_tensor_to_fil": [12, 110, 113, 134, 170, 182], "set_image_tensor_channel_axi": [12, 110, 113, 122, 164, 167, 181, 182, 195], "set_image_tensor_inv_norm": [12, 110, 113, 122, 182], "set_image_tensor_norm": [12, 110, 113, 122, 164, 167, 181, 182, 195], "set_image_tensor_resampl": [12, 110, 113, 122], "set_image_tensor_shap": [12, 110, 113, 122, 164, 167, 182], "set_multi_modal_attribut": [12, 110, 113, 124], "to_base64": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 58, 103, 110, 113, 126, 185, 197], "to_byt": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 58, 103, 110, 113, 126, 162, 185, 197], "to_dict": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 58, 103, 110, 113, 126, 155, 157, 159, 162, 185, 192, 197], "to_json": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 58, 103, 110, 113, 126, 162, 185, 197, 200], "to_protobuf": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 58, 103, 110, 113, 128, 185, 197], "to_pydantic_model": [12, 13, 14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 58, 103, 110, 113, 129, 197, 200], "uri": [12, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 105, 106, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 122, 123, 125, 127, 133, 134, 135, 136, 163, 164, 166, 167, 169, 170, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 186, 189, 195, 196, 197, 198, 201, 205, 206], "weight": [12, 110, 111, 113, 127, 135, 136, 144, 183, 185, 192, 197, 205, 206], "math": [12, 161, 195], "r_precis": [12, 138, 144, 191], "precision_at_k": [12, 138, 144, 191], "hit_at_k": [12, 138, 144, 191], "average_precis": [12, 138, 144, 191], "reciprocal_rank": [12, 138, 144, 191], "recall_at_k": [12, 138, 144, 191], "f1_score_at_k": [12, 138, 144, 191], "dcg_at_k": [12, 138, 144, 191], "ndcg_at_k": [12, 138, 144, 191], "helper": [12, 21, 22, 23, 26, 27, 30, 31, 32, 35, 36, 38, 43, 44, 45, 49, 59, 60, 66, 81, 93, 110, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 129, 131, 133, 134, 138, 161, 169, 182], "minmax_norm": [12, 138, 145], "top_k": [12, 110, 113, 125, 138, 145, 199], "update_rows_x_mat_best": [12, 138, 145], "unravel": [12, 138, 146, 187], "ravel": [12, 138, 146], "get_array_typ": [12, 138, 146], "to_numpy_arrai": [12, 138, 146], "to_list": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 58, 103, 138, 146, 185, 197, 203], "get_array_row": [12, 138, 146], "check_arraylike_equ": [12, 138, 146], "detach_tensor_if_pres": [12, 138, 146], "proto": [12, 135, 161], "io": [12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 147, 162, 163, 176, 177, 179, 185, 195, 202, 203, 204], "pb": [12, 147], "pb2": [12, 147], "docarray_pb2": [12, 147, 151, 153, 185], "namedscoredata": [12, 155, 156], "namedscor": [12, 110, 111, 113, 127, 155, 167, 183], "op_nam": [12, 155, 156, 157, 158, 205, 206], "ref_id": [12, 155, 156, 157, 158, 169, 205, 206], "basedctyp": [12, 104, 110, 155, 161], "typenam": [12, 137, 161], "deprecate_bi": [12, 137, 161], "dunder_get": [12, 137, 161], "random_ident": [12, 137, 161], "random_uuid": [12, 137, 161], "download_mermaid_url": [12, 137, 161], "get_full_vers": [12, 137, 161], "get_ci_vendor": [12, 137, 161], "reset_port": [12, 137, 161], "random_port": [12, 137, 161], "cached_properti": [12, 137, 161], "compress_byt": [12, 137, 161], "decompress_byt": [12, 137, 161], "get_compress_ctx": [12, 137, 161], "dataclass_from_dict": [12, 137, 161], "protocol_and_compress_from_file_path": [12, 137, 161], "add_protocol_and_compress_to_file_path": [12, 137, 161], "filter_dict": [12, 137, 161], "login": [12, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 137, 161], "logout": [12, 137, 161], "contentpropertymixin": [13, 21, 22, 110, 113, 117], "delitem": [13, 21, 63, 79, 95], "delitemmixin": [13, 21, 25], "embedmixin": [13, 21, 26], "get_framework": [13, 21, 26], "emptymixin": [13, 21, 27], "evaluationmixin": [13, 21, 28], "getattr": [13, 21], "getattributemixin": [13, 21, 30], "getitem": [13, 21, 63, 79, 95], "getitemmixin": [13, 21, 31], "groupmixin": [13, 21, 24, 32], "matchmixin": [13, 21, 42], "parallelmixin": [13, 21, 24, 43], "plot": [13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 58, 103, 110, 113, 188, 201], "plotmixin": [13, 21, 44, 110, 113, 125], "postmixin": [13, 21, 45], "pydant": [13, 14, 16, 17, 18, 19, 20, 21, 50, 53, 57, 58, 103, 110, 113, 126, 185, 197], "pydanticmixin": [13, 21, 46, 110, 113, 129], "reduc": [13, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 191], "reducemixin": [13, 21, 47], "sampl": [13, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 110, 112, 113, 115, 123, 166, 175], "samplemixin": [13, 21, 48], "setitem": [13, 21, 63, 79, 95], "setitemmixin": [13, 21, 49], "strawberrymixin": [13, 21, 50, 110, 113, 131], "texttoolsmixin": [13, 21, 51], "travers": [13, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 57, 58, 103, 184, 188, 203], "traversemixin": [13, 21, 52], "apply_batch": [13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 195], "batch_id": [13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 53, 57, 58, 103], "cloud_delet": [13, 14, 16, 17, 18, 19, 20, 21, 33, 41, 53, 57, 58, 103, 171], "cloud_list": [13, 14, 16, 17, 18, 19, 20, 21, 33, 41, 53, 57, 58, 103, 171], "cloud_pul": [13, 14, 16, 17, 18, 19, 20, 21, 33, 41, 53, 57, 58, 103], "cloud_push": [13, 14, 16, 17, 18, 19, 20, 21, 33, 41, 53, 57, 58, 103], "embed_and_evalu": [13, 14, 16, 17, 18, 19, 20, 21, 26, 28, 42, 53, 57, 58, 103, 191], "flatten": [13, 14, 16, 17, 18, 19, 20, 21, 36, 52, 53, 57, 58, 103, 168, 187], "from_datafram": [13, 14, 16, 17, 18, 19, 20, 21, 33, 37, 53, 57, 58, 103, 197], "from_list": [13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 58, 103, 197], "load_csv": [13, 14, 16, 17, 18, 19, 20, 21, 33, 36, 53, 57, 58, 103], "load_json": [13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 58, 103], "map_batch": [13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 188], "plot_image_sprit": [13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 164, 170, 199], "pull": [13, 14, 16, 17, 18, 19, 20, 21, 33, 41, 53, 57, 58, 103, 172, 197, 202, 204], "push": [13, 14, 16, 17, 18, 19, 20, 21, 33, 41, 53, 57, 58, 103, 172, 195, 197, 202, 204], "reduce_al": [13, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103], "save_csv": [13, 14, 16, 17, 18, 19, 20, 21, 33, 36, 53, 57, 58, 103, 168], "save_embeddings_csv": [13, 14, 16, 17, 18, 19, 20, 21, 33, 36, 53, 57, 58, 103], "save_gif": [13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "save_json": [13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 39, 53, 57, 58, 103], "shuffl": [13, 14, 16, 17, 18, 19, 20, 21, 24, 32, 38, 43, 48, 53, 57, 58, 103, 112, 191], "split_by_tag": [13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 53, 57, 58, 103, 188], "to_datafram": [13, 14, 16, 17, 18, 19, 20, 21, 33, 37, 53, 57, 58, 103, 197], "traverse_flat": [13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103], "traverse_flat_per_path": [13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103], "lookuptreeelem": [13, 54, 55], "lookupnod": [13, 54, 55], "lookupleaf": [13, 54, 55], "q": [13, 54, 55, 110, 169, 181, 185, 194, 197], "lookupyerror": [13, 54, 55], "dunder_partit": [13, 54, 55], "iff": [13, 54, 55], "iff_not_non": [13, 54, 55], "guard_typ": [13, 54, 55], "guard_str": [13, 54, 55], "guard_list": [13, 54, 55], "guard_q": [13, 54, 55], "guard_it": [13, 54, 55], "parser": [13, 54, 110, 113, 126], "querypars": [13, 54, 56], "registri": [13, 59], "type_map": [13, 14, 16, 18, 19, 20, 53, 57, 58, 59, 60, 61, 66, 67, 71, 72, 76, 77, 81, 82, 87, 88, 93, 94, 98, 99, 103], "count": [13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 60, 65, 66, 67, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 110, 113, 118, 191], "revers": [13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 60, 65, 66, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 163], "reference_doc": [13, 16, 19], "max_es_returned_doc": [13, 18, 59, 71, 74], "collection_name_meta": [13, 53, 59, 81], "serialization_config": [13, 53, 59, 81, 84], "schema_vers": [13, 58, 59, 93, 94, 96], "dynamic_batch": [13, 59, 98, 99, 103], "factori": [14, 18, 53, 57, 58, 60, 61, 71, 72, 81, 82, 87, 88, 93, 94, 98, 99, 103, 111], "tupl": [14, 16, 17, 18, 19, 20, 21, 28, 42, 44, 51, 53, 57, 58, 60, 61, 67, 71, 72, 81, 82, 87, 88, 98, 99, 103, 104, 110, 113, 120, 122, 132, 133, 134, 137, 145, 146, 155, 179, 181, 183, 187, 189], "typemap": [14, 16, 18, 19, 20, 53, 57, 58, 59, 60, 61, 66, 67, 71, 72, 76, 77, 81, 82, 87, 88, 93, 94, 98, 99, 103], "_safe_cast_int": [14, 18, 60, 61, 71, 72, 98, 99, 103], "sequenc": [14, 15, 16, 17, 18, 19, 20, 21, 22, 36, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 110, 113, 116, 118, 122, 133, 189, 205, 206], "modif": [14, 16, 17, 18, 19, 20, 21, 24, 43, 53, 57, 58, 103, 110, 113, 132, 195, 198], "thread": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 110, 113, 134, 203], "multi": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 52, 53, 57, 58, 103, 165, 174, 180, 181, 183, 195, 200, 203, 204, 205, 206], "yourselv": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103], "wish": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103], "place": [14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 43, 47, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 110, 113, 116, 164, 177, 182, 195], "regardless": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 146, 188, 195], "multiprocess": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 110, 113, 134], "origin": [14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 32, 43, 53, 55, 57, 58, 103, 110, 113, 122, 137, 169, 176, 178, 182, 183, 188, 189, 191, 205, 206], "share": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 177, 191, 197, 203], "worker": [14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 42, 43, 53, 57, 58, 103, 110, 113, 132], "system": [14, 16, 17, 18, 19, 20, 21, 23, 24, 36, 42, 43, 53, 57, 58, 103, 110, 112, 113, 132, 203, 205, 206], "pool": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103], "ignor": [14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 43, 47, 53, 57, 58, 71, 73, 87, 89, 103, 175, 195, 196], "close": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 60, 64, 103, 191, 203], "show_progress": [14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 41, 43, 44, 45, 53, 57, 58, 103, 110, 113, 132, 171, 196, 197], "progress": [14, 16, 17, 18, 19, 20, 21, 24, 32, 34, 41, 43, 44, 53, 57, 58, 103], "bar": [14, 16, 17, 18, 19, 20, 21, 24, 32, 34, 41, 43, 44, 53, 57, 58, 103, 110, 180], "mini": [14, 16, 17, 18, 19, 20, 21, 24, 26, 28, 43, 53, 57, 58, 103], "cake": [14, 16, 17, 18, 19, 20, 21, 24, 43, 53, 57, 58, 103], "lie": [14, 16, 17, 18, 19, 20, 21, 24, 43, 53, 57, 58, 103], "THE": [14, 16, 17, 18, 19, 20, 21, 24, 43, 53, 55, 57, 58, 103, 167], "except": [14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 43, 53, 55, 57, 58, 103, 194], "divid": [14, 16, 17, 18, 19, 20, 21, 24, 32, 43, 53, 57, 58, 103], "minibatch": [14, 16, 17, 18, 19, 20, 21, 24, 32, 43, 53, 57, 58, 103, 195], "until": [14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 57, 58, 103, 195], "traversal_path": [14, 16, 17, 18, 19, 20, 21, 24, 32, 52, 53, 57, 58, 103], "properti": [14, 16, 17, 18, 19, 20, 21, 22, 28, 47, 53, 57, 58, 64, 67, 81, 82, 83, 84, 86, 98, 99, 103, 104, 110, 113, 117, 124, 137, 155, 157, 175, 182, 200], "byte": [14, 16, 17, 18, 19, 20, 21, 22, 34, 53, 57, 58, 87, 88, 103, 104, 110, 111, 113, 115, 118, 126, 127, 137, 155, 175, 180, 183, 189, 203, 204, 205, 206], "static": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 203], "show_tabl": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 171], "classmethod": [14, 16, 17, 18, 19, 20, 21, 23, 27, 34, 35, 36, 37, 38, 39, 41, 46, 50, 53, 57, 58, 103, 110, 113, 126, 128, 129, 131, 134, 135], "local_cach": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 197], "upload": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 195, 197], "download": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 110, 113, 116, 137, 164, 171, 181, 197, 202], "public": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 171], "brand": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "later": [14, 16, 17, 18, 19, 20, 21, 23, 24, 41, 43, 47, 53, 57, 58, 68, 103, 169, 178], "kinda": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "clipboard": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "everyon": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "anyon": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 179], "surviv": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "complic": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 165, 177, 204], "lifetim": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 197], "atm": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "dai": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 203], "week": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 197], "temporari": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "transmiss": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "creator": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "icon": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "emoji": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "fff": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "documentcontenttyp": [14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103, 110, 111, 113, 127], "arraytyp": [14, 16, 17, 18, 19, 20, 21, 22, 28, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 110, 111, 113, 127, 132, 139, 140, 146, 150], "occurr": [14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 60, 65, 67, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103], "callabl": [14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 42, 43, 52, 53, 57, 58, 71, 73, 77, 87, 89, 103, 109, 132, 194], "perhap": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103], "threadpool": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103], "progressbar": [14, 16, 17, 18, 19, 20, 21, 23, 44, 45, 53, 57, 58, 103, 110, 113, 132, 201], "embed_model": [14, 16, 17, 18, 19, 20, 21, 26, 28, 53, 57, 58, 103, 110, 113, 132, 142, 143], "devic": [14, 16, 17, 18, 19, 20, 21, 26, 28, 42, 53, 57, 58, 103, 110, 113, 132, 139, 142, 143, 176, 190, 194], "to_numpi": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103, 190], "fill": [14, 16, 17, 18, 19, 20, 21, 26, 28, 38, 53, 57, 58, 103, 110, 112, 113, 132, 175, 178, 180, 184, 189, 190, 195], "inplac": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103, 110, 113, 115, 116, 117, 118, 122, 125, 132, 133, 188, 195], "directli": [14, 16, 17, 18, 19, 20, 21, 22, 26, 28, 42, 44, 53, 57, 58, 103, 112, 164, 167, 174, 179, 180, 185, 186, 188, 189, 194, 198], "anydnn": [14, 16, 17, 18, 19, 20, 21, 26, 28, 53, 57, 58, 103, 132], "kera": [14, 16, 17, 18, 19, 20, 21, 26, 28, 53, 57, 58, 103, 110, 113, 132, 190], "pytorch": [14, 16, 17, 18, 19, 20, 21, 26, 28, 53, 57, 58, 103, 110, 113, 132, 164, 179, 181, 183, 187, 190, 194, 202], "cuda": [14, 16, 17, 18, 19, 20, 21, 26, 28, 42, 53, 57, 58, 103, 110, 113, 132, 139, 142, 143, 176, 190, 194], "framework": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103, 146, 164, 185, 190, 194, 200, 203], "format": [14, 16, 17, 18, 19, 20, 21, 26, 29, 35, 36, 53, 57, 58, 71, 73, 87, 89, 103, 112, 166, 185, 190, 191, 200, 203], "collatefntyp": [14, 16, 17, 18, 19, 20, 21, 26, 28, 53, 57, 58, 103], "index_data": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 191], "ground_truth": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 191], "metric_nam": [14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 110, 113, 132, 191], "strict": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "label_tag": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "label": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 137, 175, 205, 206], "embed_func": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 191], "exclude_self": [14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 110, 113, 132, 169, 191], "use_scipi": [14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 103, 110, 113, 132, 169, 194], "match_batch_s": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 191], "100000": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "query_sample_s": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 191], "thu": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "consumpt": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 197, 203], "evlauat": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "basi": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "deriv": [14, 16, 17, 18, 19, 20, 21, 28, 51, 53, 55, 57, 58, 63, 68, 79, 95, 103, 110, 113, 133], "left": [14, 16, 17, 18, 19, 20, 21, 28, 40, 42, 47, 53, 57, 58, 64, 103, 110, 113, 125, 132, 164, 177, 181, 183, 191, 194, 205, 206], "align": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 191], "semant": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 162, 194], "prevent": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "irrelev": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "accident": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "altern": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 191, 202, 204], "respect": [14, 16, 17, 18, 19, 20, 21, 28, 34, 53, 57, 58, 103, 135, 167, 179, 191, 202], "collat": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "b": [14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 103, 110, 113, 132, 135, 137, 169, 170, 175, 176, 178, 180, 185, 188, 194, 195, 197], "min": [14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 103, 110, 113, 132, 145, 203], "max": [14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 103, 110, 113, 132, 145, 197, 203], "rescal": [14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 103, 110, 113, 132], "hand": [14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 103, 110, 113, 132, 133, 181, 185, 191, 194], "scipi": [14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 103, 110, 113, 120, 132, 139, 140, 146, 179, 181, 183, 187, 194, 202, 204], "matrix": [14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 103, 110, 113, 120, 132, 139, 145, 179, 181, 183, 187, 203], "keyword": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 110, 112, 113, 116, 122, 133, 134, 135, 180, 191, 198], "infeas": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "especi": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 167, 169, 191, 195, 201], "exce": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "parma": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "onc": [14, 16, 17, 18, 19, 20, 21, 28, 47, 52, 53, 57, 58, 103, 110, 113, 134, 169, 171, 181, 185, 188, 194, 198], "stack": [14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103], "hash_fn": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 191], "ground": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "truth": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "annot": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 109, 174, 177, 204], "hash": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 109, 110, 113, 117, 120, 165, 175, 182, 191], "only_id": [14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 110, 113, 132, 194], "latter": [14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103, 174], "notimplementederror": [14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103], "effect": [14, 16, 17, 18, 19, 20, 21, 42, 52, 53, 57, 58, 103, 110, 113, 122, 132, 177, 180, 192], "_show_progress": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103], "noqa": [14, 16, 17, 18, 19, 20, 21, 38, 53, 57, 58, 103], "dar101": [14, 16, 17, 18, 19, 20, 21, 38, 53, 57, 58, 103], "dar102": [14, 16, 17, 18, 19, 20, 21, 38, 53, 57, 58, 103], "dar201": [14, 16, 17, 18, 19, 20, 21, 38, 53, 57, 58, 103], "df": [14, 16, 17, 18, 19, 20, 21, 37, 53, 57, 58, 103, 197], "panda": [14, 16, 17, 18, 19, 20, 21, 37, 53, 57, 58, 103, 168, 193, 197, 203], "datafram": [14, 16, 17, 18, 19, 20, 21, 33, 53, 57, 58, 103, 168, 189, 193, 203, 204], "jsonschema": [14, 16, 17, 18, 19, 20, 21, 39, 53, 57, 58, 103, 110, 113, 126, 162, 185], "pb_msg": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 110, 113, 128, 149, 150], "basemodel": [14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 58, 103, 110, 113, 129, 135, 200], "repres": [14, 16, 17, 18, 19, 20, 21, 36, 46, 48, 50, 52, 53, 55, 57, 58, 103, 110, 112, 113, 117, 124, 129, 131, 137, 145, 146, 162, 165, 166, 167, 168, 169, 170, 175, 177, 179, 183, 187, 188, 191, 198, 203, 204, 205, 206], "indent": [14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 58, 103, 110, 113, 129], "json": [14, 16, 17, 18, 19, 20, 21, 33, 35, 36, 38, 46, 53, 57, 58, 103, 110, 112, 113, 126, 129, 135, 167, 175, 177, 180, 189, 203, 204], "min_freq": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103], "text_attr": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 110, 113, 133], "vocabulari": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 110, 113, 133, 169], "textual": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 110, 113, 133, 167, 169], "minimum": [14, 16, 17, 18, 19, 20, 21, 44, 51, 53, 57, 58, 103, 110, 113, 125], "frequenc": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 110, 113, 115, 133], "reserv": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 110, 113, 133, 169], "unknown": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 110, 113, 133, 169, 185], "stop": [14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 60, 65, 67, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 204], "valueerror": [14, 15, 16, 17, 18, 19, 20, 26, 53, 57, 58, 60, 65, 67, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 191], "present": [14, 15, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 60, 65, 67, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103], "file_format": [14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 58, 103], "binari": [14, 16, 17, 18, 19, 20, 21, 33, 35, 36, 53, 57, 58, 103, 110, 112, 113, 116, 118, 126, 133, 144, 162, 179, 182, 183, 185, 189, 191, 205, 206], "utf": [14, 16, 17, 18, 19, 20, 21, 35, 36, 39, 53, 57, 58, 103, 110, 112, 113, 116, 118, 133, 205, 206], "csv": [14, 16, 17, 18, 19, 20, 21, 33, 35, 38, 53, 57, 58, 103, 112, 165, 175, 189, 204], "textio": [14, 16, 17, 18, 19, 20, 21, 35, 36, 38, 39, 53, 57, 58, 103, 112], "binaryio": [14, 16, 17, 18, 19, 20, 21, 34, 35, 53, 57, 58, 103, 110, 113, 115, 116, 119, 122, 134], "human": [14, 16, 17, 18, 19, 20, 21, 34, 35, 39, 53, 57, 58, 103], "readabl": [14, 16, 17, 18, 19, 20, 21, 34, 35, 39, 53, 57, 58, 103, 180, 188], "compat": [14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 58, 103, 162, 185], "complex": [14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 58, 103, 167], "restor": [14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 58, 103], "stream": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 162, 163, 170, 203, 204], "rtype": [14, 16, 17, 18, 19, 20, 21, 34, 47, 53, 57, 58, 103, 139, 140, 146], "file_nam": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103], "interpol": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103], "my_docarrai": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 197], "lz4": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 185, 197, 202, 204], "field_resolv": [14, 16, 17, 18, 19, 20, 21, 36, 38, 53, 57, 58, 103, 104, 110, 112, 155, 168, 180], "darrai": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 110, 113, 132], "purpos": [14, 16, 17, 18, 19, 20, 21, 42, 53, 55, 57, 58, 103, 177, 179, 192, 203], "sqeuclidean": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 138, 139, 140, 142, 143, 194], "nativ": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 163, 202], "braycurti": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "canberra": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "chebyshev": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "cityblock": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "correl": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "dice": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "jaccard": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 169], "jensenshannon": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "kulsinski": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "mahalanobi": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "minkowski": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "rogerstanimoto": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "russellrao": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "seuclidean": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "sokalmichen": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "sokalsneath": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "wminkowski": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "yule": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "invert": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 192], "significantli": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 110, 113, 132, 191], "speedup": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 110, 113, 132, 195, 203], "titl": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 134, 169, 176, 200], "mydocumentarrai": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "image_sprit": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 199, 201], "min_image_s": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "channel_axi": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 122, 125, 164, 167, 199], "start_serv": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "127": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "image_sourc": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "interact": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 137, 166, 173, 199, 201], "visual": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 125, 166, 170, 179, 190, 193, 197, 201, 202, 203, 204], "projector": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 202, 204], "bind": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 200], "frontend": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "axi": [14, 16, 17, 18, 19, 20, 21, 22, 38, 44, 53, 57, 58, 103, 110, 112, 113, 122, 125, 164, 195], "channel": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 122, 125, 164, 195], "info": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 122, 125], "fallback": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "canvas_s": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 125], "512": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 198], "min_siz": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 125], "skip_empti": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 125], "show_index": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "fig_siz": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "keep_aspect_ratio": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "sprite": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 125, 165, 170, 202, 204], "ui": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 125], "canva": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 125], "who": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 175, 197, 203], "corner": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "aspect": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "ratio": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 122], "indexerror": [14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103], "remot": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 110, 113, 132, 179, 183, 193, 196, 205, 206], "flow": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 110, 112, 113, 132, 204], "sandbox": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 110, 113, 132, 196], "123": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 110, 113, 132], "w": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 110, 113, 122, 132, 169, 192], "jinahub": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 110, 113, 132, 196], "latest": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 110, 113, 132, 196, 202, 204], "send": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 110, 113, 132, 176, 185, 195, 200], "merg": [14, 16, 17, 18, 19, 20, 21, 47, 53, 55, 57, 58, 103], "prioriti": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 203], "reduct": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103], "sequenti": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 190, 195], "belong": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 183, 205, 206], "kept": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103], "non": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 104, 110, 113, 116, 118, 122, 125, 133, 155, 173, 180, 185, 188, 191, 195, 197, 201], "sort": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 137], "IN": [14, 15, 16, 17, 18, 19, 20, 53, 55, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103], "seed": [14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 103, 191], "replac": [14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 103, 175], "state": [14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 103, 179], "produc": [14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 103], "flatten_tag": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103, 168], "exclude_field": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103], "dialect": [14, 16, 17, 18, 19, 20, 21, 36, 38, 53, 57, 58, 103, 112], "excel": [14, 16, 17, 18, 19, 20, 21, 36, 38, 53, 57, 58, 103, 112], "with_head": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103], "tag__fieldnam": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103], "separ": [14, 16, 17, 18, 19, 20, 21, 36, 52, 53, 57, 58, 103, 112, 166, 168, 174, 177, 185, 188, 191], "wont": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103], "predefin": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103, 112, 183, 192], "savetxt": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103], "durat": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "size_ratio": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "inline_displai": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "gif": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "frame": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 134, 165], "millisecond": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "jupyt": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 180, 197, 204], "notebook": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 137, 166, 173, 180, 186, 192, 204], "atribut": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "randomli": [14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 103, 137], "accord": [14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 57, 58, 103, 110, 113, 117, 139, 188, 194], "meth": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 110, 113, 116, 122, 133], "newli": [14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103], "shape": [14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103, 110, 113, 122, 134, 139, 163, 164, 166, 167, 170, 175, 185, 187, 205, 206], "dtype": [14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103, 110, 113, 118, 133, 163, 167, 175, 181, 185, 205, 206], "_file_ctx": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103], "export": [14, 16, 17, 18, 19, 20, 21, 37, 53, 57, 58, 103, 185, 190], "ndarray_typ": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 110, 113, 128, 149, 150, 185], "documentarrayproto": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 197], "filter_fn": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103], "traversablesequ": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103], "leav": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103], "comma": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 174, 188], "c": [14, 16, 17, 18, 19, 20, 21, 52, 53, 55, 57, 58, 103, 110, 113, 122, 169, 170, 176, 187, 188, 198, 202, 204, 205, 206], "child": [14, 16, 17, 18, 19, 20, 21, 52, 53, 55, 57, 58, 103], "cc": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 188, 198], "mm": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103], "cm": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 188, 192], "reach": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 162], "fly": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 177], "traverse_flattened_per_path": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103], "abstract": [15, 17, 68, 82, 83, 84, 86], "subset": [16, 19], "doc_view": 16, "represent": [16, 135, 155, 157, 162, 165, 177, 180, 181, 190, 197, 203, 205, 206], "safeguard": 16, "legit": 16, "subindex_config": [17, 167, 169, 198], "barrel": [17, 20], "roll": [17, 20], "scores__jaccard__valu": [17, 20], "neural": [17, 167, 176], "executor": [17, 164, 176, 177], "10000": [18, 71, 74], "doubl": [18, 55, 57, 71, 72, 87, 88, 137, 187, 205, 206], "documentarrayload": [21, 23, 24], "dataloadermixin": [21, 23], "lazyrequestread": [21, 33, 34], "binaryiomixin": [21, 33, 34], "commoniomixin": [21, 33, 35], "csviomixin": [21, 33, 36], "dataframeiomixin": [21, 33, 37], "from_gen": [21, 33], "fromgeneratormixin": [21, 33, 38], "jsoniomixin": [21, 33, 39], "pbar": [21, 33], "qpscolumn": [21, 33, 40], "get_pbar": [21, 33, 40], "get_progressbar": [21, 33, 40], "pushpul": [21, 33], "pushpullmixin": [21, 33, 41], "plugin": [21, 113], "__delitem__": [25, 68, 74, 90, 101], "dnn_model": 26, "dnn": [26, 181, 190], "solid": 26, "__module__": 26, "idea": [26, 176, 200, 203], "tell": [26, 175], "subclass": [29, 68], "bulk": [30, 181, 185, 187], "__getitem__": [31, 68, 74, 90, 101], "render": [33, 40, 186, 203], "get_table_column": [33, 40], "max_refresh": [33, 40], "dam": [36, 51], "recurs": [38, 112, 183, 184, 205, 206], "sampling_r": [38, 112], "read_mod": [38, 112, 189], "to_dataturi": [38, 112], "exclude_regex": [38, 112], "dataset_path": [38, 112], "filter_field": [38, 112], "datasets_kwarg": [38, 112], "fp": [38, 110, 112, 113, 134, 170], "filepath": [38, 112], "line_format": [38, 112], "text_format": 40, "justifi": 40, "markup": 40, "highlight": [40, 110, 113, 134, 203], "table_column": 40, "textcolumn": 40, "total": [40, 104, 110, 155, 195], "transmit": 41, "children": [47, 55], "__setitem__": [49, 68, 74, 90, 101], "nlp": [51, 203], "qdrantclient": [53, 81, 82, 83, 84, 86], "add_child": [54, 55], "with_traceback": [54, 55], "github": 55, "com": [55, 202], "naiquevin": 55, "lookupi": 55, "mit": 55, "licens": 55, "copyright": 55, "2013": 55, "vineet": 55, "naik": 55, "naikvin": 55, "gmail": 55, "permiss": 55, "herebi": 55, "grant": 55, "charg": 55, "obtain": [55, 191], "softwar": [55, 166, 170], "associ": [55, 198], "deal": [55, 188], "publish": 55, "distribut": [55, 137], "sublicens": 55, "sell": 55, "permit": 55, "whom": 55, "furnish": 55, "subject": [55, 203], "shall": [55, 175, 177, 195], "substanti": 55, "portion": 55, "AS": 55, "warranti": 55, "OF": 55, "kind": [55, 110, 179, 203], "express": [55, 175, 177, 179, 183, 187, 189, 192, 204], "OR": [55, 192], "impli": 55, "BUT": 55, "TO": 55, "merchant": 55, "FOR": 55, "AND": [55, 192], "noninfring": 55, "NO": 55, "event": [55, 110, 113, 134], "author": [55, 167, 177], "holder": 55, "BE": 55, "liabl": 55, "claim": 55, "damag": 55, "liabil": 55, "action": [55, 192, 198], "contract": 55, "tort": 55, "aris": 55, "WITH": [55, 167], "val": 55, "pair": [55, 176, 191], "variou": [55, 200], "hold": [55, 180], "text__exact": 55, "text_exact": 55, "tags__nam": 55, "tree": 55, "op": 55, "negat": 55, "eg": [55, 137], "language__neq": 55, "rubi": [55, 205, 206], "framework__startswith": 55, "language__exact": 55, "php": [55, 205, 206], "leaf": 55, "tb": 55, "__traceback__": 55, "dunderkei": [55, 137], "everyth": [55, 177, 185, 197, 203], "underscor": [55, 137], "a__b__c": 55, "a__b": [55, 137], "precond": 55, "shortcut": 55, "partial": [55, 195], "precondit": 55, "mix": [55, 137, 191, 193, 203, 204], "classinfo": 55, "textfield": [57, 87, 88], "numericfield": [57, 87, 88], "geofield": [57, 87, 88], "wal": [58, 93, 94], "simplest": [58, 164], "getsetdel": [59, 60, 66, 71, 76, 81, 87, 93, 98], "offsetmap": [59, 60, 64], "seqlik": [59, 60, 66, 71, 76, 81, 87, 93, 98], "needs_id2offset_rebuild": [59, 76, 77], "initialize_t": [59, 93, 96], "create_t": [60, 64], "extend_doc_id": [60, 64], "get_id_by_offset": [60, 64], "get_ids_by_offset": [60, 64], "get_offsets_by_id": [60, 64], "get_offset_by_id": [60, 64], "get_all_id": [60, 64], "del_at_offset": [60, 64], "insert_at_offset": [60, 64], "set_at_offset": [60, 64], "shift_offset": [60, 64], "drop_tabl": [60, 64], "dump": [60, 64, 110, 113, 126, 135, 164, 170, 182], "execute_mani": [60, 64], "kwd": [60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102], "in_memori": 64, "doc_id": 64, "shift_from": 64, "shift_step": 64, "data_fil": 64, "get_id": [66, 69], "delete_by_id": [66, 69], "delete_by_offset": [66, 69], "update_id": [66, 69], "9223372036854775807": 67, "_set_doc": 68, "_del_doc": 68, "_del_all_doc": 68, "wrapper": 68, "inner": [68, 174], "likewis": 68, "data_id": 69, "_ids_map": 69, "concret": [74, 90, 101], "container_type_nam": 96, "cur": 96, "_class_nam": [98, 99, 103], "_obj": [104, 110, 155], "unknown_fields_handl": [104, 110, 155, 180], "catch": [104, 110, 155, 180], "overwrit": [104, 110, 137, 155], "emtpi": [104, 110, 155], "consum": [104, 110, 155, 194, 195], "multi_modal_schema": [105, 106], "image_typ": [105, 106], "image_uri": [105, 106], "audio_typ": [105, 106], "video_typ": [105, 106], "mesh_typ": [105, 106], "json_typ": [105, 106], "blob_typ": [105, 106], "iterable_primit": [105, 106], "iterable_docu": [105, 106], "iterable_nest": [105, 106], "pil": [105, 106, 176], "enumer": [106, 170, 195], "_source_field": [109, 178], "default_factori": [109, 175], "repr": [109, 175], "metadata": [109, 167, 183], "myimag": [109, 178], "my_sett": [109, 178], "my_gett": [109, 178], "mmdoc": [109, 174, 175, 176, 178], "banner": [109, 174, 175, 176, 177, 178, 188], "jpeg": [109, 110, 113, 122, 164, 174, 175, 178, 185, 189], "eq": [109, 192], "unsafe_hash": 109, "frozen": 109, "type_var_map": [109, 178], "_field": 109, "appl": [109, 164, 167, 179, 182, 185, 198], "png": [109, 110, 113, 122, 164, 167, 170, 176, 177, 179, 182, 187, 189, 198], "__bound__": 109, "covari": 109, "__covariant__": 109, "contravari": 109, "__contravariant__": 109, "_types_registri": 109, "collid": 109, "obj": [109, 110, 113, 123, 126, 135, 137, 166], "getattributesmixin": [110, 113, 114], "audio": [110, 113, 165, 175, 177, 179, 182, 183, 201, 203, 204, 205, 206], "audiodatamixin": [110, 113, 115], "blobdatamixin": [110, 113, 116], "convertmixin": [110, 113, 118], "urifilemixin": [110, 113, 119], "featurehash": [110, 113], "featurehashmixin": [110, 113, 120], "imagedatamixin": [110, 113, 122], "mesh": [110, 113, 165, 175, 179, 182, 183, 202, 204], "meshdatamixin": [110, 113, 123], "multimodalmixin": [110, 113, 124], "portingmixin": [110, 113, 126], "propertymixin": [110, 113, 127, 155, 157, 158], "protobufmixin": [110, 113, 128], "rich_embed": [110, 113], "colorboxembed": [110, 113, 130], "sugar": [110, 113, 196], "singletonsugarmixin": [110, 113, 132], "textdatamixin": [110, 113, 133], "videodatamixin": [110, 113, 134], "smart_union": [110, 135], "from_orm": [110, 135], "parse_fil": [110, 135], "parse_obj": [110, 135], "parse_raw": [110, 135], "schema_json": [110, 135], "update_forward_ref": [110, 135], "valid": [110, 112, 113, 126, 135, 175, 185, 191, 195, 197, 198, 203, 204], "structvaluetyp": 110, "basic": [110, 175, 176, 177, 183, 201, 202, 203, 204], "3d": [110, 113, 123, 125, 165, 179, 182, 183, 201, 202, 204], "d4": [110, 180, 181], "foo": [110, 180, 195, 196], "d0": [110, 180, 181, 186], "torchvis": [110, 167, 174, 181, 190, 202], "usr": [110, 202], "jpg": [110, 137, 164, 174, 181, 185, 187, 189, 195, 199], "resnet50": [110, 167, 174, 181, 190], "pretrain": [110, 113, 122, 167, 174, 181, 190], "organ": [110, 183], "charset": [110, 113, 116, 118, 133], "base64": [110, 113, 116, 118, 126, 133, 179, 204], "charact": [110, 113, 116, 118, 133, 169, 191], "regist": [110, 113, 116, 118, 133], "iana": [110, 113, 116, 118, 133], "arbitrari": [110, 113, 116, 118, 120, 133, 177, 197, 205, 206], "octet": [110, 113, 116, 118, 133], "rule": [110, 113, 116, 118, 133, 185, 195], "7bit": [110, 113, 116, 118, 133], "bit": [110, 113, 116, 118, 133, 164, 187, 188, 205, 206], "ascii": [110, 113, 116, 118, 133, 205, 206], "width": [110, 113, 115, 122, 125, 183, 184, 205, 206], "height": [110, 113, 122], "_valid_": [110, 113, 118, 122], "buffer": [110, 113, 118, 152, 154, 162, 164, 179, 185, 205, 206], "effort": [110, 113, 117, 185], "image_format": [110, 113, 122], "window_shap": [110, 113, 122, 164], "stride": [110, 113, 122, 164], "as_chunk": [110, 113, 122, 123, 164], "slide": [110, 113, 122, 164], "window": [110, 113, 122, 134, 164, 202, 204], "h": [110, 113, 122, 192], "target_s": [110, 113, 122], "denot": [110, 113, 122, 174], "vertic": [110, 113, 122, 123, 165, 184, 201], "horizont": [110, 113, 122, 184], "patch": [110, 113, 122], "area": [110, 113, 122, 144], "zero": [110, 112, 113, 122, 140, 142, 143, 145, 169, 189, 205, 206], "vocab": [110, 113, 133, 169], "delimit": [110, 113, 133], "max_length": [110, 113, 133, 169], "int64": [110, 113, 133, 205, 206], "1d": [110, 113, 133, 145], "build_vocab": [110, 113, 133], "entri": [110, 113, 133, 145, 172], "cut": [110, 113, 133, 164], "begin": [110, 113, 133, 174, 203], "shorter": [110, 113, 133], "datauri": [110, 112, 113, 118, 122], "from_": [110, 113, 125], "max_valu": [110, 113, 120], "1000000": [110, 113, 120], "trick": [110, 113, 120], "caus": [110, 113, 120], "collis": [110, 113, 120], "overal": [110, 113, 120, 167, 170], "csr_matrix": [110, 113, 120, 139, 146, 194], "bytearrai": [110, 113, 126], "height_width": [110, 113, 134], "show_window": [110, 113, 134], "window_titl": [110, 113, 134], "webcam": [110, 113, 134, 165], "exit_kei": [110, 113, 134], "exit_ev": [110, 113, 134], "opencv": [110, 113, 134], "hardwar": [110, 113, 134, 170], "camera": [110, 113, 134], "preview": [110, 113, 134], "guarante": [110, 113, 134, 175, 203], "press": [110, 113, 134, 170], "asyncio": [110, 113, 134], "counter": [110, 113, 133], "text_field": [110, 113, 133], "pillow": [110, 113, 122, 164, 202, 204], "header": [110, 113, 122, 195], "pilimag": [110, 113, 122], "_uri_to_blob": [110, 113, 116, 122, 133], "geometri": [110, 113, 123], "attr": [110, 113, 133], "face": [110, 112, 113, 123, 165, 201], "only_keyfram": [110, 113, 134, 170], "keyfram": [110, 113, 134], "av": [110, 113, 134, 170, 202, 204], "pyav": [110, 113, 134], "org": [110, 113, 134, 144, 169, 179, 202], "_global": [110, 113, 134], "html": [110, 112, 113, 134, 169, 179], "inv_norm": [110, 113, 125, 199], "1920": [110, 113, 125], "invers": [110, 113, 122, 125], "float32": [110, 113, 122, 125, 163, 167, 175, 181, 190, 194, 205, 206], "uint8": [110, 113, 122, 125, 175, 197], "sample_r": [110, 113, 115], "44100": [110, 113, 115], "sample_width": [110, 113, 115], "wav": [110, 113, 115, 165, 175], "mono": [110, 113, 115], "stereo": [110, 113, 115], "frame_r": [110, 113, 134], "codec": [110, 113, 134], "h264": [110, 113, 134], "mp4": [110, 113, 134, 170], "decod": [110, 113, 134, 169], "original_channel_axi": [110, 113, 122, 167], "new_channel_axi": [110, 113, 122, 167], "move": [110, 113, 122, 177], "img_mean": [110, 113, 122], "406": [110, 113, 122], "img_std": [110, 113, 122], "deviat": [110, 113, 122], "std": [110, 113, 122, 194], "train": [110, 113, 122, 176, 203], "scratch": [110, 113, 122], "calcul": [110, 113, 122, 144, 191], "imagenet": [110, 113, 122], "mean_r": [110, 113, 122], "mean_g": [110, 113, 122], "mean_b": [110, 113, 122], "std_r": [110, 113, 122], "std_g": [110, 113, 122], "std_b": [110, 113, 122], "grai": [110, 113, 122], "black": [110, 113, 122, 174], "white": [110, 113, 122, 174, 175], "rgb": [110, 113, 122], "mnist": [110, 113, 122], "stddev": [110, 113, 122], "greyscal": [110, 113, 122], "resampl": [110, 113, 122], "dumper": [110, 113, 126], "documentproto": [110, 113, 128, 149, 185, 197], "_reference_doc": 111, "_metadata": [111, 167, 174, 205, 206], "beforehand": 112, "shell": 112, "wildcard": 112, "directori": 112, "subdirectori": 112, "rate": 112, "rb": 112, "plan": 112, "index_fil": 112, "search_fil": 112, "handler": 112, "auto": [112, 186, 194, 204], "hug": 112, "huggingfac": 112, "load_dataset": 112, "package_refer": 112, "loading_method": 112, "file_extens": [113, 123], "univers": [117, 182], "convers": [118, 174, 182], "glb": [123, 166], "ply": [123, 166], "_propertymixin": 127, "sugari": [132, 182], "_namedscor": 135, "validationerror": 135, "_fields_set": 135, "__dict__": 135, "__fields_set__": 135, "trust": 135, "exclud": [135, 185], "deep": [135, 164, 166, 177, 180, 181, 187, 188, 203, 204], "abstractsetintstr": 135, "mappingintstrani": 135, "preced": 135, "dictstrani": 135, "by_alia": 135, "skip_default": 135, "exclude_unset": 135, "exclude_default": 135, "exclude_non": [135, 185, 192], "models_as_dict": 135, "dumps_kwarg": 135, "suppli": [135, 205, 206], "unicod": [135, 205, 206], "utf8": 135, "allow_pickl": 135, "ref_templ": 135, "localn": 135, "forwardref": 135, "globaln": 135, "_basestrawberrydocumentinterfac": 136, "_namescoreitem": 136, "scalarwrapp": 136, "0x7f7d05bd6e90": 136, "0x7f7d05bd6f10": 136, "0x7f7d05bd6e10": 136, "_namescoreiteminput": 136, "target": [137, 145], "new_fn": 137, "removed_at": 137, "deprec": 137, "old_fn_nam": 137, "_dict": 137, "fieldnam": 137, "dunderscor": 137, "referenc": 137, "referrenc": 137, "struct": [137, 205, 206], "use_uuid1": 137, "uuid": [137, 180], "mac": [137, 202, 204], "uuid1": [137, 180], "afford": 137, "closer": 137, "uuid4": 137, "relat": [137, 167, 183, 196, 202, 203, 204], "lost": [137, 195], "mermaid_url": 137, "suffix": 137, "svg": 137, "decor": [137, 177], "wb": 137, "klass": 137, "dikt": 137, "file_path": 137, "default_protocol": 137, "default_compress": 137, "docarray_fashion_mnist": 137, "gzip": [137, 185, 195, 197], "bin": [137, 197, 202], "account": 137, "enviro": 137, "infer": [137, 170], "log": [137, 171, 172, 173], "hubbl": [137, 195], "sparse_cosin": [138, 139, 140], "sparse_sqeuclidean": [138, 139, 140], "sparse_euclidean": [138, 139, 140], "pdist": [138, 139], "cdist": [138, 139], "x_mat": [139, 140, 142, 143, 145], "pairwis": 139, "observ": [139, 168, 170, 202], "coo_matrix": [139, 181, 187], "ndim": [139, 140, 142, 143, 146, 205, 206], "y_mat": [139, 140, 142, 143], "y": [139, 146, 183, 205, 206], "n_x": 139, "n_y": 139, "dist": 139, "j": [139, 203], "ep": [140, 142, 143, 145], "1e": [140, 142, 143, 145], "jitter": [140, 142, 143, 145], "divd": [140, 142, 143, 145], "binary_relev": [144, 191], "precis": [144, 191, 195], "fist": 144, "nonzero": [144, 205, 206], "wrong": 144, "en": 144, "wikipedia": 144, "wiki": 144, "evaluation_measures_": 144, "information_retriev": 144, "percentag": 144, "hit": [144, 164], "curv": 144, "reciproc": [144, 191], "max_rel": [144, 191], "harmon": 144, "f1": [144, 180], "discount": 144, "cumul": 144, "gain": 144, "dcg": 144, "www": [144, 169, 179], "stanford": 144, "edu": 144, "cs276": 144, "handout": 144, "evaluationnew": 144, "pdf": [144, 179], "6309": 144, "4307": 144, "ndcg": 144, "t_rang": 145, "x_rang": 145, "2d": 145, "descend": 145, "largest": 145, "biggest": [145, 203], "x_mat_best": 145, "x_inds_best": 145, "x_ind": 145, "raise_error_if_not_arrai": 146, "tf": [146, 181, 190], "num_row": 146, "sp": [146, 181, 194], "detach": 146, "read_ndarrai": [147, 149, 150], "flush_ndarrai": [147, 149, 150], "parse_proto": [147, 149], "flush_proto": [147, 149], "representmixin": [155, 157, 159], "_reference_n": 156, "subpackag": 161, "submodul": 161, "project": [162, 163, 179], "bump": 162, "minor": [162, 192], "autom": 162, "releas": [162, 203], "bug": 162, "track": 162, "explain": [162, 173, 175], "rational": [162, 174, 177], "behind": [162, 174, 177], "involv": [162, 167, 169], "Its": [162, 185, 203], "intention": 162, "undocu": 162, "backward": 162, "concept": [162, 203], "major": [162, 203], "wire": [162, 185, 203, 204], "migrat": 162, "ed": [162, 185], "unschema": [162, 185], "awar": [162, 202], "stick": 162, "archiv": 162, "acknowledg": 162, "caffe": 162, "unifi": [162, 203, 204], "terminologi": 162, "fluent": 162, "remark": [162, 197], "30833": 163, "olleh": 163, "ffmpeg": 163, "multimedia": 163, "pydub": 163, "manipul": [163, 203], "easi": [163, 168, 169, 175, 177, 180, 187, 188, 203, 204], "librosa": 163, "music": 163, "analysi": 163, "pyaudioanalysi": 163, "signal": 163, "matplotlib": [164, 202, 204], "resiz": [164, 182], "downsampl": 164, "upsampl": 164, "meet": 164, "chain": [164, 182], "feed": 164, "resnet": 164, "2489083": 164, "proc": 164, "yep": 164, "uneat": 164, "quick": [164, 179], "img": 164, "nice": [164, 169, 200], "overview": [164, 180], "rich": [164, 188, 197, 203], "salienc": 164, "krusti": 164, "burger": 164, "yellow": 164, "schoolbu": 164, "intent": 164, "guess": [164, 183, 195, 205, 206], "breakdown": 164, "simpler": 164, "approach": 164, "datatyp": 164, "792": 164, "180": 164, "three": [164, 166, 169, 170, 179, 187, 194, 203], "7585b8aa": 164, "3826": 164, "11ec": [164, 168], "bc1a": 164, "1e008a366d48": [164, 168], "h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0": 164, "simpson": 164, "hmm": 164, "whole": [164, 195, 197, 200], "overlap": [164, 188, 197], "oversampl": 164, "segment": 165, "tool": 165, "trimesh": [166, 202, 204], "polygon": 166, "profession": 166, "commerci": 166, "uniti": 166, "blender": 166, "googl": [166, 180, 197, 201, 203, 204, 205, 206], "colab": [166, 180, 186, 197, 203, 204], "n_point": 166, "triangular": 166, "surfac": 166, "triangl": 166, "n_face": 166, "vertex": 166, "mesh_man": 166, "7f907d786d6c11ec840a1e008a366d49": [166, 184], "7f907ab26d6c11ec840a1e008a366d49": [166, 184], "7f907c106d6c11ec840a1e008a366d49": [166, 184], "assign": [166, 175, 179, 181, 187], "ifram": 166, "srcdoc": 166, "threej": 166, "viewer": 166, "500px": 166, "border": 166, "uniformli": 166, "easier": [166, 179, 185], "30000": 166, "jointli": [167, 177], "comfort": 167, "cleanli": 167, "individu": [167, 191], "stand": 167, "relationship": [167, 177], "domain": [167, 175, 177, 203], "newspap": [167, 177], "main": [167, 191, 200], "main_text": 167, "cast": [167, 181, 185], "automat": [167, 179, 180, 185, 187, 198, 201], "7f03e397da8725aa8a2aed4a0d64f263": 167, "627c3b052b86e908b10475a4649ce49b": 167, "79e75c074aa444341baac18549930450": 167, "6861a1e3d77c3560a630dee34ba5ac7f": 167, "daili": 167, "cab4e047bc84ffb6b8b0597ff4ee0e9f": 167, "ea686d21029e4687df83a6ee31af98b2": 167, "139a5f16ab176b5c9d5088b1f2792973": 167, "f1e7527757c7dc6006fa8fa36e7b788f": 167, "2a13aee3a2ac8eadc07f43bc2dd83583": 167, "b6bcfa7000a25bd84ddcd35813c99b4c": 167, "71018fd73c13187309590e82b5255416": 167, "b6bcfa7000a25bd84ddcd35813c99b4": 167, "b335f748006204dd27bb5fa9a99a572f": 167, "7769657ae7c25227920b5ae35a2a3c31": 167, "29f1835bac77e435f00976c5cf4e97cb": 167, "bc8adb52bad51ccff3d6e7834a4b536a": 167, "29f1835bac77e435f00976c5cf4e97c": 167, "c602af33ed3f2d693a5633e53b87e19c": 167, "1ee83d2c391f078736732bb34a021587": 167, "c8fe3b8fd101bea6a4820a53d2993bdf": 167, "img_model": 167, "combine_embed": 167, "sophist": 167, "concaten": [167, 189], "1512": 167, "tackl": [167, 177], "downstream": 167, "query_pag": 167, "pear": 167, "cou": 167, "closest_match_img": 167, "closest_match_pag": 167, "5922ee1ad0dbfe707301b573f98c5939": 167, "e6266f88f6ebcb3417358440934bcf81": 167, "defaultdict": [167, 191], "1920929e": 167, "29a0e323e2e9befcc42e9823b111f90f": 167, "175e386b1aa248f9387db46341b73e05": 167, "similarli": 167, "a0f33de91bb7d53811c7cb3015cdf1b8": 167, "float64": [167, 181, 205, 206], "01911603045476573": 167, "b9c9206422e27c8a0f1b4a4e745901ec": 167, "97cbca49aeaf0ea1f609b161dc9ec934": 167, "9183813fc38f291f353b76d4125506d6": 167, "freeli": 168, "tabular": [168, 175, 179], "usernam": 168, "booker12": 168, "9012": 168, "rachel": 168, "booker": 168, "grey07": 168, "2070": 168, "laura": 168, "grei": 168, "johnson81": 168, "4081": 168, "craig": 168, "johnson": 168, "jenkins46": 168, "9346": 168, "mari": 168, "jenkin": 168, "smith79": 168, "5079": 168, "jami": 168, "smith": 168, "attempt": 168, "fail": 168, "manual": [168, 180, 181], "tmp": [168, 198], "thing": [168, 170, 185, 195, 200], "english": 168, "german": 168, "hallo": 168, "welt": 168, "tag__english": 168, "tag__german": 168, "029388a4": 168, "3830": 168, "b6b2": 168, "0293968c": 168, "418de220": 168, "aad8": 168, "418dec52": 168, "inlin": [169, 179], "w3": 169, "histori": 169, "19921103": 169, "hypertext": 169, "3c128f326fbf11ec90821e008a366d49": 169, "\u0928\u092e\u0938": 169, "\u0924": 169, "\u0926": 169, "\u0928": 169, "\u092f": 169, "\u4f60\u597d\u4e16\u754c": 169, "\u3053\u3093\u306b\u3061\u306f\u4e16\u754c": 169, "\u043f\u0440\u0438\u0432\u0435\u0442": 169, "\u043c\u0438\u0440": 169, "thousand": [169, 197], "finer": 169, "5a12d7a86fbf11ec99a21e008a366d49": 169, "5a12e2346fbf11ec99a21e008a366d49": 169, "5a12e2f26fbf11ec99a21e008a366d49": 169, "5a12e3886fbf11ec99a21e008a366d49": 169, "5a12e41e6fbf11ec99a21e008a366d49": 169, "5a12e4966fbf11ec99a21e008a366d49": 169, "goodby": 169, "symbol": 169, "phrase": 169, "sentenc": [169, 177], "bonu": 169, "term": 169, "she": 169, "enter": [169, 200], "room": 169, "pride": [169, 179], "prejudic": [169, 179], "gutenberg": [169, 179], "1342": [169, 179], "txt": [169, 179], "strip": 169, "scores__jaccard": 169, "staircas": 169, "breakfast": 169, "congratul": [169, 202], "air": 169, "ungraci": 169, "mr": 169, "bennet": 169, "alon": 169, "f47f7448709811ec960a1e008a366d49": 169, "6666666666666666": 169, "7142857142857143": 169, "imagin": [169, 200], "lyric": 169, "song": 169, "choru": 169, "song1_titl": 169, "macdoug": 169, "farm": 169, "song1": 169, "he": 169, "dog": [169, 176, 177], "bow": 169, "wow": 169, "everywher": 169, "song2_titl": 169, "od": 169, "die": 169, "freud": 169, "song2": 169, "sch\u00f6ner": 169, "g\u00f6tterfunken": 169, "tochter": 169, "au": 169, "elisium": 169, "wir": 169, "betreten": 169, "feuertrunken": 169, "himmlisch": 169, "dein": 169, "heiligthum": 169, "zauber": 169, "binden": 169, "wieder": 169, "der": 169, "schwerd": 169, "getheilt": 169, "bettler": 169, "werden": 169, "f\u00fcrstenbr\u00fcder": 169, "wo": 169, "sanfter": 169, "fl\u00fcgel": 169, "weilt": 169, "doc1": [169, 177, 197], "song_titl": 169, "doc2": [169, 177, 197], "bag": 169, "descriptor": 169, "build_token": 169, "token_pattern": 169, "compil": 169, "findal": 169, "bow_feature_vector": 169, "prepar": [169, 192], "n_featur": 169, "da_backend": 169, "annlite_data": 169, "death": 169, "find_song_name_from_song_snippet": 169, "similar_item": 169, "most_similar_doc": 169, "Will": 169, "320": 170, "dim": [170, 205, 206], "got": [170, 197, 200], "176x320": 170, "framer": 170, "around": [170, 195], "25fp": 170, "mov": 170, "redund": 170, "60fp": 170, "esc": 170, "head": [171, 202], "appear": 171, "visibl": 171, "ve": [171, 203], "successfulli": [171, 202], "my_da": 171, "2022": [171, 197, 202], "15t07": 171, "256z": 171, "manag": [172, 173, 197, 202], "portal": 172, "prompt": 173, "cli": [173, 190], "blog": 174, "paragraph": [174, 198], "eaccc9c573c07f13b7ee8aa04a83c9eb": 174, "140540453339296": 174, "banner_tensor": 174, "transpos": 174, "unsqueez": [174, 176], "outer": 174, "innerdoc": 174, "outerdoc": 174, "feature_imag": [174, 175], "websit": [174, 175], "94de1bef2fc8010ff4fe86791a671c44": 174, "field1": [174, 192], "field2": 174, "nois": [174, 175, 191], "bracket": [174, 192], "nonetyp": [174, 191], "front": 174, "deepli": 174, "nested_field1": 174, "bannerdoc": [174, 175], "columnarticl": [174, 175], "c1": [174, 188], "c2": 174, "unawar": 175, "mymultimodaldoc": 175, "avatar": 175, "Be": 175, "conflict": 175, "f3b193bbe8403c3ce1599b82f941f68a": 175, "18c7ca1c829fe819250faa4914bc45c1": 175, "1ee7fadddc23fc72365b2069f82d4bb4": 175, "is_dataclass": 175, "mmdoc1": 175, "mmdoc2": 175, "sequel": [175, 194], "pixel": 175, "soundfx": 175, "90c744c5155c2356d27f8c91955f70f7": 175, "c9d71990088fb0d8db3c83a6bd35650d": 175, "22e27708288e70813673711c86f834e": 175, "05ad36dfb0c520027b18c582d205c176": 175, "63248": 175, "unannot": 175, "17c77b443471f9d752cbcc360174b65f": 175, "some_field": 175, "other_field": 175, "15725d705b6c8d7e99908d380d614fa5": 175, "48a84621d51d94383b86db89e64022a3": 175, "1cb5cc74f1f986876a0c4c87201b9a28": 175, "instruct": 175, "complet": [175, 189, 191, 203, 204], "52d9dcca4bc30cd0ef3b82917459cd32": 175, "04edacf582c5aa7b0bcfcf3d3e0a57bf": 175, "f5e9f105162e26d1d42ef7e2d363095a": 175, "d7d0b506f690890113e6a601ef80f8c6": 175, "75a3df4c26498d338589d2b2c20e156": 175, "cb1df29a384a6d39aa81e5af93316c4d": 175, "65cce8eb564f9ce136ff693b8ecb8f53": 175, "4dc4497d608b4f96094711e90cfb8078": 175, "f7b3aaefeab73af18f8372a594405b46": 175, "encourag": 175, "m_r": 175, "assert": [175, 178], "mutabl": 175, "builtin": 175, "scientist": [175, 193, 200, 201, 203, 204], "intuit": [175, 177, 180, 200, 203, 204], "straightforward": [175, 177], "aka": [175, 177], "far": [176, 177, 188], "nutshel": [176, 177, 193, 200], "develop": [176, 202, 203, 204], "openai": 176, "contrast": 176, "varieti": 176, "is_avail": 176, "vit": 176, "diagram": 176, "cat": [176, 177], "no_grad": 176, "image_featur": 176, "encode_imag": 176, "text_featur": 176, "encode_text": 176, "3285e": 176, "6554e": 176, "3394e": 176, "5605e": 176, "2397e": 176, "0547": 176, "0061": 176, "0495": 176, "6638": 176, "1281": 176, "4950": 176, "1447": 176, "0225": 176, "2909": 176, "4472": 176, "3420": 176, "1798": 176, "1981": 176, "2040": 176, "1533": 176, "4514": 176, "5664": 176, "0596": 176, "m1": [176, 178, 202], "m2": [176, 178, 202], "m3": 176, "scalabl": [176, 203], "microservic": [176, 185, 197, 203], "extrem": [176, 184, 203], "touch": 176, "v": [176, 194, 203, 204, 206], "clip_client": 176, "demo": 176, "ca": 176, "51000": 176, "3137": 176, "1458": 176, "303": 176, "8877": 176, "2546": 176, "11365": 176, "05466": 176, "005997": 176, "0498": 176, "1274": 176, "4944": 176, "1442": 176, "02275": 176, "291": 176, "4468": 176, "3416": 176, "1985": 176, "4507": 176, "0598": 176, "wparticl": 177, "headlin": 177, "flight": 177, "pet": 177, "pick": 177, "seat": 177, "anim": 177, "calm": 177, "nathan": 177, "diller": 177, "travel": 177, "destin": [177, 188], "hood": [177, 198], "beauti": 177, "spend": 177, "mixtur": 177, "card": 177, "washington": 177, "sound": [177, 188], "bbc": 177, "transfer": [177, 197, 200, 203, 204], "doc0": 177, "Or": 177, "redesign": [177, 203], "why": [177, 185, 201, 204], "implicit": 177, "answer": [177, 195], "trivial": 177, "plai": [177, 201], "eleg": 177, "translat": 178, "bde1ab74306c2f63188069879e3945ac": 178, "cd594a6870a8921d7a9c6b0ec764251d": 178, "xff": 178, "xd8": 178, "xe0": 178, "x00": [178, 185, 197], "x10jfif": 178, "x01": [178, 185, 197], "x0": 178, "56810": 178, "recov": 178, "invok": 178, "im": 178, "unset": 179, "among": 179, "spmatrix": [179, 181, 183], "intermedi": [179, 185, 197, 203], "mutual": 179, "exclus": 179, "7623808c6d6211ec9cf21e008a366d49": 179, "reset": 179, "grab": 179, "b4d675466d6211ecae8d1e008a366d49": 179, "2808eeb86d6311ecaddb1e008a366d49": 179, "ebook": 179, "jane": 179, "austen": 179, "anywher": 179, "wor": 179, "ivborw0kggoaaaansuheugaaaaua": 179, "aaafcayaaacnbyblaaaaheleqvqi12p4": 179, "w38giaxdibke0dhxgljnbaao": 179, "9txl0y4ohwaaaabjru5erkjggg": 179, "load_uri_to_": 179, "5dd542406d3f11eca3241e008a366d49": 180, "hex": 180, "though": [180, 191, 194], "forget": [180, 203], "autocomplet": 180, "a14effee6d3e11ec8bde1e008a366d49": 180, "a14f00986d3e11ec8bde1e008a366d49": 180, "a14f01a66d3e11ec8bde1e008a366d49": 180, "a14f023c6d3e11ec8bde1e008a366d49": 180, "comfortab": 180, "idiomat": 180, "prettifi": 180, "caught": 180, "f957e84a6d4311ecbea21e008a366d49": 180, "silent": 180, "attributeerror": 180, "4479829968": 180, "piec": 181, "d5": 181, "from_dens": 181, "assig": 181, "stai": [181, 203], "smarter": 181, "loop": [181, 185, 187, 194, 195], "00003": 181, "ten": [181, 191], "63a39fa86d6911eca6fa1e008a366d49": 181, "63a39aee6d6911eca6fa1e008a366d49": 181, "63a399d66d6911eca6fa1e008a366d49": 181, "63a39b346d6911eca6fa1e008a366d49": 181, "63a3999a6d6911eca6fa1e008a366d49": 181, "63a39a626d6911eca6fa1e008a366d49": 181, "63a397ba6d6911eca6fa1e008a366d49": 181, "63a39a1c6d6911eca6fa1e008a366d49": 181, "63a39ab26d6911eca6fa1e008a366d49": 181, "63a399046d6911eca6fa1e008a366d49": 181, "63a399546d6911eca6fa1e008a366d49": 181, "apple1": 182, "equival": 182, "hexdigest": [183, 205, 206], "raw": [183, 202, 205, 206], "depth": [183, 184, 188, 200, 205, 206], "cross": [183, 203, 204, 205, 206], "mime": [183, 205, 206], "crop": [183, 205, 206], "timestamp": [183, 192, 205, 206], "comprehens": [183, 203, 204], "categor": 183, "pictur": [183, 184], "comprehend": 183, "scienc": [183, 204], "commun": [183, 191, 204], "7f907c606d6c11ec840a1e008a366d49": 184, "7f907cba6d6c11ec840a1e008a366d49": 184, "crucial": [184, 185, 197], "fortun": [184, 202], "thank": [184, 187], "shown": [184, 201], "wherea": [184, 185, 203], "receiv": [185, 191, 200], "compact": [185, 187, 197], "reader": [185, 188], "wonder": 185, "aren": 185, "nonetheless": [185, 197], "decis": [185, 203], "sake": [185, 188], "clariti": [185, 188], "webservic": [185, 197, 200, 204], "fastapi": [185, 197, 199, 202, 204], "d_as_json": 185, "641032d677b311ecb67a1e008a366d49": 185, "null": [185, 197], "db66bc2e77b311eca5f51e008a366d49": 185, "mimetyp": 185, "aqaaaaaaaaacaaaaaaaaaamaaaaaaaaa": 185, "i8": 185, "clsname": 185, "appreci": [185, 203], "uppercas": 185, "cdbc4f7a77b411ec96ad1e008a366d49": 185, "ey": 185, "handcraft": 185, "smoothli": 185, "encount": 185, "thumb": 185, "friend": [185, 197, 200, 203], "upset": 185, "ever": [185, 200, 203], "probabl": [185, 187, 188], "d_byte": 185, "d_r": 185, "x80": [185, 197], "x03cdocarrai": [185, 197], "ndocument": [185, 197], "nq": [185, 197], "x81q": [185, 197], "x02x": 185, "x05": [185, 197], "x00_dataq": [185, 197], "ndocumentdata": 185, "x04": [185, 197], "x06": 185, "x0e": 185, "x00_reference_docq": 185, "x07h": 185, "x01x": 185, "x02": [185, 197], "x00idq": 185, "x08x": 185, "x005d29a9f26d5911ec88d51e008a366d49q": 185, "tx": 185, "x00parent_": 185, "3644c0fa6d5a11ecbb081e008a366d49": 185, "110": [185, 191], "spooki": 185, "deseri": [185, 197], "protcol": [185, 197], "ganjzg9jyxjyyxkuzg9jdw1lbnqkrg9jdw1lbnqkcqapgxebfxecwauaaabfzgf0yxedy2rvy2fycmf5lmrvy3vtzw50lmrhdgekrg9jdw1lbnreyxrhcneekyfxbx1xbihydgaaaf9yzwzlcmvuy2vfzg9jcqdoavgcaaaaawrxcfggaaaazmzjnty3odg3mzaymtfly2e4njmxztawogeznjzkndlxcvgjaaaacgfyzw50x2lkcqpowasaaabncmfudwxhcml0exeltlgjaaaaywrqywnlbmn5cqxowayaaabidwzmzxjxdu5ybaaaagjsb2jxdk5ycqaaag1pbwvfdhlwzxepwaoaaab0zxh0l3bsywlucrbybaaaahrlehrxevgfaaaaagvsbg9xelghaaaay29udgvudhettlggaaaad2vpz2h0crrowamaaab1cmlxfu5ybaaaahrhz3nxfk5ybgaaag9mznnldhextlgiaaaabg9jyxrpb25xge5ycqaaagvtymvkzgluz3ezxxeakesbswjla2vycaaaag1vzgfsaxr5crtowasaaabldmfsdwf0aw9uc3ectlggaaaac2nvcmvzcr1owayaaabjahvua3nxhk5ybwaaag1hdgnozxnxh051ynnilg": 185, "d_as_dict": 185, "5596c84c77b711ecafed1e008a366d49": 185, "d_proto": 185, "d66463b46d6a11ecbf891e008a366d49": 185, "e4b215106d6a11ecb28b1e008a366d49": 185, "hundr": 185, "ineffici": [185, 205, 206], "context": [187, 203], "tast": 187, "talk": 187, "element_selector": 187, "attribute_selector": 187, "scores__cosine__valu": 187, "8d41ce5c6f0d11eca2181e008a366d49": 187, "8d41cfa66f0d11eca2181e008a366d49": 187, "8d41cff66f0d11eca2181e008a366d49": 187, "db60ab8a6f0d11ec99511e008a366d49": 187, "db60abda6f0d11ec99511e008a366d49": 187, "db60c12e6f0d11ec99511e008a366d49": 187, "db60c1886f0d11ec99511e008a366d49": 187, "db60c4266f0d11ec99511e008a366d49": 187, "db60c46c6f0d11ec99511e008a366d49": 187, "285db6586f0e11ec99401e008a366d49": 187, "285db6b26f0e11ec99401e008a366d49": 187, "285dbff46f0e11ec99401e008a366d49": 187, "285dc0586f0e11ec99401e008a366d49": 187, "285db3606f0e11ec99401e008a366d49": 187, "285dcc746f0e11ec99401e008a366d49": 187, "285dccce6f0e11ec99401e008a366d49": 187, "285dce0e6f0e11ec99401e008a366d49": 187, "285dce5e6f0e11ec99401e008a366d49": 187, "285db4fa6f0e11ec99401e008a366d49": 187, "285dcf946f0e11ec99401e008a366d49": 187, "285dcfda6f0e11ec99401e008a366d49": 187, "285dd1066f0e11ec99401e008a366d49": 187, "285dd16a6f0e11ec99401e008a366d49": 187, "285db55e6f0e11ec99401e008a366d49": 187, "shot": [187, 197], "095cd76a6f0f11ec82211e008a366d49": 187, "095cd8d26f0f11ec82211e008a366d49": 187, "095cd92c6f0f11ec82211e008a366d49": 187, "coo": 187, "matric": 187, "sp_emb": 187, "key1": 187, "tags__key1": 187, "5164d792709a11ec9ae71e008a366d49": 187, "5164d986709a11ec9ae71e008a366d49": 187, "5164d922709a11ec9ae71e008a366d49": 187, "006942970007385196": 187, "48303283924326845": 187, "3859268166910603": 187, "220446049250313e": 187, "quickli": [187, 189, 197], "my": [188, 191], "favorit": [188, 203], "ask": 188, "coin": 188, "exploit": 188, "routin": [188, 203], "a04633546e6211ec8ad31e008a366d49": 188, "af7923406e6211ecbc811e008a366d49": 188, "ellipsi": 188, "3m": 188, "excit": [188, 193], "834f14666e6511ec8e331e008a366d49": 188, "834f32846e6511ec8e331e008a366d49": 188, "4883468432": 188, "7e27fa246e6611ec9a441e008a366d49": 188, "7e27fb826e6611ec9a441e008a366d49": 188, "99851c7a6e6611ecba351e008a366d49": 188, "4874066256": 188, "No": [188, 193, 197, 202, 203, 204], "worri": 188, "techniqu": [188, 195], "4513619088": 188, "remain": [188, 193], "path1": 188, "path2": 188, "path3": 188, "rout": 188, "mc": 188, "assigend": 188, "2f94c1426ee511ecbb491e008a366d49": 188, "2f94cd9a6ee511ecbb491e008a366d49": 188, "2f94cdfe6ee511ecbb491e008a366d49": 188, "2f94c4086ee511ecbb491e008a366d49": 188, "2f94c46c6ee511ecbb491e008a366d49": 188, "circl": 188, "intend": 188, "4912623312": 188, "4905929552": 188, "4913359824": 188, "deeper": 188, "ye": [188, 195], "liter": 188, "anymor": 188, "b_da": 188, "4887691536": 188, "4887691600": 188, "4887691408": 188, "232": 188, "categori": 188, "rv": 188, "4869273936": 188, "4876081680": 188, "4876735056": 188, "spoiler": 188, "alert": 188, "4453362704": 189, "4446140816": 189, "4866772176": 189, "da3": 189, "5024988176": 189, "4525853328": 189, "4452802192": 189, "afterward": [189, 191, 197], "surpris": 189, "mention": [189, 200], "glob": 189, "da_jpg": 189, "da_png": 189, "da_al": 189, "astyp": [190, 194], "mlp": 190, "onnx": [190, 203, 204], "nn": [190, 204], "linear": 190, "in_featur": 190, "out_featur": 190, "relu": 190, "preliminari": 190, "rand": [190, 198], "do_constant_fold": 190, "constant": [190, 197, 203], "fold": 190, "input_nam": 190, "output_nam": 190, "dynamic_ax": 190, "ax": 190, "inferencesess": 190, "onnxruntim": 190, "0506": 190, "0015": 190, "1154": 190, "1630": 190, "2376": 190, "0576": 190, "4109": 190, "0052": 190, "0027": 190, "0800": 190, "0928": 190, "1326": 190, "2256": 190, "1649": 190, "0435": 190, "2312": 190, "0068": 190, "0991": 190, "0767": 190, "0501": 190, "1393": 190, "0965": 190, "2062": 190, "my_text_model": 190, "demonstr": [191, 201], "da_origin": 191, "da_predict": 191, "da_groundtruth": 191, "therebi": 191, "cell": [191, 201], "noisi": 191, "recogn": 191, "p_da": 191, "g_da": 191, "42dc84b26fab11ecbc181e008a366d49": 191, "42dc98086fab11ecbc181e008a366d49": 191, "badli": 191, "example_da": 191, "8166666666666667": 191, "fulfil": 191, "judgement": 191, "count_relev": 191, "sum": 191, "inspir": 191, "47368421052631576": 191, "constuct": 191, "example_queri": 191, "example_index": 191, "embedding_funct": 191, "index_da": 191, "7583333333333333": 191, "100_000": [191, 203], "footprint": 191, "ajust": 191, "emb_func": 191, "1_000": [191, 194], "13649999999999998": 191, "14245": 191, "mongodb": 192, "next": [192, 195], "uom": 192, "paper": 192, "planner": 192, "postcard": 192, "operator1": 192, "value1": 192, "dunder": 192, "tags__timestamp": 192, "substitut": 192, "curli": 192, "ne": 192, "gt": 192, "greater": [192, 205, 206], "gte": 192, "lt": 192, "nin": 192, "regex": 192, "pprint": 192, "pretti": [192, 199, 201, 204], "92aee5d665d0c4dd34db10d83642ad": 192, "1a9d2139b02bc1c7842ecda94b347889": 192, "tags__h": 192, "4045a9659875fd1299e482d710753de3": 192, "cf7691c445220b94b88ff116911bad24": 192, "tags__w": 192, "44c6a4b18eaa005c6dbe15a28a32ebc": 192, "join": [192, 195], "claus": 192, "22985b71b6d483c31cbe507ed4d02bd1": 192, "a071faf19feac5809642e3afcd3a5878": 192, "411ecc70a71a3f00fc3259bf08c239d1": 192, "greatli": [193, 203, 204], "acceler": [193, 203, 204], "accpet": 194, "one_million_doc": 194, "rh": 194, "lh": 194, "20000000298023224": 194, "5620499849319458": 194, "6763054132461548": 194, "allevi": 194, "oom": 194, "1_000_000": 194, "768": 194, "dev": [194, 202, 204], "inter": 195, "wise": 195, "naiv": 195, "popular": 195, "charm": 195, "6000": 195, "6016": 195, "signific": 195, "tip": 195, "peopl": [195, 203], "told": 195, "whatev": 195, "pipelin": 195, "1024": 195, "question": 195, "jump": 195, "whiteboard": 195, "anywai": 195, "awai": [195, 203], "rather": 195, "wait": 195, "btw": 195, "immedid": 195, "cv": 195, "inevit": 195, "domin": 195, "shed": 195, "light": 195, "mindset": 195, "gen": 195, "_head": 195, "_get_chunk": 195, "_batch": 195, "_to_stream_byt": 195, "num_doc_in_chunk": 195, "_tail": 195, "v2": 195, "rpc": 195, "artifact": 195, "12345": 196, "hi": 196, "alex": 196, "laptop": [196, 197], "coquitts7": 196, "wide": [196, 197], "netloc": 196, "websocket": 196, "jinhub": 196, "55566": 196, "8081": 196, "porcess": 196, "anytim": [197, 204], "abil": 197, "a677577877b611eca3811e008a366d49": 197, "a67758f477b611eca3811e008a366d49": 197, "da_r": 197, "x03": 197, "cdocarrai": 197, "fastest": 197, "portabl": [197, 203], "insecur": 197, "2gb": 197, "bz2": 197, "lzma": 197, "zlib": 197, "jan": 197, "interpret": 197, "argu": 197, "realist": 197, "unreal": 197, "rel": 197, "doc1_byt": 197, "doc2_byt": 197, "uint64": [197, 205, 206], "uint32": [197, 205, 206], "amount": 197, "dock_byt": 197, "dock": 197, "repeat": [197, 200, 205, 206], "da_rec": 197, "simplifi": [197, 204], "da_gener": 197, "xxxl": 197, "nut": 197, "d_str": 197, "bcjngebawhuaaad": 197, "iw": 197, "uqdpl9udnsfvomzb8m7skigrkntiyotqynzmwmzexzwnim2i1mwuwmdhhmzy2zdq5mgaep2findiahd9imtgyab0vnwuyab0fytiahh9myaadp2mzyzyahd9jodayab0fzdiaht9kmtzkaabqnjzkndkaaaaa": 197, "2571b8b66e4d11ec9f271e008a366d49": 197, "2571ba466e4d11ec9f271e008a366d49": 197, "ae55782a6e4d11ec803c1e008a366d49": 197, "ae557a146e4d11ec803c1e008a366d49": 197, "43cb93b26e4e11ec8b731e008a366d49": 197, "43cb95746e4e11ec8b731e008a366d49": 197, "heavylift": 197, "myda123": 197, "analyz": 197, "colleagu": 197, "4gb": 197, "unchang": 197, "subindci": 198, "sublevel": 198, "searchabl": 198, "fledg": 198, "mydocu": 198, "_imag": 198, "tmp_w1yqmpc": 198, "tmp_iar4ofr": 198, "documentarri": 198, "top_image_match": 198, "top_level_match": 198, "visualis": 199, "pydanticdocumentarrai": 200, "won": 200, "happi": 200, "difficult": 200, "isinst": 200, "web": 200, "fundament": [200, 203], "openapi": [200, 204], "ref": 200, "ll": 200, "hint": [200, 204], "create_item": 200, "create_arrai": 200, "starlett": 200, "testclient": 200, "loc": 200, "msg": 200, "type_error": 200, "reject": 200, "meaningless": 200, "response_model": 200, "idonli": 200, "get_item_no_embed": 200, "065a5548756211ecaa8d1e008a366d49": 200, "declar": 200, "idandmatch": 200, "get_match": 200, "get_match_id_onli": 200, "unlimit": 200, "ef82e4f4756411ecb2c01e008a366d49": 200, "ef82e6d4756411ecb2c01e008a366d49": 200, "ef82e760756411ecb2c01e008a366d49": 200, "ef82e7ec756411ecb2c01e008a366d49": 200, "didn": 200, "degre": 200, "idmatch": 200, "response_model_exclude_non": 200, "3da6383e756511ecb7cb1e008a366d49": 200, "3da63a14756511ecb7cb1e008a366d49": 200, "3da6392e756511ecb7cb1e008a366d49": 200, "3da63b72756511ecb7cb1e008a366d49": 200, "3da639ce756511ecb7cb1e008a366d49": 200, "3da63a5a756511ecb7cb1e008a366d49": 200, "3da63ae6756511ecb7cb1e008a366d49": 200, "3da63aa0756511ecb7cb1e008a366d49": 200, "3da63b2c756511ecb7cb1e008a366d49": 200, "3da63988756511ecb7cb1e008a366d49": 200, "stage": 201, "richer": 201, "broken": 201, "emul": 201, "termin": 201, "linux": [202, 204], "conda": [202, 204], "forg": [202, 204], "seral": [202, 204], "uvicorn": [202, 204], "demand": [202, 204], "reproduc": [202, 204], "__version__": [202, 204], "maco": 202, "chip": 202, "rosetta": 202, "unam": 202, "arm64": 202, "brew": 202, "confirm": 202, "reinstal": 202, "destruct": 202, "proceed": 202, "bash": 202, "curl": 202, "fssl": 202, "githubusercont": 202, "sh": 202, "platform": 202, "python3": 202, "aug": 202, "libexec": 202, "pypi": 202, "mp": 202, "torchaudio": 202, "whl": 202, "nightli": 202, "unstructur": [203, 204], "media": 203, "toolkit": 203, "jupyterlab": 203, "happili": 203, "maxim": 203, "de": 203, "filetyp": 203, "haven": 203, "unfair": 203, "dedic": 203, "vision": 203, "coupl": 203, "soon": 203, "hf": 203, "temporarili": 203, "resid": 203, "oppos": 203, "physic": 203, "occasion": 203, "precompil": 203, "contigu": 203, "particl": 203, "crunch": 203, "awkward": 203, "ak": 203, "toytim": 203, "timecontext": 203, "ak_arrai": 203, "from_it": 203, "004": 203, "031": 203, "known": 203, "ago": 203, "me": 203, "perspect": 203, "numer": 203, "stori": 203, "thrown": 203, "stash": 203, "boost": 203, "usabl": 203, "independ": 203, "comparison": [203, 204], "100k": 203, "repetit": 203, "revis": 203, "realiz": 203, "due": 203, "deliber": 203, "constraint": 203, "trigger": 203, "door": 204, "foundat": 204, "dall": 204, "discoart": 204, "powerhous": 204, "mainstream": 204, "neighboour": 204, "versatil": 204, "reliabl": 204, "pycharm": 204, "quantiz": [205, 206], "cls_name": [205, 206], "java": [205, 206], "int32": [205, 206], "sint32": [205, 206], "bignum": [205, 206], "fixnum": [205, 206], "sint64": [205, 206], "uint": [205, 206], "ulong": [205, 206], "sign": [205, 206], "fixed32": [205, 206], "fixed64": [205, 206], "eight": [205, 206], "sfixed32": [205, 206], "sfixed64": [205, 206], "trueclass": [205, 206], "falseclass": [205, 206], "bytestr": [205, 206], "8bit": [205, 206], "cd": 206, "pwd": 206, "jinaai": 206, "protogen": 206}, "objects": {"": [[12, 0, 0, "-", "docarray"]], "docarray": [[13, 0, 0, "-", "array"], [104, 0, 0, "-", "base"], [105, 0, 0, "-", "dataclasses"], [110, 0, 0, "-", "document"], [137, 0, 0, "-", "helper"], [138, 0, 0, "-", "math"], [147, 0, 0, "-", "proto"], [155, 0, 0, "-", "score"], [160, 0, 0, "-", "typing"]], "docarray.array": [[14, 0, 0, "-", "annlite"], [15, 0, 0, "-", "base"], [16, 0, 0, "-", "chunk"], [17, 0, 0, "-", "document"], [18, 0, 0, "-", "elastic"], [19, 0, 0, "-", "match"], [20, 0, 0, "-", "memory"], [21, 0, 0, "-", "mixins"], [53, 0, 0, "-", "qdrant"], [54, 0, 0, "-", "queryset"], [57, 0, 0, "-", "redis"], [58, 0, 0, "-", "sqlite"], [59, 0, 0, "-", "storage"], [103, 0, 0, "-", "weaviate"]], "docarray.array.annlite": [[14, 1, 1, "", "AnnliteConfig"], [14, 1, 1, "", "DocumentArrayAnnlite"]], "docarray.array.annlite.AnnliteConfig": [[14, 2, 1, "", "columns"], [14, 2, 1, "", "data_path"], [14, 2, 1, "", "ef_construction"], [14, 2, 1, "", "ef_search"], [14, 2, 1, "", "list_like"], [14, 2, 1, "", "max_connection"], [14, 2, 1, "", "metric"], [14, 2, 1, "", "n_components"], [14, 2, 1, "", "n_dim"], [14, 2, 1, "", "serialize_config"]], "docarray.array.annlite.DocumentArrayAnnlite": [[14, 2, 1, "", "TYPE_MAP"], [14, 3, 1, "", "append"], [14, 3, 1, "", "apply"], [14, 3, 1, "", "apply_batch"], [14, 3, 1, "", "batch"], [14, 3, 1, "", "batch_ids"], [14, 4, 1, "", "blobs"], [14, 3, 1, "", "clear"], [14, 3, 1, "", "cloud_delete"], [14, 3, 1, "", "cloud_list"], [14, 3, 1, "", "cloud_pull"], [14, 3, 1, "", "cloud_push"], [14, 4, 1, "", "contents"], [14, 3, 1, "", "count"], [14, 3, 1, "", "dataloader"], [14, 3, 1, "", "embed"], [14, 3, 1, "", "embed_and_evaluate"], [14, 4, 1, "", "embeddings"], [14, 3, 1, "", "empty"], [14, 3, 1, "", "evaluate"], [14, 3, 1, "", "extend"], [14, 3, 1, "", "find"], [14, 3, 1, "", "flatten"], [14, 3, 1, "", "from_base64"], [14, 3, 1, "", "from_bytes"], [14, 3, 1, "", "from_csv"], [14, 3, 1, "", "from_dataframe"], [14, 3, 1, "", "from_dict"], [14, 3, 1, "", "from_files"], [14, 3, 1, "", "from_huggingface_datasets"], [14, 3, 1, "", "from_json"], [14, 3, 1, "", "from_lines"], [14, 3, 1, "", "from_list"], [14, 3, 1, "", "from_ndarray"], [14, 3, 1, "", "from_ndjson"], [14, 3, 1, "", "from_protobuf"], [14, 3, 1, "", "from_pydantic_model"], [14, 3, 1, "", "from_strawberry_type"], [14, 3, 1, "", "get_json_schema"], [14, 3, 1, "", "get_vocabulary"], [14, 3, 1, "", "index"], [14, 3, 1, "", "insert"], [14, 3, 1, "", "load"], [14, 3, 1, "", "load_binary"], [14, 3, 1, "", "load_csv"], [14, 3, 1, "", "load_json"], [14, 3, 1, "", "map"], [14, 3, 1, "", "map_batch"], [14, 3, 1, "", "match"], [14, 3, 1, "", "plot_embeddings"], [14, 3, 1, "", "plot_image_sprites"], [14, 3, 1, "", "pop"], [14, 3, 1, "", "post"], [14, 3, 1, "", "pull"], [14, 3, 1, "", "push"], [14, 3, 1, "", "reduce"], [14, 3, 1, "", "reduce_all"], [14, 3, 1, "", "remove"], [14, 3, 1, "", "reverse"], [14, 3, 1, "", "sample"], [14, 3, 1, "", "save"], [14, 3, 1, "", "save_binary"], [14, 3, 1, "", "save_csv"], [14, 3, 1, "", "save_embeddings_csv"], [14, 3, 1, "", "save_gif"], [14, 3, 1, "", "save_json"], [14, 3, 1, "", "shuffle"], [14, 3, 1, "", "split_by_tag"], [14, 3, 1, "", "summary"], [14, 3, 1, "", "sync"], [14, 4, 1, "", "tensors"], [14, 4, 1, "", "texts"], [14, 3, 1, "", "to_base64"], [14, 3, 1, "", "to_bytes"], [14, 3, 1, "", "to_dataframe"], [14, 3, 1, "", "to_dict"], [14, 3, 1, "", "to_json"], [14, 3, 1, "", "to_list"], [14, 3, 1, "", "to_protobuf"], [14, 3, 1, "", "to_pydantic_model"], [14, 3, 1, "", "to_strawberry_type"], [14, 3, 1, "", "traverse"], [14, 3, 1, "", "traverse_flat"], [14, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.base": [[15, 1, 1, "", "BaseDocumentArray"]], "docarray.array.base.BaseDocumentArray": [[15, 3, 1, "", "append"], [15, 3, 1, "", "clear"], [15, 3, 1, "", "count"], [15, 3, 1, "", "extend"], [15, 3, 1, "", "index"], [15, 3, 1, "", "insert"], [15, 3, 1, "", "pop"], [15, 3, 1, "", "remove"], [15, 3, 1, "", "reverse"]], "docarray.array.chunk": [[16, 1, 1, "", "ChunkArray"]], "docarray.array.chunk.ChunkArray": [[16, 2, 1, "", "TYPE_MAP"], [16, 4, 1, "", "adjacency"], [16, 3, 1, "", "append"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "apply_batch"], [16, 3, 1, "", "batch"], [16, 3, 1, "", "batch_ids"], [16, 4, 1, "", "blobs"], [16, 3, 1, "", "clear"], [16, 3, 1, "", "cloud_delete"], [16, 3, 1, "", "cloud_list"], [16, 3, 1, "", "cloud_pull"], [16, 3, 1, "", "cloud_push"], [16, 4, 1, "", "contents"], [16, 3, 1, "", "count"], [16, 3, 1, "", "dataloader"], [16, 3, 1, "", "embed"], [16, 3, 1, "", "embed_and_evaluate"], [16, 4, 1, "", "embeddings"], [16, 3, 1, "", "empty"], [16, 3, 1, "", "evaluate"], [16, 3, 1, "", "extend"], [16, 3, 1, "", "find"], [16, 3, 1, "", "flatten"], [16, 3, 1, "", "from_base64"], [16, 3, 1, "", "from_bytes"], [16, 3, 1, "", "from_csv"], [16, 3, 1, "", "from_dataframe"], [16, 3, 1, "", "from_dict"], [16, 3, 1, "", "from_files"], [16, 3, 1, "", "from_huggingface_datasets"], [16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_lines"], [16, 3, 1, "", "from_list"], [16, 3, 1, "", "from_ndarray"], [16, 3, 1, "", "from_ndjson"], [16, 3, 1, "", "from_protobuf"], [16, 3, 1, "", "from_pydantic_model"], [16, 3, 1, "", "from_strawberry_type"], [16, 3, 1, "", "get_json_schema"], [16, 3, 1, "", "get_vocabulary"], [16, 4, 1, "", "granularity"], [16, 3, 1, "", "index"], [16, 3, 1, "", "insert"], [16, 3, 1, "", "load"], [16, 3, 1, "", "load_binary"], [16, 3, 1, "", "load_csv"], [16, 3, 1, "", "load_json"], [16, 3, 1, "", "map"], [16, 3, 1, "", "map_batch"], [16, 3, 1, "", "match"], [16, 3, 1, "", "plot_embeddings"], [16, 3, 1, "", "plot_image_sprites"], [16, 3, 1, "", "pop"], [16, 3, 1, "", "post"], [16, 3, 1, "", "pull"], [16, 3, 1, "", "push"], [16, 3, 1, "", "reduce"], [16, 3, 1, "", "reduce_all"], [16, 4, 1, "", "reference_doc"], [16, 3, 1, "", "remove"], [16, 3, 1, "", "reverse"], [16, 3, 1, "", "sample"], [16, 3, 1, "", "save"], [16, 3, 1, "", "save_binary"], [16, 3, 1, "", "save_csv"], [16, 3, 1, "", "save_embeddings_csv"], [16, 3, 1, "", "save_gif"], [16, 3, 1, "", "save_json"], [16, 3, 1, "", "shuffle"], [16, 3, 1, "", "split_by_tag"], [16, 3, 1, "", "summary"], [16, 3, 1, "", "sync"], [16, 4, 1, "", "tensors"], [16, 4, 1, "", "texts"], [16, 3, 1, "", "to_base64"], [16, 3, 1, "", "to_bytes"], [16, 3, 1, "", "to_dataframe"], [16, 3, 1, "", "to_dict"], [16, 3, 1, "", "to_json"], [16, 3, 1, "", "to_list"], [16, 3, 1, "", "to_protobuf"], [16, 3, 1, "", "to_pydantic_model"], [16, 3, 1, "", "to_strawberry_type"], [16, 3, 1, "", "traverse"], [16, 3, 1, "", "traverse_flat"], [16, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.document": [[17, 1, 1, "", "DocumentArray"]], "docarray.array.document.DocumentArray": [[17, 3, 1, "", "append"], [17, 3, 1, "", "apply"], [17, 3, 1, "", "apply_batch"], [17, 3, 1, "", "batch"], [17, 3, 1, "", "batch_ids"], [17, 4, 1, "", "blobs"], [17, 3, 1, "", "clear"], [17, 3, 1, "", "cloud_delete"], [17, 3, 1, "", "cloud_list"], [17, 3, 1, "", "cloud_pull"], [17, 3, 1, "", "cloud_push"], [17, 4, 1, "", "contents"], [17, 3, 1, "", "count"], [17, 3, 1, "", "dataloader"], [17, 3, 1, "", "embed"], [17, 3, 1, "", "embed_and_evaluate"], [17, 4, 1, "", "embeddings"], [17, 3, 1, "", "empty"], [17, 3, 1, "", "evaluate"], [17, 3, 1, "", "extend"], [17, 3, 1, "", "find"], [17, 3, 1, "", "flatten"], [17, 3, 1, "", "from_base64"], [17, 3, 1, "", "from_bytes"], [17, 3, 1, "", "from_csv"], [17, 3, 1, "", "from_dataframe"], [17, 3, 1, "", "from_dict"], [17, 3, 1, "", "from_files"], [17, 3, 1, "", "from_huggingface_datasets"], [17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_lines"], [17, 3, 1, "", "from_list"], [17, 3, 1, "", "from_ndarray"], [17, 3, 1, "", "from_ndjson"], [17, 3, 1, "", "from_protobuf"], [17, 3, 1, "", "from_pydantic_model"], [17, 3, 1, "", "from_strawberry_type"], [17, 3, 1, "", "get_json_schema"], [17, 3, 1, "", "get_vocabulary"], [17, 3, 1, "", "index"], [17, 3, 1, "", "insert"], [17, 3, 1, "", "load"], [17, 3, 1, "", "load_binary"], [17, 3, 1, "", "load_csv"], [17, 3, 1, "", "load_json"], [17, 3, 1, "", "map"], [17, 3, 1, "", "map_batch"], [17, 3, 1, "", "match"], [17, 3, 1, "", "plot_embeddings"], [17, 3, 1, "", "plot_image_sprites"], [17, 3, 1, "", "pop"], [17, 3, 1, "", "post"], [17, 3, 1, "", "pull"], [17, 3, 1, "", "push"], [17, 3, 1, "", "reduce"], [17, 3, 1, "", "reduce_all"], [17, 3, 1, "", "remove"], [17, 3, 1, "", "reverse"], [17, 3, 1, "", "sample"], [17, 3, 1, "", "save"], [17, 3, 1, "", "save_binary"], [17, 3, 1, "", "save_csv"], [17, 3, 1, "", "save_embeddings_csv"], [17, 3, 1, "", "save_gif"], [17, 3, 1, "", "save_json"], [17, 3, 1, "", "shuffle"], [17, 3, 1, "", "split_by_tag"], [17, 3, 1, "", "summary"], [17, 4, 1, "", "tensors"], [17, 4, 1, "", "texts"], [17, 3, 1, "", "to_base64"], [17, 3, 1, "", "to_bytes"], [17, 3, 1, "", "to_dataframe"], [17, 3, 1, "", "to_dict"], [17, 3, 1, "", "to_json"], [17, 3, 1, "", "to_list"], [17, 3, 1, "", "to_protobuf"], [17, 3, 1, "", "to_pydantic_model"], [17, 3, 1, "", "to_strawberry_type"], [17, 3, 1, "", "traverse"], [17, 3, 1, "", "traverse_flat"], [17, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.elastic": [[18, 1, 1, "", "DocumentArrayElastic"], [18, 1, 1, "", "ElasticConfig"]], "docarray.array.elastic.DocumentArrayElastic": [[18, 2, 1, "", "MAX_ES_RETURNED_DOCS"], [18, 2, 1, "", "TYPE_MAP"], [18, 3, 1, "", "append"], [18, 3, 1, "", "apply"], [18, 3, 1, "", "apply_batch"], [18, 3, 1, "", "batch"], [18, 3, 1, "", "batch_ids"], [18, 4, 1, "", "blobs"], [18, 3, 1, "", "clear"], [18, 3, 1, "", "cloud_delete"], [18, 3, 1, "", "cloud_list"], [18, 3, 1, "", "cloud_pull"], [18, 3, 1, "", "cloud_push"], [18, 4, 1, "", "contents"], [18, 3, 1, "", "count"], [18, 3, 1, "", "dataloader"], [18, 3, 1, "", "embed"], [18, 3, 1, "", "embed_and_evaluate"], [18, 4, 1, "", "embeddings"], [18, 3, 1, "", "empty"], [18, 3, 1, "", "evaluate"], [18, 3, 1, "", "extend"], [18, 3, 1, "", "find"], [18, 3, 1, "", "flatten"], [18, 3, 1, "", "from_base64"], [18, 3, 1, "", "from_bytes"], [18, 3, 1, "", "from_csv"], [18, 3, 1, "", "from_dataframe"], [18, 3, 1, "", "from_dict"], [18, 3, 1, "", "from_files"], [18, 3, 1, "", "from_huggingface_datasets"], [18, 3, 1, "", "from_json"], [18, 3, 1, "", "from_lines"], [18, 3, 1, "", "from_list"], [18, 3, 1, "", "from_ndarray"], [18, 3, 1, "", "from_ndjson"], [18, 3, 1, "", "from_protobuf"], [18, 3, 1, "", "from_pydantic_model"], [18, 3, 1, "", "from_strawberry_type"], [18, 3, 1, "", "get_json_schema"], [18, 3, 1, "", "get_vocabulary"], [18, 3, 1, "", "index"], [18, 3, 1, "", "insert"], [18, 3, 1, "", "load"], [18, 3, 1, "", "load_binary"], [18, 3, 1, "", "load_csv"], [18, 3, 1, "", "load_json"], [18, 3, 1, "", "map"], [18, 3, 1, "", "map_batch"], [18, 3, 1, "", "match"], [18, 3, 1, "", "plot_embeddings"], [18, 3, 1, "", "plot_image_sprites"], [18, 3, 1, "", "pop"], [18, 3, 1, "", "post"], [18, 3, 1, "", "pull"], [18, 3, 1, "", "push"], [18, 3, 1, "", "reduce"], [18, 3, 1, "", "reduce_all"], [18, 3, 1, "", "remove"], [18, 3, 1, "", "reverse"], [18, 3, 1, "", "sample"], [18, 3, 1, "", "save"], [18, 3, 1, "", "save_binary"], [18, 3, 1, "", "save_csv"], [18, 3, 1, "", "save_embeddings_csv"], [18, 3, 1, "", "save_gif"], [18, 3, 1, "", "save_json"], [18, 3, 1, "", "shuffle"], [18, 3, 1, "", "split_by_tag"], [18, 3, 1, "", "summary"], [18, 3, 1, "", "sync"], [18, 4, 1, "", "tensors"], [18, 4, 1, "", "texts"], [18, 3, 1, "", "to_base64"], [18, 3, 1, "", "to_bytes"], [18, 3, 1, "", "to_dataframe"], [18, 3, 1, "", "to_dict"], [18, 3, 1, "", "to_json"], [18, 3, 1, "", "to_list"], [18, 3, 1, "", "to_protobuf"], [18, 3, 1, "", "to_pydantic_model"], [18, 3, 1, "", "to_strawberry_type"], [18, 3, 1, "", "traverse"], [18, 3, 1, "", "traverse_flat"], [18, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.elastic.ElasticConfig": [[18, 2, 1, "", "batch_size"], [18, 2, 1, "", "columns"], [18, 2, 1, "", "distance"], [18, 2, 1, "", "ef_construction"], [18, 2, 1, "", "es_config"], [18, 2, 1, "", "hosts"], [18, 2, 1, "", "index_name"], [18, 2, 1, "", "index_text"], [18, 2, 1, "", "list_like"], [18, 2, 1, "", "m"], [18, 2, 1, "", "n_dim"], [18, 2, 1, "", "tag_indices"]], "docarray.array.match": [[19, 1, 1, "", "MatchArray"]], "docarray.array.match.MatchArray": [[19, 2, 1, "", "TYPE_MAP"], [19, 4, 1, "", "adjacency"], [19, 3, 1, "", "append"], [19, 3, 1, "", "apply"], [19, 3, 1, "", "apply_batch"], [19, 3, 1, "", "batch"], [19, 3, 1, "", "batch_ids"], [19, 4, 1, "", "blobs"], [19, 3, 1, "", "clear"], [19, 3, 1, "", "cloud_delete"], [19, 3, 1, "", "cloud_list"], [19, 3, 1, "", "cloud_pull"], [19, 3, 1, "", "cloud_push"], [19, 4, 1, "", "contents"], [19, 3, 1, "", "count"], [19, 3, 1, "", "dataloader"], [19, 3, 1, "", "embed"], [19, 3, 1, "", "embed_and_evaluate"], [19, 4, 1, "", "embeddings"], [19, 3, 1, "", "empty"], [19, 3, 1, "", "evaluate"], [19, 3, 1, "", "extend"], [19, 3, 1, "", "find"], [19, 3, 1, "", "flatten"], [19, 3, 1, "", "from_base64"], [19, 3, 1, "", "from_bytes"], [19, 3, 1, "", "from_csv"], [19, 3, 1, "", "from_dataframe"], [19, 3, 1, "", "from_dict"], [19, 3, 1, "", "from_files"], [19, 3, 1, "", "from_huggingface_datasets"], [19, 3, 1, "", "from_json"], [19, 3, 1, "", "from_lines"], [19, 3, 1, "", "from_list"], [19, 3, 1, "", "from_ndarray"], [19, 3, 1, "", "from_ndjson"], [19, 3, 1, "", "from_protobuf"], [19, 3, 1, "", "from_pydantic_model"], [19, 3, 1, "", "from_strawberry_type"], [19, 3, 1, "", "get_json_schema"], [19, 3, 1, "", "get_vocabulary"], [19, 4, 1, "", "granularity"], [19, 3, 1, "", "index"], [19, 3, 1, "", "insert"], [19, 3, 1, "", "load"], [19, 3, 1, "", "load_binary"], [19, 3, 1, "", "load_csv"], [19, 3, 1, "", "load_json"], [19, 3, 1, "", "map"], [19, 3, 1, "", "map_batch"], [19, 3, 1, "", "match"], [19, 3, 1, "", "plot_embeddings"], [19, 3, 1, "", "plot_image_sprites"], [19, 3, 1, "", "pop"], [19, 3, 1, "", "post"], [19, 3, 1, "", "pull"], [19, 3, 1, "", "push"], [19, 3, 1, "", "reduce"], [19, 3, 1, "", "reduce_all"], [19, 4, 1, "", "reference_doc"], [19, 3, 1, "", "remove"], [19, 3, 1, "", "reverse"], [19, 3, 1, "", "sample"], [19, 3, 1, "", "save"], [19, 3, 1, "", "save_binary"], [19, 3, 1, "", "save_csv"], [19, 3, 1, "", "save_embeddings_csv"], [19, 3, 1, "", "save_gif"], [19, 3, 1, "", "save_json"], [19, 3, 1, "", "shuffle"], [19, 3, 1, "", "split_by_tag"], [19, 3, 1, "", "summary"], [19, 3, 1, "", "sync"], [19, 4, 1, "", "tensors"], [19, 4, 1, "", "texts"], [19, 3, 1, "", "to_base64"], [19, 3, 1, "", "to_bytes"], [19, 3, 1, "", "to_dataframe"], [19, 3, 1, "", "to_dict"], [19, 3, 1, "", "to_json"], [19, 3, 1, "", "to_list"], [19, 3, 1, "", "to_protobuf"], [19, 3, 1, "", "to_pydantic_model"], [19, 3, 1, "", "to_strawberry_type"], [19, 3, 1, "", "traverse"], [19, 3, 1, "", "traverse_flat"], [19, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.memory": [[20, 1, 1, "", "DocumentArrayInMemory"]], "docarray.array.memory.DocumentArrayInMemory": [[20, 2, 1, "", "TYPE_MAP"], [20, 3, 1, "", "append"], [20, 3, 1, "", "apply"], [20, 3, 1, "", "apply_batch"], [20, 3, 1, "", "batch"], [20, 3, 1, "", "batch_ids"], [20, 4, 1, "", "blobs"], [20, 3, 1, "", "clear"], [20, 3, 1, "", "cloud_delete"], [20, 3, 1, "", "cloud_list"], [20, 3, 1, "", "cloud_pull"], [20, 3, 1, "", "cloud_push"], [20, 4, 1, "", "contents"], [20, 3, 1, "", "count"], [20, 3, 1, "", "dataloader"], [20, 3, 1, "", "embed"], [20, 3, 1, "", "embed_and_evaluate"], [20, 4, 1, "", "embeddings"], [20, 3, 1, "", "empty"], [20, 3, 1, "", "evaluate"], [20, 3, 1, "", "extend"], [20, 3, 1, "", "find"], [20, 3, 1, "", "flatten"], [20, 3, 1, "", "from_base64"], [20, 3, 1, "", "from_bytes"], [20, 3, 1, "", "from_csv"], [20, 3, 1, "", "from_dataframe"], [20, 3, 1, "", "from_dict"], [20, 3, 1, "", "from_files"], [20, 3, 1, "", "from_huggingface_datasets"], [20, 3, 1, "", "from_json"], [20, 3, 1, "", "from_lines"], [20, 3, 1, "", "from_list"], [20, 3, 1, "", "from_ndarray"], [20, 3, 1, "", "from_ndjson"], [20, 3, 1, "", "from_protobuf"], [20, 3, 1, "", "from_pydantic_model"], [20, 3, 1, "", "from_strawberry_type"], [20, 3, 1, "", "get_json_schema"], [20, 3, 1, "", "get_vocabulary"], [20, 3, 1, "", "index"], [20, 3, 1, "", "insert"], [20, 3, 1, "", "load"], [20, 3, 1, "", "load_binary"], [20, 3, 1, "", "load_csv"], [20, 3, 1, "", "load_json"], [20, 3, 1, "", "map"], [20, 3, 1, "", "map_batch"], [20, 3, 1, "", "match"], [20, 3, 1, "", "plot_embeddings"], [20, 3, 1, "", "plot_image_sprites"], [20, 3, 1, "", "pop"], [20, 3, 1, "", "post"], [20, 3, 1, "", "pull"], [20, 3, 1, "", "push"], [20, 3, 1, "", "reduce"], [20, 3, 1, "", "reduce_all"], [20, 3, 1, "", "remove"], [20, 3, 1, "", "reverse"], [20, 3, 1, "", "sample"], [20, 3, 1, "", "save"], [20, 3, 1, "", "save_binary"], [20, 3, 1, "", "save_csv"], [20, 3, 1, "", "save_embeddings_csv"], [20, 3, 1, "", "save_gif"], [20, 3, 1, "", "save_json"], [20, 3, 1, "", "shuffle"], [20, 3, 1, "", "split_by_tag"], [20, 3, 1, "", "summary"], [20, 3, 1, "", "sync"], [20, 4, 1, "", "tensors"], [20, 4, 1, "", "texts"], [20, 3, 1, "", "to_base64"], [20, 3, 1, "", "to_bytes"], [20, 3, 1, "", "to_dataframe"], [20, 3, 1, "", "to_dict"], [20, 3, 1, "", "to_json"], [20, 3, 1, "", "to_list"], [20, 3, 1, "", "to_protobuf"], [20, 3, 1, "", "to_pydantic_model"], [20, 3, 1, "", "to_strawberry_type"], [20, 3, 1, "", "traverse"], [20, 3, 1, "", "traverse_flat"], [20, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.mixins": [[21, 1, 1, "", "AllMixins"], [22, 0, 0, "-", "content"], [23, 0, 0, "-", "dataloader"], [25, 0, 0, "-", "delitem"], [26, 0, 0, "-", "embed"], [27, 0, 0, "-", "empty"], [28, 0, 0, "-", "evaluation"], [29, 0, 0, "-", "find"], [30, 0, 0, "-", "getattr"], [31, 0, 0, "-", "getitem"], [32, 0, 0, "-", "group"], [33, 0, 0, "-", "io"], [42, 0, 0, "-", "match"], [43, 0, 0, "-", "parallel"], [44, 0, 0, "-", "plot"], [45, 0, 0, "-", "post"], [46, 0, 0, "-", "pydantic"], [47, 0, 0, "-", "reduce"], [48, 0, 0, "-", "sample"], [49, 0, 0, "-", "setitem"], [50, 0, 0, "-", "strawberry"], [51, 0, 0, "-", "text"], [52, 0, 0, "-", "traverse"]], "docarray.array.mixins.AllMixins": [[21, 3, 1, "", "apply"], [21, 3, 1, "", "apply_batch"], [21, 3, 1, "", "batch"], [21, 3, 1, "", "batch_ids"], [21, 4, 1, "", "blobs"], [21, 3, 1, "", "cloud_delete"], [21, 3, 1, "", "cloud_list"], [21, 3, 1, "", "cloud_pull"], [21, 3, 1, "", "cloud_push"], [21, 4, 1, "", "contents"], [21, 3, 1, "", "dataloader"], [21, 3, 1, "", "embed"], [21, 3, 1, "", "embed_and_evaluate"], [21, 4, 1, "", "embeddings"], [21, 3, 1, "", "empty"], [21, 3, 1, "", "evaluate"], [21, 3, 1, "", "find"], [21, 3, 1, "", "flatten"], [21, 3, 1, "", "from_base64"], [21, 3, 1, "", "from_bytes"], [21, 3, 1, "", "from_csv"], [21, 3, 1, "", "from_dataframe"], [21, 3, 1, "", "from_dict"], [21, 3, 1, "", "from_files"], [21, 3, 1, "", "from_huggingface_datasets"], [21, 3, 1, "", "from_json"], [21, 3, 1, "", "from_lines"], [21, 3, 1, "", "from_list"], [21, 3, 1, "", "from_ndarray"], [21, 3, 1, "", "from_ndjson"], [21, 3, 1, "", "from_protobuf"], [21, 3, 1, "", "from_pydantic_model"], [21, 3, 1, "", "from_strawberry_type"], [21, 3, 1, "", "get_json_schema"], [21, 3, 1, "", "get_vocabulary"], [21, 3, 1, "", "load"], [21, 3, 1, "", "load_binary"], [21, 3, 1, "", "load_csv"], [21, 3, 1, "", "load_json"], [21, 3, 1, "", "map"], [21, 3, 1, "", "map_batch"], [21, 3, 1, "", "match"], [21, 3, 1, "", "plot_embeddings"], [21, 3, 1, "", "plot_image_sprites"], [21, 3, 1, "", "post"], [21, 3, 1, "", "pull"], [21, 3, 1, "", "push"], [21, 3, 1, "", "reduce"], [21, 3, 1, "", "reduce_all"], [21, 3, 1, "", "sample"], [21, 3, 1, "", "save"], [21, 3, 1, "", "save_binary"], [21, 3, 1, "", "save_csv"], [21, 3, 1, "", "save_embeddings_csv"], [21, 3, 1, "", "save_gif"], [21, 3, 1, "", "save_json"], [21, 3, 1, "", "shuffle"], [21, 3, 1, "", "split_by_tag"], [21, 3, 1, "", "summary"], [21, 4, 1, "", "tensors"], [21, 4, 1, "", "texts"], [21, 3, 1, "", "to_base64"], [21, 3, 1, "", "to_bytes"], [21, 3, 1, "", "to_dataframe"], [21, 3, 1, "", "to_dict"], [21, 3, 1, "", "to_json"], [21, 3, 1, "", "to_list"], [21, 3, 1, "", "to_protobuf"], [21, 3, 1, "", "to_pydantic_model"], [21, 3, 1, "", "to_strawberry_type"], [21, 3, 1, "", "traverse"], [21, 3, 1, "", "traverse_flat"], [21, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.mixins.content": [[22, 1, 1, "", "ContentPropertyMixin"]], "docarray.array.mixins.content.ContentPropertyMixin": [[22, 4, 1, "", "blobs"], [22, 4, 1, "", "contents"], [22, 4, 1, "", "embeddings"], [22, 4, 1, "", "tensors"], [22, 4, 1, "", "texts"]], "docarray.array.mixins.dataloader": [[23, 1, 1, "", "DataLoaderMixin"], [24, 0, 0, "-", "helper"]], "docarray.array.mixins.dataloader.DataLoaderMixin": [[23, 3, 1, "", "dataloader"]], "docarray.array.mixins.dataloader.helper": [[24, 1, 1, "", "DocumentArrayLoader"]], "docarray.array.mixins.dataloader.helper.DocumentArrayLoader": [[24, 3, 1, "", "apply"], [24, 3, 1, "", "apply_batch"], [24, 3, 1, "", "batch"], [24, 3, 1, "", "batch_ids"], [24, 3, 1, "", "map"], [24, 3, 1, "", "map_batch"], [24, 3, 1, "", "split_by_tag"]], "docarray.array.mixins.delitem": [[25, 1, 1, "", "DelItemMixin"]], "docarray.array.mixins.embed": [[26, 1, 1, "", "EmbedMixin"], [26, 5, 1, "", "get_framework"]], "docarray.array.mixins.embed.EmbedMixin": [[26, 3, 1, "", "embed"]], "docarray.array.mixins.empty": [[27, 1, 1, "", "EmptyMixin"]], "docarray.array.mixins.empty.EmptyMixin": [[27, 3, 1, "", "empty"]], "docarray.array.mixins.evaluation": [[28, 1, 1, "", "EvaluationMixin"]], "docarray.array.mixins.evaluation.EvaluationMixin": [[28, 3, 1, "", "embed_and_evaluate"], [28, 3, 1, "", "evaluate"]], "docarray.array.mixins.find": [[29, 1, 1, "", "FindMixin"]], "docarray.array.mixins.find.FindMixin": [[29, 3, 1, "", "find"]], "docarray.array.mixins.getattr": [[30, 1, 1, "", "GetAttributeMixin"]], "docarray.array.mixins.getitem": [[31, 1, 1, "", "GetItemMixin"]], "docarray.array.mixins.group": [[32, 1, 1, "", "GroupMixin"]], "docarray.array.mixins.group.GroupMixin": [[32, 3, 1, "", "batch"], [32, 3, 1, "", "batch_ids"], [32, 3, 1, "", "split_by_tag"]], "docarray.array.mixins.io": [[34, 0, 0, "-", "binary"], [35, 0, 0, "-", "common"], [36, 0, 0, "-", "csv"], [37, 0, 0, "-", "dataframe"], [38, 0, 0, "-", "from_gen"], [39, 0, 0, "-", "json"], [40, 0, 0, "-", "pbar"], [41, 0, 0, "-", "pushpull"]], "docarray.array.mixins.io.binary": [[34, 1, 1, "", "BinaryIOMixin"], [34, 1, 1, "", "LazyRequestReader"]], "docarray.array.mixins.io.binary.BinaryIOMixin": [[34, 3, 1, "", "from_base64"], [34, 3, 1, "", "from_bytes"], [34, 3, 1, "", "from_protobuf"], [34, 3, 1, "", "load_binary"], [34, 3, 1, "", "save_binary"], [34, 3, 1, "", "to_base64"], [34, 3, 1, "", "to_bytes"], [34, 3, 1, "", "to_protobuf"]], "docarray.array.mixins.io.common": [[35, 1, 1, "", "CommonIOMixin"]], "docarray.array.mixins.io.common.CommonIOMixin": [[35, 3, 1, "", "load"], [35, 3, 1, "", "save"]], "docarray.array.mixins.io.csv": [[36, 1, 1, "", "CsvIOMixin"]], "docarray.array.mixins.io.csv.CsvIOMixin": [[36, 3, 1, "", "load_csv"], [36, 3, 1, "", "save_csv"], [36, 3, 1, "", "save_embeddings_csv"]], "docarray.array.mixins.io.dataframe": [[37, 1, 1, "", "DataframeIOMixin"]], "docarray.array.mixins.io.dataframe.DataframeIOMixin": [[37, 3, 1, "", "from_dataframe"], [37, 3, 1, "", "to_dataframe"]], "docarray.array.mixins.io.from_gen": [[38, 1, 1, "", "FromGeneratorMixin"]], "docarray.array.mixins.io.from_gen.FromGeneratorMixin": [[38, 3, 1, "", "from_csv"], [38, 3, 1, "", "from_files"], [38, 3, 1, "", "from_huggingface_datasets"], [38, 3, 1, "", "from_lines"], [38, 3, 1, "", "from_ndarray"], [38, 3, 1, "", "from_ndjson"]], "docarray.array.mixins.io.json": [[39, 1, 1, "", "JsonIOMixin"]], "docarray.array.mixins.io.json.JsonIOMixin": [[39, 3, 1, "", "from_dict"], [39, 3, 1, "", "from_json"], [39, 3, 1, "", "from_list"], [39, 3, 1, "", "load_json"], [39, 3, 1, "", "save_json"], [39, 3, 1, "", "to_dict"], [39, 3, 1, "", "to_json"], [39, 3, 1, "", "to_list"]], "docarray.array.mixins.io.pbar": [[40, 1, 1, "", "QPSColumn"], [40, 5, 1, "", "get_pbar"], [40, 5, 1, "", "get_progressbar"]], "docarray.array.mixins.io.pbar.QPSColumn": [[40, 3, 1, "", "get_table_column"], [40, 2, 1, "", "max_refresh"], [40, 3, 1, "", "render"]], "docarray.array.mixins.io.pushpull": [[41, 1, 1, "", "PushPullMixin"]], "docarray.array.mixins.io.pushpull.PushPullMixin": [[41, 3, 1, "", "cloud_delete"], [41, 3, 1, "", "cloud_list"], [41, 3, 1, "", "cloud_pull"], [41, 3, 1, "", "cloud_push"], [41, 3, 1, "", "pull"], [41, 3, 1, "", "push"]], "docarray.array.mixins.match": [[42, 1, 1, "", "MatchMixin"]], "docarray.array.mixins.match.MatchMixin": [[42, 3, 1, "", "match"]], "docarray.array.mixins.parallel": [[43, 1, 1, "", "ParallelMixin"]], "docarray.array.mixins.parallel.ParallelMixin": [[43, 3, 1, "", "apply"], [43, 3, 1, "", "apply_batch"], [43, 3, 1, "", "map"], [43, 3, 1, "", "map_batch"]], "docarray.array.mixins.plot": [[44, 1, 1, "", "PlotMixin"]], "docarray.array.mixins.plot.PlotMixin": [[44, 3, 1, "", "plot_embeddings"], [44, 3, 1, "", "plot_image_sprites"], [44, 3, 1, "", "save_gif"], [44, 3, 1, "", "summary"]], "docarray.array.mixins.post": [[45, 1, 1, "", "PostMixin"]], "docarray.array.mixins.post.PostMixin": [[45, 3, 1, "", "post"]], "docarray.array.mixins.pydantic": [[46, 1, 1, "", "PydanticMixin"]], "docarray.array.mixins.pydantic.PydanticMixin": [[46, 3, 1, "", "from_pydantic_model"], [46, 3, 1, "", "get_json_schema"], [46, 3, 1, "", "to_pydantic_model"]], "docarray.array.mixins.reduce": [[47, 1, 1, "", "ReduceMixin"]], "docarray.array.mixins.reduce.ReduceMixin": [[47, 3, 1, "", "reduce"], [47, 3, 1, "", "reduce_all"]], "docarray.array.mixins.sample": [[48, 1, 1, "", "SampleMixin"]], "docarray.array.mixins.sample.SampleMixin": [[48, 3, 1, "", "sample"], [48, 3, 1, "", "shuffle"]], "docarray.array.mixins.setitem": [[49, 1, 1, "", "SetItemMixin"]], "docarray.array.mixins.strawberry": [[50, 1, 1, "", "StrawberryMixin"]], "docarray.array.mixins.strawberry.StrawberryMixin": [[50, 3, 1, "", "from_strawberry_type"], [50, 3, 1, "", "to_strawberry_type"]], "docarray.array.mixins.text": [[51, 1, 1, "", "TextToolsMixin"]], "docarray.array.mixins.text.TextToolsMixin": [[51, 3, 1, "", "get_vocabulary"]], "docarray.array.mixins.traverse": [[52, 1, 1, "", "TraverseMixin"]], "docarray.array.mixins.traverse.TraverseMixin": [[52, 3, 1, "", "flatten"], [52, 3, 1, "", "traverse"], [52, 3, 1, "", "traverse_flat"], [52, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.qdrant": [[53, 1, 1, "", "DocumentArrayQdrant"], [53, 1, 1, "", "QdrantConfig"]], "docarray.array.qdrant.DocumentArrayQdrant": [[53, 2, 1, "", "TYPE_MAP"], [53, 3, 1, "", "append"], [53, 3, 1, "", "apply"], [53, 3, 1, "", "apply_batch"], [53, 3, 1, "", "batch"], [53, 3, 1, "", "batch_ids"], [53, 4, 1, "", "blobs"], [53, 3, 1, "", "clear"], [53, 4, 1, "", "client"], [53, 3, 1, "", "cloud_delete"], [53, 3, 1, "", "cloud_list"], [53, 3, 1, "", "cloud_pull"], [53, 3, 1, "", "cloud_push"], [53, 4, 1, "", "collection_name"], [53, 4, 1, "", "collection_name_meta"], [53, 4, 1, "", "config"], [53, 4, 1, "", "contents"], [53, 3, 1, "", "count"], [53, 3, 1, "", "dataloader"], [53, 4, 1, "", "distance"], [53, 3, 1, "", "embed"], [53, 3, 1, "", "embed_and_evaluate"], [53, 4, 1, "", "embeddings"], [53, 3, 1, "", "empty"], [53, 3, 1, "", "evaluate"], [53, 3, 1, "", "extend"], [53, 3, 1, "", "find"], [53, 3, 1, "", "flatten"], [53, 3, 1, "", "from_base64"], [53, 3, 1, "", "from_bytes"], [53, 3, 1, "", "from_csv"], [53, 3, 1, "", "from_dataframe"], [53, 3, 1, "", "from_dict"], [53, 3, 1, "", "from_files"], [53, 3, 1, "", "from_huggingface_datasets"], [53, 3, 1, "", "from_json"], [53, 3, 1, "", "from_lines"], [53, 3, 1, "", "from_list"], [53, 3, 1, "", "from_ndarray"], [53, 3, 1, "", "from_ndjson"], [53, 3, 1, "", "from_protobuf"], [53, 3, 1, "", "from_pydantic_model"], [53, 3, 1, "", "from_strawberry_type"], [53, 3, 1, "", "get_json_schema"], [53, 3, 1, "", "get_vocabulary"], [53, 3, 1, "", "index"], [53, 3, 1, "", "insert"], [53, 3, 1, "", "load"], [53, 3, 1, "", "load_binary"], [53, 3, 1, "", "load_csv"], [53, 3, 1, "", "load_json"], [53, 3, 1, "", "map"], [53, 3, 1, "", "map_batch"], [53, 3, 1, "", "match"], [53, 4, 1, "", "n_dim"], [53, 3, 1, "", "plot_embeddings"], [53, 3, 1, "", "plot_image_sprites"], [53, 3, 1, "", "pop"], [53, 3, 1, "", "post"], [53, 3, 1, "", "pull"], [53, 3, 1, "", "push"], [53, 3, 1, "", "reduce"], [53, 3, 1, "", "reduce_all"], [53, 3, 1, "", "remove"], [53, 3, 1, "", "reverse"], [53, 3, 1, "", "sample"], [53, 3, 1, "", "save"], [53, 3, 1, "", "save_binary"], [53, 3, 1, "", "save_csv"], [53, 3, 1, "", "save_embeddings_csv"], [53, 3, 1, "", "save_gif"], [53, 3, 1, "", "save_json"], [53, 3, 1, "", "scan"], [53, 4, 1, "", "scroll_batch_size"], [53, 4, 1, "", "serialization_config"], [53, 4, 1, "", "serialize_config"], [53, 3, 1, "", "shuffle"], [53, 3, 1, "", "split_by_tag"], [53, 3, 1, "", "summary"], [53, 3, 1, "", "sync"], [53, 4, 1, "", "tensors"], [53, 4, 1, "", "texts"], [53, 3, 1, "", "to_base64"], [53, 3, 1, "", "to_bytes"], [53, 3, 1, "", "to_dataframe"], [53, 3, 1, "", "to_dict"], [53, 3, 1, "", "to_json"], [53, 3, 1, "", "to_list"], [53, 3, 1, "", "to_protobuf"], [53, 3, 1, "", "to_pydantic_model"], [53, 3, 1, "", "to_strawberry_type"], [53, 3, 1, "", "traverse"], [53, 3, 1, "", "traverse_flat"], [53, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.qdrant.QdrantConfig": [[53, 2, 1, "", "api_key"], [53, 2, 1, "", "collection_name"], [53, 2, 1, "", "columns"], [53, 2, 1, "", "distance"], [53, 2, 1, "", "ef_construct"], [53, 2, 1, "", "full_scan_threshold"], [53, 2, 1, "", "grpc_port"], [53, 2, 1, "", "host"], [53, 2, 1, "", "https"], [53, 2, 1, "", "list_like"], [53, 2, 1, "", "m"], [53, 2, 1, "", "n_dim"], [53, 2, 1, "", "port"], [53, 2, 1, "", "prefer_grpc"], [53, 2, 1, "", "scroll_batch_size"], [53, 2, 1, "", "serialize_config"]], "docarray.array.queryset": [[55, 0, 0, "-", "lookup"], [56, 0, 0, "-", "parser"]], "docarray.array.queryset.lookup": [[55, 1, 1, "", "LookupLeaf"], [55, 1, 1, "", "LookupNode"], [55, 1, 1, "", "LookupTreeElem"], [55, 6, 1, "", "LookupyError"], [55, 2, 1, "", "Q"], [55, 5, 1, "", "dunder_partition"], [55, 5, 1, "", "guard_Q"], [55, 5, 1, "", "guard_iter"], [55, 5, 1, "", "guard_list"], [55, 5, 1, "", "guard_str"], [55, 5, 1, "", "guard_type"], [55, 5, 1, "", "iff"], [55, 5, 1, "", "iff_not_none"], [55, 5, 1, "", "lookup"]], "docarray.array.queryset.lookup.LookupLeaf": [[55, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupNode": [[55, 3, 1, "", "add_child"], [55, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupTreeElem": [[55, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupyError": [[55, 2, 1, "", "args"], [55, 3, 1, "", "with_traceback"]], "docarray.array.queryset.parser": [[56, 1, 1, "", "QueryParser"]], "docarray.array.queryset.parser.QueryParser": [[56, 3, 1, "", "evaluate"]], "docarray.array.redis": [[57, 1, 1, "", "DocumentArrayRedis"], [57, 1, 1, "", "RedisConfig"]], "docarray.array.redis.DocumentArrayRedis": [[57, 2, 1, "", "TYPE_MAP"], [57, 3, 1, "", "append"], [57, 3, 1, "", "apply"], [57, 3, 1, "", "apply_batch"], [57, 3, 1, "", "batch"], [57, 3, 1, "", "batch_ids"], [57, 4, 1, "", "blobs"], [57, 3, 1, "", "clear"], [57, 3, 1, "", "cloud_delete"], [57, 3, 1, "", "cloud_list"], [57, 3, 1, "", "cloud_pull"], [57, 3, 1, "", "cloud_push"], [57, 4, 1, "", "contents"], [57, 3, 1, "", "count"], [57, 3, 1, "", "dataloader"], [57, 3, 1, "", "embed"], [57, 3, 1, "", "embed_and_evaluate"], [57, 4, 1, "", "embeddings"], [57, 3, 1, "", "empty"], [57, 3, 1, "", "evaluate"], [57, 3, 1, "", "extend"], [57, 3, 1, "", "find"], [57, 3, 1, "", "flatten"], [57, 3, 1, "", "from_base64"], [57, 3, 1, "", "from_bytes"], [57, 3, 1, "", "from_csv"], [57, 3, 1, "", "from_dataframe"], [57, 3, 1, "", "from_dict"], [57, 3, 1, "", "from_files"], [57, 3, 1, "", "from_huggingface_datasets"], [57, 3, 1, "", "from_json"], [57, 3, 1, "", "from_lines"], [57, 3, 1, "", "from_list"], [57, 3, 1, "", "from_ndarray"], [57, 3, 1, "", "from_ndjson"], [57, 3, 1, "", "from_protobuf"], [57, 3, 1, "", "from_pydantic_model"], [57, 3, 1, "", "from_strawberry_type"], [57, 3, 1, "", "get_json_schema"], [57, 3, 1, "", "get_vocabulary"], [57, 3, 1, "", "index"], [57, 3, 1, "", "insert"], [57, 3, 1, "", "load"], [57, 3, 1, "", "load_binary"], [57, 3, 1, "", "load_csv"], [57, 3, 1, "", "load_json"], [57, 3, 1, "", "map"], [57, 3, 1, "", "map_batch"], [57, 3, 1, "", "match"], [57, 3, 1, "", "plot_embeddings"], [57, 3, 1, "", "plot_image_sprites"], [57, 3, 1, "", "pop"], [57, 3, 1, "", "post"], [57, 3, 1, "", "pull"], [57, 3, 1, "", "push"], [57, 3, 1, "", "reduce"], [57, 3, 1, "", "reduce_all"], [57, 3, 1, "", "remove"], [57, 3, 1, "", "reverse"], [57, 3, 1, "", "sample"], [57, 3, 1, "", "save"], [57, 3, 1, "", "save_binary"], [57, 3, 1, "", "save_csv"], [57, 3, 1, "", "save_embeddings_csv"], [57, 3, 1, "", "save_gif"], [57, 3, 1, "", "save_json"], [57, 3, 1, "", "shuffle"], [57, 3, 1, "", "split_by_tag"], [57, 3, 1, "", "summary"], [57, 3, 1, "", "sync"], [57, 4, 1, "", "tensors"], [57, 4, 1, "", "texts"], [57, 3, 1, "", "to_base64"], [57, 3, 1, "", "to_bytes"], [57, 3, 1, "", "to_dataframe"], [57, 3, 1, "", "to_dict"], [57, 3, 1, "", "to_json"], [57, 3, 1, "", "to_list"], [57, 3, 1, "", "to_protobuf"], [57, 3, 1, "", "to_pydantic_model"], [57, 3, 1, "", "to_strawberry_type"], [57, 3, 1, "", "traverse"], [57, 3, 1, "", "traverse_flat"], [57, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.redis.RedisConfig": [[57, 2, 1, "", "batch_size"], [57, 2, 1, "", "block_size"], [57, 2, 1, "", "columns"], [57, 2, 1, "", "distance"], [57, 2, 1, "", "ef_construction"], [57, 2, 1, "", "ef_runtime"], [57, 2, 1, "", "host"], [57, 2, 1, "", "index_name"], [57, 2, 1, "", "index_text"], [57, 2, 1, "", "initial_cap"], [57, 2, 1, "", "list_like"], [57, 2, 1, "", "m"], [57, 2, 1, "", "method"], [57, 2, 1, "", "n_dim"], [57, 2, 1, "", "port"], [57, 2, 1, "", "redis_config"], [57, 2, 1, "", "tag_indices"], [57, 2, 1, "", "update_schema"]], "docarray.array.sqlite": [[58, 1, 1, "", "DocumentArraySqlite"], [58, 1, 1, "", "SqliteConfig"]], "docarray.array.sqlite.DocumentArraySqlite": [[58, 2, 1, "", "TYPE_MAP"], [58, 3, 1, "", "append"], [58, 3, 1, "", "apply"], [58, 3, 1, "", "apply_batch"], [58, 3, 1, "", "batch"], [58, 3, 1, "", "batch_ids"], [58, 4, 1, "", "blobs"], [58, 3, 1, "", "clear"], [58, 3, 1, "", "cloud_delete"], [58, 3, 1, "", "cloud_list"], [58, 3, 1, "", "cloud_pull"], [58, 3, 1, "", "cloud_push"], [58, 4, 1, "", "contents"], [58, 3, 1, "", "count"], [58, 3, 1, "", "dataloader"], [58, 3, 1, "", "embed"], [58, 3, 1, "", "embed_and_evaluate"], [58, 4, 1, "", "embeddings"], [58, 3, 1, "", "empty"], [58, 3, 1, "", "evaluate"], [58, 3, 1, "", "extend"], [58, 3, 1, "", "find"], [58, 3, 1, "", "flatten"], [58, 3, 1, "", "from_base64"], [58, 3, 1, "", "from_bytes"], [58, 3, 1, "", "from_csv"], [58, 3, 1, "", "from_dataframe"], [58, 3, 1, "", "from_dict"], [58, 3, 1, "", "from_files"], [58, 3, 1, "", "from_huggingface_datasets"], [58, 3, 1, "", "from_json"], [58, 3, 1, "", "from_lines"], [58, 3, 1, "", "from_list"], [58, 3, 1, "", "from_ndarray"], [58, 3, 1, "", "from_ndjson"], [58, 3, 1, "", "from_protobuf"], [58, 3, 1, "", "from_pydantic_model"], [58, 3, 1, "", "from_strawberry_type"], [58, 3, 1, "", "get_json_schema"], [58, 3, 1, "", "get_vocabulary"], [58, 3, 1, "", "index"], [58, 3, 1, "", "insert"], [58, 3, 1, "", "load"], [58, 3, 1, "", "load_binary"], [58, 3, 1, "", "load_csv"], [58, 3, 1, "", "load_json"], [58, 3, 1, "", "map"], [58, 3, 1, "", "map_batch"], [58, 3, 1, "", "match"], [58, 3, 1, "", "plot_embeddings"], [58, 3, 1, "", "plot_image_sprites"], [58, 3, 1, "", "pop"], [58, 3, 1, "", "post"], [58, 3, 1, "", "pull"], [58, 3, 1, "", "push"], [58, 3, 1, "", "reduce"], [58, 3, 1, "", "reduce_all"], [58, 3, 1, "", "remove"], [58, 3, 1, "", "reverse"], [58, 3, 1, "", "sample"], [58, 3, 1, "", "save"], [58, 3, 1, "", "save_binary"], [58, 3, 1, "", "save_csv"], [58, 3, 1, "", "save_embeddings_csv"], [58, 3, 1, "", "save_gif"], [58, 3, 1, "", "save_json"], [58, 2, 1, "", "schema_version"], [58, 3, 1, "", "shuffle"], [58, 3, 1, "", "split_by_tag"], [58, 3, 1, "", "summary"], [58, 3, 1, "", "sync"], [58, 4, 1, "", "tensors"], [58, 4, 1, "", "texts"], [58, 3, 1, "", "to_base64"], [58, 3, 1, "", "to_bytes"], [58, 3, 1, "", "to_dataframe"], [58, 3, 1, "", "to_dict"], [58, 3, 1, "", "to_json"], [58, 3, 1, "", "to_list"], [58, 3, 1, "", "to_protobuf"], [58, 3, 1, "", "to_pydantic_model"], [58, 3, 1, "", "to_strawberry_type"], [58, 3, 1, "", "traverse"], [58, 3, 1, "", "traverse_flat"], [58, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.sqlite.SqliteConfig": [[58, 2, 1, "", "conn_config"], [58, 2, 1, "", "connection"], [58, 2, 1, "", "journal_mode"], [58, 2, 1, "", "list_like"], [58, 2, 1, "", "serialize_config"], [58, 2, 1, "", "synchronous"], [58, 2, 1, "", "table_name"]], "docarray.array.storage": [[60, 0, 0, "-", "annlite"], [66, 0, 0, "-", "base"], [71, 0, 0, "-", "elastic"], [76, 0, 0, "-", "memory"], [81, 0, 0, "-", "qdrant"], [87, 0, 0, "-", "redis"], [92, 0, 0, "-", "registry"], [93, 0, 0, "-", "sqlite"], [98, 0, 0, "-", "weaviate"]], "docarray.array.storage.annlite": [[60, 1, 1, "", "AnnliteConfig"], [60, 1, 1, "", "StorageMixins"], [61, 0, 0, "-", "backend"], [62, 0, 0, "-", "find"], [63, 0, 0, "-", "getsetdel"], [64, 0, 0, "-", "helper"], [65, 0, 0, "-", "seqlike"]], "docarray.array.storage.annlite.AnnliteConfig": [[60, 2, 1, "", "columns"], [60, 2, 1, "", "data_path"], [60, 2, 1, "", "ef_construction"], [60, 2, 1, "", "ef_search"], [60, 2, 1, "", "list_like"], [60, 2, 1, "", "max_connection"], [60, 2, 1, "", "metric"], [60, 2, 1, "", "n_components"], [60, 2, 1, "", "n_dim"], [60, 2, 1, "", "serialize_config"]], "docarray.array.storage.annlite.StorageMixins": [[60, 2, 1, "", "TYPE_MAP"], [60, 3, 1, "", "append"], [60, 3, 1, "", "clear"], [60, 3, 1, "", "count"], [60, 3, 1, "", "extend"], [60, 3, 1, "", "index"], [60, 3, 1, "", "insert"], [60, 3, 1, "", "pop"], [60, 3, 1, "", "remove"], [60, 3, 1, "", "reverse"], [60, 3, 1, "", "sync"]], "docarray.array.storage.annlite.backend": [[61, 1, 1, "", "AnnliteConfig"], [61, 1, 1, "", "BackendMixin"]], "docarray.array.storage.annlite.backend.AnnliteConfig": [[61, 2, 1, "", "columns"], [61, 2, 1, "", "data_path"], [61, 2, 1, "", "ef_construction"], [61, 2, 1, "", "ef_search"], [61, 2, 1, "", "list_like"], [61, 2, 1, "", "max_connection"], [61, 2, 1, "", "metric"], [61, 2, 1, "", "n_components"], [61, 2, 1, "", "n_dim"], [61, 2, 1, "", "serialize_config"]], "docarray.array.storage.annlite.backend.BackendMixin": [[61, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.annlite.find": [[62, 1, 1, "", "FindMixin"]], "docarray.array.storage.annlite.getsetdel": [[63, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.annlite.getsetdel.GetSetDelMixin": [[63, 3, 1, "", "sync"]], "docarray.array.storage.annlite.helper": [[64, 1, 1, "", "OffsetMapping"]], "docarray.array.storage.annlite.helper.OffsetMapping": [[64, 3, 1, "", "clear"], [64, 3, 1, "", "close"], [64, 3, 1, "", "commit"], [64, 3, 1, "", "create_table"], [64, 3, 1, "", "del_at_offset"], [64, 3, 1, "", "del_at_offsets"], [64, 3, 1, "", "drop"], [64, 3, 1, "", "drop_table"], [64, 3, 1, "", "dump"], [64, 3, 1, "", "execute"], [64, 3, 1, "", "execute_many"], [64, 3, 1, "", "extend_doc_ids"], [64, 3, 1, "", "get_all_ids"], [64, 3, 1, "", "get_id_by_offset"], [64, 3, 1, "", "get_ids_by_offsets"], [64, 3, 1, "", "get_offset_by_id"], [64, 3, 1, "", "get_offsets_by_ids"], [64, 3, 1, "", "insert_at_offset"], [64, 3, 1, "", "load"], [64, 4, 1, "", "name"], [64, 4, 1, "", "schema"], [64, 3, 1, "", "set_at_offset"], [64, 3, 1, "", "shift_offset"], [64, 4, 1, "", "size"]], "docarray.array.storage.annlite.seqlike": [[65, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.annlite.seqlike.SequenceLikeMixin": [[65, 3, 1, "", "append"], [65, 3, 1, "", "clear"], [65, 3, 1, "", "count"], [65, 3, 1, "", "extend"], [65, 3, 1, "", "index"], [65, 3, 1, "", "insert"], [65, 3, 1, "", "pop"], [65, 3, 1, "", "remove"], [65, 3, 1, "", "reverse"]], "docarray.array.storage.base": [[67, 0, 0, "-", "backend"], [68, 0, 0, "-", "getsetdel"], [69, 0, 0, "-", "helper"], [70, 0, 0, "-", "seqlike"]], "docarray.array.storage.base.backend": [[67, 1, 1, "", "BaseBackendMixin"], [67, 1, 1, "", "TypeMap"]], "docarray.array.storage.base.backend.BaseBackendMixin": [[67, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.base.backend.TypeMap": [[67, 4, 1, "", "converter"], [67, 3, 1, "", "count"], [67, 3, 1, "", "index"], [67, 4, 1, "", "type"]], "docarray.array.storage.base.getsetdel": [[68, 1, 1, "", "BaseGetSetDelMixin"]], "docarray.array.storage.base.getsetdel.BaseGetSetDelMixin": [[68, 3, 1, "", "sync"]], "docarray.array.storage.base.helper": [[69, 1, 1, "", "Offset2ID"]], "docarray.array.storage.base.helper.Offset2ID": [[69, 3, 1, "", "append"], [69, 3, 1, "", "clear"], [69, 3, 1, "", "delete_by_id"], [69, 3, 1, "", "delete_by_ids"], [69, 3, 1, "", "delete_by_offset"], [69, 3, 1, "", "extend"], [69, 3, 1, "", "get_id"], [69, 3, 1, "", "index"], [69, 3, 1, "", "insert"], [69, 3, 1, "", "load"], [69, 3, 1, "", "save"], [69, 3, 1, "", "update"], [69, 3, 1, "", "update_ids"]], "docarray.array.storage.base.seqlike": [[70, 1, 1, "", "BaseSequenceLikeMixin"]], "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin": [[70, 3, 1, "", "append"], [70, 3, 1, "", "clear"], [70, 3, 1, "", "count"], [70, 3, 1, "", "extend"], [70, 3, 1, "", "index"], [70, 3, 1, "", "insert"], [70, 3, 1, "", "pop"], [70, 3, 1, "", "remove"], [70, 3, 1, "", "reverse"]], "docarray.array.storage.elastic": [[71, 1, 1, "", "ElasticConfig"], [71, 1, 1, "", "StorageMixins"], [72, 0, 0, "-", "backend"], [73, 0, 0, "-", "find"], [74, 0, 0, "-", "getsetdel"], [75, 0, 0, "-", "seqlike"]], "docarray.array.storage.elastic.ElasticConfig": [[71, 2, 1, "", "batch_size"], [71, 2, 1, "", "columns"], [71, 2, 1, "", "distance"], [71, 2, 1, "", "ef_construction"], [71, 2, 1, "", "es_config"], [71, 2, 1, "", "hosts"], [71, 2, 1, "", "index_name"], [71, 2, 1, "", "index_text"], [71, 2, 1, "", "list_like"], [71, 2, 1, "", "m"], [71, 2, 1, "", "n_dim"], [71, 2, 1, "", "tag_indices"]], "docarray.array.storage.elastic.StorageMixins": [[71, 2, 1, "", "MAX_ES_RETURNED_DOCS"], [71, 2, 1, "", "TYPE_MAP"], [71, 3, 1, "", "append"], [71, 3, 1, "", "clear"], [71, 3, 1, "", "count"], [71, 3, 1, "", "extend"], [71, 3, 1, "", "find"], [71, 3, 1, "", "index"], [71, 3, 1, "", "insert"], [71, 3, 1, "", "pop"], [71, 3, 1, "", "remove"], [71, 3, 1, "", "reverse"], [71, 3, 1, "", "sync"]], "docarray.array.storage.elastic.backend": [[72, 1, 1, "", "BackendMixin"], [72, 1, 1, "", "ElasticConfig"]], "docarray.array.storage.elastic.backend.BackendMixin": [[72, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.elastic.backend.ElasticConfig": [[72, 2, 1, "", "batch_size"], [72, 2, 1, "", "columns"], [72, 2, 1, "", "distance"], [72, 2, 1, "", "ef_construction"], [72, 2, 1, "", "es_config"], [72, 2, 1, "", "hosts"], [72, 2, 1, "", "index_name"], [72, 2, 1, "", "index_text"], [72, 2, 1, "", "list_like"], [72, 2, 1, "", "m"], [72, 2, 1, "", "n_dim"], [72, 2, 1, "", "tag_indices"]], "docarray.array.storage.elastic.find": [[73, 1, 1, "", "FindMixin"]], "docarray.array.storage.elastic.find.FindMixin": [[73, 3, 1, "", "find"]], "docarray.array.storage.elastic.getsetdel": [[74, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.elastic.getsetdel.GetSetDelMixin": [[74, 2, 1, "", "MAX_ES_RETURNED_DOCS"], [74, 3, 1, "", "sync"]], "docarray.array.storage.elastic.seqlike": [[75, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.elastic.seqlike.SequenceLikeMixin": [[75, 3, 1, "", "append"], [75, 3, 1, "", "clear"], [75, 3, 1, "", "count"], [75, 3, 1, "", "extend"], [75, 3, 1, "", "index"], [75, 3, 1, "", "insert"], [75, 3, 1, "", "pop"], [75, 3, 1, "", "remove"], [75, 3, 1, "", "reverse"]], "docarray.array.storage.memory": [[76, 1, 1, "", "StorageMixins"], [77, 0, 0, "-", "backend"], [78, 0, 0, "-", "find"], [79, 0, 0, "-", "getsetdel"], [80, 0, 0, "-", "seqlike"]], "docarray.array.storage.memory.StorageMixins": [[76, 2, 1, "", "TYPE_MAP"], [76, 3, 1, "", "append"], [76, 3, 1, "", "clear"], [76, 3, 1, "", "count"], [76, 3, 1, "", "extend"], [76, 3, 1, "", "index"], [76, 3, 1, "", "insert"], [76, 3, 1, "", "pop"], [76, 3, 1, "", "remove"], [76, 3, 1, "", "reverse"], [76, 3, 1, "", "sync"]], "docarray.array.storage.memory.backend": [[77, 1, 1, "", "BackendMixin"], [77, 5, 1, "", "needs_id2offset_rebuild"]], "docarray.array.storage.memory.backend.BackendMixin": [[77, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.memory.find": [[78, 1, 1, "", "FindMixin"]], "docarray.array.storage.memory.getsetdel": [[79, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.memory.getsetdel.GetSetDelMixin": [[79, 3, 1, "", "sync"]], "docarray.array.storage.memory.seqlike": [[80, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.memory.seqlike.SequenceLikeMixin": [[80, 3, 1, "", "append"], [80, 3, 1, "", "clear"], [80, 3, 1, "", "count"], [80, 3, 1, "", "extend"], [80, 3, 1, "", "index"], [80, 3, 1, "", "insert"], [80, 3, 1, "", "pop"], [80, 3, 1, "", "remove"], [80, 3, 1, "", "reverse"]], "docarray.array.storage.qdrant": [[81, 1, 1, "", "QdrantConfig"], [81, 1, 1, "", "StorageMixins"], [82, 0, 0, "-", "backend"], [83, 0, 0, "-", "find"], [84, 0, 0, "-", "getsetdel"], [85, 0, 0, "-", "helper"], [86, 0, 0, "-", "seqlike"]], "docarray.array.storage.qdrant.QdrantConfig": [[81, 2, 1, "", "api_key"], [81, 2, 1, "", "collection_name"], [81, 2, 1, "", "columns"], [81, 2, 1, "", "distance"], [81, 2, 1, "", "ef_construct"], [81, 2, 1, "", "full_scan_threshold"], [81, 2, 1, "", "grpc_port"], [81, 2, 1, "", "host"], [81, 2, 1, "", "https"], [81, 2, 1, "", "list_like"], [81, 2, 1, "", "m"], [81, 2, 1, "", "n_dim"], [81, 2, 1, "", "port"], [81, 2, 1, "", "prefer_grpc"], [81, 2, 1, "", "scroll_batch_size"], [81, 2, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.StorageMixins": [[81, 2, 1, "", "TYPE_MAP"], [81, 3, 1, "", "append"], [81, 3, 1, "", "clear"], [81, 4, 1, "", "client"], [81, 4, 1, "", "collection_name"], [81, 4, 1, "", "collection_name_meta"], [81, 4, 1, "", "config"], [81, 3, 1, "", "count"], [81, 4, 1, "", "distance"], [81, 3, 1, "", "extend"], [81, 3, 1, "", "index"], [81, 3, 1, "", "insert"], [81, 4, 1, "", "n_dim"], [81, 3, 1, "", "pop"], [81, 3, 1, "", "remove"], [81, 3, 1, "", "reverse"], [81, 3, 1, "", "scan"], [81, 4, 1, "", "scroll_batch_size"], [81, 4, 1, "", "serialization_config"], [81, 4, 1, "", "serialize_config"], [81, 3, 1, "", "sync"]], "docarray.array.storage.qdrant.backend": [[82, 1, 1, "", "BackendMixin"], [82, 1, 1, "", "QdrantConfig"]], "docarray.array.storage.qdrant.backend.BackendMixin": [[82, 2, 1, "", "TYPE_MAP"], [82, 4, 1, "", "client"], [82, 4, 1, "", "collection_name"], [82, 4, 1, "", "distance"]], "docarray.array.storage.qdrant.backend.QdrantConfig": [[82, 2, 1, "", "api_key"], [82, 2, 1, "", "collection_name"], [82, 2, 1, "", "columns"], [82, 2, 1, "", "distance"], [82, 2, 1, "", "ef_construct"], [82, 2, 1, "", "full_scan_threshold"], [82, 2, 1, "", "grpc_port"], [82, 2, 1, "", "host"], [82, 2, 1, "", "https"], [82, 2, 1, "", "list_like"], [82, 2, 1, "", "m"], [82, 2, 1, "", "n_dim"], [82, 2, 1, "", "port"], [82, 2, 1, "", "prefer_grpc"], [82, 2, 1, "", "scroll_batch_size"], [82, 2, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.find": [[83, 1, 1, "", "FindMixin"]], "docarray.array.storage.qdrant.find.FindMixin": [[83, 4, 1, "", "client"], [83, 4, 1, "", "collection_name"], [83, 4, 1, "", "distance"], [83, 4, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.getsetdel": [[84, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin": [[84, 4, 1, "", "client"], [84, 4, 1, "", "collection_name"], [84, 4, 1, "", "n_dim"], [84, 3, 1, "", "scan"], [84, 4, 1, "", "scroll_batch_size"], [84, 4, 1, "", "serialization_config"], [84, 3, 1, "", "sync"]], "docarray.array.storage.qdrant.seqlike": [[86, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin": [[86, 3, 1, "", "append"], [86, 3, 1, "", "clear"], [86, 4, 1, "", "client"], [86, 4, 1, "", "collection_name"], [86, 4, 1, "", "config"], [86, 3, 1, "", "count"], [86, 3, 1, "", "extend"], [86, 3, 1, "", "index"], [86, 3, 1, "", "insert"], [86, 3, 1, "", "pop"], [86, 3, 1, "", "remove"], [86, 3, 1, "", "reverse"]], "docarray.array.storage.redis": [[87, 1, 1, "", "RedisConfig"], [87, 1, 1, "", "StorageMixins"], [88, 0, 0, "-", "backend"], [89, 0, 0, "-", "find"], [90, 0, 0, "-", "getsetdel"], [91, 0, 0, "-", "seqlike"]], "docarray.array.storage.redis.RedisConfig": [[87, 2, 1, "", "batch_size"], [87, 2, 1, "", "block_size"], [87, 2, 1, "", "columns"], [87, 2, 1, "", "distance"], [87, 2, 1, "", "ef_construction"], [87, 2, 1, "", "ef_runtime"], [87, 2, 1, "", "host"], [87, 2, 1, "", "index_name"], [87, 2, 1, "", "index_text"], [87, 2, 1, "", "initial_cap"], [87, 2, 1, "", "list_like"], [87, 2, 1, "", "m"], [87, 2, 1, "", "method"], [87, 2, 1, "", "n_dim"], [87, 2, 1, "", "port"], [87, 2, 1, "", "redis_config"], [87, 2, 1, "", "tag_indices"], [87, 2, 1, "", "update_schema"]], "docarray.array.storage.redis.StorageMixins": [[87, 2, 1, "", "TYPE_MAP"], [87, 3, 1, "", "append"], [87, 3, 1, "", "clear"], [87, 3, 1, "", "count"], [87, 3, 1, "", "extend"], [87, 3, 1, "", "find"], [87, 3, 1, "", "index"], [87, 3, 1, "", "insert"], [87, 3, 1, "", "pop"], [87, 3, 1, "", "remove"], [87, 3, 1, "", "reverse"], [87, 3, 1, "", "sync"]], "docarray.array.storage.redis.backend": [[88, 1, 1, "", "BackendMixin"], [88, 1, 1, "", "RedisConfig"]], "docarray.array.storage.redis.backend.BackendMixin": [[88, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.redis.backend.RedisConfig": [[88, 2, 1, "", "batch_size"], [88, 2, 1, "", "block_size"], [88, 2, 1, "", "columns"], [88, 2, 1, "", "distance"], [88, 2, 1, "", "ef_construction"], [88, 2, 1, "", "ef_runtime"], [88, 2, 1, "", "host"], [88, 2, 1, "", "index_name"], [88, 2, 1, "", "index_text"], [88, 2, 1, "", "initial_cap"], [88, 2, 1, "", "list_like"], [88, 2, 1, "", "m"], [88, 2, 1, "", "method"], [88, 2, 1, "", "n_dim"], [88, 2, 1, "", "port"], [88, 2, 1, "", "redis_config"], [88, 2, 1, "", "tag_indices"], [88, 2, 1, "", "update_schema"]], "docarray.array.storage.redis.find": [[89, 1, 1, "", "FindMixin"]], "docarray.array.storage.redis.find.FindMixin": [[89, 3, 1, "", "find"]], "docarray.array.storage.redis.getsetdel": [[90, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.redis.getsetdel.GetSetDelMixin": [[90, 3, 1, "", "sync"]], "docarray.array.storage.redis.seqlike": [[91, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.redis.seqlike.SequenceLikeMixin": [[91, 3, 1, "", "append"], [91, 3, 1, "", "clear"], [91, 3, 1, "", "count"], [91, 3, 1, "", "extend"], [91, 3, 1, "", "index"], [91, 3, 1, "", "insert"], [91, 3, 1, "", "pop"], [91, 3, 1, "", "remove"], [91, 3, 1, "", "reverse"]], "docarray.array.storage.sqlite": [[93, 1, 1, "", "SqliteConfig"], [93, 1, 1, "", "StorageMixins"], [94, 0, 0, "-", "backend"], [95, 0, 0, "-", "getsetdel"], [96, 0, 0, "-", "helper"], [97, 0, 0, "-", "seqlike"]], "docarray.array.storage.sqlite.SqliteConfig": [[93, 2, 1, "", "conn_config"], [93, 2, 1, "", "connection"], [93, 2, 1, "", "journal_mode"], [93, 2, 1, "", "list_like"], [93, 2, 1, "", "serialize_config"], [93, 2, 1, "", "synchronous"], [93, 2, 1, "", "table_name"]], "docarray.array.storage.sqlite.StorageMixins": [[93, 2, 1, "", "TYPE_MAP"], [93, 3, 1, "", "append"], [93, 3, 1, "", "clear"], [93, 3, 1, "", "count"], [93, 3, 1, "", "extend"], [93, 3, 1, "", "index"], [93, 3, 1, "", "insert"], [93, 3, 1, "", "pop"], [93, 3, 1, "", "remove"], [93, 3, 1, "", "reverse"], [93, 2, 1, "", "schema_version"], [93, 3, 1, "", "sync"]], "docarray.array.storage.sqlite.backend": [[94, 1, 1, "", "BackendMixin"], [94, 1, 1, "", "SqliteConfig"]], "docarray.array.storage.sqlite.backend.BackendMixin": [[94, 2, 1, "", "TYPE_MAP"], [94, 2, 1, "", "schema_version"]], "docarray.array.storage.sqlite.backend.SqliteConfig": [[94, 2, 1, "", "conn_config"], [94, 2, 1, "", "connection"], [94, 2, 1, "", "journal_mode"], [94, 2, 1, "", "list_like"], [94, 2, 1, "", "serialize_config"], [94, 2, 1, "", "synchronous"], [94, 2, 1, "", "table_name"]], "docarray.array.storage.sqlite.getsetdel": [[95, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.sqlite.getsetdel.GetSetDelMixin": [[95, 3, 1, "", "sync"]], "docarray.array.storage.sqlite.helper": [[96, 5, 1, "", "initialize_table"]], "docarray.array.storage.sqlite.seqlike": [[97, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin": [[97, 3, 1, "", "append"], [97, 3, 1, "", "clear"], [97, 3, 1, "", "count"], [97, 3, 1, "", "extend"], [97, 3, 1, "", "index"], [97, 3, 1, "", "insert"], [97, 3, 1, "", "pop"], [97, 3, 1, "", "remove"], [97, 3, 1, "", "reverse"]], "docarray.array.storage.weaviate": [[98, 1, 1, "", "StorageMixins"], [98, 1, 1, "", "WeaviateConfig"], [99, 0, 0, "-", "backend"], [100, 0, 0, "-", "find"], [101, 0, 0, "-", "getsetdel"], [102, 0, 0, "-", "seqlike"]], "docarray.array.storage.weaviate.StorageMixins": [[98, 2, 1, "", "TYPE_MAP"], [98, 3, 1, "", "append"], [98, 3, 1, "", "clear"], [98, 3, 1, "", "count"], [98, 3, 1, "", "extend"], [98, 3, 1, "", "index"], [98, 3, 1, "", "insert"], [98, 4, 1, "", "name"], [98, 3, 1, "", "pop"], [98, 3, 1, "", "remove"], [98, 3, 1, "", "reverse"], [98, 3, 1, "", "sync"]], "docarray.array.storage.weaviate.WeaviateConfig": [[98, 2, 1, "", "batch_size"], [98, 2, 1, "", "cleanup_interval_seconds"], [98, 2, 1, "", "columns"], [98, 2, 1, "", "distance"], [98, 2, 1, "", "dynamic_batching"], [98, 2, 1, "", "dynamic_ef_factor"], [98, 2, 1, "", "dynamic_ef_max"], [98, 2, 1, "", "dynamic_ef_min"], [98, 2, 1, "", "ef"], [98, 2, 1, "", "ef_construction"], [98, 2, 1, "", "flat_search_cutoff"], [98, 2, 1, "", "host"], [98, 2, 1, "", "list_like"], [98, 2, 1, "", "max_connections"], [98, 2, 1, "", "n_dim"], [98, 2, 1, "", "name"], [98, 2, 1, "", "port"], [98, 2, 1, "", "protocol"], [98, 2, 1, "", "serialize_config"], [98, 2, 1, "", "skip"], [98, 2, 1, "", "timeout_config"], [98, 2, 1, "", "vector_cache_max_objects"]], "docarray.array.storage.weaviate.backend": [[99, 1, 1, "", "BackendMixin"], [99, 1, 1, "", "WeaviateConfig"]], "docarray.array.storage.weaviate.backend.BackendMixin": [[99, 2, 1, "", "TYPE_MAP"], [99, 4, 1, "", "name"]], "docarray.array.storage.weaviate.backend.WeaviateConfig": [[99, 2, 1, "", "batch_size"], [99, 2, 1, "", "cleanup_interval_seconds"], [99, 2, 1, "", "columns"], [99, 2, 1, "", "distance"], [99, 2, 1, "", "dynamic_batching"], [99, 2, 1, "", "dynamic_ef_factor"], [99, 2, 1, "", "dynamic_ef_max"], [99, 2, 1, "", "dynamic_ef_min"], [99, 2, 1, "", "ef"], [99, 2, 1, "", "ef_construction"], [99, 2, 1, "", "flat_search_cutoff"], [99, 2, 1, "", "host"], [99, 2, 1, "", "list_like"], [99, 2, 1, "", "max_connections"], [99, 2, 1, "", "n_dim"], [99, 2, 1, "", "name"], [99, 2, 1, "", "port"], [99, 2, 1, "", "protocol"], [99, 2, 1, "", "serialize_config"], [99, 2, 1, "", "skip"], [99, 2, 1, "", "timeout_config"], [99, 2, 1, "", "vector_cache_max_objects"]], "docarray.array.storage.weaviate.find": [[100, 1, 1, "", "FindMixin"]], "docarray.array.storage.weaviate.getsetdel": [[101, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.weaviate.getsetdel.GetSetDelMixin": [[101, 3, 1, "", "sync"]], "docarray.array.storage.weaviate.seqlike": [[102, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin": [[102, 3, 1, "", "append"], [102, 3, 1, "", "clear"], [102, 3, 1, "", "count"], [102, 3, 1, "", "extend"], [102, 3, 1, "", "index"], [102, 3, 1, "", "insert"], [102, 3, 1, "", "pop"], [102, 3, 1, "", "remove"], [102, 3, 1, "", "reverse"]], "docarray.array.weaviate": [[103, 1, 1, "", "DocumentArrayWeaviate"], [103, 1, 1, "", "WeaviateConfig"]], "docarray.array.weaviate.DocumentArrayWeaviate": [[103, 2, 1, "", "TYPE_MAP"], [103, 3, 1, "", "append"], [103, 3, 1, "", "apply"], [103, 3, 1, "", "apply_batch"], [103, 3, 1, "", "batch"], [103, 3, 1, "", "batch_ids"], [103, 4, 1, "", "blobs"], [103, 3, 1, "", "clear"], [103, 3, 1, "", "cloud_delete"], [103, 3, 1, "", "cloud_list"], [103, 3, 1, "", "cloud_pull"], [103, 3, 1, "", "cloud_push"], [103, 4, 1, "", "contents"], [103, 3, 1, "", "count"], [103, 3, 1, "", "dataloader"], [103, 3, 1, "", "embed"], [103, 3, 1, "", "embed_and_evaluate"], [103, 4, 1, "", "embeddings"], [103, 3, 1, "", "empty"], [103, 3, 1, "", "evaluate"], [103, 3, 1, "", "extend"], [103, 3, 1, "", "find"], [103, 3, 1, "", "flatten"], [103, 3, 1, "", "from_base64"], [103, 3, 1, "", "from_bytes"], [103, 3, 1, "", "from_csv"], [103, 3, 1, "", "from_dataframe"], [103, 3, 1, "", "from_dict"], [103, 3, 1, "", "from_files"], [103, 3, 1, "", "from_huggingface_datasets"], [103, 3, 1, "", "from_json"], [103, 3, 1, "", "from_lines"], [103, 3, 1, "", "from_list"], [103, 3, 1, "", "from_ndarray"], [103, 3, 1, "", "from_ndjson"], [103, 3, 1, "", "from_protobuf"], [103, 3, 1, "", "from_pydantic_model"], [103, 3, 1, "", "from_strawberry_type"], [103, 3, 1, "", "get_json_schema"], [103, 3, 1, "", "get_vocabulary"], [103, 3, 1, "", "index"], [103, 3, 1, "", "insert"], [103, 3, 1, "", "load"], [103, 3, 1, "", "load_binary"], [103, 3, 1, "", "load_csv"], [103, 3, 1, "", "load_json"], [103, 3, 1, "", "map"], [103, 3, 1, "", "map_batch"], [103, 3, 1, "", "match"], [103, 4, 1, "", "name"], [103, 3, 1, "", "plot_embeddings"], [103, 3, 1, "", "plot_image_sprites"], [103, 3, 1, "", "pop"], [103, 3, 1, "", "post"], [103, 3, 1, "", "pull"], [103, 3, 1, "", "push"], [103, 3, 1, "", "reduce"], [103, 3, 1, "", "reduce_all"], [103, 3, 1, "", "remove"], [103, 3, 1, "", "reverse"], [103, 3, 1, "", "sample"], [103, 3, 1, "", "save"], [103, 3, 1, "", "save_binary"], [103, 3, 1, "", "save_csv"], [103, 3, 1, "", "save_embeddings_csv"], [103, 3, 1, "", "save_gif"], [103, 3, 1, "", "save_json"], [103, 3, 1, "", "shuffle"], [103, 3, 1, "", "split_by_tag"], [103, 3, 1, "", "summary"], [103, 3, 1, "", "sync"], [103, 4, 1, "", "tensors"], [103, 4, 1, "", "texts"], [103, 3, 1, "", "to_base64"], [103, 3, 1, "", "to_bytes"], [103, 3, 1, "", "to_dataframe"], [103, 3, 1, "", "to_dict"], [103, 3, 1, "", "to_json"], [103, 3, 1, "", "to_list"], [103, 3, 1, "", "to_protobuf"], [103, 3, 1, "", "to_pydantic_model"], [103, 3, 1, "", "to_strawberry_type"], [103, 3, 1, "", "traverse"], [103, 3, 1, "", "traverse_flat"], [103, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.weaviate.WeaviateConfig": [[103, 2, 1, "", "batch_size"], [103, 2, 1, "", "cleanup_interval_seconds"], [103, 2, 1, "", "columns"], [103, 2, 1, "", "distance"], [103, 2, 1, "", "dynamic_batching"], [103, 2, 1, "", "dynamic_ef_factor"], [103, 2, 1, "", "dynamic_ef_max"], [103, 2, 1, "", "dynamic_ef_min"], [103, 2, 1, "", "ef"], [103, 2, 1, "", "ef_construction"], [103, 2, 1, "", "flat_search_cutoff"], [103, 2, 1, "", "host"], [103, 2, 1, "", "list_like"], [103, 2, 1, "", "max_connections"], [103, 2, 1, "", "n_dim"], [103, 2, 1, "", "name"], [103, 2, 1, "", "port"], [103, 2, 1, "", "protocol"], [103, 2, 1, "", "serialize_config"], [103, 2, 1, "", "skip"], [103, 2, 1, "", "timeout_config"], [103, 2, 1, "", "vector_cache_max_objects"]], "docarray.base": [[104, 1, 1, "", "BaseDCType"]], "docarray.base.BaseDCType": [[104, 3, 1, "", "clear"], [104, 3, 1, "", "copy_from"], [104, 4, 1, "", "nbytes"], [104, 4, 1, "", "non_empty_fields"], [104, 3, 1, "", "pop"]], "docarray.dataclasses": [[106, 0, 0, "-", "enums"], [107, 0, 0, "-", "getter"], [108, 0, 0, "-", "setter"], [109, 0, 0, "-", "types"]], "docarray.dataclasses.enums": [[106, 1, 1, "", "AttributeType"], [106, 1, 1, "", "DocumentMetadata"], [106, 1, 1, "", "ImageType"]], "docarray.dataclasses.enums.AttributeType": [[106, 2, 1, "", "DOCUMENT"], [106, 2, 1, "", "ITERABLE_DOCUMENT"], [106, 2, 1, "", "ITERABLE_NESTED"], [106, 2, 1, "", "ITERABLE_PRIMITIVE"], [106, 2, 1, "", "NESTED"], [106, 2, 1, "", "PRIMITIVE"]], "docarray.dataclasses.enums.DocumentMetadata": [[106, 2, 1, "", "AUDIO_TYPE"], [106, 2, 1, "", "BLOB_TYPE"], [106, 2, 1, "", "IMAGE_TYPE"], [106, 2, 1, "", "IMAGE_URI"], [106, 2, 1, "", "JSON_TYPE"], [106, 2, 1, "", "MESH_TYPE"], [106, 2, 1, "", "MULTI_MODAL_SCHEMA"], [106, 2, 1, "", "VIDEO_TYPE"]], "docarray.dataclasses.enums.ImageType": [[106, 2, 1, "", "NDARRAY"], [106, 2, 1, "", "PIL"], [106, 2, 1, "", "URI"]], "docarray.dataclasses.getter": [[107, 5, 1, "", "audio_getter"], [107, 5, 1, "", "blob_getter"], [107, 5, 1, "", "image_getter"], [107, 5, 1, "", "json_getter"], [107, 5, 1, "", "mesh_getter"], [107, 5, 1, "", "tabular_getter"], [107, 5, 1, "", "text_getter"], [107, 5, 1, "", "uri_getter"], [107, 5, 1, "", "video_getter"]], "docarray.dataclasses.setter": [[108, 5, 1, "", "audio_setter"], [108, 5, 1, "", "blob_setter"], [108, 5, 1, "", "image_setter"], [108, 5, 1, "", "json_setter"], [108, 5, 1, "", "mesh_setter"], [108, 5, 1, "", "tabular_setter"], [108, 5, 1, "", "text_setter"], [108, 5, 1, "", "uri_setter"], [108, 5, 1, "", "video_setter"]], "docarray.dataclasses.types": [[109, 5, 1, "", "dataclass"], [109, 5, 1, "", "field"], [109, 5, 1, "", "is_multimodal"]], "docarray.document": [[110, 1, 1, "", "Document"], [111, 0, 0, "-", "data"], [112, 0, 0, "-", "generators"], [113, 0, 0, "-", "mixins"], [135, 0, 0, "-", "pydantic_model"], [136, 0, 0, "-", "strawberry_type"]], "docarray.document.Document": [[110, 4, 1, "", "adjacency"], [110, 4, 1, "", "blob"], [110, 4, 1, "", "chunks"], [110, 3, 1, "", "clear"], [110, 4, 1, "", "content"], [110, 4, 1, "", "content_hash"], [110, 4, 1, "", "content_type"], [110, 3, 1, "", "convert_blob_to_datauri"], [110, 3, 1, "", "convert_blob_to_image_tensor"], [110, 3, 1, "", "convert_blob_to_tensor"], [110, 3, 1, "", "convert_content_to_datauri"], [110, 3, 1, "", "convert_image_tensor_to_blob"], [110, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [110, 3, 1, "", "convert_image_tensor_to_uri"], [110, 3, 1, "", "convert_tensor_to_blob"], [110, 3, 1, "", "convert_tensor_to_text"], [110, 3, 1, "", "convert_text_to_datauri"], [110, 3, 1, "", "convert_text_to_tensor"], [110, 3, 1, "", "convert_uri_to_datauri"], [110, 3, 1, "", "copy_from"], [110, 3, 1, "", "display"], [110, 3, 1, "", "display_3d"], [110, 3, 1, "", "display_tensor"], [110, 3, 1, "", "display_uri"], [110, 3, 1, "", "embed"], [110, 3, 1, "", "embed_feature_hashing"], [110, 4, 1, "", "embedding"], [110, 4, 1, "", "evaluations"], [110, 3, 1, "", "from_base64"], [110, 3, 1, "", "from_bytes"], [110, 3, 1, "", "from_dict"], [110, 3, 1, "", "from_json"], [110, 3, 1, "", "from_protobuf"], [110, 3, 1, "", "from_pydantic_model"], [110, 3, 1, "", "from_strawberry_type"], [110, 3, 1, "", "generator_from_webcam"], [110, 3, 1, "", "get_json_schema"], [110, 3, 1, "", "get_multi_modal_attribute"], [110, 3, 1, "", "get_vocabulary"], [110, 4, 1, "", "granularity"], [110, 4, 1, "", "id"], [110, 4, 1, "", "is_multimodal"], [110, 3, 1, "", "load_pil_image_to_datauri"], [110, 3, 1, "", "load_uri_to_audio_tensor"], [110, 3, 1, "", "load_uri_to_blob"], [110, 3, 1, "", "load_uri_to_image_tensor"], [110, 3, 1, "", "load_uri_to_point_cloud_tensor"], [110, 3, 1, "", "load_uri_to_text"], [110, 3, 1, "", "load_uri_to_vertices_and_faces"], [110, 3, 1, "", "load_uri_to_video_tensor"], [110, 3, 1, "", "load_vertices_and_faces_to_point_cloud"], [110, 4, 1, "", "location"], [110, 3, 1, "", "match"], [110, 4, 1, "", "matches"], [110, 4, 1, "", "mime_type"], [110, 4, 1, "", "modality"], [110, 4, 1, "", "nbytes"], [110, 4, 1, "", "non_empty_fields"], [110, 4, 1, "", "offset"], [110, 4, 1, "", "parent_id"], [110, 3, 1, "", "plot_matches_sprites"], [110, 3, 1, "", "pop"], [110, 3, 1, "", "post"], [110, 3, 1, "", "save_audio_tensor_to_file"], [110, 3, 1, "", "save_blob_to_file"], [110, 3, 1, "", "save_image_tensor_to_file"], [110, 3, 1, "", "save_uri_to_file"], [110, 3, 1, "", "save_video_tensor_to_file"], [110, 4, 1, "", "scores"], [110, 3, 1, "", "set_image_tensor_channel_axis"], [110, 3, 1, "", "set_image_tensor_inv_normalization"], [110, 3, 1, "", "set_image_tensor_normalization"], [110, 3, 1, "", "set_image_tensor_resample"], [110, 3, 1, "", "set_image_tensor_shape"], [110, 3, 1, "", "set_multi_modal_attribute"], [110, 3, 1, "", "summary"], [110, 4, 1, "", "tags"], [110, 4, 1, "", "tensor"], [110, 4, 1, "", "text"], [110, 3, 1, "", "to_base64"], [110, 3, 1, "", "to_bytes"], [110, 3, 1, "", "to_dict"], [110, 3, 1, "", "to_json"], [110, 3, 1, "", "to_protobuf"], [110, 3, 1, "", "to_pydantic_model"], [110, 3, 1, "", "to_strawberry_type"], [110, 4, 1, "", "uri"], [110, 4, 1, "", "weight"]], "docarray.document.data": [[111, 1, 1, "", "DocumentData"]], "docarray.document.data.DocumentData": [[111, 2, 1, "", "adjacency"], [111, 2, 1, "", "blob"], [111, 2, 1, "", "chunks"], [111, 2, 1, "", "content"], [111, 2, 1, "", "embedding"], [111, 2, 1, "", "evaluations"], [111, 2, 1, "", "granularity"], [111, 2, 1, "", "id"], [111, 2, 1, "", "location"], [111, 2, 1, "", "matches"], [111, 2, 1, "", "mime_type"], [111, 2, 1, "", "modality"], [111, 2, 1, "", "offset"], [111, 2, 1, "", "parent_id"], [111, 2, 1, "", "scores"], [111, 2, 1, "", "tags"], [111, 2, 1, "", "tensor"], [111, 2, 1, "", "text"], [111, 2, 1, "", "uri"], [111, 2, 1, "", "weight"]], "docarray.document.generators": [[112, 5, 1, "", "from_csv"], [112, 5, 1, "", "from_files"], [112, 5, 1, "", "from_huggingface_datasets"], [112, 5, 1, "", "from_lines"], [112, 5, 1, "", "from_ndarray"], [112, 5, 1, "", "from_ndjson"]], "docarray.document.mixins": [[113, 1, 1, "", "AllMixins"], [114, 0, 0, "-", "attribute"], [115, 0, 0, "-", "audio"], [116, 0, 0, "-", "blob"], [117, 0, 0, "-", "content"], [118, 0, 0, "-", "convert"], [119, 0, 0, "-", "dump"], [120, 0, 0, "-", "featurehash"], [121, 0, 0, "-", "helper"], [122, 0, 0, "-", "image"], [123, 0, 0, "-", "mesh"], [124, 0, 0, "-", "multimodal"], [125, 0, 0, "-", "plot"], [126, 0, 0, "-", "porting"], [127, 0, 0, "-", "property"], [128, 0, 0, "-", "protobuf"], [129, 0, 0, "-", "pydantic"], [130, 0, 0, "-", "rich_embedding"], [131, 0, 0, "-", "strawberry"], [132, 0, 0, "-", "sugar"], [133, 0, 0, "-", "text"], [134, 0, 0, "-", "video"]], "docarray.document.mixins.AllMixins": [[113, 4, 1, "", "adjacency"], [113, 4, 1, "", "blob"], [113, 4, 1, "", "chunks"], [113, 4, 1, "", "content"], [113, 4, 1, "", "content_hash"], [113, 4, 1, "", "content_type"], [113, 3, 1, "", "convert_blob_to_datauri"], [113, 3, 1, "", "convert_blob_to_image_tensor"], [113, 3, 1, "", "convert_blob_to_tensor"], [113, 3, 1, "", "convert_content_to_datauri"], [113, 3, 1, "", "convert_image_tensor_to_blob"], [113, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [113, 3, 1, "", "convert_image_tensor_to_uri"], [113, 3, 1, "", "convert_tensor_to_blob"], [113, 3, 1, "", "convert_tensor_to_text"], [113, 3, 1, "", "convert_text_to_datauri"], [113, 3, 1, "", "convert_text_to_tensor"], [113, 3, 1, "", "convert_uri_to_datauri"], [113, 3, 1, "", "display"], [113, 3, 1, "", "display_3d"], [113, 3, 1, "", "display_tensor"], [113, 3, 1, "", "display_uri"], [113, 3, 1, "", "embed"], [113, 3, 1, "", "embed_feature_hashing"], [113, 4, 1, "", "embedding"], [113, 4, 1, "", "evaluations"], [113, 3, 1, "", "from_base64"], [113, 3, 1, "", "from_bytes"], [113, 3, 1, "", "from_dict"], [113, 3, 1, "", "from_json"], [113, 3, 1, "", "from_protobuf"], [113, 3, 1, "", "from_pydantic_model"], [113, 3, 1, "", "from_strawberry_type"], [113, 3, 1, "", "generator_from_webcam"], [113, 3, 1, "", "get_json_schema"], [113, 3, 1, "", "get_multi_modal_attribute"], [113, 3, 1, "", "get_vocabulary"], [113, 4, 1, "", "granularity"], [113, 4, 1, "", "id"], [113, 4, 1, "", "is_multimodal"], [113, 3, 1, "", "load_pil_image_to_datauri"], [113, 3, 1, "", "load_uri_to_audio_tensor"], [113, 3, 1, "", "load_uri_to_blob"], [113, 3, 1, "", "load_uri_to_image_tensor"], [113, 3, 1, "", "load_uri_to_point_cloud_tensor"], [113, 3, 1, "", "load_uri_to_text"], [113, 3, 1, "", "load_uri_to_vertices_and_faces"], [113, 3, 1, "", "load_uri_to_video_tensor"], [113, 3, 1, "", "load_vertices_and_faces_to_point_cloud"], [113, 4, 1, "", "location"], [113, 3, 1, "", "match"], [113, 4, 1, "", "matches"], [113, 4, 1, "", "mime_type"], [113, 4, 1, "", "modality"], [113, 4, 1, "", "offset"], [113, 4, 1, "", "parent_id"], [113, 3, 1, "", "plot_matches_sprites"], [113, 3, 1, "", "post"], [113, 3, 1, "", "save_audio_tensor_to_file"], [113, 3, 1, "", "save_blob_to_file"], [113, 3, 1, "", "save_image_tensor_to_file"], [113, 3, 1, "", "save_uri_to_file"], [113, 3, 1, "", "save_video_tensor_to_file"], [113, 4, 1, "", "scores"], [113, 3, 1, "", "set_image_tensor_channel_axis"], [113, 3, 1, "", "set_image_tensor_inv_normalization"], [113, 3, 1, "", "set_image_tensor_normalization"], [113, 3, 1, "", "set_image_tensor_resample"], [113, 3, 1, "", "set_image_tensor_shape"], [113, 3, 1, "", "set_multi_modal_attribute"], [113, 3, 1, "", "summary"], [113, 4, 1, "", "tags"], [113, 4, 1, "", "tensor"], [113, 4, 1, "", "text"], [113, 3, 1, "", "to_base64"], [113, 3, 1, "", "to_bytes"], [113, 3, 1, "", "to_dict"], [113, 3, 1, "", "to_json"], [113, 3, 1, "", "to_protobuf"], [113, 3, 1, "", "to_pydantic_model"], [113, 3, 1, "", "to_strawberry_type"], [113, 4, 1, "", "uri"], [113, 4, 1, "", "weight"]], "docarray.document.mixins.attribute": [[114, 1, 1, "", "GetAttributesMixin"]], "docarray.document.mixins.audio": [[115, 1, 1, "", "AudioDataMixin"]], "docarray.document.mixins.audio.AudioDataMixin": [[115, 3, 1, "", "load_uri_to_audio_tensor"], [115, 3, 1, "", "save_audio_tensor_to_file"]], "docarray.document.mixins.blob": [[116, 1, 1, "", "BlobDataMixin"]], "docarray.document.mixins.blob.BlobDataMixin": [[116, 3, 1, "", "convert_blob_to_datauri"], [116, 3, 1, "", "load_uri_to_blob"], [116, 3, 1, "", "save_blob_to_file"]], "docarray.document.mixins.content": [[117, 1, 1, "", "ContentPropertyMixin"]], "docarray.document.mixins.content.ContentPropertyMixin": [[117, 4, 1, "", "content_hash"], [117, 3, 1, "", "convert_content_to_datauri"]], "docarray.document.mixins.convert": [[118, 1, 1, "", "ConvertMixin"]], "docarray.document.mixins.convert.ConvertMixin": [[118, 3, 1, "", "convert_blob_to_tensor"], [118, 3, 1, "", "convert_tensor_to_blob"], [118, 3, 1, "", "convert_uri_to_datauri"]], "docarray.document.mixins.dump": [[119, 1, 1, "", "UriFileMixin"]], "docarray.document.mixins.dump.UriFileMixin": [[119, 3, 1, "", "save_uri_to_file"]], "docarray.document.mixins.featurehash": [[120, 1, 1, "", "FeatureHashMixin"]], "docarray.document.mixins.featurehash.FeatureHashMixin": [[120, 3, 1, "", "embed_feature_hashing"]], "docarray.document.mixins.image": [[122, 1, 1, "", "ImageDataMixin"]], "docarray.document.mixins.image.ImageDataMixin": [[122, 3, 1, "", "convert_blob_to_image_tensor"], [122, 3, 1, "", "convert_image_tensor_to_blob"], [122, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [122, 3, 1, "", "convert_image_tensor_to_uri"], [122, 3, 1, "", "load_pil_image_to_datauri"], [122, 3, 1, "", "load_uri_to_image_tensor"], [122, 3, 1, "", "save_image_tensor_to_file"], [122, 3, 1, "", "set_image_tensor_channel_axis"], [122, 3, 1, "", "set_image_tensor_inv_normalization"], [122, 3, 1, "", "set_image_tensor_normalization"], [122, 3, 1, "", "set_image_tensor_resample"], [122, 3, 1, "", "set_image_tensor_shape"]], "docarray.document.mixins.mesh": [[123, 1, 1, "", "Mesh"], [123, 1, 1, "", "MeshDataMixin"]], "docarray.document.mixins.mesh.Mesh": [[123, 2, 1, "", "FACES"], [123, 2, 1, "", "FILE_EXTENSIONS"], [123, 2, 1, "", "VERTICES"]], "docarray.document.mixins.mesh.MeshDataMixin": [[123, 3, 1, "", "load_uri_to_point_cloud_tensor"], [123, 3, 1, "", "load_uri_to_vertices_and_faces"], [123, 3, 1, "", "load_vertices_and_faces_to_point_cloud"]], "docarray.document.mixins.multimodal": [[124, 1, 1, "", "MultiModalMixin"]], "docarray.document.mixins.multimodal.MultiModalMixin": [[124, 3, 1, "", "get_multi_modal_attribute"], [124, 4, 1, "", "is_multimodal"], [124, 3, 1, "", "set_multi_modal_attribute"]], "docarray.document.mixins.plot": [[125, 1, 1, "", "PlotMixin"]], "docarray.document.mixins.plot.PlotMixin": [[125, 3, 1, "", "display"], [125, 3, 1, "", "display_3d"], [125, 3, 1, "", "display_tensor"], [125, 3, 1, "", "display_uri"], [125, 3, 1, "", "plot_matches_sprites"], [125, 3, 1, "", "summary"]], "docarray.document.mixins.porting": [[126, 1, 1, "", "PortingMixin"]], "docarray.document.mixins.porting.PortingMixin": [[126, 3, 1, "", "from_base64"], [126, 3, 1, "", "from_bytes"], [126, 3, 1, "", "from_dict"], [126, 3, 1, "", "from_json"], [126, 3, 1, "", "to_base64"], [126, 3, 1, "", "to_bytes"], [126, 3, 1, "", "to_dict"], [126, 3, 1, "", "to_json"]], "docarray.document.mixins.property": [[127, 1, 1, "", "PropertyMixin"]], "docarray.document.mixins.property.PropertyMixin": [[127, 4, 1, "", "adjacency"], [127, 4, 1, "", "blob"], [127, 4, 1, "", "chunks"], [127, 4, 1, "", "content"], [127, 4, 1, "", "content_type"], [127, 4, 1, "", "embedding"], [127, 4, 1, "", "evaluations"], [127, 4, 1, "", "granularity"], [127, 4, 1, "", "id"], [127, 4, 1, "", "location"], [127, 4, 1, "", "matches"], [127, 4, 1, "", "mime_type"], [127, 4, 1, "", "modality"], [127, 4, 1, "", "offset"], [127, 4, 1, "", "parent_id"], [127, 4, 1, "", "scores"], [127, 4, 1, "", "tags"], [127, 4, 1, "", "tensor"], [127, 4, 1, "", "text"], [127, 4, 1, "", "uri"], [127, 4, 1, "", "weight"]], "docarray.document.mixins.protobuf": [[128, 1, 1, "", "ProtobufMixin"]], "docarray.document.mixins.protobuf.ProtobufMixin": [[128, 3, 1, "", "from_protobuf"], [128, 3, 1, "", "to_protobuf"]], "docarray.document.mixins.pydantic": [[129, 1, 1, "", "PydanticMixin"]], "docarray.document.mixins.pydantic.PydanticMixin": [[129, 3, 1, "", "from_pydantic_model"], [129, 3, 1, "", "get_json_schema"], [129, 3, 1, "", "to_pydantic_model"]], "docarray.document.mixins.rich_embedding": [[130, 1, 1, "", "ColorBoxEmbedding"]], "docarray.document.mixins.strawberry": [[131, 1, 1, "", "StrawberryMixin"]], "docarray.document.mixins.strawberry.StrawberryMixin": [[131, 3, 1, "", "from_strawberry_type"], [131, 3, 1, "", "to_strawberry_type"]], "docarray.document.mixins.sugar": [[132, 1, 1, "", "SingletonSugarMixin"]], "docarray.document.mixins.sugar.SingletonSugarMixin": [[132, 3, 1, "", "embed"], [132, 3, 1, "", "match"], [132, 3, 1, "", "post"]], "docarray.document.mixins.text": [[133, 1, 1, "", "TextDataMixin"]], "docarray.document.mixins.text.TextDataMixin": [[133, 3, 1, "", "convert_tensor_to_text"], [133, 3, 1, "", "convert_text_to_datauri"], [133, 3, 1, "", "convert_text_to_tensor"], [133, 3, 1, "", "get_vocabulary"], [133, 3, 1, "", "load_uri_to_text"]], "docarray.document.mixins.video": [[134, 1, 1, "", "VideoDataMixin"]], "docarray.document.mixins.video.VideoDataMixin": [[134, 3, 1, "", "generator_from_webcam"], [134, 3, 1, "", "load_uri_to_video_tensor"], [134, 3, 1, "", "save_video_tensor_to_file"]], "docarray.document.pydantic_model": [[135, 1, 1, "", "PydanticDocument"]], "docarray.document.pydantic_model.PydanticDocument": [[135, 1, 1, "", "Config"], [135, 2, 1, "", "adjacency"], [135, 2, 1, "", "blob"], [135, 2, 1, "", "chunks"], [135, 3, 1, "", "construct"], [135, 3, 1, "", "copy"], [135, 3, 1, "", "dict"], [135, 2, 1, "", "embedding"], [135, 2, 1, "", "evaluations"], [135, 3, 1, "", "from_orm"], [135, 2, 1, "", "granularity"], [135, 2, 1, "", "id"], [135, 3, 1, "", "json"], [135, 2, 1, "", "location"], [135, 2, 1, "", "matches"], [135, 2, 1, "", "mime_type"], [135, 2, 1, "", "modality"], [135, 2, 1, "", "offset"], [135, 2, 1, "", "parent_id"], [135, 3, 1, "", "parse_file"], [135, 3, 1, "", "parse_obj"], [135, 3, 1, "", "parse_raw"], [135, 3, 1, "", "schema"], [135, 3, 1, "", "schema_json"], [135, 2, 1, "", "scores"], [135, 2, 1, "", "tags"], [135, 2, 1, "", "tensor"], [135, 2, 1, "", "text"], [135, 3, 1, "", "update_forward_refs"], [135, 2, 1, "", "uri"], [135, 3, 1, "", "validate"], [135, 2, 1, "", "weight"]], "docarray.document.pydantic_model.PydanticDocument.Config": [[135, 2, 1, "", "smart_union"]], "docarray.document.strawberry_type": [[136, 1, 1, "", "StrawberryDocument"], [136, 1, 1, "", "StrawberryDocumentInput"]], "docarray.document.strawberry_type.StrawberryDocument": [[136, 2, 1, "", "adjacency"], [136, 2, 1, "", "blob"], [136, 2, 1, "", "chunks"], [136, 2, 1, "", "embedding"], [136, 2, 1, "", "evaluations"], [136, 2, 1, "", "granularity"], [136, 2, 1, "", "id"], [136, 2, 1, "", "location"], [136, 2, 1, "", "matches"], [136, 2, 1, "", "mime_type"], [136, 2, 1, "", "modality"], [136, 2, 1, "", "offset"], [136, 2, 1, "", "parent_id"], [136, 2, 1, "", "scores"], [136, 2, 1, "", "tags"], [136, 2, 1, "", "tensor"], [136, 2, 1, "", "text"], [136, 2, 1, "", "uri"], [136, 2, 1, "", "weight"]], "docarray.document.strawberry_type.StrawberryDocumentInput": [[136, 2, 1, "", "adjacency"], [136, 2, 1, "", "blob"], [136, 2, 1, "", "chunks"], [136, 2, 1, "", "embedding"], [136, 2, 1, "", "evaluations"], [136, 2, 1, "", "granularity"], [136, 2, 1, "", "id"], [136, 2, 1, "", "location"], [136, 2, 1, "", "matches"], [136, 2, 1, "", "mime_type"], [136, 2, 1, "", "modality"], [136, 2, 1, "", "offset"], [136, 2, 1, "", "parent_id"], [136, 2, 1, "", "scores"], [136, 2, 1, "", "tags"], [136, 2, 1, "", "tensor"], [136, 2, 1, "", "text"], [136, 2, 1, "", "uri"], [136, 2, 1, "", "weight"]], "docarray.helper": [[137, 5, 1, "", "add_protocol_and_compress_to_file_path"], [137, 1, 1, "", "cached_property"], [137, 5, 1, "", "compress_bytes"], [137, 5, 1, "", "dataclass_from_dict"], [137, 5, 1, "", "decompress_bytes"], [137, 5, 1, "", "deprecate_by"], [137, 5, 1, "", "download_mermaid_url"], [137, 5, 1, "", "dunder_get"], [137, 5, 1, "", "filter_dict"], [137, 5, 1, "", "get_ci_vendor"], [137, 5, 1, "", "get_compress_ctx"], [137, 5, 1, "", "get_full_version"], [137, 5, 1, "", "login"], [137, 5, 1, "", "logout"], [137, 5, 1, "", "protocol_and_compress_from_file_path"], [137, 5, 1, "", "random_identity"], [137, 5, 1, "", "random_port"], [137, 5, 1, "", "random_uuid"], [137, 5, 1, "", "reset_ports"], [137, 5, 1, "", "typename"]], "docarray.math": [[139, 0, 0, "-", "distance"], [144, 0, 0, "-", "evaluation"], [145, 0, 0, "-", "helper"], [146, 0, 0, "-", "ndarray"]], "docarray.math.distance": [[139, 5, 1, "", "cdist"], [140, 0, 0, "-", "numpy"], [139, 5, 1, "", "pdist"], [142, 0, 0, "-", "tensorflow"], [143, 0, 0, "-", "torch"]], "docarray.math.distance.numpy": [[140, 5, 1, "", "cosine"], [140, 5, 1, "", "euclidean"], [140, 5, 1, "", "sparse_cosine"], [140, 5, 1, "", "sparse_euclidean"], [140, 5, 1, "", "sparse_sqeuclidean"], [140, 5, 1, "", "sqeuclidean"]], "docarray.math.distance.tensorflow": [[142, 5, 1, "", "cosine"], [142, 5, 1, "", "euclidean"], [142, 5, 1, "", "sqeuclidean"]], "docarray.math.distance.torch": [[143, 5, 1, "", "cosine"], [143, 5, 1, "", "euclidean"], [143, 5, 1, "", "sqeuclidean"]], "docarray.math.evaluation": [[144, 5, 1, "", "average_precision"], [144, 5, 1, "", "dcg_at_k"], [144, 5, 1, "", "f1_score_at_k"], [144, 5, 1, "", "hit_at_k"], [144, 5, 1, "", "ndcg_at_k"], [144, 5, 1, "", "precision_at_k"], [144, 5, 1, "", "r_precision"], [144, 5, 1, "", "recall_at_k"], [144, 5, 1, "", "reciprocal_rank"]], "docarray.math.helper": [[145, 5, 1, "", "minmax_normalize"], [145, 5, 1, "", "top_k"], [145, 5, 1, "", "update_rows_x_mat_best"]], "docarray.math.ndarray": [[146, 5, 1, "", "check_arraylike_equality"], [146, 5, 1, "", "detach_tensor_if_present"], [146, 5, 1, "", "get_array_rows"], [146, 5, 1, "", "get_array_type"], [146, 5, 1, "", "ravel"], [146, 5, 1, "", "to_list"], [146, 5, 1, "", "to_numpy_array"], [146, 5, 1, "", "unravel"]], "docarray.proto": [[148, 0, 0, "-", "docarray_pb2"], [149, 0, 0, "-", "io"], [151, 0, 0, "-", "pb"], [153, 0, 0, "-", "pb2"]], "docarray.proto.io": [[149, 5, 1, "", "flush_proto"], [150, 0, 0, "-", "ndarray"], [149, 5, 1, "", "parse_proto"]], "docarray.proto.io.ndarray": [[150, 5, 1, "", "flush_ndarray"], [150, 5, 1, "", "read_ndarray"]], "docarray.proto.pb": [[152, 0, 0, "-", "docarray_pb2"]], "docarray.proto.pb2": [[154, 0, 0, "-", "docarray_pb2"]], "docarray.score": [[155, 1, 1, "", "NamedScore"], [156, 0, 0, "-", "data"], [157, 0, 0, "-", "mixins"]], "docarray.score.NamedScore": [[155, 3, 1, "", "clear"], [155, 3, 1, "", "copy_from"], [155, 4, 1, "", "description"], [155, 4, 1, "", "nbytes"], [155, 4, 1, "", "non_empty_fields"], [155, 4, 1, "", "op_name"], [155, 3, 1, "", "pop"], [155, 4, 1, "", "ref_id"], [155, 3, 1, "", "to_dict"], [155, 4, 1, "", "value"]], "docarray.score.data": [[156, 1, 1, "", "NamedScoreData"]], "docarray.score.data.NamedScoreData": [[156, 2, 1, "", "description"], [156, 2, 1, "", "op_name"], [156, 2, 1, "", "ref_id"], [156, 2, 1, "", "value"]], "docarray.score.mixins": [[157, 1, 1, "", "AllMixins"], [158, 0, 0, "-", "property"], [159, 0, 0, "-", "representer"]], "docarray.score.mixins.AllMixins": [[157, 4, 1, "", "description"], [157, 4, 1, "", "op_name"], [157, 4, 1, "", "ref_id"], [157, 3, 1, "", "to_dict"], [157, 4, 1, "", "value"]], "docarray.score.mixins.property": [[158, 1, 1, "", "PropertyMixin"]], "docarray.score.mixins.property.PropertyMixin": [[158, 4, 1, "", "description"], [158, 4, 1, "", "op_name"], [158, 4, 1, "", "ref_id"], [158, 4, 1, "", "value"]], "docarray.score.mixins.representer": [[159, 1, 1, "", "RepresentMixin"]], "docarray.score.mixins.representer.RepresentMixin": [[159, 3, 1, "", "to_dict"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:function", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"annlit": [0, 14, 60, 61, 62, 63, 64, 65], "usag": [0, 2, 5, 6, 7, 8], "config": [0, 2, 4, 5, 7, 8, 175], "vector": [0, 2, 4, 5, 6, 8], "search": [0, 1, 2, 4, 5, 6, 167, 169, 198], "filter": [0, 2, 4, 5, 6, 8, 192], "exampl": [0, 4, 5, 8, 9, 163, 194], "find": [0, 3, 5, 8, 29, 62, 73, 78, 83, 89, 100, 167, 181, 194], "onli": [0, 8], "queri": [0, 2, 6, 8, 191, 192, 194], "One": 1, "million": 1, "scale": 1, "benchmark": 1, "result": [1, 8, 200], "chart": 1, "setup": 1, "nearest": [1, 181, 194], "neighbour": [1, 181, 194], "set": [1, 8], "rational": 1, "experi": 1, "design": [1, 203], "limit": [1, 4, 200], "incomplet": 1, "store": [1, 3, 4, 11], "client": 1, "server": 1, "conclus": 1, "elasticsearch": 2, "start": [2, 5, 6, 8], "elast": [2, 18, 71, 72, 73, 74, 75], "servic": [2, 5, 6, 8, 176], "creat": [2, 3, 4, 5, 6, 8, 170, 171, 178], "documentarrai": [2, 3, 4, 5, 6, 8, 11, 162, 174, 181, 189, 193, 200, 201], "backend": [2, 3, 4, 5, 6, 8, 61, 67, 72, 77, 82, 88, 94, 99, 162, 195], "secur": 2, "connect": 2, "bulk": 2, "request": [2, 3], "custom": [2, 191], "note": [2, 6], "text": [2, 6, 51, 133, 169, 176], "field": [2, 6, 162, 174, 175, 200], "tag": [2, 6, 188], "add": [3, 162], "new": [3, 178], "document": [3, 4, 11, 17, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 162, 167, 169, 170, 174, 175, 180, 181, 183, 188, 189, 191, 200, 201, 205, 206], "step": 3, "1": [3, 163, 164, 166, 167, 168, 169, 170, 172], "folder": 3, "2": [3, 162, 163, 164, 166, 167, 169, 170, 172], "implement": 3, "getsetdel": [3, 63, 68, 74, 79, 84, 90, 95, 101], "py": 3, "3": [3, 162, 163, 164, 166, 167, 169, 170, 172], "seqlik": [3, 65, 70, 75, 80, 86, 91, 97, 102], "4": [3, 162, 163, 164, 166, 167, 169, 170, 172], "5": [3, 162, 163, 164, 166, 167, 168, 169, 170, 172], "6": [3, 163, 164, 167, 168, 170, 172], "summar": 3, "everyth": 3, "__init__": 3, "7": [3, 163, 166, 167, 169, 170, 172], "subclass": 3, "from": [3, 170, 175, 179, 180, 185, 189, 197], "8": [3, 163, 166, 167, 169, 170, 172], "entrypoint": 3, "On": [3, 181, 202], "pull": [3, 171], "test": 3, "type": [3, 109, 160, 167, 174, 178, 194, 205, 206], "hint": [3, 4], "construct": [4, 175, 180, 189, 198], "subindic": [4, 167, 198], "without": 4, "specifi": 4, "index": [4, 6, 188], "featur": [4, 169], "summari": [4, 199], "persist": 4, "mutat": 4, "context": 4, "manag": [4, 171], "known": 4, "multipl": [4, 174, 181, 189, 192], "refer": 4, "same": 4, "storag": [4, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 162], "out": 4, "arrai": [4, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 189, 191], "modif": 4, "perform": [4, 167], "issu": 4, "caus": 4, "list": [4, 162, 167, 171, 174, 189, 197], "like": [4, 189], "structur": [4, 184, 188, 198], "element": [4, 189], "access": [4, 167, 174, 179, 187, 188], "i": [4, 177, 194, 203], "slower": 4, "qdrant": [5, 53, 81, 82, 83, 84, 85, 86], "minimum": [5, 8], "redi": [6, 57, 87, 88, 89, 90, 91], "configur": 6, "updat": [6, 171], "schema": [6, 200], "sqlite": [7, 58, 93, 94, 95, 96, 97], "weaviat": [8, 98, 99, 100, 101, 102, 103], "sort": 8, "certainti": 8, "includ": 8, "addit": 8, "properti": [8, 127, 158], "return": [8, 174, 194, 200], "graphql": 9, "basic": [9, 188], "integr": 9, "fastapi": [9, 200], "pytorch": 10, "deep": [10, 189], "learn": 10, "framework": 10, "load": [10, 163, 164, 168, 170, 179], "map": 10, "batch": [10, 188, 191], "one": 10, "shot": 10, "python": [11, 171, 202], "api": [11, 162, 171], "docarrai": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 200, 202, 203, 204, 205, 206], "dataclass": [11, 105, 106, 107, 108, 109, 162, 167, 174, 175, 177], "packag": [12, 13, 21, 23, 33, 54, 59, 60, 66, 71, 76, 81, 87, 93, 98, 105, 110, 113, 138, 139, 147, 149, 151, 153, 155, 157, 160, 166], "subpackag": [12, 13, 21, 59, 110, 138, 147, 155], "submodul": [12, 13, 21, 23, 33, 54, 59, 60, 66, 71, 76, 81, 87, 93, 98, 105, 110, 113, 138, 139, 147, 149, 151, 153, 155, 157], "modul": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160], "content": [12, 13, 21, 22, 23, 33, 54, 59, 60, 66, 71, 76, 81, 87, 93, 98, 105, 110, 113, 117, 138, 139, 147, 149, 151, 153, 155, 157, 160, 162, 179, 187, 201, 205, 206], "base": [15, 66, 67, 68, 69, 70, 104], "chunk": [16, 169], "match": [19, 42, 169, 191, 194, 199], "memori": [20, 76, 77, 78, 79, 80], "mixin": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 157, 158, 159], "dataload": [23, 24], "helper": [24, 64, 69, 85, 96, 121, 137, 145, 188], "delitem": 25, "emb": [26, 167, 176, 190, 191], "empti": [27, 180, 189], "evalu": [28, 144, 191], "getattr": 30, "getitem": 31, "group": 32, "io": [33, 34, 35, 36, 37, 38, 39, 40, 41, 149, 150], "binari": [34, 197], "common": 35, "csv": [36, 168], "datafram": [37, 197], "from_gen": 38, "json": [39, 162, 185, 197, 200], "pbar": 40, "pushpul": 41, "parallel": [43, 195], "plot": [44, 125, 199], "post": 45, "pydant": [46, 129, 182, 200], "reduc": 47, "sampl": [48, 188, 191], "setitem": 49, "strawberri": [50, 131, 182], "travers": 52, "queryset": [54, 55, 56], "lookup": 55, "parser": 56, "registri": 92, "enum": 106, "getter": 107, "setter": 108, "data": [111, 156, 163, 164, 165, 167, 170, 171, 179], "gener": [112, 167], "attribut": [114, 179, 180, 187], "audio": [115, 163], "blob": 116, "convert": [118, 169, 179, 182, 200], "dump": 119, "featurehash": [120, 182], "imag": [122, 164, 176, 199, 201], "mesh": [123, 166], "multimod": [124, 165], "port": [126, 182], "protobuf": [128, 182, 185, 197, 206], "rich_embed": 130, "sugar": 132, "video": [134, 170], "pydantic_model": 135, "strawberry_typ": 136, "math": [138, 139, 140, 141, 142, 143, 144, 145, 146], "distanc": [139, 140, 141, 142, 143], "numpi": 140, "paddl": 141, "tensorflow": 142, "torch": 143, "ndarrai": [146, 150, 169, 187], "proto": [147, 148, 149, 150, 151, 152, 153, 154, 205, 206], "docarray_pb2": [148, 152, 154], "pb": [151, 152], "pb2": [153, 154], "score": [155, 156, 157, 158, 159], "represent": [159, 166], "changelog": 162, "0": [162, 163, 164, 166, 167, 168, 169, 170, 172], "11": [162, 163, 164, 169, 170, 172], "chang": 162, "documentarrayinmemori": 162, "": [162, 175, 177, 180, 183, 184, 185, 188, 189, 193], "contain": 162, "10": [162, 163, 164, 172], "high": 162, "level": [162, 169, 174], "serial": [162, 185, 197], "format": [162, 197], "default": 162, "dict": [162, 185], "strategi": 162, "name": [162, 191], "svg": [163, 164, 166, 167, 168, 169, 170, 172], "version": [163, 164, 166, 167, 168, 169, 170, 172], "width": [163, 164, 166, 167, 168, 169, 170, 172], "0em": [163, 164, 166, 167, 168, 169, 170, 172], "height": [163, 164, 166, 167, 168, 169, 170, 172], "class": [163, 164, 166, 167, 168, 169, 170, 172, 175], "sd": [163, 164, 166, 167, 168, 169, 170, 172], "octicon": [163, 164, 166, 167, 168, 169, 170, 172], "unmut": 163, "viewbox": [163, 164, 166, 167, 168, 169, 170, 172], "16": [163, 164, 166, 167, 168, 169, 170, 172], "aria": [163, 164, 166, 167, 168, 169, 170, 172], "hidden": [163, 164, 166, 167, 168, 169, 170, 172], "true": [163, 164, 166, 167, 168, 169, 170, 172], "path": [163, 164, 166, 167, 168, 169, 170, 172], "fill": [163, 164, 166, 167, 168, 169, 170, 172, 181], "rule": [163, 164, 166, 167, 168, 169, 170, 172, 180], "evenodd": [163, 164, 166, 167, 168, 169, 170, 172], "d": [163, 164, 166, 167, 168, 169, 170, 172], "m7": [163, 167], "563": 163, "069a": 163, "75": [163, 164, 166, 167, 168, 169, 170, 172], "018": 163, "75v10": [163, 164], "5a": [163, 164, 167, 170], "01": [163, 164, 166, 167, 168, 169, 172], "238": 163, "57l3": 163, "472": 163, "11h1": 163, "75a1": [163, 164, 168, 170, 172], "010": [163, 167, 168], "9": [163, 169, 172], "25v": [163, 170, 172], "5c0": [163, 164, 170], "784": [163, 164, 168, 170], "5h1": [163, 168, 169], "723l3": 163, "289": 163, "82a": 163, "801": 163, "111zm6": 163, "38l4": 163, "319a": 163, "488": [163, 169], "181h": 163, "2a": [163, 170, 172], "25": [163, 164, 166, 167, 168, 170, 172], "00": [163, 164, 166, 167, 168, 169, 170, 172], "25v2": [163, 164], "138": [163, 164, 168, 170], "112": [163, 164, 168, 170], "25h2a": 163, "18l6": 163, "62v4": 163, "38zm6": 163, "096": 163, "038a": 163, "011": [163, 164, 167], "06": [163, 172], "314": [163, 172], "000": [163, 164, 170], "193": 163, "06v": 163, "001zm": 163, "121a": 163, "061": 163, "95": [163, 172], "101": [163, 169], "07l": 163, "001": [163, 166, 169, 172], "001z": 163, "wav": 163, "file": [163, 168, 170, 189], "save": [163, 168, 170], "other": [163, 188], "tool": 163, "librari": 163, "m1": 164, "25v10": 164, "25h": [164, 170], "94a": 164, "76": 164, "03": 164, "03l6": 164, "077": 164, "078a1": 164, "012": [164, 172], "412": [164, 169], "06l14": 164, "31v2": 164, "75a": [164, 168, 170], "25h1": 164, "75zm12": 164, "11h4": 164, "81l5": 164, "048": 164, "047a": 164, "344": 164, "009l4": 164, "298": 164, "889v": 164, "917a": 164, "25zm1": 164, "0014": [164, 172], "1h1": 164, "14": [164, 168], "216": [164, 168, 169, 170], "15": [164, 172], "15h12": 164, "5a1": [164, 170, 172], "0016": [164, 170, 172], "13": [164, 169, 170], "25zm5": 164, "6a": 164, "0zm7": 164, "6a2": 164, "014": 164, "0z": 164, "simpl": [164, 169], "process": [164, 176, 195, 196], "displai": [164, 201], "sprite": [164, 199, 201], "segment": [164, 169], "larg": [164, 197], "complic": 164, "small": 164, "ones": 164, "m8": 166, "878": [166, 167], "392a1": [166, 167], "756": [166, 167], "0l": [166, 167], "045a1": 166, "951v6": 166, "098c0": 166, "624": 166, "332": [166, 169, 172], "872": 166, "514l5": 166, "0l5": [166, 167], "045c": 166, "54": [166, 169], "313": 166, "89": 166, "514v4": 166, "951c0": 166, "514l8": 166, "392zm7": 166, "875": 166, "69a": [166, 167], "0l4": [166, 167], "63": [166, 167, 169], "685l8": 166, "133": 166, "245": 166, "375l4": 166, "685zm2": 166, "677v5": 166, "372c0": 166, "09": [166, 172], "047": [166, 172], "171": 166, "125": [166, 167], "216l4": 166, "625": 166, "683v8": 166, "432l2": 166, "677zm6": 166, "271l4": 166, "683a": 166, "216v5": 166, "677l8": 166, "432v5": 166, "516z": 166, "3d": 166, "vertic": 166, "face": [166, 203], "point": 166, "cloud": [166, 172, 197], "stack": 167, "122": 167, "003": 167, "902c": 167, "83": 167, "481": 167, "68": 167, "162l8": 167, "358a1": 167, "0l2": 167, "119": [167, 172], "456a1": 167, "162l7": 167, "392zm8": 167, "685": 167, "685a": 167, "685zm1": 167, "601": 167, "789a": 167, "025": 167, "273l5": 167, "249": [167, 169], "044a": 167, "752": 167, "298l": 167, "248": 167, "044a1": 167, "0l1": 167, "874": 167, "814a": 167, "789zm0": 167, "273": [167, 172], "025z": 167, "multi": [167, 169, 177], "modal": [167, 169, 174, 176, 177, 178], "model": [167, 200], "your": 167, "instanti": 167, "nest": [167, 174, 180, 184, 187, 188, 198], "embed": [167, 181, 187, 199, 201], "each": 167, "parent": 167, "combin": [167, 192], "tabl": [168, 199, 205, 206], "m0": 168, "75c0": 168, "0h12": 168, "5c15": 168, "75v3": 168, "585a": 168, "746": 168, "83v8": 168, "085a1": 168, "0114": [168, 172], "16h6": 168, "309a": [168, 172], "748": 168, "118": [168, 172], "0h1": 168, "25v6": [168, 170], "165a": 168, "83v1": 168, "75zm1": 168, "5v7": 168, "25h5v": 168, "8h1": 168, "5zm5": 168, "5v1": 168, "25h5v5zm1": 168, "5v8h7": 168, "5h": [168, 172], "8zm8": 168, "8v1": 168, "5h7": 168, "25v5z": 168, "typographi": 169, "m6": 169, "21": [169, 172], "5l4": 169, "574": 169, "594": 169, "857": 169, "5h6": 169, "21zm": 169, "5l": [169, 172], "829": 169, "487a": 169, "423": 169, "474l5": 169, "735": 169, "332a1": 169, "302": 169, "018l": 169, "39": 169, "688a": 169, "415": 169, "496l2": 169, "10h6": 169, "71zm3": 169, "358c10": 169, "53": 169, "374": 169, "87": 169, "4c1": 169, "939": 169, "601v5": 169, "649a": 169, "448": 169, "275c13": 169, "995": 169, "12": [169, 170, 172], "82": 169, "13c": 169, "77": 169, "514": 169, "231": 169, "078": 169, "709": 169, "577": 169, "922": 169, "199": 169, "041": 169, "694": 169, "265": [169, 172], "411": 169, "887": 169, "944c11": 169, "78": 169, "88": 169, "5v": 169, "899c0": 169, "869": 169, "528": 169, "282": 169, "84": 169, "858a": 169, "32": 169, "716zm14": 169, "9h13c": 169, "881": 169, "375": 169, "22": 169, "637": 169, "444": 169, "253": 169, "217": 169, "363": 169, "806": 169, "408": 169, "155": 169, "697": 169, "896": 169, "354": 169, "732": 169, "26": [169, 172], "209": 169, "588": 169, "449": 169, "35": [169, 172], "257": 169, "495": 169, "551v9z": 169, "long": 169, "back": 169, "via": [169, 176, 181, 190, 191, 196], "hash": 169, "subindex": 169, "devic": [170, 202], "camera": 170, "m16": 170, "136": 170, "643l11": 170, "425v4": 170, "009": 170, "3h": 170, "75v6": 170, "13h7": 170, "0011": 170, "675l3": 170, "864": 170, "318a": 170, "5zm": 170, "075l3": 170, "1v": 170, "85l": 170, "1v1": 170, "65zm9": 170, "75v": 170, "25h7": 170, "5z": 170, "kei": 170, "frame": 170, "extract": 170, "webcam": 170, "web": 171, "consol": 171, "push": 171, "read": [171, 196], "delet": 171, "rocket": 172, "m14": 172, "064": 172, "0a8": 172, "187": 172, "563l": 172, "459": 172, "458c": 172, "616": 172, "641": 172, "904": 172, "979h3": 172, "31a1": 172, "49": 172, "833l": 172, "607a": 172, "418": 172, "11l3": 172, "102": 172, "954c": 172, "037": 172, "051": 172, "079": 172, "124": 172, "145l2": 172, "429": 172, "428c": 172, "046": 172, "094": 172, "088": 172, "145": 172, "125l": 172, "954": 172, "102a": 172, "418l2": 172, "774": 172, "707a1": 172, "833": 172, "49v9": 172, "485c": 172, "338": 172, "288": 172, "665": 172, "59": 172, "979": 172, "904l": 172, "458": 172, "459a8": 172, "936v1": 172, "0h": 172, "186zm10": 172, "625c": 172, "177": 172, "266": 172, "175l": 172, "521": 172, "548": 172, "783": 172, "949": 172, "213v": 172, "066zm3": 172, "678": 172, "116l5": 172, "766c": 172, "058": 172, "117": 172, "178": 172, "176": 172, "266h3": 172, "213": 172, "119l": 172, "782": 172, "547zm5": 172, "493a7": 172, "063": 172, "186a": 172, "186a7": 172, "123": 172, "127l": 172, "458a15": 172, "499": 172, "02l": 172, "317": 172, "143": 172, "317a15": 172, "02": 172, "458h": 172, "002zm12": 172, "0zm": 172, "44": 172, "56a1": 172, "12c": 172, "734": 172, "73": 172, "003a": 172, "23": 172, "265c": 172, "671": 172, "103": 172, "416": 172, "005": 172, "148z": 172, "support": [172, 178, 194], "authent": 173, "login": 173, "logout": 173, "select": 174, "slice": 174, "object": [174, 189, 200], "decor": 175, "annot": 175, "behavior": 175, "us": [175, 181, 195], "advanc": 175, "what": [175, 177, 180, 183, 184, 185, 188, 189, 193, 194, 203], "next": [175, 177, 180, 183, 184, 185, 188, 189, 193], "clip": 176, "understand": 177, "problem": 177, "challeng": 177, "overrid": 178, "exist": 178, "uri": 179, "an": [180, 189], "unknown": 180, "handl": 180, "resolv": 180, "copi": [180, 189], "anoth": 180, "neural": [181, 190], "network": [181, 190, 195], "fluent": 182, "interfac": 182, "method": 182, "blobdata": 182, "imagedata": 182, "contentproperti": 182, "textdata": 182, "singletonsugar": 182, "audiodata": 182, "meshdata": 182, "videodata": 182, "urifil": 182, "arbitrari": 185, "byte": [185, 197], "base64": [185, 197], "visual": [186, 199], "selector": 187, "auto": 187, "ravel": 187, "dunder": 187, "syntax": [187, 192], "sugari": 187, "id": 188, "boolean": 188, "mask": 188, "flatten": 188, "handi": 188, "shuffl": 188, "split": 188, "singl": 189, "local": 189, "against": 191, "ground": 191, "truth": 191, "identifi": 191, "label": 191, "metric": 191, "function": 191, "onc": 191, "wise": 191, "condit": 192, "oper": 192, "differ": 194, "between": [194, 200], "which": 194, "side": 194, "gpu": [194, 195], "when": 195, "choos": 195, "thread": 195, "map_batch": 195, "overlap": 195, "cpu": 195, "comput": 195, "why": 195, "129": 195, "128": 195, "time": 195, "extern": 196, "flow": 196, "executor": 196, "accept": 196, "scheme": 196, "more": 196, "wire": 197, "pickl": 197, "disk": 197, "stream": 197, "over": 198, "modifi": 198, "through": 198, "projector": 199, "valid": 200, "incom": 200, "respons": 200, "recurs": 200, "jupyt": 201, "notebook": 201, "colab": 201, "rich": 201, "pycharm": 201, "user": [201, 203], "instal": [202, 204], "appl": 202, "silicon": 202, "check": 202, "termin": 202, "homebrew": 202, "depend": 202, "wheel": 202, "compar": 203, "altern": 203, "hug": 203, "dataset": 203, "To": 203, "awkwardarrai": 203, "zarr": 203, "jina": 203, "welcom": 204, "protocol": [205, 206], "densendarrayproto": [205, 206], "documentarrayproto": [205, 206], "documentproto": [205, 206], "evaluationsentri": [205, 206], "scoresentri": [205, 206], "namedscoreproto": [205, 206], "ndarrayproto": [205, 206], "sparsendarrayproto": [205, 206], "scalar": [205, 206], "valu": [205, 206], "rebuild": 206}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Annlite": [[0, "annlite"]], "Usage": [[0, "usage"], [2, "usage"], [5, "usage"], [6, "usage"], [7, "usage"], [8, "usage"]], "Config": [[0, "config"], [2, "config"], [5, "config"], [7, "config"], [8, "config"]], "Vector search with filter": [[0, "vector-search-with-filter"], [5, "vector-search-with-filter"]], "Example of .find with a filter only": [[0, "example-of-find-with-a-filter-only"], [8, "example-of-find-with-a-filter-only"]], "Example of .find with query vector and filter": [[0, "example-of-find-with-query-vector-and-filter"], [8, "example-of-find-with-query-vector-and-filter"]], "One Million Scale Benchmark": [[1, "one-million-scale-benchmark"]], "Benchmark results": [[1, "benchmark-results"]], "Charts": [[1, "charts"]], "Benchmark setup": [[1, "benchmark-setup"]], "Nearest neighbour search settings": [[1, "nearest-neighbour-search-settings"]], "Rationale on experiment design": [[1, "rationale-on-experiment-design"]], "Limitations": [[1, "limitations"]], "Incompleteness on the stores": [[1, "incompleteness-on-the-stores"]], "Client/server setup": [[1, "client-server-setup"]], "Conclusions": [[1, "conclusions"]], "Elasticsearch": [[2, "elasticsearch"]], "Start Elastic service": [[2, "start-elastic-service"]], "Create DocumentArray with Elasticsearch backend": [[2, "create-documentarray-with-elasticsearch-backend"]], "Secure connection": [[2, "secure-connection"]], "Bulk request customization": [[2, "bulk-request-customization"]], "Note": [[2, null], [2, null], [6, null]], "Vector search with filter query": [[2, "vector-search-with-filter-query"], [6, "vector-search-with-filter-query"]], "Search by filter query": [[2, "search-by-filter-query"], [6, "search-by-filter-query"]], "Search by .text field": [[2, "search-by-text-field"], [6, "search-by-text-field"]], "Search by .tags field": [[2, "search-by-tags-field"], [6, "search-by-tags-field"]], "Add New Document Store": [[3, "add-new-document-store"]], "Step 1: create the folder": [[3, "step-1-create-the-folder"]], "Step 2: implement getsetdel.py": [[3, "step-2-implement-getsetdel-py"]], "Step 3: implement seqlike.py": [[3, "step-3-implement-seqlike-py"]], "Step 4: implement backend.py": [[3, "step-4-implement-backend-py"]], "Step 5: implement find.py": [[3, "step-5-implement-find-py"]], "Step 6: summarize everything in __init__.py.": [[3, "step-6-summarize-everything-in-init-py"]], "Step 7: subclass from DocumentArray": [[3, "step-7-subclass-from-documentarray"]], "Step 8: add entrypoint to DocumentArray": [[3, "step-8-add-entrypoint-to-documentarray"]], "On pull request: add tests and type-hint": [[3, "on-pull-request-add-tests-and-type-hint"]], "Document Store": [[4, "document-store"]], "Construct": [[4, "construct"], [175, "construct"], [180, "construct"], [189, "construct"]], "Subindices": [[4, null], [167, null]], "Construct with config": [[4, "construct-with-config"]], "Creating DocumentArrays without specifying index": [[4, null]], "Feature summary": [[4, "feature-summary"]], "Vector search example": [[4, "vector-search-example"]], "Vector search with filter example": [[4, "vector-search-with-filter-example"]], "Filter example": [[4, "filter-example"]], "Persistence, mutations and context manager": [[4, "persistence-mutations-and-context-manager"]], "Known limitations": [[4, "known-limitations"]], "Multiple references to the same storage backend": [[4, "multiple-references-to-the-same-storage-backend"]], "Out-of-array modification": [[4, "out-of-array-modification"]], "Performance issue caused by list-like structure": [[4, "performance-issue-caused-by-list-like-structure"]], "Hint": [[4, null]], "Elements access is slower": [[4, "elements-access-is-slower"]], "Qdrant": [[5, "qdrant"]], "Start Qdrant service": [[5, "start-qdrant-service"]], "Create DocumentArray with Qdrant backend": [[5, "create-documentarray-with-qdrant-backend"]], "Minimum example": [[5, "minimum-example"], [8, "minimum-example"]], "Example of .find with a filter": [[5, "example-of-find-with-a-filter"]], "Example of .filter with a filter": [[5, "example-of-filter-with-a-filter"]], "Redis": [[6, "redis"]], "Start Redis service": [[6, "start-redis-service"]], "Create DocumentArray with Redis backend": [[6, "create-documentarray-with-redis-backend"]], "Configuration": [[6, "configuration"]], "Update Vector Search Indexing Schema": [[6, "update-vector-search-indexing-schema"]], "SQLite": [[7, "sqlite"]], "Weaviate": [[8, "weaviate"]], "Start Weaviate service": [[8, "start-weaviate-service"]], "Create DocumentArray with Weaviate backend": [[8, "create-documentarray-with-weaviate-backend"]], "Filtering": [[8, "filtering"]], "Sorting": [[8, "sorting"]], "Example of .find with vector and sort": [[8, "example-of-find-with-vector-and-sort"]], "Set minimum certainty on query results": [[8, "set-minimum-certainty-on-query-results"]], "Include additional properties in the return": [[8, "include-additional-properties-in-the-return"]], "GraphQL": [[9, "graphql"]], "Basic example": [[9, "basic-example"]], "Integrate with FastAPI": [[9, "integrate-with-fastapi"]], "PyTorch/Deep Learning Frameworks": [[10, "pytorch-deep-learning-frameworks"]], "Load, map, batch in one-shot": [[10, "load-map-batch-in-one-shot"]], " Python API": [[11, "python-api"]], "docarray - Document and DocumentArray": [[11, "docarray-document-and-documentarray"]], "docarray.dataclasses - Dataclass": [[11, "docarray-dataclasses-dataclass"]], "docarray.array - Document stores": [[11, "docarray-array-document-stores"]], "docarray package": [[12, "docarray-package"]], "Subpackages": [[12, "subpackages"], [13, "subpackages"], [21, "subpackages"], [59, "subpackages"], [110, "subpackages"], [138, "subpackages"], [147, "subpackages"], [155, "subpackages"]], "Submodules": [[12, "submodules"], [13, "submodules"], [21, "submodules"], [23, "submodules"], [33, "submodules"], [54, "submodules"], [59, "submodules"], [60, "submodules"], [66, "submodules"], [71, "submodules"], [76, "submodules"], [81, "submodules"], [87, "submodules"], [93, "submodules"], [98, "submodules"], [105, "submodules"], [110, "submodules"], [113, "submodules"], [138, "submodules"], [139, "submodules"], [147, "submodules"], [149, "submodules"], [151, "submodules"], [153, "submodules"], [155, "submodules"], [157, "submodules"]], "Module contents": [[12, "module-docarray"], [13, "module-docarray.array"], [21, "module-docarray.array.mixins"], [23, "module-docarray.array.mixins.dataloader"], [33, "module-docarray.array.mixins.io"], [54, "module-docarray.array.queryset"], [59, "module-docarray.array.storage"], [60, "module-docarray.array.storage.annlite"], [66, "module-docarray.array.storage.base"], [71, "module-docarray.array.storage.elastic"], [76, "module-docarray.array.storage.memory"], [81, "module-docarray.array.storage.qdrant"], [87, "module-docarray.array.storage.redis"], [93, "module-docarray.array.storage.sqlite"], [98, "module-docarray.array.storage.weaviate"], [105, "module-docarray.dataclasses"], [110, "module-docarray.document"], [113, "module-docarray.document.mixins"], [138, "module-docarray.math"], [139, "module-docarray.math.distance"], [147, "module-docarray.proto"], [149, "module-docarray.proto.io"], [151, "module-docarray.proto.pb"], [153, "module-docarray.proto.pb2"], [155, "module-docarray.score"], [157, "module-docarray.score.mixins"], [160, "module-docarray.typing"]], "docarray.array package": [[13, "docarray-array-package"]], "docarray.array.annlite module": [[14, "module-docarray.array.annlite"]], "docarray.array.base module": [[15, "module-docarray.array.base"]], "docarray.array.chunk module": [[16, "module-docarray.array.chunk"]], "docarray.array.document module": [[17, "module-docarray.array.document"]], "docarray.array.elastic module": [[18, "module-docarray.array.elastic"]], "docarray.array.match module": [[19, "module-docarray.array.match"]], "docarray.array.memory module": [[20, "module-docarray.array.memory"]], "docarray.array.mixins package": [[21, "docarray-array-mixins-package"]], "docarray.array.mixins.content module": [[22, "module-docarray.array.mixins.content"]], "docarray.array.mixins.dataloader package": [[23, "docarray-array-mixins-dataloader-package"]], "docarray.array.mixins.dataloader.helper module": [[24, "module-docarray.array.mixins.dataloader.helper"]], "docarray.array.mixins.delitem module": [[25, "module-docarray.array.mixins.delitem"]], "docarray.array.mixins.embed module": [[26, "module-docarray.array.mixins.embed"]], "docarray.array.mixins.empty module": [[27, "module-docarray.array.mixins.empty"]], "docarray.array.mixins.evaluation module": [[28, "module-docarray.array.mixins.evaluation"]], "docarray.array.mixins.find module": [[29, "module-docarray.array.mixins.find"]], "docarray.array.mixins.getattr module": [[30, "module-docarray.array.mixins.getattr"]], "docarray.array.mixins.getitem module": [[31, "module-docarray.array.mixins.getitem"]], "docarray.array.mixins.group module": [[32, "module-docarray.array.mixins.group"]], "docarray.array.mixins.io package": [[33, "docarray-array-mixins-io-package"]], "docarray.array.mixins.io.binary module": [[34, "module-docarray.array.mixins.io.binary"]], "docarray.array.mixins.io.common module": [[35, "module-docarray.array.mixins.io.common"]], "docarray.array.mixins.io.csv module": [[36, "module-docarray.array.mixins.io.csv"]], "docarray.array.mixins.io.dataframe module": [[37, "module-docarray.array.mixins.io.dataframe"]], "docarray.array.mixins.io.from_gen module": [[38, "module-docarray.array.mixins.io.from_gen"]], "docarray.array.mixins.io.json module": [[39, "module-docarray.array.mixins.io.json"]], "docarray.array.mixins.io.pbar module": [[40, "module-docarray.array.mixins.io.pbar"]], "docarray.array.mixins.io.pushpull module": [[41, "module-docarray.array.mixins.io.pushpull"]], "docarray.array.mixins.match module": [[42, "module-docarray.array.mixins.match"]], "docarray.array.mixins.parallel module": [[43, "module-docarray.array.mixins.parallel"]], "docarray.array.mixins.plot module": [[44, "module-docarray.array.mixins.plot"]], "docarray.array.mixins.post module": [[45, "module-docarray.array.mixins.post"]], "docarray.array.mixins.pydantic module": [[46, "module-docarray.array.mixins.pydantic"]], "docarray.array.mixins.reduce module": [[47, "module-docarray.array.mixins.reduce"]], "docarray.array.mixins.sample module": [[48, "module-docarray.array.mixins.sample"]], "docarray.array.mixins.setitem module": [[49, "module-docarray.array.mixins.setitem"]], "docarray.array.mixins.strawberry module": [[50, "module-docarray.array.mixins.strawberry"]], "docarray.array.mixins.text module": [[51, "module-docarray.array.mixins.text"]], "docarray.array.mixins.traverse module": [[52, "module-docarray.array.mixins.traverse"]], "docarray.array.qdrant module": [[53, "module-docarray.array.qdrant"]], "docarray.array.queryset package": [[54, "docarray-array-queryset-package"]], "docarray.array.queryset.lookup module": [[55, "module-docarray.array.queryset.lookup"]], "docarray.array.queryset.parser module": [[56, "module-docarray.array.queryset.parser"]], "docarray.array.redis module": [[57, "module-docarray.array.redis"]], "docarray.array.sqlite module": [[58, "module-docarray.array.sqlite"]], "docarray.array.storage package": [[59, "docarray-array-storage-package"]], "docarray.array.storage.annlite package": [[60, "docarray-array-storage-annlite-package"]], "docarray.array.storage.annlite.backend module": [[61, "module-docarray.array.storage.annlite.backend"]], "docarray.array.storage.annlite.find module": [[62, "module-docarray.array.storage.annlite.find"]], "docarray.array.storage.annlite.getsetdel module": [[63, "module-docarray.array.storage.annlite.getsetdel"]], "docarray.array.storage.annlite.helper module": [[64, "module-docarray.array.storage.annlite.helper"]], "docarray.array.storage.annlite.seqlike module": [[65, "module-docarray.array.storage.annlite.seqlike"]], "docarray.array.storage.base package": [[66, "docarray-array-storage-base-package"]], "docarray.array.storage.base.backend module": [[67, "module-docarray.array.storage.base.backend"]], "docarray.array.storage.base.getsetdel module": [[68, "module-docarray.array.storage.base.getsetdel"]], "docarray.array.storage.base.helper module": [[69, "module-docarray.array.storage.base.helper"]], "docarray.array.storage.base.seqlike module": [[70, "module-docarray.array.storage.base.seqlike"]], "docarray.array.storage.elastic package": [[71, "docarray-array-storage-elastic-package"]], "docarray.array.storage.elastic.backend module": [[72, "module-docarray.array.storage.elastic.backend"]], "docarray.array.storage.elastic.find module": [[73, "module-docarray.array.storage.elastic.find"]], "docarray.array.storage.elastic.getsetdel module": [[74, "module-docarray.array.storage.elastic.getsetdel"]], "docarray.array.storage.elastic.seqlike module": [[75, "module-docarray.array.storage.elastic.seqlike"]], "docarray.array.storage.memory package": [[76, "docarray-array-storage-memory-package"]], "docarray.array.storage.memory.backend module": [[77, "module-docarray.array.storage.memory.backend"]], "docarray.array.storage.memory.find module": [[78, "module-docarray.array.storage.memory.find"]], "docarray.array.storage.memory.getsetdel module": [[79, "module-docarray.array.storage.memory.getsetdel"]], "docarray.array.storage.memory.seqlike module": [[80, "module-docarray.array.storage.memory.seqlike"]], "docarray.array.storage.qdrant package": [[81, "docarray-array-storage-qdrant-package"]], "docarray.array.storage.qdrant.backend module": [[82, "module-docarray.array.storage.qdrant.backend"]], "docarray.array.storage.qdrant.find module": [[83, "module-docarray.array.storage.qdrant.find"]], "docarray.array.storage.qdrant.getsetdel module": [[84, "module-docarray.array.storage.qdrant.getsetdel"]], "docarray.array.storage.qdrant.helper module": [[85, "module-docarray.array.storage.qdrant.helper"]], "docarray.array.storage.qdrant.seqlike module": [[86, "module-docarray.array.storage.qdrant.seqlike"]], "docarray.array.storage.redis package": [[87, "docarray-array-storage-redis-package"]], "docarray.array.storage.redis.backend module": [[88, "module-docarray.array.storage.redis.backend"]], "docarray.array.storage.redis.find module": [[89, "module-docarray.array.storage.redis.find"]], "docarray.array.storage.redis.getsetdel module": [[90, "module-docarray.array.storage.redis.getsetdel"]], "docarray.array.storage.redis.seqlike module": [[91, "module-docarray.array.storage.redis.seqlike"]], "docarray.array.storage.registry module": [[92, "module-docarray.array.storage.registry"]], "docarray.array.storage.sqlite package": [[93, "docarray-array-storage-sqlite-package"]], "docarray.array.storage.sqlite.backend module": [[94, "module-docarray.array.storage.sqlite.backend"]], "docarray.array.storage.sqlite.getsetdel module": [[95, "module-docarray.array.storage.sqlite.getsetdel"]], "docarray.array.storage.sqlite.helper module": [[96, "module-docarray.array.storage.sqlite.helper"]], "docarray.array.storage.sqlite.seqlike module": [[97, "module-docarray.array.storage.sqlite.seqlike"]], "docarray.array.storage.weaviate package": [[98, "docarray-array-storage-weaviate-package"]], "docarray.array.storage.weaviate.backend module": [[99, "module-docarray.array.storage.weaviate.backend"]], "docarray.array.storage.weaviate.find module": [[100, "module-docarray.array.storage.weaviate.find"]], "docarray.array.storage.weaviate.getsetdel module": [[101, "module-docarray.array.storage.weaviate.getsetdel"]], "docarray.array.storage.weaviate.seqlike module": [[102, "module-docarray.array.storage.weaviate.seqlike"]], "docarray.array.weaviate module": [[103, "module-docarray.array.weaviate"]], "docarray.base module": [[104, "module-docarray.base"]], "docarray.dataclasses package": [[105, "docarray-dataclasses-package"]], "docarray.dataclasses.enums module": [[106, "module-docarray.dataclasses.enums"]], "docarray.dataclasses.getter module": [[107, "module-docarray.dataclasses.getter"]], "docarray.dataclasses.setter module": [[108, "module-docarray.dataclasses.setter"]], "docarray.dataclasses.types module": [[109, "module-docarray.dataclasses.types"]], "docarray.document package": [[110, "docarray-document-package"]], "docarray.document.data module": [[111, "module-docarray.document.data"]], "docarray.document.generators module": [[112, "module-docarray.document.generators"]], "docarray.document.mixins package": [[113, "docarray-document-mixins-package"]], "docarray.document.mixins.attribute module": [[114, "module-docarray.document.mixins.attribute"]], "docarray.document.mixins.audio module": [[115, "module-docarray.document.mixins.audio"]], "docarray.document.mixins.blob module": [[116, "module-docarray.document.mixins.blob"]], "docarray.document.mixins.content module": [[117, "module-docarray.document.mixins.content"]], "docarray.document.mixins.convert module": [[118, "module-docarray.document.mixins.convert"]], "docarray.document.mixins.dump module": [[119, "module-docarray.document.mixins.dump"]], "docarray.document.mixins.featurehash module": [[120, "module-docarray.document.mixins.featurehash"]], "docarray.document.mixins.helper module": [[121, "module-docarray.document.mixins.helper"]], "docarray.document.mixins.image module": [[122, "module-docarray.document.mixins.image"]], "docarray.document.mixins.mesh module": [[123, "module-docarray.document.mixins.mesh"]], "docarray.document.mixins.multimodal module": [[124, "module-docarray.document.mixins.multimodal"]], "docarray.document.mixins.plot module": [[125, "module-docarray.document.mixins.plot"]], "docarray.document.mixins.porting module": [[126, "module-docarray.document.mixins.porting"]], "docarray.document.mixins.property module": [[127, "module-docarray.document.mixins.property"]], "docarray.document.mixins.protobuf module": [[128, "module-docarray.document.mixins.protobuf"]], "docarray.document.mixins.pydantic module": [[129, "module-docarray.document.mixins.pydantic"]], "docarray.document.mixins.rich_embedding module": [[130, "module-docarray.document.mixins.rich_embedding"]], "docarray.document.mixins.strawberry module": [[131, "module-docarray.document.mixins.strawberry"]], "docarray.document.mixins.sugar module": [[132, "module-docarray.document.mixins.sugar"]], "docarray.document.mixins.text module": [[133, "module-docarray.document.mixins.text"]], "docarray.document.mixins.video module": [[134, "module-docarray.document.mixins.video"]], "docarray.document.pydantic_model module": [[135, "module-docarray.document.pydantic_model"]], "docarray.document.strawberry_type module": [[136, "module-docarray.document.strawberry_type"]], "docarray.helper module": [[137, "module-docarray.helper"]], "docarray.math package": [[138, "docarray-math-package"]], "docarray.math.distance package": [[139, "docarray-math-distance-package"]], "docarray.math.distance.numpy module": [[140, "module-docarray.math.distance.numpy"]], "docarray.math.distance.paddle module": [[141, "docarray-math-distance-paddle-module"]], "docarray.math.distance.tensorflow module": [[142, "module-docarray.math.distance.tensorflow"]], "docarray.math.distance.torch module": [[143, "module-docarray.math.distance.torch"]], "docarray.math.evaluation module": [[144, "module-docarray.math.evaluation"]], "docarray.math.helper module": [[145, "module-docarray.math.helper"]], "docarray.math.ndarray module": [[146, "module-docarray.math.ndarray"]], "docarray.proto package": [[147, "docarray-proto-package"]], "docarray.proto.docarray_pb2 module": [[148, "module-docarray.proto.docarray_pb2"]], "docarray.proto.io package": [[149, "docarray-proto-io-package"]], "docarray.proto.io.ndarray module": [[150, "module-docarray.proto.io.ndarray"]], "docarray.proto.pb package": [[151, "docarray-proto-pb-package"]], "docarray.proto.pb.docarray_pb2 module": [[152, "module-docarray.proto.pb.docarray_pb2"]], "docarray.proto.pb2 package": [[153, "docarray-proto-pb2-package"]], "docarray.proto.pb2.docarray_pb2 module": [[154, "module-docarray.proto.pb2.docarray_pb2"]], "docarray.score package": [[155, "docarray-score-package"]], "docarray.score.data module": [[156, "module-docarray.score.data"]], "docarray.score.mixins package": [[157, "docarray-score-mixins-package"]], "docarray.score.mixins.property module": [[158, "module-docarray.score.mixins.property"]], "docarray.score.mixins.representer module": [[159, "module-docarray.score.mixins.representer"]], "docarray.typing package": [[160, "docarray-typing-package"]], "docarray": [[161, "docarray"]], "Changelog": [[162, "changelog"]], "0.11.0: change DocumentArrayInMemory\u2019s container to list": [[162, "change-documentarrayinmemory-s-container-to-list"]], "0.10.0: add high-level dataclass API to Document": [[162, "add-high-level-dataclass-api-to-document"]], "0.5.0: add storage backend to DocumentArray": [[162, "add-storage-backend-to-documentarray"]], "0.4.0: change on the DocumentArray serialization format": [[162, "change-on-the-documentarray-serialization-format"]], "0.3.0: change on the default JSON/dict serialization strategy": [[162, "change-on-the-default-json-dict-serialization-strategy"]], "0.2.0: change on the content field name": [[162, "change-on-the-content-field-name"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-unmute\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.563 2.069A.75.75 0 018 2.75v10.5a.75.75 0 01-1.238.57L3.472 11H1.75A1.75 1.75 0 010 9.25v-2.5C0 5.784.784 5 1.75 5h1.723l3.289-2.82a.75.75 0 01.801-.111zM6.5 4.38L4.238 6.319a.75.75 0 01-.488.181h-2a.25.25 0 00-.25.25v2.5c0 .138.112.25.25.25h2a.75.75 0 01.488.18L6.5 11.62V4.38zm6.096-2.038a.75.75 0 011.06 0 8 8 0 010 11.314.75.75 0 01-1.06-1.06 6.5 6.5 0 000-9.193.75.75 0 010-1.06v-.001zm-1.06 2.121a.75.75 0 10-1.061 1.061 3.5 3.5 0 010 4.95.75.75 0 101.06 1.06 5 5 0 000-7.07l.001-.001z\"></path></svg> Audio": [[163, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-unmute-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m7-563-2-069a-75-75-0-018-2-75v10-5a-75-75-0-01-1-238-57l3-472-11h1-75a1-75-1-75-0-010-9-25v-2-5c0-5-784-784-5-1-75-5h1-723l3-289-2-82a-75-75-0-01-801-111zm6-5-4-38l4-238-6-319a-75-75-0-01-488-181h-2a-25-25-0-00-25-25v2-5c0-138-112-25-25-25h2a-75-75-0-01-488-18l6-5-11-62v4-38zm6-096-2-038a-75-75-0-011-06-0-8-8-0-010-11-314-75-75-0-01-1-06-1-06-6-5-6-5-0-000-9-193-75-75-0-010-1-06v-001zm-1-06-2-121a-75-75-0-10-1-061-1-061-3-5-3-5-0-010-4-95-75-75-0-101-06-1-06-5-5-0-000-7-07l-001-001z-path-svg-audio"]], "Load .wav file": [[163, "load-wav-file"]], "Save as .wav file": [[163, "save-as-wav-file"]], "Example": [[163, "example"], [194, "example"]], "Other tools & libraries for audio data": [[163, "other-tools-libraries-for-audio-data"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-image\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M1.75 2.5a.25.25 0 00-.25.25v10.5c0 .138.112.25.25.25h.94a.76.76 0 01.03-.03l6.077-6.078a1.75 1.75 0 012.412-.06L14.5 10.31V2.75a.25.25 0 00-.25-.25H1.75zm12.5 11H4.81l5.048-5.047a.25.25 0 01.344-.009l4.298 3.889v.917a.25.25 0 01-.25.25zm1.75-.25V2.75A1.75 1.75 0 0014.25 1H1.75A1.75 1.75 0 000 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0016 13.25zM5.5 6a.5.5 0 11-1 0 .5.5 0 011 0zM7 6a2 2 0 11-4 0 2 2 0 014 0z\"></path></svg> Image": [[164, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-image-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m1-75-2-5a-25-25-0-00-25-25v10-5c0-138-112-25-25-25h-94a-76-76-0-01-03-03l6-077-6-078a1-75-1-75-0-012-412-06l14-5-10-31v2-75a-25-25-0-00-25-25h1-75zm12-5-11h4-81l5-048-5-047a-25-25-0-01-344-009l4-298-3-889v-917a-25-25-0-01-25-25zm1-75-25v2-75a1-75-1-75-0-0014-25-1h1-75a1-75-1-75-0-000-2-75v10-5c0-14-216-784-15-1-75-15h12-5a1-75-1-75-0-0016-13-25zm5-5-6a-5-5-0-11-1-0-5-5-0-011-0zm7-6a2-2-0-11-4-0-2-2-0-014-0z-path-svg-image"]], "Load image data": [[164, "load-image-data"]], "Simple image processing": [[164, "simple-image-processing"]], "Display image sprite": [[164, "display-image-sprite"], [201, "display-image-sprite"]], "Segment large complicated image into small ones": [[164, "segment-large-complicated-image-into-small-ones"]], "Multimodal Data": [[165, "multimodal-data"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-package\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M8.878.392a1.75 1.75 0 00-1.756 0l-5.25 3.045A1.75 1.75 0 001 4.951v6.098c0 .624.332 1.2.872 1.514l5.25 3.045a1.75 1.75 0 001.756 0l5.25-3.045c.54-.313.872-.89.872-1.514V4.951c0-.624-.332-1.2-.872-1.514L8.878.392zM7.875 1.69a.25.25 0 01.25 0l4.63 2.685L8 7.133 3.245 4.375l4.63-2.685zM2.5 5.677v5.372c0 .09.047.171.125.216l4.625 2.683V8.432L2.5 5.677zm6.25 8.271l4.625-2.683a.25.25 0 00.125-.216V5.677L8.75 8.432v5.516z\"></path></svg> 3D Mesh": [[166, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-package-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m8-878-392a1-75-1-75-0-00-1-756-0l-5-25-3-045a1-75-1-75-0-001-4-951v6-098c0-624-332-1-2-872-1-514l5-25-3-045a1-75-1-75-0-001-756-0l5-25-3-045c-54-313-872-89-872-1-514v4-951c0-624-332-1-2-872-1-514l8-878-392zm7-875-1-69a-25-25-0-01-25-0l4-63-2-685l8-7-133-3-245-4-375l4-63-2-685zm2-5-5-677v5-372c0-09-047-171-125-216l4-625-2-683v8-432l2-5-5-677zm6-25-8-271l4-625-2-683a-25-25-0-00-125-216v5-677l8-75-8-432v5-516z-path-svg-3d-mesh"]], "Vertices and faces representation": [[166, "vertices-and-faces-representation"]], "Point cloud representation": [[166, "point-cloud-representation"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-stack\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.122.392a1.75 1.75 0 011.756 0l5.003 2.902c.83.481.83 1.68 0 2.162L8.878 8.358a1.75 1.75 0 01-1.756 0L2.119 5.456a1.25 1.25 0 010-2.162L7.122.392zM8.125 1.69a.25.25 0 00-.25 0l-4.63 2.685 4.63 2.685a.25.25 0 00.25 0l4.63-2.685-4.63-2.685zM1.601 7.789a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0L1.874 8.814A.75.75 0 011.6 7.789zm0 3.5a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0l-5.248-3.044a.75.75 0 01-.273-1.025z\"></path></svg> Multi-modal": [[167, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-stack-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m7-122-392a1-75-1-75-0-011-756-0l5-003-2-902c-83-481-83-1-68-0-2-162l8-878-8-358a1-75-1-75-0-01-1-756-0l2-119-5-456a1-25-1-25-0-010-2-162l7-122-392zm8-125-1-69a-25-25-0-00-25-0l-4-63-2-685-4-63-2-685a-25-25-0-00-25-0l4-63-2-685-4-63-2-685zm1-601-7-789a-75-75-0-011-025-273l5-249-3-044a-25-25-0-00-25-0l5-249-3-044a-75-75-0-01-752-1-298l-5-248-3-044a1-75-1-75-0-01-1-756-0l1-874-8-814a-75-75-0-011-6-7-789zm0-3-5a-75-75-0-011-025-273l5-249-3-044a-25-25-0-00-25-0l5-249-3-044a-75-75-0-01-752-1-298l-5-248-3-044a1-75-1-75-0-01-1-756-0l-5-248-3-044a-75-75-0-01-273-1-025z-path-svg-multi-modal"]], "Model your data": [[167, "model-your-data"]], "Instantiate a Document": [[167, "instantiate-a-document"]], "Nested dataclasses and list types": [[167, "nested-dataclasses-and-list-types"]], "Access the data": [[167, "access-the-data"]], "Generate embeddings": [[167, "generate-embeddings"]], "Embed each modality": [[167, "embed-each-modality"]], "Embed parent Document": [[167, "embed-parent-document"]], "Perform search": [[167, "perform-search"]], "Find Document by modality embedding": [[167, "find-document-by-modality-embedding"]], "Find Document by combined embedding": [[167, "find-document-by-combined-embedding"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-table\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v3.585a.746.746 0 010 .83v8.085A1.75 1.75 0 0114.25 16H6.309a.748.748 0 01-1.118 0H1.75A1.75 1.75 0 010 14.25V6.165a.746.746 0 010-.83V1.75zM1.5 6.5v7.75c0 .138.112.25.25.25H5v-8H1.5zM5 5H1.5V1.75a.25.25 0 01.25-.25H5V5zm1.5 1.5v8h7.75a.25.25 0 00.25-.25V6.5h-8zm8-1.5h-8V1.5h7.75a.25.25 0 01.25.25V5z\"></path></svg> Table": [[168, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-table-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m0-1-75c0-784-784-0-1-75-0h12-5c15-216-0-16-784-16-1-75v3-585a-746-746-0-010-83v8-085a1-75-1-75-0-0114-25-16h6-309a-748-748-0-01-1-118-0h1-75a1-75-1-75-0-010-14-25v6-165a-746-746-0-010-83v1-75zm1-5-6-5v7-75c0-138-112-25-25-25h5v-8h1-5zm5-5h1-5v1-75a-25-25-0-01-25-25h5v5zm1-5-1-5v8h7-75a-25-25-0-00-25-25v6-5h-8zm8-1-5h-8v1-5h7-75a-25-25-0-01-25-25v5z-path-svg-table"]], "Load CSV table": [[168, "load-csv-table"]], "Save as CSV file": [[168, "save-as-csv-file"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-typography\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M6.21 8.5L4.574 3.594 2.857 8.5H6.21zm.5 1.5l.829 2.487a.75.75 0 001.423-.474L5.735 2.332a1.216 1.216 0 00-2.302-.018l-3.39 9.688a.75.75 0 001.415.496L2.332 10H6.71zm3.13-4.358C10.53 4.374 11.87 4 13 4c1.5 0 3 .939 3 2.601v5.649a.75.75 0 01-1.448.275C13.995 12.82 13.3 13 12.5 13c-.77 0-1.514-.231-2.078-.709-.577-.488-.922-1.199-.922-2.041 0-.694.265-1.411.887-1.944C11 7.78 11.88 7.5 13 7.5h1.5v-.899c0-.54-.5-1.101-1.5-1.101-.869 0-1.528.282-1.84.858a.75.75 0 11-1.32-.716zM14.5 9H13c-.881 0-1.375.22-1.637.444-.253.217-.363.5-.363.806 0 .408.155.697.39.896.249.21.63.354 1.11.354.732 0 1.26-.209 1.588-.449.35-.257.412-.495.412-.551V9z\"></path></svg> Text": [[169, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-typography-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m6-21-8-5l4-574-3-594-2-857-8-5h6-21zm-5-1-5l-829-2-487a-75-75-0-001-423-474l5-735-2-332a1-216-1-216-0-00-2-302-018l-3-39-9-688a-75-75-0-001-415-496l2-332-10h6-71zm3-13-4-358c10-53-4-374-11-87-4-13-4c1-5-0-3-939-3-2-601v5-649a-75-75-0-01-1-448-275c13-995-12-82-13-3-13-12-5-13c-77-0-1-514-231-2-078-709-577-488-922-1-199-922-2-041-0-694-265-1-411-887-1-944c11-7-78-11-88-7-5-13-7-5h1-5v-899c0-54-5-1-101-1-5-1-101-869-0-1-528-282-1-84-858a-75-75-0-11-1-32-716zm14-5-9h13c-881-0-1-375-22-1-637-444-253-217-363-5-363-806-0-408-155-697-39-896-249-21-63-354-1-11-354-732-0-1-26-209-1-588-449-35-257-412-495-412-551v9z-path-svg-text"]], "Segment long documents": [[169, "segment-long-documents"]], "Convert text into ndarray": [[169, "convert-text-into-ndarray"]], "Convert ndarray back to text": [[169, "convert-ndarray-back-to-text"]], "Simple text matching via feature hashing": [[169, "simple-text-matching-via-feature-hashing"]], "Searching at chunk level with subindex": [[169, "searching-at-chunk-level-with-subindex"]], "Multi-modal Documents": [[169, null]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-device-camera-video\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M16 3.75a.75.75 0 00-1.136-.643L11 5.425V4.75A1.75 1.75 0 009.25 3h-7.5A1.75 1.75 0 000 4.75v6.5C0 12.216.784 13 1.75 13h7.5A1.75 1.75 0 0011 11.25v-.675l3.864 2.318A.75.75 0 0016 12.25v-8.5zm-5 5.075l3.5 2.1v-5.85l-3.5 2.1v1.65zM9.5 6.75v-2a.25.25 0 00-.25-.25h-7.5a.25.25 0 00-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-4.5z\"></path></svg> Video": [[170, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-device-camera-video-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m16-3-75a-75-75-0-00-1-136-643l11-5-425v4-75a1-75-1-75-0-009-25-3h-7-5a1-75-1-75-0-000-4-75v6-5c0-12-216-784-13-1-75-13h7-5a1-75-1-75-0-0011-11-25v-675l3-864-2-318a-75-75-0-0016-12-25v-8-5zm-5-5-075l3-5-2-1v-5-85l-3-5-2-1v1-65zm9-5-6-75v-2a-25-25-0-00-25-25h-7-5a-25-25-0-00-25-25v6-5c0-138-112-25-25-25h7-5a-25-25-0-00-25-25v-4-5z-path-svg-video"]], "Load video data": [[170, "load-video-data"]], "Key frame extraction": [[170, "key-frame-extraction"]], "Save as video file": [[170, "save-as-video-file"]], "Create Document from webcam": [[170, "create-document-from-webcam"]], "Data Management": [[171, "data-management"]], "Web Console": [[171, "web-console"]], "Python API": [[171, "python-api"]], "Push (create/update):": [[171, "push-create-update"]], "Pull (Read):": [[171, "pull-read"]], "List": [[171, "list"]], "Delete": [[171, "delete"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-rocket\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M14.064 0a8.75 8.75 0 00-6.187 2.563l-.459.458c-.314.314-.616.641-.904.979H3.31a1.75 1.75 0 00-1.49.833L.11 7.607a.75.75 0 00.418 1.11l3.102.954c.037.051.079.1.124.145l2.429 2.428c.046.046.094.088.145.125l.954 3.102a.75.75 0 001.11.418l2.774-1.707a1.75 1.75 0 00.833-1.49V9.485c.338-.288.665-.59.979-.904l.458-.459A8.75 8.75 0 0016 1.936V1.75A1.75 1.75 0 0014.25 0h-.186zM10.5 10.625c-.088.06-.177.118-.266.175l-2.35 1.521.548 1.783 1.949-1.2a.25.25 0 00.119-.213v-2.066zM3.678 8.116L5.2 5.766c.058-.09.117-.178.176-.266H3.309a.25.25 0 00-.213.119l-1.2 1.95 1.782.547zm5.26-4.493A7.25 7.25 0 0114.063 1.5h.186a.25.25 0 01.25.25v.186a7.25 7.25 0 01-2.123 5.127l-.459.458a15.21 15.21 0 01-2.499 2.02l-2.317 1.5-2.143-2.143 1.5-2.317a15.25 15.25 0 012.02-2.5l.458-.458h.002zM12 5a1 1 0 11-2 0 1 1 0 012 0zm-8.44 9.56a1.5 1.5 0 10-2.12-2.12c-.734.73-1.047 2.332-1.15 3.003a.23.23 0 00.265.265c.671-.103 2.273-.416 3.005-1.148z\"></path></svg> Cloud Support": [[172, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-rocket-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m14-064-0a8-75-8-75-0-00-6-187-2-563l-459-458c-314-314-616-641-904-979h3-31a1-75-1-75-0-00-1-49-833l-11-7-607a-75-75-0-00-418-1-11l3-102-954c-037-051-079-1-124-145l2-429-2-428c-046-046-094-088-145-125l-954-3-102a-75-75-0-001-11-418l2-774-1-707a1-75-1-75-0-00-833-1-49v9-485c-338-288-665-59-979-904l-458-459a8-75-8-75-0-0016-1-936v1-75a1-75-1-75-0-0014-25-0h-186zm10-5-10-625c-088-06-177-118-266-175l-2-35-1-521-548-1-783-1-949-1-2a-25-25-0-00-119-213v-2-066zm3-678-8-116l5-2-5-766c-058-09-117-178-176-266h3-309a-25-25-0-00-213-119l-1-2-1-95-1-782-547zm5-26-4-493a7-25-7-25-0-0114-063-1-5h-186a-25-25-0-01-25-25v-186a7-25-7-25-0-01-2-123-5-127l-459-458a15-21-15-21-0-01-2-499-2-02l-2-317-1-5-2-143-2-143-1-5-2-317a15-25-15-25-0-012-02-2-5l-458-458h-002zm12-5a1-1-0-11-2-0-1-1-0-012-0zm-8-44-9-56a1-5-1-5-0-10-2-12-2-12c-734-73-1-047-2-332-1-15-3-003a-23-23-0-00-265-265c-671-103-2-273-416-3-005-1-148z-path-svg-cloud-support"]], "Authentication": [[173, "authentication"]], "Login": [[173, "id1"]], "Logout": [[173, "logout"]], "Access Modality": [[174, "access-modality"]], "Return types": [[174, null]], "Document level access": [[174, "document-level-access"]], "Select nested fields": [[174, "select-nested-fields"], [174, "id1"]], "DocumentArray level access": [[174, "documentarray-level-access"]], "Select multiple fields": [[174, "select-multiple-fields"]], "Slice dataclass objects": [[174, "slice-dataclass-objects"]], "Slice List[Type] fields": [[174, "slice-list-type-fields"]], "Dataclass decorator": [[175, "dataclass-decorator"]], "Annotate class fields": [[175, "annotate-class-fields"]], "Behavior of field annotation": [[175, "behavior-of-field-annotation"]], "Construct from/to Document": [[175, "construct-from-to-document"]], "Use field() for advanced configs": [[175, "use-field-for-advanced-configs"]], "What\u2019s next?": [[175, "what-s-next"], [180, "what-s-next"], [183, "what-s-next"], [184, "what-s-next"], [185, "what-s-next"], [188, "what-s-next"], [189, "what-s-next"], [193, "what-s-next"]], "Process Modality": [[176, "process-modality"]], "Embed image and text via CLIP": [[176, "embed-image-and-text-via-clip"]], "Embed via CLIP-as-service": [[176, "embed-via-clip-as-service"]], "Dataclass": [[177, "dataclass"]], "What is multi-modality?": [[177, "what-is-multi-modality"]], "Understanding the problem": [[177, "understanding-the-problem"]], "Understanding the challenges": [[177, "understanding-the-challenges"]], "What\u2019s next": [[177, "what-s-next"]], "Support New Modality": [[178, "support-new-modality"]], "Create new types": [[178, "create-new-types"]], "Override existing types": [[178, "override-existing-types"]], "Access Attributes": [[179, "access-attributes"], [187, "access-attributes"]], "Content attributes": [[179, "content-attributes"]], "Load content from URI": [[179, "load-content-from-uri"]], "Convert content to data URI": [[179, null]], "Construct an empty Document": [[180, "construct-an-empty-document"]], "Construct with attributes": [[180, "construct-with-attributes"]], "Nested Document": [[180, "nested-document"]], "Unknown attributes handling": [[180, "unknown-attributes-handling"]], "Resolve unknown attributes with rules": [[180, "resolve-unknown-attributes-with-rules"]], "Copy from another Document": [[180, "copy-from-another-document"]], "Embedding": [[181, "embedding"]], "Fill embedding via neural network": [[181, "fill-embedding-via-neural-network"]], "On multiple Documents use DocumentArray": [[181, null], [181, null]], "Find nearest-neighbours": [[181, "find-nearest-neighbours"]], "Fluent Interface": [[182, "fluent-interface"]], "Methods": [[182, "methods"]], "BlobData": [[182, "blobdata"]], "ImageData": [[182, "imagedata"]], "Convert": [[182, "convert"]], "ContentProperty": [[182, "contentproperty"]], "TextData": [[182, "textdata"]], "SingletonSugar": [[182, "singletonsugar"]], "FeatureHash": [[182, "featurehash"]], "Porting": [[182, "porting"]], "Protobuf": [[182, "protobuf"]], "Pydantic": [[182, "pydantic"]], "Strawberry": [[182, "strawberry"]], "AudioData": [[182, "audiodata"]], "MeshData": [[182, "meshdata"]], "VideoData": [[182, "videodata"]], "UriFile": [[182, "urifile"]], "Document": [[183, "document"]], "Nested Structure": [[184, "nested-structure"]], "Serialization": [[185, "serialization"], [197, "serialization"]], "From/to JSON": [[185, "from-to-json"], [197, "from-to-json"]], "From/to arbitrary JSON": [[185, "from-to-arbitrary-json"]], "From/to bytes": [[185, "from-to-bytes"], [197, "from-to-bytes"]], "From/to base64": [[185, "from-to-base64"], [197, "from-to-base64"]], "From/to dict": [[185, "from-to-dict"]], "From/to Protobuf": [[185, "from-to-protobuf"], [197, "from-to-protobuf"]], "Visualization": [[186, "visualization"], [199, "visualization"]], "Attribute selector": [[187, "attribute-selector"]], "Auto-ravel on NdArray": [[187, "auto-ravel-on-ndarray"]], "Dunder syntax for nested attributes": [[187, "dunder-syntax-for-nested-attributes"]], "Content and embedding sugary attributes": [[187, "content-and-embedding-sugary-attributes"]], "Access Documents": [[188, "access-documents"]], "Basic indexing": [[188, "basic-indexing"]], "Index by Document id": [[188, "index-by-document-id"]], "Index by boolean mask": [[188, "index-by-boolean-mask"]], "Index by nested structure": [[188, "index-by-nested-structure"]], "Index by flatten": [[188, "index-by-flatten"]], "Other Handy Helpers": [[188, "other-handy-helpers"]], "Batching": [[188, "batching"]], "Sampling": [[188, "sampling"]], "Shuffling": [[188, "shuffling"]], "Splitting by .tags": [[188, "splitting-by-tags"]], "Construct an empty array": [[189, "construct-an-empty-array"]], "Construct with empty Documents": [[189, "construct-with-empty-documents"]], "Construct from list-like objects": [[189, "construct-from-list-like-objects"]], "Construct from multiple DocumentArray": [[189, "construct-from-multiple-documentarray"]], "Construct from a single Document": [[189, "construct-from-a-single-document"]], "Deep copy on elements": [[189, "deep-copy-on-elements"]], "Construct from local files": [[189, "construct-from-local-files"]], "Embed via Neural Network": [[190, "embed-via-neural-network"]], "Evaluate Matches": [[191, "evaluate-matches"]], "Evaluation against a ground truth array": [[191, "evaluation-against-a-ground-truth-array"]], "Document identifier": [[191, "document-identifier"]], "Evaluation via labels": [[191, "evaluation-via-labels"]], "Metric functions": [[191, "metric-functions"]], "Custom metrics": [[191, "custom-metrics"]], "Custom names": [[191, "custom-names"]], "Embed, match & evaluate at once": [[191, "embed-match-evaluate-at-once"]], "Batch-wise matching": [[191, "batch-wise-matching"]], "Sampling Queries": [[191, "sampling-queries"]], "Query by Conditions": [[192, "query-by-conditions"]], "filter query syntax": [[192, null]], "Filter with query operators": [[192, "filter-with-query-operators"]], "Combine multiple conditions": [[192, "combine-multiple-conditions"]], "DocumentArray": [[193, "documentarray"]], "Find Nearest Neighbours": [[194, "find-nearest-neighbours"]], "Difference between find and match": [[194, "difference-between-find-and-match"]], "Which side is the query at?": [[194, "which-side-is-the-query-at"]], "What is the type of the query?": [[194, "what-is-the-type-of-the-query"]], "What is the return?": [[194, "what-is-the-return"]], "GPU support": [[194, "gpu-support"]], "Parallelization": [[195, "parallelization"]], "When to choose process or thread backend?": [[195, null]], "Use map_batch() to overlap CPU & GPU computation": [[195, "use-map-batch-to-overlap-cpu-gpu-computation"]], "Why 129s? Why not 128s": [[195, null]], "Use map_batch() to overlap CPU and network time": [[195, "use-map-batch-to-overlap-cpu-and-network-time"]], "Process via External Flow or Executor": [[196, "process-via-external-flow-or-executor"]], "Accept schemes": [[196, "accept-schemes"]], "Read more": [[196, "read-more"]], "Wire format of pickle and protobuf": [[197, "wire-format-of-pickle-and-protobuf"]], "From/to disk": [[197, "from-to-disk"]], "Stream large binary serialization from disk": [[197, "stream-large-binary-serialization-from-disk"]], "From/to list": [[197, "from-to-list"]], "From/to dataframe": [[197, "from-to-dataframe"]], "From/to cloud": [[197, "from-to-cloud"]], "Search over Nested Structure": [[198, "search-over-nested-structure"]], "Construct subindices": [[198, "construct-subindices"]], "Modify subindices": [[198, "modify-subindices"]], "Search through subindices": [[198, "search-through-subindices"]], "Summary in table": [[199, "summary-in-table"]], "Image sprites": [[199, "image-sprites"]], "Plot Matches": [[199, "plot-matches"]], "Embedding projector": [[199, "embedding-projector"]], "FastAPI/Pydantic": [[200, "fastapi-pydantic"]], "JSON Schema": [[200, "json-schema"]], "Validate incoming Document and DocumentArray objects": [[200, "validate-incoming-document-and-documentarray-objects"]], "Convert between pydantic model and DocArray objects": [[200, "convert-between-pydantic-model-and-docarray-objects"]], "Limit returned fields by response model": [[200, "limit-returned-fields-by-response-model"]], "Limit returned results recursively": [[200, "limit-returned-results-recursively"]], "Jupyter Notebook/Colab": [[201, "jupyter-notebook-colab"]], "Display Document": [[201, "display-document"]], "Display rich content": [[201, "display-rich-content"]], "Display DocumentArray": [[201, "display-documentarray"]], "Display embeddings": [[201, "display-embeddings"]], "PyCharm users": [[201, "pycharm-users"]], "Install": [[202, "install"], [204, "install"]], "On Apple Silicon": [[202, "on-apple-silicon"]], "Check terminal and device": [[202, "check-terminal-and-device"]], "Install Homebrew": [[202, "install-homebrew"]], "Install Python": [[202, "install-python"]], "Install dependencies wheels": [[202, "install-dependencies-wheels"]], "Install DocArray": [[202, "install-docarray"]], "What is DocArray?": [[203, "what-is-docarray"]], "Design": [[203, "design"]], "Comparing to Alternatives": [[203, "comparing-to-alternatives"]], "Hugging Face Datasets": [[203, "hugging-face-datasets"]], "To AwkwardArray": [[203, "to-awkwardarray"]], "To Zarr": [[203, "to-zarr"]], "To Jina Users": [[203, "to-jina-users"]], "Welcome to DocArray!": [[204, "welcome-to-docarray"]], "Protocol Documentation": [[205, "protocol-documentation"], [206, "protocol-documentation"]], "Table of Contents": [[205, "table-of-contents"], [206, "table-of-contents"]], "docarray.proto": [[205, "docarray-proto"], [206, "docarray-proto"]], "DenseNdArrayProto": [[205, "densendarrayproto"], [206, "densendarrayproto"]], "DocumentArrayProto": [[205, "documentarrayproto"], [206, "documentarrayproto"]], "DocumentProto": [[205, "documentproto"], [206, "documentproto"]], "DocumentProto.EvaluationsEntry": [[205, "documentproto-evaluationsentry"], [206, "documentproto-evaluationsentry"]], "DocumentProto.ScoresEntry": [[205, "documentproto-scoresentry"], [206, "documentproto-scoresentry"]], "NamedScoreProto": [[205, "namedscoreproto"], [206, "namedscoreproto"]], "NdArrayProto": [[205, "ndarrayproto"], [206, "ndarrayproto"]], "SparseNdArrayProto": [[205, "sparsendarrayproto"], [206, "sparsendarrayproto"]], "Scalar Value Types": [[205, "scalar-value-types"], [206, "scalar-value-types"]], "Rebuild Protobuf": [[206, "rebuild-protobuf"]]}, "indexentries": {"docarray": [[12, "module-docarray"]], "module": [[12, "module-docarray"], [13, "module-docarray.array"], [14, "module-docarray.array.annlite"], [15, "module-docarray.array.base"], [16, "module-docarray.array.chunk"], [17, "module-docarray.array.document"], [18, "module-docarray.array.elastic"], [19, "module-docarray.array.match"], [20, "module-docarray.array.memory"], [21, "module-docarray.array.mixins"], [22, "module-docarray.array.mixins.content"], [23, "module-docarray.array.mixins.dataloader"], [24, "module-docarray.array.mixins.dataloader.helper"], [25, "module-docarray.array.mixins.delitem"], [26, "module-docarray.array.mixins.embed"], [27, "module-docarray.array.mixins.empty"], [28, "module-docarray.array.mixins.evaluation"], [29, "module-docarray.array.mixins.find"], [30, "module-docarray.array.mixins.getattr"], [31, "module-docarray.array.mixins.getitem"], [32, "module-docarray.array.mixins.group"], [33, "module-docarray.array.mixins.io"], [34, "module-docarray.array.mixins.io.binary"], [35, "module-docarray.array.mixins.io.common"], [36, "module-docarray.array.mixins.io.csv"], [37, "module-docarray.array.mixins.io.dataframe"], [38, "module-docarray.array.mixins.io.from_gen"], [39, "module-docarray.array.mixins.io.json"], [40, "module-docarray.array.mixins.io.pbar"], [41, "module-docarray.array.mixins.io.pushpull"], [42, "module-docarray.array.mixins.match"], [43, "module-docarray.array.mixins.parallel"], [44, "module-docarray.array.mixins.plot"], [45, "module-docarray.array.mixins.post"], [46, "module-docarray.array.mixins.pydantic"], [47, "module-docarray.array.mixins.reduce"], [48, "module-docarray.array.mixins.sample"], [49, "module-docarray.array.mixins.setitem"], [50, "module-docarray.array.mixins.strawberry"], [51, "module-docarray.array.mixins.text"], [52, "module-docarray.array.mixins.traverse"], [53, "module-docarray.array.qdrant"], [54, "module-docarray.array.queryset"], [55, "module-docarray.array.queryset.lookup"], [56, "module-docarray.array.queryset.parser"], [57, "module-docarray.array.redis"], [58, "module-docarray.array.sqlite"], [59, "module-docarray.array.storage"], [60, "module-docarray.array.storage.annlite"], [61, "module-docarray.array.storage.annlite.backend"], [62, "module-docarray.array.storage.annlite.find"], [63, "module-docarray.array.storage.annlite.getsetdel"], [64, "module-docarray.array.storage.annlite.helper"], [65, "module-docarray.array.storage.annlite.seqlike"], [66, "module-docarray.array.storage.base"], [67, "module-docarray.array.storage.base.backend"], [68, "module-docarray.array.storage.base.getsetdel"], [69, "module-docarray.array.storage.base.helper"], [70, "module-docarray.array.storage.base.seqlike"], [71, "module-docarray.array.storage.elastic"], [72, "module-docarray.array.storage.elastic.backend"], [73, "module-docarray.array.storage.elastic.find"], [74, "module-docarray.array.storage.elastic.getsetdel"], [75, "module-docarray.array.storage.elastic.seqlike"], [76, "module-docarray.array.storage.memory"], [77, "module-docarray.array.storage.memory.backend"], [78, "module-docarray.array.storage.memory.find"], [79, "module-docarray.array.storage.memory.getsetdel"], [80, "module-docarray.array.storage.memory.seqlike"], [81, "module-docarray.array.storage.qdrant"], [82, "module-docarray.array.storage.qdrant.backend"], [83, "module-docarray.array.storage.qdrant.find"], [84, "module-docarray.array.storage.qdrant.getsetdel"], [85, "module-docarray.array.storage.qdrant.helper"], [86, "module-docarray.array.storage.qdrant.seqlike"], [87, "module-docarray.array.storage.redis"], [88, "module-docarray.array.storage.redis.backend"], [89, "module-docarray.array.storage.redis.find"], [90, "module-docarray.array.storage.redis.getsetdel"], [91, "module-docarray.array.storage.redis.seqlike"], [92, "module-docarray.array.storage.registry"], [93, "module-docarray.array.storage.sqlite"], [94, "module-docarray.array.storage.sqlite.backend"], [95, "module-docarray.array.storage.sqlite.getsetdel"], [96, "module-docarray.array.storage.sqlite.helper"], [97, "module-docarray.array.storage.sqlite.seqlike"], [98, "module-docarray.array.storage.weaviate"], [99, "module-docarray.array.storage.weaviate.backend"], [100, "module-docarray.array.storage.weaviate.find"], [101, "module-docarray.array.storage.weaviate.getsetdel"], [102, "module-docarray.array.storage.weaviate.seqlike"], [103, "module-docarray.array.weaviate"], [104, "module-docarray.base"], [105, "module-docarray.dataclasses"], [106, "module-docarray.dataclasses.enums"], [107, "module-docarray.dataclasses.getter"], [108, "module-docarray.dataclasses.setter"], [109, "module-docarray.dataclasses.types"], [110, "module-docarray.document"], [111, "module-docarray.document.data"], [112, "module-docarray.document.generators"], [113, "module-docarray.document.mixins"], [114, "module-docarray.document.mixins.attribute"], [115, "module-docarray.document.mixins.audio"], [116, "module-docarray.document.mixins.blob"], [117, "module-docarray.document.mixins.content"], [118, "module-docarray.document.mixins.convert"], [119, "module-docarray.document.mixins.dump"], [120, "module-docarray.document.mixins.featurehash"], [121, "module-docarray.document.mixins.helper"], [122, "module-docarray.document.mixins.image"], [123, "module-docarray.document.mixins.mesh"], [124, "module-docarray.document.mixins.multimodal"], [125, "module-docarray.document.mixins.plot"], [126, "module-docarray.document.mixins.porting"], [127, "module-docarray.document.mixins.property"], [128, "module-docarray.document.mixins.protobuf"], [129, "module-docarray.document.mixins.pydantic"], [130, "module-docarray.document.mixins.rich_embedding"], [131, "module-docarray.document.mixins.strawberry"], [132, "module-docarray.document.mixins.sugar"], [133, "module-docarray.document.mixins.text"], [134, "module-docarray.document.mixins.video"], [135, "module-docarray.document.pydantic_model"], [136, "module-docarray.document.strawberry_type"], [137, "module-docarray.helper"], [138, "module-docarray.math"], [139, "module-docarray.math.distance"], [140, "module-docarray.math.distance.numpy"], [142, "module-docarray.math.distance.tensorflow"], [143, "module-docarray.math.distance.torch"], [144, "module-docarray.math.evaluation"], [145, "module-docarray.math.helper"], [146, "module-docarray.math.ndarray"], [147, "module-docarray.proto"], [148, "module-docarray.proto.docarray_pb2"], [149, "module-docarray.proto.io"], [150, "module-docarray.proto.io.ndarray"], [151, "module-docarray.proto.pb"], [152, "module-docarray.proto.pb.docarray_pb2"], [153, "module-docarray.proto.pb2"], [154, "module-docarray.proto.pb2.docarray_pb2"], [155, "module-docarray.score"], [156, "module-docarray.score.data"], [157, "module-docarray.score.mixins"], [158, "module-docarray.score.mixins.property"], [159, "module-docarray.score.mixins.representer"], [160, "module-docarray.typing"]], "docarray.array": [[13, "module-docarray.array"]], "annliteconfig (class in docarray.array.annlite)": [[14, "docarray.array.annlite.AnnliteConfig"]], "documentarrayannlite (class in docarray.array.annlite)": [[14, "docarray.array.annlite.DocumentArrayAnnlite"]], "type_map (docarray.array.annlite.documentarrayannlite attribute)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.TYPE_MAP"]], "append() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.append"]], "apply() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.apply"]], "apply_batch() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.apply_batch"]], "batch() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.batch"]], "batch_ids() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.batch_ids"]], "blobs (docarray.array.annlite.documentarrayannlite property)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.blobs"]], "clear() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.clear"]], "cloud_delete() (docarray.array.annlite.documentarrayannlite static method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.cloud_delete"]], "cloud_list() (docarray.array.annlite.documentarrayannlite static method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.cloud_list"]], "cloud_pull() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.cloud_pull"]], "cloud_push() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.cloud_push"]], "columns (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.columns"]], "contents (docarray.array.annlite.documentarrayannlite property)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.contents"]], "count() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.count"]], "data_path (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.data_path"]], "dataloader() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.dataloader"]], "docarray.array.annlite": [[14, "module-docarray.array.annlite"]], "ef_construction (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.ef_search"]], "embed() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.embed"]], "embed_and_evaluate() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.embed_and_evaluate"]], "embeddings (docarray.array.annlite.documentarrayannlite property)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.embeddings"]], "empty() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.empty"]], "evaluate() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.evaluate"]], "extend() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.extend"]], "find() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.find"]], "flatten() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.flatten"]], "from_base64() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_base64"]], "from_bytes() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_bytes"]], "from_csv() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_csv"]], "from_dataframe() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_dataframe"]], "from_dict() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_dict"]], "from_files() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_files"]], "from_huggingface_datasets() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_huggingface_datasets"]], "from_json() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_json"]], "from_lines() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_lines"]], "from_list() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_list"]], "from_ndarray() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_ndarray"]], "from_ndjson() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_ndjson"]], "from_protobuf() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_protobuf"]], "from_pydantic_model() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_pydantic_model"]], "from_strawberry_type() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_strawberry_type"]], "get_json_schema() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.get_json_schema"]], "get_vocabulary() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.get_vocabulary"]], "index() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.index"]], "insert() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.insert"]], "list_like (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.list_like"]], "load() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.load"]], "load_binary() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.load_binary"]], "load_csv() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.load_csv"]], "load_json() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.load_json"]], "map() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.map"]], "map_batch() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.map_batch"]], "match() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.match"]], "max_connection (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.max_connection"]], "metric (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.metric"]], "n_components (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.n_components"]], "n_dim (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.n_dim"]], "plot_embeddings() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.plot_embeddings"]], "plot_image_sprites() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.plot_image_sprites"]], "pop() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.pop"]], "post() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.post"]], "pull() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.pull"]], "push() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.push"]], "reduce() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.reduce"]], "reduce_all() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.reduce_all"]], "remove() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.remove"]], "reverse() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.reverse"]], "sample() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.sample"]], "save() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save"]], "save_binary() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save_binary"]], "save_csv() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save_csv"]], "save_embeddings_csv() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save_embeddings_csv"]], "save_gif() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save_gif"]], "save_json() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save_json"]], "serialize_config (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.serialize_config"]], "shuffle() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.shuffle"]], "split_by_tag() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.split_by_tag"]], "summary() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.summary"]], "sync() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.sync"]], "tensors (docarray.array.annlite.documentarrayannlite property)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.tensors"]], "texts (docarray.array.annlite.documentarrayannlite property)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.texts"]], "to_base64() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_base64"]], "to_bytes() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_bytes"]], "to_dataframe() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_dataframe"]], "to_dict() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_dict"]], "to_json() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_json"]], "to_list() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_list"]], "to_protobuf() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_protobuf"]], "to_pydantic_model() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_pydantic_model"]], "to_strawberry_type() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_strawberry_type"]], "traverse() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.traverse"]], "traverse_flat() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.traverse_flat"]], "traverse_flat_per_path() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.traverse_flat_per_path"]], "basedocumentarray (class in docarray.array.base)": [[15, "docarray.array.base.BaseDocumentArray"]], "append() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.append"]], "clear() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.clear"]], "count() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.count"]], "docarray.array.base": [[15, "module-docarray.array.base"]], "extend() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.extend"]], "index() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.index"]], "insert() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.insert"]], "pop() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.pop"]], "remove() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.remove"]], "reverse() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.reverse"]], "chunkarray (class in docarray.array.chunk)": [[16, "docarray.array.chunk.ChunkArray"]], "type_map (docarray.array.chunk.chunkarray attribute)": [[16, "docarray.array.chunk.ChunkArray.TYPE_MAP"]], "adjacency (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.adjacency"]], "append() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.append"]], "apply() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.apply"]], "apply_batch() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.apply_batch"]], "batch() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.batch"]], "batch_ids() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.batch_ids"]], "blobs (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.blobs"]], "clear() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.clear"]], "cloud_delete() (docarray.array.chunk.chunkarray static method)": [[16, "docarray.array.chunk.ChunkArray.cloud_delete"]], "cloud_list() (docarray.array.chunk.chunkarray static method)": [[16, "docarray.array.chunk.ChunkArray.cloud_list"]], "cloud_pull() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.cloud_pull"]], "cloud_push() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.cloud_push"]], "contents (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.contents"]], "count() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.count"]], "dataloader() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.dataloader"]], "docarray.array.chunk": [[16, "module-docarray.array.chunk"]], "embed() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.embed"]], "embed_and_evaluate() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.embed_and_evaluate"]], "embeddings (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.embeddings"]], "empty() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.empty"]], "evaluate() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.evaluate"]], "extend() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.extend"]], "find() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.find"]], "flatten() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.flatten"]], "from_base64() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_base64"]], "from_bytes() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_bytes"]], "from_csv() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_csv"]], "from_dataframe() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_dataframe"]], "from_dict() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_dict"]], "from_files() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_files"]], "from_huggingface_datasets() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_huggingface_datasets"]], "from_json() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_json"]], "from_lines() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_lines"]], "from_list() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_list"]], "from_ndarray() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_ndarray"]], "from_ndjson() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_ndjson"]], "from_protobuf() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_protobuf"]], "from_pydantic_model() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_strawberry_type"]], "get_json_schema() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.get_json_schema"]], "get_vocabulary() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.get_vocabulary"]], "granularity (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.granularity"]], "index() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.index"]], "insert() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.insert"]], "load() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.load"]], "load_binary() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.load_binary"]], "load_csv() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.load_csv"]], "load_json() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.load_json"]], "map() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.map"]], "map_batch() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.map_batch"]], "match() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.match"]], "plot_embeddings() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.plot_image_sprites"]], "pop() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.pop"]], "post() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.post"]], "pull() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.pull"]], "push() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.push"]], "reduce() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.reduce"]], "reduce_all() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.reduce_all"]], "reference_doc (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.reference_doc"]], "remove() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.remove"]], "reverse() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.reverse"]], "sample() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.sample"]], "save() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save"]], "save_binary() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save_binary"]], "save_csv() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save_csv"]], "save_embeddings_csv() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save_embeddings_csv"]], "save_gif() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save_gif"]], "save_json() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save_json"]], "shuffle() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.shuffle"]], "split_by_tag() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.split_by_tag"]], "summary() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.summary"]], "sync() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.sync"]], "tensors (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.tensors"]], "texts (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.texts"]], "to_base64() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_base64"]], "to_bytes() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_bytes"]], "to_dataframe() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_dataframe"]], "to_dict() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_dict"]], "to_json() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_json"]], "to_list() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_list"]], "to_protobuf() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_protobuf"]], "to_pydantic_model() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_strawberry_type"]], "traverse() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.traverse"]], "traverse_flat() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.traverse_flat_per_path"]], "documentarray (class in docarray.array.document)": [[17, "docarray.array.document.DocumentArray"]], "append() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.append"]], "apply() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.apply"]], "apply_batch() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.apply_batch"]], "batch() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.batch"]], "batch_ids() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.batch_ids"]], "blobs (docarray.array.document.documentarray property)": [[17, "docarray.array.document.DocumentArray.blobs"]], "clear() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.clear"]], "cloud_delete() (docarray.array.document.documentarray static method)": [[17, "docarray.array.document.DocumentArray.cloud_delete"]], "cloud_list() (docarray.array.document.documentarray static method)": [[17, "docarray.array.document.DocumentArray.cloud_list"]], "cloud_pull() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.cloud_pull"]], "cloud_push() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.cloud_push"]], "contents (docarray.array.document.documentarray property)": [[17, "docarray.array.document.DocumentArray.contents"]], "count() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.count"]], "dataloader() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.dataloader"]], "docarray.array.document": [[17, "module-docarray.array.document"]], "embed() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.embed"]], "embed_and_evaluate() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.embed_and_evaluate"]], "embeddings (docarray.array.document.documentarray property)": [[17, "docarray.array.document.DocumentArray.embeddings"]], "empty() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.empty"]], "evaluate() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.evaluate"]], "extend() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.extend"]], "find() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.find"]], "flatten() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.flatten"]], "from_base64() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_base64"]], "from_bytes() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_bytes"]], "from_csv() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_csv"]], "from_dataframe() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_dataframe"]], "from_dict() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_dict"]], "from_files() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_files"]], "from_huggingface_datasets() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_huggingface_datasets"]], "from_json() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_json"]], "from_lines() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_lines"]], "from_list() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_list"]], "from_ndarray() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_ndarray"]], "from_ndjson() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_ndjson"]], "from_protobuf() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_protobuf"]], "from_pydantic_model() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_strawberry_type"]], "get_json_schema() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.get_json_schema"]], "get_vocabulary() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.get_vocabulary"]], "index() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.index"]], "insert() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.insert"]], "load() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.load"]], "load_binary() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.load_binary"]], "load_csv() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.load_csv"]], "load_json() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.load_json"]], "map() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.map"]], "map_batch() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.map_batch"]], "match() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.match"]], "plot_embeddings() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.plot_image_sprites"]], "pop() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.pop"]], "post() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.post"]], "pull() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.pull"]], "push() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.push"]], "reduce() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.reduce"]], "reduce_all() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.reduce_all"]], "remove() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.remove"]], "reverse() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.reverse"]], "sample() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.sample"]], "save() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save"]], "save_binary() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save_binary"]], "save_csv() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save_csv"]], "save_embeddings_csv() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save_embeddings_csv"]], "save_gif() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save_gif"]], "save_json() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save_json"]], "shuffle() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.shuffle"]], "split_by_tag() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.split_by_tag"]], "summary() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.summary"]], "tensors (docarray.array.document.documentarray property)": [[17, "docarray.array.document.DocumentArray.tensors"]], "texts (docarray.array.document.documentarray property)": [[17, "docarray.array.document.DocumentArray.texts"]], "to_base64() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_base64"]], "to_bytes() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_bytes"]], "to_dataframe() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_dataframe"]], "to_dict() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_dict"]], "to_json() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_json"]], "to_list() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_list"]], "to_protobuf() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_protobuf"]], "to_pydantic_model() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_strawberry_type"]], "traverse() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.traverse"]], "traverse_flat() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.traverse_flat_per_path"]], "documentarrayelastic (class in docarray.array.elastic)": [[18, "docarray.array.elastic.DocumentArrayElastic"]], "elasticconfig (class in docarray.array.elastic)": [[18, "docarray.array.elastic.ElasticConfig"]], "max_es_returned_docs (docarray.array.elastic.documentarrayelastic attribute)": [[18, "docarray.array.elastic.DocumentArrayElastic.MAX_ES_RETURNED_DOCS"]], "type_map (docarray.array.elastic.documentarrayelastic attribute)": [[18, "docarray.array.elastic.DocumentArrayElastic.TYPE_MAP"]], "append() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.append"]], "apply() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.apply"]], "apply_batch() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.apply_batch"]], "batch() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.batch"]], "batch_ids() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.batch_ids"]], "batch_size (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.batch_size"]], "blobs (docarray.array.elastic.documentarrayelastic property)": [[18, "docarray.array.elastic.DocumentArrayElastic.blobs"]], "clear() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.clear"]], "cloud_delete() (docarray.array.elastic.documentarrayelastic static method)": [[18, "docarray.array.elastic.DocumentArrayElastic.cloud_delete"]], "cloud_list() (docarray.array.elastic.documentarrayelastic static method)": [[18, "docarray.array.elastic.DocumentArrayElastic.cloud_list"]], "cloud_pull() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.cloud_pull"]], "cloud_push() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.cloud_push"]], "columns (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.columns"]], "contents (docarray.array.elastic.documentarrayelastic property)": [[18, "docarray.array.elastic.DocumentArrayElastic.contents"]], "count() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.count"]], "dataloader() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.dataloader"]], "distance (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.distance"]], "docarray.array.elastic": [[18, "module-docarray.array.elastic"]], "ef_construction (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.ef_construction"]], "embed() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.embed"]], "embed_and_evaluate() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.embed_and_evaluate"]], "embeddings (docarray.array.elastic.documentarrayelastic property)": [[18, "docarray.array.elastic.DocumentArrayElastic.embeddings"]], "empty() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.empty"]], "es_config (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.es_config"]], "evaluate() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.evaluate"]], "extend() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.extend"]], "find() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.find"]], "flatten() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.flatten"]], "from_base64() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_base64"]], "from_bytes() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_bytes"]], "from_csv() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_csv"]], "from_dataframe() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_dataframe"]], "from_dict() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_dict"]], "from_files() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_files"]], "from_huggingface_datasets() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_huggingface_datasets"]], "from_json() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_json"]], "from_lines() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_lines"]], "from_list() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_list"]], "from_ndarray() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_ndarray"]], "from_ndjson() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_ndjson"]], "from_protobuf() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_protobuf"]], "from_pydantic_model() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_pydantic_model"]], "from_strawberry_type() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_strawberry_type"]], "get_json_schema() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.get_json_schema"]], "get_vocabulary() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.get_vocabulary"]], "hosts (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.hosts"]], "index() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.index"]], "index_name (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.index_name"]], "index_text (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.index_text"]], "insert() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.insert"]], "list_like (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.list_like"]], "load() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.load"]], "load_binary() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.load_binary"]], "load_csv() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.load_csv"]], "load_json() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.load_json"]], "m (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.m"]], "map() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.map"]], "map_batch() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.map_batch"]], "match() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.match"]], "n_dim (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.n_dim"]], "plot_embeddings() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.plot_embeddings"]], "plot_image_sprites() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.plot_image_sprites"]], "pop() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.pop"]], "post() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.post"]], "pull() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.pull"]], "push() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.push"]], "reduce() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.reduce"]], "reduce_all() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.reduce_all"]], "remove() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.remove"]], "reverse() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.reverse"]], "sample() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.sample"]], "save() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save"]], "save_binary() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save_binary"]], "save_csv() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save_csv"]], "save_embeddings_csv() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save_embeddings_csv"]], "save_gif() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save_gif"]], "save_json() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save_json"]], "shuffle() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.shuffle"]], "split_by_tag() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.split_by_tag"]], "summary() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.summary"]], "sync() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.sync"]], "tag_indices (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.tag_indices"]], "tensors (docarray.array.elastic.documentarrayelastic property)": [[18, "docarray.array.elastic.DocumentArrayElastic.tensors"]], "texts (docarray.array.elastic.documentarrayelastic property)": [[18, "docarray.array.elastic.DocumentArrayElastic.texts"]], "to_base64() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_base64"]], "to_bytes() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_bytes"]], "to_dataframe() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_dataframe"]], "to_dict() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_dict"]], "to_json() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_json"]], "to_list() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_list"]], "to_protobuf() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_protobuf"]], "to_pydantic_model() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_pydantic_model"]], "to_strawberry_type() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_strawberry_type"]], "traverse() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.traverse"]], "traverse_flat() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.traverse_flat"]], "traverse_flat_per_path() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.traverse_flat_per_path"]], "matcharray (class in docarray.array.match)": [[19, "docarray.array.match.MatchArray"]], "type_map (docarray.array.match.matcharray attribute)": [[19, "docarray.array.match.MatchArray.TYPE_MAP"]], "adjacency (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.adjacency"]], "append() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.append"]], "apply() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.apply"]], "apply_batch() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.apply_batch"]], "batch() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.batch"]], "batch_ids() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.batch_ids"]], "blobs (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.blobs"]], "clear() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.clear"]], "cloud_delete() (docarray.array.match.matcharray static method)": [[19, "docarray.array.match.MatchArray.cloud_delete"]], "cloud_list() (docarray.array.match.matcharray static method)": [[19, "docarray.array.match.MatchArray.cloud_list"]], "cloud_pull() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.cloud_pull"]], "cloud_push() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.cloud_push"]], "contents (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.contents"]], "count() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.count"]], "dataloader() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.dataloader"]], "docarray.array.match": [[19, "module-docarray.array.match"]], "embed() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.embed"]], "embed_and_evaluate() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.embed_and_evaluate"]], "embeddings (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.embeddings"]], "empty() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.empty"]], "evaluate() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.evaluate"]], "extend() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.extend"]], "find() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.find"]], "flatten() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.flatten"]], "from_base64() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_base64"]], "from_bytes() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_bytes"]], "from_csv() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_csv"]], "from_dataframe() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_dataframe"]], "from_dict() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_dict"]], "from_files() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_files"]], "from_huggingface_datasets() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_huggingface_datasets"]], "from_json() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_json"]], "from_lines() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_lines"]], "from_list() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_list"]], "from_ndarray() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_ndarray"]], "from_ndjson() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_ndjson"]], "from_protobuf() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_protobuf"]], "from_pydantic_model() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_strawberry_type"]], "get_json_schema() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.get_json_schema"]], "get_vocabulary() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.get_vocabulary"]], "granularity (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.granularity"]], "index() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.index"]], "insert() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.insert"]], "load() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.load"]], "load_binary() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.load_binary"]], "load_csv() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.load_csv"]], "load_json() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.load_json"]], "map() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.map"]], "map_batch() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.map_batch"]], "match() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.match"]], "plot_embeddings() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.plot_image_sprites"]], "pop() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.pop"]], "post() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.post"]], "pull() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.pull"]], "push() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.push"]], "reduce() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.reduce"]], "reduce_all() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.reduce_all"]], "reference_doc (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.reference_doc"]], "remove() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.remove"]], "reverse() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.reverse"]], "sample() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.sample"]], "save() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save"]], "save_binary() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save_binary"]], "save_csv() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save_csv"]], "save_embeddings_csv() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save_embeddings_csv"]], "save_gif() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save_gif"]], "save_json() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save_json"]], "shuffle() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.shuffle"]], "split_by_tag() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.split_by_tag"]], "summary() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.summary"]], "sync() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.sync"]], "tensors (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.tensors"]], "texts (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.texts"]], "to_base64() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_base64"]], "to_bytes() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_bytes"]], "to_dataframe() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_dataframe"]], "to_dict() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_dict"]], "to_json() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_json"]], "to_list() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_list"]], "to_protobuf() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_protobuf"]], "to_pydantic_model() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_strawberry_type"]], "traverse() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.traverse"]], "traverse_flat() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.traverse_flat_per_path"]], "documentarrayinmemory (class in docarray.array.memory)": [[20, "docarray.array.memory.DocumentArrayInMemory"]], "type_map (docarray.array.memory.documentarrayinmemory attribute)": [[20, "docarray.array.memory.DocumentArrayInMemory.TYPE_MAP"]], "append() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.append"]], "apply() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.apply"]], "apply_batch() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.apply_batch"]], "batch() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.batch"]], "batch_ids() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.batch_ids"]], "blobs (docarray.array.memory.documentarrayinmemory property)": [[20, "docarray.array.memory.DocumentArrayInMemory.blobs"]], "clear() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.clear"]], "cloud_delete() (docarray.array.memory.documentarrayinmemory static method)": [[20, "docarray.array.memory.DocumentArrayInMemory.cloud_delete"]], "cloud_list() (docarray.array.memory.documentarrayinmemory static method)": [[20, "docarray.array.memory.DocumentArrayInMemory.cloud_list"]], "cloud_pull() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.cloud_pull"]], "cloud_push() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.cloud_push"]], "contents (docarray.array.memory.documentarrayinmemory property)": [[20, "docarray.array.memory.DocumentArrayInMemory.contents"]], "count() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.count"]], "dataloader() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.dataloader"]], "docarray.array.memory": [[20, "module-docarray.array.memory"]], "embed() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.embed"]], "embed_and_evaluate() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.embed_and_evaluate"]], "embeddings (docarray.array.memory.documentarrayinmemory property)": [[20, "docarray.array.memory.DocumentArrayInMemory.embeddings"]], "empty() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.empty"]], "evaluate() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.evaluate"]], "extend() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.extend"]], "find() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.find"]], "flatten() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.flatten"]], "from_base64() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_base64"]], "from_bytes() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_bytes"]], "from_csv() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_csv"]], "from_dataframe() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_dataframe"]], "from_dict() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_dict"]], "from_files() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_files"]], "from_huggingface_datasets() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_huggingface_datasets"]], "from_json() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_json"]], "from_lines() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_lines"]], "from_list() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_list"]], "from_ndarray() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_ndarray"]], "from_ndjson() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_ndjson"]], "from_protobuf() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_protobuf"]], "from_pydantic_model() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_pydantic_model"]], "from_strawberry_type() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_strawberry_type"]], "get_json_schema() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.get_json_schema"]], "get_vocabulary() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.get_vocabulary"]], "index() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.index"]], "insert() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.insert"]], "load() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.load"]], "load_binary() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.load_binary"]], "load_csv() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.load_csv"]], "load_json() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.load_json"]], "map() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.map"]], "map_batch() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.map_batch"]], "match() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.match"]], "plot_embeddings() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.plot_embeddings"]], "plot_image_sprites() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.plot_image_sprites"]], "pop() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.pop"]], "post() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.post"]], "pull() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.pull"]], "push() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.push"]], "reduce() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.reduce"]], "reduce_all() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.reduce_all"]], "remove() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.remove"]], "reverse() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.reverse"]], "sample() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.sample"]], "save() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save"]], "save_binary() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save_binary"]], "save_csv() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save_csv"]], "save_embeddings_csv() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save_embeddings_csv"]], "save_gif() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save_gif"]], "save_json() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save_json"]], "shuffle() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.shuffle"]], "split_by_tag() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.split_by_tag"]], "summary() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.summary"]], "sync() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.sync"]], "tensors (docarray.array.memory.documentarrayinmemory property)": [[20, "docarray.array.memory.DocumentArrayInMemory.tensors"]], "texts (docarray.array.memory.documentarrayinmemory property)": [[20, "docarray.array.memory.DocumentArrayInMemory.texts"]], "to_base64() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_base64"]], "to_bytes() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_bytes"]], "to_dataframe() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_dataframe"]], "to_dict() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_dict"]], "to_json() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_json"]], "to_list() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_list"]], "to_protobuf() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_protobuf"]], "to_pydantic_model() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_pydantic_model"]], "to_strawberry_type() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_strawberry_type"]], "traverse() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.traverse"]], "traverse_flat() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.traverse_flat"]], "traverse_flat_per_path() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.traverse_flat_per_path"]], "allmixins (class in docarray.array.mixins)": [[21, "docarray.array.mixins.AllMixins"]], "apply() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.apply"]], "apply_batch() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.apply_batch"]], "batch() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.batch"]], "batch_ids() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.batch_ids"]], "blobs (docarray.array.mixins.allmixins property)": [[21, "docarray.array.mixins.AllMixins.blobs"]], "cloud_delete() (docarray.array.mixins.allmixins static method)": [[21, "docarray.array.mixins.AllMixins.cloud_delete"]], "cloud_list() (docarray.array.mixins.allmixins static method)": [[21, "docarray.array.mixins.AllMixins.cloud_list"]], "cloud_pull() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.cloud_pull"]], "cloud_push() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.cloud_push"]], "contents (docarray.array.mixins.allmixins property)": [[21, "docarray.array.mixins.AllMixins.contents"]], "dataloader() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.dataloader"]], "docarray.array.mixins": [[21, "module-docarray.array.mixins"]], "embed() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.embed"]], "embed_and_evaluate() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.embed_and_evaluate"]], "embeddings (docarray.array.mixins.allmixins property)": [[21, "docarray.array.mixins.AllMixins.embeddings"]], "empty() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.empty"]], "evaluate() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.evaluate"]], "find() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.find"]], "flatten() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.flatten"]], "from_base64() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_base64"]], "from_bytes() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_bytes"]], "from_csv() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_csv"]], "from_dataframe() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_dataframe"]], "from_dict() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_dict"]], "from_files() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_files"]], "from_huggingface_datasets() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_huggingface_datasets"]], "from_json() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_json"]], "from_lines() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_lines"]], "from_list() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_list"]], "from_ndarray() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_ndarray"]], "from_ndjson() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_ndjson"]], "from_protobuf() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_protobuf"]], "from_pydantic_model() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_pydantic_model"]], "from_strawberry_type() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_strawberry_type"]], "get_json_schema() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.get_json_schema"]], "get_vocabulary() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.get_vocabulary"]], "load() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.load"]], "load_binary() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.load_binary"]], "load_csv() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.load_csv"]], "load_json() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.load_json"]], "map() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.map"]], "map_batch() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.map_batch"]], "match() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.match"]], "plot_embeddings() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.plot_embeddings"]], "plot_image_sprites() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.plot_image_sprites"]], "post() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.post"]], "pull() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.pull"]], "push() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.push"]], "reduce() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.reduce"]], "reduce_all() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.reduce_all"]], "sample() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.sample"]], "save() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save"]], "save_binary() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save_binary"]], "save_csv() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save_csv"]], "save_embeddings_csv() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save_embeddings_csv"]], "save_gif() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save_gif"]], "save_json() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save_json"]], "shuffle() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.shuffle"]], "split_by_tag() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.split_by_tag"]], "summary() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.summary"]], "tensors (docarray.array.mixins.allmixins property)": [[21, "docarray.array.mixins.AllMixins.tensors"]], "texts (docarray.array.mixins.allmixins property)": [[21, "docarray.array.mixins.AllMixins.texts"]], "to_base64() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_base64"]], "to_bytes() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_bytes"]], "to_dataframe() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_dataframe"]], "to_dict() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_dict"]], "to_json() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_json"]], "to_list() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_list"]], "to_protobuf() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_protobuf"]], "to_pydantic_model() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_pydantic_model"]], "to_strawberry_type() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_strawberry_type"]], "traverse() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.traverse"]], "traverse_flat() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.traverse_flat"]], "traverse_flat_per_path() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.traverse_flat_per_path"]], "contentpropertymixin (class in docarray.array.mixins.content)": [[22, "docarray.array.mixins.content.ContentPropertyMixin"]], "blobs (docarray.array.mixins.content.contentpropertymixin property)": [[22, "docarray.array.mixins.content.ContentPropertyMixin.blobs"]], "contents (docarray.array.mixins.content.contentpropertymixin property)": [[22, "docarray.array.mixins.content.ContentPropertyMixin.contents"]], "docarray.array.mixins.content": [[22, "module-docarray.array.mixins.content"]], "embeddings (docarray.array.mixins.content.contentpropertymixin property)": [[22, "docarray.array.mixins.content.ContentPropertyMixin.embeddings"]], "tensors (docarray.array.mixins.content.contentpropertymixin property)": [[22, "docarray.array.mixins.content.ContentPropertyMixin.tensors"]], "texts (docarray.array.mixins.content.contentpropertymixin property)": [[22, "docarray.array.mixins.content.ContentPropertyMixin.texts"]], "dataloadermixin (class in docarray.array.mixins.dataloader)": [[23, "docarray.array.mixins.dataloader.DataLoaderMixin"]], "dataloader() (docarray.array.mixins.dataloader.dataloadermixin class method)": [[23, "docarray.array.mixins.dataloader.DataLoaderMixin.dataloader"]], "docarray.array.mixins.dataloader": [[23, "module-docarray.array.mixins.dataloader"]], "documentarrayloader (class in docarray.array.mixins.dataloader.helper)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader"]], "apply() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.apply"]], "apply_batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.apply_batch"]], "batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.batch"]], "batch_ids() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.batch_ids"]], "docarray.array.mixins.dataloader.helper": [[24, "module-docarray.array.mixins.dataloader.helper"]], "map() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.map"]], "map_batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.map_batch"]], "split_by_tag() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.split_by_tag"]], "delitemmixin (class in docarray.array.mixins.delitem)": [[25, "docarray.array.mixins.delitem.DelItemMixin"]], "docarray.array.mixins.delitem": [[25, "module-docarray.array.mixins.delitem"]], "embedmixin (class in docarray.array.mixins.embed)": [[26, "docarray.array.mixins.embed.EmbedMixin"]], "docarray.array.mixins.embed": [[26, "module-docarray.array.mixins.embed"]], "embed() (docarray.array.mixins.embed.embedmixin method)": [[26, "docarray.array.mixins.embed.EmbedMixin.embed"]], "get_framework() (in module docarray.array.mixins.embed)": [[26, "docarray.array.mixins.embed.get_framework"]], "emptymixin (class in docarray.array.mixins.empty)": [[27, "docarray.array.mixins.empty.EmptyMixin"]], "docarray.array.mixins.empty": [[27, "module-docarray.array.mixins.empty"]], "empty() (docarray.array.mixins.empty.emptymixin class method)": [[27, "docarray.array.mixins.empty.EmptyMixin.empty"]], "evaluationmixin (class in docarray.array.mixins.evaluation)": [[28, "docarray.array.mixins.evaluation.EvaluationMixin"]], "docarray.array.mixins.evaluation": [[28, "module-docarray.array.mixins.evaluation"]], "embed_and_evaluate() (docarray.array.mixins.evaluation.evaluationmixin method)": [[28, "docarray.array.mixins.evaluation.EvaluationMixin.embed_and_evaluate"]], "evaluate() (docarray.array.mixins.evaluation.evaluationmixin method)": [[28, "docarray.array.mixins.evaluation.EvaluationMixin.evaluate"]], "findmixin (class in docarray.array.mixins.find)": [[29, "docarray.array.mixins.find.FindMixin"]], "docarray.array.mixins.find": [[29, "module-docarray.array.mixins.find"]], "find() (docarray.array.mixins.find.findmixin method)": [[29, "docarray.array.mixins.find.FindMixin.find"]], "getattributemixin (class in docarray.array.mixins.getattr)": [[30, "docarray.array.mixins.getattr.GetAttributeMixin"]], "docarray.array.mixins.getattr": [[30, "module-docarray.array.mixins.getattr"]], "getitemmixin (class in docarray.array.mixins.getitem)": [[31, "docarray.array.mixins.getitem.GetItemMixin"]], "docarray.array.mixins.getitem": [[31, "module-docarray.array.mixins.getitem"]], "groupmixin (class in docarray.array.mixins.group)": [[32, "docarray.array.mixins.group.GroupMixin"]], "batch() (docarray.array.mixins.group.groupmixin method)": [[32, "docarray.array.mixins.group.GroupMixin.batch"]], "batch_ids() (docarray.array.mixins.group.groupmixin method)": [[32, "docarray.array.mixins.group.GroupMixin.batch_ids"]], "docarray.array.mixins.group": [[32, "module-docarray.array.mixins.group"]], "split_by_tag() (docarray.array.mixins.group.groupmixin method)": [[32, "docarray.array.mixins.group.GroupMixin.split_by_tag"]], "docarray.array.mixins.io": [[33, "module-docarray.array.mixins.io"]], "binaryiomixin (class in docarray.array.mixins.io.binary)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin"]], "lazyrequestreader (class in docarray.array.mixins.io.binary)": [[34, "docarray.array.mixins.io.binary.LazyRequestReader"]], "docarray.array.mixins.io.binary": [[34, "module-docarray.array.mixins.io.binary"]], "from_base64() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.from_base64"]], "from_bytes() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.from_bytes"]], "from_protobuf() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.from_protobuf"]], "load_binary() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.load_binary"]], "save_binary() (docarray.array.mixins.io.binary.binaryiomixin method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.save_binary"]], "to_base64() (docarray.array.mixins.io.binary.binaryiomixin method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.to_base64"]], "to_bytes() (docarray.array.mixins.io.binary.binaryiomixin method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.to_bytes"]], "to_protobuf() (docarray.array.mixins.io.binary.binaryiomixin method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.to_protobuf"]], "commoniomixin (class in docarray.array.mixins.io.common)": [[35, "docarray.array.mixins.io.common.CommonIOMixin"]], "docarray.array.mixins.io.common": [[35, "module-docarray.array.mixins.io.common"]], "load() (docarray.array.mixins.io.common.commoniomixin class method)": [[35, "docarray.array.mixins.io.common.CommonIOMixin.load"]], "save() (docarray.array.mixins.io.common.commoniomixin method)": [[35, "docarray.array.mixins.io.common.CommonIOMixin.save"]], "csviomixin (class in docarray.array.mixins.io.csv)": [[36, "docarray.array.mixins.io.csv.CsvIOMixin"]], "docarray.array.mixins.io.csv": [[36, "module-docarray.array.mixins.io.csv"]], "load_csv() (docarray.array.mixins.io.csv.csviomixin class method)": [[36, "docarray.array.mixins.io.csv.CsvIOMixin.load_csv"]], "save_csv() (docarray.array.mixins.io.csv.csviomixin method)": [[36, "docarray.array.mixins.io.csv.CsvIOMixin.save_csv"]], "save_embeddings_csv() (docarray.array.mixins.io.csv.csviomixin method)": [[36, "docarray.array.mixins.io.csv.CsvIOMixin.save_embeddings_csv"]], "dataframeiomixin (class in docarray.array.mixins.io.dataframe)": [[37, "docarray.array.mixins.io.dataframe.DataframeIOMixin"]], "docarray.array.mixins.io.dataframe": [[37, "module-docarray.array.mixins.io.dataframe"]], "from_dataframe() (docarray.array.mixins.io.dataframe.dataframeiomixin class method)": [[37, "docarray.array.mixins.io.dataframe.DataframeIOMixin.from_dataframe"]], "to_dataframe() (docarray.array.mixins.io.dataframe.dataframeiomixin method)": [[37, "docarray.array.mixins.io.dataframe.DataframeIOMixin.to_dataframe"]], "fromgeneratormixin (class in docarray.array.mixins.io.from_gen)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin"]], "docarray.array.mixins.io.from_gen": [[38, "module-docarray.array.mixins.io.from_gen"]], "from_csv() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_csv"]], "from_files() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_files"]], "from_huggingface_datasets() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_huggingface_datasets"]], "from_lines() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_lines"]], "from_ndarray() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_ndarray"]], "from_ndjson() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_ndjson"]], "jsoniomixin (class in docarray.array.mixins.io.json)": [[39, "docarray.array.mixins.io.json.JsonIOMixin"]], "docarray.array.mixins.io.json": [[39, "module-docarray.array.mixins.io.json"]], "from_dict() (docarray.array.mixins.io.json.jsoniomixin class method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.from_dict"]], "from_json() (docarray.array.mixins.io.json.jsoniomixin class method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.from_json"]], "from_list() (docarray.array.mixins.io.json.jsoniomixin class method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.from_list"]], "load_json() (docarray.array.mixins.io.json.jsoniomixin class method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.load_json"]], "save_json() (docarray.array.mixins.io.json.jsoniomixin method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.save_json"]], "to_dict() (docarray.array.mixins.io.json.jsoniomixin method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.to_dict"]], "to_json() (docarray.array.mixins.io.json.jsoniomixin method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.to_json"]], "to_list() (docarray.array.mixins.io.json.jsoniomixin method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.to_list"]], "qpscolumn (class in docarray.array.mixins.io.pbar)": [[40, "docarray.array.mixins.io.pbar.QPSColumn"]], "docarray.array.mixins.io.pbar": [[40, "module-docarray.array.mixins.io.pbar"]], "get_pbar() (in module docarray.array.mixins.io.pbar)": [[40, "docarray.array.mixins.io.pbar.get_pbar"]], "get_progressbar() (in module docarray.array.mixins.io.pbar)": [[40, "docarray.array.mixins.io.pbar.get_progressbar"]], "get_table_column() (docarray.array.mixins.io.pbar.qpscolumn method)": [[40, "docarray.array.mixins.io.pbar.QPSColumn.get_table_column"]], "max_refresh (docarray.array.mixins.io.pbar.qpscolumn attribute)": [[40, "docarray.array.mixins.io.pbar.QPSColumn.max_refresh"]], "render() (docarray.array.mixins.io.pbar.qpscolumn method)": [[40, "docarray.array.mixins.io.pbar.QPSColumn.render"]], "pushpullmixin (class in docarray.array.mixins.io.pushpull)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin"]], "cloud_delete() (docarray.array.mixins.io.pushpull.pushpullmixin static method)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin.cloud_delete"]], "cloud_list() (docarray.array.mixins.io.pushpull.pushpullmixin static method)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin.cloud_list"]], "cloud_pull() (docarray.array.mixins.io.pushpull.pushpullmixin class method)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin.cloud_pull"]], "cloud_push() (docarray.array.mixins.io.pushpull.pushpullmixin method)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin.cloud_push"]], "docarray.array.mixins.io.pushpull": [[41, "module-docarray.array.mixins.io.pushpull"]], "pull() (docarray.array.mixins.io.pushpull.pushpullmixin class method)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin.pull"]], "push() (docarray.array.mixins.io.pushpull.pushpullmixin method)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin.push"]], "matchmixin (class in docarray.array.mixins.match)": [[42, "docarray.array.mixins.match.MatchMixin"]], "docarray.array.mixins.match": [[42, "module-docarray.array.mixins.match"]], "match() (docarray.array.mixins.match.matchmixin method)": [[42, "docarray.array.mixins.match.MatchMixin.match"]], "parallelmixin (class in docarray.array.mixins.parallel)": [[43, "docarray.array.mixins.parallel.ParallelMixin"]], "apply() (docarray.array.mixins.parallel.parallelmixin method)": [[43, "docarray.array.mixins.parallel.ParallelMixin.apply"]], "apply_batch() (docarray.array.mixins.parallel.parallelmixin method)": [[43, "docarray.array.mixins.parallel.ParallelMixin.apply_batch"]], "docarray.array.mixins.parallel": [[43, "module-docarray.array.mixins.parallel"]], "map() (docarray.array.mixins.parallel.parallelmixin method)": [[43, "docarray.array.mixins.parallel.ParallelMixin.map"]], "map_batch() (docarray.array.mixins.parallel.parallelmixin method)": [[43, "docarray.array.mixins.parallel.ParallelMixin.map_batch"]], "plotmixin (class in docarray.array.mixins.plot)": [[44, "docarray.array.mixins.plot.PlotMixin"]], "docarray.array.mixins.plot": [[44, "module-docarray.array.mixins.plot"]], "plot_embeddings() (docarray.array.mixins.plot.plotmixin method)": [[44, "docarray.array.mixins.plot.PlotMixin.plot_embeddings"]], "plot_image_sprites() (docarray.array.mixins.plot.plotmixin method)": [[44, "docarray.array.mixins.plot.PlotMixin.plot_image_sprites"]], "save_gif() (docarray.array.mixins.plot.plotmixin method)": [[44, "docarray.array.mixins.plot.PlotMixin.save_gif"]], "summary() (docarray.array.mixins.plot.plotmixin method)": [[44, "docarray.array.mixins.plot.PlotMixin.summary"]], "postmixin (class in docarray.array.mixins.post)": [[45, "docarray.array.mixins.post.PostMixin"]], "docarray.array.mixins.post": [[45, "module-docarray.array.mixins.post"]], "post() (docarray.array.mixins.post.postmixin method)": [[45, "docarray.array.mixins.post.PostMixin.post"]], "pydanticmixin (class in docarray.array.mixins.pydantic)": [[46, "docarray.array.mixins.pydantic.PydanticMixin"]], "docarray.array.mixins.pydantic": [[46, "module-docarray.array.mixins.pydantic"]], "from_pydantic_model() (docarray.array.mixins.pydantic.pydanticmixin class method)": [[46, "docarray.array.mixins.pydantic.PydanticMixin.from_pydantic_model"]], "get_json_schema() (docarray.array.mixins.pydantic.pydanticmixin class method)": [[46, "docarray.array.mixins.pydantic.PydanticMixin.get_json_schema"]], "to_pydantic_model() (docarray.array.mixins.pydantic.pydanticmixin method)": [[46, "docarray.array.mixins.pydantic.PydanticMixin.to_pydantic_model"]], "reducemixin (class in docarray.array.mixins.reduce)": [[47, "docarray.array.mixins.reduce.ReduceMixin"]], "docarray.array.mixins.reduce": [[47, "module-docarray.array.mixins.reduce"]], "reduce() (docarray.array.mixins.reduce.reducemixin method)": [[47, "docarray.array.mixins.reduce.ReduceMixin.reduce"]], "reduce_all() (docarray.array.mixins.reduce.reducemixin method)": [[47, "docarray.array.mixins.reduce.ReduceMixin.reduce_all"]], "samplemixin (class in docarray.array.mixins.sample)": [[48, "docarray.array.mixins.sample.SampleMixin"]], "docarray.array.mixins.sample": [[48, "module-docarray.array.mixins.sample"]], "sample() (docarray.array.mixins.sample.samplemixin method)": [[48, "docarray.array.mixins.sample.SampleMixin.sample"]], "shuffle() (docarray.array.mixins.sample.samplemixin method)": [[48, "docarray.array.mixins.sample.SampleMixin.shuffle"]], "setitemmixin (class in docarray.array.mixins.setitem)": [[49, "docarray.array.mixins.setitem.SetItemMixin"]], "docarray.array.mixins.setitem": [[49, "module-docarray.array.mixins.setitem"]], "strawberrymixin (class in docarray.array.mixins.strawberry)": [[50, "docarray.array.mixins.strawberry.StrawberryMixin"]], "docarray.array.mixins.strawberry": [[50, "module-docarray.array.mixins.strawberry"]], "from_strawberry_type() (docarray.array.mixins.strawberry.strawberrymixin class method)": [[50, "docarray.array.mixins.strawberry.StrawberryMixin.from_strawberry_type"]], "to_strawberry_type() (docarray.array.mixins.strawberry.strawberrymixin method)": [[50, "docarray.array.mixins.strawberry.StrawberryMixin.to_strawberry_type"]], "texttoolsmixin (class in docarray.array.mixins.text)": [[51, "docarray.array.mixins.text.TextToolsMixin"]], "docarray.array.mixins.text": [[51, "module-docarray.array.mixins.text"]], "get_vocabulary() (docarray.array.mixins.text.texttoolsmixin method)": [[51, "docarray.array.mixins.text.TextToolsMixin.get_vocabulary"]], "traversemixin (class in docarray.array.mixins.traverse)": [[52, "docarray.array.mixins.traverse.TraverseMixin"]], "docarray.array.mixins.traverse": [[52, "module-docarray.array.mixins.traverse"]], "flatten() (docarray.array.mixins.traverse.traversemixin method)": [[52, "docarray.array.mixins.traverse.TraverseMixin.flatten"]], "traverse() (docarray.array.mixins.traverse.traversemixin method)": [[52, "docarray.array.mixins.traverse.TraverseMixin.traverse"]], "traverse_flat() (docarray.array.mixins.traverse.traversemixin method)": [[52, "docarray.array.mixins.traverse.TraverseMixin.traverse_flat"]], "traverse_flat_per_path() (docarray.array.mixins.traverse.traversemixin method)": [[52, "docarray.array.mixins.traverse.TraverseMixin.traverse_flat_per_path"]], "documentarrayqdrant (class in docarray.array.qdrant)": [[53, "docarray.array.qdrant.DocumentArrayQdrant"]], "qdrantconfig (class in docarray.array.qdrant)": [[53, "docarray.array.qdrant.QdrantConfig"]], "type_map (docarray.array.qdrant.documentarrayqdrant attribute)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.TYPE_MAP"]], "api_key (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.api_key"]], "append() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.append"]], "apply() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.apply"]], "apply_batch() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.apply_batch"]], "batch() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.batch"]], "batch_ids() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.batch_ids"]], "blobs (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.blobs"]], "clear() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.clear"]], "client (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.client"]], "cloud_delete() (docarray.array.qdrant.documentarrayqdrant static method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.cloud_delete"]], "cloud_list() (docarray.array.qdrant.documentarrayqdrant static method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.cloud_list"]], "cloud_pull() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.cloud_pull"]], "cloud_push() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.cloud_push"]], "collection_name (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.collection_name"]], "collection_name (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.collection_name"]], "collection_name_meta (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.collection_name_meta"]], "columns (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.columns"]], "config (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.config"]], "contents (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.contents"]], "count() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.count"]], "dataloader() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.dataloader"]], "distance (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.distance"]], "distance (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.distance"]], "docarray.array.qdrant": [[53, "module-docarray.array.qdrant"]], "ef_construct (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.ef_construct"]], "embed() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.embed"]], "embed_and_evaluate() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.embed_and_evaluate"]], "embeddings (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.embeddings"]], "empty() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.empty"]], "evaluate() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.evaluate"]], "extend() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.extend"]], "find() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.find"]], "flatten() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.flatten"]], "from_base64() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_base64"]], "from_bytes() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_bytes"]], "from_csv() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_csv"]], "from_dataframe() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_dataframe"]], "from_dict() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_dict"]], "from_files() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_files"]], "from_huggingface_datasets() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_huggingface_datasets"]], "from_json() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_json"]], "from_lines() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_lines"]], "from_list() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_list"]], "from_ndarray() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_ndarray"]], "from_ndjson() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_ndjson"]], "from_protobuf() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_protobuf"]], "from_pydantic_model() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_pydantic_model"]], "from_strawberry_type() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_strawberry_type"]], "full_scan_threshold (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.full_scan_threshold"]], "get_json_schema() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.get_json_schema"]], "get_vocabulary() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.get_vocabulary"]], "grpc_port (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.grpc_port"]], "host (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.host"]], "https (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.https"]], "index() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.index"]], "insert() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.insert"]], "list_like (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.list_like"]], "load() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.load"]], "load_binary() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.load_binary"]], "load_csv() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.load_csv"]], "load_json() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.load_json"]], "m (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.m"]], "map() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.map"]], "map_batch() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.map_batch"]], "match() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.match"]], "n_dim (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.n_dim"]], "n_dim (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.n_dim"]], "plot_embeddings() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.plot_embeddings"]], "plot_image_sprites() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.plot_image_sprites"]], "pop() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.pop"]], "port (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.port"]], "post() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.post"]], "prefer_grpc (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.prefer_grpc"]], "pull() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.pull"]], "push() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.push"]], "reduce() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.reduce"]], "reduce_all() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.reduce_all"]], "remove() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.remove"]], "reverse() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.reverse"]], "sample() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.sample"]], "save() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save"]], "save_binary() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save_binary"]], "save_csv() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save_csv"]], "save_embeddings_csv() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save_embeddings_csv"]], "save_gif() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save_gif"]], "save_json() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save_json"]], "scan() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.scan"]], "scroll_batch_size (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.scroll_batch_size"]], "scroll_batch_size (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.scroll_batch_size"]], "serialization_config (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.serialization_config"]], "serialize_config (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.serialize_config"]], "serialize_config (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.serialize_config"]], "shuffle() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.shuffle"]], "split_by_tag() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.split_by_tag"]], "summary() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.summary"]], "sync() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.sync"]], "tensors (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.tensors"]], "texts (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.texts"]], "to_base64() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_base64"]], "to_bytes() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_bytes"]], "to_dataframe() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_dataframe"]], "to_dict() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_dict"]], "to_json() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_json"]], "to_list() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_list"]], "to_protobuf() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_protobuf"]], "to_pydantic_model() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_pydantic_model"]], "to_strawberry_type() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_strawberry_type"]], "traverse() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.traverse"]], "traverse_flat() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.traverse_flat"]], "traverse_flat_per_path() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.traverse_flat_per_path"]], "docarray.array.queryset": [[54, "module-docarray.array.queryset"]], "lookupleaf (class in docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.LookupLeaf"]], "lookupnode (class in docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.LookupNode"]], "lookuptreeelem (class in docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.LookupTreeElem"]], "lookupyerror": [[55, "docarray.array.queryset.lookup.LookupyError"]], "q (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.Q"]], "add_child() (docarray.array.queryset.lookup.lookupnode method)": [[55, "docarray.array.queryset.lookup.LookupNode.add_child"]], "args (docarray.array.queryset.lookup.lookupyerror attribute)": [[55, "docarray.array.queryset.lookup.LookupyError.args"]], "docarray.array.queryset.lookup": [[55, "module-docarray.array.queryset.lookup"]], "dunder_partition() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.dunder_partition"]], "evaluate() (docarray.array.queryset.lookup.lookupleaf method)": [[55, "docarray.array.queryset.lookup.LookupLeaf.evaluate"]], "evaluate() (docarray.array.queryset.lookup.lookupnode method)": [[55, "docarray.array.queryset.lookup.LookupNode.evaluate"]], "evaluate() (docarray.array.queryset.lookup.lookuptreeelem method)": [[55, "docarray.array.queryset.lookup.LookupTreeElem.evaluate"]], "guard_q() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.guard_Q"]], "guard_iter() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.guard_iter"]], "guard_list() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.guard_list"]], "guard_str() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.guard_str"]], "guard_type() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.guard_type"]], "iff() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.iff"]], "iff_not_none() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.iff_not_none"]], "lookup() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.lookup"]], "with_traceback() (docarray.array.queryset.lookup.lookupyerror method)": [[55, "docarray.array.queryset.lookup.LookupyError.with_traceback"]], "queryparser (class in docarray.array.queryset.parser)": [[56, "docarray.array.queryset.parser.QueryParser"]], "docarray.array.queryset.parser": [[56, "module-docarray.array.queryset.parser"]], "evaluate() (docarray.array.queryset.parser.queryparser method)": [[56, "docarray.array.queryset.parser.QueryParser.evaluate"]], "documentarrayredis (class in docarray.array.redis)": [[57, "docarray.array.redis.DocumentArrayRedis"]], "redisconfig (class in docarray.array.redis)": [[57, "docarray.array.redis.RedisConfig"]], "type_map (docarray.array.redis.documentarrayredis attribute)": [[57, "docarray.array.redis.DocumentArrayRedis.TYPE_MAP"]], "append() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.append"]], "apply() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.apply"]], "apply_batch() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.apply_batch"]], "batch() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.batch"]], "batch_ids() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.batch_ids"]], "batch_size (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.batch_size"]], "blobs (docarray.array.redis.documentarrayredis property)": [[57, "docarray.array.redis.DocumentArrayRedis.blobs"]], "block_size (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.block_size"]], "clear() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.clear"]], "cloud_delete() (docarray.array.redis.documentarrayredis static method)": [[57, "docarray.array.redis.DocumentArrayRedis.cloud_delete"]], "cloud_list() (docarray.array.redis.documentarrayredis static method)": [[57, "docarray.array.redis.DocumentArrayRedis.cloud_list"]], "cloud_pull() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.cloud_pull"]], "cloud_push() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.cloud_push"]], "columns (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.columns"]], "contents (docarray.array.redis.documentarrayredis property)": [[57, "docarray.array.redis.DocumentArrayRedis.contents"]], "count() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.count"]], "dataloader() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.dataloader"]], "distance (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.distance"]], "docarray.array.redis": [[57, "module-docarray.array.redis"]], "ef_construction (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.ef_construction"]], "ef_runtime (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.ef_runtime"]], "embed() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.embed"]], "embed_and_evaluate() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.embed_and_evaluate"]], "embeddings (docarray.array.redis.documentarrayredis property)": [[57, "docarray.array.redis.DocumentArrayRedis.embeddings"]], "empty() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.empty"]], "evaluate() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.evaluate"]], "extend() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.extend"]], "find() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.find"]], "flatten() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.flatten"]], "from_base64() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_base64"]], "from_bytes() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_bytes"]], "from_csv() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_csv"]], "from_dataframe() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_dataframe"]], "from_dict() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_dict"]], "from_files() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_files"]], "from_huggingface_datasets() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_huggingface_datasets"]], "from_json() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_json"]], "from_lines() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_lines"]], "from_list() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_list"]], "from_ndarray() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_ndarray"]], "from_ndjson() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_ndjson"]], "from_protobuf() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_protobuf"]], "from_pydantic_model() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_pydantic_model"]], "from_strawberry_type() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_strawberry_type"]], "get_json_schema() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.get_json_schema"]], "get_vocabulary() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.get_vocabulary"]], "host (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.host"]], "index() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.index"]], "index_name (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.index_name"]], "index_text (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.index_text"]], "initial_cap (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.initial_cap"]], "insert() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.insert"]], "list_like (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.list_like"]], "load() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.load"]], "load_binary() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.load_binary"]], "load_csv() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.load_csv"]], "load_json() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.load_json"]], "m (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.m"]], "map() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.map"]], "map_batch() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.map_batch"]], "match() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.match"]], "method (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.method"]], "n_dim (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.n_dim"]], "plot_embeddings() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.plot_embeddings"]], "plot_image_sprites() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.plot_image_sprites"]], "pop() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.pop"]], "port (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.port"]], "post() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.post"]], "pull() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.pull"]], "push() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.push"]], "redis_config (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.redis_config"]], "reduce() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.reduce"]], "reduce_all() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.reduce_all"]], "remove() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.remove"]], "reverse() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.reverse"]], "sample() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.sample"]], "save() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.save"]], "save_binary() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.save_binary"]], "save_csv() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.save_csv"]], "save_embeddings_csv() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.save_embeddings_csv"]], "save_gif() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.save_gif"]], "save_json() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.save_json"]], "shuffle() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.shuffle"]], "split_by_tag() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.split_by_tag"]], "summary() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.summary"]], "sync() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.sync"]], "tag_indices (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.tag_indices"]], "tensors (docarray.array.redis.documentarrayredis property)": [[57, "docarray.array.redis.DocumentArrayRedis.tensors"]], "texts (docarray.array.redis.documentarrayredis property)": [[57, "docarray.array.redis.DocumentArrayRedis.texts"]], "to_base64() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_base64"]], "to_bytes() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_bytes"]], "to_dataframe() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_dataframe"]], "to_dict() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_dict"]], "to_json() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_json"]], "to_list() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_list"]], "to_protobuf() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_protobuf"]], "to_pydantic_model() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_pydantic_model"]], "to_strawberry_type() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_strawberry_type"]], "traverse() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.traverse"]], "traverse_flat() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.traverse_flat"]], "traverse_flat_per_path() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.traverse_flat_per_path"]], "update_schema (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.update_schema"]], "documentarraysqlite (class in docarray.array.sqlite)": [[58, "docarray.array.sqlite.DocumentArraySqlite"]], "sqliteconfig (class in docarray.array.sqlite)": [[58, "docarray.array.sqlite.SqliteConfig"]], "type_map (docarray.array.sqlite.documentarraysqlite attribute)": [[58, "docarray.array.sqlite.DocumentArraySqlite.TYPE_MAP"]], "append() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.append"]], "apply() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.apply"]], "apply_batch() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.apply_batch"]], "batch() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.batch"]], "batch_ids() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.batch_ids"]], "blobs (docarray.array.sqlite.documentarraysqlite property)": [[58, "docarray.array.sqlite.DocumentArraySqlite.blobs"]], "clear() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.clear"]], "cloud_delete() (docarray.array.sqlite.documentarraysqlite static method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.cloud_delete"]], "cloud_list() (docarray.array.sqlite.documentarraysqlite static method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.cloud_list"]], "cloud_pull() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.cloud_pull"]], "cloud_push() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.cloud_push"]], "conn_config (docarray.array.sqlite.sqliteconfig attribute)": [[58, "docarray.array.sqlite.SqliteConfig.conn_config"]], "connection (docarray.array.sqlite.sqliteconfig attribute)": [[58, "docarray.array.sqlite.SqliteConfig.connection"]], "contents (docarray.array.sqlite.documentarraysqlite property)": [[58, "docarray.array.sqlite.DocumentArraySqlite.contents"]], "count() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.count"]], "dataloader() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.dataloader"]], "docarray.array.sqlite": [[58, "module-docarray.array.sqlite"]], "embed() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.embed"]], "embed_and_evaluate() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.embed_and_evaluate"]], "embeddings (docarray.array.sqlite.documentarraysqlite property)": [[58, "docarray.array.sqlite.DocumentArraySqlite.embeddings"]], "empty() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.empty"]], "evaluate() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.evaluate"]], "extend() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.extend"]], "find() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.find"]], "flatten() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.flatten"]], "from_base64() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_base64"]], "from_bytes() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_bytes"]], "from_csv() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_csv"]], "from_dataframe() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_dataframe"]], "from_dict() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_dict"]], "from_files() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_files"]], "from_huggingface_datasets() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_huggingface_datasets"]], "from_json() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_json"]], "from_lines() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_lines"]], "from_list() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_list"]], "from_ndarray() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_ndarray"]], "from_ndjson() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_ndjson"]], "from_protobuf() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_protobuf"]], "from_pydantic_model() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_pydantic_model"]], "from_strawberry_type() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_strawberry_type"]], "get_json_schema() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.get_json_schema"]], "get_vocabulary() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.get_vocabulary"]], "index() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.index"]], "insert() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.insert"]], "journal_mode (docarray.array.sqlite.sqliteconfig attribute)": [[58, "docarray.array.sqlite.SqliteConfig.journal_mode"]], "list_like (docarray.array.sqlite.sqliteconfig attribute)": [[58, "docarray.array.sqlite.SqliteConfig.list_like"]], "load() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.load"]], "load_binary() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.load_binary"]], "load_csv() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.load_csv"]], "load_json() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.load_json"]], "map() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.map"]], "map_batch() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.map_batch"]], "match() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.match"]], "plot_embeddings() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.plot_embeddings"]], "plot_image_sprites() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.plot_image_sprites"]], "pop() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.pop"]], "post() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.post"]], "pull() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.pull"]], "push() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.push"]], "reduce() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.reduce"]], "reduce_all() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.reduce_all"]], "remove() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.remove"]], "reverse() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.reverse"]], "sample() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.sample"]], "save() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.save"]], "save_binary() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.save_binary"]], "save_csv() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.save_csv"]], "save_embeddings_csv() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.save_embeddings_csv"]], "save_gif() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.save_gif"]], "save_json() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.save_json"]], "schema_version (docarray.array.sqlite.documentarraysqlite attribute)": [[58, "docarray.array.sqlite.DocumentArraySqlite.schema_version"]], "serialize_config (docarray.array.sqlite.sqliteconfig attribute)": [[58, "docarray.array.sqlite.SqliteConfig.serialize_config"]], "shuffle() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.shuffle"]], "split_by_tag() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.split_by_tag"]], "summary() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.summary"]], "sync() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.sync"]], "synchronous (docarray.array.sqlite.sqliteconfig attribute)": [[58, "docarray.array.sqlite.SqliteConfig.synchronous"]], "table_name (docarray.array.sqlite.sqliteconfig attribute)": [[58, "docarray.array.sqlite.SqliteConfig.table_name"]], "tensors (docarray.array.sqlite.documentarraysqlite property)": [[58, "docarray.array.sqlite.DocumentArraySqlite.tensors"]], "texts (docarray.array.sqlite.documentarraysqlite property)": [[58, "docarray.array.sqlite.DocumentArraySqlite.texts"]], "to_base64() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_base64"]], "to_bytes() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_bytes"]], "to_dataframe() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_dataframe"]], "to_dict() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_dict"]], "to_json() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_json"]], "to_list() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_list"]], "to_protobuf() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_protobuf"]], "to_pydantic_model() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_pydantic_model"]], "to_strawberry_type() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_strawberry_type"]], "traverse() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.traverse"]], "traverse_flat() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.traverse_flat"]], "traverse_flat_per_path() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.traverse_flat_per_path"]], "docarray.array.storage": [[59, "module-docarray.array.storage"]], "annliteconfig (class in docarray.array.storage.annlite)": [[60, "docarray.array.storage.annlite.AnnliteConfig"]], "storagemixins (class in docarray.array.storage.annlite)": [[60, "docarray.array.storage.annlite.StorageMixins"]], "type_map (docarray.array.storage.annlite.storagemixins attribute)": [[60, "docarray.array.storage.annlite.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.append"]], "clear() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.clear"]], "columns (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.columns"]], "count() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.count"]], "data_path (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.data_path"]], "docarray.array.storage.annlite": [[60, "module-docarray.array.storage.annlite"]], "ef_construction (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.ef_search"]], "extend() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.extend"]], "index() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.index"]], "insert() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.insert"]], "list_like (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.list_like"]], "max_connection (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.max_connection"]], "metric (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.metric"]], "n_components (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.n_components"]], "n_dim (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.n_dim"]], "pop() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.pop"]], "remove() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.remove"]], "reverse() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.reverse"]], "serialize_config (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.serialize_config"]], "sync() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.sync"]], "annliteconfig (class in docarray.array.storage.annlite.backend)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig"]], "backendmixin (class in docarray.array.storage.annlite.backend)": [[61, "docarray.array.storage.annlite.backend.BackendMixin"]], "type_map (docarray.array.storage.annlite.backend.backendmixin attribute)": [[61, "docarray.array.storage.annlite.backend.BackendMixin.TYPE_MAP"]], "columns (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.columns"]], "data_path (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.data_path"]], "docarray.array.storage.annlite.backend": [[61, "module-docarray.array.storage.annlite.backend"]], "ef_construction (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.ef_search"]], "list_like (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.list_like"]], "max_connection (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.max_connection"]], "metric (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.metric"]], "n_components (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.n_components"]], "n_dim (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.n_dim"]], "serialize_config (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.serialize_config"]], "findmixin (class in docarray.array.storage.annlite.find)": [[62, "docarray.array.storage.annlite.find.FindMixin"]], "docarray.array.storage.annlite.find": [[62, "module-docarray.array.storage.annlite.find"]], "getsetdelmixin (class in docarray.array.storage.annlite.getsetdel)": [[63, "docarray.array.storage.annlite.getsetdel.GetSetDelMixin"]], "docarray.array.storage.annlite.getsetdel": [[63, "module-docarray.array.storage.annlite.getsetdel"]], "sync() (docarray.array.storage.annlite.getsetdel.getsetdelmixin method)": [[63, "docarray.array.storage.annlite.getsetdel.GetSetDelMixin.sync"]], "offsetmapping (class in docarray.array.storage.annlite.helper)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping"]], "clear() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.clear"]], "close() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.close"]], "commit() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.commit"]], "create_table() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.create_table"]], "del_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.del_at_offset"]], "del_at_offsets() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.del_at_offsets"]], "docarray.array.storage.annlite.helper": [[64, "module-docarray.array.storage.annlite.helper"]], "drop() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.drop"]], "drop_table() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.drop_table"]], "dump() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.dump"]], "execute() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.execute"]], "execute_many() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.execute_many"]], "extend_doc_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.extend_doc_ids"]], "get_all_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.get_all_ids"]], "get_id_by_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.get_id_by_offset"]], "get_ids_by_offsets() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.get_ids_by_offsets"]], "get_offset_by_id() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.get_offset_by_id"]], "get_offsets_by_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.get_offsets_by_ids"]], "insert_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.insert_at_offset"]], "load() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.load"]], "name (docarray.array.storage.annlite.helper.offsetmapping property)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.name"]], "schema (docarray.array.storage.annlite.helper.offsetmapping property)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.schema"]], "set_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.set_at_offset"]], "shift_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.shift_offset"]], "size (docarray.array.storage.annlite.helper.offsetmapping property)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.size"]], "sequencelikemixin (class in docarray.array.storage.annlite.seqlike)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.annlite.seqlike": [[65, "module-docarray.array.storage.annlite.seqlike"]], "extend() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.reverse"]], "docarray.array.storage.base": [[66, "module-docarray.array.storage.base"]], "basebackendmixin (class in docarray.array.storage.base.backend)": [[67, "docarray.array.storage.base.backend.BaseBackendMixin"]], "type_map (docarray.array.storage.base.backend.basebackendmixin attribute)": [[67, "docarray.array.storage.base.backend.BaseBackendMixin.TYPE_MAP"]], "typemap (class in docarray.array.storage.base.backend)": [[67, "docarray.array.storage.base.backend.TypeMap"]], "converter (docarray.array.storage.base.backend.typemap property)": [[67, "docarray.array.storage.base.backend.TypeMap.converter"]], "count() (docarray.array.storage.base.backend.typemap method)": [[67, "docarray.array.storage.base.backend.TypeMap.count"]], "docarray.array.storage.base.backend": [[67, "module-docarray.array.storage.base.backend"]], "index() (docarray.array.storage.base.backend.typemap method)": [[67, "docarray.array.storage.base.backend.TypeMap.index"]], "type (docarray.array.storage.base.backend.typemap property)": [[67, "docarray.array.storage.base.backend.TypeMap.type"]], "basegetsetdelmixin (class in docarray.array.storage.base.getsetdel)": [[68, "docarray.array.storage.base.getsetdel.BaseGetSetDelMixin"]], "docarray.array.storage.base.getsetdel": [[68, "module-docarray.array.storage.base.getsetdel"]], "sync() (docarray.array.storage.base.getsetdel.basegetsetdelmixin method)": [[68, "docarray.array.storage.base.getsetdel.BaseGetSetDelMixin.sync"]], "offset2id (class in docarray.array.storage.base.helper)": [[69, "docarray.array.storage.base.helper.Offset2ID"]], "append() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.append"]], "clear() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.clear"]], "delete_by_id() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.delete_by_id"]], "delete_by_ids() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.delete_by_ids"]], "delete_by_offset() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.delete_by_offset"]], "docarray.array.storage.base.helper": [[69, "module-docarray.array.storage.base.helper"]], "extend() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.extend"]], "get_id() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.get_id"]], "index() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.index"]], "insert() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.insert"]], "load() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.load"]], "save() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.save"]], "update() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.update"]], "update_ids() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.update_ids"]], "basesequencelikemixin (class in docarray.array.storage.base.seqlike)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin"]], "append() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.append"]], "clear() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.clear"]], "count() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.count"]], "docarray.array.storage.base.seqlike": [[70, "module-docarray.array.storage.base.seqlike"]], "extend() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.extend"]], "index() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.index"]], "insert() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.insert"]], "pop() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.pop"]], "remove() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.reverse"]], "elasticconfig (class in docarray.array.storage.elastic)": [[71, "docarray.array.storage.elastic.ElasticConfig"]], "max_es_returned_docs (docarray.array.storage.elastic.storagemixins attribute)": [[71, "docarray.array.storage.elastic.StorageMixins.MAX_ES_RETURNED_DOCS"]], "storagemixins (class in docarray.array.storage.elastic)": [[71, "docarray.array.storage.elastic.StorageMixins"]], "type_map (docarray.array.storage.elastic.storagemixins attribute)": [[71, "docarray.array.storage.elastic.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.append"]], "batch_size (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.batch_size"]], "clear() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.clear"]], "columns (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.columns"]], "count() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.count"]], "distance (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.distance"]], "docarray.array.storage.elastic": [[71, "module-docarray.array.storage.elastic"]], "ef_construction (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.ef_construction"]], "es_config (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.es_config"]], "extend() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.extend"]], "find() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.find"]], "hosts (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.hosts"]], "index() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.index"]], "index_name (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.index_name"]], "index_text (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.index_text"]], "insert() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.insert"]], "list_like (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.list_like"]], "m (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.m"]], "n_dim (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.n_dim"]], "pop() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.pop"]], "remove() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.remove"]], "reverse() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.reverse"]], "sync() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.sync"]], "tag_indices (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.tag_indices"]], "backendmixin (class in docarray.array.storage.elastic.backend)": [[72, "docarray.array.storage.elastic.backend.BackendMixin"]], "elasticconfig (class in docarray.array.storage.elastic.backend)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig"]], "type_map (docarray.array.storage.elastic.backend.backendmixin attribute)": [[72, "docarray.array.storage.elastic.backend.BackendMixin.TYPE_MAP"]], "batch_size (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.batch_size"]], "columns (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.columns"]], "distance (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.distance"]], "docarray.array.storage.elastic.backend": [[72, "module-docarray.array.storage.elastic.backend"]], "ef_construction (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.ef_construction"]], "es_config (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.es_config"]], "hosts (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.hosts"]], "index_name (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.index_name"]], "index_text (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.index_text"]], "list_like (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.list_like"]], "m (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.m"]], "n_dim (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.n_dim"]], "tag_indices (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.tag_indices"]], "findmixin (class in docarray.array.storage.elastic.find)": [[73, "docarray.array.storage.elastic.find.FindMixin"]], "docarray.array.storage.elastic.find": [[73, "module-docarray.array.storage.elastic.find"]], "find() (docarray.array.storage.elastic.find.findmixin method)": [[73, "docarray.array.storage.elastic.find.FindMixin.find"]], "getsetdelmixin (class in docarray.array.storage.elastic.getsetdel)": [[74, "docarray.array.storage.elastic.getsetdel.GetSetDelMixin"]], "max_es_returned_docs (docarray.array.storage.elastic.getsetdel.getsetdelmixin attribute)": [[74, "docarray.array.storage.elastic.getsetdel.GetSetDelMixin.MAX_ES_RETURNED_DOCS"]], "docarray.array.storage.elastic.getsetdel": [[74, "module-docarray.array.storage.elastic.getsetdel"]], "sync() (docarray.array.storage.elastic.getsetdel.getsetdelmixin method)": [[74, "docarray.array.storage.elastic.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.elastic.seqlike)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.elastic.seqlike": [[75, "module-docarray.array.storage.elastic.seqlike"]], "extend() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.reverse"]], "storagemixins (class in docarray.array.storage.memory)": [[76, "docarray.array.storage.memory.StorageMixins"]], "type_map (docarray.array.storage.memory.storagemixins attribute)": [[76, "docarray.array.storage.memory.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.append"]], "clear() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.clear"]], "count() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.count"]], "docarray.array.storage.memory": [[76, "module-docarray.array.storage.memory"]], "extend() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.extend"]], "index() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.index"]], "insert() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.insert"]], "pop() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.pop"]], "remove() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.remove"]], "reverse() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.reverse"]], "sync() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.sync"]], "backendmixin (class in docarray.array.storage.memory.backend)": [[77, "docarray.array.storage.memory.backend.BackendMixin"]], "type_map (docarray.array.storage.memory.backend.backendmixin attribute)": [[77, "docarray.array.storage.memory.backend.BackendMixin.TYPE_MAP"]], "docarray.array.storage.memory.backend": [[77, "module-docarray.array.storage.memory.backend"]], "needs_id2offset_rebuild() (in module docarray.array.storage.memory.backend)": [[77, "docarray.array.storage.memory.backend.needs_id2offset_rebuild"]], "findmixin (class in docarray.array.storage.memory.find)": [[78, "docarray.array.storage.memory.find.FindMixin"]], "docarray.array.storage.memory.find": [[78, "module-docarray.array.storage.memory.find"]], "getsetdelmixin (class in docarray.array.storage.memory.getsetdel)": [[79, "docarray.array.storage.memory.getsetdel.GetSetDelMixin"]], "docarray.array.storage.memory.getsetdel": [[79, "module-docarray.array.storage.memory.getsetdel"]], "sync() (docarray.array.storage.memory.getsetdel.getsetdelmixin method)": [[79, "docarray.array.storage.memory.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.memory.seqlike)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.memory.seqlike": [[80, "module-docarray.array.storage.memory.seqlike"]], "extend() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.reverse"]], "qdrantconfig (class in docarray.array.storage.qdrant)": [[81, "docarray.array.storage.qdrant.QdrantConfig"]], "storagemixins (class in docarray.array.storage.qdrant)": [[81, "docarray.array.storage.qdrant.StorageMixins"]], "type_map (docarray.array.storage.qdrant.storagemixins attribute)": [[81, "docarray.array.storage.qdrant.StorageMixins.TYPE_MAP"]], "api_key (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.api_key"]], "append() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.append"]], "clear() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.clear"]], "client (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.client"]], "collection_name (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.collection_name"]], "collection_name (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.collection_name"]], "collection_name_meta (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.collection_name_meta"]], "columns (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.columns"]], "config (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.config"]], "count() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.count"]], "distance (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.distance"]], "distance (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.distance"]], "docarray.array.storage.qdrant": [[81, "module-docarray.array.storage.qdrant"]], "ef_construct (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.ef_construct"]], "extend() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.extend"]], "full_scan_threshold (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.full_scan_threshold"]], "grpc_port (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.grpc_port"]], "host (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.host"]], "https (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.https"]], "index() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.index"]], "insert() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.insert"]], "list_like (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.list_like"]], "m (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.m"]], "n_dim (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.n_dim"]], "n_dim (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.n_dim"]], "pop() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.pop"]], "port (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.port"]], "prefer_grpc (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.prefer_grpc"]], "remove() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.remove"]], "reverse() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.reverse"]], "scan() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.scan"]], "scroll_batch_size (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.scroll_batch_size"]], "scroll_batch_size (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.scroll_batch_size"]], "serialization_config (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.serialization_config"]], "serialize_config (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.serialize_config"]], "serialize_config (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.serialize_config"]], "sync() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.sync"]], "backendmixin (class in docarray.array.storage.qdrant.backend)": [[82, "docarray.array.storage.qdrant.backend.BackendMixin"]], "qdrantconfig (class in docarray.array.storage.qdrant.backend)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig"]], "type_map (docarray.array.storage.qdrant.backend.backendmixin attribute)": [[82, "docarray.array.storage.qdrant.backend.BackendMixin.TYPE_MAP"]], "api_key (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.api_key"]], "client (docarray.array.storage.qdrant.backend.backendmixin property)": [[82, "docarray.array.storage.qdrant.backend.BackendMixin.client"]], "collection_name (docarray.array.storage.qdrant.backend.backendmixin property)": [[82, "docarray.array.storage.qdrant.backend.BackendMixin.collection_name"]], "collection_name (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.collection_name"]], "columns (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.columns"]], "distance (docarray.array.storage.qdrant.backend.backendmixin property)": [[82, "docarray.array.storage.qdrant.backend.BackendMixin.distance"]], "distance (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.distance"]], "docarray.array.storage.qdrant.backend": [[82, "module-docarray.array.storage.qdrant.backend"]], "ef_construct (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.ef_construct"]], "full_scan_threshold (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.full_scan_threshold"]], "grpc_port (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.grpc_port"]], "host (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.host"]], "https (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.https"]], "list_like (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.list_like"]], "m (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.m"]], "n_dim (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.n_dim"]], "port (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.port"]], "prefer_grpc (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.prefer_grpc"]], "scroll_batch_size (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.scroll_batch_size"]], "serialize_config (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.serialize_config"]], "findmixin (class in docarray.array.storage.qdrant.find)": [[83, "docarray.array.storage.qdrant.find.FindMixin"]], "client (docarray.array.storage.qdrant.find.findmixin property)": [[83, "docarray.array.storage.qdrant.find.FindMixin.client"]], "collection_name (docarray.array.storage.qdrant.find.findmixin property)": [[83, "docarray.array.storage.qdrant.find.FindMixin.collection_name"]], "distance (docarray.array.storage.qdrant.find.findmixin property)": [[83, "docarray.array.storage.qdrant.find.FindMixin.distance"]], "docarray.array.storage.qdrant.find": [[83, "module-docarray.array.storage.qdrant.find"]], "serialize_config (docarray.array.storage.qdrant.find.findmixin property)": [[83, "docarray.array.storage.qdrant.find.FindMixin.serialize_config"]], "getsetdelmixin (class in docarray.array.storage.qdrant.getsetdel)": [[84, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin"]], "client (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[84, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.client"]], "collection_name (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[84, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.collection_name"]], "docarray.array.storage.qdrant.getsetdel": [[84, "module-docarray.array.storage.qdrant.getsetdel"]], "n_dim (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[84, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.n_dim"]], "scan() (docarray.array.storage.qdrant.getsetdel.getsetdelmixin method)": [[84, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.scan"]], "scroll_batch_size (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[84, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.scroll_batch_size"]], "serialization_config (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[84, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.serialization_config"]], "sync() (docarray.array.storage.qdrant.getsetdel.getsetdelmixin method)": [[84, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.sync"]], "docarray.array.storage.qdrant.helper": [[85, "module-docarray.array.storage.qdrant.helper"]], "sequencelikemixin (class in docarray.array.storage.qdrant.seqlike)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.clear"]], "client (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.client"]], "collection_name (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.collection_name"]], "config (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.config"]], "count() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.qdrant.seqlike": [[86, "module-docarray.array.storage.qdrant.seqlike"]], "extend() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.reverse"]], "redisconfig (class in docarray.array.storage.redis)": [[87, "docarray.array.storage.redis.RedisConfig"]], "storagemixins (class in docarray.array.storage.redis)": [[87, "docarray.array.storage.redis.StorageMixins"]], "type_map (docarray.array.storage.redis.storagemixins attribute)": [[87, "docarray.array.storage.redis.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.append"]], "batch_size (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.batch_size"]], "block_size (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.block_size"]], "clear() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.clear"]], "columns (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.columns"]], "count() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.count"]], "distance (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.distance"]], "docarray.array.storage.redis": [[87, "module-docarray.array.storage.redis"]], "ef_construction (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.ef_construction"]], "ef_runtime (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.ef_runtime"]], "extend() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.extend"]], "find() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.find"]], "host (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.host"]], "index() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.index"]], "index_name (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.index_name"]], "index_text (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.index_text"]], "initial_cap (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.initial_cap"]], "insert() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.insert"]], "list_like (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.list_like"]], "m (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.m"]], "method (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.method"]], "n_dim (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.n_dim"]], "pop() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.pop"]], "port (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.port"]], "redis_config (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.redis_config"]], "remove() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.remove"]], "reverse() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.reverse"]], "sync() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.sync"]], "tag_indices (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.tag_indices"]], "update_schema (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.update_schema"]], "backendmixin (class in docarray.array.storage.redis.backend)": [[88, "docarray.array.storage.redis.backend.BackendMixin"]], "redisconfig (class in docarray.array.storage.redis.backend)": [[88, "docarray.array.storage.redis.backend.RedisConfig"]], "type_map (docarray.array.storage.redis.backend.backendmixin attribute)": [[88, "docarray.array.storage.redis.backend.BackendMixin.TYPE_MAP"]], "batch_size (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.batch_size"]], "block_size (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.block_size"]], "columns (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.columns"]], "distance (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.distance"]], "docarray.array.storage.redis.backend": [[88, "module-docarray.array.storage.redis.backend"]], "ef_construction (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.ef_construction"]], "ef_runtime (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.ef_runtime"]], "host (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.host"]], "index_name (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.index_name"]], "index_text (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.index_text"]], "initial_cap (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.initial_cap"]], "list_like (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.list_like"]], "m (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.m"]], "method (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.method"]], "n_dim (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.n_dim"]], "port (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.port"]], "redis_config (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.redis_config"]], "tag_indices (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.tag_indices"]], "update_schema (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.update_schema"]], "findmixin (class in docarray.array.storage.redis.find)": [[89, "docarray.array.storage.redis.find.FindMixin"]], "docarray.array.storage.redis.find": [[89, "module-docarray.array.storage.redis.find"]], "find() (docarray.array.storage.redis.find.findmixin method)": [[89, "docarray.array.storage.redis.find.FindMixin.find"]], "getsetdelmixin (class in docarray.array.storage.redis.getsetdel)": [[90, "docarray.array.storage.redis.getsetdel.GetSetDelMixin"]], "docarray.array.storage.redis.getsetdel": [[90, "module-docarray.array.storage.redis.getsetdel"]], "sync() (docarray.array.storage.redis.getsetdel.getsetdelmixin method)": [[90, "docarray.array.storage.redis.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.redis.seqlike)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.redis.seqlike": [[91, "module-docarray.array.storage.redis.seqlike"]], "extend() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.reverse"]], "docarray.array.storage.registry": [[92, "module-docarray.array.storage.registry"]], "sqliteconfig (class in docarray.array.storage.sqlite)": [[93, "docarray.array.storage.sqlite.SqliteConfig"]], "storagemixins (class in docarray.array.storage.sqlite)": [[93, "docarray.array.storage.sqlite.StorageMixins"]], "type_map (docarray.array.storage.sqlite.storagemixins attribute)": [[93, "docarray.array.storage.sqlite.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.append"]], "clear() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.clear"]], "conn_config (docarray.array.storage.sqlite.sqliteconfig attribute)": [[93, "docarray.array.storage.sqlite.SqliteConfig.conn_config"]], "connection (docarray.array.storage.sqlite.sqliteconfig attribute)": [[93, "docarray.array.storage.sqlite.SqliteConfig.connection"]], "count() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.count"]], "docarray.array.storage.sqlite": [[93, "module-docarray.array.storage.sqlite"]], "extend() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.extend"]], "index() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.index"]], "insert() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.insert"]], "journal_mode (docarray.array.storage.sqlite.sqliteconfig attribute)": [[93, "docarray.array.storage.sqlite.SqliteConfig.journal_mode"]], "list_like (docarray.array.storage.sqlite.sqliteconfig attribute)": [[93, "docarray.array.storage.sqlite.SqliteConfig.list_like"]], "pop() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.pop"]], "remove() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.remove"]], "reverse() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.reverse"]], "schema_version (docarray.array.storage.sqlite.storagemixins attribute)": [[93, "docarray.array.storage.sqlite.StorageMixins.schema_version"]], "serialize_config (docarray.array.storage.sqlite.sqliteconfig attribute)": [[93, "docarray.array.storage.sqlite.SqliteConfig.serialize_config"]], "sync() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.sync"]], "synchronous (docarray.array.storage.sqlite.sqliteconfig attribute)": [[93, "docarray.array.storage.sqlite.SqliteConfig.synchronous"]], "table_name (docarray.array.storage.sqlite.sqliteconfig attribute)": [[93, "docarray.array.storage.sqlite.SqliteConfig.table_name"]], "backendmixin (class in docarray.array.storage.sqlite.backend)": [[94, "docarray.array.storage.sqlite.backend.BackendMixin"]], "sqliteconfig (class in docarray.array.storage.sqlite.backend)": [[94, "docarray.array.storage.sqlite.backend.SqliteConfig"]], "type_map (docarray.array.storage.sqlite.backend.backendmixin attribute)": [[94, "docarray.array.storage.sqlite.backend.BackendMixin.TYPE_MAP"]], "conn_config (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[94, "docarray.array.storage.sqlite.backend.SqliteConfig.conn_config"]], "connection (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[94, "docarray.array.storage.sqlite.backend.SqliteConfig.connection"]], "docarray.array.storage.sqlite.backend": [[94, "module-docarray.array.storage.sqlite.backend"]], "journal_mode (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[94, "docarray.array.storage.sqlite.backend.SqliteConfig.journal_mode"]], "list_like (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[94, "docarray.array.storage.sqlite.backend.SqliteConfig.list_like"]], "schema_version (docarray.array.storage.sqlite.backend.backendmixin attribute)": [[94, "docarray.array.storage.sqlite.backend.BackendMixin.schema_version"]], "serialize_config (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[94, "docarray.array.storage.sqlite.backend.SqliteConfig.serialize_config"]], "synchronous (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[94, "docarray.array.storage.sqlite.backend.SqliteConfig.synchronous"]], "table_name (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[94, "docarray.array.storage.sqlite.backend.SqliteConfig.table_name"]], "getsetdelmixin (class in docarray.array.storage.sqlite.getsetdel)": [[95, "docarray.array.storage.sqlite.getsetdel.GetSetDelMixin"]], "docarray.array.storage.sqlite.getsetdel": [[95, "module-docarray.array.storage.sqlite.getsetdel"]], "sync() (docarray.array.storage.sqlite.getsetdel.getsetdelmixin method)": [[95, "docarray.array.storage.sqlite.getsetdel.GetSetDelMixin.sync"]], "docarray.array.storage.sqlite.helper": [[96, "module-docarray.array.storage.sqlite.helper"]], "initialize_table() (in module docarray.array.storage.sqlite.helper)": [[96, "docarray.array.storage.sqlite.helper.initialize_table"]], "sequencelikemixin (class in docarray.array.storage.sqlite.seqlike)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.sqlite.seqlike": [[97, "module-docarray.array.storage.sqlite.seqlike"]], "extend() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.reverse"]], "storagemixins (class in docarray.array.storage.weaviate)": [[98, "docarray.array.storage.weaviate.StorageMixins"]], "type_map (docarray.array.storage.weaviate.storagemixins attribute)": [[98, "docarray.array.storage.weaviate.StorageMixins.TYPE_MAP"]], "weaviateconfig (class in docarray.array.storage.weaviate)": [[98, "docarray.array.storage.weaviate.WeaviateConfig"]], "append() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.append"]], "batch_size (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.batch_size"]], "cleanup_interval_seconds (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.cleanup_interval_seconds"]], "clear() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.clear"]], "columns (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.columns"]], "count() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.count"]], "distance (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.distance"]], "docarray.array.storage.weaviate": [[98, "module-docarray.array.storage.weaviate"]], "dynamic_batching (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_batching"]], "dynamic_ef_factor (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.ef"]], "ef_construction (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.ef_construction"]], "extend() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.extend"]], "flat_search_cutoff (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.flat_search_cutoff"]], "host (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.host"]], "index() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.index"]], "insert() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.insert"]], "list_like (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.list_like"]], "max_connections (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.max_connections"]], "n_dim (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.n_dim"]], "name (docarray.array.storage.weaviate.storagemixins property)": [[98, "docarray.array.storage.weaviate.StorageMixins.name"]], "name (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.name"]], "pop() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.pop"]], "port (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.port"]], "protocol (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.protocol"]], "remove() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.remove"]], "reverse() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.reverse"]], "serialize_config (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.serialize_config"]], "skip (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.skip"]], "sync() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.sync"]], "timeout_config (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.timeout_config"]], "vector_cache_max_objects (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.vector_cache_max_objects"]], "backendmixin (class in docarray.array.storage.weaviate.backend)": [[99, "docarray.array.storage.weaviate.backend.BackendMixin"]], "type_map (docarray.array.storage.weaviate.backend.backendmixin attribute)": [[99, "docarray.array.storage.weaviate.backend.BackendMixin.TYPE_MAP"]], "weaviateconfig (class in docarray.array.storage.weaviate.backend)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig"]], "batch_size (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.batch_size"]], "cleanup_interval_seconds (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.cleanup_interval_seconds"]], "columns (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.columns"]], "distance (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.distance"]], "docarray.array.storage.weaviate.backend": [[99, "module-docarray.array.storage.weaviate.backend"]], "dynamic_batching (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_batching"]], "dynamic_ef_factor (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.ef"]], "ef_construction (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.ef_construction"]], "flat_search_cutoff (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.flat_search_cutoff"]], "host (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.host"]], "list_like (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.list_like"]], "max_connections (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.max_connections"]], "n_dim (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.n_dim"]], "name (docarray.array.storage.weaviate.backend.backendmixin property)": [[99, "docarray.array.storage.weaviate.backend.BackendMixin.name"]], "name (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.name"]], "port (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.port"]], "protocol (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.protocol"]], "serialize_config (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.serialize_config"]], "skip (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.skip"]], "timeout_config (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.timeout_config"]], "vector_cache_max_objects (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.vector_cache_max_objects"]], "findmixin (class in docarray.array.storage.weaviate.find)": [[100, "docarray.array.storage.weaviate.find.FindMixin"]], "docarray.array.storage.weaviate.find": [[100, "module-docarray.array.storage.weaviate.find"]], "getsetdelmixin (class in docarray.array.storage.weaviate.getsetdel)": [[101, "docarray.array.storage.weaviate.getsetdel.GetSetDelMixin"]], "docarray.array.storage.weaviate.getsetdel": [[101, "module-docarray.array.storage.weaviate.getsetdel"]], "sync() (docarray.array.storage.weaviate.getsetdel.getsetdelmixin method)": [[101, "docarray.array.storage.weaviate.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.weaviate.seqlike)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.weaviate.seqlike": [[102, "module-docarray.array.storage.weaviate.seqlike"]], "extend() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.reverse"]], "documentarrayweaviate (class in docarray.array.weaviate)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate"]], "type_map (docarray.array.weaviate.documentarrayweaviate attribute)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.TYPE_MAP"]], "weaviateconfig (class in docarray.array.weaviate)": [[103, "docarray.array.weaviate.WeaviateConfig"]], "append() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.append"]], "apply() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.apply"]], "apply_batch() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.apply_batch"]], "batch() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.batch"]], "batch_ids() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.batch_ids"]], "batch_size (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.batch_size"]], "blobs (docarray.array.weaviate.documentarrayweaviate property)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.blobs"]], "cleanup_interval_seconds (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.cleanup_interval_seconds"]], "clear() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.clear"]], "cloud_delete() (docarray.array.weaviate.documentarrayweaviate static method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.cloud_delete"]], "cloud_list() (docarray.array.weaviate.documentarrayweaviate static method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.cloud_list"]], "cloud_pull() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.cloud_pull"]], "cloud_push() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.cloud_push"]], "columns (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.columns"]], "contents (docarray.array.weaviate.documentarrayweaviate property)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.contents"]], "count() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.count"]], "dataloader() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.dataloader"]], "distance (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.distance"]], "docarray.array.weaviate": [[103, "module-docarray.array.weaviate"]], "dynamic_batching (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.dynamic_batching"]], "dynamic_ef_factor (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.ef"]], "ef_construction (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.ef_construction"]], "embed() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.embed"]], "embed_and_evaluate() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.embed_and_evaluate"]], "embeddings (docarray.array.weaviate.documentarrayweaviate property)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.embeddings"]], "empty() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.empty"]], "evaluate() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.evaluate"]], "extend() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.extend"]], "find() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.find"]], "flat_search_cutoff (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.flat_search_cutoff"]], "flatten() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.flatten"]], "from_base64() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_base64"]], "from_bytes() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_bytes"]], "from_csv() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_csv"]], "from_dataframe() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_dataframe"]], "from_dict() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_dict"]], "from_files() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_files"]], "from_huggingface_datasets() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_huggingface_datasets"]], "from_json() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_json"]], "from_lines() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_lines"]], "from_list() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_list"]], "from_ndarray() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_ndarray"]], "from_ndjson() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_ndjson"]], "from_protobuf() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_protobuf"]], "from_pydantic_model() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_pydantic_model"]], "from_strawberry_type() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_strawberry_type"]], "get_json_schema() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.get_json_schema"]], "get_vocabulary() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.get_vocabulary"]], "host (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.host"]], "index() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.index"]], "insert() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.insert"]], "list_like (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.list_like"]], "load() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.load"]], "load_binary() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.load_binary"]], "load_csv() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.load_csv"]], "load_json() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.load_json"]], "map() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.map"]], "map_batch() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.map_batch"]], "match() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.match"]], "max_connections (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.max_connections"]], "n_dim (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.n_dim"]], "name (docarray.array.weaviate.documentarrayweaviate property)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.name"]], "name (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.name"]], "plot_embeddings() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.plot_embeddings"]], "plot_image_sprites() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.plot_image_sprites"]], "pop() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.pop"]], "port (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.port"]], "post() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.post"]], "protocol (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.protocol"]], "pull() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.pull"]], "push() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.push"]], "reduce() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.reduce"]], "reduce_all() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.reduce_all"]], "remove() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.remove"]], "reverse() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.reverse"]], "sample() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.sample"]], "save() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.save"]], "save_binary() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.save_binary"]], "save_csv() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.save_csv"]], "save_embeddings_csv() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.save_embeddings_csv"]], "save_gif() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.save_gif"]], "save_json() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.save_json"]], "serialize_config (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.serialize_config"]], "shuffle() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.shuffle"]], "skip (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.skip"]], "split_by_tag() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.split_by_tag"]], "summary() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.summary"]], "sync() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.sync"]], "tensors (docarray.array.weaviate.documentarrayweaviate property)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.tensors"]], "texts (docarray.array.weaviate.documentarrayweaviate property)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.texts"]], "timeout_config (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.timeout_config"]], "to_base64() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_base64"]], "to_bytes() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_bytes"]], "to_dataframe() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_dataframe"]], "to_dict() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_dict"]], "to_json() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_json"]], "to_list() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_list"]], "to_protobuf() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_protobuf"]], "to_pydantic_model() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_pydantic_model"]], "to_strawberry_type() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_strawberry_type"]], "traverse() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.traverse"]], "traverse_flat() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.traverse_flat"]], "traverse_flat_per_path() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.traverse_flat_per_path"]], "vector_cache_max_objects (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.vector_cache_max_objects"]], "basedctype (class in docarray.base)": [[104, "docarray.base.BaseDCType"]], "clear() (docarray.base.basedctype method)": [[104, "docarray.base.BaseDCType.clear"]], "copy_from() (docarray.base.basedctype method)": [[104, "docarray.base.BaseDCType.copy_from"]], "docarray.base": [[104, "module-docarray.base"]], "nbytes (docarray.base.basedctype property)": [[104, "docarray.base.BaseDCType.nbytes"]], "non_empty_fields (docarray.base.basedctype property)": [[104, "docarray.base.BaseDCType.non_empty_fields"]], "pop() (docarray.base.basedctype method)": [[104, "docarray.base.BaseDCType.pop"]], "docarray.dataclasses": [[105, "module-docarray.dataclasses"]], "audio_type (docarray.dataclasses.enums.documentmetadata attribute)": [[106, "docarray.dataclasses.enums.DocumentMetadata.AUDIO_TYPE"]], "attributetype (class in docarray.dataclasses.enums)": [[106, "docarray.dataclasses.enums.AttributeType"]], "blob_type (docarray.dataclasses.enums.documentmetadata attribute)": [[106, "docarray.dataclasses.enums.DocumentMetadata.BLOB_TYPE"]], "document (docarray.dataclasses.enums.attributetype attribute)": [[106, "docarray.dataclasses.enums.AttributeType.DOCUMENT"]], "documentmetadata (class in docarray.dataclasses.enums)": [[106, "docarray.dataclasses.enums.DocumentMetadata"]], "image_type (docarray.dataclasses.enums.documentmetadata attribute)": [[106, "docarray.dataclasses.enums.DocumentMetadata.IMAGE_TYPE"]], "image_uri (docarray.dataclasses.enums.documentmetadata attribute)": [[106, "docarray.dataclasses.enums.DocumentMetadata.IMAGE_URI"]], "iterable_document (docarray.dataclasses.enums.attributetype attribute)": [[106, "docarray.dataclasses.enums.AttributeType.ITERABLE_DOCUMENT"]], "iterable_nested (docarray.dataclasses.enums.attributetype attribute)": [[106, "docarray.dataclasses.enums.AttributeType.ITERABLE_NESTED"]], "iterable_primitive (docarray.dataclasses.enums.attributetype attribute)": [[106, "docarray.dataclasses.enums.AttributeType.ITERABLE_PRIMITIVE"]], "imagetype (class in docarray.dataclasses.enums)": [[106, "docarray.dataclasses.enums.ImageType"]], "json_type (docarray.dataclasses.enums.documentmetadata attribute)": [[106, "docarray.dataclasses.enums.DocumentMetadata.JSON_TYPE"]], "mesh_type (docarray.dataclasses.enums.documentmetadata attribute)": [[106, "docarray.dataclasses.enums.DocumentMetadata.MESH_TYPE"]], "multi_modal_schema (docarray.dataclasses.enums.documentmetadata attribute)": [[106, "docarray.dataclasses.enums.DocumentMetadata.MULTI_MODAL_SCHEMA"]], "ndarray (docarray.dataclasses.enums.imagetype attribute)": [[106, "docarray.dataclasses.enums.ImageType.NDARRAY"]], "nested (docarray.dataclasses.enums.attributetype attribute)": [[106, "docarray.dataclasses.enums.AttributeType.NESTED"]], "pil (docarray.dataclasses.enums.imagetype attribute)": [[106, "docarray.dataclasses.enums.ImageType.PIL"]], "primitive (docarray.dataclasses.enums.attributetype attribute)": [[106, "docarray.dataclasses.enums.AttributeType.PRIMITIVE"]], "uri (docarray.dataclasses.enums.imagetype attribute)": [[106, "docarray.dataclasses.enums.ImageType.URI"]], "video_type (docarray.dataclasses.enums.documentmetadata attribute)": [[106, "docarray.dataclasses.enums.DocumentMetadata.VIDEO_TYPE"]], "docarray.dataclasses.enums": [[106, "module-docarray.dataclasses.enums"]], "audio_getter() (in module docarray.dataclasses.getter)": [[107, "docarray.dataclasses.getter.audio_getter"]], "blob_getter() (in module docarray.dataclasses.getter)": [[107, "docarray.dataclasses.getter.blob_getter"]], "docarray.dataclasses.getter": [[107, "module-docarray.dataclasses.getter"]], "image_getter() (in module docarray.dataclasses.getter)": [[107, "docarray.dataclasses.getter.image_getter"]], "json_getter() (in module docarray.dataclasses.getter)": [[107, "docarray.dataclasses.getter.json_getter"]], "mesh_getter() (in module docarray.dataclasses.getter)": [[107, "docarray.dataclasses.getter.mesh_getter"]], "tabular_getter() (in module docarray.dataclasses.getter)": [[107, "docarray.dataclasses.getter.tabular_getter"]], "text_getter() (in module docarray.dataclasses.getter)": [[107, "docarray.dataclasses.getter.text_getter"]], "uri_getter() (in module docarray.dataclasses.getter)": [[107, "docarray.dataclasses.getter.uri_getter"]], "video_getter() (in module docarray.dataclasses.getter)": [[107, "docarray.dataclasses.getter.video_getter"]], "audio_setter() (in module docarray.dataclasses.setter)": [[108, "docarray.dataclasses.setter.audio_setter"]], "blob_setter() (in module docarray.dataclasses.setter)": [[108, "docarray.dataclasses.setter.blob_setter"]], "docarray.dataclasses.setter": [[108, "module-docarray.dataclasses.setter"]], "image_setter() (in module docarray.dataclasses.setter)": [[108, "docarray.dataclasses.setter.image_setter"]], "json_setter() (in module docarray.dataclasses.setter)": [[108, "docarray.dataclasses.setter.json_setter"]], "mesh_setter() (in module docarray.dataclasses.setter)": [[108, "docarray.dataclasses.setter.mesh_setter"]], "tabular_setter() (in module docarray.dataclasses.setter)": [[108, "docarray.dataclasses.setter.tabular_setter"]], "text_setter() (in module docarray.dataclasses.setter)": [[108, "docarray.dataclasses.setter.text_setter"]], "uri_setter() (in module docarray.dataclasses.setter)": [[108, "docarray.dataclasses.setter.uri_setter"]], "video_setter() (in module docarray.dataclasses.setter)": [[108, "docarray.dataclasses.setter.video_setter"]], "dataclass() (in module docarray.dataclasses.types)": [[109, "docarray.dataclasses.types.dataclass"]], "docarray.dataclasses.types": [[109, "module-docarray.dataclasses.types"]], "field() (in module docarray.dataclasses.types)": [[109, "docarray.dataclasses.types.field"]], "is_multimodal() (in module docarray.dataclasses.types)": [[109, "docarray.dataclasses.types.is_multimodal"]], "document (class in docarray.document)": [[110, "docarray.document.Document"]], "adjacency (docarray.document.document property)": [[110, "docarray.document.Document.adjacency"]], "blob (docarray.document.document property)": [[110, "docarray.document.Document.blob"]], "chunks (docarray.document.document property)": [[110, "docarray.document.Document.chunks"]], "clear() (docarray.document.document method)": [[110, "docarray.document.Document.clear"]], "content (docarray.document.document property)": [[110, "docarray.document.Document.content"]], "content_hash (docarray.document.document property)": [[110, "docarray.document.Document.content_hash"]], "content_type (docarray.document.document property)": [[110, "docarray.document.Document.content_type"]], "convert_blob_to_datauri() (docarray.document.document method)": [[110, "docarray.document.Document.convert_blob_to_datauri"]], "convert_blob_to_image_tensor() (docarray.document.document method)": [[110, "docarray.document.Document.convert_blob_to_image_tensor"]], "convert_blob_to_tensor() (docarray.document.document method)": [[110, "docarray.document.Document.convert_blob_to_tensor"]], "convert_content_to_datauri() (docarray.document.document method)": [[110, "docarray.document.Document.convert_content_to_datauri"]], "convert_image_tensor_to_blob() (docarray.document.document method)": [[110, "docarray.document.Document.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.document method)": [[110, "docarray.document.Document.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.document method)": [[110, "docarray.document.Document.convert_image_tensor_to_uri"]], "convert_tensor_to_blob() (docarray.document.document method)": [[110, "docarray.document.Document.convert_tensor_to_blob"]], "convert_tensor_to_text() (docarray.document.document method)": [[110, "docarray.document.Document.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.document method)": [[110, "docarray.document.Document.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.document method)": [[110, "docarray.document.Document.convert_text_to_tensor"]], "convert_uri_to_datauri() (docarray.document.document method)": [[110, "docarray.document.Document.convert_uri_to_datauri"]], "copy_from() (docarray.document.document method)": [[110, "docarray.document.Document.copy_from"]], "display() (docarray.document.document method)": [[110, "docarray.document.Document.display"]], "display_3d() (docarray.document.document method)": [[110, "docarray.document.Document.display_3d"]], "display_tensor() (docarray.document.document method)": [[110, "docarray.document.Document.display_tensor"]], "display_uri() (docarray.document.document method)": [[110, "docarray.document.Document.display_uri"]], "docarray.document": [[110, "module-docarray.document"]], "embed() (docarray.document.document method)": [[110, "docarray.document.Document.embed"]], "embed_feature_hashing() (docarray.document.document method)": [[110, "docarray.document.Document.embed_feature_hashing"]], "embedding (docarray.document.document property)": [[110, "docarray.document.Document.embedding"]], "evaluations (docarray.document.document property)": [[110, "docarray.document.Document.evaluations"]], "from_base64() (docarray.document.document class method)": [[110, "docarray.document.Document.from_base64"]], "from_bytes() (docarray.document.document class method)": [[110, "docarray.document.Document.from_bytes"]], "from_dict() (docarray.document.document class method)": [[110, "docarray.document.Document.from_dict"]], "from_json() (docarray.document.document class method)": [[110, "docarray.document.Document.from_json"]], "from_protobuf() (docarray.document.document class method)": [[110, "docarray.document.Document.from_protobuf"]], "from_pydantic_model() (docarray.document.document class method)": [[110, "docarray.document.Document.from_pydantic_model"]], "from_strawberry_type() (docarray.document.document class method)": [[110, "docarray.document.Document.from_strawberry_type"]], "generator_from_webcam() (docarray.document.document class method)": [[110, "docarray.document.Document.generator_from_webcam"]], "get_json_schema() (docarray.document.document class method)": [[110, "docarray.document.Document.get_json_schema"]], "get_multi_modal_attribute() (docarray.document.document method)": [[110, "docarray.document.Document.get_multi_modal_attribute"]], "get_vocabulary() (docarray.document.document method)": [[110, "docarray.document.Document.get_vocabulary"]], "granularity (docarray.document.document property)": [[110, "docarray.document.Document.granularity"]], "id (docarray.document.document property)": [[110, "docarray.document.Document.id"]], "is_multimodal (docarray.document.document property)": [[110, "docarray.document.Document.is_multimodal"]], "load_pil_image_to_datauri() (docarray.document.document method)": [[110, "docarray.document.Document.load_pil_image_to_datauri"]], "load_uri_to_audio_tensor() (docarray.document.document method)": [[110, "docarray.document.Document.load_uri_to_audio_tensor"]], "load_uri_to_blob() (docarray.document.document method)": [[110, "docarray.document.Document.load_uri_to_blob"]], "load_uri_to_image_tensor() (docarray.document.document method)": [[110, "docarray.document.Document.load_uri_to_image_tensor"]], "load_uri_to_point_cloud_tensor() (docarray.document.document method)": [[110, "docarray.document.Document.load_uri_to_point_cloud_tensor"]], "load_uri_to_text() (docarray.document.document method)": [[110, "docarray.document.Document.load_uri_to_text"]], "load_uri_to_vertices_and_faces() (docarray.document.document method)": [[110, "docarray.document.Document.load_uri_to_vertices_and_faces"]], "load_uri_to_video_tensor() (docarray.document.document method)": [[110, "docarray.document.Document.load_uri_to_video_tensor"]], "load_vertices_and_faces_to_point_cloud() (docarray.document.document method)": [[110, "docarray.document.Document.load_vertices_and_faces_to_point_cloud"]], "location (docarray.document.document property)": [[110, "docarray.document.Document.location"]], "match() (docarray.document.document method)": [[110, "docarray.document.Document.match"]], "matches (docarray.document.document property)": [[110, "docarray.document.Document.matches"]], "mime_type (docarray.document.document property)": [[110, "docarray.document.Document.mime_type"]], "modality (docarray.document.document property)": [[110, "docarray.document.Document.modality"]], "nbytes (docarray.document.document property)": [[110, "docarray.document.Document.nbytes"]], "non_empty_fields (docarray.document.document property)": [[110, "docarray.document.Document.non_empty_fields"]], "offset (docarray.document.document property)": [[110, "docarray.document.Document.offset"]], "parent_id (docarray.document.document property)": [[110, "docarray.document.Document.parent_id"]], "plot_matches_sprites() (docarray.document.document method)": [[110, "docarray.document.Document.plot_matches_sprites"]], "pop() (docarray.document.document method)": [[110, "docarray.document.Document.pop"]], "post() (docarray.document.document method)": [[110, "docarray.document.Document.post"]], "save_audio_tensor_to_file() (docarray.document.document method)": [[110, "docarray.document.Document.save_audio_tensor_to_file"]], "save_blob_to_file() (docarray.document.document method)": [[110, "docarray.document.Document.save_blob_to_file"]], "save_image_tensor_to_file() (docarray.document.document method)": [[110, "docarray.document.Document.save_image_tensor_to_file"]], "save_uri_to_file() (docarray.document.document method)": [[110, "docarray.document.Document.save_uri_to_file"]], "save_video_tensor_to_file() (docarray.document.document method)": [[110, "docarray.document.Document.save_video_tensor_to_file"]], "scores (docarray.document.document property)": [[110, "docarray.document.Document.scores"]], "set_image_tensor_channel_axis() (docarray.document.document method)": [[110, "docarray.document.Document.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.document method)": [[110, "docarray.document.Document.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.document method)": [[110, "docarray.document.Document.set_image_tensor_normalization"]], "set_image_tensor_resample() (docarray.document.document method)": [[110, "docarray.document.Document.set_image_tensor_resample"]], "set_image_tensor_shape() (docarray.document.document method)": [[110, "docarray.document.Document.set_image_tensor_shape"]], "set_multi_modal_attribute() (docarray.document.document method)": [[110, "docarray.document.Document.set_multi_modal_attribute"]], "summary() (docarray.document.document method)": [[110, "docarray.document.Document.summary"]], "tags (docarray.document.document property)": [[110, "docarray.document.Document.tags"]], "tensor (docarray.document.document property)": [[110, "docarray.document.Document.tensor"]], "text (docarray.document.document property)": [[110, "docarray.document.Document.text"]], "to_base64() (docarray.document.document method)": [[110, "docarray.document.Document.to_base64"]], "to_bytes() (docarray.document.document method)": [[110, "docarray.document.Document.to_bytes"]], "to_dict() (docarray.document.document method)": [[110, "docarray.document.Document.to_dict"]], "to_json() (docarray.document.document method)": [[110, "docarray.document.Document.to_json"]], "to_protobuf() (docarray.document.document method)": [[110, "docarray.document.Document.to_protobuf"]], "to_pydantic_model() (docarray.document.document method)": [[110, "docarray.document.Document.to_pydantic_model"]], "to_strawberry_type() (docarray.document.document method)": [[110, "docarray.document.Document.to_strawberry_type"]], "uri (docarray.document.document property)": [[110, "docarray.document.Document.uri"]], "weight (docarray.document.document property)": [[110, "docarray.document.Document.weight"]], "documentdata (class in docarray.document.data)": [[111, "docarray.document.data.DocumentData"]], "adjacency (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.adjacency"]], "blob (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.blob"]], "chunks (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.chunks"]], "content (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.content"]], "docarray.document.data": [[111, "module-docarray.document.data"]], "embedding (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.embedding"]], "evaluations (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.evaluations"]], "granularity (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.granularity"]], "id (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.id"]], "location (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.location"]], "matches (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.matches"]], "mime_type (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.mime_type"]], "modality (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.modality"]], "offset (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.offset"]], "parent_id (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.parent_id"]], "scores (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.scores"]], "tags (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.tags"]], "tensor (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.tensor"]], "text (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.text"]], "uri (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.uri"]], "weight (docarray.document.data.documentdata attribute)": [[111, "docarray.document.data.DocumentData.weight"]], "docarray.document.generators": [[112, "module-docarray.document.generators"]], "from_csv() (in module docarray.document.generators)": [[112, "docarray.document.generators.from_csv"]], "from_files() (in module docarray.document.generators)": [[112, "docarray.document.generators.from_files"]], "from_huggingface_datasets() (in module docarray.document.generators)": [[112, "docarray.document.generators.from_huggingface_datasets"]], "from_lines() (in module docarray.document.generators)": [[112, "docarray.document.generators.from_lines"]], "from_ndarray() (in module docarray.document.generators)": [[112, "docarray.document.generators.from_ndarray"]], "from_ndjson() (in module docarray.document.generators)": [[112, "docarray.document.generators.from_ndjson"]], "allmixins (class in docarray.document.mixins)": [[113, "docarray.document.mixins.AllMixins"]], "adjacency (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.adjacency"]], "blob (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.blob"]], "chunks (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.chunks"]], "content (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.content"]], "content_hash (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.content_hash"]], "content_type (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.content_type"]], "convert_blob_to_datauri() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.convert_blob_to_datauri"]], "convert_blob_to_image_tensor() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.convert_blob_to_image_tensor"]], "convert_blob_to_tensor() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.convert_blob_to_tensor"]], "convert_content_to_datauri() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.convert_content_to_datauri"]], "convert_image_tensor_to_blob() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.convert_image_tensor_to_uri"]], "convert_tensor_to_blob() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.convert_tensor_to_blob"]], "convert_tensor_to_text() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.convert_text_to_tensor"]], "convert_uri_to_datauri() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.convert_uri_to_datauri"]], "display() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.display"]], "display_3d() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.display_3d"]], "display_tensor() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.display_tensor"]], "display_uri() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.display_uri"]], "docarray.document.mixins": [[113, "module-docarray.document.mixins"]], "embed() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.embed"]], "embed_feature_hashing() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.embed_feature_hashing"]], "embedding (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.embedding"]], "evaluations (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.evaluations"]], "from_base64() (docarray.document.mixins.allmixins class method)": [[113, "docarray.document.mixins.AllMixins.from_base64"]], "from_bytes() (docarray.document.mixins.allmixins class method)": [[113, "docarray.document.mixins.AllMixins.from_bytes"]], "from_dict() (docarray.document.mixins.allmixins class method)": [[113, "docarray.document.mixins.AllMixins.from_dict"]], "from_json() (docarray.document.mixins.allmixins class method)": [[113, "docarray.document.mixins.AllMixins.from_json"]], "from_protobuf() (docarray.document.mixins.allmixins class method)": [[113, "docarray.document.mixins.AllMixins.from_protobuf"]], "from_pydantic_model() (docarray.document.mixins.allmixins class method)": [[113, "docarray.document.mixins.AllMixins.from_pydantic_model"]], "from_strawberry_type() (docarray.document.mixins.allmixins class method)": [[113, "docarray.document.mixins.AllMixins.from_strawberry_type"]], "generator_from_webcam() (docarray.document.mixins.allmixins class method)": [[113, "docarray.document.mixins.AllMixins.generator_from_webcam"]], "get_json_schema() (docarray.document.mixins.allmixins class method)": [[113, "docarray.document.mixins.AllMixins.get_json_schema"]], "get_multi_modal_attribute() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.get_multi_modal_attribute"]], "get_vocabulary() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.get_vocabulary"]], "granularity (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.granularity"]], "id (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.id"]], "is_multimodal (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.is_multimodal"]], "load_pil_image_to_datauri() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.load_pil_image_to_datauri"]], "load_uri_to_audio_tensor() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.load_uri_to_audio_tensor"]], "load_uri_to_blob() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.load_uri_to_blob"]], "load_uri_to_image_tensor() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.load_uri_to_image_tensor"]], "load_uri_to_point_cloud_tensor() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.load_uri_to_point_cloud_tensor"]], "load_uri_to_text() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.load_uri_to_text"]], "load_uri_to_vertices_and_faces() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.load_uri_to_vertices_and_faces"]], "load_uri_to_video_tensor() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.load_uri_to_video_tensor"]], "load_vertices_and_faces_to_point_cloud() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.load_vertices_and_faces_to_point_cloud"]], "location (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.location"]], "match() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.match"]], "matches (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.matches"]], "mime_type (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.mime_type"]], "modality (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.modality"]], "offset (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.offset"]], "parent_id (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.parent_id"]], "plot_matches_sprites() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.plot_matches_sprites"]], "post() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.post"]], "save_audio_tensor_to_file() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.save_audio_tensor_to_file"]], "save_blob_to_file() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.save_blob_to_file"]], "save_image_tensor_to_file() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.save_image_tensor_to_file"]], "save_uri_to_file() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.save_uri_to_file"]], "save_video_tensor_to_file() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.save_video_tensor_to_file"]], "scores (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.scores"]], "set_image_tensor_channel_axis() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.set_image_tensor_normalization"]], "set_image_tensor_resample() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.set_image_tensor_resample"]], "set_image_tensor_shape() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.set_image_tensor_shape"]], "set_multi_modal_attribute() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.set_multi_modal_attribute"]], "summary() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.summary"]], "tags (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.tags"]], "tensor (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.tensor"]], "text (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.text"]], "to_base64() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.to_base64"]], "to_bytes() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.to_bytes"]], "to_dict() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.to_dict"]], "to_json() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.to_json"]], "to_protobuf() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.to_protobuf"]], "to_pydantic_model() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.to_pydantic_model"]], "to_strawberry_type() (docarray.document.mixins.allmixins method)": [[113, "docarray.document.mixins.AllMixins.to_strawberry_type"]], "uri (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.uri"]], "weight (docarray.document.mixins.allmixins property)": [[113, "docarray.document.mixins.AllMixins.weight"]], "getattributesmixin (class in docarray.document.mixins.attribute)": [[114, "docarray.document.mixins.attribute.GetAttributesMixin"]], "docarray.document.mixins.attribute": [[114, "module-docarray.document.mixins.attribute"]], "audiodatamixin (class in docarray.document.mixins.audio)": [[115, "docarray.document.mixins.audio.AudioDataMixin"]], "docarray.document.mixins.audio": [[115, "module-docarray.document.mixins.audio"]], "load_uri_to_audio_tensor() (docarray.document.mixins.audio.audiodatamixin method)": [[115, "docarray.document.mixins.audio.AudioDataMixin.load_uri_to_audio_tensor"]], "save_audio_tensor_to_file() (docarray.document.mixins.audio.audiodatamixin method)": [[115, "docarray.document.mixins.audio.AudioDataMixin.save_audio_tensor_to_file"]], "blobdatamixin (class in docarray.document.mixins.blob)": [[116, "docarray.document.mixins.blob.BlobDataMixin"]], "convert_blob_to_datauri() (docarray.document.mixins.blob.blobdatamixin method)": [[116, "docarray.document.mixins.blob.BlobDataMixin.convert_blob_to_datauri"]], "docarray.document.mixins.blob": [[116, "module-docarray.document.mixins.blob"]], "load_uri_to_blob() (docarray.document.mixins.blob.blobdatamixin method)": [[116, "docarray.document.mixins.blob.BlobDataMixin.load_uri_to_blob"]], "save_blob_to_file() (docarray.document.mixins.blob.blobdatamixin method)": [[116, "docarray.document.mixins.blob.BlobDataMixin.save_blob_to_file"]], "contentpropertymixin (class in docarray.document.mixins.content)": [[117, "docarray.document.mixins.content.ContentPropertyMixin"]], "content_hash (docarray.document.mixins.content.contentpropertymixin property)": [[117, "docarray.document.mixins.content.ContentPropertyMixin.content_hash"]], "convert_content_to_datauri() (docarray.document.mixins.content.contentpropertymixin method)": [[117, "docarray.document.mixins.content.ContentPropertyMixin.convert_content_to_datauri"]], "docarray.document.mixins.content": [[117, "module-docarray.document.mixins.content"]], "convertmixin (class in docarray.document.mixins.convert)": [[118, "docarray.document.mixins.convert.ConvertMixin"]], "convert_blob_to_tensor() (docarray.document.mixins.convert.convertmixin method)": [[118, "docarray.document.mixins.convert.ConvertMixin.convert_blob_to_tensor"]], "convert_tensor_to_blob() (docarray.document.mixins.convert.convertmixin method)": [[118, "docarray.document.mixins.convert.ConvertMixin.convert_tensor_to_blob"]], "convert_uri_to_datauri() (docarray.document.mixins.convert.convertmixin method)": [[118, "docarray.document.mixins.convert.ConvertMixin.convert_uri_to_datauri"]], "docarray.document.mixins.convert": [[118, "module-docarray.document.mixins.convert"]], "urifilemixin (class in docarray.document.mixins.dump)": [[119, "docarray.document.mixins.dump.UriFileMixin"]], "docarray.document.mixins.dump": [[119, "module-docarray.document.mixins.dump"]], "save_uri_to_file() (docarray.document.mixins.dump.urifilemixin method)": [[119, "docarray.document.mixins.dump.UriFileMixin.save_uri_to_file"]], "featurehashmixin (class in docarray.document.mixins.featurehash)": [[120, "docarray.document.mixins.featurehash.FeatureHashMixin"]], "docarray.document.mixins.featurehash": [[120, "module-docarray.document.mixins.featurehash"]], "embed_feature_hashing() (docarray.document.mixins.featurehash.featurehashmixin method)": [[120, "docarray.document.mixins.featurehash.FeatureHashMixin.embed_feature_hashing"]], "docarray.document.mixins.helper": [[121, "module-docarray.document.mixins.helper"]], "imagedatamixin (class in docarray.document.mixins.image)": [[122, "docarray.document.mixins.image.ImageDataMixin"]], "convert_blob_to_image_tensor() (docarray.document.mixins.image.imagedatamixin method)": [[122, "docarray.document.mixins.image.ImageDataMixin.convert_blob_to_image_tensor"]], "convert_image_tensor_to_blob() (docarray.document.mixins.image.imagedatamixin method)": [[122, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.mixins.image.imagedatamixin method)": [[122, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.mixins.image.imagedatamixin method)": [[122, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_uri"]], "docarray.document.mixins.image": [[122, "module-docarray.document.mixins.image"]], "load_pil_image_to_datauri() (docarray.document.mixins.image.imagedatamixin method)": [[122, "docarray.document.mixins.image.ImageDataMixin.load_pil_image_to_datauri"]], "load_uri_to_image_tensor() (docarray.document.mixins.image.imagedatamixin method)": [[122, "docarray.document.mixins.image.ImageDataMixin.load_uri_to_image_tensor"]], "save_image_tensor_to_file() (docarray.document.mixins.image.imagedatamixin method)": [[122, "docarray.document.mixins.image.ImageDataMixin.save_image_tensor_to_file"]], "set_image_tensor_channel_axis() (docarray.document.mixins.image.imagedatamixin method)": [[122, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.mixins.image.imagedatamixin method)": [[122, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.mixins.image.imagedatamixin method)": [[122, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_normalization"]], "set_image_tensor_resample() (docarray.document.mixins.image.imagedatamixin method)": [[122, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_resample"]], "set_image_tensor_shape() (docarray.document.mixins.image.imagedatamixin method)": [[122, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_shape"]], "faces (docarray.document.mixins.mesh.mesh attribute)": [[123, "docarray.document.mixins.mesh.Mesh.FACES"]], "file_extensions (docarray.document.mixins.mesh.mesh attribute)": [[123, "docarray.document.mixins.mesh.Mesh.FILE_EXTENSIONS"]], "mesh (class in docarray.document.mixins.mesh)": [[123, "docarray.document.mixins.mesh.Mesh"]], "meshdatamixin (class in docarray.document.mixins.mesh)": [[123, "docarray.document.mixins.mesh.MeshDataMixin"]], "vertices (docarray.document.mixins.mesh.mesh attribute)": [[123, "docarray.document.mixins.mesh.Mesh.VERTICES"]], "docarray.document.mixins.mesh": [[123, "module-docarray.document.mixins.mesh"]], "load_uri_to_point_cloud_tensor() (docarray.document.mixins.mesh.meshdatamixin method)": [[123, "docarray.document.mixins.mesh.MeshDataMixin.load_uri_to_point_cloud_tensor"]], "load_uri_to_vertices_and_faces() (docarray.document.mixins.mesh.meshdatamixin method)": [[123, "docarray.document.mixins.mesh.MeshDataMixin.load_uri_to_vertices_and_faces"]], "load_vertices_and_faces_to_point_cloud() (docarray.document.mixins.mesh.meshdatamixin method)": [[123, "docarray.document.mixins.mesh.MeshDataMixin.load_vertices_and_faces_to_point_cloud"]], "multimodalmixin (class in docarray.document.mixins.multimodal)": [[124, "docarray.document.mixins.multimodal.MultiModalMixin"]], "docarray.document.mixins.multimodal": [[124, "module-docarray.document.mixins.multimodal"]], "get_multi_modal_attribute() (docarray.document.mixins.multimodal.multimodalmixin method)": [[124, "docarray.document.mixins.multimodal.MultiModalMixin.get_multi_modal_attribute"]], "is_multimodal (docarray.document.mixins.multimodal.multimodalmixin property)": [[124, "docarray.document.mixins.multimodal.MultiModalMixin.is_multimodal"]], "set_multi_modal_attribute() (docarray.document.mixins.multimodal.multimodalmixin method)": [[124, "docarray.document.mixins.multimodal.MultiModalMixin.set_multi_modal_attribute"]], "plotmixin (class in docarray.document.mixins.plot)": [[125, "docarray.document.mixins.plot.PlotMixin"]], "display() (docarray.document.mixins.plot.plotmixin method)": [[125, "docarray.document.mixins.plot.PlotMixin.display"]], "display_3d() (docarray.document.mixins.plot.plotmixin method)": [[125, "docarray.document.mixins.plot.PlotMixin.display_3d"]], "display_tensor() (docarray.document.mixins.plot.plotmixin method)": [[125, "docarray.document.mixins.plot.PlotMixin.display_tensor"]], "display_uri() (docarray.document.mixins.plot.plotmixin method)": [[125, "docarray.document.mixins.plot.PlotMixin.display_uri"]], "docarray.document.mixins.plot": [[125, "module-docarray.document.mixins.plot"]], "plot_matches_sprites() (docarray.document.mixins.plot.plotmixin method)": [[125, "docarray.document.mixins.plot.PlotMixin.plot_matches_sprites"]], "summary() (docarray.document.mixins.plot.plotmixin method)": [[125, "docarray.document.mixins.plot.PlotMixin.summary"]], "portingmixin (class in docarray.document.mixins.porting)": [[126, "docarray.document.mixins.porting.PortingMixin"]], "docarray.document.mixins.porting": [[126, "module-docarray.document.mixins.porting"]], "from_base64() (docarray.document.mixins.porting.portingmixin class method)": [[126, "docarray.document.mixins.porting.PortingMixin.from_base64"]], "from_bytes() (docarray.document.mixins.porting.portingmixin class method)": [[126, "docarray.document.mixins.porting.PortingMixin.from_bytes"]], "from_dict() (docarray.document.mixins.porting.portingmixin class method)": [[126, "docarray.document.mixins.porting.PortingMixin.from_dict"]], "from_json() (docarray.document.mixins.porting.portingmixin class method)": [[126, "docarray.document.mixins.porting.PortingMixin.from_json"]], "to_base64() (docarray.document.mixins.porting.portingmixin method)": [[126, "docarray.document.mixins.porting.PortingMixin.to_base64"]], "to_bytes() (docarray.document.mixins.porting.portingmixin method)": [[126, "docarray.document.mixins.porting.PortingMixin.to_bytes"]], "to_dict() (docarray.document.mixins.porting.portingmixin method)": [[126, "docarray.document.mixins.porting.PortingMixin.to_dict"]], "to_json() (docarray.document.mixins.porting.portingmixin method)": [[126, "docarray.document.mixins.porting.PortingMixin.to_json"]], "propertymixin (class in docarray.document.mixins.property)": [[127, "docarray.document.mixins.property.PropertyMixin"]], "adjacency (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.adjacency"]], "blob (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.blob"]], "chunks (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.chunks"]], "content (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.content"]], "content_type (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.content_type"]], "docarray.document.mixins.property": [[127, "module-docarray.document.mixins.property"]], "embedding (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.embedding"]], "evaluations (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.evaluations"]], "granularity (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.granularity"]], "id (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.id"]], "location (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.location"]], "matches (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.matches"]], "mime_type (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.mime_type"]], "modality (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.modality"]], "offset (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.offset"]], "parent_id (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.parent_id"]], "scores (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.scores"]], "tags (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.tags"]], "tensor (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.tensor"]], "text (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.text"]], "uri (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.uri"]], "weight (docarray.document.mixins.property.propertymixin property)": [[127, "docarray.document.mixins.property.PropertyMixin.weight"]], "protobufmixin (class in docarray.document.mixins.protobuf)": [[128, "docarray.document.mixins.protobuf.ProtobufMixin"]], "docarray.document.mixins.protobuf": [[128, "module-docarray.document.mixins.protobuf"]], "from_protobuf() (docarray.document.mixins.protobuf.protobufmixin class method)": [[128, "docarray.document.mixins.protobuf.ProtobufMixin.from_protobuf"]], "to_protobuf() (docarray.document.mixins.protobuf.protobufmixin method)": [[128, "docarray.document.mixins.protobuf.ProtobufMixin.to_protobuf"]], "pydanticmixin (class in docarray.document.mixins.pydantic)": [[129, "docarray.document.mixins.pydantic.PydanticMixin"]], "docarray.document.mixins.pydantic": [[129, "module-docarray.document.mixins.pydantic"]], "from_pydantic_model() (docarray.document.mixins.pydantic.pydanticmixin class method)": [[129, "docarray.document.mixins.pydantic.PydanticMixin.from_pydantic_model"]], "get_json_schema() (docarray.document.mixins.pydantic.pydanticmixin class method)": [[129, "docarray.document.mixins.pydantic.PydanticMixin.get_json_schema"]], "to_pydantic_model() (docarray.document.mixins.pydantic.pydanticmixin method)": [[129, "docarray.document.mixins.pydantic.PydanticMixin.to_pydantic_model"]], "colorboxembedding (class in docarray.document.mixins.rich_embedding)": [[130, "docarray.document.mixins.rich_embedding.ColorBoxEmbedding"]], "docarray.document.mixins.rich_embedding": [[130, "module-docarray.document.mixins.rich_embedding"]], "strawberrymixin (class in docarray.document.mixins.strawberry)": [[131, "docarray.document.mixins.strawberry.StrawberryMixin"]], "docarray.document.mixins.strawberry": [[131, "module-docarray.document.mixins.strawberry"]], "from_strawberry_type() (docarray.document.mixins.strawberry.strawberrymixin class method)": [[131, "docarray.document.mixins.strawberry.StrawberryMixin.from_strawberry_type"]], "to_strawberry_type() (docarray.document.mixins.strawberry.strawberrymixin method)": [[131, "docarray.document.mixins.strawberry.StrawberryMixin.to_strawberry_type"]], "singletonsugarmixin (class in docarray.document.mixins.sugar)": [[132, "docarray.document.mixins.sugar.SingletonSugarMixin"]], "docarray.document.mixins.sugar": [[132, "module-docarray.document.mixins.sugar"]], "embed() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[132, "docarray.document.mixins.sugar.SingletonSugarMixin.embed"]], "match() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[132, "docarray.document.mixins.sugar.SingletonSugarMixin.match"]], "post() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[132, "docarray.document.mixins.sugar.SingletonSugarMixin.post"]], "textdatamixin (class in docarray.document.mixins.text)": [[133, "docarray.document.mixins.text.TextDataMixin"]], "convert_tensor_to_text() (docarray.document.mixins.text.textdatamixin method)": [[133, "docarray.document.mixins.text.TextDataMixin.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.mixins.text.textdatamixin method)": [[133, "docarray.document.mixins.text.TextDataMixin.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.mixins.text.textdatamixin method)": [[133, "docarray.document.mixins.text.TextDataMixin.convert_text_to_tensor"]], "docarray.document.mixins.text": [[133, "module-docarray.document.mixins.text"]], "get_vocabulary() (docarray.document.mixins.text.textdatamixin method)": [[133, "docarray.document.mixins.text.TextDataMixin.get_vocabulary"]], "load_uri_to_text() (docarray.document.mixins.text.textdatamixin method)": [[133, "docarray.document.mixins.text.TextDataMixin.load_uri_to_text"]], "videodatamixin (class in docarray.document.mixins.video)": [[134, "docarray.document.mixins.video.VideoDataMixin"]], "docarray.document.mixins.video": [[134, "module-docarray.document.mixins.video"]], "generator_from_webcam() (docarray.document.mixins.video.videodatamixin class method)": [[134, "docarray.document.mixins.video.VideoDataMixin.generator_from_webcam"]], "load_uri_to_video_tensor() (docarray.document.mixins.video.videodatamixin method)": [[134, "docarray.document.mixins.video.VideoDataMixin.load_uri_to_video_tensor"]], "save_video_tensor_to_file() (docarray.document.mixins.video.videodatamixin method)": [[134, "docarray.document.mixins.video.VideoDataMixin.save_video_tensor_to_file"]], "pydanticdocument (class in docarray.document.pydantic_model)": [[135, "docarray.document.pydantic_model.PydanticDocument"]], "pydanticdocument.config (class in docarray.document.pydantic_model)": [[135, "docarray.document.pydantic_model.PydanticDocument.Config"]], "adjacency (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.adjacency"]], "blob (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.blob"]], "chunks (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.chunks"]], "construct() (docarray.document.pydantic_model.pydanticdocument class method)": [[135, "docarray.document.pydantic_model.PydanticDocument.construct"]], "copy() (docarray.document.pydantic_model.pydanticdocument method)": [[135, "docarray.document.pydantic_model.PydanticDocument.copy"]], "dict() (docarray.document.pydantic_model.pydanticdocument method)": [[135, "docarray.document.pydantic_model.PydanticDocument.dict"]], "docarray.document.pydantic_model": [[135, "module-docarray.document.pydantic_model"]], "embedding (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.embedding"]], "evaluations (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.evaluations"]], "from_orm() (docarray.document.pydantic_model.pydanticdocument class method)": [[135, "docarray.document.pydantic_model.PydanticDocument.from_orm"]], "granularity (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.granularity"]], "id (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.id"]], "json() (docarray.document.pydantic_model.pydanticdocument method)": [[135, "docarray.document.pydantic_model.PydanticDocument.json"]], "location (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.location"]], "matches (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.matches"]], "mime_type (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.mime_type"]], "modality (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.modality"]], "offset (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.offset"]], "parent_id (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.parent_id"]], "parse_file() (docarray.document.pydantic_model.pydanticdocument class method)": [[135, "docarray.document.pydantic_model.PydanticDocument.parse_file"]], "parse_obj() (docarray.document.pydantic_model.pydanticdocument class method)": [[135, "docarray.document.pydantic_model.PydanticDocument.parse_obj"]], "parse_raw() (docarray.document.pydantic_model.pydanticdocument class method)": [[135, "docarray.document.pydantic_model.PydanticDocument.parse_raw"]], "schema() (docarray.document.pydantic_model.pydanticdocument class method)": [[135, "docarray.document.pydantic_model.PydanticDocument.schema"]], "schema_json() (docarray.document.pydantic_model.pydanticdocument class method)": [[135, "docarray.document.pydantic_model.PydanticDocument.schema_json"]], "scores (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.scores"]], "smart_union (docarray.document.pydantic_model.pydanticdocument.config attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.Config.smart_union"]], "tags (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.tags"]], "tensor (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.tensor"]], "text (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.text"]], "update_forward_refs() (docarray.document.pydantic_model.pydanticdocument class method)": [[135, "docarray.document.pydantic_model.PydanticDocument.update_forward_refs"]], "uri (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.uri"]], "validate() (docarray.document.pydantic_model.pydanticdocument class method)": [[135, "docarray.document.pydantic_model.PydanticDocument.validate"]], "weight (docarray.document.pydantic_model.pydanticdocument attribute)": [[135, "docarray.document.pydantic_model.PydanticDocument.weight"]], "strawberrydocument (class in docarray.document.strawberry_type)": [[136, "docarray.document.strawberry_type.StrawberryDocument"]], "strawberrydocumentinput (class in docarray.document.strawberry_type)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput"]], "adjacency (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.adjacency"]], "adjacency (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.adjacency"]], "blob (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.blob"]], "blob (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.blob"]], "chunks (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.chunks"]], "chunks (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.chunks"]], "docarray.document.strawberry_type": [[136, "module-docarray.document.strawberry_type"]], "embedding (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.embedding"]], "embedding (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.embedding"]], "evaluations (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.evaluations"]], "evaluations (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.evaluations"]], "granularity (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.granularity"]], "granularity (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.granularity"]], "id (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.id"]], "id (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.id"]], "location (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.location"]], "location (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.location"]], "matches (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.matches"]], "matches (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.matches"]], "mime_type (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.mime_type"]], "mime_type (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.mime_type"]], "modality (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.modality"]], "modality (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.modality"]], "offset (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.offset"]], "offset (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.offset"]], "parent_id (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.parent_id"]], "parent_id (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.parent_id"]], "scores (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.scores"]], "scores (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.scores"]], "tags (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.tags"]], "tags (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.tags"]], "tensor (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.tensor"]], "tensor (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.tensor"]], "text (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.text"]], "text (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.text"]], "uri (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.uri"]], "uri (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.uri"]], "weight (docarray.document.strawberry_type.strawberrydocument attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocument.weight"]], "weight (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[136, "docarray.document.strawberry_type.StrawberryDocumentInput.weight"]], "add_protocol_and_compress_to_file_path() (in module docarray.helper)": [[137, "docarray.helper.add_protocol_and_compress_to_file_path"]], "cached_property (class in docarray.helper)": [[137, "docarray.helper.cached_property"]], "compress_bytes() (in module docarray.helper)": [[137, "docarray.helper.compress_bytes"]], "dataclass_from_dict() (in module docarray.helper)": [[137, "docarray.helper.dataclass_from_dict"]], "decompress_bytes() (in module docarray.helper)": [[137, "docarray.helper.decompress_bytes"]], "deprecate_by() (in module docarray.helper)": [[137, "docarray.helper.deprecate_by"]], "docarray.helper": [[137, "module-docarray.helper"]], "download_mermaid_url() (in module docarray.helper)": [[137, "docarray.helper.download_mermaid_url"]], "dunder_get() (in module docarray.helper)": [[137, "docarray.helper.dunder_get"]], "filter_dict() (in module docarray.helper)": [[137, "docarray.helper.filter_dict"]], "get_ci_vendor() (in module docarray.helper)": [[137, "docarray.helper.get_ci_vendor"]], "get_compress_ctx() (in module docarray.helper)": [[137, "docarray.helper.get_compress_ctx"]], "get_full_version() (in module docarray.helper)": [[137, "docarray.helper.get_full_version"]], "login() (in module docarray.helper)": [[137, "docarray.helper.login"]], "logout() (in module docarray.helper)": [[137, "docarray.helper.logout"]], "protocol_and_compress_from_file_path() (in module docarray.helper)": [[137, "docarray.helper.protocol_and_compress_from_file_path"]], "random_identity() (in module docarray.helper)": [[137, "docarray.helper.random_identity"]], "random_port() (in module docarray.helper)": [[137, "docarray.helper.random_port"]], "random_uuid() (in module docarray.helper)": [[137, "docarray.helper.random_uuid"]], "reset_ports() (in module docarray.helper)": [[137, "docarray.helper.reset_ports"]], "typename() (in module docarray.helper)": [[137, "docarray.helper.typename"]], "docarray.math": [[138, "module-docarray.math"]], "cdist() (in module docarray.math.distance)": [[139, "docarray.math.distance.cdist"]], "docarray.math.distance": [[139, "module-docarray.math.distance"]], "pdist() (in module docarray.math.distance)": [[139, "docarray.math.distance.pdist"]], "cosine() (in module docarray.math.distance.numpy)": [[140, "docarray.math.distance.numpy.cosine"]], "docarray.math.distance.numpy": [[140, "module-docarray.math.distance.numpy"]], "euclidean() (in module docarray.math.distance.numpy)": [[140, "docarray.math.distance.numpy.euclidean"]], "sparse_cosine() (in module docarray.math.distance.numpy)": [[140, "docarray.math.distance.numpy.sparse_cosine"]], "sparse_euclidean() (in module docarray.math.distance.numpy)": [[140, "docarray.math.distance.numpy.sparse_euclidean"]], "sparse_sqeuclidean() (in module docarray.math.distance.numpy)": [[140, "docarray.math.distance.numpy.sparse_sqeuclidean"]], "sqeuclidean() (in module docarray.math.distance.numpy)": [[140, "docarray.math.distance.numpy.sqeuclidean"]], "cosine() (in module docarray.math.distance.tensorflow)": [[142, "docarray.math.distance.tensorflow.cosine"]], "docarray.math.distance.tensorflow": [[142, "module-docarray.math.distance.tensorflow"]], "euclidean() (in module docarray.math.distance.tensorflow)": [[142, "docarray.math.distance.tensorflow.euclidean"]], "sqeuclidean() (in module docarray.math.distance.tensorflow)": [[142, "docarray.math.distance.tensorflow.sqeuclidean"]], "cosine() (in module docarray.math.distance.torch)": [[143, "docarray.math.distance.torch.cosine"]], "docarray.math.distance.torch": [[143, "module-docarray.math.distance.torch"]], "euclidean() (in module docarray.math.distance.torch)": [[143, "docarray.math.distance.torch.euclidean"]], "sqeuclidean() (in module docarray.math.distance.torch)": [[143, "docarray.math.distance.torch.sqeuclidean"]], "average_precision() (in module docarray.math.evaluation)": [[144, "docarray.math.evaluation.average_precision"]], "dcg_at_k() (in module docarray.math.evaluation)": [[144, "docarray.math.evaluation.dcg_at_k"]], "docarray.math.evaluation": [[144, "module-docarray.math.evaluation"]], "f1_score_at_k() (in module docarray.math.evaluation)": [[144, "docarray.math.evaluation.f1_score_at_k"]], "hit_at_k() (in module docarray.math.evaluation)": [[144, "docarray.math.evaluation.hit_at_k"]], "ndcg_at_k() (in module docarray.math.evaluation)": [[144, "docarray.math.evaluation.ndcg_at_k"]], "precision_at_k() (in module docarray.math.evaluation)": [[144, "docarray.math.evaluation.precision_at_k"]], "r_precision() (in module docarray.math.evaluation)": [[144, "docarray.math.evaluation.r_precision"]], "recall_at_k() (in module docarray.math.evaluation)": [[144, "docarray.math.evaluation.recall_at_k"]], "reciprocal_rank() (in module docarray.math.evaluation)": [[144, "docarray.math.evaluation.reciprocal_rank"]], "docarray.math.helper": [[145, "module-docarray.math.helper"]], "minmax_normalize() (in module docarray.math.helper)": [[145, "docarray.math.helper.minmax_normalize"]], "top_k() (in module docarray.math.helper)": [[145, "docarray.math.helper.top_k"]], "update_rows_x_mat_best() (in module docarray.math.helper)": [[145, "docarray.math.helper.update_rows_x_mat_best"]], "check_arraylike_equality() (in module docarray.math.ndarray)": [[146, "docarray.math.ndarray.check_arraylike_equality"]], "detach_tensor_if_present() (in module docarray.math.ndarray)": [[146, "docarray.math.ndarray.detach_tensor_if_present"]], "docarray.math.ndarray": [[146, "module-docarray.math.ndarray"]], "get_array_rows() (in module docarray.math.ndarray)": [[146, "docarray.math.ndarray.get_array_rows"]], "get_array_type() (in module docarray.math.ndarray)": [[146, "docarray.math.ndarray.get_array_type"]], "ravel() (in module docarray.math.ndarray)": [[146, "docarray.math.ndarray.ravel"]], "to_list() (in module docarray.math.ndarray)": [[146, "docarray.math.ndarray.to_list"]], "to_numpy_array() (in module docarray.math.ndarray)": [[146, "docarray.math.ndarray.to_numpy_array"]], "unravel() (in module docarray.math.ndarray)": [[146, "docarray.math.ndarray.unravel"]], "docarray.proto": [[147, "module-docarray.proto"]], "docarray.proto.docarray_pb2": [[148, "module-docarray.proto.docarray_pb2"]], "docarray.proto.io": [[149, "module-docarray.proto.io"]], "flush_proto() (in module docarray.proto.io)": [[149, "docarray.proto.io.flush_proto"]], "parse_proto() (in module docarray.proto.io)": [[149, "docarray.proto.io.parse_proto"]], "docarray.proto.io.ndarray": [[150, "module-docarray.proto.io.ndarray"]], "flush_ndarray() (in module docarray.proto.io.ndarray)": [[150, "docarray.proto.io.ndarray.flush_ndarray"]], "read_ndarray() (in module docarray.proto.io.ndarray)": [[150, "docarray.proto.io.ndarray.read_ndarray"]], "docarray.proto.pb": [[151, "module-docarray.proto.pb"]], "docarray.proto.pb.docarray_pb2": [[152, "module-docarray.proto.pb.docarray_pb2"]], "docarray.proto.pb2": [[153, "module-docarray.proto.pb2"]], "docarray.proto.pb2.docarray_pb2": [[154, "module-docarray.proto.pb2.docarray_pb2"]], "namedscore (class in docarray.score)": [[155, "docarray.score.NamedScore"]], "clear() (docarray.score.namedscore method)": [[155, "docarray.score.NamedScore.clear"]], "copy_from() (docarray.score.namedscore method)": [[155, "docarray.score.NamedScore.copy_from"]], "description (docarray.score.namedscore property)": [[155, "docarray.score.NamedScore.description"]], "docarray.score": [[155, "module-docarray.score"]], "nbytes (docarray.score.namedscore property)": [[155, "docarray.score.NamedScore.nbytes"]], "non_empty_fields (docarray.score.namedscore property)": [[155, "docarray.score.NamedScore.non_empty_fields"]], "op_name (docarray.score.namedscore property)": [[155, "docarray.score.NamedScore.op_name"]], "pop() (docarray.score.namedscore method)": [[155, "docarray.score.NamedScore.pop"]], "ref_id (docarray.score.namedscore property)": [[155, "docarray.score.NamedScore.ref_id"]], "to_dict() (docarray.score.namedscore method)": [[155, "docarray.score.NamedScore.to_dict"]], "value (docarray.score.namedscore property)": [[155, "docarray.score.NamedScore.value"]], "namedscoredata (class in docarray.score.data)": [[156, "docarray.score.data.NamedScoreData"]], "description (docarray.score.data.namedscoredata attribute)": [[156, "docarray.score.data.NamedScoreData.description"]], "docarray.score.data": [[156, "module-docarray.score.data"]], "op_name (docarray.score.data.namedscoredata attribute)": [[156, "docarray.score.data.NamedScoreData.op_name"]], "ref_id (docarray.score.data.namedscoredata attribute)": [[156, "docarray.score.data.NamedScoreData.ref_id"]], "value (docarray.score.data.namedscoredata attribute)": [[156, "docarray.score.data.NamedScoreData.value"]], "allmixins (class in docarray.score.mixins)": [[157, "docarray.score.mixins.AllMixins"]], "description (docarray.score.mixins.allmixins property)": [[157, "docarray.score.mixins.AllMixins.description"]], "docarray.score.mixins": [[157, "module-docarray.score.mixins"]], "op_name (docarray.score.mixins.allmixins property)": [[157, "docarray.score.mixins.AllMixins.op_name"]], "ref_id (docarray.score.mixins.allmixins property)": [[157, "docarray.score.mixins.AllMixins.ref_id"]], "to_dict() (docarray.score.mixins.allmixins method)": [[157, "docarray.score.mixins.AllMixins.to_dict"]], "value (docarray.score.mixins.allmixins property)": [[157, "docarray.score.mixins.AllMixins.value"]], "propertymixin (class in docarray.score.mixins.property)": [[158, "docarray.score.mixins.property.PropertyMixin"]], "description (docarray.score.mixins.property.propertymixin property)": [[158, "docarray.score.mixins.property.PropertyMixin.description"]], "docarray.score.mixins.property": [[158, "module-docarray.score.mixins.property"]], "op_name (docarray.score.mixins.property.propertymixin property)": [[158, "docarray.score.mixins.property.PropertyMixin.op_name"]], "ref_id (docarray.score.mixins.property.propertymixin property)": [[158, "docarray.score.mixins.property.PropertyMixin.ref_id"]], "value (docarray.score.mixins.property.propertymixin property)": [[158, "docarray.score.mixins.property.PropertyMixin.value"]], "representmixin (class in docarray.score.mixins.representer)": [[159, "docarray.score.mixins.representer.RepresentMixin"]], "docarray.score.mixins.representer": [[159, "module-docarray.score.mixins.representer"]], "to_dict() (docarray.score.mixins.representer.representmixin method)": [[159, "docarray.score.mixins.representer.RepresentMixin.to_dict"]], "docarray.typing": [[160, "module-docarray.typing"]]}})