Search.setIndex({"docnames": ["advanced/document-store/annlite", "advanced/document-store/benchmark", "advanced/document-store/elasticsearch", "advanced/document-store/extend", "advanced/document-store/index", "advanced/document-store/qdrant", "advanced/document-store/sqlite", "advanced/document-store/weaviate", "advanced/graphql-support/index", "advanced/torch-support/index", "api", "api/docarray", "api/docarray.array", "api/docarray.array.annlite", "api/docarray.array.base", "api/docarray.array.chunk", "api/docarray.array.document", "api/docarray.array.elastic", "api/docarray.array.match", "api/docarray.array.memory", "api/docarray.array.mixins", "api/docarray.array.mixins.content", "api/docarray.array.mixins.dataloader", "api/docarray.array.mixins.dataloader.helper", "api/docarray.array.mixins.delitem", "api/docarray.array.mixins.embed", "api/docarray.array.mixins.empty", "api/docarray.array.mixins.evaluation", "api/docarray.array.mixins.find", "api/docarray.array.mixins.getattr", "api/docarray.array.mixins.getitem", "api/docarray.array.mixins.group", "api/docarray.array.mixins.io", "api/docarray.array.mixins.io.binary", "api/docarray.array.mixins.io.common", "api/docarray.array.mixins.io.csv", "api/docarray.array.mixins.io.dataframe", "api/docarray.array.mixins.io.from_gen", "api/docarray.array.mixins.io.json", "api/docarray.array.mixins.io.pbar", "api/docarray.array.mixins.io.pushpull", "api/docarray.array.mixins.match", "api/docarray.array.mixins.parallel", "api/docarray.array.mixins.plot", "api/docarray.array.mixins.post", "api/docarray.array.mixins.pydantic", "api/docarray.array.mixins.reduce", "api/docarray.array.mixins.sample", "api/docarray.array.mixins.setitem", "api/docarray.array.mixins.strawberry", "api/docarray.array.mixins.text", "api/docarray.array.mixins.traverse", "api/docarray.array.qdrant", "api/docarray.array.queryset", "api/docarray.array.queryset.lookup", "api/docarray.array.queryset.parser", "api/docarray.array.sqlite", "api/docarray.array.storage", "api/docarray.array.storage.annlite", "api/docarray.array.storage.annlite.backend", "api/docarray.array.storage.annlite.find", "api/docarray.array.storage.annlite.getsetdel", "api/docarray.array.storage.annlite.helper", "api/docarray.array.storage.annlite.seqlike", "api/docarray.array.storage.base", "api/docarray.array.storage.base.backend", "api/docarray.array.storage.base.getsetdel", "api/docarray.array.storage.base.helper", "api/docarray.array.storage.base.seqlike", "api/docarray.array.storage.elastic", "api/docarray.array.storage.elastic.backend", "api/docarray.array.storage.elastic.find", "api/docarray.array.storage.elastic.getsetdel", "api/docarray.array.storage.elastic.seqlike", "api/docarray.array.storage.memory", "api/docarray.array.storage.memory.backend", "api/docarray.array.storage.memory.find", "api/docarray.array.storage.memory.getsetdel", "api/docarray.array.storage.memory.seqlike", "api/docarray.array.storage.qdrant", "api/docarray.array.storage.qdrant.backend", "api/docarray.array.storage.qdrant.find", "api/docarray.array.storage.qdrant.getsetdel", "api/docarray.array.storage.qdrant.helper", "api/docarray.array.storage.qdrant.seqlike", "api/docarray.array.storage.registry", "api/docarray.array.storage.sqlite", "api/docarray.array.storage.sqlite.backend", "api/docarray.array.storage.sqlite.getsetdel", "api/docarray.array.storage.sqlite.helper", "api/docarray.array.storage.sqlite.seqlike", "api/docarray.array.storage.weaviate", "api/docarray.array.storage.weaviate.backend", "api/docarray.array.storage.weaviate.find", "api/docarray.array.storage.weaviate.getsetdel", "api/docarray.array.storage.weaviate.seqlike", "api/docarray.array.weaviate", "api/docarray.base", "api/docarray.dataclasses", "api/docarray.dataclasses.getter", "api/docarray.dataclasses.setter", "api/docarray.dataclasses.types", "api/docarray.document", "api/docarray.document.data", "api/docarray.document.generators", "api/docarray.document.mixins", "api/docarray.document.mixins.attribute", "api/docarray.document.mixins.audio", "api/docarray.document.mixins.blob", "api/docarray.document.mixins.content", "api/docarray.document.mixins.convert", "api/docarray.document.mixins.dump", "api/docarray.document.mixins.featurehash", "api/docarray.document.mixins.helper", "api/docarray.document.mixins.image", "api/docarray.document.mixins.mesh", "api/docarray.document.mixins.multimodal", "api/docarray.document.mixins.plot", "api/docarray.document.mixins.porting", "api/docarray.document.mixins.property", "api/docarray.document.mixins.protobuf", "api/docarray.document.mixins.pydantic", "api/docarray.document.mixins.rich_embedding", "api/docarray.document.mixins.strawberry", "api/docarray.document.mixins.sugar", "api/docarray.document.mixins.text", "api/docarray.document.mixins.video", "api/docarray.document.pydantic_model", "api/docarray.document.strawberry_type", "api/docarray.helper", "api/docarray.math", "api/docarray.math.distance", "api/docarray.math.distance.numpy", "api/docarray.math.distance.paddle", "api/docarray.math.distance.tensorflow", "api/docarray.math.distance.torch", "api/docarray.math.evaluation", "api/docarray.math.helper", "api/docarray.math.ndarray", "api/docarray.proto", "api/docarray.proto.docarray_pb2", "api/docarray.proto.io", "api/docarray.proto.io.ndarray", "api/docarray.score", "api/docarray.score.data", "api/docarray.score.mixins", "api/docarray.score.mixins.property", "api/docarray.score.mixins.representer", "api/docarray.typing", "api/modules", "changelog/index", "datatypes/audio/index", "datatypes/image/index", "datatypes/index", "datatypes/mesh/index", "datatypes/tabular/index", "datatypes/text/index", "datatypes/video/index", "fundamentals/dataclass/access", "fundamentals/dataclass/construct", "fundamentals/dataclass/example", "fundamentals/dataclass/index", "fundamentals/dataclass/new-type", "fundamentals/document/attribute", "fundamentals/document/construct", "fundamentals/document/embedding", "fundamentals/document/fluent-interface", "fundamentals/document/index", "fundamentals/document/nested", "fundamentals/document/serialization", "fundamentals/document/visualization", "fundamentals/documentarray/access-attributes", "fundamentals/documentarray/access-elements", "fundamentals/documentarray/construct", "fundamentals/documentarray/embedding", "fundamentals/documentarray/evaluation", "fundamentals/documentarray/find", "fundamentals/documentarray/index", "fundamentals/documentarray/matching", "fundamentals/documentarray/parallelization", "fundamentals/documentarray/post-external", "fundamentals/documentarray/serialization", "fundamentals/documentarray/visualization", "fundamentals/fastapi-support/index", "fundamentals/jina-support/index", "fundamentals/notebook-support/index", "get-started/what-is", "index", "proto/docs", "proto/index"], "filenames": ["advanced/document-store/annlite.md", "advanced/document-store/benchmark.md", "advanced/document-store/elasticsearch.md", "advanced/document-store/extend.md", "advanced/document-store/index.md", "advanced/document-store/qdrant.md", "advanced/document-store/sqlite.md", "advanced/document-store/weaviate.md", "advanced/graphql-support/index.md", "advanced/torch-support/index.md", "api.rst", "api/docarray.rst", "api/docarray.array.rst", "api/docarray.array.annlite.rst", "api/docarray.array.base.rst", "api/docarray.array.chunk.rst", "api/docarray.array.document.rst", "api/docarray.array.elastic.rst", "api/docarray.array.match.rst", "api/docarray.array.memory.rst", "api/docarray.array.mixins.rst", "api/docarray.array.mixins.content.rst", "api/docarray.array.mixins.dataloader.rst", "api/docarray.array.mixins.dataloader.helper.rst", "api/docarray.array.mixins.delitem.rst", "api/docarray.array.mixins.embed.rst", "api/docarray.array.mixins.empty.rst", "api/docarray.array.mixins.evaluation.rst", "api/docarray.array.mixins.find.rst", "api/docarray.array.mixins.getattr.rst", "api/docarray.array.mixins.getitem.rst", "api/docarray.array.mixins.group.rst", "api/docarray.array.mixins.io.rst", "api/docarray.array.mixins.io.binary.rst", "api/docarray.array.mixins.io.common.rst", "api/docarray.array.mixins.io.csv.rst", "api/docarray.array.mixins.io.dataframe.rst", "api/docarray.array.mixins.io.from_gen.rst", "api/docarray.array.mixins.io.json.rst", "api/docarray.array.mixins.io.pbar.rst", "api/docarray.array.mixins.io.pushpull.rst", "api/docarray.array.mixins.match.rst", "api/docarray.array.mixins.parallel.rst", "api/docarray.array.mixins.plot.rst", "api/docarray.array.mixins.post.rst", "api/docarray.array.mixins.pydantic.rst", "api/docarray.array.mixins.reduce.rst", "api/docarray.array.mixins.sample.rst", "api/docarray.array.mixins.setitem.rst", "api/docarray.array.mixins.strawberry.rst", "api/docarray.array.mixins.text.rst", "api/docarray.array.mixins.traverse.rst", "api/docarray.array.qdrant.rst", "api/docarray.array.queryset.rst", "api/docarray.array.queryset.lookup.rst", "api/docarray.array.queryset.parser.rst", "api/docarray.array.sqlite.rst", "api/docarray.array.storage.rst", "api/docarray.array.storage.annlite.rst", "api/docarray.array.storage.annlite.backend.rst", "api/docarray.array.storage.annlite.find.rst", "api/docarray.array.storage.annlite.getsetdel.rst", "api/docarray.array.storage.annlite.helper.rst", "api/docarray.array.storage.annlite.seqlike.rst", "api/docarray.array.storage.base.rst", "api/docarray.array.storage.base.backend.rst", "api/docarray.array.storage.base.getsetdel.rst", "api/docarray.array.storage.base.helper.rst", "api/docarray.array.storage.base.seqlike.rst", "api/docarray.array.storage.elastic.rst", "api/docarray.array.storage.elastic.backend.rst", "api/docarray.array.storage.elastic.find.rst", "api/docarray.array.storage.elastic.getsetdel.rst", "api/docarray.array.storage.elastic.seqlike.rst", "api/docarray.array.storage.memory.rst", "api/docarray.array.storage.memory.backend.rst", "api/docarray.array.storage.memory.find.rst", "api/docarray.array.storage.memory.getsetdel.rst", "api/docarray.array.storage.memory.seqlike.rst", "api/docarray.array.storage.qdrant.rst", "api/docarray.array.storage.qdrant.backend.rst", "api/docarray.array.storage.qdrant.find.rst", "api/docarray.array.storage.qdrant.getsetdel.rst", "api/docarray.array.storage.qdrant.helper.rst", "api/docarray.array.storage.qdrant.seqlike.rst", "api/docarray.array.storage.registry.rst", "api/docarray.array.storage.sqlite.rst", "api/docarray.array.storage.sqlite.backend.rst", "api/docarray.array.storage.sqlite.getsetdel.rst", "api/docarray.array.storage.sqlite.helper.rst", "api/docarray.array.storage.sqlite.seqlike.rst", "api/docarray.array.storage.weaviate.rst", "api/docarray.array.storage.weaviate.backend.rst", "api/docarray.array.storage.weaviate.find.rst", "api/docarray.array.storage.weaviate.getsetdel.rst", "api/docarray.array.storage.weaviate.seqlike.rst", "api/docarray.array.weaviate.rst", "api/docarray.base.rst", "api/docarray.dataclasses.rst", "api/docarray.dataclasses.getter.rst", "api/docarray.dataclasses.setter.rst", "api/docarray.dataclasses.types.rst", "api/docarray.document.rst", "api/docarray.document.data.rst", "api/docarray.document.generators.rst", "api/docarray.document.mixins.rst", "api/docarray.document.mixins.attribute.rst", "api/docarray.document.mixins.audio.rst", "api/docarray.document.mixins.blob.rst", "api/docarray.document.mixins.content.rst", "api/docarray.document.mixins.convert.rst", "api/docarray.document.mixins.dump.rst", "api/docarray.document.mixins.featurehash.rst", "api/docarray.document.mixins.helper.rst", "api/docarray.document.mixins.image.rst", "api/docarray.document.mixins.mesh.rst", "api/docarray.document.mixins.multimodal.rst", "api/docarray.document.mixins.plot.rst", "api/docarray.document.mixins.porting.rst", "api/docarray.document.mixins.property.rst", "api/docarray.document.mixins.protobuf.rst", "api/docarray.document.mixins.pydantic.rst", "api/docarray.document.mixins.rich_embedding.rst", "api/docarray.document.mixins.strawberry.rst", "api/docarray.document.mixins.sugar.rst", "api/docarray.document.mixins.text.rst", "api/docarray.document.mixins.video.rst", "api/docarray.document.pydantic_model.rst", "api/docarray.document.strawberry_type.rst", "api/docarray.helper.rst", "api/docarray.math.rst", "api/docarray.math.distance.rst", "api/docarray.math.distance.numpy.rst", "api/docarray.math.distance.paddle.rst", "api/docarray.math.distance.tensorflow.rst", "api/docarray.math.distance.torch.rst", "api/docarray.math.evaluation.rst", "api/docarray.math.helper.rst", "api/docarray.math.ndarray.rst", "api/docarray.proto.rst", "api/docarray.proto.docarray_pb2.rst", "api/docarray.proto.io.rst", "api/docarray.proto.io.ndarray.rst", "api/docarray.score.rst", "api/docarray.score.data.rst", "api/docarray.score.mixins.rst", "api/docarray.score.mixins.property.rst", "api/docarray.score.mixins.representer.rst", "api/docarray.typing.rst", "api/modules.rst", "changelog/index.md", "datatypes/audio/index.md", "datatypes/image/index.md", "datatypes/index.md", "datatypes/mesh/index.md", "datatypes/tabular/index.md", "datatypes/text/index.md", "datatypes/video/index.md", "fundamentals/dataclass/access.md", "fundamentals/dataclass/construct.md", "fundamentals/dataclass/example.md", "fundamentals/dataclass/index.md", "fundamentals/dataclass/new-type.md", "fundamentals/document/attribute.md", "fundamentals/document/construct.md", "fundamentals/document/embedding.md", "fundamentals/document/fluent-interface.md", "fundamentals/document/index.md", "fundamentals/document/nested.md", "fundamentals/document/serialization.md", "fundamentals/document/visualization.md", "fundamentals/documentarray/access-attributes.md", "fundamentals/documentarray/access-elements.md", "fundamentals/documentarray/construct.md", "fundamentals/documentarray/embedding.md", "fundamentals/documentarray/evaluation.md", "fundamentals/documentarray/find.md", "fundamentals/documentarray/index.md", "fundamentals/documentarray/matching.md", "fundamentals/documentarray/parallelization.md", "fundamentals/documentarray/post-external.md", "fundamentals/documentarray/serialization.md", "fundamentals/documentarray/visualization.md", "fundamentals/fastapi-support/index.md", "fundamentals/jina-support/index.md", "fundamentals/notebook-support/index.md", "get-started/what-is.md", "index.md", "proto/docs.md", "proto/index.md"], "titles": ["Annlite", "One Million Scale Benchmark", "Elasticsearch", "Add New Document Store", "Document Store", "Qdrant", "SQLite", "Weaviate", "GraphQL", "PyTorch/Deep Learning Frameworks", "<span class=\"fab fa-python\"></span> Python API", "docarray package", "docarray.array package", "docarray.array.annlite module", "docarray.array.base module", "docarray.array.chunk module", "docarray.array.document module", "docarray.array.elastic module", "docarray.array.match module", "docarray.array.memory module", "docarray.array.mixins package", "docarray.array.mixins.content module", "docarray.array.mixins.dataloader package", "docarray.array.mixins.dataloader.helper module", "docarray.array.mixins.delitem module", "docarray.array.mixins.embed module", "docarray.array.mixins.empty module", "docarray.array.mixins.evaluation module", "docarray.array.mixins.find module", "docarray.array.mixins.getattr module", "docarray.array.mixins.getitem module", "docarray.array.mixins.group module", "docarray.array.mixins.io package", "docarray.array.mixins.io.binary module", "docarray.array.mixins.io.common module", "docarray.array.mixins.io.csv module", "docarray.array.mixins.io.dataframe module", "docarray.array.mixins.io.from_gen module", "docarray.array.mixins.io.json module", "docarray.array.mixins.io.pbar module", "docarray.array.mixins.io.pushpull module", "docarray.array.mixins.match module", "docarray.array.mixins.parallel module", "docarray.array.mixins.plot module", "docarray.array.mixins.post module", "docarray.array.mixins.pydantic module", "docarray.array.mixins.reduce module", "docarray.array.mixins.sample module", "docarray.array.mixins.setitem module", "docarray.array.mixins.strawberry module", "docarray.array.mixins.text module", "docarray.array.mixins.traverse module", "docarray.array.qdrant module", "docarray.array.queryset package", "docarray.array.queryset.lookup module", "docarray.array.queryset.parser module", "docarray.array.sqlite module", "docarray.array.storage package", "docarray.array.storage.annlite package", "docarray.array.storage.annlite.backend module", "docarray.array.storage.annlite.find module", "docarray.array.storage.annlite.getsetdel module", "docarray.array.storage.annlite.helper module", "docarray.array.storage.annlite.seqlike module", "docarray.array.storage.base package", "docarray.array.storage.base.backend module", "docarray.array.storage.base.getsetdel module", "docarray.array.storage.base.helper module", "docarray.array.storage.base.seqlike module", "docarray.array.storage.elastic package", "docarray.array.storage.elastic.backend module", "docarray.array.storage.elastic.find module", "docarray.array.storage.elastic.getsetdel module", "docarray.array.storage.elastic.seqlike module", "docarray.array.storage.memory package", "docarray.array.storage.memory.backend module", "docarray.array.storage.memory.find module", "docarray.array.storage.memory.getsetdel module", "docarray.array.storage.memory.seqlike module", "docarray.array.storage.qdrant package", "docarray.array.storage.qdrant.backend module", "docarray.array.storage.qdrant.find module", "docarray.array.storage.qdrant.getsetdel module", "docarray.array.storage.qdrant.helper module", "docarray.array.storage.qdrant.seqlike module", "docarray.array.storage.registry module", "docarray.array.storage.sqlite package", "docarray.array.storage.sqlite.backend module", "docarray.array.storage.sqlite.getsetdel module", "docarray.array.storage.sqlite.helper module", "docarray.array.storage.sqlite.seqlike module", "docarray.array.storage.weaviate package", "docarray.array.storage.weaviate.backend module", "docarray.array.storage.weaviate.find module", "docarray.array.storage.weaviate.getsetdel module", "docarray.array.storage.weaviate.seqlike module", "docarray.array.weaviate module", "docarray.base module", "docarray.dataclasses package", "docarray.dataclasses.getter module", "docarray.dataclasses.setter module", "docarray.dataclasses.types module", "docarray.document package", "docarray.document.data module", "docarray.document.generators module", "docarray.document.mixins package", "docarray.document.mixins.attribute module", "docarray.document.mixins.audio module", "docarray.document.mixins.blob module", "docarray.document.mixins.content module", "docarray.document.mixins.convert module", "docarray.document.mixins.dump module", "docarray.document.mixins.featurehash module", "docarray.document.mixins.helper module", "docarray.document.mixins.image module", "docarray.document.mixins.mesh module", "docarray.document.mixins.multimodal module", "docarray.document.mixins.plot module", "docarray.document.mixins.porting module", "docarray.document.mixins.property module", "docarray.document.mixins.protobuf module", "docarray.document.mixins.pydantic module", "docarray.document.mixins.rich_embedding module", "docarray.document.mixins.strawberry module", "docarray.document.mixins.sugar module", "docarray.document.mixins.text module", "docarray.document.mixins.video module", "docarray.document.pydantic_model module", "docarray.document.strawberry_type module", "docarray.helper module", "docarray.math package", "docarray.math.distance package", "docarray.math.distance.numpy module", "docarray.math.distance.paddle module", "docarray.math.distance.tensorflow module", "docarray.math.distance.torch module", "docarray.math.evaluation module", "docarray.math.helper module", "docarray.math.ndarray module", "docarray.proto package", "docarray.proto.docarray_pb2 module", "docarray.proto.io package", "docarray.proto.io.ndarray module", "docarray.score package", "docarray.score.data module", "docarray.score.mixins package", "docarray.score.mixins.property module", "docarray.score.mixins.representer module", "docarray.typing package", "docarray", "Changelog", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-unmute\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.563 2.069A.75.75 0 018 2.75v10.5a.75.75 0 01-1.238.57L3.472 11H1.75A1.75 1.75 0 010 9.25v-2.5C0 5.784.784 5 1.75 5h1.723l3.289-2.82a.75.75 0 01.801-.111zM6.5 4.38L4.238 6.319a.75.75 0 01-.488.181h-2a.25.25 0 00-.25.25v2.5c0 .138.112.25.25.25h2a.75.75 0 01.488.18L6.5 11.62V4.38zm6.096-2.038a.75.75 0 011.06 0 8 8 0 010 11.314.75.75 0 01-1.06-1.06 6.5 6.5 0 000-9.193.75.75 0 010-1.06v-.001zm-1.06 2.121a.75.75 0 10-1.061 1.061 3.5 3.5 0 010 4.95.75.75 0 101.06 1.06 5 5 0 000-7.07l.001-.001z\"></path></svg> Audio", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-image\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M1.75 2.5a.25.25 0 00-.25.25v10.5c0 .138.112.25.25.25h.94a.76.76 0 01.03-.03l6.077-6.078a1.75 1.75 0 012.412-.06L14.5 10.31V2.75a.25.25 0 00-.25-.25H1.75zm12.5 11H4.81l5.048-5.047a.25.25 0 01.344-.009l4.298 3.889v.917a.25.25 0 01-.25.25zm1.75-.25V2.75A1.75 1.75 0 0014.25 1H1.75A1.75 1.75 0 000 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0016 13.25zM5.5 6a.5.5 0 11-1 0 .5.5 0 011 0zM7 6a2 2 0 11-4 0 2 2 0 014 0z\"></path></svg> Image", "Examples", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-package\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M8.878.392a1.75 1.75 0 00-1.756 0l-5.25 3.045A1.75 1.75 0 001 4.951v6.098c0 .624.332 1.2.872 1.514l5.25 3.045a1.75 1.75 0 001.756 0l5.25-3.045c.54-.313.872-.89.872-1.514V4.951c0-.624-.332-1.2-.872-1.514L8.878.392zM7.875 1.69a.25.25 0 01.25 0l4.63 2.685L8 7.133 3.245 4.375l4.63-2.685zM2.5 5.677v5.372c0 .09.047.171.125.216l4.625 2.683V8.432L2.5 5.677zm6.25 8.271l4.625-2.683a.25.25 0 00.125-.216V5.677L8.75 8.432v5.516z\"></path></svg> 3D Mesh", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-table\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v3.585a.746.746 0 010 .83v8.085A1.75 1.75 0 0114.25 16H6.309a.748.748 0 01-1.118 0H1.75A1.75 1.75 0 010 14.25V6.165a.746.746 0 010-.83V1.75zM1.5 6.5v7.75c0 .138.112.25.25.25H5v-8H1.5zM5 5H1.5V1.75a.25.25 0 01.25-.25H5V5zm1.5 1.5v8h7.75a.25.25 0 00.25-.25V6.5h-8zm8-1.5h-8V1.5h7.75a.25.25 0 01.25.25V5z\"></path></svg> Table", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-typography\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M6.21 8.5L4.574 3.594 2.857 8.5H6.21zm.5 1.5l.829 2.487a.75.75 0 001.423-.474L5.735 2.332a1.216 1.216 0 00-2.302-.018l-3.39 9.688a.75.75 0 001.415.496L2.332 10H6.71zm3.13-4.358C10.53 4.374 11.87 4 13 4c1.5 0 3 .939 3 2.601v5.649a.75.75 0 01-1.448.275C13.995 12.82 13.3 13 12.5 13c-.77 0-1.514-.231-2.078-.709-.577-.488-.922-1.199-.922-2.041 0-.694.265-1.411.887-1.944C11 7.78 11.88 7.5 13 7.5h1.5v-.899c0-.54-.5-1.101-1.5-1.101-.869 0-1.528.282-1.84.858a.75.75 0 11-1.32-.716zM14.5 9H13c-.881 0-1.375.22-1.637.444-.253.217-.363.5-.363.806 0 .408.155.697.39.896.249.21.63.354 1.11.354.732 0 1.26-.209 1.588-.449.35-.257.412-.495.412-.551V9z\"></path></svg> Text", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-device-camera-video\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M16 3.75a.75.75 0 00-1.136-.643L11 5.425V4.75A1.75 1.75 0 009.25 3h-7.5A1.75 1.75 0 000 4.75v6.5C0 12.216.784 13 1.75 13h7.5A1.75 1.75 0 0011 11.25v-.675l3.864 2.318A.75.75 0 0016 12.25v-8.5zm-5 5.075l3.5 2.1v-5.85l-3.5 2.1v1.65zM9.5 6.75v-2a.25.25 0 00-.25-.25h-7.5a.25.25 0 00-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-4.5z\"></path></svg> Video", "Access Modality", "Construct", "Process Modality", "Dataclass", "Support New Modality", "Access Attributes", "Construct", "Embedding", "Fluent Interface", "Document", "Nested Structure", "Serialization", "Visualization", "Access Attributes", "Access Documents", "Construct", "Embed via Neural Network", "Evaluate Matches", "Query by Conditions", "DocumentArray", "Match Nearest Neighbours", "Parallelization", "Process via External Flow or Executor", "Serialization", "Visualization", "FastAPI/Pydantic", "Jina", "Jupyter Notebook/Colab", "What is DocArray?", "Welcome to DocArray!", "Protocol Documentation", "Protocol Documentation"], "terms": {"One": [0, 2, 3, 4, 5, 6, 7, 150, 152, 155, 156, 157, 159, 161, 163, 164, 167, 169, 171, 172, 173, 175, 176, 178, 179, 180, 181, 183, 184, 186], "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 28, 31, 33, 34, 35, 38, 40, 41, 42, 43, 44, 52, 56, 66, 69, 71, 96, 102, 104, 105, 114, 116, 120, 125, 126, 129, 131, 134, 135, 136, 137, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 33, 34, 35, 38, 39, 40, 41, 42, 43, 46, 50, 51, 52, 54, 56, 66, 69, 71, 96, 101, 102, 104, 105, 108, 110, 112, 114, 118, 125, 129, 136, 150, 151, 152, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189], "document": [0, 1, 2, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 31, 33, 35, 41, 42, 43, 44, 46, 47, 50, 51, 52, 54, 56, 58, 63, 68, 69, 71, 73, 74, 78, 79, 82, 84, 86, 90, 91, 95, 96, 97, 100, 101, 129, 136, 138, 141, 143, 149, 151, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 166, 168, 169, 170, 171, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187], "store": [0, 2, 5, 6, 7, 9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 31, 33, 35, 40, 41, 43, 52, 56, 91, 92, 96, 102, 105, 110, 114, 115, 117, 129, 150, 155, 156, 157, 158, 161, 162, 163, 166, 172, 175, 177, 178, 181, 186, 187], "documentarrai": [0, 1, 4, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 56, 58, 63, 66, 68, 69, 71, 73, 74, 76, 78, 79, 84, 86, 90, 91, 95, 96, 102, 103, 105, 116, 124, 125, 138, 152, 153, 155, 156, 158, 160, 161, 164, 166, 167, 168, 169, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 184, 186, 187], "It": [0, 2, 3, 5, 6, 7, 8, 9, 13, 15, 16, 17, 18, 19, 20, 25, 27, 35, 43, 52, 54, 56, 96, 150, 152, 154, 158, 159, 160, 161, 164, 165, 169, 172, 175, 177, 179, 180, 181, 184, 186, 187], "i": [0, 1, 2, 3, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 31, 33, 34, 35, 38, 40, 41, 42, 43, 46, 47, 50, 51, 52, 54, 56, 58, 63, 65, 66, 68, 69, 71, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 101, 102, 104, 105, 107, 108, 110, 111, 114, 117, 125, 127, 129, 131, 136, 137, 138, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 187, 188, 189], "when": [0, 1, 2, 4, 5, 6, 7, 8, 9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 27, 28, 33, 35, 41, 42, 43, 46, 51, 52, 56, 69, 71, 96, 101, 102, 104, 105, 114, 115, 137, 150, 152, 156, 158, 162, 163, 164, 168, 169, 170, 171, 172, 174, 175, 177, 178, 180, 181, 183, 184, 186, 187, 188, 189], "one": [0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 31, 42, 44, 46, 51, 52, 56, 62, 96, 102, 104, 105, 115, 152, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 169, 171, 172, 173, 174, 175, 176, 178, 179, 181, 182, 184, 185, 186], "want": [0, 2, 3, 4, 5, 6, 7, 8, 13, 15, 16, 17, 18, 19, 20, 40, 43, 46, 52, 56, 66, 96, 102, 105, 114, 129, 150, 152, 155, 156, 161, 162, 163, 164, 165, 167, 169, 171, 172, 174, 175, 179, 180, 181, 183, 184], "have": [0, 1, 2, 3, 4, 5, 7, 8, 9, 13, 15, 16, 17, 18, 19, 20, 21, 51, 52, 54, 56, 96, 102, 105, 114, 136, 156, 157, 158, 159, 160, 161, 164, 165, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 183, 184, 186, 187, 188, 189], "faster": [0, 2, 4, 5, 7, 13, 15, 16, 17, 18, 19, 20, 21, 33, 34, 52, 56, 96, 165, 169, 179, 187], "retriev": [0, 1, 2, 3, 4, 5, 7, 13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96, 136, 137, 175], "embed": [0, 1, 2, 4, 5, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 25, 35, 41, 43, 52, 56, 96, 102, 103, 105, 112, 119, 127, 160, 167, 169, 170, 174, 175, 176, 178, 181, 183, 186, 187, 188, 189], "e": [0, 1, 2, 3, 4, 5, 7, 8, 15, 104, 152, 161, 163, 164, 168, 169, 171, 172, 174, 175, 179, 180, 181, 186, 187], "match": [0, 1, 2, 4, 5, 7, 8, 11, 12, 13, 15, 16, 17, 19, 20, 27, 28, 46, 51, 52, 54, 56, 69, 71, 96, 102, 103, 104, 105, 114, 117, 119, 124, 127, 153, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 181, 183, 186, 187, 188, 189], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 33, 35, 40, 41, 42, 43, 46, 51, 52, 54, 56, 59, 62, 69, 70, 71, 75, 87, 91, 92, 96, 97, 101, 102, 104, 105, 109, 110, 112, 114, 116, 117, 125, 127, 129, 143, 150, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], "featur": [0, 1, 2, 3, 4, 5, 7, 8, 102, 105, 112, 150, 151, 153, 154, 157, 158, 159, 161, 165, 166, 169, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "requir": [0, 2, 3, 4, 5, 7, 8, 13, 15, 16, 17, 18, 19, 20, 27, 36, 52, 54, 56, 61, 77, 88, 96, 102, 105, 112, 152, 154, 157, 159, 167, 168, 169, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189], "you": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 36, 40, 41, 42, 43, 46, 52, 56, 66, 69, 71, 96, 102, 104, 105, 114, 125, 127, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187], "instal": [0, 2, 5, 7, 8, 13, 36, 52, 96, 152, 154, 157, 169, 180, 181, 182, 183, 184, 185], "via": [0, 1, 2, 3, 4, 5, 7, 8, 9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 38, 40, 42, 51, 52, 56, 96, 152, 153, 154, 155, 157, 158, 159, 161, 168, 169, 170, 171, 172, 175, 178, 181, 183, 184, 185, 186, 187], "pip": [0, 2, 5, 7, 8, 13, 52, 96, 152, 154, 157, 169, 180, 181, 182, 183, 184, 185, 187], "docarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 184, 185], "instanti": [0, 2, 5, 7, 17, 52, 96], "storag": [0, 1, 2, 3, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 40, 52, 56, 96, 186], "like": [0, 3, 4, 5, 8, 13, 15, 16, 17, 18, 19, 20, 33, 37, 40, 43, 52, 56, 63, 68, 73, 78, 90, 95, 96, 102, 105, 107, 112, 114, 115, 120, 126, 132, 152, 154, 157, 159, 163, 165, 167, 169, 171, 174, 176, 177, 178, 179, 180, 181, 183, 184, 186, 188, 189], "so": [0, 1, 3, 4, 5, 7, 13, 15, 16, 17, 18, 19, 20, 40, 52, 54, 56, 96, 102, 105, 125, 152, 158, 160, 161, 162, 169, 171, 172, 175, 178, 179, 183, 184, 186], "from": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 23, 25, 31, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 46, 47, 50, 52, 54, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 96, 97, 101, 102, 104, 105, 108, 110, 114, 115, 117, 118, 121, 123, 124, 125, 127, 129, 136, 137, 138, 143, 150, 151, 152, 154, 155, 156, 157, 158, 160, 161, 162, 165, 166, 167, 170, 171, 172, 174, 175, 176, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189], "import": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 15, 16, 17, 18, 19, 20, 25, 36, 52, 56, 96, 101, 102, 138, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187], "da": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 15, 16, 17, 18, 19, 20, 35, 41, 50, 52, 56, 96, 150, 152, 155, 156, 158, 160, 165, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 186], "n_dim": [0, 2, 4, 5, 7, 12, 13, 16, 17, 52, 57, 58, 59, 69, 70, 79, 80, 82, 91, 92, 96, 102, 105, 112], "10": [0, 1, 2, 3, 4, 5, 7, 9, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 117, 156, 157, 165, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 31, 34, 40, 42, 46, 47, 50, 52, 54, 56, 58, 63, 66, 68, 69, 71, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 101, 102, 104, 105, 114, 117, 126, 129, 150, 152, 154, 156, 157, 159, 160, 161, 163, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189], "would": [0, 1, 2, 3, 4, 5, 7, 13, 15, 16, 17, 18, 19, 20, 21, 52, 56, 96, 156, 158, 161, 163, 167, 171, 173, 175, 186], "same": [0, 1, 2, 3, 5, 6, 7, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 28, 31, 40, 41, 42, 43, 46, 52, 56, 69, 71, 96, 102, 105, 114, 138, 156, 157, 159, 161, 164, 167, 168, 169, 171, 172, 175, 177, 181, 183, 184, 185, 187, 188, 189], "ordinari": [0, 2, 5, 7], "To": [0, 2, 3, 4, 5, 6, 7, 9, 13, 15, 16, 17, 18, 19, 20, 23, 33, 41, 42, 52, 56, 96, 102, 105, 125, 150, 151, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 173, 176, 178, 179, 181, 184, 187, 189], "access": [0, 1, 2, 5, 6, 7, 13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96, 109, 161, 164, 166, 168, 176, 177, 184, 186], "formerli": [0, 2, 5, 6, 7], "persist": [0, 2, 3, 4, 5, 6, 7, 13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96], "specifi": [0, 1, 2, 4, 5, 6, 7, 13, 15, 16, 17, 18, 19, 20, 23, 28, 31, 33, 43, 52, 56, 69, 71, 96, 102, 104, 127, 129, 152, 159, 162, 164, 169, 172, 174, 175, 176, 178, 181, 184, 188, 189], "data_path": [0, 4, 12, 13, 57, 58, 59, 62], "data": [0, 1, 2, 3, 4, 7, 8, 9, 11, 13, 15, 16, 17, 18, 19, 20, 22, 33, 34, 35, 38, 45, 46, 52, 56, 58, 63, 67, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 102, 104, 105, 107, 108, 110, 111, 114, 115, 117, 118, 121, 123, 125, 126, 127, 129, 137, 143, 153, 155, 156, 158, 159, 161, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], "summari": [0, 2, 5, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 117, 155, 156, 158, 159, 161, 162, 164, 165, 168, 170, 171, 172, 173, 175, 176, 180, 181], "note": [0, 1, 3, 4, 5, 7, 13, 15, 16, 17, 18, 19, 20, 23, 31, 34, 41, 52, 56, 96, 102, 105, 112, 127, 129, 150, 152, 166, 168, 169, 172, 173, 174, 175, 178, 184, 185, 188, 189], "mandatori": [0, 5], "befor": [0, 1, 5, 8, 13, 14, 15, 16, 17, 18, 19, 20, 23, 31, 42, 52, 54, 56, 96, 127, 150, 152, 156, 158, 159, 160, 161, 179, 183, 184], "backend": [0, 1, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 28, 41, 42, 52, 56, 57, 58, 64, 66, 69, 71, 74, 79, 86, 91, 96, 169], "other": [0, 1, 2, 3, 4, 5, 6, 7, 13, 15, 16, 17, 18, 19, 20, 27, 28, 41, 46, 52, 54, 56, 66, 69, 71, 96, 97, 102, 127, 143, 152, 153, 159, 163, 165, 167, 169, 179, 181, 184, 186, 187, 188, 189], "function": [0, 1, 2, 3, 4, 5, 6, 7, 9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 33, 34, 35, 36, 37, 41, 42, 43, 44, 47, 48, 50, 51, 52, 54, 56, 58, 59, 61, 69, 70, 75, 76, 77, 87, 88, 91, 92, 96, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 121, 123, 125, 126, 127, 129, 150, 152, 156, 159, 162, 163, 166, 167, 174, 175, 176, 178, 179, 184, 186, 188, 189], "behav": [0, 2, 5, 6, 7, 127, 171], "memori": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 33, 42, 52, 56, 57, 96, 164, 173, 174, 177, 178, 181, 186, 187], "follow": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 15, 16, 17, 18, 19, 20, 28, 44, 52, 54, 56, 66, 69, 71, 96, 102, 105, 114, 117, 150, 152, 154, 158, 159, 160, 161, 164, 165, 166, 167, 169, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 187], "set": [0, 2, 3, 5, 6, 13, 15, 16, 17, 18, 19, 20, 22, 23, 27, 28, 31, 33, 35, 40, 41, 42, 43, 46, 47, 52, 54, 56, 69, 71, 96, 101, 102, 104, 105, 106, 108, 110, 112, 114, 117, 120, 125, 127, 138, 150, 159, 161, 162, 163, 164, 165, 167, 169, 171, 172, 173, 174, 178, 179, 181, 186], "name": [0, 1, 2, 4, 5, 6, 7, 9, 12, 13, 15, 16, 17, 18, 19, 20, 23, 25, 27, 31, 35, 40, 43, 52, 54, 56, 57, 58, 62, 91, 92, 96, 97, 102, 104, 105, 107, 126, 129, 143, 155, 159, 161, 163, 171, 174, 176, 180, 188, 189], "descript": [0, 2, 5, 6, 7, 11, 39, 101, 143, 144, 145, 146, 158, 159, 161, 167, 168, 176, 181, 188, 189], "default": [0, 1, 2, 3, 4, 5, 6, 7, 13, 14, 15, 16, 17, 18, 19, 20, 23, 25, 28, 31, 34, 35, 38, 41, 42, 47, 52, 56, 58, 63, 68, 69, 71, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 97, 101, 102, 104, 105, 110, 114, 127, 129, 143, 159, 162, 169, 174, 175, 178, 179, 180, 181, 184], "number": [0, 1, 4, 5, 6, 7, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 28, 41, 42, 44, 47, 52, 56, 58, 63, 65, 68, 69, 71, 73, 74, 78, 79, 84, 86, 90, 91, 92, 95, 96, 97, 102, 104, 105, 110, 112, 115, 117, 129, 136, 137, 138, 143, 152, 158, 163, 175, 176, 186, 188, 189], "dimens": [0, 1, 2, 5, 13, 15, 16, 17, 18, 19, 20, 21, 52, 56, 96, 102, 104, 105, 112, 137, 157, 188, 189], "alwai": [0, 5, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 43, 52, 56, 96, 138, 153, 155, 158, 159, 160, 166, 167, 169, 172, 174, 178, 188, 189], "folder": [0, 13, 15, 16, 17, 18, 19, 20, 40, 43, 52, 56, 96, 184], "where": [0, 2, 5, 7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 31, 33, 40, 41, 43, 50, 52, 56, 96, 102, 105, 125, 138, 156, 157, 158, 162, 171, 172, 179, 181, 184, 186, 187], "locat": [0, 11, 102, 103, 105, 119, 127, 167, 169, 181, 188, 189], "A": [0, 4, 7, 13, 15, 16, 17, 18, 19, 20, 27, 28, 41, 46, 47, 51, 52, 54, 55, 56, 76, 96, 102, 129, 152, 154, 158, 159, 161, 163, 167, 172, 176, 178, 185, 188, 189], "random": [0, 5, 6, 8, 9, 13, 15, 16, 17, 18, 19, 20, 43, 47, 52, 56, 96, 129, 164, 165, 171, 174, 175, 178, 182, 183, 186], "temp": [0, 6], "metric": [0, 1, 2, 4, 5, 7, 12, 13, 15, 16, 17, 18, 19, 20, 27, 28, 41, 52, 56, 57, 58, 59, 69, 71, 96, 124, 131, 156, 167, 175, 178, 188, 189], "distanc": [0, 2, 5, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 28, 41, 52, 56, 57, 69, 70, 71, 79, 80, 81, 91, 92, 96, 130, 137, 178], "dure": [0, 1, 3, 5, 7, 13, 15, 16, 17, 18, 19, 20, 40, 51, 52, 56, 96, 102, 156, 164, 186], "cosin": [0, 2, 5, 7, 13, 15, 16, 17, 18, 19, 20, 28, 41, 52, 56, 58, 59, 69, 70, 71, 79, 80, 96, 124, 130, 131, 132, 134, 135, 171, 178], "dot": [0, 5, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 167], "euclidean": [0, 4, 5, 13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 130, 131, 132, 134, 135, 178], "ef_construct": [0, 1, 2, 5, 7, 12, 13, 17, 52, 57, 58, 59, 69, 70, 79, 80, 91, 92, 96], "size": [0, 1, 2, 5, 7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 26, 31, 34, 37, 38, 42, 43, 52, 56, 58, 62, 96, 102, 104, 105, 114, 117, 152, 154, 157, 158, 176, 181], "dynam": [0, 1, 2, 7, 167, 186, 188, 189], "list": [0, 1, 2, 3, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 27, 28, 31, 33, 37, 38, 45, 46, 47, 49, 51, 52, 56, 58, 59, 62, 63, 68, 69, 70, 71, 73, 74, 78, 79, 80, 84, 86, 90, 91, 92, 95, 96, 102, 103, 104, 105, 119, 120, 127, 129, 136, 138, 159, 163, 165, 167, 168, 169, 171, 172, 177, 178, 180, 183, 186, 187, 188, 189], "nearest": [0, 2, 3, 4, 5, 7, 13, 15, 16, 17, 18, 19, 20, 28, 41, 52, 56, 69, 71, 96, 175, 176, 187], "neighbor": [0, 1, 2, 3, 7, 13, 15, 16, 17, 18, 19, 20, 28, 52, 56, 69, 71, 96, 102, 105, 114], "construct": [0, 1, 2, 3, 5, 7, 102, 127, 160, 161, 167, 172, 177], "none": [0, 1, 2, 3, 4, 5, 6, 7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 31, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 47, 51, 52, 56, 58, 59, 62, 63, 67, 68, 69, 70, 71, 74, 78, 79, 80, 86, 87, 89, 90, 91, 92, 95, 96, 97, 101, 102, 103, 104, 105, 110, 114, 117, 118, 120, 124, 125, 127, 129, 136, 137, 138, 141, 142, 143, 144, 160, 163, 169, 173, 175, 181, 183], "valu": [0, 1, 2, 3, 4, 5, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 28, 31, 38, 41, 42, 43, 46, 50, 52, 54, 56, 58, 63, 65, 68, 69, 71, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 97, 100, 101, 102, 105, 118, 125, 127, 129, 136, 137, 138, 142, 143, 144, 145, 146, 150, 155, 156, 158, 159, 161, 162, 163, 164, 167, 169, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 186], "packag": [0, 1, 149, 151, 159, 165, 186, 187], "ef_search": [0, 12, 13, 57, 58, 59], "max_connect": [0, 1, 7, 12, 13, 57, 58, 59, 91, 92, 96], "bi": [0, 1], "direct": [0, 1, 62], "link": [0, 1], "creat": [0, 1, 4, 8, 13, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 31, 33, 52, 54, 56, 62, 65, 96, 101, 104, 127, 129, 154, 156, 158, 159, 160, 175, 186], "everi": [0, 1, 4, 13, 15, 16, 17, 18, 19, 20, 23, 42, 43, 46, 52, 56, 96, 150, 164, 175, 179, 187], "new": [0, 1, 7, 13, 15, 16, 17, 18, 19, 20, 23, 42, 44, 52, 56, 62, 65, 96, 101, 102, 105, 114, 127, 129, 150, 161, 172, 173, 184, 186, 187], "element": [0, 1, 7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 33, 34, 35, 38, 41, 42, 47, 52, 54, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 96, 136, 138, 152, 167, 169, 171, 172, 177, 178, 179, 181, 186, 188, 189], "check": [0, 3, 4, 7, 9, 13, 15, 16, 17, 18, 19, 20, 23, 31, 52, 54, 56, 96, 138, 163, 169, 172, 175, 181, 183, 184, 187], "sourc": [0, 3, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 151, 154, 180, 184, 187], "code": [0, 1, 2, 4, 5, 7, 8, 10, 13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 102, 105, 109, 140, 160, 161, 163, 173, 179, 180, 181, 186, 187], "restrict": [0, 2, 5, 7, 54, 151, 158, 172, 181, 183], "user": [0, 1, 2, 3, 4, 5, 7, 8, 10, 13, 16, 19, 52, 56, 96, 102, 150, 152, 161, 165, 173, 176, 177, 178, 181, 183, 184, 187], "defin": [0, 2, 3, 5, 7, 13, 15, 16, 17, 18, 19, 20, 35, 51, 52, 56, 96, 101, 104, 152, 156, 161, 162, 169, 173, 175, 176, 178, 183, 188, 189], "guidelin": [0, 2, 5, 7], "provid": [0, 1, 2, 4, 7, 8, 9, 13, 15, 16, 17, 18, 19, 20, 21, 24, 27, 28, 29, 30, 37, 41, 42, 46, 47, 48, 52, 54, 56, 59, 66, 69, 70, 71, 72, 75, 76, 87, 92, 94, 96, 102, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 121, 123, 124, 125, 126, 152, 156, 159, 161, 166, 167, 169, 171, 172, 175, 179, 181, 186], "repositori": [0, 1, 160], "consid": [0, 1, 2, 5, 7, 13, 15, 16, 17, 18, 19, 20, 28, 41, 50, 52, 56, 69, 71, 96, 102, 104, 105, 112, 156, 159, 161, 172, 173, 176, 177, 181, 184], "certain": [0, 2, 4, 7, 13, 15, 16, 17, 18, 19, 20, 47, 52, 56, 96, 152, 168, 172, 183], "tag": [0, 1, 4, 5, 7, 11, 13, 15, 16, 17, 18, 19, 20, 23, 28, 31, 35, 52, 54, 56, 69, 71, 96, 102, 103, 105, 112, 119, 127, 155, 158, 159, 161, 164, 167, 169, 171, 176, 181, 188, 189], "price": [0, 2, 4, 5, 7, 13, 16], "all": [0, 1, 2, 3, 4, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, 33, 35, 41, 43, 46, 50, 51, 52, 54, 56, 69, 71, 96, 97, 102, 105, 110, 114, 120, 125, 127, 136, 138, 143, 150, 152, 156, 159, 161, 162, 163, 165, 166, 171, 172, 173, 175, 176, 177, 179, 182, 183, 184, 185, 186, 187], "lower": [0, 2, 5, 7, 169], "equal": [0, 1, 2, 5, 7, 13, 15, 16, 17, 18, 19, 20, 21, 43, 52, 56, 96, 176], "some": [0, 1, 2, 3, 4, 7, 8, 9, 16, 19, 97, 102, 143, 150, 151, 152, 153, 156, 159, 161, 165, 168, 169, 171, 173, 175, 176, 178, 179, 180, 183, 184, 185, 186], "max_pric": [0, 2, 4, 5, 7, 13], "index": [0, 1, 2, 3, 5, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 28, 30, 43, 48, 50, 52, 56, 57, 58, 63, 64, 65, 67, 68, 69, 71, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 102, 105, 125, 129, 156, 167, 186, 187, 188, 189], "numpi": [0, 2, 3, 4, 5, 7, 8, 9, 13, 15, 16, 17, 18, 19, 20, 25, 33, 35, 52, 56, 96, 102, 104, 105, 110, 120, 130, 131, 134, 135, 136, 137, 138, 156, 159, 161, 163, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 177, 178, 182, 186, 187], "np": [0, 2, 3, 4, 5, 7, 8, 9, 13, 15, 16, 17, 18, 19, 20, 21, 28, 37, 52, 56, 96, 104, 124, 131, 132, 134, 135, 138, 163, 165, 169, 170, 171, 174, 175, 178, 182, 183, 186], "3": [0, 1, 2, 4, 5, 7, 8, 9, 13, 16, 102, 105, 114, 138, 158, 159, 161, 163, 164, 165, 169, 171, 172, 173, 175, 178, 179, 180, 182, 183, 184, 186, 187], "column": [0, 2, 4, 5, 7, 12, 13, 15, 16, 17, 18, 19, 20, 35, 39, 52, 56, 57, 58, 59, 69, 70, 79, 80, 91, 92, 96, 155, 158, 159, 161, 186], "float": [0, 2, 4, 5, 7, 13, 15, 16, 17, 18, 19, 20, 27, 28, 37, 39, 41, 43, 52, 56, 58, 59, 69, 70, 71, 91, 92, 96, 102, 103, 104, 105, 110, 114, 119, 124, 127, 132, 134, 135, 136, 137, 138, 143, 144, 145, 146, 167, 188, 189], "extend": [0, 1, 2, 3, 4, 5, 7, 12, 13, 14, 15, 16, 17, 18, 19, 52, 56, 57, 58, 63, 64, 67, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 156, 173, 175, 179], "id": [0, 1, 2, 3, 4, 5, 7, 8, 11, 13, 15, 16, 17, 18, 19, 20, 23, 27, 28, 31, 41, 43, 52, 56, 62, 67, 69, 71, 91, 92, 96, 102, 103, 105, 114, 117, 119, 127, 129, 152, 155, 156, 157, 158, 163, 164, 165, 167, 168, 169, 170, 171, 173, 175, 176, 178, 180, 181, 182, 183, 185, 187, 188, 189], "f": [0, 2, 4, 5, 7, 13, 16, 54, 157, 178, 179, 184, 186], "r": [0, 1, 2, 4, 5, 7, 13, 15, 16, 17, 18, 19, 20, 33, 37, 51, 52, 56, 96, 104, 136, 158, 172, 176, 180, 184, 186], "rang": [0, 1, 2, 4, 5, 7, 13, 14, 15, 16, 17, 18, 19, 20, 41, 52, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 102, 105, 114, 137, 173, 176, 180, 186], "print": [0, 2, 4, 5, 7, 9, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 117, 151, 152, 154, 156, 157, 158, 159, 160, 162, 163, 164, 169, 171, 172, 173, 174, 175, 176, 178, 179, 181, 182, 183, 185, 187], "nindex": [0, 2, 5, 7], "n": [0, 2, 5, 7, 131, 156, 186, 188, 189], "tags__pric": [0, 2, 5, 7], "t": [0, 1, 2, 4, 5, 7, 8, 13, 15, 16, 17, 18, 19, 20, 23, 25, 26, 33, 34, 35, 36, 37, 38, 40, 42, 45, 46, 49, 52, 56, 66, 96, 97, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 118, 120, 121, 123, 124, 125, 126, 143, 152, 156, 164, 165, 169, 172, 175, 183, 184, 186], "Then": [0, 2, 5, 7, 174, 177, 181, 183], "whose": [0, 2, 7, 102, 105, 114, 176], "than": [0, 1, 2, 3, 4, 5, 7, 13, 15, 16, 17, 18, 19, 20, 23, 31, 52, 56, 96, 102, 105, 125, 129, 156, 163, 165, 172, 176, 179, 181, 187, 188, 189], "appli": [0, 1, 2, 7, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 28, 34, 35, 42, 46, 51, 52, 54, 56, 69, 71, 96, 150, 156, 159, 161, 171, 179, 183, 184], "n_limit": [0, 2, 4, 5, 7, 13], "4": [0, 1, 2, 4, 5, 7, 8, 9, 13, 138, 158, 165, 172, 173, 175, 178, 179], "lte": [0, 2, 4, 5, 13, 176], "result": [0, 2, 3, 4, 5, 8, 13, 15, 16, 17, 18, 19, 20, 23, 27, 28, 41, 42, 46, 52, 56, 69, 71, 96, 102, 105, 112, 158, 169, 171, 175, 178, 179, 181, 182, 184, 186], "return": [0, 2, 3, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 56, 58, 62, 63, 65, 68, 69, 71, 73, 74, 75, 78, 79, 81, 82, 84, 86, 89, 90, 91, 92, 95, 96, 97, 100, 101, 102, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 145, 146, 162, 168, 171, 172, 179, 184, 186], "verifi": [0, 2, 7], "most": [0, 1, 2, 3, 5, 7, 13, 15, 16, 17, 18, 19, 20, 41, 46, 52, 56, 96, 150, 154, 163, 164, 169, 172, 181, 187], "satisfi": [0, 2, 7, 102, 105, 108, 110, 125, 159], "condit": [0, 1, 2, 7, 54, 55], "0": [0, 1, 2, 4, 5, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 26, 37, 41, 43, 44, 50, 52, 56, 65, 86, 87, 96, 102, 104, 105, 110, 114, 125, 131, 136, 137, 138, 159, 160, 163, 165, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 186, 187], "1": [0, 1, 2, 4, 7, 9, 13, 15, 16, 17, 18, 19, 20, 41, 43, 44, 50, 51, 52, 56, 62, 65, 96, 101, 102, 104, 105, 110, 114, 117, 124, 125, 129, 136, 137, 138, 150, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189], "2": [0, 1, 2, 4, 7, 9, 13, 15, 16, 17, 18, 19, 20, 45, 46, 50, 51, 52, 54, 56, 96, 102, 105, 107, 121, 131, 132, 134, 135, 138, 158, 159, 163, 164, 165, 169, 171, 172, 173, 175, 176, 178, 179, 180, 181, 183, 186, 187, 188, 189], "up": [0, 1, 2, 4, 5, 7, 13, 15, 16, 17, 18, 19, 20, 35, 52, 56, 96, 179, 184, 187], "9": [0, 1, 2, 5, 7, 16, 19, 138], "ha": [0, 1, 2, 4, 5, 7, 8, 13, 15, 16, 17, 18, 19, 20, 34, 43, 52, 56, 96, 102, 105, 114, 117, 152, 155, 158, 159, 161, 165, 167, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183], "we": [0, 1, 2, 3, 4, 5, 7, 8, 9, 129, 152, 156, 157, 158, 159, 160, 161, 165, 169, 171, 172, 173, 175, 176, 177, 178, 179, 182, 183, 184, 185, 187], "ones": [0, 2, 4, 5, 7, 16, 153, 171, 172, 173, 181], "8": [0, 1, 2, 4, 5, 7, 13, 15, 16, 17, 18, 19, 20, 34, 35, 38, 52, 56, 96, 102, 104, 105, 108, 110, 125, 138, 163, 175, 176, 188, 189], "must": [0, 2, 3, 5, 7, 13, 15, 16, 17, 18, 19, 20, 28, 52, 56, 66, 69, 71, 96, 102, 105, 114, 169, 172, 179, 188, 189], "As": [0, 1, 2, 3, 4, 5, 7, 152, 156, 163, 169, 171, 173, 179, 184, 186], "an": [0, 1, 2, 3, 4, 5, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 28, 31, 33, 42, 43, 51, 52, 54, 56, 69, 71, 91, 92, 96, 101, 102, 104, 105, 107, 112, 114, 117, 125, 127, 150, 152, 156, 158, 159, 160, 161, 162, 163, 166, 167, 169, 170, 171, 172, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], "let": [0, 2, 3, 4, 5, 7, 8, 9, 131, 151, 152, 156, 157, 158, 159, 160, 161, 163, 165, 167, 171, 172, 174, 175, 176, 177, 178, 179, 183], "": [0, 1, 2, 3, 4, 5, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 25, 28, 40, 46, 52, 54, 56, 58, 63, 68, 69, 71, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 129, 151, 152, 156, 157, 158, 160, 163, 165, 170, 171, 174, 175, 176, 178, 179, 181, 183, 184, 185, 187], "encod": [0, 2, 5, 7, 13, 15, 16, 17, 18, 19, 20, 34, 35, 38, 52, 56, 96, 102, 104, 105, 108, 110, 118, 125, 126, 127, 156, 160, 188, 189], "inform": [0, 2, 4, 5, 7, 13, 15, 16, 17, 18, 19, 20, 35, 52, 56, 96, 129, 152, 159, 161, 163, 164, 165, 167, 169, 172, 173, 175], "propos": [0, 2, 5, 7], "implement": [0, 1, 2, 5, 7, 8, 9, 13, 15, 16, 17, 18, 19, 20, 25, 27, 52, 56, 61, 63, 66, 68, 72, 73, 77, 78, 88, 90, 94, 95, 96, 150, 172, 177, 179, 181, 183], "7": [0, 1, 2, 4, 5, 7, 138, 160, 173, 178, 187, 188, 189], "np_queri": [0, 2, 4, 5, 7, 16], "nqueri": [0, 2, 5, 7], "limit": [0, 2, 3, 5, 7, 13, 15, 16, 17, 18, 19, 20, 28, 34, 41, 52, 54, 56, 69, 71, 96, 124, 156, 171, 178, 184, 186], "nembed": [0, 2, 5, 7], "neighbour": [0, 2, 4, 5, 7, 13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 168, 175, 176, 187], "zip": [0, 2, 5, 7, 104], "tembed": [0, 2, 5, 7], "6": [0, 1, 2, 4, 5, 7, 136, 138, 156, 165, 172, 175, 178, 186], "5": [0, 1, 2, 4, 5, 7, 136, 138, 160, 165, 172, 173, 175, 176, 178, 179, 180, 181, 182, 184, 186], "randomli": [1, 13, 15, 16, 17, 18, 19, 20, 47, 52, 56, 96, 129], "gener": [1, 3, 5, 7, 11, 13, 15, 16, 17, 18, 19, 20, 22, 23, 31, 33, 37, 42, 43, 47, 52, 56, 66, 96, 102, 105, 114, 117, 125, 127, 129, 140, 150, 155, 158, 163, 173, 186, 188, 189], "uniform": 1, "distribut": [1, 54, 129], "support": [1, 3, 4, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 28, 41, 52, 56, 58, 63, 66, 68, 69, 71, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 102, 107, 110, 114, 115, 125, 126, 138, 159, 166, 169, 172, 174, 179, 180, 181, 183, 186], "includ": [1, 3, 10, 54, 102, 104, 105, 114, 125, 127, 150, 158, 169, 183, 184, 186, 187], "classic": [1, 187], "databas": [1, 3, 4, 6, 7, 56, 62, 129, 150, 187], "vector": [1, 3, 13, 15, 16, 17, 18, 19, 20, 28, 52, 56, 69, 71, 96, 165, 174, 187], "under": [1, 3, 4, 54, 136, 150, 156, 158, 159, 161, 171, 181, 186, 187], "api": [1, 3, 7, 8, 152, 158, 160, 161, 169, 174, 177, 181, 183, 184, 186, 187], "usag": [1, 3, 4, 13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 101, 129, 150, 164, 181, 183], "version": [1, 2, 3, 5, 7, 66, 129, 150, 180, 181, 187], "12": [1, 150, 172, 173, 180, 183], "sqlite": [1, 3, 4, 11, 12, 16, 57], "weaviat": [1, 4, 11, 12, 16, 57, 187], "11": [1, 176, 179], "qdrant": [1, 4, 11, 12, 57, 187], "annlit": [1, 4, 5, 11, 12, 16, 57, 187], "anlit": 1, "elasticsearch": [1, 4, 16, 17], "focu": 1, "task": [1, 39, 181, 184, 186], "add": [1, 7, 15, 16, 18, 127, 152, 158, 168, 169, 172, 173, 181, 184], "read": [1, 2, 5, 7, 8, 13, 15, 16, 17, 18, 19, 20, 35, 52, 56, 96, 102, 104, 105, 108, 110, 150, 155, 159, 161, 163, 164, 166, 169, 173, 186, 187], "exist": [1, 3, 13, 15, 16, 17, 18, 19, 20, 22, 23, 31, 40, 42, 43, 46, 52, 54, 56, 96, 158, 160, 161, 168, 176, 180], "some_id": 1, "updat": [1, 2, 3, 4, 7, 64, 66, 67, 127, 137, 172, 184, 186], "delet": [1, 3, 4, 6, 7, 56, 86, 87, 171, 172], "del": [1, 171, 172], "find": [1, 2, 4, 12, 13, 15, 16, 17, 18, 19, 20, 52, 54, 56, 57, 58, 69, 74, 79, 91, 96, 137, 169, 173, 174, 176, 179, 185], "boolean": [1, 2, 17, 69, 70, 176, 188, 189], "filter": [1, 8, 13, 15, 16, 17, 18, 19, 20, 23, 28, 31, 41, 51, 52, 56, 69, 71, 96, 104, 129, 169, 172, 181], "describ": [1, 131, 150, 158, 169, 176, 178, 180, 181, 184], "queri": [1, 3, 4, 5, 8, 13, 15, 16, 17, 18, 19, 20, 28, 41, 52, 55, 56, 69, 71, 96, 102, 105, 117, 184, 187], "approxim": [1, 2, 3, 4, 13, 15, 16, 17, 18, 19, 20, 28, 52, 56, 69, 71, 96, 175], "abov": [1, 3, 4, 7, 8, 54, 66, 158, 159, 161, 166, 178, 180, 181, 186], "ar": [1, 3, 4, 5, 7, 8, 9, 13, 15, 16, 17, 18, 19, 20, 21, 23, 27, 31, 33, 34, 41, 46, 51, 52, 54, 56, 66, 96, 97, 102, 104, 105, 112, 114, 125, 127, 136, 138, 143, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 164, 169, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], "often": [1, 3, 4, 7, 152, 155, 156, 165, 166, 167, 169, 179, 181, 183, 184, 186, 188, 189], "atom": 1, "oper": [1, 3, 4, 7, 13, 15, 16, 17, 18, 19, 20, 21, 52, 56, 66, 96, 188, 189], "high": [1, 3, 7, 9, 151, 160, 161, 186], "level": [1, 3, 7, 9, 46, 129, 151, 158, 161, 167, 171, 172, 179, 181, 186, 188, 189], "henc": [1, 152, 154, 155, 169, 179, 180, 186], "understand": [1, 4, 164, 183, 185, 186], "perform": [1, 2, 3, 4, 7, 13, 15, 16, 17, 18, 19, 20, 28, 52, 56, 69, 71, 96, 127, 129, 167, 179, 186, 188, 189], "give": [1, 3, 4, 13, 15, 16, 17, 18, 19, 20, 34, 43, 52, 56, 96, 101, 152, 164, 169, 171, 179, 183, 184], "good": [1, 7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 155, 186], "estim": [1, 181], "differ": [1, 3, 4, 13, 15, 16, 17, 18, 19, 20, 41, 43, 51, 52, 56, 96, 102, 105, 114, 115, 156, 162, 164, 169, 171, 175, 176, 179, 181, 186], "interest": [1, 152, 172, 183], "singl": [1, 2, 3, 7, 9, 13, 15, 16, 17, 18, 19, 20, 23, 42, 43, 51, 52, 56, 66, 96, 102, 105, 117, 152, 159, 169, 178, 180, 183, 184], "which": [1, 2, 3, 4, 6, 7, 9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 31, 33, 34, 35, 38, 40, 42, 52, 54, 56, 66, 96, 102, 104, 105, 108, 111, 112, 114, 117, 126, 127, 129, 150, 152, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 169, 172, 176, 179, 181, 182, 186, 188, 189], "mean": [1, 7, 8, 9, 13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 102, 105, 110, 114, 136, 151, 157, 158, 159, 162, 163, 165, 166, 171, 175, 178, 180, 183, 184], "evalu": [1, 11, 12, 13, 15, 16, 17, 18, 19, 20, 52, 53, 54, 55, 56, 96, 102, 103, 105, 119, 127, 130, 167, 168, 169, 177, 181, 186, 187, 188, 189], "time": [1, 2, 4, 5, 9, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 129, 156, 157, 161, 169, 178, 181, 186], "repeatedli": 1, "report": 1, "averag": [1, 13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96, 136, 175, 186], "conduct": [1, 152, 175, 179, 181, 186], "end": [1, 7, 13, 14, 15, 16, 17, 18, 19, 20, 51, 52, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 102, 105, 125, 167, 188, 189], "call": [1, 3, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 158, 159, 162, 165, 169, 180, 183], "just": [1, 3, 4, 7, 8, 129, 152, 159, 171, 172, 176, 185], "underli": 1, "therefor": [1, 3, 66, 186], "particular": [1, 13, 15, 16, 17, 18, 19, 20, 35, 52, 54, 56, 96, 104, 181], "influenc": 1, "posit": [1, 3, 4, 7, 13, 15, 17, 18, 19, 52, 56, 58, 63, 67, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 136, 167, 188, 189], "neg": [1, 188, 189], "our": [1, 13, 16, 19, 52, 56, 96, 102, 157, 161, 165, 172, 174, 175, 179, 187], "interfac": [1, 2, 3, 150, 151, 169, 173, 176, 177, 186], "If": [1, 2, 3, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 27, 28, 31, 33, 40, 41, 42, 43, 46, 47, 52, 54, 56, 69, 71, 96, 102, 104, 105, 114, 117, 136, 150, 155, 156, 158, 159, 164, 165, 169, 170, 171, 172, 173, 174, 175, 178, 179, 181, 182, 183, 184, 185, 186, 187], "spot": 1, "bottleneck": 1, "thrill": 1, "know": [1, 7, 104, 161, 172, 177, 179, 181, 186, 187], "about": [1, 2, 4, 5, 7, 8, 150, 161, 162, 164, 169, 171, 172, 178, 184, 186, 187], "improv": [1, 4, 179, 184, 185, 186], "similar": [1, 2, 7, 13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 169, 171, 178, 179, 181, 186], "algorithm": [1, 7, 13, 15, 16, 17, 18, 19, 20, 22, 33, 52, 56, 96, 129, 152, 154, 161, 181], "In": [1, 3, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 28, 33, 42, 52, 56, 69, 71, 96, 102, 105, 125, 154, 155, 157, 158, 159, 160, 161, 163, 165, 167, 169, 171, 173, 177, 178, 181, 183, 184, 185, 186, 187, 188, 189], "onli": [1, 3, 5, 8, 9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 28, 33, 34, 40, 41, 42, 43, 52, 54, 56, 69, 71, 96, 102, 104, 105, 114, 126, 150, 157, 158, 159, 161, 162, 163, 164, 169, 172, 173, 174, 175, 178, 179, 181, 183, 186], "paramet": [1, 2, 5, 7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 31, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 56, 58, 62, 63, 68, 69, 71, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 97, 101, 102, 104, 105, 107, 108, 110, 111, 112, 114, 115, 117, 118, 120, 121, 123, 125, 126, 127, 129, 131, 132, 134, 135, 136, 137, 138, 143, 159, 169, 181, 188, 189], "ef": [1, 7, 12, 57, 91, 92, 96], "hnsw": [1, 2, 5, 7], "might": [1, 2, 7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 31, 42, 46, 52, 56, 96], "fix": [1, 102, 105, 112, 154, 181], "big": [1, 8, 9, 13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 101, 156, 172, 177, 178, 183, 186, 187], "impact": 1, "even": [1, 3, 4, 7, 129, 158, 183, 185], "configur": [1, 2, 5, 7, 52, 96, 185], "cannot": [1, 127], "easili": [1, 2, 3, 4, 9, 155, 156, 158, 160, 161, 163, 173, 175, 181, 183, 186], "compar": [1, 4, 8, 13, 15, 16, 17, 18, 19, 20, 27, 33, 38, 43, 52, 56, 96, 101, 154, 159, 179], "research": 1, "showcas": [1, 4, 160], "what": [1, 2, 8, 152, 157, 163, 179, 183, 184], "expect": [1, 3, 4, 7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 27, 42, 52, 56, 66, 96, 150, 169, 171], "get": [1, 2, 3, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 33, 39, 44, 50, 52, 56, 96, 97, 101, 102, 105, 106, 109, 125, 129, 138, 143, 152, 156, 163, 164, 167, 168, 169, 171, 172, 174, 175, 176, 181, 183, 184, 185, 187], "without": [1, 3, 13, 15, 16, 17, 18, 19, 20, 25, 41, 47, 52, 54, 56, 96, 138, 159, 160, 161, 171, 172, 181, 184], "tune": 1, "hyper": 1, "practic": [1, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 161, 163, 172, 179, 181], "strongli": [1, 158, 183], "recommend": [1, 4, 8, 13, 14, 15, 16, 17, 18, 19, 52, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 102, 105, 114, 150, 158, 161, 164, 169, 181, 183, 186, 187], "them": [1, 3, 9, 13, 15, 16, 17, 18, 19, 20, 22, 27, 41, 46, 52, 56, 96, 150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 165, 167, 169, 171, 172, 178, 183, 184, 185, 186], "achiev": [1, 183], "qualiti": [1, 184], "tabl": [1, 4, 6, 39, 62, 153, 159, 172, 181, 185], "summar": [1, 158, 172, 181, 184], "smaller": [1, 13, 15, 16, 17, 18, 19, 20, 22, 23, 31, 33, 34, 41, 42, 52, 56, 96, 169, 172, 183, 187], "better": [1, 3, 4, 13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 152, 170, 172, 179, 181], "except": [1, 13, 15, 16, 17, 18, 19, 20, 22, 23, 31, 42, 52, 54, 56, 96, 158, 178], "recal": [1, 136, 173], "best": [1, 4, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 102, 105, 109, 137, 155, 169, 177, 181], "each": [1, 3, 6, 7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 27, 28, 31, 41, 42, 43, 44, 51, 52, 56, 69, 71, 96, 102, 104, 105, 112, 114, 115, 131, 132, 134, 135, 138, 152, 155, 157, 158, 159, 161, 162, 163, 165, 167, 169, 172, 173, 175, 178, 179, 181, 184, 188, 189], "highlight": [1, 39, 186], "bold": 1, "1m": 1, "m": [1, 2, 5, 12, 13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 57, 69, 70, 79, 80, 96, 159, 171, 172, 175, 178], "01": [1, 160], "39": 1, "43": 1, "00": [1, 184], "366": 1, "35": [1, 178], "62": 1, "31": 1, "23": [1, 183], "59": 1, "72": 1, "57": 1, "30": [1, 102, 105, 126, 176], "42": 1, "19": 1, "286": 1, "50": [1, 172, 176], "14": [1, 176], "605": 1, "51": 1, "612": 1, "33": 1, "27": 1, "94": 1, "13": [1, 7], "38": 1, "242": 1, "02": [1, 160], "307": 1, "40": 1, "85": [1, 176], "74": 1, "656": 1, "16": [1, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 171, 179], "446": 1, "77": 1, "24": [1, 184], "114": 1, "36": 1, "20": [1, 13, 15, 16, 17, 18, 19, 20, 28, 41, 52, 56, 69, 71, 96, 124, 175], "09": 1, "227": 1, "608": 1, "44": 1, "22": [1, 176], "26": 1, "208": 1, "715": 1, "15": [1, 8, 172, 176], "58": 1, "650": 1, "83": 1, "convert": [1, 8, 13, 15, 16, 17, 18, 19, 20, 33, 38, 45, 49, 52, 56, 58, 59, 64, 65, 69, 70, 91, 92, 96, 102, 105, 107, 108, 109, 112, 114, 115, 118, 120, 121, 123, 125, 126, 152, 153, 154, 155, 158, 159, 160, 161, 164, 181, 186], "per": [1, 5, 7, 13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96, 102, 105, 126, 127, 136, 137, 159, 178], "second": [1, 13, 15, 16, 17, 18, 19, 20, 46, 52, 54, 56, 96, 102, 105, 126, 129, 137, 138, 161, 171, 179, 183, 184, 187], "qp": 1, "dp": 1, "higher": [1, 7], "610": 1, "305": 1, "345": 1, "71": 1, "428": 1, "570": 1, "190": [1, 175], "70": 1, "3125": 1, "816": 1, "381": 1, "032": 1, "04": 1, "380": 1, "000": [1, 186], "152": 1, "216": 1, "033": 1, "34": 1, "604": 1, "664": [1, 169, 186], "241": 1, "002": 1, "90": [1, 175], "001": 1, "55": 1, "76": 1, "409": 1, "618": [1, 152], "122": 1, "101": 1, "211": 1, "192": [1, 13, 15, 16, 17, 18, 19, 20, 44, 52, 56, 96, 180, 184], "224": [1, 102, 105, 114, 152], "125": 1, "824": 1, "769": 1, "759": 1, "106": 1, "49": 1, "448": 1, "615": 1, "48": [1, 175], "111": 1, "620": 1, "435": 1, "200": [1, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 183], "398": 1, "481": 1, "64": [1, 2, 5, 9, 17, 52, 69, 70, 79, 80, 102, 105, 114, 152, 166, 186], "now": [1, 3, 4, 7, 8, 9, 150, 152, 160, 162, 171, 172, 173, 174, 175, 179, 181, 183, 184, 186], "elabor": 1, "first": [1, 7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 43, 46, 52, 54, 56, 58, 63, 65, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 102, 105, 108, 129, 136, 137, 138, 152, 155, 156, 157, 158, 159, 161, 167, 169, 171, 172, 174, 175, 176, 179, 184, 186, 187], "128": [1, 2, 5, 174], "choos": [1, 4, 127, 178, 181], "two": [1, 4, 7, 54, 102, 105, 114, 125, 138, 157, 158, 159, 161, 168, 171, 175, 176, 179, 185, 186], "reason": [1, 4, 7, 169, 181, 183, 186], "common": [1, 2, 4, 8, 9, 20, 32, 155, 158, 159, 163, 164, 167, 169, 171, 172, 173, 175, 176, 180, 181, 182, 185, 186, 187], "sme": 1, "wise": [1, 179], "break": [1, 150, 171], "point": [1, 4, 5, 102, 105, 114, 115, 153, 159, 163, 166, 175, 182, 184], "product": [1, 8, 181, 184, 185, 186], "system": [1, 13, 15, 16, 17, 18, 19, 20, 22, 23, 35, 41, 42, 52, 56, 96, 104, 184, 186, 188, 189], "structur": [1, 3, 7, 13, 15, 16, 17, 18, 19, 20, 27, 34, 43, 52, 56, 96, 102, 105, 117, 154, 158, 159, 161, 162, 164, 167, 170, 175, 177, 185, 186, 187, 188, 189], "94ee6627ee7f582e5e28124e78c3d2f9": 1, "49841760378680844": 1, "703959752118305": 1, "6920759535687985": 1, "10248648858410625": 1, "k": [1, 13, 15, 16, 17, 18, 19, 20, 47, 52, 56, 96, 136, 137, 175, 178, 187], "indic": [1, 2, 4, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 114, 117, 137, 158, 164, 188, 189], "do": [1, 2, 3, 4, 7, 9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 31, 40, 42, 46, 52, 54, 56, 66, 96, 102, 105, 114, 152, 155, 156, 157, 158, 161, 162, 165, 166, 167, 169, 171, 172, 174, 175, 178, 179, 181, 182, 183, 184, 187], "exhaust": [1, 7, 13, 15, 16, 17, 18, 19, 20, 28, 52, 56, 69, 71, 96], "instead": [1, 4, 7, 56, 104, 129, 162, 163, 165, 169, 171, 179, 186, 188, 189], "thei": [1, 3, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 66, 96, 101, 150, 157, 161, 163, 164, 168, 169, 171, 172, 175, 181, 183, 184], "maximum": [1, 7, 13, 15, 16, 17, 18, 19, 20, 28, 41, 52, 56, 69, 71, 96, 102, 104, 105, 125, 136, 169, 181], "slowest": 1, "were": 1, "ghz": 1, "amd": 1, "ryzen": 1, "threadripp": 1, "3960x": 1, "core": [1, 7, 9, 179, 183, 186], "processor": 1, "python": [1, 3, 13, 15, 16, 17, 18, 19, 20, 33, 38, 52, 56, 96, 102, 104, 105, 118, 151, 159, 161, 163, 165, 167, 169, 171, 172, 173, 176, 177, 179, 181, 186, 187, 188, 189], "besid": [1, 155, 176, 186], "client": [1, 2, 3, 5, 7, 8, 12, 13, 15, 16, 17, 18, 19, 20, 28, 52, 56, 57, 69, 71, 79, 81, 82, 84, 96, 160, 183, 187], "server": [1, 2, 5, 7, 8, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 91, 92, 96, 183, 187], "pattern": [1, 4, 9, 37, 104, 163, 173, 181, 183], "offici": [1, 2, 8], "docker": [1, 2, 5, 7, 13, 15, 16, 17, 18, 19, 20, 44, 52, 56, 96, 180, 184, 189], "imag": [1, 2, 5, 7, 9, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 101, 102, 105, 117, 129, 153, 157, 158, 159, 161, 162, 163, 166, 167, 169, 170, 171, 172, 173, 179, 184, 186, 187, 188, 189], "node": [1, 2, 5, 54], "gb": 1, "ram": 1, "alloc": 1, "That": [1, 152, 158, 159, 161, 163, 164, 166, 172, 177], "replica": [1, 184], "shard": 1, "did": 1, "opt": 1, "cluster": 1, "becaus": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 150, 152, 160, 175, 179, 183, 184], "mainli": [1, 54, 66, 150, 183], "aim": [1, 3, 186], "assess": 1, "capabl": [1, 4], "instanc": [1, 3, 7, 65, 101, 127], "overhead": [1, 181], "come": [1, 3, 8, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 156, 169, 172, 186, 188, 189], "side": [1, 2, 4, 13, 15, 16, 17, 18, 19, 20, 27, 28, 52, 56, 69, 71, 96, 102, 105, 125, 167, 175, 183, 186], "unless": [1, 159, 181, 184], "specif": [1, 2, 3, 4, 7, 13, 15, 16, 17, 18, 19, 20, 28, 35, 52, 56, 69, 71, 96, 104, 150, 158, 161, 162, 169], "more": [1, 2, 3, 4, 5, 7, 8, 13, 15, 16, 17, 18, 19, 20, 33, 40, 46, 52, 56, 66, 96, 104, 150, 151, 155, 156, 159, 163, 164, 165, 169, 171, 172, 174, 177, 179, 181, 182, 183, 184, 186, 187, 188, 189], "effici": [1, 4, 7, 66, 102, 105, 108, 110, 125, 172, 177, 186, 187, 188, 189], "own": [1, 102, 105, 114, 179, 186], "By": [1, 2, 3, 7, 13, 15, 16, 17, 18, 19, 20, 28, 34, 35, 38, 52, 56, 69, 71, 96, 104, 151, 161, 169, 174, 175, 178, 179], "vendor": [1, 3], "For": [1, 2, 3, 4, 7, 10, 13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 102, 152, 155, 156, 157, 158, 159, 161, 164, 165, 166, 168, 169, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 187], "ann": [1, 3, 13, 15, 16, 17, 18, 19, 20, 28, 52, 56, 69, 71, 96], "100": [1, 5, 102, 105, 117, 172, 175, 176, 184], "control": [1, 7, 8, 150, 169, 173], "accuraci": [1, 7], "bigger": 1, "lead": [1, 7, 164], "longer": [1, 4, 13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96, 102, 105, 125, 156], "accur": [1, 5, 7, 158], "slower": [1, 7, 13, 15, 16, 17, 18, 19, 20, 38, 52, 56, 96], "max": [1, 13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 137, 181, 186], "connect": [1, 4, 6, 7, 12, 52, 54, 56, 57, 86, 87, 91, 92, 96, 102, 105, 125, 180], "work": [1, 3, 4, 13, 15, 16, 17, 18, 19, 20, 22, 23, 33, 42, 52, 56, 96, 104, 129, 152, 153, 159, 161, 167, 169, 171, 174, 175, 177, 178, 179, 181, 183, 184, 185, 186, 187], "dataset": [1, 102, 104, 105, 114, 152], "intrins": 1, "dimension": [1, 2, 102, 105, 112, 114, 131, 165, 186], "while": [1, 7, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 152, 164, 175, 186, 187], "low": [1, 7, 150, 160], "final": [1, 3, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 46, 52, 54, 56, 96, 151, 152, 161, 176, 177, 183, 184], "full": [1, 3, 4, 8, 10, 13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96, 150, 152, 154, 157, 159, 163, 169, 181, 182, 183, 186, 187], "script": 1, "avail": [1, 4, 7, 66, 129, 150, 179, 184], "here": [1, 2, 4, 5, 7, 8, 129, 150, 151, 153, 157, 158, 159, 161, 169, 171, 172, 173, 174, 176, 179, 180, 181, 183, 184, 186], "fair": 1, "across": [1, 169, 181], "favour": 1, "benefit": [1, 4, 161], "wa": [1, 4, 7, 127, 156, 181, 186], "imposs": 1, "its": [1, 4, 16, 102, 105, 109, 114, 117, 125, 150, 155, 164, 169, 173, 179, 181, 182, 183, 185, 186], "definit": [1, 127, 152, 183], "vari": 1, "base": [1, 2, 3, 5, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 137, 143, 144, 145, 146, 147, 149, 150, 152, 156, 157, 161, 163, 172, 175, 176, 178, 183, 187], "principl": [1, 163, 169], "cover": [1, 186], "offer": [1, 56, 159, 172], "try": [1, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 104, 127, 155, 169], "crud": 1, "measur": [1, 136], "Not": [1, 176, 181], "speed": [1, 7, 13, 15, 16, 17, 18, 19, 20, 34, 52, 56, 96, 179, 186], "also": [1, 2, 3, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 43, 46, 52, 56, 96, 102, 150, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 171, 173, 176, 177, 178, 179, 180, 181, 183, 184, 186], "sinc": [1, 7, 102, 105, 114, 127, 129, 186], "make": [1, 2, 3, 4, 7, 13, 15, 16, 17, 18, 19, 20, 40, 41, 43, 52, 56, 66, 96, 102, 105, 114, 127, 157, 159, 163, 164, 169, 173, 175, 177, 179, 183, 184, 187], "sure": [1, 2, 3, 7, 13, 15, 16, 17, 18, 19, 20, 41, 43, 52, 56, 66, 96, 159, 179, 187], "allow": [1, 3, 4, 7, 8, 9, 48, 106, 109, 127, 150, 156, 159, 161, 163, 166, 169, 172, 175, 177, 181, 184, 186, 187], "suit": [1, 154], "case": [1, 3, 7, 13, 15, 16, 17, 18, 19, 20, 28, 33, 52, 56, 66, 69, 71, 96, 129, 158, 159, 163, 169, 178, 181, 184, 187], "built": [1, 8, 13, 15, 16, 17, 18, 19, 20, 25, 52, 56, 96, 159, 162, 164, 179, 187], "top": [1, 3, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 117, 136, 137, 167, 171, 172, 175, 178, 188, 189], "furthermor": [1, 13, 15, 16, 17, 18, 19, 20, 28, 52, 56, 69, 71, 96], "made": [1, 150, 154, 169, 186], "run": [1, 2, 4, 5, 7, 8, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 178, 179, 184, 185, 189], "contain": [1, 2, 3, 4, 7, 9, 13, 15, 16, 17, 18, 19, 20, 23, 26, 28, 31, 35, 41, 46, 51, 52, 56, 69, 71, 96, 102, 104, 105, 114, 117, 129, 152, 155, 157, 159, 161, 163, 165, 169, 171, 172, 175, 177, 180, 182, 186, 188, 189], "local": [1, 13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96, 163, 167, 180, 181, 186, 187, 188, 189], "network": [1, 2, 9, 16, 160, 169, 181, 184, 186, 187], "resourc": [1, 163, 179, 184], "those": [1, 2, 3, 4, 13, 15, 16, 17, 18, 19, 20, 35, 52, 56, 66, 96, 129, 156, 158, 161, 167, 169, 177], "much": [1, 13, 15, 16, 17, 18, 19, 20, 34, 52, 56, 96, 152, 156, 164, 165, 169, 172, 173, 183, 185], "possibl": [1, 164, 170], "grpc": [1, 13, 15, 16, 17, 18, 19, 20, 44, 52, 56, 96, 160, 180, 184], "http": [1, 2, 5, 7, 8, 13, 15, 16, 17, 18, 19, 20, 43, 44, 52, 54, 56, 69, 70, 91, 92, 96, 102, 104, 136, 156, 158, 159, 163, 164, 167, 180, 184, 188, 189], "batch": [1, 2, 3, 5, 7, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 31, 41, 42, 52, 56, 66, 96, 179], "re": [1, 7, 13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 96, 150, 153, 167, 172], "okai": [1, 172, 179, 184], "long": [1, 7, 17, 69, 70, 153, 179, 183, 186, 188, 189], "jina": [1, 3, 13, 15, 16, 17, 18, 19, 20, 40, 44, 52, 56, 96, 102, 104, 105, 125, 129, 158, 159, 160, 161, 164, 176, 180, 181, 187, 188, 189], "open": [1, 3, 8, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 104, 105, 107, 126, 151, 154, 160, 187], "constantli": 1, "accordingli": [1, 102, 105, 110, 114, 150], "believ": 1, "miss": [1, 101, 186, 187], "optim": [1, 4, 7, 174, 185, 186, 187], "g": [1, 2, 3, 4, 7, 8, 104, 161, 163, 168, 171, 172, 175, 180, 181, 186], "recent": 1, "upstream": [1, 181, 184], "avoid": [1, 4, 9, 132, 134, 135, 137, 150, 181], "unnecessari": [1, 181], "step": [1, 4, 9, 13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 66, 96, 152, 169, 181, 182, 183, 184, 185], "feel": [1, 4, 159], "free": [1, 54, 151, 154], "rais": [1, 13, 14, 15, 16, 17, 18, 19, 20, 28, 52, 54, 56, 58, 63, 65, 68, 69, 71, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 127, 164], "pr": [1, 136], "issu": [1, 129, 179], "your": [1, 3, 4, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 35, 40, 42, 52, 56, 96, 102, 104, 105, 114, 152, 155, 156, 159, 161, 163, 164, 169, 174, 175, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189], "contribut": [1, 3], "yet": [1, 186], "variou": [1, 54], "milvu": 1, "current": [1, 13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 96, 102, 105, 114, 138], "doe": [1, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 102, 104, 105, 114, 164, 169, 173, 174, 176, 183, 184], "integr": [1, 9, 150, 160, 169, 183, 186, 187], "pinecon": 1, "soon": [1, 186], "ll": 1, "onc": [1, 13, 15, 16, 17, 18, 19, 20, 46, 51, 52, 56, 96, 165, 169, 172, 178], "faiss": 1, "annoi": [1, 183], "scann": 1, "librari": [1, 54, 104, 129, 153, 169, 186, 187], "actual": [1, 25, 54, 66, 163, 188, 189], "itself": [1, 4, 7, 13, 15, 16, 17, 18, 19, 20, 25, 33, 36, 44, 52, 56, 96, 102, 105, 107, 108, 109, 110, 111, 114, 115, 117, 118, 125, 126, 150, 171, 173, 175, 178, 181, 183], "intern": [1, 13, 15, 16, 17, 18, 19, 20, 35, 52, 56, 96, 102, 105, 108], "hope": [1, 179], "help": [1, 7, 24, 50, 104, 152, 161, 163, 164, 169, 183, 187], "select": [1, 8, 159, 160, 171, 172, 176], "depend": [1, 4, 7, 13, 15, 16, 17, 18, 19, 20, 28, 41, 46, 52, 56, 69, 71, 96, 152, 157, 169, 174, 178, 179, 180, 181, 182, 183, 185, 187], "need": [1, 2, 3, 5, 6, 7, 8, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 150, 152, 155, 156, 158, 159, 160, 161, 162, 163, 169, 172, 174, 176, 177, 179, 181, 183, 184, 185, 187], "mai": [1, 4, 8, 9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 40, 42, 52, 56, 96, 102, 104, 105, 108, 110, 125, 129, 152, 156, 159, 162, 167, 169, 171, 172, 173, 175, 181, 184, 185, 186, 188, 189], "prefer": [1, 169], "fewer": [1, 7], "enjoi": [1, 3, 7, 161], "latenc": [1, 160, 181], "sai": [1, 9, 162, 163, 169, 175, 178, 179, 181, 183, 184, 187], "less": [1, 7, 129, 150, 169, 176, 181], "fit": [1, 3, 4, 6, 9, 54, 169, 174, 177, 178, 186], "care": [1, 155], "figur": [1, 9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 43, 52, 56, 96, 160, 181, 186], "show": [1, 7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 33, 35, 40, 42, 43, 44, 52, 56, 96, 102, 105, 117, 152, 160, 164, 172, 173, 181, 184], "variat": 1, "w": [1, 13, 15, 16, 17, 18, 19, 20, 44, 52, 56, 96, 102, 105, 114, 176], "accord": [1, 13, 15, 16, 17, 18, 19, 20, 23, 31, 52, 56, 96, 102, 105, 109, 131, 172, 178], "red": [1, 101, 172], "dash": 1, "line": [1, 37, 104, 151, 152, 159, 184], "repres": [1, 13, 15, 16, 17, 18, 19, 20, 35, 45, 47, 49, 51, 52, 54, 56, 96, 102, 104, 105, 109, 116, 121, 123, 129, 137, 138, 150, 153, 155, 156, 157, 158, 159, 161, 163, 167, 171, 172, 186, 187, 188, 189], "threshold": [1, 7], "300": 1, "omit": 1, "left": [1, 13, 15, 16, 17, 18, 19, 20, 27, 39, 41, 46, 52, 56, 62, 96, 102, 105, 117, 152, 161, 165, 167, 175, 178, 184, 188, 189], "plot": [1, 12, 13, 15, 16, 17, 18, 19, 20, 52, 56, 96, 102, 105, 172, 184, 185], "right": [1, 13, 15, 16, 17, 18, 19, 20, 27, 43, 52, 54, 56, 96, 102, 105, 125, 157, 161, 165, 175, 178, 179], "too": [1, 8, 152, 172, 173, 177, 178, 183], "slow": [1, 3, 4, 9, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 66, 96], "fast": [1, 7, 8, 13, 16, 52, 96, 186, 187], "choic": 1, "append": [1, 3, 4, 12, 13, 14, 15, 16, 17, 18, 19, 20, 43, 52, 56, 57, 58, 63, 64, 67, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 157, 168, 170, 173, 175], "insert": [1, 3, 7, 12, 13, 14, 15, 16, 17, 18, 19, 52, 56, 57, 58, 63, 64, 67, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96], "matter": 1, "moreov": [1, 4, 181], "monolith": [1, 184, 186], "fastest": [1, 181], "trade": 1, "off": [1, 4, 6, 7, 56, 86, 87, 102, 105, 125], "between": [1, 4, 7, 102, 104, 105, 110, 114, 131, 132, 134, 135, 155, 166, 169, 176, 181, 186, 188, 189], "term": [1, 156], "observ": [1, 131, 155, 157], "highest": [1, 7], "compos": [2, 5, 7, 54], "yml": [2, 5, 7], "co": [2, 104], "environ": [2, 7, 129, 184, 185, 187], "xpack": 2, "enabl": [2, 24, 30, 59, 70, 75, 87, 92, 150, 183, 185, 187], "fals": [2, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 28, 31, 33, 37, 40, 41, 42, 43, 44, 52, 54, 56, 69, 70, 71, 96, 97, 101, 102, 104, 105, 108, 110, 112, 114, 115, 117, 124, 125, 126, 127, 129, 137, 143, 155, 158, 159, 164, 171, 172, 173, 175, 176, 180, 181, 182], "discoveri": 2, "type": [2, 4, 8, 9, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 56, 58, 59, 62, 63, 64, 65, 68, 69, 70, 71, 74, 75, 78, 79, 81, 82, 84, 86, 89, 90, 91, 92, 95, 96, 97, 98, 100, 102, 104, 105, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 131, 132, 134, 135, 136, 137, 138, 141, 142, 143, 145, 146, 149, 155, 159, 160, 161, 163, 167, 169, 171, 172, 173, 175, 176, 177, 180, 181, 182, 183, 186, 187], "port": [2, 5, 7, 12, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 57, 79, 80, 91, 92, 96, 102, 105, 129, 180, 184], "9200": [2, 17, 69, 70], "assum": [2, 5, 7, 13, 15, 16, 17, 18, 19, 20, 21, 33, 52, 56, 96, 102, 105, 110, 114, 169, 178, 179], "address": [2, 5, 7, 52, 96, 129, 164, 180, 184], "localhost": [2, 5, 7, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 69, 70, 79, 80, 91, 92, 96, 180], "creation": [2, 181], "layer": [2, 7, 174], "disabl": [2, 39], "plain": [2, 102, 164, 169, 178, 181], "pass": [2, 4, 6, 7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 27, 35, 36, 42, 52, 54, 56, 96, 102, 104, 105, 118, 127, 150, 162, 169, 181, 186], "host": [2, 5, 7, 12, 13, 15, 16, 17, 18, 19, 20, 43, 44, 52, 56, 57, 69, 70, 79, 80, 91, 92, 96, 180, 184], "api_id": 2, "ca_cert": 2, "insid": [2, 3, 4, 7, 13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96, 102, 105, 114, 164, 169, 172, 173, 178, 179, 180, 183], "es_config": [2, 12, 17, 57, 69, 70], "constructor": [2, 3, 4, 15, 162, 164, 168, 169], "exampl": [2, 6, 13, 15, 16, 17, 18, 19, 20, 33, 51, 52, 56, 66, 96, 101, 102, 105, 114, 129, 136, 138, 152, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 185, 186], "prq7je_hj4i4auh": 2, "hq": 2, "hanxiao": [2, 152, 165], "http_ca": 2, "crt": 2, "certif": 2, "password": 2, "etc": [2, 3, 138, 150, 161, 177, 187], "index_nam": [2, 12, 17, 57, 69, 70], "build": [2, 5, 7, 8, 26, 39, 102, 105, 118, 121, 123, 154, 158, 159, 165, 169, 171, 173, 181, 183, 186, 187], "previous": [2, 7, 52, 56, 96, 150], "old_stuff": 2, "_": [2, 173], "1000": [2, 152, 154, 172, 182], "da2": [2, 173, 175, 178], "length": [2, 3, 4, 5, 8, 13, 15, 16, 17, 18, 19, 20, 23, 27, 31, 52, 56, 96, 102, 105, 125, 155, 156, 157, 158, 162, 171, 172, 173, 174, 175, 176, 180, 181, 182, 188, 189], "2000": 2, "homogen": [2, 4, 8, 155, 158, 171, 172, 173, 175, 176, 180, 181, 182], "true": [2, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 27, 33, 35, 37, 39, 40, 41, 43, 52, 54, 56, 62, 86, 90, 96, 101, 102, 104, 105, 114, 116, 117, 127, 129, 138, 158, 159, 164, 165, 169, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185], "attribut": [2, 4, 8, 9, 13, 15, 16, 17, 18, 19, 20, 21, 23, 28, 29, 31, 43, 46, 50, 51, 52, 56, 69, 71, 96, 102, 105, 112, 116, 125, 155, 158, 159, 161, 162, 165, 167, 168, 169, 172, 173, 175, 176, 177, 180, 181, 182, 186, 188, 189], "uniqu": [2, 4, 8, 13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96, 102, 105, 109, 155, 158, 164, 167, 171, 172, 173, 175, 176, 180, 181, 182, 186, 188, 189], "empti": [2, 3, 4, 5, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 31, 43, 52, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 97, 102, 105, 117, 143, 155, 158, 159, 163, 165, 169, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186], "ndarrai": [2, 3, 8, 9, 11, 13, 15, 16, 17, 18, 19, 20, 25, 28, 33, 37, 52, 56, 96, 102, 104, 105, 110, 112, 114, 120, 124, 126, 130, 131, 132, 134, 135, 137, 139, 141, 150, 153, 154, 158, 159, 161, 163, 165, 166, 167, 169, 174, 175, 176, 177, 178, 185, 186, 188, 189], "str": [2, 3, 4, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 31, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 50, 51, 52, 56, 58, 59, 62, 65, 69, 70, 71, 74, 75, 79, 80, 81, 82, 84, 86, 87, 91, 92, 96, 97, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 114, 117, 118, 119, 120, 121, 124, 125, 126, 127, 129, 131, 134, 135, 138, 143, 144, 145, 146, 155, 158, 159, 162, 164, 171, 172, 173, 175, 176, 180, 181, 182, 183, 188, 189], "14890289": 2, "3168339": 2, "03050802": 2, "06785086": 2, "94719299": 2, "32490566": 2, "pre": [2, 13, 15, 16, 17, 18, 19, 20, 28, 41, 52, 56, 69, 71, 96, 127, 160, 169, 181, 184], "dsl": 2, "int": [2, 3, 7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 28, 31, 37, 41, 42, 43, 44, 47, 50, 52, 56, 58, 59, 62, 63, 68, 69, 70, 71, 73, 74, 78, 79, 80, 82, 84, 86, 90, 91, 92, 95, 96, 97, 102, 103, 104, 105, 107, 109, 110, 112, 114, 115, 117, 119, 124, 125, 126, 127, 129, 136, 137, 138, 143, 158, 159, 167, 172, 175, 176, 183, 188, 189], "l2_norm": 2, "method": [2, 3, 4, 7, 13, 15, 16, 17, 18, 19, 20, 27, 33, 46, 51, 52, 56, 63, 66, 68, 73, 78, 90, 95, 96, 102, 104, 105, 118, 124, 129, 136, 151, 159, 161, 164, 168, 169, 175, 181, 184], "Such": [2, 5, 7, 179, 180], "leverag": [2, 3, 4, 8, 66, 156, 159, 160, 161, 162, 164, 169, 178, 179, 180, 183], "flag": 2, "index_text": [2, 12, 17, 57, 69, 70], "sever": [2, 4], "pizza": 2, "person": [2, 54], "eat": 2, "restaur": 2, "pizza_doc": 2, "part": [2, 8, 54, 163, 169, 172], "mostli": [2, 7], "applic": [2, 152, 184, 186], "split": [2, 13, 15, 16, 17, 18, 19, 20, 23, 31, 52, 54, 56, 96, 156], "group": [2, 12, 13, 15, 16, 17, 18, 19, 20, 23, 35, 52, 56, 96, 104, 167, 172], "item": [2, 3, 13, 14, 15, 16, 17, 18, 19, 52, 54, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 102, 105, 110, 136, 152, 172, 183], "32": [2, 9, 13, 15, 16, 17, 18, 19, 20, 23, 31, 42, 52, 56, 96, 160, 174, 179], "tag_indic": [2, 12, 17, 57, 69, 70], "food_typ": 2, "italian": 2, "spanish": 2, "food": 2, "cheap": 2, "french": 2, "expens": [2, 7], "chines": 2, "noddl": 2, "quit": [2, 157, 179, 183, 186], "results_cheap": 2, "results_italian": 2, "tags__food_typ": 2, "don": [2, 8, 66, 104, 156, 164, 165, 172, 184], "hostnam": [2, 5, 7], "dict": [2, 3, 4, 7, 13, 15, 16, 17, 18, 19, 20, 23, 28, 31, 35, 37, 40, 41, 44, 50, 52, 55, 56, 58, 59, 65, 69, 70, 71, 74, 75, 79, 80, 81, 82, 86, 87, 91, 92, 96, 101, 102, 103, 104, 105, 118, 119, 125, 127, 129, 155, 159, 164, 167, 172, 176, 181, 183, 186], "cloud_id": 2, "api_kei": 2, "class": [2, 3, 4, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 136, 143, 144, 145, 146, 147, 158, 160, 161, 162, 169, 171, 183, 184, 188, 189], "object": [2, 3, 4, 7, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 67, 69, 70, 71, 76, 79, 80, 81, 86, 87, 91, 92, 93, 96, 97, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 138, 144, 146, 147, 150, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 176, 177, 178, 181, 185, 186], "whether": [2, 7, 13, 15, 16, 17, 18, 19, 20, 28, 52, 54, 56, 69, 71, 96, 102, 104, 105, 112, 153, 162, 167, 174], "batch_siz": [2, 9, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 31, 41, 42, 44, 52, 56, 57, 69, 70, 96, 124, 172, 174, 178, 179], "handl": [2, 3, 66, 108, 151, 154, 161, 166, 169, 183, 187], "refresh": 2, "plural": 2, "compli": 2, "seen": [3, 161], "previou": [3, 13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 136, 152, 167, 181, 188, 189], "chapter": [3, 150, 158, 159, 161, 164, 167, 169, 171, 172, 173, 175, 176, 183, 185, 186], "sql": [3, 62], "nosql": 3, "motiv": [3, 153, 186], "board": 3, "advanc": [3, 8, 24, 30, 48, 106, 151, 168, 177, 186, 187], "languag": [3, 13, 15, 16, 17, 18, 19, 20, 28, 52, 56, 69, 71, 96, 156, 160, 163, 176, 181], "power": [3, 25, 61, 77, 88, 171, 177], "well": [3, 7, 150, 161, 164, 167, 183, 185], "design": [3, 102, 105, 108, 110, 125, 159, 161, 165, 169, 175, 181, 187], "maintain": [3, 163, 169], "plug": 3, "ai": [3, 102, 158, 159, 160, 164, 187], "ecosystem": [3, 161, 169, 187], "hub": [3, 104, 158, 160, 161, 180], "clip": [3, 161, 167, 187, 188, 189], "servic": [3, 8, 13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96, 161, 183, 186, 187], "finetun": [3, 161, 186], "synergi": 3, "after": [3, 7, 8, 13, 15, 16, 17, 18, 19, 20, 25, 52, 54, 56, 96, 102, 105, 107, 108, 109, 110, 111, 114, 115, 125, 126, 136, 152, 158, 159, 174, 175, 181, 183, 184], "extens": [3, 13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 129, 181, 186], "conveni": 3, "promis": [3, 13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96], "experi": [3, 177, 184, 185, 186, 187], "regular": [3, 4, 176, 184, 188, 189], "extra": [3, 4, 13, 15, 16, 17, 18, 19, 20, 35, 36, 41, 52, 56, 96, 102, 105, 118, 127, 150, 169, 184, 185, 187], "learn": [3, 8, 152, 154, 158, 159, 160, 161, 164, 165, 167, 172, 177, 183, 186, 187], "walk": 3, "through": [3, 158, 161, 183], "how": [3, 7, 8, 13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 102, 105, 114, 152, 158, 159, 160, 161, 162, 167, 169, 172, 173, 177, 179, 181, 183, 184, 186, 187], "mydocstor": 3, "look": [3, 4, 102, 105, 114, 152, 157, 159, 165, 174, 175, 179, 181, 183, 186], "config": [3, 12, 13, 16, 52, 56, 57, 79, 84, 91, 92, 96, 102, 127], "start": [3, 13, 14, 15, 16, 17, 18, 19, 20, 43, 51, 52, 56, 58, 63, 65, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 102, 105, 110, 114, 158, 167, 172, 184, 187, 188, 189], "go": [3, 4, 158, 169, 172, 181, 183, 188, 189], "arrai": [3, 11, 102, 104, 105, 110, 114, 122, 125, 131, 132, 134, 135, 137, 138, 149, 157, 163, 164, 165, 169, 170, 171, 176, 178, 181, 183, 186, 188, 189], "sub": [3, 13, 15, 16, 17, 18, 19, 20, 43, 51, 52, 56, 96, 104, 156, 157, 158, 159, 161, 162, 163, 167, 168, 188, 189], "four": [3, 186, 188, 189], "file": [3, 6, 13, 15, 16, 17, 18, 19, 20, 33, 34, 35, 37, 38, 43, 52, 54, 56, 96, 102, 104, 105, 107, 108, 111, 114, 115, 126, 129, 150, 153, 156, 159, 163, 166, 167, 169, 179, 181, 188, 189], "readm": [3, 156], "md": 3, "These": [3, 7, 13, 15, 16, 17, 18, 19, 20, 27, 31, 36, 52, 56, 66, 96, 102, 105, 114, 164, 177, 183, 188, 189], "consist": [3, 7, 13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 96, 154, 161, 167, 186, 188, 189], "necessari": [3, 59, 70, 75, 87, 92, 159], "addition": [3, 13, 52, 96], "search": [3, 7, 8, 13, 15, 16, 17, 18, 19, 20, 28, 47, 52, 56, 69, 71, 96, 152, 156, 160, 161, 165, 167, 187, 188, 189], "anoth": [3, 13, 15, 16, 17, 18, 19, 20, 22, 23, 41, 42, 52, 56, 96, 97, 102, 143, 158, 159, 163, 165, 166, 173, 178], "should": [3, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 28, 39, 42, 52, 56, 66, 96, 102, 104, 105, 112, 117, 125, 127, 150, 152, 160, 161, 165, 169, 175, 178, 179, 186, 187], "basegetsetdelmixin": [3, 57, 61, 64, 66, 72, 77, 82, 88, 94], "getsetdelmixin": [3, 57, 58, 61, 69, 72, 74, 77, 79, 82, 86, 88, 91, 94], "def": [3, 7, 9, 101, 162, 179, 183, 184], "_get_doc_by_id": [3, 66], "self": [3, 13, 15, 16, 17, 18, 19, 20, 23, 27, 31, 41, 43, 52, 54, 56, 96, 97, 102, 143, 179, 184], "_id": [3, 67], "_del_doc_by_id": [3, 66], "_set_doc_by_id": [3, 66], "_load_offset2id": 3, "_save_offset2id": 3, "five": [3, 156], "correspond": [3, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 129, 155, 158, 159, 162, 163, 167, 178, 188, 189], "logic": [3, 46, 158, 171, 176, 183, 184], "string": [3, 7, 13, 15, 16, 17, 18, 19, 20, 28, 33, 35, 38, 41, 44, 51, 52, 56, 69, 71, 91, 92, 96, 102, 104, 105, 107, 118, 126, 129, 131, 163, 164, 167, 169, 171, 172, 174, 176, 181, 183, 188, 189], "essenti": 3, "ensur": [3, 4, 169], "offset2id": [3, 57, 62, 64, 66, 67], "map": [3, 4, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 35, 42, 50, 52, 56, 69, 70, 96, 101, 102, 104, 105, 125, 155, 159, 161, 162, 164, 167, 179, 188, 189], "behaviour": [3, 101], "inherit": [3, 15, 18, 124, 166], "order": [3, 7, 13, 15, 16, 17, 18, 19, 20, 23, 31, 46, 52, 56, 96, 101, 129, 136, 172], "keep": [3, 7, 56, 66, 102, 105, 126, 161, 162, 164, 178, 184], "mind": [3, 66, 161, 178], "upper": [3, 7], "upsert": 3, "remov": [3, 12, 13, 14, 15, 16, 17, 18, 19, 52, 56, 57, 58, 63, 64, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 129, 169, 171, 186], "old": [3, 129, 150, 186, 187], "recommened": 3, "_get_docs_by_id": [3, 66], "_del_docs_by_id": [3, 66], "_clear_storag": [3, 66], "_set_doc_value_pair": 3, "_set_doc_value_pairs_nest": 3, "_set_docs_by_id": [3, 66], "signatur": 3, "fine": [3, 150], "grain": [3, 150], "frequent": [3, 7, 102, 105, 108, 110, 125, 164, 167, 169, 181, 186], "fulli": [3, 7, 9, 13, 15, 16, 17, 18, 19, 20, 23, 27, 31, 52, 56, 96, 102, 105, 114, 163, 172], "option": [3, 7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 31, 33, 35, 37, 39, 41, 42, 43, 44, 47, 51, 52, 56, 58, 59, 63, 68, 69, 70, 71, 73, 74, 78, 79, 80, 84, 86, 87, 90, 91, 92, 95, 96, 101, 102, 103, 104, 105, 110, 114, 117, 118, 119, 120, 124, 125, 127, 129, 136, 137, 138, 143, 144, 145, 146, 172, 180, 183, 185], "refer": [3, 7, 10, 13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 159, 169, 172, 173, 180, 181], "out": [3, 8, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 31, 42, 52, 54, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 158, 161, 165, 169, 181, 187], "iter": [3, 13, 14, 15, 16, 17, 18, 19, 20, 23, 37, 42, 51, 52, 56, 58, 63, 68, 69, 73, 74, 78, 79, 82, 84, 86, 90, 91, 95, 96, 104, 173, 179, 186], "union": [3, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 33, 34, 35, 37, 38, 41, 42, 52, 56, 69, 70, 71, 86, 87, 96, 102, 103, 104, 105, 107, 108, 111, 114, 118, 124, 125, 126, 127, 131, 137], "type_check": 3, "basesequencelikemixin": [3, 57, 63, 64, 68, 73, 78, 84, 90, 95], "sequencelikemixin": [3, 57, 58, 63, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95], "__eq__": 3, "__contains__": 3, "x": [3, 9, 13, 15, 16, 17, 18, 19, 20, 21, 52, 56, 96, 101, 102, 105, 114, 131, 137, 138, 150, 159, 162, 167, 169, 181, 184, 186, 187, 188, 189], "__repr__": 3, "__add__": 3, "custom": [3, 6, 13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 101, 175], "overrid": [3, 7, 13, 15, 16, 17, 18, 19, 20, 28, 40, 52, 56, 66, 96, 101, 175], "last": [3, 4, 7, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 31, 42, 43, 52, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 102, 105, 114, 117, 137, 152, 155, 157, 158, 161, 171, 172, 175, 179], "__len__": 3, "reli": [3, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 168, 171, 179, 186], "__iter__": 3, "standard": [3, 102, 105, 114, 159, 161], "mutablesequ": [3, 14, 68], "see": [3, 4, 7, 8, 13, 16, 19, 52, 56, 96, 102, 129, 152, 157, 159, 161, 163, 164, 167, 170, 171, 173, 175, 176, 177, 179, 183, 185, 186, 187], "dataclass": [3, 4, 11, 102, 105, 116, 149, 160, 162, 186], "basebackendmixin": [3, 57, 59, 64, 65, 70, 75, 80, 87, 92], "documentarraysourcetyp": [3, 16], "mydocstoreconfig": 3, "config1": 3, "config2": 3, "config3": 3, "backendmixin": [3, 57, 58, 59, 69, 70, 74, 75, 79, 80, 86, 87, 91, 92], "_init_storag": 3, "_doc": [3, 16], "kwarg": [3, 13, 14, 15, 16, 17, 18, 19, 20, 23, 26, 27, 28, 33, 34, 35, 36, 37, 38, 40, 41, 44, 52, 54, 56, 69, 71, 96, 97, 102, 104, 105, 118, 124, 136, 143, 169, 175, 184], "super": [3, 163, 164, 187], "veri": [3, 4, 7, 9, 13, 15, 16, 17, 18, 19, 20, 34, 52, 56, 96, 150, 152, 159, 165, 172, 173, 179, 183, 184, 186], "copi": [3, 16, 54, 97, 102, 127, 143, 158, 175, 178], "behavior": [3, 4, 13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96, 150, 162, 164, 169, 173, 175], "expos": [3, 8, 184], "argument": [3, 7, 13, 14, 15, 16, 17, 18, 19, 20, 27, 41, 52, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 102, 104, 105, 114, 127, 159, 162, 164, 169, 173, 175, 178, 181], "init_storag": 3, "pars": [3, 4, 55, 102, 105, 118, 127, 169], "either": [3, 4, 7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 41, 42, 51, 52, 56, 96, 102, 105, 114, 126, 131, 134, 135, 163, 176, 178, 180, 184, 185, 188, 189], "within": [3, 7, 13, 15, 16, 17, 18, 19, 20, 47, 52, 56, 96, 154], "typevar": [3, 101, 162], "input": [3, 4, 13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 28, 42, 52, 56, 69, 71, 96, 102, 105, 114, 127, 129, 138, 169, 171, 174, 183, 186], "mydocumentstorearraytyp": 3, "findmixin": [3, 12, 20, 28, 57, 58, 60, 69, 71, 74, 76, 79, 81, 86, 91, 93], "_find_similar_vector": 3, "_find": [3, 28], "elasticarraytyp": 3, "given": [3, 7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 41, 42, 43, 52, 56, 69, 71, 91, 95, 96, 102, 104, 105, 114, 117, 156, 159, 161, 162, 163, 164, 174, 175, 176, 178, 181], "otherwis": [3, 7, 8, 13, 15, 16, 17, 18, 19, 20, 28, 40, 43, 52, 54, 56, 69, 71, 96, 102, 105, 107, 114, 159, 184], "closest": [3, 13, 15, 16, 17, 18, 19, 20, 28, 52, 56, 69, 71, 96, 178], "abc": [3, 20, 58, 65, 66, 69, 74, 86, 91], "__all__": 3, "storagemixin": [3, 13, 17, 19, 52, 56, 57, 58, 69, 74, 79, 86, 91, 96], "past": 3, "modul": [3, 7, 149, 159, 161, 187], "content": [3, 13, 15, 16, 17, 18, 19, 40, 52, 56, 96, 103, 104, 111, 119, 149, 164, 165, 166, 167, 173, 176], "documentarraymydocstor": 3, "__new__": [3, 17, 52, 96], "cl": [3, 101], "arg": [3, 13, 14, 15, 16, 17, 18, 19, 20, 23, 26, 33, 36, 37, 40, 52, 53, 54, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 102, 104, 105, 118, 124, 150], "almost": [3, 4, 161], "allmixin": [3, 12, 16, 20, 102, 105, 143, 145], "basedocumentarrai": [3, 11, 12, 14, 16], "documentarraylik": [3, 13, 15, 16, 17, 18, 19, 20, 27, 38, 52, 56, 96], "elif": 3, "documentarrayinmemori": [3, 8, 11, 12, 15, 18, 19], "done": [3, 9, 163, 179, 181, 183, 184], "abl": [3, 8], "welcom": 3, "back": [3, 4, 13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 42, 44, 52, 56, 96, 150, 152, 153, 159, 172, 181, 183, 187], "least": [3, 152, 172], "unit": [3, 160, 161, 163], "test_advance_index": 3, "test_sequ": 3, "test_construct": 3, "pleas": [3, 10, 13, 15, 16, 17, 18, 19, 20, 23, 33, 41, 42, 52, 56, 66, 96, 102, 105, 114, 150, 164, 169, 172, 180, 181, 183, 185], "overload": 3, "readi": [3, 160, 169, 179, 181, 184, 186, 187], "commit": [3, 4, 56, 58, 62, 86, 90], "live": [4, 186, 187], "redi": 4, "extern": [4, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 150, 164, 184], "switch": [4, 152, 169, 177, 178, 184], "idiom": [4, 8, 161, 186, 187], "take": [4, 9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 127, 152, 160, 179, 183], "simpl": [4, 7, 104, 151, 153, 159, 160, 161, 166, 168, 172, 174, 178, 179, 181, 186], "db": [4, 6, 7, 8, 13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "multimod": [4, 101, 102, 105, 158, 159, 160, 172, 186, 187], "documentarraysqlit": [4, 11, 12, 56], "table_nam": [4, 6, 12, 56, 57, 86, 87, 89], "documentarraysqlite97c8c833586444a89272ff0ff4287edb": 4, "serialize_config": [4, 6, 7, 12, 13, 52, 56, 57, 58, 59, 79, 80, 81, 86, 87, 91, 92, 96], "conn_config": [4, 6, 12, 56, 57, 86, 87], "journal_mod": [4, 6, 12, 56, 57, 86, 87], "synchron": [4, 6, 12, 56, 57, 86, 87], "modifi": [4, 13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 42, 44, 52, 54, 56, 96, 164, 166, 179], "statement": 4, "context": [4, 171, 186], "manag": [4, 184], "properli": 4, "save": [4, 8, 12, 13, 15, 16, 17, 18, 19, 20, 32, 33, 34, 35, 36, 38, 43, 47, 52, 56, 64, 67, 96, 102, 105, 107, 108, 111, 114, 126, 153, 178, 179, 181, 184], "unexpect": [4, 164], "yield": [4, 13, 15, 16, 17, 18, 19, 20, 22, 23, 31, 42, 51, 52, 56, 96, 104, 169, 173, 179, 181], "inaccess": 4, "ident": [4, 7, 13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96, 164, 173, 175], "emb": [4, 7, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 52, 56, 96, 102, 105, 124, 161, 163, 165, 166, 171, 178, 187], "plot_embed": [4, 12, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 174, 182, 185], "box": [4, 8, 161], "There": [4, 7, 9, 159, 163, 179, 186], "wai": [4, 13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 96, 158, 159, 161, 164, 171, 172, 177, 179, 183, 185], "initi": [4, 7, 13, 15, 16, 17, 18, 19, 20, 47, 52, 56, 91, 92, 96, 102, 164], "4477814032": 4, "alia": [4, 54, 65, 91, 92, 96], "style": [4, 39, 104, 184, 185], "explicit": 4, "Of": [4, 171, 183], "cours": [4, 156, 171, 183], "former": [4, 158, 169], "sqliteconfig": [4, 11, 12, 16, 56, 57, 86, 87], "cfg": 4, "test": [4, 5, 9, 101, 150, 158, 159, 162, 179, 187], "flexibl": 4, "error": [4, 175, 183], "prone": 4, "relev": [4, 136, 188, 189], "exact": [4, 19, 56, 187], "scan": [4, 12, 52, 57, 79, 82, 152, 173], "over": [4, 5, 9, 13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 104, 127, 150, 168, 169, 172, 175, 181, 186], "thorugh": 4, "detail": [4, 10, 13, 16, 19, 52, 56, 96, 102, 104, 150, 152, 155, 159, 169, 174, 183, 184, 186], "explan": [4, 7, 180], "found": [4, 7, 129, 159, 169, 181, 183, 184, 186], "problem": [4, 9, 152, 178, 179, 183], "temp3": 4, "text": [4, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 28, 39, 52, 54, 56, 58, 59, 69, 70, 71, 96, 101, 102, 103, 104, 105, 108, 110, 112, 119, 127, 153, 158, 159, 161, 163, 164, 165, 166, 167, 169, 171, 173, 174, 175, 176, 180, 181, 183, 186, 187, 188, 189], "hello": [4, 13, 15, 16, 17, 18, 19, 20, 44, 52, 54, 56, 96, 102, 151, 155, 156, 159, 163, 164, 169, 171, 173, 180, 181, 183, 186], "len": [4, 159, 169, 179, 181, 182, 183, 186], "output": [4, 13, 15, 16, 17, 18, 19, 20, 22, 23, 35, 42, 43, 47, 52, 56, 96, 102, 105, 112, 114, 117, 129, 150, 156, 169, 174, 183, 184, 185, 186], "realli": [4, 159, 169], "date": 4, "sens": [4, 7, 102, 105, 114, 157, 175, 183], "speak": 4, "alreadi": [4, 13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96, 172, 177, 182], "written": [4, 13, 15, 16, 17, 18, 19, 20, 25, 52, 56, 96, 156, 180, 184], "prove": 4, "snippet": [4, 8, 160, 161, 181], "increas": [4, 129, 186], "simpli": [4, 7, 152, 154, 156, 158, 159, 163, 166, 169, 171, 172, 174, 175, 177, 178, 181, 183, 184], "put": [4, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 117, 152, 157, 158, 159, 161, 165, 186], "meta": [4, 161, 188, 189], "sync": 4, "immedi": [4, 179, 184], "costli": 4, "consequ": [4, 184], "block": [4, 9, 172, 179, 184, 186], "solv": [4, 159, 161, 179], "refactor": [4, 150, 160, 184, 186], "temp4": 4, "correct": [4, 169, 175, 181], "home": 4, "messag": [4, 13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 102, 105, 120, 164, 169, 173, 181], "write": [4, 155, 178, 184, 187], "row": [4, 13, 15, 16, 17, 18, 19, 20, 21, 52, 56, 96, 131, 132, 134, 135, 137, 138, 155, 159, 178, 186], "below": [4, 7, 159, 167, 168, 172, 179, 180, 181, 184, 185, 186], "ani": [4, 7, 13, 15, 16, 17, 18, 19, 20, 23, 31, 52, 54, 56, 69, 70, 96, 102, 104, 105, 108, 110, 114, 118, 125, 127, 129, 138, 150, 158, 159, 163, 167, 171, 172, 176, 180, 183, 184, 188, 189], "any_store_beyond_in_memori": 4, "d": [4, 5, 9, 102, 105, 125, 129, 158, 159, 160, 163, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 178, 179, 180, 181, 183, 184, 186, 188, 189], "slice": [4, 13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96, 172], "NOT": [4, 54, 102, 105, 114], "chang": [4, 13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 96, 127, 152, 161, 162, 164, 169, 173, 184, 186], "solut": [4, 160, 161, 163, 187], "selector": [4, 150, 159, 160, 172], "obvious": 4, "disk": [4, 7, 9, 13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 150, 177, 187], "howev": [4, 7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 150, 159, 169, 172, 179, 186, 187], "concern": 4, "overwhelm": 4, "affect": [4, 150], "On": [4, 7, 174, 185], "bright": 4, "modern": [4, 169, 183, 187], "highli": [4, 152, 161, 169, 181, 186], "resolv": [4, 8, 155], "activ": [4, 165, 174, 186, 187], "continu": [4, 158, 159, 161, 171, 172, 181], "v0": [5, 13, 15, 16, 17, 18, 19, 20, 44, 52, 56, 96, 180], "6333": [5, 52, 79, 80], "ulimit": 5, "lot": [5, 13, 15, 16, 17, 18, 19, 20, 35, 52, 56, 96, 179], "collect": [5, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 117, 152, 161], "nofil": 5, "soft": 5, "65535": 5, "hard": [5, 152], "collection_nam": [5, 12, 52, 57, 79, 80, 81, 82, 84], "scroll_batch_s": [5, 12, 52, 57, 79, 80, 82], "scroll": 5, "larger": [5, 13, 15, 16, 17, 18, 19, 20, 38, 52, 56, 96, 102, 105, 112], "full_scan_threshold": [5, 12, 52, 57, 79, 80], "minim": [5, 172], "amount": [5, 181], "addit": [5, 8, 13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96, 104, 159, 187], "payload": 5, "edg": [5, 7], "graph": [5, 7, 138], "space": [5, 131, 172], "u": [5, 102, 105, 108, 110, 125, 179, 180, 184], "init": [5, 101, 159, 181], "4917906896": 5, "ndocumentarrai": [5, 181], "kei": [5, 7, 13, 15, 16, 17, 18, 19, 20, 25, 50, 52, 54, 56, 96, 101, 102, 105, 118, 125, 129, 150, 153, 188, 189], "larg": [6, 7, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 112, 150, 153, 172, 174, 178, 179, 186], "da1": [6, 56, 173, 178], "reconnect": 6, "both": [6, 13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 96, 150, 163, 168, 174, 178, 183, 186], "mine": [6, 56], "filenam": [6, 13, 15, 16, 17, 18, 19, 20, 22, 33, 34, 35, 38, 52, 56, 96, 102, 104, 105, 108, 111, 114, 129, 173, 181], "serial": [6, 7, 13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 102, 105, 118, 129, 155, 177, 179, 183, 184, 186, 187], "sqlite3": 6, "pragma": 6, "journal": [6, 176], "mode": [6, 104, 129], "video": [7, 102, 105, 153, 159, 163, 166, 167, 185, 186, 187, 188, 189], "tutori": [7, 8, 187], "guid": [7, 10, 13, 16, 19, 52, 56, 96, 102, 150], "command": [7, 151], "8080": [7, 13, 15, 16, 17, 18, 19, 20, 44, 52, 56, 91, 92, 96], "scheme": [7, 167, 188, 189], "semitechnologi": 7, "restart": 7, "failur": 7, "query_defaults_limit": 7, "25": [7, 176], "authentication_anonymous_access_en": 7, "persistence_data_path": 7, "var": 7, "lib": 7, "default_vectorizer_modul": 7, "enable_modul": 7, "cluster_hostnam": 7, "node1": 7, "protocol": [7, 9, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 33, 38, 52, 56, 57, 91, 92, 96, 102, 105, 118, 129, 140, 150, 169, 179, 180, 181, 184, 186], "bound": [7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 101, 162, 179], "capit": 7, "1234": [7, 96, 174], "preses": 7, "comput": [7, 13, 15, 16, 17, 18, 19, 20, 25, 27, 41, 52, 56, 96, 102, 105, 114, 131, 134, 135, 156, 167, 172, 177, 178, 181, 183, 186, 188, 189], "l2": 7, "squar": [7, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 132, 134, 135, 158], "chosen": [7, 129, 178], "becom": [7, 172], "tradeoff": 7, "timeout_config": [7, 12, 57, 91, 92, 96], "timeout": 7, "request": [7, 13, 15, 16, 17, 18, 19, 20, 44, 52, 56, 96, 129, 179, 181, 184, 187], "dynamic_ef_min": [7, 12, 57, 91, 92, 96], "act": 7, "boundari": 7, "small": [7, 102, 105, 112, 132, 134, 135, 137, 153, 172, 181], "enough": [7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 186], "suggest": [7, 179], "never": [7, 169], "drop": [7, 58, 62, 164], "dynamic_ef_max": [7, 12, 57, 91, 92, 96], "cap": 7, "massiv": 7, "500": 7, "dynamic_ef_factor": [7, 12, 57, 91, 92, 96], "determin": [7, 13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96, 102, 105, 114, 129, 159], "factor": 7, "vector_cache_max_object": [7, 12, 57, 91, 92, 96], "held": 7, "2m": 7, "lookup": [7, 12, 53, 55], "magnitud": 7, "cach": [7, 129], "sparingli": 7, "flat_search_cutoff": [7, 12, 57, 91, 92, 96], "absolut": 7, "flat": [7, 172], "cutoff": 7, "bypass": 7, "entir": 7, "brute": 7, "forc": [7, 13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 102, 105, 120], "consider": 7, "40000": 7, "turn": 7, "cleanup_interval_second": [7, 12, 57, 91, 92, 96], "async": [7, 183], "process": [7, 9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 102, 105, 107, 108, 109, 110, 111, 114, 115, 125, 126, 151, 153, 158, 161, 162, 166, 172, 181, 183, 184, 186, 187], "repair": 7, "prior": 7, "cleanup": 7, "mark": [7, 13, 15, 16, 17, 18, 19, 20, 28, 41, 52, 56, 69, 71, 96, 156], "still": [7, 150, 159, 172, 179, 187], "member": [7, 187], "reassign": 7, "datapoint": 7, "typic": [7, 54], "adjust": 7, "down": 7, "clean": [7, 183], "skip": [7, 12, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 57, 91, 92, 96, 102, 105, 117], "situat": 7, "doesn": [7, 152], "meant": 7, "glue": 7, "duplic": [7, 127], "candid": 7, "worst": 7, "earli": [7, 172, 185], "exit": 7, "With": [7, 13, 19, 52, 56, 96, 173, 179, 184], "met": 7, "togeth": [7, 13, 15, 16, 17, 18, 19, 20, 21, 23, 31, 35, 52, 56, 96, 104, 129, 152, 172, 173, 184], "normal": [7, 13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 102, 105, 114, 117, 124, 136, 137, 152, 166, 179, 184], "immut": 7, "And": [7, 54, 156, 176, 183], "bert": 7, "model": [7, 13, 15, 16, 17, 18, 19, 20, 25, 45, 49, 52, 56, 96, 102, 105, 114, 121, 123, 127, 154, 160, 161, 165, 166, 169, 174, 181, 184, 188, 189], "transform": 7, "automodel": 7, "autotoken": 7, "token": [7, 13, 15, 16, 17, 18, 19, 20, 50, 52, 56, 96, 160, 181], "from_pretrain": 7, "uncas": 7, "collate_fn": [7, 13, 15, 16, 17, 18, 19, 20, 25, 52, 56, 96], "return_tensor": 7, "pt": 7, "truncat": 7, "pad": [7, 13, 15, 16, 17, 18, 19, 20, 50, 52, 56, 96, 102, 105, 114, 125, 156, 172], "path": [7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 33, 43, 51, 52, 56, 96, 102, 104, 105, 117, 127, 129, 159, 167, 171, 172, 173, 180, 188, 189], "lessthanequ": 7, "valuenumb": 7, "lowerthanequ": 7, "valueint": 7, "ad": [7, 8, 13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 91, 95, 96, 161, 162, 173, 184], "v3": 7, "upgrad": 7, "primit": [7, 158, 159], "natur": [7, 150, 158, 163, 171, 173], "further": [7, 10, 13, 16, 19, 52, 56, 96, 102, 156, 158, 167, 183], "lowest": 7, "load": [7, 12, 13, 15, 16, 17, 18, 19, 20, 22, 32, 33, 34, 35, 36, 38, 41, 52, 56, 58, 62, 64, 67, 96, 104, 150, 153, 154, 156, 160, 162, 169, 174, 179, 181, 184, 186], "dummi": [7, 8], "word": [7, 13, 15, 16, 17, 18, 19, 20, 50, 52, 56, 96, 102, 105, 125, 150, 156, 172, 186], "desc": 7, "asc": 7, "ascend": 7, "nearvector": 7, "being": 7, "combin": [7, 153, 167, 181, 184], "sometim": [7, 102, 105, 108, 110, 125, 156], "query_param": 7, "dictionari": [7, 13, 15, 16, 17, 18, 19, 20, 50, 52, 56, 96, 102, 105, 125, 127, 176], "bodi": [7, 154, 183], "familiar": [7, 182, 186], "graphql": [7, 184, 187], "goe": 7, "36840257": 7, "13973749": 7, "28994447": 7, "_addit": 7, "said": [7, 179], "theoret": 7, "anyth": [7, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 177, 178], "score": [7, 11, 13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 102, 103, 105, 119, 127, 136, 149, 165, 167, 169, 171, 175, 178, 181, 188, 189], "weaviate_certainti": 7, "someth": [7, 165, 175, 184], "0000001": 7, "cosine_similar": 7, "0000002000000001": 7, "attach": [7, 182], "field": [7, 8, 11, 13, 15, 16, 17, 18, 19, 20, 27, 28, 35, 52, 54, 56, 65, 69, 71, 96, 97, 98, 101, 102, 104, 105, 112, 117, 125, 127, 138, 143, 155, 156, 160, 161, 162, 163, 164, 165, 167, 169, 171, 172, 175, 176, 181, 185, 188, 189], "featureproject": 7, "classif": 7, "nest": [7, 8, 13, 15, 16, 17, 18, 19, 20, 34, 51, 52, 56, 96, 102, 105, 117, 129, 153, 155, 159, 161, 163, 165, 167, 170, 175, 176, 177, 183, 185, 186, 187], "page": [7, 163], "text2vec": 7, "contextionari": 7, "respons": [7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 179, 187], "param": [7, 13, 15, 16, 17, 18, 19, 20, 46, 52, 54, 56, 96, 131, 132, 138], "creationtimeunix": 7, "lastupdatetimeunix": 7, "tags__creationtimeunix": 7, "tags__lastupdatetimeunix": 7, "1656020204563": 7, "exactli": [8, 159, 184], "verbos": 8, "rest": [8, 169, 179, 181, 183, 186], "stabl": 8, "app": [8, 183, 187], "endpoint": [8, 13, 15, 16, 17, 18, 19, 20, 44, 52, 56, 96, 180, 183, 184], "schema": [8, 13, 15, 16, 17, 18, 19, 20, 45, 52, 56, 58, 62, 91, 92, 96, 102, 105, 121, 127, 150, 162, 167, 169, 187], "strawberri": [8, 12, 13, 15, 16, 17, 18, 19, 20, 52, 56, 96, 102, 105, 187], "debug": [8, 129, 185], "articl": [8, 158, 159, 161], "serv": [8, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 165], "introduct": [8, 150], "background": 8, "stronli": 8, "confus": [8, 150], "matcharrai": [8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96, 102, 105, 119, 171, 172, 175], "rememb": [8, 158, 181], "fetch": [8, 163], "strawberry_typ": [8, 11, 102], "strawberrydocu": [8, 102, 105, 123], "doc": [8, 13, 15, 16, 17, 18, 19, 20, 23, 31, 51, 52, 54, 55, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 99, 101, 104, 138, 141, 150, 152, 154, 159, 162, 163, 167, 168, 174, 176, 179, 180, 181, 182, 183, 184, 188, 189], "lambda": [8, 101, 156, 159, 160, 162, 175], "to_strawberry_typ": [8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 49, 52, 56, 96, 102, 105, 123], "notic": [8, 54, 176], "could": [8, 13, 15, 16, 17, 18, 19, 20, 35, 40, 52, 56, 96, 104, 152, 167, 179, 188, 189], "preprocess": [8, 9, 152, 160, 166, 179, 181], "toi": [8, 151, 155, 157], "py": [8, 104], "consol": [8, 184, 185, 187], "8000": 8, "browser": 8, "graphiql": 8, "playground": 8, "url": [8, 129, 167, 188, 189], "beyond": [8, 183, 185], "scope": [8, 167, 188, 189], "decid": 8, "perfect": [8, 160], "prototyp": [8, 185], "short": [8, 150, 156, 183], "wrap": [8, 66, 102, 105, 116, 129, 159, 164, 184], "asgi": 8, "graphql_app": 8, "add_rout": 8, "add_websocket_rout": 8, "tensorflow": [9, 130, 131, 163, 165, 167, 171, 174, 178, 186, 187], "paddlepaddl": [9, 163, 165, 167, 171, 174, 186, 187], "tensor": [9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 25, 43, 52, 56, 96, 102, 103, 105, 107, 110, 114, 115, 117, 119, 125, 126, 127, 134, 135, 138, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 174, 178, 179, 181, 185, 186, 187, 188, 189], "spars": [9, 13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 102, 105, 112, 131, 132, 138, 163, 165, 167, 171, 178, 187, 188, 189], "dens": [9, 102, 105, 112, 138, 152, 163, 165, 167, 169, 171, 174, 178, 188, 189], "pickl": [9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 33, 42, 52, 56, 96, 102, 105, 118, 150, 169], "protobuf": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 33, 38, 52, 56, 96, 97, 102, 104, 105, 118, 129, 143, 150, 164, 173, 179, 186, 187, 188], "o": [9, 161, 172], "compress": [9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 33, 52, 56, 96, 102, 105, 118, 129, 169, 179, 181, 186, 187], "transit": [9, 184, 186, 187], "preserv": [9, 13, 15, 16, 17, 18, 19, 20, 23, 31, 43, 52, 56, 96, 102, 105, 107, 172], "paddl": [9, 13, 15, 16, 17, 18, 19, 20, 25, 52, 56, 96, 130, 131, 174, 178], "torch": [9, 25, 130, 131, 138, 160, 165, 174, 178, 186, 187], "to_spars": 9, "to_tensor": 9, "save_binari": [9, 12, 13, 15, 16, 17, 18, 19, 20, 32, 33, 38, 52, 56, 96, 181], "gz": [9, 104], "again": [9, 181, 183], "load_binari": [9, 12, 13, 15, 16, 17, 18, 19, 20, 32, 33, 52, 56, 96, 150, 181], "engin": [9, 17, 52, 96, 159, 169, 183, 186, 187], "gpu": [9, 172, 174, 180, 181, 186, 187], "intens": [9, 186], "stuff": 9, "mani": [9, 13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 96, 102, 105, 114, 152, 161, 181, 183, 184, 185, 186], "pitfal": 9, "correctli": [9, 185, 187], "few": [9, 161], "cpu": [9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 41, 42, 52, 56, 96, 124, 131, 134, 135, 160, 172, 174, 178, 187], "util": [9, 13, 15, 16, 17, 18, 19, 20, 35, 52, 56, 96], "drain": [9, 179], "dataload": [9, 12, 13, 15, 16, 17, 18, 19, 20, 52, 56, 96], "illustr": [9, 160, 168], "million": [9, 102, 105, 114, 169, 178, 181], "color": [9, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 114, 117, 152, 184], "14gb": 9, "cpu_job": [9, 179], "sleep": [9, 179], "job": [9, 179], "gpu_job": [9, 179], "func": [9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 75, 96, 129, 179], "num_work": [9, 13, 15, 16, 17, 18, 19, 20, 22, 23, 41, 42, 52, 56, 96, 124, 179], "donecpu": 9, "section": [10, 158, 159, 161, 177, 179, 183, 186], "codebas": [10, 160, 181, 186], "extract": [10, 102, 105, 114, 129, 151, 153], "docstr": 10, "mixin": [11, 12, 76, 102, 143], "queryset": [11, 12], "annliteconfig": [11, 12, 13, 16, 57, 58, 59], "documentarrayannlit": [11, 12, 13], "chunk": [11, 12, 13, 16, 17, 18, 19, 20, 46, 51, 52, 56, 96, 102, 103, 105, 114, 115, 119, 127, 152, 156, 157, 158, 159, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 179, 181, 186, 188, 189], "chunkarrai": [11, 12, 13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96, 102, 105, 119, 152, 158, 171, 172], "elast": [11, 12, 57], "documentarrayelast": [11, 12, 17, 72], "elasticconfig": [11, 12, 16, 17, 57, 69, 70], "documentarrayqdr": [11, 12, 52], "qdrantconfig": [11, 12, 52, 57, 79, 80], "documentarrayweavi": [11, 12, 52, 91, 92, 94, 96], "weaviateconfig": [11, 12, 16, 57, 91, 92, 96], "getter": [11, 21, 29, 98, 101, 160, 162, 163], "image_gett": [11, 98, 99, 101], "text_gett": [11, 98, 99, 101], "audio_gett": [11, 98, 99], "video_gett": [11, 98, 99], "mesh_gett": [11, 98, 99], "tabular_gett": [11, 98, 99], "blob_gett": [11, 98, 99], "json_gett": [11, 98, 99], "setter": [11, 21, 98, 101, 160, 162, 163], "image_sett": [11, 98, 100, 101], "text_sett": [11, 98, 100, 101], "audio_sett": [11, 98, 100], "video_sett": [11, 98, 100], "mesh_sett": [11, 98, 100], "blob_sett": [11, 98, 100], "json_sett": [11, 98, 100], "tabular_sett": [11, 98, 100], "is_multimod": [11, 98, 101, 102, 105, 116, 159], "documentdata": [11, 102, 103], "from_ndarrai": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 37, 52, 56, 96, 102, 104], "from_fil": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 37, 52, 56, 96, 102, 104, 152, 173, 179, 182, 184], "from_csv": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 37, 52, 56, 96, 102, 104, 155], "from_huggingface_dataset": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 37, 52, 56, 96, 102, 104], "from_ndjson": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 37, 52, 56, 96, 102, 104], "from_lin": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 37, 52, 56, 96, 102, 104], "pydantic_model": [11, 102, 183], "pydanticdocu": [11, 13, 15, 16, 17, 18, 19, 20, 45, 52, 56, 96, 102, 105, 121, 127, 183], "adjac": [11, 12, 13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96, 102, 103, 105, 119, 127, 164, 165, 167, 168, 169, 170, 172, 175, 181, 188, 189], "blob": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 52, 56, 96, 102, 103, 105, 110, 114, 119, 127, 150, 159, 162, 163, 164, 165, 166, 167, 169, 171, 181, 188, 189], "clear": [11, 12, 13, 14, 15, 16, 17, 18, 19, 52, 56, 57, 58, 62, 63, 64, 67, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 97, 102, 143, 163, 168], "content_hash": [11, 102, 105, 109], "content_typ": [11, 102, 105, 119, 127, 163], "convert_blob_to_datauri": [11, 102, 105, 108, 166], "convert_blob_to_image_tensor": [11, 102, 105, 114, 166], "convert_blob_to_tensor": [11, 102, 105, 110, 166], "convert_content_to_datauri": [11, 102, 105, 109, 166], "convert_image_tensor_to_blob": [11, 102, 105, 114, 166], "convert_image_tensor_to_sliding_window": [11, 102, 105, 114, 152, 166], "convert_image_tensor_to_uri": [11, 102, 105, 114, 166], "convert_tensor_to_blob": [11, 102, 105, 110, 166], "convert_tensor_to_text": [11, 102, 105, 125, 156, 166], "convert_text_to_datauri": [11, 102, 105, 125, 166], "convert_text_to_tensor": [11, 102, 105, 125, 156, 166], "convert_uri_to_datauri": [11, 102, 105, 110, 166], "copy_from": [11, 97, 102, 143, 164], "displai": [11, 102, 105, 117, 153, 170], "embed_feature_hash": [11, 16, 19, 102, 105, 112, 156, 166], "from_base64": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 33, 52, 56, 96, 102, 105, 118, 166, 169, 181], "from_byt": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 33, 52, 56, 96, 102, 105, 118, 150, 166, 169, 181], "from_dict": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 36, 38, 52, 56, 96, 102, 105, 118, 150, 166, 169], "from_json": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 38, 52, 56, 96, 102, 105, 118, 150, 166, 169, 181, 183], "from_protobuf": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 33, 52, 56, 96, 102, 105, 120, 166, 169, 181], "from_pydantic_model": [11, 12, 13, 15, 16, 17, 18, 19, 20, 45, 52, 56, 96, 102, 105, 121, 166, 181, 183], "from_strawberry_typ": [11, 12, 13, 15, 16, 17, 18, 19, 20, 49, 52, 56, 96, 102, 105, 123, 166], "get_json_schema": [11, 12, 13, 15, 16, 17, 18, 19, 20, 45, 52, 56, 96, 102, 105, 121, 183], "get_multi_modal_attribut": [11, 102, 105, 116], "get_vocabulari": [11, 12, 13, 15, 16, 17, 18, 19, 20, 50, 52, 56, 96, 102, 105, 125, 156], "granular": [11, 12, 13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96, 102, 103, 105, 119, 127, 156, 158, 159, 161, 162, 164, 167, 168, 169, 170, 172, 181, 188, 189], "load_pil_image_to_datauri": [11, 102, 105, 114], "load_uri_to_audio_tensor": [11, 102, 105, 107, 151, 166], "load_uri_to_blob": [11, 101, 102, 105, 108, 162, 166], "load_uri_to_image_tensor": [11, 102, 105, 114, 152, 163, 165, 166, 179, 184], "load_uri_to_point_cloud_tensor": [11, 102, 105, 115, 154, 166], "load_uri_to_text": [11, 102, 105, 125, 156, 163, 166], "load_uri_to_video_tensor": [11, 102, 105, 126, 157, 166], "mime_typ": [11, 102, 103, 105, 119, 127, 152, 156, 158, 159, 161, 162, 163, 164, 167, 169, 171, 173, 180, 181, 188, 189], "modal": [11, 13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96, 102, 103, 105, 119, 127, 159, 161, 163, 167, 169, 176, 181, 186, 187, 188, 189], "nbyte": [11, 97, 102, 143], "non_empty_field": [11, 97, 102, 143, 163], "offset": [11, 62, 102, 103, 105, 110, 119, 127, 167, 169, 172, 181, 188, 189], "parent_id": [11, 102, 103, 105, 119, 127, 158, 159, 161, 162, 164, 167, 168, 169, 170, 172, 181, 188, 189], "plot_matches_sprit": [11, 102, 105, 117, 182], "pop": [11, 12, 13, 14, 15, 16, 17, 18, 19, 52, 56, 57, 58, 63, 64, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 97, 102, 143, 163], "post": [11, 12, 13, 15, 16, 17, 18, 19, 20, 52, 56, 96, 102, 105, 124, 161, 179, 180, 183, 184], "save_audio_tensor_to_fil": [11, 102, 105, 107, 151, 166], "save_blob_to_fil": [11, 102, 105, 108, 166], "save_image_tensor_to_fil": [11, 102, 105, 114, 152, 157, 166], "save_uri_to_fil": [11, 102, 105, 111, 166], "save_video_tensor_to_fil": [11, 102, 105, 126, 157, 166], "set_image_tensor_channel_axi": [11, 102, 105, 114, 152, 165, 166, 179, 184], "set_image_tensor_inv_norm": [11, 102, 105, 114, 166], "set_image_tensor_norm": [11, 102, 105, 114, 152, 165, 166, 179, 184], "set_image_tensor_shap": [11, 102, 105, 114, 152, 166], "to_base64": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 33, 52, 56, 96, 102, 105, 118, 169, 181], "to_byt": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 33, 52, 56, 96, 102, 105, 118, 150, 169, 181], "to_dict": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 38, 52, 56, 96, 102, 105, 118, 143, 145, 147, 150, 169, 176, 181], "to_json": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 38, 52, 56, 96, 102, 105, 118, 150, 169, 181, 183], "to_protobuf": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 33, 52, 56, 96, 102, 105, 120, 169, 181], "to_pydantic_model": [11, 12, 13, 15, 16, 17, 18, 19, 20, 45, 52, 56, 96, 102, 105, 121, 181, 183], "uri": [11, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 114, 115, 117, 119, 125, 126, 127, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 173, 179, 180, 181, 185, 188, 189], "weight": [11, 102, 103, 105, 119, 127, 136, 167, 169, 176, 181, 188, 189], "math": [11, 149, 179], "r_precis": [11, 130, 136, 175], "precision_at_k": [11, 130, 136, 175], "hit_at_k": [11, 130, 136, 175], "average_precis": [11, 130, 136, 175], "reciprocal_rank": [11, 130, 136, 175], "recall_at_k": [11, 130, 136, 175], "f1_score_at_k": [11, 130, 136, 175], "dcg_at_k": [11, 130, 136, 175], "ndcg_at_k": [11, 130, 136, 175], "helper": [11, 20, 21, 22, 25, 26, 29, 30, 31, 34, 35, 37, 42, 43, 44, 48, 57, 58, 64, 79, 86, 102, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 121, 123, 125, 126, 130, 149, 156, 166], "minmax_norm": [11, 130, 137], "top_k": [11, 102, 105, 117, 130, 137, 182], "update_rows_x_mat_best": [11, 130, 137], "unravel": [11, 130, 138, 171], "ravel": [11, 130, 138], "get_array_typ": [11, 130, 138], "to_numpy_arrai": [11, 130, 138], "to_list": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 38, 52, 56, 96, 130, 138, 169, 181, 186], "get_array_row": [11, 130, 138], "check_arraylike_equ": [11, 130, 138], "detach_tensor_if_pres": [11, 130, 138], "proto": [11, 127, 149], "io": [11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 139, 150, 151, 160, 161, 163, 169, 179, 186, 187], "docarray_pb2": [11, 139, 169], "namedscoredata": [11, 143, 144], "namedscor": [11, 102, 103, 105, 119, 143, 167], "op_nam": [11, 143, 144, 145, 146, 188, 189], "ref_id": [11, 143, 144, 145, 146, 156, 188, 189], "basedctyp": [11, 97, 102, 143, 149], "typenam": [11, 129, 149], "deprecate_bi": [11, 129, 149], "dunder_get": [11, 129, 149], "random_ident": [11, 129, 149], "random_uuid": [11, 129, 149], "download_mermaid_url": [11, 129, 149], "get_request_head": [11, 129, 149], "get_full_vers": [11, 129, 149], "get_ci_vendor": [11, 129, 149], "reset_port": [11, 129, 149], "random_port": [11, 129, 149], "cached_properti": [11, 129, 149], "compress_byt": [11, 129, 149], "decompress_byt": [11, 129, 149], "get_compress_ctx": [11, 129, 149], "dataclass_from_dict": [11, 129, 149], "protocol_and_compress_from_file_path": [11, 129, 149], "add_protocol_and_compress_to_file_path": [11, 129, 149], "filter_dict": [11, 129, 149], "contentpropertymixin": [12, 20, 21, 102, 105, 109], "delitem": [12, 20, 61, 77, 88], "delitemmixin": [12, 20, 24], "embedmixin": [12, 20, 25], "get_framework": [12, 20, 25], "emptymixin": [12, 20, 26], "evaluationmixin": [12, 20, 27], "getattr": [12, 20], "getattributemixin": [12, 20, 29], "getitem": [12, 20, 61, 77, 88], "getitemmixin": [12, 20, 30], "groupmixin": [12, 20, 23, 31], "matchmixin": [12, 20, 41], "parallel": [12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 41, 52, 56, 96, 172, 177, 184], "parallelmixin": [12, 20, 23, 42], "plotmixin": [12, 20, 43, 102, 105, 117], "postmixin": [12, 20, 44], "pydant": [12, 13, 15, 16, 17, 18, 19, 20, 49, 52, 56, 96, 102, 105, 118, 169, 181], "pydanticmixin": [12, 20, 45, 102, 105, 121], "reduc": [12, 13, 15, 16, 17, 18, 19, 20, 52, 56, 96], "reducemixin": [12, 20, 46], "sampl": [12, 13, 15, 16, 17, 18, 19, 20, 52, 56, 96, 102, 104, 105, 107, 115, 154, 159], "samplemixin": [12, 20, 47], "setitem": [12, 20, 61, 77, 88], "setitemmixin": [12, 20, 48], "strawberrymixin": [12, 20, 49, 102, 105, 123], "texttoolsmixin": [12, 20, 50], "travers": [12, 13, 15, 16, 17, 18, 19, 20, 23, 31, 52, 56, 96, 168, 172, 186], "traversemixin": [12, 20, 51], "apply_batch": [12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 179], "batch_id": [12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 31, 52, 56, 96], "flatten": [12, 13, 15, 16, 17, 18, 19, 20, 35, 51, 52, 56, 96, 155], "from_datafram": [12, 13, 15, 16, 17, 18, 19, 20, 32, 36, 52, 56, 96, 181], "from_list": [12, 13, 15, 16, 17, 18, 19, 20, 32, 38, 52, 56, 96, 181], "load_csv": [12, 13, 15, 16, 17, 18, 19, 20, 32, 35, 52, 56, 96], "load_json": [12, 13, 15, 16, 17, 18, 19, 20, 32, 38, 52, 56, 96], "map_batch": [12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 172], "plot_image_sprit": [12, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 152, 157, 182, 184], "pull": [12, 13, 15, 16, 17, 18, 19, 20, 32, 40, 52, 56, 96, 181, 187], "push": [12, 13, 15, 16, 17, 18, 19, 20, 32, 40, 52, 56, 96, 179, 181, 184, 187], "reduce_al": [12, 13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 96], "save_csv": [12, 13, 15, 16, 17, 18, 19, 20, 32, 35, 52, 56, 96, 155], "save_embeddings_csv": [12, 13, 15, 16, 17, 18, 19, 20, 32, 35, 52, 56, 96], "save_gif": [12, 13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "save_json": [12, 13, 15, 16, 17, 18, 19, 20, 32, 33, 38, 52, 56, 96], "shuffl": [12, 13, 15, 16, 17, 18, 19, 20, 23, 31, 37, 42, 47, 52, 56, 96, 104, 175], "split_by_tag": [12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 31, 52, 56, 96, 172], "to_datafram": [12, 13, 15, 16, 17, 18, 19, 20, 32, 36, 52, 56, 96, 181], "traverse_flat": [12, 13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96], "traverse_flat_per_path": [12, 13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96], "lookuptreeelem": [12, 53, 54], "lookupnod": [12, 53, 54], "lookupleaf": [12, 53, 54], "q": [12, 53, 54, 102, 156, 165, 169, 178, 181], "lookupyerror": [12, 53, 54], "dunder_partit": [12, 53, 54], "iff": [12, 53, 54], "iff_not_non": [12, 53, 54], "guard_typ": [12, 53, 54], "guard_str": [12, 53, 54], "guard_list": [12, 53, 54], "guard_q": [12, 53, 54], "guard_it": [12, 53, 54], "parser": [12, 53, 102, 105, 118], "querypars": [12, 53, 55], "registri": [12, 57], "type_map": [12, 13, 15, 17, 18, 19, 52, 56, 57, 58, 59, 64, 65, 69, 70, 74, 75, 79, 80, 86, 87, 91, 92, 96], "count": [12, 13, 14, 15, 16, 17, 18, 19, 52, 56, 57, 58, 63, 64, 65, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 102, 105, 110], "revers": [12, 13, 14, 15, 16, 17, 18, 19, 52, 56, 57, 58, 63, 64, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 151], "reference_doc": [12, 15, 18], "collection_name_meta": [12, 52, 57, 79], "serialization_config": [12, 52, 57, 79, 82], "schema_vers": [12, 56, 57, 86, 87, 89], "factori": [13, 17, 52, 56, 58, 59, 69, 70, 79, 80, 86, 87, 91, 92, 96, 103], "tupl": [13, 15, 16, 17, 18, 19, 20, 41, 43, 50, 52, 56, 58, 59, 65, 69, 70, 79, 80, 91, 92, 96, 97, 102, 105, 112, 114, 124, 125, 129, 137, 138, 143, 163, 165, 167, 171, 173], "typemap": [13, 15, 17, 18, 19, 52, 56, 57, 58, 59, 64, 65, 69, 70, 74, 75, 79, 80, 86, 87, 91, 92, 96], "integ": [13, 14, 15, 16, 17, 18, 19, 52, 56, 58, 59, 63, 68, 69, 70, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 102, 105, 125, 156, 172, 188, 189], "_safe_cast_int": [13, 17, 58, 59, 69, 70, 91, 92, 96], "noqa": [13, 15, 16, 17, 18, 19, 20, 23, 37, 42, 52, 56, 96], "dar102": [13, 15, 16, 17, 18, 19, 20, 23, 37, 42, 52, 56, 96], "dar101": [13, 15, 16, 17, 18, 19, 20, 23, 37, 42, 52, 56, 96], "dar201": [13, 15, 16, 17, 18, 19, 20, 23, 37, 42, 52, 56, 96], "rtype": [13, 15, 16, 17, 18, 19, 20, 23, 33, 42, 46, 52, 56, 96, 131, 132, 138], "until": [13, 15, 16, 17, 18, 19, 20, 23, 31, 52, 56, 96, 179], "along": [13, 15, 16, 17, 18, 19, 20, 21, 23, 28, 31, 52, 56, 69, 71, 96], "traversal_path": [13, 15, 16, 17, 18, 19, 20, 23, 31, 51, 52, 56, 96], "bool": [13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 31, 33, 35, 37, 40, 41, 42, 43, 44, 51, 52, 54, 56, 69, 70, 71, 91, 92, 96, 101, 102, 104, 105, 108, 110, 112, 114, 115, 116, 117, 124, 125, 126, 127, 129, 137, 138, 188, 189], "divid": [13, 15, 16, 17, 18, 19, 20, 23, 31, 42, 52, 56, 96], "minibatch": [13, 15, 16, 17, 18, 19, 20, 23, 31, 42, 52, 56, 96, 179], "forwardref": [13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 31, 33, 41, 42, 45, 46, 49, 51, 52, 56, 69, 71, 96, 101, 102, 104, 105, 119, 127, 138], "properti": [13, 15, 16, 17, 18, 19, 20, 21, 46, 52, 56, 62, 65, 79, 81, 82, 84, 91, 92, 96, 97, 102, 105, 109, 116, 129, 143, 145, 166, 183], "byte": [13, 15, 16, 17, 18, 19, 20, 21, 33, 52, 56, 96, 97, 102, 103, 105, 107, 110, 118, 119, 129, 143, 159, 164, 167, 173, 186, 187, 188, 189], "sequenc": [13, 14, 15, 16, 17, 18, 19, 20, 21, 35, 52, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 95, 96, 102, 105, 108, 110, 114, 125, 173, 188, 189], "documentcontenttyp": [13, 15, 16, 17, 18, 19, 20, 21, 52, 56, 96, 102, 103, 105, 119], "arraytyp": [13, 15, 16, 17, 18, 19, 20, 21, 28, 52, 56, 69, 71, 96, 102, 103, 105, 119, 124, 131, 132, 138, 142], "occurr": [13, 14, 15, 16, 17, 18, 19, 52, 56, 58, 63, 65, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96], "classmethod": [13, 15, 16, 17, 18, 19, 20, 22, 26, 33, 34, 35, 36, 37, 38, 40, 45, 49, 52, 56, 96, 102, 105, 118, 120, 121, 123, 127], "thread": [13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 186], "pool": [13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96], "show_progress": [13, 15, 16, 17, 18, 19, 20, 22, 23, 40, 42, 43, 44, 52, 56, 96, 180, 181, 184], "callabl": [13, 15, 16, 17, 18, 19, 20, 22, 23, 27, 28, 41, 42, 51, 52, 56, 69, 71, 75, 96, 101, 124, 178], "place": [13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 42, 46, 52, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 102, 105, 108, 152, 161, 166, 179], "later": [13, 15, 16, 17, 18, 19, 20, 22, 23, 40, 42, 46, 52, 56, 66, 96, 156, 162, 184], "multi": [13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 51, 52, 56, 96, 165, 167, 179, 183, 186, 187, 188, 189], "perhap": [13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96], "yourselv": [13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96], "wish": [13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96], "regardless": [13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96, 138, 172, 179], "multiprocess": [13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 96], "variabl": [13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 91, 92, 96, 129, 174, 181, 188, 189], "origin": [13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 31, 42, 52, 54, 56, 96, 102, 105, 114, 129, 156, 160, 162, 166, 167, 172, 173, 188, 189], "share": [13, 15, 16, 17, 18, 19, 20, 22, 23, 40, 42, 52, 56, 96, 161, 175, 181, 186], "worker": [13, 15, 16, 17, 18, 19, 20, 22, 23, 41, 42, 52, 56, 96], "ignor": [13, 15, 16, 17, 18, 19, 20, 22, 23, 28, 42, 46, 52, 56, 69, 71, 96, 159, 179, 180], "close": [13, 15, 16, 17, 18, 19, 20, 22, 23, 42, 52, 56, 58, 62, 96, 175, 186], "progressbar": [13, 15, 16, 17, 18, 19, 20, 22, 43, 44, 52, 56, 96, 185], "embed_model": [13, 15, 16, 17, 18, 19, 20, 25, 52, 56, 96, 124, 134, 135], "devic": [13, 15, 16, 17, 18, 19, 20, 25, 41, 52, 56, 96, 124, 131, 134, 135, 160, 174, 178], "256": [13, 15, 16, 17, 18, 19, 20, 25, 52, 56, 96, 102, 105, 112, 124, 159, 165, 172, 178, 182], "to_numpi": [13, 15, 16, 17, 18, 19, 20, 25, 52, 56, 96, 174], "fill": [13, 15, 16, 17, 18, 19, 20, 25, 27, 37, 52, 56, 96, 104, 159, 162, 164, 168, 173, 174, 179], "inplac": [13, 15, 16, 17, 18, 19, 20, 25, 52, 56, 96, 102, 105, 107, 108, 109, 110, 114, 117, 125, 172, 179], "anydnn": [13, 15, 16, 17, 18, 19, 20, 25, 52, 56, 96, 124], "kera": [13, 15, 16, 17, 18, 19, 20, 25, 52, 56, 96, 174], "pytorch": [13, 15, 16, 17, 18, 19, 20, 25, 52, 56, 96, 102, 105, 114, 152, 163, 165, 167, 171, 174, 178, 184], "cuda": [13, 15, 16, 17, 18, 19, 20, 25, 41, 52, 56, 96, 131, 134, 135, 160, 174, 178], "framework": [13, 15, 16, 17, 18, 19, 20, 25, 52, 56, 96, 138, 152, 169, 174, 178, 183, 186], "format": [13, 15, 16, 17, 18, 19, 20, 25, 28, 34, 35, 52, 56, 69, 71, 96, 104, 169, 174, 183, 184, 186], "mini": [13, 15, 16, 17, 18, 19, 20, 25, 52, 56, 96], "stack": [13, 15, 16, 17, 18, 19, 20, 21, 52, 56, 96], "hash_fn": [13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96, 175], "metric_nam": [13, 15, 16, 17, 18, 19, 20, 27, 28, 41, 52, 56, 69, 71, 96, 124], "strict": [13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96], "rank": [13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96, 136], "groundtruth": [13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96, 175], "multipl": [13, 15, 16, 17, 18, 19, 20, 23, 27, 31, 43, 51, 52, 56, 96, 102, 105, 115, 163, 168, 169, 171, 172, 177, 181, 184, 186], "identifi": [13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96, 155, 164, 167, 174, 188, 189], "align": [13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96, 175], "semant": [13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96, 150, 178], "prevent": [13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96], "irrelev": [13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96, 175], "accident": [13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96], "keyword": [13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96, 104, 127, 164], "metric_fn": [13, 15, 16, 17, 18, 19, 20, 27, 52, 56, 96], "exclude_self": [13, 15, 16, 17, 18, 19, 20, 28, 41, 52, 56, 69, 71, 96, 124, 156, 175], "only_id": [13, 15, 16, 17, 18, 19, 20, 28, 41, 52, 56, 69, 71, 96, 124, 178], "latter": [13, 15, 16, 17, 18, 19, 20, 28, 52, 56, 69, 71, 96, 158], "notimplementederror": [13, 15, 16, 17, 18, 19, 20, 28, 52, 56, 69, 71, 96], "effect": [13, 15, 16, 17, 18, 19, 20, 41, 51, 52, 56, 96, 102, 105, 114, 161, 164, 176], "_show_progress": [13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96], "df": [13, 15, 16, 17, 18, 19, 20, 36, 52, 56, 96, 181], "panda": [13, 15, 16, 17, 18, 19, 20, 36, 52, 56, 96, 155, 177, 181, 186], "datafram": [13, 15, 16, 17, 18, 19, 20, 32, 52, 56, 96, 155, 173, 177, 186, 187], "jsonschema": [13, 15, 16, 17, 18, 19, 20, 38, 52, 56, 96, 102, 105, 118, 150, 169], "pb_msg": [13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 102, 105, 120, 141, 142], "indent": [13, 15, 16, 17, 18, 19, 20, 45, 52, 56, 96, 102, 105, 121], "json": [13, 15, 16, 17, 18, 19, 20, 32, 34, 35, 37, 45, 52, 56, 96, 102, 104, 105, 118, 121, 127, 159, 161, 164, 173, 186, 187], "min_freq": [13, 15, 16, 17, 18, 19, 20, 50, 52, 56, 96], "text_attr": [13, 15, 16, 17, 18, 19, 20, 50, 52, 56, 96, 102, 105, 125], "vocabulari": [13, 15, 16, 17, 18, 19, 20, 50, 52, 56, 96, 102, 105, 125, 156], "textual": [13, 15, 16, 17, 18, 19, 20, 50, 52, 56, 96, 102, 105, 125, 156], "deriv": [13, 15, 16, 17, 18, 19, 20, 50, 52, 54, 56, 61, 66, 77, 88, 96, 102, 105, 125], "minimum": [13, 15, 16, 17, 18, 19, 20, 43, 50, 52, 56, 96, 102, 105, 117], "frequenc": [13, 15, 16, 17, 18, 19, 20, 50, 52, 56, 96, 102, 105, 107, 125], "reserv": [13, 15, 16, 17, 18, 19, 20, 50, 52, 56, 96, 102, 105, 125, 156], "unknown": [13, 15, 16, 17, 18, 19, 20, 50, 52, 56, 96, 102, 105, 125, 156, 169], "stop": [13, 14, 15, 16, 17, 18, 19, 52, 56, 58, 63, 65, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96], "valueerror": [13, 14, 15, 16, 17, 18, 19, 25, 52, 56, 58, 63, 65, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96, 175], "present": [13, 14, 15, 16, 17, 18, 19, 20, 33, 52, 56, 58, 63, 65, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96], "file_format": [13, 15, 16, 17, 18, 19, 20, 34, 52, 56, 96], "binari": [13, 15, 16, 17, 18, 19, 20, 32, 34, 35, 52, 56, 96, 102, 104, 105, 108, 110, 118, 125, 136, 150, 163, 166, 167, 169, 173, 188, 189], "utf": [13, 15, 16, 17, 18, 19, 20, 34, 35, 38, 52, 56, 96, 102, 104, 105, 108, 110, 125, 188, 189], "csv": [13, 15, 16, 17, 18, 19, 20, 32, 34, 37, 52, 56, 96, 104, 153, 159, 173, 187], "textio": [13, 15, 16, 17, 18, 19, 20, 34, 35, 37, 38, 52, 56, 96, 104], "binaryio": [13, 15, 16, 17, 18, 19, 20, 33, 34, 52, 56, 96, 102, 105, 107, 108, 111, 114, 126], "human": [13, 15, 16, 17, 18, 19, 20, 33, 34, 38, 52, 56, 96], "readabl": [13, 15, 16, 17, 18, 19, 20, 33, 34, 38, 52, 56, 96, 172], "compat": [13, 15, 16, 17, 18, 19, 20, 34, 52, 56, 96, 150, 169], "complex": [13, 15, 16, 17, 18, 19, 20, 34, 52, 56, 96], "restor": [13, 15, 16, 17, 18, 19, 20, 34, 52, 56, 96], "stream": [13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 150, 151, 186, 187], "progress": [13, 15, 16, 17, 18, 19, 20, 23, 33, 40, 42, 43, 52, 56, 96], "bar": [13, 15, 16, 17, 18, 19, 20, 23, 33, 40, 42, 43, 52, 56, 96, 102, 164], "file_nam": [13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96], "interpol": [13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96], "respect": [13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 127, 163], "my_docarrai": [13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 181], "lz4": [13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 169, 181, 187], "field_resolv": [13, 15, 16, 17, 18, 19, 20, 35, 37, 52, 56, 96, 97, 102, 104, 143, 155, 164], "darrai": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 124], "use_scipi": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 124, 156, 178], "sqeuclidean": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 130, 131, 132, 134, 135, 178], "nativ": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 151, 184], "scipi": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 102, 105, 112, 131, 132, 138, 163, 165, 167, 171, 178, 187], "braycurti": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "canberra": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "chebyshev": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "cityblock": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "correl": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "dice": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "ham": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "jaccard": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 156], "jensenshannon": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "kulsinski": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "mahalanobi": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "minkowski": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "rogerstanimoto": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "russellrao": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "seuclidean": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "sokalmichen": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "sokalsneath": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "wminkowski": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "yule": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "invert": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 176], "against": [13, 15, 16, 17, 18, 19, 20, 41, 52, 54, 56, 96, 165, 175, 178], "b": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 127, 129, 157, 159, 160, 162, 164, 169, 172, 178, 179, 181], "min": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 137, 186], "rescal": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "significantli": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96], "speedup": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 179, 186], "hand": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 102, 105, 125, 165, 169, 175, 178, 187], "matrix": [13, 15, 16, 17, 18, 19, 20, 41, 52, 56, 96, 102, 105, 112, 131, 137, 163, 165, 167, 171, 186], "titl": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 160, 183], "mydocumentarrai": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "image_sprit": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 182, 185], "min_image_s": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "channel_axi": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 114, 117, 152, 182, 184], "start_serv": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "127": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "image_sourc": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "interact": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 182, 185], "visual": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 117, 157, 163, 174, 177, 181, 185, 186, 187], "projector": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 187], "bind": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 183], "frontend": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "axi": [13, 15, 16, 17, 18, 19, 20, 21, 37, 43, 52, 56, 96, 102, 104, 105, 114, 117, 152, 179, 184], "channel": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 114, 117, 152, 179, 187], "info": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 114, 117], "directli": [13, 15, 16, 17, 18, 19, 20, 21, 43, 52, 56, 96, 104, 152, 163, 164, 169, 170, 173, 178], "yourself": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 179], "fallback": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "canvas_s": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 117], "512": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "min_siz": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 117], "skip_empti": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 117], "show_index": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "fig_siz": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "keep_aspect_ratio": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "sprite": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 117, 153, 157, 187], "ui": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 117], "canva": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 117], "who": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 159, 181, 186], "corner": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "aspect": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "ratio": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "indexerror": [13, 14, 15, 16, 17, 18, 19, 52, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96], "remot": [13, 15, 16, 17, 18, 19, 20, 44, 52, 56, 96, 163, 167, 177, 180, 184, 188, 189], "flow": [13, 15, 16, 17, 18, 19, 20, 44, 52, 56, 96, 104, 184, 187], "sandbox": [13, 15, 16, 17, 18, 19, 20, 44, 52, 56, 96, 180, 184], "168": [13, 15, 16, 17, 18, 19, 20, 44, 52, 56, 96, 180, 184], "123": [13, 15, 16, 17, 18, 19, 20, 44, 52, 56, 96], "jinahub": [13, 15, 16, 17, 18, 19, 20, 44, 52, 56, 96, 180, 184], "latest": [13, 15, 16, 17, 18, 19, 20, 44, 52, 56, 96, 180, 187], "send": [13, 15, 16, 17, 18, 19, 20, 44, 52, 56, 96, 160, 169, 179, 183], "local_cach": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96, 181], "cloud": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96, 115, 153, 159, 166, 184, 186, 187], "upload": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96, 179, 181, 184], "download": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96, 102, 105, 108, 129, 152, 165, 181], "public": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96, 184, 187], "kinda": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96], "clipboard": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96], "everyon": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96], "anyon": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96, 163], "surviv": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96], "complic": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96, 153, 161, 187], "lifetim": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96, 181], "atm": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96], "dai": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96, 186], "week": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96, 181], "temporari": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96], "transmiss": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96], "publicli": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96], "privat": [13, 15, 16, 17, 18, 19, 20, 40, 52, 56, 96, 184], "merg": [13, 15, 16, 17, 18, 19, 20, 46, 52, 54, 56, 96], "prioriti": [13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 96, 186], "reduct": [13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 96], "sequenti": [13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 96, 174, 179], "belong": [13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 96, 167, 188, 189], "kept": [13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 96], "non": [13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 96, 97, 102, 105, 108, 110, 114, 117, 125, 143, 164, 169, 172, 179, 181, 185], "sort": [13, 15, 16, 17, 18, 19, 20, 46, 52, 56, 96, 129], "IN": [13, 14, 15, 16, 17, 18, 19, 52, 54, 56, 58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95, 96], "seed": [13, 15, 16, 17, 18, 19, 20, 47, 52, 56, 96], "replac": [13, 15, 16, 17, 18, 19, 20, 47, 52, 56, 96, 159], "state": [13, 15, 16, 17, 18, 19, 20, 47, 52, 56, 96, 163], "produc": [13, 15, 16, 17, 18, 19, 20, 47, 52, 56, 96], "flatten_tag": [13, 15, 16, 17, 18, 19, 20, 35, 52, 56, 96, 155], "exclude_field": [13, 15, 16, 17, 18, 19, 20, 35, 52, 56, 96], "dialect": [13, 15, 16, 17, 18, 19, 20, 35, 37, 52, 56, 96, 104], "excel": [13, 15, 16, 17, 18, 19, 20, 35, 37, 52, 56, 96, 104], "with_head": [13, 15, 16, 17, 18, 19, 20, 35, 52, 56, 96], "tag__fieldnam": [13, 15, 16, 17, 18, 19, 20, 35, 52, 56, 96], "separ": [13, 15, 16, 17, 18, 19, 20, 35, 51, 52, 56, 96, 104, 155, 158, 161, 169, 172, 187], "wont": [13, 15, 16, 17, 18, 19, 20, 35, 52, 56, 96], "predefin": [13, 15, 16, 17, 18, 19, 20, 35, 52, 56, 96, 104, 167, 176], "savetxt": [13, 15, 16, 17, 18, 19, 20, 35, 52, 56, 96], "durat": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "size_ratio": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "inline_displai": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "gif": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "frame": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 102, 105, 126, 153], "millisecond": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "jupyt": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 164, 181, 187], "notebook": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96, 164, 170, 176, 187], "atribut": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "meth": [13, 15, 16, 17, 18, 19, 20, 43, 52, 56, 96], "newli": [13, 15, 16, 17, 18, 19, 20, 21, 52, 56, 96], "shape": [13, 15, 16, 17, 18, 19, 20, 21, 52, 56, 96, 102, 105, 114, 131, 151, 152, 154, 157, 159, 161, 169, 171, 188, 189], "dtype": [13, 15, 16, 17, 18, 19, 20, 21, 52, 56, 96, 102, 105, 110, 125, 151, 159, 161, 165, 169, 188, 189], "_file_ctx": [13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96], "export": [13, 15, 16, 17, 18, 19, 20, 36, 52, 56, 96, 169, 174], "ndarray_typ": [13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 102, 105, 120, 141, 142, 169], "documentarrayproto": [13, 15, 16, 17, 18, 19, 20, 33, 52, 56, 96, 181], "pydanticdocumentarrai": [13, 15, 16, 17, 18, 19, 20, 45, 52, 56, 96, 183], "filter_fn": [13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96], "traversablesequ": [13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96], "leav": [13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96], "root": [13, 15, 16, 17, 18, 19, 20, 46, 51, 52, 56, 96, 158, 159, 164, 172], "comma": [13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96, 158, 172], "c": [13, 15, 16, 17, 18, 19, 20, 51, 52, 54, 56, 96, 102, 105, 114, 156, 157, 160, 171, 172, 184, 187, 188, 189], "child": [13, 15, 16, 17, 18, 19, 20, 51, 52, 54, 56, 96], "cc": [13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96, 172], "mm": [13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96], "cm": [13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96, 172, 176], "reach": [13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96, 150, 184], "fly": [13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96, 161], "traverse_flattened_per_path": [13, 15, 16, 17, 18, 19, 20, 51, 52, 56, 96], "abstract": [14, 16, 66, 81, 82, 84], "subset": [15, 18], "doc_view": 15, "represent": [15, 127, 143, 145, 150, 154, 161, 164, 165, 174, 181, 186, 188, 189], "parent": [15, 161, 167, 183, 188, 189], "safeguard": 15, "legit": 15, "cake": [16, 19], "lie": [16, 19], "barrel": [16, 19], "roll": [16, 19], "scores__jaccard__valu": [16, 19], "neural": [16, 160, 187], "executor": [16, 152, 158, 160, 161], "doubl": [17, 54, 69, 70, 129, 171, 188, 189], "documentarrayload": [20, 22, 23], "dataloadermixin": [20, 22], "lazyrequestread": [20, 32, 33], "binaryiomixin": [20, 32, 33], "commoniomixin": [20, 32, 34], "csviomixin": [20, 32, 35], "dataframeiomixin": [20, 32, 36], "from_gen": [20, 32], "fromgeneratormixin": [20, 32, 37], "jsoniomixin": [20, 32, 38], "pbar": [20, 32], "qpscolumn": [20, 32, 39], "get_pbar": [20, 32, 39], "get_progressbar": [20, 32, 39], "pushpul": [20, 32], "pushpullmixin": [20, 32, 40], "plugin": [20, 105], "__delitem__": [24, 66, 72, 94], "dnn_model": 25, "dnn": [25, 165, 174], "solid": 25, "__module__": 25, "idea": [25, 160, 183, 186, 187], "tell": [25, 159], "subclass": [28, 66, 184], "bulk": [29, 165, 169, 171], "__getitem__": [30, 66, 72, 94], "render": [32, 39, 170, 186], "get_table_column": [32, 39], "max_refresh": [32, 39], "dam": [35, 50], "recurs": [37, 104, 167, 168, 188, 189], "sampling_r": [37, 104], "read_mod": [37, 104, 173], "to_dataturi": [37, 104], "exclude_regex": [37, 104], "dataset_path": [37, 104], "filter_field": [37, 104], "datasets_kwarg": [37, 104], "fp": [37, 104], "filepath": [37, 104], "line_format": [37, 104], "text_format": 39, "justifi": 39, "markup": 39, "table_column": 39, "textcolumn": 39, "total": [39, 97, 102, 143, 179], "transmit": 40, "threadpool": 42, "children": [46, 54], "__setitem__": [48, 66, 72, 94], "nlp": [50, 186], "machin": [52, 96, 159, 165, 167, 181], "qdrantclient": [52, 79, 81, 82, 84], "add_child": [53, 54], "with_traceback": [53, 54], "github": 54, "com": 54, "naiquevin": 54, "lookupi": 54, "mit": 54, "licens": [54, 187], "copyright": 54, "2013": 54, "vineet": 54, "naik": 54, "naikvin": 54, "gmail": 54, "permiss": 54, "herebi": 54, "grant": 54, "charg": 54, "obtain": 54, "softwar": [54, 154], "associ": 54, "deal": [54, 172, 184], "publish": 54, "sublicens": 54, "sell": 54, "permit": 54, "whom": 54, "furnish": 54, "subject": [54, 186], "shall": [54, 159, 161, 179], "substanti": 54, "portion": 54, "THE": 54, "AS": 54, "warranti": 54, "OF": 54, "kind": [54, 102, 163, 186], "express": [54, 159, 161, 163, 167, 171, 173, 176, 187], "OR": [54, 176], "impli": 54, "BUT": 54, "TO": 54, "merchant": 54, "FOR": 54, "purpos": [54, 158, 161, 163, 176, 186], "AND": [54, 176], "noninfring": 54, "NO": 54, "event": [54, 187], "author": [54, 161], "holder": 54, "BE": 54, "liabl": 54, "claim": 54, "damag": 54, "liabil": 54, "action": [54, 176], "contract": 54, "tort": 54, "aris": 54, "WITH": 54, "val": 54, "pair": [54, 160, 175], "hold": 54, "text__exact": 54, "els": [54, 129, 136, 160, 177], "text_exact": 54, "tags__nam": 54, "tree": 54, "op": 54, "negat": 54, "eg": [54, 129], "language__neq": 54, "rubi": [54, 188, 189], "framework__startswith": 54, "language__exact": 54, "php": [54, 188, 189], "leaf": 54, "tb": 54, "__traceback__": 54, "dunderkei": [54, 129], "everyth": [54, 161, 169, 181, 186], "underscor": [54, 129], "a__b__c": 54, "a__b": [54, 129], "precond": 54, "shortcut": 54, "partial": [54, 179], "commonli": 54, "precondit": 54, "mix": [54, 129, 175, 177, 186, 187], "classinfo": 54, "simplest": [56, 152], "getsetdel": [57, 58, 64, 69, 74, 79, 86, 91], "offsetmap": [57, 58, 62], "seqlik": [57, 58, 64, 69, 74, 79, 86, 91], "needs_id2offset_rebuild": [57, 74, 75], "initialize_t": [57, 86, 89], "create_t": [58, 62], "extend_doc_id": [58, 62], "get_id_by_offset": [58, 62], "get_ids_by_offset": [58, 62], "get_offsets_by_id": [58, 62], "get_offset_by_id": [58, 62], "get_all_id": [58, 62], "del_at_offset": [58, 62], "insert_at_offset": [58, 62], "set_at_offset": [58, 62], "shift_offset": [58, 62], "drop_tabl": [58, 62], "dump": [58, 62, 102, 105, 118, 127, 152, 157, 166], "execut": [58, 62, 174], "execute_mani": [58, 62], "kwd": [58, 63, 68, 69, 73, 74, 78, 79, 84, 86, 90, 91, 95], "in_memori": 62, "doc_id": 62, "shift_from": 62, "shift_step": 62, "data_fil": 62, "get_id": [64, 67], "delete_by_id": [64, 67], "delete_by_offset": [64, 67], "update_id": [64, 67], "9223372036854775807": 65, "_set_doc": 66, "_del_doc": 66, "_del_all_doc": 66, "wrapper": 66, "inner": 66, "whenev": 66, "likewis": 66, "idx": [67, 157], "data_id": 67, "_ids_map": 67, "concret": [72, 94], "container_type_nam": 89, "cur": 89, "_class_nam": [91, 92, 96], "_obj": [97, 102, 143], "unknown_fields_handl": [97, 102, 143, 164], "catch": [97, 102, 143, 164], "overwrit": [97, 102, 143], "emtpi": [97, 102, 143], "consum": [97, 102, 143, 178, 179], "_source_field": [101, 162], "default_factori": [101, 159], "repr": [101, 159], "hash": [101, 102, 105, 109, 112, 153, 159, 166, 175], "metadata": [101, 167], "myimag": [101, 162], "my_sett": [101, 162], "my_gett": [101, 162], "mmdoc": [101, 158, 159, 160, 162], "banner": [101, 158, 159, 160, 161, 162, 172], "jpeg": [101, 102, 105, 114, 152, 158, 159, 162, 169, 173], "eq": [101, 176], "unsafe_hash": 101, "frozen": 101, "type_var_map": [101, 162], "_field": 101, "annot": [101, 158, 161, 187], "appl": [101, 152, 163, 166, 169], "png": [101, 102, 105, 114, 152, 157, 160, 161, 163, 166, 171, 173, 184], "_types_registri": 101, "collid": 101, "obj": [101, 102, 105, 118, 127, 129], "getattributesmixin": [102, 105, 106], "audio": [102, 105, 153, 159, 161, 163, 166, 167, 185, 186, 187, 188, 189], "audiodatamixin": [102, 105, 107], "blobdatamixin": [102, 105, 108], "convertmixin": [102, 105, 110], "urifilemixin": [102, 105, 111], "featurehash": [102, 105], "featurehashmixin": [102, 105, 112], "imagedatamixin": [102, 105, 114], "mesh": [102, 105, 153, 159, 163, 166, 167, 187], "meshdatamixin": [102, 105, 115], "multimodalmixin": [102, 105, 116], "portingmixin": [102, 105, 118], "propertymixin": [102, 105, 119, 143, 145, 146], "protobufmixin": [102, 105, 120], "rich_embed": [102, 105], "colorboxembed": [102, 105, 122], "sugar": [102, 105, 180], "singletonsugarmixin": [102, 105, 124], "textdatamixin": [102, 105, 125], "videodatamixin": [102, 105, 126], "smart_union": [102, 127], "from_orm": [102, 127], "parse_fil": [102, 127], "parse_obj": [102, 127], "parse_raw": [102, 127], "schema_json": [102, 127], "update_forward_ref": [102, 127], "valid": [102, 104, 105, 118, 127, 159, 169, 175, 179, 181, 186, 187], "structvaluetyp": [102, 103, 105, 119], "basic": [102, 159, 160, 161, 167, 175, 185, 186, 187], "3d": [102, 105, 115, 153, 163, 166, 167, 187], "d1": [102, 163, 164, 165, 170, 173], "d3": [102, 164, 165, 170], "d4": [102, 164, 165], "foo": [102, 164, 179, 180, 184], "d0": [102, 164, 165, 170], "d2": [102, 164, 165, 170], "torchvis": [102, 165, 174], "usr": 102, "jpg": [102, 129, 152, 165, 169, 171, 173, 179, 182], "resnet50": [102, 165, 174], "pretrain": [102, 165, 174], "organ": [102, 167], "charset": [102, 105, 108, 110, 125], "base64": [102, 105, 108, 110, 118, 125, 163, 187], "charact": [102, 105, 108, 110, 125, 156, 175], "regist": [102, 105, 108, 110, 125], "iana": [102, 105, 108, 110, 125], "arbitrari": [102, 105, 108, 110, 112, 125, 158, 161, 181, 188, 189], "octet": [102, 105, 108, 110, 125], "form": [102, 105, 108, 110, 125, 127, 176, 181], "rule": [102, 105, 108, 110, 125, 169, 179], "7bit": [102, 105, 108, 110, 125], "bit": [102, 105, 108, 110, 125, 152, 171, 172, 188, 189], "ascii": [102, 105, 108, 110, 125, 188, 189], "width": [102, 105, 107, 114, 117, 167, 168, 188, 189], "height": [102, 105, 114], "_valid_": [102, 105, 110, 114], "buffer": [102, 105, 110, 140, 150, 152, 163, 169, 188, 189], "effort": [102, 105, 109, 169], "image_format": [102, 105, 114], "window_shap": [102, 105, 114, 152], "stride": [102, 105, 114, 152], "as_chunk": [102, 105, 114, 115, 152], "slide": [102, 105, 114, 152], "window": [102, 105, 114, 152, 187], "view": [102, 105, 114, 152], "desir": [102, 105, 114], "h": [102, 105, 114, 176], "target_s": [102, 105, 114], "denot": [102, 105, 114], "vertic": [102, 105, 114, 168, 184], "horizont": [102, 105, 114, 168, 184], "patch": [102, 105, 114], "area": [102, 105, 114, 136], "outsid": [102, 105, 114], "zero": [102, 104, 105, 114, 132, 134, 135, 137, 173, 188, 189], "vocab": [102, 105, 125, 156], "delimit": [102, 105, 125], "max_length": [102, 105, 125, 156], "int64": [102, 105, 125, 188, 189], "1d": [102, 105, 125, 137], "build_vocab": [102, 105, 125], "entri": [102, 105, 125, 137], "cut": [102, 105, 125, 152], "begin": [102, 105, 125, 186], "shorter": [102, 105, 125], "datauri": [102, 104, 105, 110, 114], "max_valu": [102, 105, 112], "1000000": [102, 105, 112], "trick": [102, 105, 112, 183], "caus": [102, 105, 112], "collis": [102, 105, 112], "overal": [102, 105, 112, 157, 184], "csr_matrix": [102, 105, 112, 131, 138, 178], "bytearrai": [102, 105, 118], "basemodel": [102, 105, 121, 127, 183], "counter": [102, 105, 125], "text_field": [102, 105, 125], "pillow": [102, 105, 114, 152, 187], "header": [102, 105, 114, 129, 179], "pilimag": [102, 105, 114], "geometri": [102, 105, 115], "attr": [102, 105, 125], "only_keyfram": [102, 105, 126, 157], "keyfram": [102, 105, 126], "inv_norm": [102, 105, 117, 182], "1920": [102, 105, 117], "invers": [102, 105, 114, 117], "float32": [102, 105, 114, 117, 151, 159, 165, 174, 178, 188, 189], "uint8": [102, 105, 114, 117, 159, 161, 181], "sample_r": [102, 105, 107], "44100": [102, 105, 107], "sample_width": [102, 105, 107], "wav": [102, 105, 107, 153, 159], "mono": [102, 105, 107], "stereo": [102, 105, 107], "treat": [102, 105, 107], "frame_r": [102, 105, 126], "codec": [102, 105, 126], "h264": [102, 105, 126], "mp4": [102, 105, 126, 157], "decod": [102, 105, 126, 156], "original_channel_axi": [102, 105, 114], "new_channel_axi": [102, 105, 114], "move": [102, 105, 114, 161, 184], "img_mean": [102, 105, 114], "485": [102, 105, 114], "456": [102, 105, 114], "406": [102, 105, 114], "img_std": [102, 105, 114], "229": [102, 105, 114], "225": [102, 105, 114], "deviat": [102, 105, 114], "std": [102, 105, 114, 178], "train": [102, 105, 114, 160, 186], "scratch": [102, 105, 114], "calcul": [102, 105, 114], "imagenet": [102, 105, 114], "pretrian": [102, 105, 114], "grai": [102, 105, 114], "scale": [102, 105, 114, 186, 187], "black": [102, 105, 114, 158], "white": [102, 105, 114, 158, 159], "rgb": [102, 105, 114], "mnist": [102, 105, 114], "stddev": [102, 105, 114], "greyscal": [102, 105, 114], "resampl": [102, 105, 114], "dumper": [102, 105, 118], "documentproto": [102, 105, 120, 141, 169, 181], "_reference_doc": 103, "_metadata": [103, 188, 189], "beforehand": 104, "shell": 104, "wildcard": 104, "directori": 104, "subdirectori": 104, "rate": 104, "rb": 104, "plan": 104, "index_fil": 104, "search_fil": 104, "handler": 104, "auto": [104, 170, 178, 187], "hug": 104, "face": [104, 186], "huggingfac": 104, "load_dataset": 104, "package_refer": 104, "loading_method": 104, "html": [104, 156, 163], "univers": [109, 166], "convers": [110, 166], "_propertymixin": 119, "sugari": [124, 166], "syntax": [124, 150, 159, 160, 166, 172, 180, 186], "_namedscor": 127, "validationerror": 127, "_fields_set": 127, "__dict__": 127, "__fields_set__": 127, "trust": 127, "exclud": [127, 169], "deep": [127, 152, 154, 161, 164, 165, 171, 172, 186, 187], "preced": 127, "dictstrani": 127, "by_alia": 127, "skip_default": 127, "exclude_unset": 127, "exclude_default": 127, "exclude_non": [127, 169, 176], "models_as_dict": 127, "dumps_kwarg": 127, "suppli": [127, 188, 189], "unicod": [127, 188, 189], "utf8": 127, "allow_pickl": 127, "ref_templ": 127, "localn": 127, "globaln": 127, "target": [129, 137], "new_fn": 129, "removed_at": 129, "label": [129, 159, 188, 189], "deprec": 129, "old_fn_nam": 129, "_dict": 129, "fieldnam": 129, "dunderscor": 129, "referenc": 129, "referrenc": 129, "struct": [129, 188, 189], "use_uuid1": 129, "uuid": [129, 164], "mac": [129, 187], "uuid1": [129, 164], "afford": 129, "closer": 129, "uuid4": 129, "relat": [129, 167, 180, 184, 186, 187], "lost": [129, 179], "explicitli": [129, 169], "mermaid_url": 129, "suffix": 129, "svg": 129, "decor": [129, 161, 184], "wb": 129, "klass": 129, "dikt": 129, "file_path": 129, "default_protocol": 129, "default_compress": 129, "docarray_fashion_mnist": 129, "gzip": [129, 169, 179, 181], "bin": [129, 181], "sparse_cosin": [130, 131, 132], "sparse_sqeuclidean": [130, 131, 132], "sparse_euclidean": [130, 131, 132], "pdist": [130, 131], "cdist": [130, 131], "x_mat": [131, 132, 134, 135, 137], "pairwis": 131, "coo_matrix": [131, 165, 171], "ndim": [131, 132, 134, 135, 138, 188, 189], "y_mat": [131, 132, 134, 135], "y": [131, 138, 167, 188, 189], "n_x": 131, "n_y": 131, "dist": 131, "j": [131, 186], "ep": [132, 134, 135, 137], "1e": [132, 134, 135, 137], "07": [132, 134, 135, 137], "jitter": [132, 134, 135, 137], "divd": [132, 134, 135, 137], "binary_relev": 136, "precis": [136, 175, 179], "been": [136, 183, 186], "nonzero": [136, 188, 189], "en": 136, "wikipedia": 136, "org": [136, 156, 163], "wiki": 136, "evaluation_measures_": 136, "information_retriev": 136, "percentag": 136, "occur": 136, "hit": [136, 152], "curv": 136, "reciproc": 136, "max_rel": [136, 175], "harmon": 136, "f1": [136, 164], "discount": 136, "cumul": 136, "gain": 136, "dcg": 136, "real": [136, 152, 161, 175, 183, 185], "www": [136, 156, 163], "stanford": 136, "edu": 136, "cs276": 136, "handout": 136, "evaluationnew": 136, "pdf": [136, 163], "6309": 136, "4307": 136, "ndcg": 136, "t_rang": 137, "x_rang": 137, "2d": 137, "descend": 137, "largest": 137, "biggest": [137, 186], "x_mat_best": 137, "x_inds_best": 137, "x_ind": 137, "raise_error_if_not_arrai": 138, "tf": [138, 165, 174], "num_row": 138, "sp": [138, 165, 178], "detach": 138, "read_ndarrai": [139, 141, 142], "flush_ndarrai": [139, 141, 142], "parse_proto": [139, 141], "flush_proto": [139, 141], "representmixin": [143, 145, 147], "_reference_n": 144, "subpackag": 149, "submodul": 149, "project": [150, 151, 163, 184], "bump": 150, "minor": [150, 176], "autom": 150, "releas": [150, 184, 186], "bug": 150, "track": 150, "explain": [150, 159], "rational": [150, 161], "behind": [150, 161], "introduc": [150, 164, 169, 171, 183], "involv": 150, "Its": [150, 169, 186], "intention": 150, "undocu": 150, "backward": 150, "concept": [150, 186], "major": [150, 186], "wire": [150, 169, 186, 187], "migrat": 150, "favor": 150, "ed": [150, 169], "unschema": [150, 169], "awar": 150, "stick": 150, "archiv": 150, "acknowledg": 150, "caffe": 150, "unifi": [150, 186], "terminologi": 150, "fluent": 150, "remark": [150, 181], "30833": 151, "olleh": 151, "program": [151, 179], "ffmpeg": 151, "multimedia": 151, "pydub": 151, "manipul": [151, 186], "easi": [151, 155, 156, 159, 161, 164, 171, 172, 184, 186, 187], "librosa": 151, "music": 151, "analysi": 151, "pyaudioanalysi": 151, "signal": 151, "matplotlib": [152, 187], "255": [152, 163], "641": 152, "resiz": [152, 166], "downsampl": 152, "upsampl": 152, "meet": [152, 187], "chain": [152, 166], "feed": [152, 184], "resnet": 152, "2489083": 152, "proc": 152, "yep": 152, "uneat": 152, "quick": [152, 163], "img": 152, "But": [152, 161, 163, 169, 171, 178, 183], "nice": [152, 156, 183], "overview": [152, 164], "rich": [152, 172, 181, 186], "salienc": 152, "krusti": 152, "burger": 152, "yellow": 152, "schoolbu": 152, "intent": 152, "guess": [152, 167, 179, 188, 189], "breakdown": 152, "simpler": 152, "approach": 152, "datatyp": 152, "792": 152, "180": 152, "three": [152, 156, 157, 163, 171, 178, 186], "7585b8aa": 152, "3826": 152, "11ec": [152, 155], "bc1a": 152, "1e008a366d48": [152, 155], "h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0": 152, "simpson": 152, "hmm": 152, "whole": [152, 179, 181, 183], "overlap": [152, 172, 181], "oversampl": 152, "segment": 153, "tool": 153, "trimesh": [154, 187], "polygon": 154, "profession": 154, "commerci": 154, "uniti": 154, "blender": 154, "repeat": [154, 181, 183, 188, 189], "uniformli": 154, "easier": [154, 163, 169], "vike": 154, "glb": 154, "pictur": [154, 167, 168, 184], "depict": [154, 167, 172, 186], "freeli": 155, "tabular": [155, 159, 163], "usernam": 155, "booker12": 155, "9012": 155, "rachel": 155, "booker": 155, "grey07": 155, "2070": 155, "laura": 155, "grei": 155, "johnson81": 155, "4081": 155, "craig": 155, "johnson": 155, "jenkins46": 155, "9346": 155, "mari": 155, "jenkin": 155, "smith79": 155, "5079": 155, "jami": 155, "smith": 155, "attempt": 155, "fail": 155, "manual": [155, 165], "tmp": 155, "thing": [155, 157, 169, 179, 183, 184], "english": 155, "german": 155, "hallo": 155, "world": [155, 156, 159, 161, 163, 164, 169, 171, 173, 181, 183, 187], "welt": 155, "tag__english": 155, "tag__german": 155, "029388a4": 155, "3830": 155, "b6b2": 155, "0293968c": 155, "418de220": 155, "aad8": 155, "418dec52": 155, "inlin": [156, 163], "w3": 156, "histori": 156, "19921103": 156, "hypertext": 156, "3c128f326fbf11ec90821e008a366d49": 156, "\u0928\u092e\u0938": 156, "\u0924": 156, "\u0926": 156, "\u0928": 156, "\u092f": 156, "\u4f60\u597d\u4e16\u754c": 156, "\u3053\u3093\u306b\u3061\u306f\u4e16\u754c": 156, "\u043f\u0440\u0438\u0432\u0435\u0442": 156, "\u043c\u0438\u0440": 156, "thousand": [156, 181], "finer": 156, "5a12d7a86fbf11ec99a21e008a366d49": 156, "5a12e2346fbf11ec99a21e008a366d49": 156, "5a12e2f26fbf11ec99a21e008a366d49": 156, "5a12e3886fbf11ec99a21e008a366d49": 156, "5a12e41e6fbf11ec99a21e008a366d49": 156, "5a12e4966fbf11ec99a21e008a366d49": 156, "goodby": 156, "symbol": 156, "phrase": 156, "sentenc": [156, 161], "bonu": 156, "procedur": [156, 179, 183], "she": 156, "enter": [156, 183], "room": 156, "pride": [156, 163], "prejudic": [156, 163], "gutenberg": [156, 163], "1342": [156, 163], "txt": [156, 163], "strip": 156, "scores__jaccard": 156, "staircas": 156, "breakfast": 156, "congratul": 156, "air": 156, "usual": [156, 162, 165], "ungraci": 156, "mr": 156, "bennet": 156, "alon": 156, "f47f7448709811ec960a1e008a366d49": 156, "6666666666666666": 156, "7142857142857143": 156, "av": [157, 187], "250": [157, 184], "176": [157, 181], "320": 157, "dim": [157, 188, 189], "got": [157, 181, 183], "176x320": 157, "infer": 157, "framer": 157, "around": [157, 179], "25fp": 157, "mov": 157, "redund": 157, "enumer": [157, 179], "60fp": 157, "60": 157, "nois": [158, 159, 175], "question": [158, 179], "me": [158, 186], "reiter": 158, "convent": 158, "field1": [158, 176], "field2": 158, "bracket": [158, 176], "nonetyp": [158, 175], "accept": [158, 159, 162, 163, 175, 176], "front": 158, "deepli": 158, "nested_field1": 158, "bannerdoc": [158, 159], "columnarticl": [158, 159], "websit": [158, 159], "c1": [158, 172], "c2": 158, "unawar": 159, "mymultimodaldoc": 159, "avatar": 159, "f3b193bbe8403c3ce1599b82f941f68a": 159, "18c7ca1c829fe819250faa4914bc45c1": 159, "504": 159, "1ee7fadddc23fc72365b2069f82d4bb4": 159, "fact": [159, 169], "is_dataclass": 159, "mmdoc1": 159, "mmdoc2": 159, "sequel": [159, 178], "pixel": 159, "soundfx": 159, "90c744c5155c2356d27f8c91955f70f7": 159, "c9d71990088fb0d8db3c83a6bd35650d": 159, "22e27708288e70813673711c86f834e": 159, "05ad36dfb0c520027b18c582d205c176": 159, "63248": 159, "unannot": 159, "17c77b443471f9d752cbcc360174b65f": 159, "some_field": 159, "other_field": 159, "15725d705b6c8d7e99908d380d614fa5": 159, "48a84621d51d94383b86db89e64022a3": 159, "1cb5cc74f1f986876a0c4c87201b9a28": 159, "instruct": 159, "complet": [159, 173, 175, 184, 186, 187], "52d9dcca4bc30cd0ef3b82917459cd32": 159, "04edacf582c5aa7b0bcfcf3d3e0a57bf": 159, "f5e9f105162e26d1d42ef7e2d363095a": 159, "d7d0b506f690890113e6a601ef80f8c6": 159, "feature_imag": 159, "75a3df4c26498d338589d2b2c20e156": 159, "cb1df29a384a6d39aa81e5af93316c4d": 159, "65cce8eb564f9ce136ff693b8ecb8f53": 159, "4dc4497d608b4f96094711e90cfb8078": 159, "f7b3aaefeab73af18f8372a594405b46": 159, "encourag": 159, "think": [159, 172], "m_r": 159, "assert": [159, 162], "mutabl": 159, "builtin": 159, "great": 159, "scientist": [159, 177, 183, 185, 186, 187], "intuit": [159, 161, 164, 183, 186, 187], "straightforward": [159, 161], "aka": [159, 161], "far": [160, 161, 172], "nutshel": [160, 161, 177, 183], "develop": [160, 184, 186, 187], "openai": 160, "contrast": 160, "varieti": 160, "pil": 160, "is_avail": 160, "vit": 160, "unsqueez": 160, "diagram": 160, "dog": [160, 161], "cat": [160, 161], "no_grad": 160, "image_featur": 160, "encode_imag": 160, "text_featur": 160, "encode_text": 160, "3285e": 160, "6554e": 160, "3394e": 160, "5605e": 160, "2397e": 160, "0547": 160, "0061": 160, "0495": 160, "6638": 160, "1281": 160, "4950": 160, "1447": 160, "0225": 160, "2909": 160, "4472": 160, "3420": 160, "1798": 160, "1981": 160, "2040": 160, "1533": 160, "4514": 160, "5664": 160, "0596": 160, "m1": [160, 162], "m2": [160, 162], "m3": 160, "scalabl": [160, 184, 186], "microservic": [160, 169, 181, 184, 186], "extrem": [160, 168, 186], "touch": 160, "v": [160, 178, 184, 186, 187, 189], "clip_client": 160, "demo": 160, "ca": 160, "51000": 160, "3137": 160, "1458": 160, "303": 160, "8877": 160, "2546": 160, "11365": 160, "05466": 160, "005997": 160, "0498": 160, "663": 160, "1274": 160, "4944": 160, "1442": 160, "02275": 160, "291": 160, "4468": 160, "3416": 160, "1985": 160, "204": 160, "1534": 160, "4507": 160, "0598": 160, "wparticl": 161, "headlin": 161, "flight": 161, "pet": 161, "pick": 161, "seat": 161, "anim": 161, "calm": 161, "nathan": 161, "diller": 161, "travel": 161, "destin": [161, 172], "cb25ccea837e8e2b33ef1e050bae1de2": 161, "df56a39e24f441108742b533c8710705": 161, "198": 161, "254": 161, "828f9c346a9f5862a55ea75188b1ae19": 161, "a76803e1bcddd0960e1a01d47132c064": 161, "spend": 161, "mixtur": 161, "card": 161, "washington": 161, "sound": [161, 172], "bbc": 161, "transfer": [161, 181, 183, 186, 187], "seem": [161, 186], "doc1": [161, 181], "doc2": [161, 181], "doc0": 161, "Or": [161, 184], "jointli": 161, "relationship": 161, "redesign": [161, 186], "why": [161, 169, 185, 187], "implicit": 161, "answer": [161, 179], "trivial": 161, "newspap": 161, "plai": [161, 185], "tackl": 161, "eleg": 161, "translat": 162, "bde1ab74306c2f63188069879e3945ac": 162, "cd594a6870a8921d7a9c6b0ec764251d": 162, "xff": 162, "xd8": 162, "xe0": 162, "x00": [162, 169, 181], "x10jfif": 162, "x01": [162, 169, 181], "x0": 162, "56810": 162, "recov": 162, "invok": 162, "im": 162, "unset": 163, "assign": [163, 165, 171], "among": 163, "spmatrix": [163, 165, 167], "amp": 163, "intermedi": [163, 169, 181, 186], "mutual": 163, "exclus": 163, "7623808c6d6211ec9cf21e008a366d49": 163, "reset": 163, "automat": [163, 164, 169, 171, 185], "grab": 163, "b4d675466d6211ecae8d1e008a366d49": 163, "2808eeb86d6311ecaddb1e008a366d49": 163, "ebook": 163, "jane": 163, "austen": 163, "anywher": 163, "wor": 163, "ivborw0kggoaaaansuheugaaaaua": 163, "aaafcayaaacnbyblaaaaheleqvqi12p4": 163, "w38giaxdibke0dhxgljnbaao": 163, "9txl0y4ohwaaaabjru5erkjggg": 163, "load_uri_to_": 163, "load_uri_to_datauri": 163, "5dd542406d3f11eca3241e008a366d49": 164, "hex": 164, "though": [164, 178], "forget": [164, 186], "autocomplet": 164, "a14effee6d3e11ec8bde1e008a366d49": 164, "a14f00986d3e11ec8bde1e008a366d49": 164, "a14f01a66d3e11ec8bde1e008a366d49": 164, "a14f023c6d3e11ec8bde1e008a366d49": 164, "googl": [164, 181, 185, 186, 187, 188, 189], "colab": [164, 170, 181, 186, 187], "prettifi": 164, "caught": 164, "f957e84a6d4311ecbea21e008a366d49": 164, "silent": 164, "attributeerror": 164, "4479829968": 164, "piec": 165, "d5": 165, "from_dens": 165, "unlik": [165, 169], "cast": [165, 169], "assig": 165, "float64": [165, 188, 189], "stai": [165, 186, 187], "smarter": 165, "loop": [165, 169, 171, 178, 179], "00003": 165, "ten": [165, 175], "63a39fa86d6911eca6fa1e008a366d49": 165, "63a39aee6d6911eca6fa1e008a366d49": 165, "63a399d66d6911eca6fa1e008a366d49": 165, "63a39b346d6911eca6fa1e008a366d49": 165, "63a3999a6d6911eca6fa1e008a366d49": 165, "63a39a626d6911eca6fa1e008a366d49": 165, "63a397ba6d6911eca6fa1e008a366d49": 165, "63a39a1c6d6911eca6fa1e008a366d49": 165, "63a39ab26d6911eca6fa1e008a366d49": 165, "63a399046d6911eca6fa1e008a366d49": 165, "63a399546d6911eca6fa1e008a366d49": 165, "apple1": 166, "equival": 166, "hexdigest": [167, 188, 189], "raw": [167, 188, 189], "depth": [167, 168, 172, 183, 188, 189], "cross": [167, 186, 187, 188, 189], "mime": [167, 188, 189], "coordin": [167, 188, 189], "crop": [167, 188, 189], "timestamp": [167, 176, 188, 189], "comprehens": [167, 186, 187], "categor": 167, "comprehend": 167, "scienc": [167, 187], "commun": [167, 175, 187], "7f907d786d6c11ec840a1e008a366d49": 168, "7f907c606d6c11ec840a1e008a366d49": 168, "7f907cba6d6c11ec840a1e008a366d49": 168, "7f907ab26d6c11ec840a1e008a366d49": 168, "7f907c106d6c11ec840a1e008a366d49": 168, "crucial": [168, 169, 181], "fortun": 168, "thank": [168, 171], "shown": [168, 185], "wherea": [168, 169, 186], "receiv": [169, 175, 183], "compact": [169, 171, 181], "reader": [169, 172, 183], "wonder": 169, "aren": 169, "nonetheless": [169, 181], "decis": [169, 186], "sake": [169, 172], "clariti": [169, 172], "webservic": [169, 181, 183, 187], "fastapi": [169, 181, 182, 187], "d_as_json": 169, "641032d677b311ecb67a1e008a366d49": 169, "null": [169, 181], "db66bc2e77b311eca5f51e008a366d49": 169, "mimetyp": 169, "aqaaaaaaaaacaaaaaaaaaamaaaaaaaaa": 169, "i8": 169, "clsname": 169, "appreci": [169, 186], "uppercas": 169, "cdbc4f7a77b411ec96ad1e008a366d49": 169, "ey": 169, "handcraft": 169, "smoothli": 169, "encount": 169, "thumb": 169, "friend": [169, 181, 183, 186], "upset": 169, "ever": [169, 183, 186], "probabl": [169, 171, 172, 183, 187], "d_byte": 169, "d_r": 169, "x80": [169, 181], "x03cdocarrai": [169, 181], "ndocument": [169, 181], "nq": [169, 181], "x81q": [169, 181], "x02x": 169, "x05": [169, 181], "x00_dataq": [169, 181], "ndocumentdata": 169, "x04": [169, 181], "x06": 169, "x0e": 169, "x00_reference_docq": 169, "x07h": 169, "x01x": 169, "x02": [169, 181], "x00idq": 169, "x08x": 169, "x005d29a9f26d5911ec88d51e008a366d49q": 169, "tx": 169, "x00parent_": 169, "3644c0fa6d5a11ecbb081e008a366d49": 169, "110": [169, 175], "666": 169, "spooki": 169, "deseri": [169, 181], "protcol": [169, 181], "ganjzg9jyxjyyxkuzg9jdw1lbnqkrg9jdw1lbnqkcqapgxebfxecwauaaabfzgf0yxedy2rvy2fycmf5lmrvy3vtzw50lmrhdgekrg9jdw1lbnreyxrhcneekyfxbx1xbihydgaaaf9yzwzlcmvuy2vfzg9jcqdoavgcaaaaawrxcfggaaaazmzjnty3odg3mzaymtfly2e4njmxztawogeznjzkndlxcvgjaaaacgfyzw50x2lkcqpowasaaabncmfudwxhcml0exeltlgjaaaaywrqywnlbmn5cqxowayaaabidwzmzxjxdu5ybaaaagjsb2jxdk5ycqaaag1pbwvfdhlwzxepwaoaaab0zxh0l3bsywlucrbybaaaahrlehrxevgfaaaaagvsbg9xelghaaaay29udgvudhettlggaaaad2vpz2h0crrowamaaab1cmlxfu5ybaaaahrhz3nxfk5ybgaaag9mznnldhextlgiaaaabg9jyxrpb25xge5ycqaaagvtymvkzgluz3ezxxeakesbswjla2vycaaaag1vzgfsaxr5crtowasaaabldmfsdwf0aw9uc3ectlggaaaac2nvcmvzcr1owayaaabjahvua3nxhk5ybwaaag1hdgnozxnxh051ynnilg": 169, "156": 169, "d_as_dict": 169, "5596c84c77b711ecafed1e008a366d49": 169, "d_proto": 169, "d66463b46d6a11ecbf891e008a366d49": 169, "e4b215106d6a11ecb28b1e008a366d49": 169, "hundr": 169, "ineffici": [169, 188, 189], "tast": 171, "talk": [171, 184], "element_selector": 171, "attribute_selector": 171, "scores__cosine__valu": 171, "8d41ce5c6f0d11eca2181e008a366d49": 171, "8d41cfa66f0d11eca2181e008a366d49": 171, "8d41cff66f0d11eca2181e008a366d49": 171, "db60ab8a6f0d11ec99511e008a366d49": 171, "db60abda6f0d11ec99511e008a366d49": 171, "db60c12e6f0d11ec99511e008a366d49": 171, "db60c1886f0d11ec99511e008a366d49": 171, "db60c4266f0d11ec99511e008a366d49": 171, "db60c46c6f0d11ec99511e008a366d49": 171, "285db6586f0e11ec99401e008a366d49": 171, "285db6b26f0e11ec99401e008a366d49": 171, "285dbff46f0e11ec99401e008a366d49": 171, "285dc0586f0e11ec99401e008a366d49": 171, "285db3606f0e11ec99401e008a366d49": 171, "285dcc746f0e11ec99401e008a366d49": 171, "285dccce6f0e11ec99401e008a366d49": 171, "285dce0e6f0e11ec99401e008a366d49": 171, "285dce5e6f0e11ec99401e008a366d49": 171, "285db4fa6f0e11ec99401e008a366d49": 171, "285dcf946f0e11ec99401e008a366d49": 171, "285dcfda6f0e11ec99401e008a366d49": 171, "285dd1066f0e11ec99401e008a366d49": 171, "285dd16a6f0e11ec99401e008a366d49": 171, "285db55e6f0e11ec99401e008a366d49": 171, "shot": [171, 181], "095cd76a6f0f11ec82211e008a366d49": 171, "095cd8d26f0f11ec82211e008a366d49": 171, "095cd92c6f0f11ec82211e008a366d49": 171, "coo": 171, "matric": 171, "sp_emb": 171, "key1": 171, "tags__key1": 171, "5164d792709a11ec9ae71e008a366d49": 171, "5164d986709a11ec9ae71e008a366d49": 171, "5164d922709a11ec9ae71e008a366d49": 171, "006942970007385196": 171, "48303283924326845": 171, "3859268166910603": 171, "220446049250313e": 171, "quickli": [171, 173, 181], "my": [172, 175], "favorit": [172, 186], "ask": 172, "coin": 172, "exploit": 172, "routin": [172, 186], "a04633546e6211ec8ad31e008a366d49": 172, "af7923406e6211ecbc811e008a366d49": 172, "ellipsi": 172, "3m": 172, "excit": [172, 177], "834f14666e6511ec8e331e008a366d49": 172, "834f32846e6511ec8e331e008a366d49": 172, "4883468432": 172, "7e27fa246e6611ec9a441e008a366d49": 172, "7e27fb826e6611ec9a441e008a366d49": 172, "99851c7a6e6611ecba351e008a366d49": 172, "4874066256": 172, "No": [172, 177, 181, 187], "worri": [172, 184], "techniqu": [172, 179], "4513619088": 172, "remain": [172, 177], "path1": 172, "path2": 172, "path3": 172, "rout": 172, "mc": 172, "2f94c1426ee511ecbb491e008a366d49": 172, "2f94cd9a6ee511ecbb491e008a366d49": 172, "2f94cdfe6ee511ecbb491e008a366d49": 172, "2f94c4086ee511ecbb491e008a366d49": 172, "2f94c46c6ee511ecbb491e008a366d49": 172, "circl": 172, "intend": 172, "4912623312": 172, "4905929552": 172, "4913359824": 172, "deeper": 172, "ye": [172, 179], "liter": 172, "anymor": 172, "b_da": 172, "4887691536": 172, "4887691600": 172, "4887691408": 172, "232": 172, "categori": 172, "rv": 172, "4869273936": 172, "4876081680": 172, "4876735056": 172, "spoiler": 172, "alert": 172, "4453362704": 173, "4446140816": 173, "4866772176": 173, "concaten": 173, "da3": 173, "5024988176": 173, "4525853328": 173, "4452802192": 173, "afterward": [173, 181], "surpris": 173, "authent": 173, "mention": [173, 183], "glob": 173, "da_jpg": 173, "da_png": 173, "da_al": 173, "astyp": [174, 178], "mlp": 174, "onnx": [174, 186, 187], "nn": [174, 187], "linear": 174, "in_featur": 174, "out_featur": 174, "relu": 174, "preliminari": 174, "cli": 174, "rand": 174, "do_constant_fold": 174, "constant": [174, 181, 186], "fold": 174, "input_nam": 174, "output_nam": 174, "dynamic_ax": 174, "ax": 174, "inferencesess": 174, "onnxruntim": 174, "0506": 174, "0015": 174, "1154": 174, "1630": 174, "2376": 174, "0576": 174, "4109": 174, "0052": 174, "0027": 174, "0800": 174, "0928": 174, "1326": 174, "2256": 174, "1649": 174, "0435": 174, "2312": 174, "0068": 174, "0991": 174, "0767": 174, "0501": 174, "1393": 174, "0965": 174, "2062": 174, "my_text_model": 174, "da_predict": 175, "da_groundtruth": 175, "imperfect": 175, "defaultdict": 175, "predict": 175, "fake": 175, "individu": 175, "recogn": 175, "p_da": 175, "g_da": 175, "42dc84b26fab11ecbc181e008a366d49": 175, "42dc98086fab11ecbc181e008a366d49": 175, "badli": 175, "mongodb": 176, "next": [176, 179, 184, 187], "prepar": 176, "21": 176, "uom": 176, "paper": 176, "planner": 176, "75": 176, "postcard": 176, "45": 176, "operator1": 176, "value1": 176, "dunder": 176, "tags__timestamp": 176, "substitut": 176, "curli": 176, "ne": 176, "gt": 176, "greater": [176, 188, 189], "gte": 176, "lt": 176, "nin": 176, "regex": 176, "pprint": 176, "pretti": [176, 182, 185, 187], "92aee5d665d0c4dd34db10d83642ad": 176, "1a9d2139b02bc1c7842ecda94b347889": 176, "tags__h": 176, "4045a9659875fd1299e482d710753de3": 176, "cf7691c445220b94b88ff116911bad24": 176, "tags__w": 176, "44c6a4b18eaa005c6dbe15a28a32ebc": 176, "join": [176, 179], "claus": 176, "22985b71b6d483c31cbe507ed4d02bd1": 176, "a071faf19feac5809642e3afcd3a5878": 176, "411ecc70a71a3f00fc3259bf08c239d1": 176, "greatli": [177, 186, 187], "acceler": [177, 186, 187], "accpet": 178, "one_million_doc": 178, "rh": 178, "lh": 178, "20000000298023224": 178, "5620499849319458": 178, "6763054132461548": 178, "allevi": 178, "oom": 178, "benchmark": [178, 181, 186], "1_000_000": 178, "768": 178, "18": 178, "dev": [178, 187], "1_000": 178, "97": 178, "inter": 179, "naiv": 179, "popular": 179, "charm": 179, "6000": 179, "6016": 179, "signific": 179, "tip": 179, "modif": 179, "happen": 179, "peopl": [179, 184, 186], "told": 179, "whatev": 179, "especi": [179, 185], "pipelin": 179, "1024": 179, "jump": 179, "whiteboard": 179, "144": 179, "anywai": 179, "awai": [179, 186], "rather": 179, "wait": 179, "btw": 179, "immedid": 179, "cv": 179, "inevit": 179, "domin": 179, "476": 179, "326": 179, "shed": 179, "light": 179, "mindset": 179, "potenti": [179, 183], "gen": 179, "_head": 179, "_get_chunk": 179, "_batch": 179, "_to_stream_byt": 179, "num_doc_in_chunk": 179, "_tail": 179, "_get_cloud_api": 179, "v2": 179, "rpc": 179, "artifact": 179, "12345": [180, 184], "hi": 180, "alex": 180, "laptop": [180, 181], "coquitts7": 180, "wide": [180, 181], "netloc": 180, "websocket": [180, 184], "jinhub": 180, "55566": 180, "8081": 180, "porcess": 180, "anytim": [181, 186, 187], "abil": 181, "a677577877b611eca3811e008a366d49": 181, "a67758f477b611eca3811e008a366d49": 181, "da_r": 181, "descrbi": 181, "x03": 181, "cdocarrai": 181, "portabl": [181, 186], "insecur": 181, "2gb": 181, "bz2": 181, "lzma": 181, "zlib": 181, "jan": 181, "2022": 181, "interpret": 181, "argu": 181, "realist": 181, "unreal": 181, "rel": 181, "doc1_byt": 181, "doc2_byt": 181, "uint64": [181, 188, 189], "uint32": [181, 188, 189], "dock_byt": 181, "dock": 181, "da_rec": 181, "simplifi": [181, 187], "consumpt": [181, 186], "da_gener": 181, "xxxl": 181, "nut": 181, "d_str": 181, "bcjngebawhuaaad": 181, "iw": 181, "uqdpl9udnsfvomzb8m7skigrkntiyotqynzmwmzexzwnim2i1mwuwmdhhmzy2zdq5mgaep2findiahd9imtgyab0vnwuyab0fytiahh9myaadp2mzyzyahd9jodayab0fzdiaht9kmtzkaabqnjzkndkaaaaa": 181, "2571b8b66e4d11ec9f271e008a366d49": 181, "2571ba466e4d11ec9f271e008a366d49": 181, "ae55782a6e4d11ec803c1e008a366d49": 181, "ae557a146e4d11ec803c1e008a366d49": 181, "43cb93b26e4e11ec8b731e008a366d49": 181, "43cb95746e4e11ec8b731e008a366d49": 181, "heavylift": 181, "myda123": 181, "analyz": 181, "colleagu": 181, "4gb": 181, "unchang": 181, "visualis": 182, "stori": [183, 186], "although": [183, 186], "won": 183, "happi": 183, "main": 183, "brainfuck": 183, "isinst": 183, "web": 183, "fundament": [183, 186], "openapi": [183, 187], "ref": 183, "hint": [183, 187], "create_item": 183, "create_arrai": 183, "starlett": 183, "testclient": 183, "422": 183, "loc": 183, "msg": 183, "type_error": 183, "reject": 183, "imagin": 183, "meaningless": 183, "response_model": 183, "idonli": 183, "get_item_no_embed": 183, "065a5548756211ecaa8d1e008a366d49": 183, "declar": 183, "idandmatch": 183, "get_match": 183, "get_match_id_onli": 183, "unlimit": 183, "ef82e4f4756411ecb2c01e008a366d49": 183, "ef82e6d4756411ecb2c01e008a366d49": 183, "ef82e760756411ecb2c01e008a366d49": 183, "ef82e7ec756411ecb2c01e008a366d49": 183, "didn": 183, "degre": 183, "idmatch": 183, "response_model_exclude_non": 183, "3da6383e756511ecb7cb1e008a366d49": 183, "3da63a14756511ecb7cb1e008a366d49": 183, "3da6392e756511ecb7cb1e008a366d49": 183, "3da63b72756511ecb7cb1e008a366d49": 183, "3da639ce756511ecb7cb1e008a366d49": 183, "3da63a5a756511ecb7cb1e008a366d49": 183, "3da63ae6756511ecb7cb1e008a366d49": 183, "3da63aa0756511ecb7cb1e008a366d49": 183, "3da63b2c756511ecb7cb1e008a366d49": 183, "3da63988756511ecb7cb1e008a366d49": 183, "focus": [184, 186], "journei": 184, "equip": 184, "independ": [184, 186], "termin": [184, 185], "preproc": 184, "slightli": 184, "myexecutor": 184, "staticmethod": 184, "26202": 184, "57050": 184, "102": 184, "84": 184, "172": 184, "88": 184, "05": 184, "eta": 184, "80": 184, "show_progressbar": 184, "throughput": 184, "mp0pe477": 184, "accomplish": 184, "littl": 184, "stage": 185, "demonstr": 185, "cell": 185, "richer": 185, "broken": 185, "emul": 185, "unstructur": [186, 187], "media": 186, "toolkit": 186, "jupyterlab": 186, "happili": 186, "maxim": 186, "de": 186, "filetyp": 186, "haven": 186, "unfair": 186, "dedic": 186, "vision": 186, "coupl": 186, "hf": 186, "temporarili": 186, "resid": 186, "oppos": 186, "physic": 186, "static": 186, "occasion": 186, "precompil": 186, "contigu": 186, "particl": 186, "crunch": 186, "domain": 186, "awkward": 186, "ak": 186, "toytim": 186, "timecontext": 186, "100_000": 186, "ak_arrai": 186, "from_it": 186, "004": 186, "031": 186, "ago": 186, "perspect": 186, "numer": 186, "throw": 186, "boost": 186, "usabl": 186, "futur": 186, "comparison": [186, 187], "100k": 186, "repetit": 186, "revis": 186, "realiz": 186, "due": 186, "deliber": 186, "guarante": 186, "constraint": 186, "trigger": 186, "door": 187, "foundat": 187, "dall": 187, "discoart": 187, "powerhous": 187, "versatil": 187, "reliabl": 187, "pycharm": 187, "altern": 187, "linux": 187, "conda": 187, "forg": 187, "seral": 187, "uvicorn": 187, "demand": 187, "reproduc": 187, "__version__": 187, "ship": 187, "vf": 187, "bootcamp": 187, "slack": 187, "chat": 187, "discuss": 187, "tuesdai": 187, "month": 187, "zoom": 187, "calendar": 187, "ical": 187, "youtub": 187, "subscrib": 187, "apach": 187, "hire": 187, "quantiz": [188, 189], "cls_name": [188, 189], "java": [188, 189], "int32": [188, 189], "sint32": [188, 189], "bignum": [188, 189], "fixnum": [188, 189], "sint64": [188, 189], "uint": [188, 189], "ulong": [188, 189], "sign": [188, 189], "fixed32": [188, 189], "28": [188, 189], "fixed64": [188, 189], "eight": [188, 189], "56": [188, 189], "sfixed32": [188, 189], "sfixed64": [188, 189], "trueclass": [188, 189], "falseclass": [188, 189], "bytestr": [188, 189], "8bit": [188, 189], "cd": 189, "pwd": 189, "jinaai": 189, "protogen": 189}, "objects": {"": [[11, 0, 0, "-", "docarray"]], "docarray": [[12, 0, 0, "-", "array"], [97, 0, 0, "-", "base"], [98, 0, 0, "-", "dataclasses"], [102, 0, 0, "-", "document"], [129, 0, 0, "-", "helper"], [130, 0, 0, "-", "math"], [139, 0, 0, "-", "proto"], [143, 0, 0, "-", "score"], [148, 0, 0, "-", "typing"]], "docarray.array": [[13, 0, 0, "-", "annlite"], [14, 0, 0, "-", "base"], [15, 0, 0, "-", "chunk"], [16, 0, 0, "-", "document"], [17, 0, 0, "-", "elastic"], [18, 0, 0, "-", "match"], [19, 0, 0, "-", "memory"], [20, 0, 0, "-", "mixins"], [52, 0, 0, "-", "qdrant"], [53, 0, 0, "-", "queryset"], [56, 0, 0, "-", "sqlite"], [57, 0, 0, "-", "storage"], [96, 0, 0, "-", "weaviate"]], "docarray.array.annlite": [[13, 1, 1, "", "AnnliteConfig"], [13, 1, 1, "", "DocumentArrayAnnlite"]], "docarray.array.annlite.AnnliteConfig": [[13, 2, 1, "", "columns"], [13, 2, 1, "", "data_path"], [13, 2, 1, "", "ef_construction"], [13, 2, 1, "", "ef_search"], [13, 2, 1, "", "max_connection"], [13, 2, 1, "", "metric"], [13, 2, 1, "", "n_dim"], [13, 2, 1, "", "serialize_config"]], "docarray.array.annlite.DocumentArrayAnnlite": [[13, 2, 1, "", "TYPE_MAP"], [13, 3, 1, "", "append"], [13, 3, 1, "", "apply"], [13, 3, 1, "", "apply_batch"], [13, 3, 1, "", "batch"], [13, 3, 1, "", "batch_ids"], [13, 4, 1, "", "blobs"], [13, 3, 1, "", "clear"], [13, 4, 1, "", "contents"], [13, 3, 1, "", "count"], [13, 3, 1, "", "dataloader"], [13, 3, 1, "", "embed"], [13, 4, 1, "", "embeddings"], [13, 3, 1, "", "empty"], [13, 3, 1, "", "evaluate"], [13, 3, 1, "", "extend"], [13, 3, 1, "", "find"], [13, 3, 1, "", "flatten"], [13, 3, 1, "", "from_base64"], [13, 3, 1, "", "from_bytes"], [13, 3, 1, "", "from_csv"], [13, 3, 1, "", "from_dataframe"], [13, 3, 1, "", "from_dict"], [13, 3, 1, "", "from_files"], [13, 3, 1, "", "from_huggingface_datasets"], [13, 3, 1, "", "from_json"], [13, 3, 1, "", "from_lines"], [13, 3, 1, "", "from_list"], [13, 3, 1, "", "from_ndarray"], [13, 3, 1, "", "from_ndjson"], [13, 3, 1, "", "from_protobuf"], [13, 3, 1, "", "from_pydantic_model"], [13, 3, 1, "", "from_strawberry_type"], [13, 3, 1, "", "get_json_schema"], [13, 3, 1, "", "get_vocabulary"], [13, 3, 1, "", "index"], [13, 3, 1, "", "insert"], [13, 3, 1, "", "load"], [13, 3, 1, "", "load_binary"], [13, 3, 1, "", "load_csv"], [13, 3, 1, "", "load_json"], [13, 3, 1, "", "map"], [13, 3, 1, "", "map_batch"], [13, 3, 1, "", "match"], [13, 3, 1, "", "plot_embeddings"], [13, 3, 1, "", "plot_image_sprites"], [13, 3, 1, "", "pop"], [13, 3, 1, "", "post"], [13, 3, 1, "", "pull"], [13, 3, 1, "", "push"], [13, 3, 1, "", "reduce"], [13, 3, 1, "", "reduce_all"], [13, 3, 1, "", "remove"], [13, 3, 1, "", "reverse"], [13, 3, 1, "", "sample"], [13, 3, 1, "", "save"], [13, 3, 1, "", "save_binary"], [13, 3, 1, "", "save_csv"], [13, 3, 1, "", "save_embeddings_csv"], [13, 3, 1, "", "save_gif"], [13, 3, 1, "", "save_json"], [13, 3, 1, "", "shuffle"], [13, 3, 1, "", "split_by_tag"], [13, 3, 1, "", "summary"], [13, 4, 1, "", "tensors"], [13, 4, 1, "", "texts"], [13, 3, 1, "", "to_base64"], [13, 3, 1, "", "to_bytes"], [13, 3, 1, "", "to_dataframe"], [13, 3, 1, "", "to_dict"], [13, 3, 1, "", "to_json"], [13, 3, 1, "", "to_list"], [13, 3, 1, "", "to_protobuf"], [13, 3, 1, "", "to_pydantic_model"], [13, 3, 1, "", "to_strawberry_type"], [13, 3, 1, "", "traverse"], [13, 3, 1, "", "traverse_flat"], [13, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.base": [[14, 1, 1, "", "BaseDocumentArray"]], "docarray.array.base.BaseDocumentArray": [[14, 3, 1, "", "append"], [14, 3, 1, "", "clear"], [14, 3, 1, "", "count"], [14, 3, 1, "", "extend"], [14, 3, 1, "", "index"], [14, 3, 1, "", "insert"], [14, 3, 1, "", "pop"], [14, 3, 1, "", "remove"], [14, 3, 1, "", "reverse"]], "docarray.array.chunk": [[15, 1, 1, "", "ChunkArray"]], "docarray.array.chunk.ChunkArray": [[15, 2, 1, "", "TYPE_MAP"], [15, 4, 1, "", "adjacency"], [15, 3, 1, "", "append"], [15, 3, 1, "", "apply"], [15, 3, 1, "", "apply_batch"], [15, 3, 1, "", "batch"], [15, 3, 1, "", "batch_ids"], [15, 4, 1, "", "blobs"], [15, 3, 1, "", "clear"], [15, 4, 1, "", "contents"], [15, 3, 1, "", "count"], [15, 3, 1, "", "dataloader"], [15, 3, 1, "", "embed"], [15, 4, 1, "", "embeddings"], [15, 3, 1, "", "empty"], [15, 3, 1, "", "evaluate"], [15, 3, 1, "", "extend"], [15, 3, 1, "", "find"], [15, 3, 1, "", "flatten"], [15, 3, 1, "", "from_base64"], [15, 3, 1, "", "from_bytes"], [15, 3, 1, "", "from_csv"], [15, 3, 1, "", "from_dataframe"], [15, 3, 1, "", "from_dict"], [15, 3, 1, "", "from_files"], [15, 3, 1, "", "from_huggingface_datasets"], [15, 3, 1, "", "from_json"], [15, 3, 1, "", "from_lines"], [15, 3, 1, "", "from_list"], [15, 3, 1, "", "from_ndarray"], [15, 3, 1, "", "from_ndjson"], [15, 3, 1, "", "from_protobuf"], [15, 3, 1, "", "from_pydantic_model"], [15, 3, 1, "", "from_strawberry_type"], [15, 3, 1, "", "get_json_schema"], [15, 3, 1, "", "get_vocabulary"], [15, 4, 1, "", "granularity"], [15, 3, 1, "", "index"], [15, 3, 1, "", "insert"], [15, 3, 1, "", "load"], [15, 3, 1, "", "load_binary"], [15, 3, 1, "", "load_csv"], [15, 3, 1, "", "load_json"], [15, 3, 1, "", "map"], [15, 3, 1, "", "map_batch"], [15, 3, 1, "", "match"], [15, 3, 1, "", "plot_embeddings"], [15, 3, 1, "", "plot_image_sprites"], [15, 3, 1, "", "pop"], [15, 3, 1, "", "post"], [15, 3, 1, "", "pull"], [15, 3, 1, "", "push"], [15, 3, 1, "", "reduce"], [15, 3, 1, "", "reduce_all"], [15, 4, 1, "", "reference_doc"], [15, 3, 1, "", "remove"], [15, 3, 1, "", "reverse"], [15, 3, 1, "", "sample"], [15, 3, 1, "", "save"], [15, 3, 1, "", "save_binary"], [15, 3, 1, "", "save_csv"], [15, 3, 1, "", "save_embeddings_csv"], [15, 3, 1, "", "save_gif"], [15, 3, 1, "", "save_json"], [15, 3, 1, "", "shuffle"], [15, 3, 1, "", "split_by_tag"], [15, 3, 1, "", "summary"], [15, 4, 1, "", "tensors"], [15, 4, 1, "", "texts"], [15, 3, 1, "", "to_base64"], [15, 3, 1, "", "to_bytes"], [15, 3, 1, "", "to_dataframe"], [15, 3, 1, "", "to_dict"], [15, 3, 1, "", "to_json"], [15, 3, 1, "", "to_list"], [15, 3, 1, "", "to_protobuf"], [15, 3, 1, "", "to_pydantic_model"], [15, 3, 1, "", "to_strawberry_type"], [15, 3, 1, "", "traverse"], [15, 3, 1, "", "traverse_flat"], [15, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.document": [[16, 1, 1, "", "DocumentArray"]], "docarray.array.document.DocumentArray": [[16, 3, 1, "", "append"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "apply_batch"], [16, 3, 1, "", "batch"], [16, 3, 1, "", "batch_ids"], [16, 4, 1, "", "blobs"], [16, 3, 1, "", "clear"], [16, 4, 1, "", "contents"], [16, 3, 1, "", "count"], [16, 3, 1, "", "dataloader"], [16, 3, 1, "", "embed"], [16, 4, 1, "", "embeddings"], [16, 3, 1, "", "empty"], [16, 3, 1, "", "evaluate"], [16, 3, 1, "", "extend"], [16, 3, 1, "", "find"], [16, 3, 1, "", "flatten"], [16, 3, 1, "", "from_base64"], [16, 3, 1, "", "from_bytes"], [16, 3, 1, "", "from_csv"], [16, 3, 1, "", "from_dataframe"], [16, 3, 1, "", "from_dict"], [16, 3, 1, "", "from_files"], [16, 3, 1, "", "from_huggingface_datasets"], [16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_lines"], [16, 3, 1, "", "from_list"], [16, 3, 1, "", "from_ndarray"], [16, 3, 1, "", "from_ndjson"], [16, 3, 1, "", "from_protobuf"], [16, 3, 1, "", "from_pydantic_model"], [16, 3, 1, "", "from_strawberry_type"], [16, 3, 1, "", "get_json_schema"], [16, 3, 1, "", "get_vocabulary"], [16, 3, 1, "", "index"], [16, 3, 1, "", "insert"], [16, 3, 1, "", "load"], [16, 3, 1, "", "load_binary"], [16, 3, 1, "", "load_csv"], [16, 3, 1, "", "load_json"], [16, 3, 1, "", "map"], [16, 3, 1, "", "map_batch"], [16, 3, 1, "", "match"], [16, 3, 1, "", "plot_embeddings"], [16, 3, 1, "", "plot_image_sprites"], [16, 3, 1, "", "pop"], [16, 3, 1, "", "post"], [16, 3, 1, "", "pull"], [16, 3, 1, "", "push"], [16, 3, 1, "", "reduce"], [16, 3, 1, "", "reduce_all"], [16, 3, 1, "", "remove"], [16, 3, 1, "", "reverse"], [16, 3, 1, "", "sample"], [16, 3, 1, "", "save"], [16, 3, 1, "", "save_binary"], [16, 3, 1, "", "save_csv"], [16, 3, 1, "", "save_embeddings_csv"], [16, 3, 1, "", "save_gif"], [16, 3, 1, "", "save_json"], [16, 3, 1, "", "shuffle"], [16, 3, 1, "", "split_by_tag"], [16, 3, 1, "", "summary"], [16, 4, 1, "", "tensors"], [16, 4, 1, "", "texts"], [16, 3, 1, "", "to_base64"], [16, 3, 1, "", "to_bytes"], [16, 3, 1, "", "to_dataframe"], [16, 3, 1, "", "to_dict"], [16, 3, 1, "", "to_json"], [16, 3, 1, "", "to_list"], [16, 3, 1, "", "to_protobuf"], [16, 3, 1, "", "to_pydantic_model"], [16, 3, 1, "", "to_strawberry_type"], [16, 3, 1, "", "traverse"], [16, 3, 1, "", "traverse_flat"], [16, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.elastic": [[17, 1, 1, "", "DocumentArrayElastic"], [17, 1, 1, "", "ElasticConfig"]], "docarray.array.elastic.DocumentArrayElastic": [[17, 2, 1, "", "TYPE_MAP"], [17, 3, 1, "", "append"], [17, 3, 1, "", "apply"], [17, 3, 1, "", "apply_batch"], [17, 3, 1, "", "batch"], [17, 3, 1, "", "batch_ids"], [17, 4, 1, "", "blobs"], [17, 3, 1, "", "clear"], [17, 4, 1, "", "contents"], [17, 3, 1, "", "count"], [17, 3, 1, "", "dataloader"], [17, 3, 1, "", "embed"], [17, 4, 1, "", "embeddings"], [17, 3, 1, "", "empty"], [17, 3, 1, "", "evaluate"], [17, 3, 1, "", "extend"], [17, 3, 1, "", "find"], [17, 3, 1, "", "flatten"], [17, 3, 1, "", "from_base64"], [17, 3, 1, "", "from_bytes"], [17, 3, 1, "", "from_csv"], [17, 3, 1, "", "from_dataframe"], [17, 3, 1, "", "from_dict"], [17, 3, 1, "", "from_files"], [17, 3, 1, "", "from_huggingface_datasets"], [17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_lines"], [17, 3, 1, "", "from_list"], [17, 3, 1, "", "from_ndarray"], [17, 3, 1, "", "from_ndjson"], [17, 3, 1, "", "from_protobuf"], [17, 3, 1, "", "from_pydantic_model"], [17, 3, 1, "", "from_strawberry_type"], [17, 3, 1, "", "get_json_schema"], [17, 3, 1, "", "get_vocabulary"], [17, 3, 1, "", "index"], [17, 3, 1, "", "insert"], [17, 3, 1, "", "load"], [17, 3, 1, "", "load_binary"], [17, 3, 1, "", "load_csv"], [17, 3, 1, "", "load_json"], [17, 3, 1, "", "map"], [17, 3, 1, "", "map_batch"], [17, 3, 1, "", "match"], [17, 3, 1, "", "plot_embeddings"], [17, 3, 1, "", "plot_image_sprites"], [17, 3, 1, "", "pop"], [17, 3, 1, "", "post"], [17, 3, 1, "", "pull"], [17, 3, 1, "", "push"], [17, 3, 1, "", "reduce"], [17, 3, 1, "", "reduce_all"], [17, 3, 1, "", "remove"], [17, 3, 1, "", "reverse"], [17, 3, 1, "", "sample"], [17, 3, 1, "", "save"], [17, 3, 1, "", "save_binary"], [17, 3, 1, "", "save_csv"], [17, 3, 1, "", "save_embeddings_csv"], [17, 3, 1, "", "save_gif"], [17, 3, 1, "", "save_json"], [17, 3, 1, "", "shuffle"], [17, 3, 1, "", "split_by_tag"], [17, 3, 1, "", "summary"], [17, 4, 1, "", "tensors"], [17, 4, 1, "", "texts"], [17, 3, 1, "", "to_base64"], [17, 3, 1, "", "to_bytes"], [17, 3, 1, "", "to_dataframe"], [17, 3, 1, "", "to_dict"], [17, 3, 1, "", "to_json"], [17, 3, 1, "", "to_list"], [17, 3, 1, "", "to_protobuf"], [17, 3, 1, "", "to_pydantic_model"], [17, 3, 1, "", "to_strawberry_type"], [17, 3, 1, "", "traverse"], [17, 3, 1, "", "traverse_flat"], [17, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.elastic.ElasticConfig": [[17, 2, 1, "", "batch_size"], [17, 2, 1, "", "columns"], [17, 2, 1, "", "distance"], [17, 2, 1, "", "ef_construction"], [17, 2, 1, "", "es_config"], [17, 2, 1, "", "hosts"], [17, 2, 1, "", "index_name"], [17, 2, 1, "", "index_text"], [17, 2, 1, "", "m"], [17, 2, 1, "", "n_dim"], [17, 2, 1, "", "tag_indices"]], "docarray.array.match": [[18, 1, 1, "", "MatchArray"]], "docarray.array.match.MatchArray": [[18, 2, 1, "", "TYPE_MAP"], [18, 4, 1, "", "adjacency"], [18, 3, 1, "", "append"], [18, 3, 1, "", "apply"], [18, 3, 1, "", "apply_batch"], [18, 3, 1, "", "batch"], [18, 3, 1, "", "batch_ids"], [18, 4, 1, "", "blobs"], [18, 3, 1, "", "clear"], [18, 4, 1, "", "contents"], [18, 3, 1, "", "count"], [18, 3, 1, "", "dataloader"], [18, 3, 1, "", "embed"], [18, 4, 1, "", "embeddings"], [18, 3, 1, "", "empty"], [18, 3, 1, "", "evaluate"], [18, 3, 1, "", "extend"], [18, 3, 1, "", "find"], [18, 3, 1, "", "flatten"], [18, 3, 1, "", "from_base64"], [18, 3, 1, "", "from_bytes"], [18, 3, 1, "", "from_csv"], [18, 3, 1, "", "from_dataframe"], [18, 3, 1, "", "from_dict"], [18, 3, 1, "", "from_files"], [18, 3, 1, "", "from_huggingface_datasets"], [18, 3, 1, "", "from_json"], [18, 3, 1, "", "from_lines"], [18, 3, 1, "", "from_list"], [18, 3, 1, "", "from_ndarray"], [18, 3, 1, "", "from_ndjson"], [18, 3, 1, "", "from_protobuf"], [18, 3, 1, "", "from_pydantic_model"], [18, 3, 1, "", "from_strawberry_type"], [18, 3, 1, "", "get_json_schema"], [18, 3, 1, "", "get_vocabulary"], [18, 4, 1, "", "granularity"], [18, 3, 1, "", "index"], [18, 3, 1, "", "insert"], [18, 3, 1, "", "load"], [18, 3, 1, "", "load_binary"], [18, 3, 1, "", "load_csv"], [18, 3, 1, "", "load_json"], [18, 3, 1, "", "map"], [18, 3, 1, "", "map_batch"], [18, 3, 1, "", "match"], [18, 3, 1, "", "plot_embeddings"], [18, 3, 1, "", "plot_image_sprites"], [18, 3, 1, "", "pop"], [18, 3, 1, "", "post"], [18, 3, 1, "", "pull"], [18, 3, 1, "", "push"], [18, 3, 1, "", "reduce"], [18, 3, 1, "", "reduce_all"], [18, 4, 1, "", "reference_doc"], [18, 3, 1, "", "remove"], [18, 3, 1, "", "reverse"], [18, 3, 1, "", "sample"], [18, 3, 1, "", "save"], [18, 3, 1, "", "save_binary"], [18, 3, 1, "", "save_csv"], [18, 3, 1, "", "save_embeddings_csv"], [18, 3, 1, "", "save_gif"], [18, 3, 1, "", "save_json"], [18, 3, 1, "", "shuffle"], [18, 3, 1, "", "split_by_tag"], [18, 3, 1, "", "summary"], [18, 4, 1, "", "tensors"], [18, 4, 1, "", "texts"], [18, 3, 1, "", "to_base64"], [18, 3, 1, "", "to_bytes"], [18, 3, 1, "", "to_dataframe"], [18, 3, 1, "", "to_dict"], [18, 3, 1, "", "to_json"], [18, 3, 1, "", "to_list"], [18, 3, 1, "", "to_protobuf"], [18, 3, 1, "", "to_pydantic_model"], [18, 3, 1, "", "to_strawberry_type"], [18, 3, 1, "", "traverse"], [18, 3, 1, "", "traverse_flat"], [18, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.memory": [[19, 1, 1, "", "DocumentArrayInMemory"]], "docarray.array.memory.DocumentArrayInMemory": [[19, 2, 1, "", "TYPE_MAP"], [19, 3, 1, "", "append"], [19, 3, 1, "", "apply"], [19, 3, 1, "", "apply_batch"], [19, 3, 1, "", "batch"], [19, 3, 1, "", "batch_ids"], [19, 4, 1, "", "blobs"], [19, 3, 1, "", "clear"], [19, 4, 1, "", "contents"], [19, 3, 1, "", "count"], [19, 3, 1, "", "dataloader"], [19, 3, 1, "", "embed"], [19, 4, 1, "", "embeddings"], [19, 3, 1, "", "empty"], [19, 3, 1, "", "evaluate"], [19, 3, 1, "", "extend"], [19, 3, 1, "", "find"], [19, 3, 1, "", "flatten"], [19, 3, 1, "", "from_base64"], [19, 3, 1, "", "from_bytes"], [19, 3, 1, "", "from_csv"], [19, 3, 1, "", "from_dataframe"], [19, 3, 1, "", "from_dict"], [19, 3, 1, "", "from_files"], [19, 3, 1, "", "from_huggingface_datasets"], [19, 3, 1, "", "from_json"], [19, 3, 1, "", "from_lines"], [19, 3, 1, "", "from_list"], [19, 3, 1, "", "from_ndarray"], [19, 3, 1, "", "from_ndjson"], [19, 3, 1, "", "from_protobuf"], [19, 3, 1, "", "from_pydantic_model"], [19, 3, 1, "", "from_strawberry_type"], [19, 3, 1, "", "get_json_schema"], [19, 3, 1, "", "get_vocabulary"], [19, 3, 1, "", "index"], [19, 3, 1, "", "insert"], [19, 3, 1, "", "load"], [19, 3, 1, "", "load_binary"], [19, 3, 1, "", "load_csv"], [19, 3, 1, "", "load_json"], [19, 3, 1, "", "map"], [19, 3, 1, "", "map_batch"], [19, 3, 1, "", "match"], [19, 3, 1, "", "plot_embeddings"], [19, 3, 1, "", "plot_image_sprites"], [19, 3, 1, "", "pop"], [19, 3, 1, "", "post"], [19, 3, 1, "", "pull"], [19, 3, 1, "", "push"], [19, 3, 1, "", "reduce"], [19, 3, 1, "", "reduce_all"], [19, 3, 1, "", "remove"], [19, 3, 1, "", "reverse"], [19, 3, 1, "", "sample"], [19, 3, 1, "", "save"], [19, 3, 1, "", "save_binary"], [19, 3, 1, "", "save_csv"], [19, 3, 1, "", "save_embeddings_csv"], [19, 3, 1, "", "save_gif"], [19, 3, 1, "", "save_json"], [19, 3, 1, "", "shuffle"], [19, 3, 1, "", "split_by_tag"], [19, 3, 1, "", "summary"], [19, 4, 1, "", "tensors"], [19, 4, 1, "", "texts"], [19, 3, 1, "", "to_base64"], [19, 3, 1, "", "to_bytes"], [19, 3, 1, "", "to_dataframe"], [19, 3, 1, "", "to_dict"], [19, 3, 1, "", "to_json"], [19, 3, 1, "", "to_list"], [19, 3, 1, "", "to_protobuf"], [19, 3, 1, "", "to_pydantic_model"], [19, 3, 1, "", "to_strawberry_type"], [19, 3, 1, "", "traverse"], [19, 3, 1, "", "traverse_flat"], [19, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.mixins": [[20, 1, 1, "", "AllMixins"], [21, 0, 0, "-", "content"], [22, 0, 0, "-", "dataloader"], [24, 0, 0, "-", "delitem"], [25, 0, 0, "-", "embed"], [26, 0, 0, "-", "empty"], [27, 0, 0, "-", "evaluation"], [28, 0, 0, "-", "find"], [29, 0, 0, "-", "getattr"], [30, 0, 0, "-", "getitem"], [31, 0, 0, "-", "group"], [32, 0, 0, "-", "io"], [41, 0, 0, "-", "match"], [42, 0, 0, "-", "parallel"], [43, 0, 0, "-", "plot"], [44, 0, 0, "-", "post"], [45, 0, 0, "-", "pydantic"], [46, 0, 0, "-", "reduce"], [47, 0, 0, "-", "sample"], [48, 0, 0, "-", "setitem"], [49, 0, 0, "-", "strawberry"], [50, 0, 0, "-", "text"], [51, 0, 0, "-", "traverse"]], "docarray.array.mixins.AllMixins": [[20, 3, 1, "", "apply"], [20, 3, 1, "", "apply_batch"], [20, 3, 1, "", "batch"], [20, 3, 1, "", "batch_ids"], [20, 4, 1, "", "blobs"], [20, 4, 1, "", "contents"], [20, 3, 1, "", "dataloader"], [20, 3, 1, "", "embed"], [20, 4, 1, "", "embeddings"], [20, 3, 1, "", "empty"], [20, 3, 1, "", "evaluate"], [20, 3, 1, "", "find"], [20, 3, 1, "", "flatten"], [20, 3, 1, "", "from_base64"], [20, 3, 1, "", "from_bytes"], [20, 3, 1, "", "from_csv"], [20, 3, 1, "", "from_dataframe"], [20, 3, 1, "", "from_dict"], [20, 3, 1, "", "from_files"], [20, 3, 1, "", "from_huggingface_datasets"], [20, 3, 1, "", "from_json"], [20, 3, 1, "", "from_lines"], [20, 3, 1, "", "from_list"], [20, 3, 1, "", "from_ndarray"], [20, 3, 1, "", "from_ndjson"], [20, 3, 1, "", "from_protobuf"], [20, 3, 1, "", "from_pydantic_model"], [20, 3, 1, "", "from_strawberry_type"], [20, 3, 1, "", "get_json_schema"], [20, 3, 1, "", "get_vocabulary"], [20, 3, 1, "", "load"], [20, 3, 1, "", "load_binary"], [20, 3, 1, "", "load_csv"], [20, 3, 1, "", "load_json"], [20, 3, 1, "", "map"], [20, 3, 1, "", "map_batch"], [20, 3, 1, "", "match"], [20, 3, 1, "", "plot_embeddings"], [20, 3, 1, "", "plot_image_sprites"], [20, 3, 1, "", "post"], [20, 3, 1, "", "pull"], [20, 3, 1, "", "push"], [20, 3, 1, "", "reduce"], [20, 3, 1, "", "reduce_all"], [20, 3, 1, "", "sample"], [20, 3, 1, "", "save"], [20, 3, 1, "", "save_binary"], [20, 3, 1, "", "save_csv"], [20, 3, 1, "", "save_embeddings_csv"], [20, 3, 1, "", "save_gif"], [20, 3, 1, "", "save_json"], [20, 3, 1, "", "shuffle"], [20, 3, 1, "", "split_by_tag"], [20, 3, 1, "", "summary"], [20, 4, 1, "", "tensors"], [20, 4, 1, "", "texts"], [20, 3, 1, "", "to_base64"], [20, 3, 1, "", "to_bytes"], [20, 3, 1, "", "to_dataframe"], [20, 3, 1, "", "to_dict"], [20, 3, 1, "", "to_json"], [20, 3, 1, "", "to_list"], [20, 3, 1, "", "to_protobuf"], [20, 3, 1, "", "to_pydantic_model"], [20, 3, 1, "", "to_strawberry_type"], [20, 3, 1, "", "traverse"], [20, 3, 1, "", "traverse_flat"], [20, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.mixins.content": [[21, 1, 1, "", "ContentPropertyMixin"]], "docarray.array.mixins.content.ContentPropertyMixin": [[21, 4, 1, "", "blobs"], [21, 4, 1, "", "contents"], [21, 4, 1, "", "embeddings"], [21, 4, 1, "", "tensors"], [21, 4, 1, "", "texts"]], "docarray.array.mixins.dataloader": [[22, 1, 1, "", "DataLoaderMixin"], [23, 0, 0, "-", "helper"]], "docarray.array.mixins.dataloader.DataLoaderMixin": [[22, 3, 1, "", "dataloader"]], "docarray.array.mixins.dataloader.helper": [[23, 1, 1, "", "DocumentArrayLoader"]], "docarray.array.mixins.dataloader.helper.DocumentArrayLoader": [[23, 3, 1, "", "apply"], [23, 3, 1, "", "apply_batch"], [23, 3, 1, "", "batch"], [23, 3, 1, "", "batch_ids"], [23, 3, 1, "", "map"], [23, 3, 1, "", "map_batch"], [23, 3, 1, "", "split_by_tag"]], "docarray.array.mixins.delitem": [[24, 1, 1, "", "DelItemMixin"]], "docarray.array.mixins.embed": [[25, 1, 1, "", "EmbedMixin"], [25, 5, 1, "", "get_framework"]], "docarray.array.mixins.embed.EmbedMixin": [[25, 3, 1, "", "embed"]], "docarray.array.mixins.empty": [[26, 1, 1, "", "EmptyMixin"]], "docarray.array.mixins.empty.EmptyMixin": [[26, 3, 1, "", "empty"]], "docarray.array.mixins.evaluation": [[27, 1, 1, "", "EvaluationMixin"]], "docarray.array.mixins.evaluation.EvaluationMixin": [[27, 3, 1, "", "evaluate"]], "docarray.array.mixins.find": [[28, 1, 1, "", "FindMixin"]], "docarray.array.mixins.find.FindMixin": [[28, 3, 1, "", "find"]], "docarray.array.mixins.getattr": [[29, 1, 1, "", "GetAttributeMixin"]], "docarray.array.mixins.getitem": [[30, 1, 1, "", "GetItemMixin"]], "docarray.array.mixins.group": [[31, 1, 1, "", "GroupMixin"]], "docarray.array.mixins.group.GroupMixin": [[31, 3, 1, "", "batch"], [31, 3, 1, "", "batch_ids"], [31, 3, 1, "", "split_by_tag"]], "docarray.array.mixins.io": [[33, 0, 0, "-", "binary"], [34, 0, 0, "-", "common"], [35, 0, 0, "-", "csv"], [36, 0, 0, "-", "dataframe"], [37, 0, 0, "-", "from_gen"], [38, 0, 0, "-", "json"], [39, 0, 0, "-", "pbar"], [40, 0, 0, "-", "pushpull"]], "docarray.array.mixins.io.binary": [[33, 1, 1, "", "BinaryIOMixin"], [33, 1, 1, "", "LazyRequestReader"]], "docarray.array.mixins.io.binary.BinaryIOMixin": [[33, 3, 1, "", "from_base64"], [33, 3, 1, "", "from_bytes"], [33, 3, 1, "", "from_protobuf"], [33, 3, 1, "", "load_binary"], [33, 3, 1, "", "save_binary"], [33, 3, 1, "", "to_base64"], [33, 3, 1, "", "to_bytes"], [33, 3, 1, "", "to_protobuf"]], "docarray.array.mixins.io.common": [[34, 1, 1, "", "CommonIOMixin"]], "docarray.array.mixins.io.common.CommonIOMixin": [[34, 3, 1, "", "load"], [34, 3, 1, "", "save"]], "docarray.array.mixins.io.csv": [[35, 1, 1, "", "CsvIOMixin"]], "docarray.array.mixins.io.csv.CsvIOMixin": [[35, 3, 1, "", "load_csv"], [35, 3, 1, "", "save_csv"], [35, 3, 1, "", "save_embeddings_csv"]], "docarray.array.mixins.io.dataframe": [[36, 1, 1, "", "DataframeIOMixin"]], "docarray.array.mixins.io.dataframe.DataframeIOMixin": [[36, 3, 1, "", "from_dataframe"], [36, 3, 1, "", "to_dataframe"]], "docarray.array.mixins.io.from_gen": [[37, 1, 1, "", "FromGeneratorMixin"]], "docarray.array.mixins.io.from_gen.FromGeneratorMixin": [[37, 3, 1, "", "from_csv"], [37, 3, 1, "", "from_files"], [37, 3, 1, "", "from_huggingface_datasets"], [37, 3, 1, "", "from_lines"], [37, 3, 1, "", "from_ndarray"], [37, 3, 1, "", "from_ndjson"]], "docarray.array.mixins.io.json": [[38, 1, 1, "", "JsonIOMixin"]], "docarray.array.mixins.io.json.JsonIOMixin": [[38, 3, 1, "", "from_dict"], [38, 3, 1, "", "from_json"], [38, 3, 1, "", "from_list"], [38, 3, 1, "", "load_json"], [38, 3, 1, "", "save_json"], [38, 3, 1, "", "to_dict"], [38, 3, 1, "", "to_json"], [38, 3, 1, "", "to_list"]], "docarray.array.mixins.io.pbar": [[39, 1, 1, "", "QPSColumn"], [39, 5, 1, "", "get_pbar"], [39, 5, 1, "", "get_progressbar"]], "docarray.array.mixins.io.pbar.QPSColumn": [[39, 3, 1, "", "get_table_column"], [39, 2, 1, "", "max_refresh"], [39, 3, 1, "", "render"]], "docarray.array.mixins.io.pushpull": [[40, 1, 1, "", "PushPullMixin"]], "docarray.array.mixins.io.pushpull.PushPullMixin": [[40, 3, 1, "", "pull"], [40, 3, 1, "", "push"]], "docarray.array.mixins.match": [[41, 1, 1, "", "MatchMixin"]], "docarray.array.mixins.match.MatchMixin": [[41, 3, 1, "", "match"]], "docarray.array.mixins.parallel": [[42, 1, 1, "", "ParallelMixin"]], "docarray.array.mixins.parallel.ParallelMixin": [[42, 3, 1, "", "apply"], [42, 3, 1, "", "apply_batch"], [42, 3, 1, "", "map"], [42, 3, 1, "", "map_batch"]], "docarray.array.mixins.plot": [[43, 1, 1, "", "PlotMixin"]], "docarray.array.mixins.plot.PlotMixin": [[43, 3, 1, "", "plot_embeddings"], [43, 3, 1, "", "plot_image_sprites"], [43, 3, 1, "", "save_gif"], [43, 3, 1, "", "summary"]], "docarray.array.mixins.post": [[44, 1, 1, "", "PostMixin"]], "docarray.array.mixins.post.PostMixin": [[44, 3, 1, "", "post"]], "docarray.array.mixins.pydantic": [[45, 1, 1, "", "PydanticMixin"]], "docarray.array.mixins.pydantic.PydanticMixin": [[45, 3, 1, "", "from_pydantic_model"], [45, 3, 1, "", "get_json_schema"], [45, 3, 1, "", "to_pydantic_model"]], "docarray.array.mixins.reduce": [[46, 1, 1, "", "ReduceMixin"]], "docarray.array.mixins.reduce.ReduceMixin": [[46, 3, 1, "", "reduce"], [46, 3, 1, "", "reduce_all"]], "docarray.array.mixins.sample": [[47, 1, 1, "", "SampleMixin"]], "docarray.array.mixins.sample.SampleMixin": [[47, 3, 1, "", "sample"], [47, 3, 1, "", "shuffle"]], "docarray.array.mixins.setitem": [[48, 1, 1, "", "SetItemMixin"]], "docarray.array.mixins.strawberry": [[49, 1, 1, "", "StrawberryMixin"]], "docarray.array.mixins.strawberry.StrawberryMixin": [[49, 3, 1, "", "from_strawberry_type"], [49, 3, 1, "", "to_strawberry_type"]], "docarray.array.mixins.text": [[50, 1, 1, "", "TextToolsMixin"]], "docarray.array.mixins.text.TextToolsMixin": [[50, 3, 1, "", "get_vocabulary"]], "docarray.array.mixins.traverse": [[51, 1, 1, "", "TraverseMixin"]], "docarray.array.mixins.traverse.TraverseMixin": [[51, 3, 1, "", "flatten"], [51, 3, 1, "", "traverse"], [51, 3, 1, "", "traverse_flat"], [51, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.qdrant": [[52, 1, 1, "", "DocumentArrayQdrant"], [52, 1, 1, "", "QdrantConfig"]], "docarray.array.qdrant.DocumentArrayQdrant": [[52, 2, 1, "", "TYPE_MAP"], [52, 3, 1, "", "append"], [52, 3, 1, "", "apply"], [52, 3, 1, "", "apply_batch"], [52, 3, 1, "", "batch"], [52, 3, 1, "", "batch_ids"], [52, 4, 1, "", "blobs"], [52, 3, 1, "", "clear"], [52, 4, 1, "", "client"], [52, 4, 1, "", "collection_name"], [52, 4, 1, "", "collection_name_meta"], [52, 4, 1, "", "config"], [52, 4, 1, "", "contents"], [52, 3, 1, "", "count"], [52, 3, 1, "", "dataloader"], [52, 4, 1, "", "distance"], [52, 3, 1, "", "embed"], [52, 4, 1, "", "embeddings"], [52, 3, 1, "", "empty"], [52, 3, 1, "", "evaluate"], [52, 3, 1, "", "extend"], [52, 3, 1, "", "find"], [52, 3, 1, "", "flatten"], [52, 3, 1, "", "from_base64"], [52, 3, 1, "", "from_bytes"], [52, 3, 1, "", "from_csv"], [52, 3, 1, "", "from_dataframe"], [52, 3, 1, "", "from_dict"], [52, 3, 1, "", "from_files"], [52, 3, 1, "", "from_huggingface_datasets"], [52, 3, 1, "", "from_json"], [52, 3, 1, "", "from_lines"], [52, 3, 1, "", "from_list"], [52, 3, 1, "", "from_ndarray"], [52, 3, 1, "", "from_ndjson"], [52, 3, 1, "", "from_protobuf"], [52, 3, 1, "", "from_pydantic_model"], [52, 3, 1, "", "from_strawberry_type"], [52, 3, 1, "", "get_json_schema"], [52, 3, 1, "", "get_vocabulary"], [52, 3, 1, "", "index"], [52, 3, 1, "", "insert"], [52, 3, 1, "", "load"], [52, 3, 1, "", "load_binary"], [52, 3, 1, "", "load_csv"], [52, 3, 1, "", "load_json"], [52, 3, 1, "", "map"], [52, 3, 1, "", "map_batch"], [52, 3, 1, "", "match"], [52, 4, 1, "", "n_dim"], [52, 3, 1, "", "plot_embeddings"], [52, 3, 1, "", "plot_image_sprites"], [52, 3, 1, "", "pop"], [52, 3, 1, "", "post"], [52, 3, 1, "", "pull"], [52, 3, 1, "", "push"], [52, 3, 1, "", "reduce"], [52, 3, 1, "", "reduce_all"], [52, 3, 1, "", "remove"], [52, 3, 1, "", "reverse"], [52, 3, 1, "", "sample"], [52, 3, 1, "", "save"], [52, 3, 1, "", "save_binary"], [52, 3, 1, "", "save_csv"], [52, 3, 1, "", "save_embeddings_csv"], [52, 3, 1, "", "save_gif"], [52, 3, 1, "", "save_json"], [52, 3, 1, "", "scan"], [52, 4, 1, "", "scroll_batch_size"], [52, 4, 1, "", "serialization_config"], [52, 4, 1, "", "serialize_config"], [52, 3, 1, "", "shuffle"], [52, 3, 1, "", "split_by_tag"], [52, 3, 1, "", "summary"], [52, 4, 1, "", "tensors"], [52, 4, 1, "", "texts"], [52, 3, 1, "", "to_base64"], [52, 3, 1, "", "to_bytes"], [52, 3, 1, "", "to_dataframe"], [52, 3, 1, "", "to_dict"], [52, 3, 1, "", "to_json"], [52, 3, 1, "", "to_list"], [52, 3, 1, "", "to_protobuf"], [52, 3, 1, "", "to_pydantic_model"], [52, 3, 1, "", "to_strawberry_type"], [52, 3, 1, "", "traverse"], [52, 3, 1, "", "traverse_flat"], [52, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.qdrant.QdrantConfig": [[52, 2, 1, "", "collection_name"], [52, 2, 1, "", "columns"], [52, 2, 1, "", "distance"], [52, 2, 1, "", "ef_construct"], [52, 2, 1, "", "full_scan_threshold"], [52, 2, 1, "", "host"], [52, 2, 1, "", "m"], [52, 2, 1, "", "n_dim"], [52, 2, 1, "", "port"], [52, 2, 1, "", "scroll_batch_size"], [52, 2, 1, "", "serialize_config"]], "docarray.array.queryset": [[54, 0, 0, "-", "lookup"], [55, 0, 0, "-", "parser"]], "docarray.array.queryset.lookup": [[54, 1, 1, "", "LookupLeaf"], [54, 1, 1, "", "LookupNode"], [54, 1, 1, "", "LookupTreeElem"], [54, 6, 1, "", "LookupyError"], [54, 2, 1, "", "Q"], [54, 5, 1, "", "dunder_partition"], [54, 5, 1, "", "guard_Q"], [54, 5, 1, "", "guard_iter"], [54, 5, 1, "", "guard_list"], [54, 5, 1, "", "guard_str"], [54, 5, 1, "", "guard_type"], [54, 5, 1, "", "iff"], [54, 5, 1, "", "iff_not_none"], [54, 5, 1, "", "lookup"]], "docarray.array.queryset.lookup.LookupLeaf": [[54, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupNode": [[54, 3, 1, "", "add_child"], [54, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupTreeElem": [[54, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupyError": [[54, 2, 1, "", "args"], [54, 3, 1, "", "with_traceback"]], "docarray.array.queryset.parser": [[55, 1, 1, "", "QueryParser"]], "docarray.array.queryset.parser.QueryParser": [[55, 3, 1, "", "evaluate"]], "docarray.array.sqlite": [[56, 1, 1, "", "DocumentArraySqlite"], [56, 1, 1, "", "SqliteConfig"]], "docarray.array.sqlite.DocumentArraySqlite": [[56, 2, 1, "", "TYPE_MAP"], [56, 3, 1, "", "append"], [56, 3, 1, "", "apply"], [56, 3, 1, "", "apply_batch"], [56, 3, 1, "", "batch"], [56, 3, 1, "", "batch_ids"], [56, 4, 1, "", "blobs"], [56, 3, 1, "", "clear"], [56, 4, 1, "", "contents"], [56, 3, 1, "", "count"], [56, 3, 1, "", "dataloader"], [56, 3, 1, "", "embed"], [56, 4, 1, "", "embeddings"], [56, 3, 1, "", "empty"], [56, 3, 1, "", "evaluate"], [56, 3, 1, "", "extend"], [56, 3, 1, "", "find"], [56, 3, 1, "", "flatten"], [56, 3, 1, "", "from_base64"], [56, 3, 1, "", "from_bytes"], [56, 3, 1, "", "from_csv"], [56, 3, 1, "", "from_dataframe"], [56, 3, 1, "", "from_dict"], [56, 3, 1, "", "from_files"], [56, 3, 1, "", "from_huggingface_datasets"], [56, 3, 1, "", "from_json"], [56, 3, 1, "", "from_lines"], [56, 3, 1, "", "from_list"], [56, 3, 1, "", "from_ndarray"], [56, 3, 1, "", "from_ndjson"], [56, 3, 1, "", "from_protobuf"], [56, 3, 1, "", "from_pydantic_model"], [56, 3, 1, "", "from_strawberry_type"], [56, 3, 1, "", "get_json_schema"], [56, 3, 1, "", "get_vocabulary"], [56, 3, 1, "", "index"], [56, 3, 1, "", "insert"], [56, 3, 1, "", "load"], [56, 3, 1, "", "load_binary"], [56, 3, 1, "", "load_csv"], [56, 3, 1, "", "load_json"], [56, 3, 1, "", "map"], [56, 3, 1, "", "map_batch"], [56, 3, 1, "", "match"], [56, 3, 1, "", "plot_embeddings"], [56, 3, 1, "", "plot_image_sprites"], [56, 3, 1, "", "pop"], [56, 3, 1, "", "post"], [56, 3, 1, "", "pull"], [56, 3, 1, "", "push"], [56, 3, 1, "", "reduce"], [56, 3, 1, "", "reduce_all"], [56, 3, 1, "", "remove"], [56, 3, 1, "", "reverse"], [56, 3, 1, "", "sample"], [56, 3, 1, "", "save"], [56, 3, 1, "", "save_binary"], [56, 3, 1, "", "save_csv"], [56, 3, 1, "", "save_embeddings_csv"], [56, 3, 1, "", "save_gif"], [56, 3, 1, "", "save_json"], [56, 2, 1, "", "schema_version"], [56, 3, 1, "", "shuffle"], [56, 3, 1, "", "split_by_tag"], [56, 3, 1, "", "summary"], [56, 4, 1, "", "tensors"], [56, 4, 1, "", "texts"], [56, 3, 1, "", "to_base64"], [56, 3, 1, "", "to_bytes"], [56, 3, 1, "", "to_dataframe"], [56, 3, 1, "", "to_dict"], [56, 3, 1, "", "to_json"], [56, 3, 1, "", "to_list"], [56, 3, 1, "", "to_protobuf"], [56, 3, 1, "", "to_pydantic_model"], [56, 3, 1, "", "to_strawberry_type"], [56, 3, 1, "", "traverse"], [56, 3, 1, "", "traverse_flat"], [56, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.sqlite.SqliteConfig": [[56, 2, 1, "", "conn_config"], [56, 2, 1, "", "connection"], [56, 2, 1, "", "journal_mode"], [56, 2, 1, "", "serialize_config"], [56, 2, 1, "", "synchronous"], [56, 2, 1, "", "table_name"]], "docarray.array.storage": [[58, 0, 0, "-", "annlite"], [64, 0, 0, "-", "base"], [69, 0, 0, "-", "elastic"], [74, 0, 0, "-", "memory"], [79, 0, 0, "-", "qdrant"], [85, 0, 0, "-", "registry"], [86, 0, 0, "-", "sqlite"], [91, 0, 0, "-", "weaviate"]], "docarray.array.storage.annlite": [[58, 1, 1, "", "AnnliteConfig"], [58, 1, 1, "", "StorageMixins"], [59, 0, 0, "-", "backend"], [60, 0, 0, "-", "find"], [61, 0, 0, "-", "getsetdel"], [62, 0, 0, "-", "helper"], [63, 0, 0, "-", "seqlike"]], "docarray.array.storage.annlite.AnnliteConfig": [[58, 2, 1, "", "columns"], [58, 2, 1, "", "data_path"], [58, 2, 1, "", "ef_construction"], [58, 2, 1, "", "ef_search"], [58, 2, 1, "", "max_connection"], [58, 2, 1, "", "metric"], [58, 2, 1, "", "n_dim"], [58, 2, 1, "", "serialize_config"]], "docarray.array.storage.annlite.StorageMixins": [[58, 2, 1, "", "TYPE_MAP"], [58, 3, 1, "", "append"], [58, 3, 1, "", "clear"], [58, 3, 1, "", "count"], [58, 3, 1, "", "extend"], [58, 3, 1, "", "index"], [58, 3, 1, "", "insert"], [58, 3, 1, "", "pop"], [58, 3, 1, "", "remove"], [58, 3, 1, "", "reverse"]], "docarray.array.storage.annlite.backend": [[59, 1, 1, "", "AnnliteConfig"], [59, 1, 1, "", "BackendMixin"]], "docarray.array.storage.annlite.backend.AnnliteConfig": [[59, 2, 1, "", "columns"], [59, 2, 1, "", "data_path"], [59, 2, 1, "", "ef_construction"], [59, 2, 1, "", "ef_search"], [59, 2, 1, "", "max_connection"], [59, 2, 1, "", "metric"], [59, 2, 1, "", "n_dim"], [59, 2, 1, "", "serialize_config"]], "docarray.array.storage.annlite.backend.BackendMixin": [[59, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.annlite.find": [[60, 1, 1, "", "FindMixin"]], "docarray.array.storage.annlite.getsetdel": [[61, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.annlite.helper": [[62, 1, 1, "", "OffsetMapping"]], "docarray.array.storage.annlite.helper.OffsetMapping": [[62, 3, 1, "", "clear"], [62, 3, 1, "", "close"], [62, 3, 1, "", "commit"], [62, 3, 1, "", "create_table"], [62, 3, 1, "", "del_at_offset"], [62, 3, 1, "", "del_at_offsets"], [62, 3, 1, "", "drop"], [62, 3, 1, "", "drop_table"], [62, 3, 1, "", "dump"], [62, 3, 1, "", "execute"], [62, 3, 1, "", "execute_many"], [62, 3, 1, "", "extend_doc_ids"], [62, 3, 1, "", "get_all_ids"], [62, 3, 1, "", "get_id_by_offset"], [62, 3, 1, "", "get_ids_by_offsets"], [62, 3, 1, "", "get_offset_by_id"], [62, 3, 1, "", "get_offsets_by_ids"], [62, 3, 1, "", "insert_at_offset"], [62, 3, 1, "", "load"], [62, 4, 1, "", "name"], [62, 4, 1, "", "schema"], [62, 3, 1, "", "set_at_offset"], [62, 3, 1, "", "shift_offset"], [62, 4, 1, "", "size"]], "docarray.array.storage.annlite.seqlike": [[63, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.annlite.seqlike.SequenceLikeMixin": [[63, 3, 1, "", "append"], [63, 3, 1, "", "clear"], [63, 3, 1, "", "count"], [63, 3, 1, "", "extend"], [63, 3, 1, "", "index"], [63, 3, 1, "", "insert"], [63, 3, 1, "", "pop"], [63, 3, 1, "", "remove"], [63, 3, 1, "", "reverse"]], "docarray.array.storage.base": [[65, 0, 0, "-", "backend"], [66, 0, 0, "-", "getsetdel"], [67, 0, 0, "-", "helper"], [68, 0, 0, "-", "seqlike"]], "docarray.array.storage.base.backend": [[65, 1, 1, "", "BaseBackendMixin"], [65, 1, 1, "", "TypeMap"]], "docarray.array.storage.base.backend.BaseBackendMixin": [[65, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.base.backend.TypeMap": [[65, 4, 1, "", "converter"], [65, 3, 1, "", "count"], [65, 3, 1, "", "index"], [65, 4, 1, "", "type"]], "docarray.array.storage.base.getsetdel": [[66, 1, 1, "", "BaseGetSetDelMixin"]], "docarray.array.storage.base.helper": [[67, 1, 1, "", "Offset2ID"]], "docarray.array.storage.base.helper.Offset2ID": [[67, 3, 1, "", "append"], [67, 3, 1, "", "clear"], [67, 3, 1, "", "delete_by_id"], [67, 3, 1, "", "delete_by_ids"], [67, 3, 1, "", "delete_by_offset"], [67, 3, 1, "", "extend"], [67, 3, 1, "", "get_id"], [67, 3, 1, "", "index"], [67, 3, 1, "", "insert"], [67, 3, 1, "", "load"], [67, 3, 1, "", "save"], [67, 3, 1, "", "update"], [67, 3, 1, "", "update_ids"]], "docarray.array.storage.base.seqlike": [[68, 1, 1, "", "BaseSequenceLikeMixin"]], "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin": [[68, 3, 1, "", "append"], [68, 3, 1, "", "clear"], [68, 3, 1, "", "count"], [68, 3, 1, "", "extend"], [68, 3, 1, "", "index"], [68, 3, 1, "", "insert"], [68, 3, 1, "", "pop"], [68, 3, 1, "", "remove"], [68, 3, 1, "", "reverse"]], "docarray.array.storage.elastic": [[69, 1, 1, "", "ElasticConfig"], [69, 1, 1, "", "StorageMixins"], [70, 0, 0, "-", "backend"], [71, 0, 0, "-", "find"], [72, 0, 0, "-", "getsetdel"], [73, 0, 0, "-", "seqlike"]], "docarray.array.storage.elastic.ElasticConfig": [[69, 2, 1, "", "batch_size"], [69, 2, 1, "", "columns"], [69, 2, 1, "", "distance"], [69, 2, 1, "", "ef_construction"], [69, 2, 1, "", "es_config"], [69, 2, 1, "", "hosts"], [69, 2, 1, "", "index_name"], [69, 2, 1, "", "index_text"], [69, 2, 1, "", "m"], [69, 2, 1, "", "n_dim"], [69, 2, 1, "", "tag_indices"]], "docarray.array.storage.elastic.StorageMixins": [[69, 2, 1, "", "TYPE_MAP"], [69, 3, 1, "", "append"], [69, 3, 1, "", "clear"], [69, 3, 1, "", "count"], [69, 3, 1, "", "extend"], [69, 3, 1, "", "find"], [69, 3, 1, "", "index"], [69, 3, 1, "", "insert"], [69, 3, 1, "", "pop"], [69, 3, 1, "", "remove"], [69, 3, 1, "", "reverse"]], "docarray.array.storage.elastic.backend": [[70, 1, 1, "", "BackendMixin"], [70, 1, 1, "", "ElasticConfig"]], "docarray.array.storage.elastic.backend.BackendMixin": [[70, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.elastic.backend.ElasticConfig": [[70, 2, 1, "", "batch_size"], [70, 2, 1, "", "columns"], [70, 2, 1, "", "distance"], [70, 2, 1, "", "ef_construction"], [70, 2, 1, "", "es_config"], [70, 2, 1, "", "hosts"], [70, 2, 1, "", "index_name"], [70, 2, 1, "", "index_text"], [70, 2, 1, "", "m"], [70, 2, 1, "", "n_dim"], [70, 2, 1, "", "tag_indices"]], "docarray.array.storage.elastic.find": [[71, 1, 1, "", "FindMixin"]], "docarray.array.storage.elastic.find.FindMixin": [[71, 3, 1, "", "find"]], "docarray.array.storage.elastic.getsetdel": [[72, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.elastic.seqlike": [[73, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.elastic.seqlike.SequenceLikeMixin": [[73, 3, 1, "", "append"], [73, 3, 1, "", "clear"], [73, 3, 1, "", "count"], [73, 3, 1, "", "extend"], [73, 3, 1, "", "index"], [73, 3, 1, "", "insert"], [73, 3, 1, "", "pop"], [73, 3, 1, "", "remove"], [73, 3, 1, "", "reverse"]], "docarray.array.storage.memory": [[74, 1, 1, "", "StorageMixins"], [75, 0, 0, "-", "backend"], [76, 0, 0, "-", "find"], [77, 0, 0, "-", "getsetdel"], [78, 0, 0, "-", "seqlike"]], "docarray.array.storage.memory.StorageMixins": [[74, 2, 1, "", "TYPE_MAP"], [74, 3, 1, "", "append"], [74, 3, 1, "", "clear"], [74, 3, 1, "", "count"], [74, 3, 1, "", "extend"], [74, 3, 1, "", "index"], [74, 3, 1, "", "insert"], [74, 3, 1, "", "pop"], [74, 3, 1, "", "remove"], [74, 3, 1, "", "reverse"]], "docarray.array.storage.memory.backend": [[75, 1, 1, "", "BackendMixin"], [75, 5, 1, "", "needs_id2offset_rebuild"]], "docarray.array.storage.memory.backend.BackendMixin": [[75, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.memory.find": [[76, 1, 1, "", "FindMixin"]], "docarray.array.storage.memory.getsetdel": [[77, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.memory.seqlike": [[78, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.memory.seqlike.SequenceLikeMixin": [[78, 3, 1, "", "append"], [78, 3, 1, "", "clear"], [78, 3, 1, "", "count"], [78, 3, 1, "", "extend"], [78, 3, 1, "", "index"], [78, 3, 1, "", "insert"], [78, 3, 1, "", "pop"], [78, 3, 1, "", "remove"], [78, 3, 1, "", "reverse"]], "docarray.array.storage.qdrant": [[79, 1, 1, "", "QdrantConfig"], [79, 1, 1, "", "StorageMixins"], [80, 0, 0, "-", "backend"], [81, 0, 0, "-", "find"], [82, 0, 0, "-", "getsetdel"], [83, 0, 0, "-", "helper"], [84, 0, 0, "-", "seqlike"]], "docarray.array.storage.qdrant.QdrantConfig": [[79, 2, 1, "", "collection_name"], [79, 2, 1, "", "columns"], [79, 2, 1, "", "distance"], [79, 2, 1, "", "ef_construct"], [79, 2, 1, "", "full_scan_threshold"], [79, 2, 1, "", "host"], [79, 2, 1, "", "m"], [79, 2, 1, "", "n_dim"], [79, 2, 1, "", "port"], [79, 2, 1, "", "scroll_batch_size"], [79, 2, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.StorageMixins": [[79, 2, 1, "", "TYPE_MAP"], [79, 3, 1, "", "append"], [79, 3, 1, "", "clear"], [79, 4, 1, "", "client"], [79, 4, 1, "", "collection_name"], [79, 4, 1, "", "collection_name_meta"], [79, 4, 1, "", "config"], [79, 3, 1, "", "count"], [79, 4, 1, "", "distance"], [79, 3, 1, "", "extend"], [79, 3, 1, "", "index"], [79, 3, 1, "", "insert"], [79, 4, 1, "", "n_dim"], [79, 3, 1, "", "pop"], [79, 3, 1, "", "remove"], [79, 3, 1, "", "reverse"], [79, 3, 1, "", "scan"], [79, 4, 1, "", "scroll_batch_size"], [79, 4, 1, "", "serialization_config"], [79, 4, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.backend": [[80, 1, 1, "", "BackendMixin"], [80, 1, 1, "", "QdrantConfig"]], "docarray.array.storage.qdrant.backend.BackendMixin": [[80, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.qdrant.backend.QdrantConfig": [[80, 2, 1, "", "collection_name"], [80, 2, 1, "", "columns"], [80, 2, 1, "", "distance"], [80, 2, 1, "", "ef_construct"], [80, 2, 1, "", "full_scan_threshold"], [80, 2, 1, "", "host"], [80, 2, 1, "", "m"], [80, 2, 1, "", "n_dim"], [80, 2, 1, "", "port"], [80, 2, 1, "", "scroll_batch_size"], [80, 2, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.find": [[81, 1, 1, "", "FindMixin"]], "docarray.array.storage.qdrant.find.FindMixin": [[81, 4, 1, "", "client"], [81, 4, 1, "", "collection_name"], [81, 4, 1, "", "distance"], [81, 4, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.getsetdel": [[82, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin": [[82, 4, 1, "", "client"], [82, 4, 1, "", "collection_name"], [82, 4, 1, "", "n_dim"], [82, 3, 1, "", "scan"], [82, 4, 1, "", "scroll_batch_size"], [82, 4, 1, "", "serialization_config"]], "docarray.array.storage.qdrant.seqlike": [[84, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin": [[84, 3, 1, "", "append"], [84, 3, 1, "", "clear"], [84, 4, 1, "", "client"], [84, 4, 1, "", "collection_name"], [84, 4, 1, "", "config"], [84, 3, 1, "", "count"], [84, 3, 1, "", "extend"], [84, 3, 1, "", "index"], [84, 3, 1, "", "insert"], [84, 3, 1, "", "pop"], [84, 3, 1, "", "remove"], [84, 3, 1, "", "reverse"]], "docarray.array.storage.sqlite": [[86, 1, 1, "", "SqliteConfig"], [86, 1, 1, "", "StorageMixins"], [87, 0, 0, "-", "backend"], [88, 0, 0, "-", "getsetdel"], [89, 0, 0, "-", "helper"], [90, 0, 0, "-", "seqlike"]], "docarray.array.storage.sqlite.SqliteConfig": [[86, 2, 1, "", "conn_config"], [86, 2, 1, "", "connection"], [86, 2, 1, "", "journal_mode"], [86, 2, 1, "", "serialize_config"], [86, 2, 1, "", "synchronous"], [86, 2, 1, "", "table_name"]], "docarray.array.storage.sqlite.StorageMixins": [[86, 2, 1, "", "TYPE_MAP"], [86, 3, 1, "", "append"], [86, 3, 1, "", "clear"], [86, 3, 1, "", "count"], [86, 3, 1, "", "extend"], [86, 3, 1, "", "index"], [86, 3, 1, "", "insert"], [86, 3, 1, "", "pop"], [86, 3, 1, "", "remove"], [86, 3, 1, "", "reverse"], [86, 2, 1, "", "schema_version"]], "docarray.array.storage.sqlite.backend": [[87, 1, 1, "", "BackendMixin"], [87, 1, 1, "", "SqliteConfig"]], "docarray.array.storage.sqlite.backend.BackendMixin": [[87, 2, 1, "", "TYPE_MAP"], [87, 2, 1, "", "schema_version"]], "docarray.array.storage.sqlite.backend.SqliteConfig": [[87, 2, 1, "", "conn_config"], [87, 2, 1, "", "connection"], [87, 2, 1, "", "journal_mode"], [87, 2, 1, "", "serialize_config"], [87, 2, 1, "", "synchronous"], [87, 2, 1, "", "table_name"]], "docarray.array.storage.sqlite.getsetdel": [[88, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.sqlite.helper": [[89, 5, 1, "", "initialize_table"]], "docarray.array.storage.sqlite.seqlike": [[90, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin": [[90, 3, 1, "", "append"], [90, 3, 1, "", "clear"], [90, 3, 1, "", "count"], [90, 3, 1, "", "extend"], [90, 3, 1, "", "index"], [90, 3, 1, "", "insert"], [90, 3, 1, "", "pop"], [90, 3, 1, "", "remove"], [90, 3, 1, "", "reverse"]], "docarray.array.storage.weaviate": [[91, 1, 1, "", "StorageMixins"], [91, 1, 1, "", "WeaviateConfig"], [92, 0, 0, "-", "backend"], [93, 0, 0, "-", "find"], [94, 0, 0, "-", "getsetdel"], [95, 0, 0, "-", "seqlike"]], "docarray.array.storage.weaviate.StorageMixins": [[91, 2, 1, "", "TYPE_MAP"], [91, 3, 1, "", "append"], [91, 3, 1, "", "clear"], [91, 3, 1, "", "count"], [91, 3, 1, "", "extend"], [91, 3, 1, "", "index"], [91, 3, 1, "", "insert"], [91, 4, 1, "", "name"], [91, 3, 1, "", "pop"], [91, 3, 1, "", "remove"], [91, 3, 1, "", "reverse"]], "docarray.array.storage.weaviate.WeaviateConfig": [[91, 2, 1, "", "cleanup_interval_seconds"], [91, 2, 1, "", "columns"], [91, 2, 1, "", "distance"], [91, 2, 1, "", "dynamic_ef_factor"], [91, 2, 1, "", "dynamic_ef_max"], [91, 2, 1, "", "dynamic_ef_min"], [91, 2, 1, "", "ef"], [91, 2, 1, "", "ef_construction"], [91, 2, 1, "", "flat_search_cutoff"], [91, 2, 1, "", "host"], [91, 2, 1, "", "max_connections"], [91, 2, 1, "", "n_dim"], [91, 2, 1, "", "name"], [91, 2, 1, "", "port"], [91, 2, 1, "", "protocol"], [91, 2, 1, "", "serialize_config"], [91, 2, 1, "", "skip"], [91, 2, 1, "", "timeout_config"], [91, 2, 1, "", "vector_cache_max_objects"]], "docarray.array.storage.weaviate.backend": [[92, 1, 1, "", "BackendMixin"], [92, 1, 1, "", "WeaviateConfig"]], "docarray.array.storage.weaviate.backend.BackendMixin": [[92, 2, 1, "", "TYPE_MAP"], [92, 4, 1, "", "name"]], "docarray.array.storage.weaviate.backend.WeaviateConfig": [[92, 2, 1, "", "cleanup_interval_seconds"], [92, 2, 1, "", "columns"], [92, 2, 1, "", "distance"], [92, 2, 1, "", "dynamic_ef_factor"], [92, 2, 1, "", "dynamic_ef_max"], [92, 2, 1, "", "dynamic_ef_min"], [92, 2, 1, "", "ef"], [92, 2, 1, "", "ef_construction"], [92, 2, 1, "", "flat_search_cutoff"], [92, 2, 1, "", "host"], [92, 2, 1, "", "max_connections"], [92, 2, 1, "", "n_dim"], [92, 2, 1, "", "name"], [92, 2, 1, "", "port"], [92, 2, 1, "", "protocol"], [92, 2, 1, "", "serialize_config"], [92, 2, 1, "", "skip"], [92, 2, 1, "", "timeout_config"], [92, 2, 1, "", "vector_cache_max_objects"]], "docarray.array.storage.weaviate.find": [[93, 1, 1, "", "FindMixin"]], "docarray.array.storage.weaviate.getsetdel": [[94, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.weaviate.seqlike": [[95, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin": [[95, 3, 1, "", "append"], [95, 3, 1, "", "clear"], [95, 3, 1, "", "count"], [95, 3, 1, "", "extend"], [95, 3, 1, "", "index"], [95, 3, 1, "", "insert"], [95, 3, 1, "", "pop"], [95, 3, 1, "", "remove"], [95, 3, 1, "", "reverse"]], "docarray.array.weaviate": [[96, 1, 1, "", "DocumentArrayWeaviate"], [96, 1, 1, "", "WeaviateConfig"]], "docarray.array.weaviate.DocumentArrayWeaviate": [[96, 2, 1, "", "TYPE_MAP"], [96, 3, 1, "", "append"], [96, 3, 1, "", "apply"], [96, 3, 1, "", "apply_batch"], [96, 3, 1, "", "batch"], [96, 3, 1, "", "batch_ids"], [96, 4, 1, "", "blobs"], [96, 3, 1, "", "clear"], [96, 4, 1, "", "contents"], [96, 3, 1, "", "count"], [96, 3, 1, "", "dataloader"], [96, 3, 1, "", "embed"], [96, 4, 1, "", "embeddings"], [96, 3, 1, "", "empty"], [96, 3, 1, "", "evaluate"], [96, 3, 1, "", "extend"], [96, 3, 1, "", "find"], [96, 3, 1, "", "flatten"], [96, 3, 1, "", "from_base64"], [96, 3, 1, "", "from_bytes"], [96, 3, 1, "", "from_csv"], [96, 3, 1, "", "from_dataframe"], [96, 3, 1, "", "from_dict"], [96, 3, 1, "", "from_files"], [96, 3, 1, "", "from_huggingface_datasets"], [96, 3, 1, "", "from_json"], [96, 3, 1, "", "from_lines"], [96, 3, 1, "", "from_list"], [96, 3, 1, "", "from_ndarray"], [96, 3, 1, "", "from_ndjson"], [96, 3, 1, "", "from_protobuf"], [96, 3, 1, "", "from_pydantic_model"], [96, 3, 1, "", "from_strawberry_type"], [96, 3, 1, "", "get_json_schema"], [96, 3, 1, "", "get_vocabulary"], [96, 3, 1, "", "index"], [96, 3, 1, "", "insert"], [96, 3, 1, "", "load"], [96, 3, 1, "", "load_binary"], [96, 3, 1, "", "load_csv"], [96, 3, 1, "", "load_json"], [96, 3, 1, "", "map"], [96, 3, 1, "", "map_batch"], [96, 3, 1, "", "match"], [96, 4, 1, "", "name"], [96, 3, 1, "", "plot_embeddings"], [96, 3, 1, "", "plot_image_sprites"], [96, 3, 1, "", "pop"], [96, 3, 1, "", "post"], [96, 3, 1, "", "pull"], [96, 3, 1, "", "push"], [96, 3, 1, "", "reduce"], [96, 3, 1, "", "reduce_all"], [96, 3, 1, "", "remove"], [96, 3, 1, "", "reverse"], [96, 3, 1, "", "sample"], [96, 3, 1, "", "save"], [96, 3, 1, "", "save_binary"], [96, 3, 1, "", "save_csv"], [96, 3, 1, "", "save_embeddings_csv"], [96, 3, 1, "", "save_gif"], [96, 3, 1, "", "save_json"], [96, 3, 1, "", "shuffle"], [96, 3, 1, "", "split_by_tag"], [96, 3, 1, "", "summary"], [96, 4, 1, "", "tensors"], [96, 4, 1, "", "texts"], [96, 3, 1, "", "to_base64"], [96, 3, 1, "", "to_bytes"], [96, 3, 1, "", "to_dataframe"], [96, 3, 1, "", "to_dict"], [96, 3, 1, "", "to_json"], [96, 3, 1, "", "to_list"], [96, 3, 1, "", "to_protobuf"], [96, 3, 1, "", "to_pydantic_model"], [96, 3, 1, "", "to_strawberry_type"], [96, 3, 1, "", "traverse"], [96, 3, 1, "", "traverse_flat"], [96, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.weaviate.WeaviateConfig": [[96, 2, 1, "", "cleanup_interval_seconds"], [96, 2, 1, "", "columns"], [96, 2, 1, "", "distance"], [96, 2, 1, "", "dynamic_ef_factor"], [96, 2, 1, "", "dynamic_ef_max"], [96, 2, 1, "", "dynamic_ef_min"], [96, 2, 1, "", "ef"], [96, 2, 1, "", "ef_construction"], [96, 2, 1, "", "flat_search_cutoff"], [96, 2, 1, "", "host"], [96, 2, 1, "", "max_connections"], [96, 2, 1, "", "n_dim"], [96, 2, 1, "", "name"], [96, 2, 1, "", "port"], [96, 2, 1, "", "protocol"], [96, 2, 1, "", "serialize_config"], [96, 2, 1, "", "skip"], [96, 2, 1, "", "timeout_config"], [96, 2, 1, "", "vector_cache_max_objects"]], "docarray.base": [[97, 1, 1, "", "BaseDCType"]], "docarray.base.BaseDCType": [[97, 3, 1, "", "clear"], [97, 3, 1, "", "copy_from"], [97, 4, 1, "", "nbytes"], [97, 4, 1, "", "non_empty_fields"], [97, 3, 1, "", "pop"]], "docarray.dataclasses": [[99, 0, 0, "-", "getter"], [100, 0, 0, "-", "setter"], [101, 0, 0, "-", "types"]], "docarray.dataclasses.getter": [[99, 5, 1, "", "audio_getter"], [99, 5, 1, "", "blob_getter"], [99, 5, 1, "", "image_getter"], [99, 5, 1, "", "json_getter"], [99, 5, 1, "", "mesh_getter"], [99, 5, 1, "", "tabular_getter"], [99, 5, 1, "", "text_getter"], [99, 5, 1, "", "video_getter"]], "docarray.dataclasses.setter": [[100, 5, 1, "", "audio_setter"], [100, 5, 1, "", "blob_setter"], [100, 5, 1, "", "image_setter"], [100, 5, 1, "", "json_setter"], [100, 5, 1, "", "mesh_setter"], [100, 5, 1, "", "tabular_setter"], [100, 5, 1, "", "text_setter"], [100, 5, 1, "", "video_setter"]], "docarray.dataclasses.types": [[101, 5, 1, "", "dataclass"], [101, 5, 1, "", "field"], [101, 5, 1, "", "is_multimodal"]], "docarray.document": [[102, 1, 1, "", "Document"], [103, 0, 0, "-", "data"], [104, 0, 0, "-", "generators"], [105, 0, 0, "-", "mixins"], [127, 0, 0, "-", "pydantic_model"]], "docarray.document.Document": [[102, 4, 1, "", "adjacency"], [102, 4, 1, "", "blob"], [102, 4, 1, "", "chunks"], [102, 3, 1, "", "clear"], [102, 4, 1, "", "content"], [102, 4, 1, "", "content_hash"], [102, 4, 1, "", "content_type"], [102, 3, 1, "", "convert_blob_to_datauri"], [102, 3, 1, "", "convert_blob_to_image_tensor"], [102, 3, 1, "", "convert_blob_to_tensor"], [102, 3, 1, "", "convert_content_to_datauri"], [102, 3, 1, "", "convert_image_tensor_to_blob"], [102, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [102, 3, 1, "", "convert_image_tensor_to_uri"], [102, 3, 1, "", "convert_tensor_to_blob"], [102, 3, 1, "", "convert_tensor_to_text"], [102, 3, 1, "", "convert_text_to_datauri"], [102, 3, 1, "", "convert_text_to_tensor"], [102, 3, 1, "", "convert_uri_to_datauri"], [102, 3, 1, "", "copy_from"], [102, 3, 1, "", "display"], [102, 3, 1, "", "embed"], [102, 3, 1, "", "embed_feature_hashing"], [102, 4, 1, "", "embedding"], [102, 4, 1, "", "evaluations"], [102, 3, 1, "", "from_base64"], [102, 3, 1, "", "from_bytes"], [102, 3, 1, "", "from_dict"], [102, 3, 1, "", "from_json"], [102, 3, 1, "", "from_protobuf"], [102, 3, 1, "", "from_pydantic_model"], [102, 3, 1, "", "from_strawberry_type"], [102, 3, 1, "", "get_json_schema"], [102, 3, 1, "", "get_multi_modal_attribute"], [102, 3, 1, "", "get_vocabulary"], [102, 4, 1, "", "granularity"], [102, 4, 1, "", "id"], [102, 4, 1, "", "is_multimodal"], [102, 3, 1, "", "load_pil_image_to_datauri"], [102, 3, 1, "", "load_uri_to_audio_tensor"], [102, 3, 1, "", "load_uri_to_blob"], [102, 3, 1, "", "load_uri_to_image_tensor"], [102, 3, 1, "", "load_uri_to_point_cloud_tensor"], [102, 3, 1, "", "load_uri_to_text"], [102, 3, 1, "", "load_uri_to_video_tensor"], [102, 4, 1, "", "location"], [102, 3, 1, "", "match"], [102, 4, 1, "", "matches"], [102, 4, 1, "", "mime_type"], [102, 4, 1, "", "modality"], [102, 4, 1, "", "nbytes"], [102, 4, 1, "", "non_empty_fields"], [102, 4, 1, "", "offset"], [102, 4, 1, "", "parent_id"], [102, 3, 1, "", "plot_matches_sprites"], [102, 3, 1, "", "pop"], [102, 3, 1, "", "post"], [102, 3, 1, "", "save_audio_tensor_to_file"], [102, 3, 1, "", "save_blob_to_file"], [102, 3, 1, "", "save_image_tensor_to_file"], [102, 3, 1, "", "save_uri_to_file"], [102, 3, 1, "", "save_video_tensor_to_file"], [102, 4, 1, "", "scores"], [102, 3, 1, "", "set_image_tensor_channel_axis"], [102, 3, 1, "", "set_image_tensor_inv_normalization"], [102, 3, 1, "", "set_image_tensor_normalization"], [102, 3, 1, "", "set_image_tensor_shape"], [102, 3, 1, "", "summary"], [102, 4, 1, "", "tags"], [102, 4, 1, "", "tensor"], [102, 4, 1, "", "text"], [102, 3, 1, "", "to_base64"], [102, 3, 1, "", "to_bytes"], [102, 3, 1, "", "to_dict"], [102, 3, 1, "", "to_json"], [102, 3, 1, "", "to_protobuf"], [102, 3, 1, "", "to_pydantic_model"], [102, 3, 1, "", "to_strawberry_type"], [102, 4, 1, "", "uri"], [102, 4, 1, "", "weight"]], "docarray.document.data": [[103, 1, 1, "", "DocumentData"]], "docarray.document.data.DocumentData": [[103, 2, 1, "", "adjacency"], [103, 2, 1, "", "blob"], [103, 2, 1, "", "chunks"], [103, 2, 1, "", "content"], [103, 2, 1, "", "embedding"], [103, 2, 1, "", "evaluations"], [103, 2, 1, "", "granularity"], [103, 2, 1, "", "id"], [103, 2, 1, "", "location"], [103, 2, 1, "", "matches"], [103, 2, 1, "", "mime_type"], [103, 2, 1, "", "modality"], [103, 2, 1, "", "offset"], [103, 2, 1, "", "parent_id"], [103, 2, 1, "", "scores"], [103, 2, 1, "", "tags"], [103, 2, 1, "", "tensor"], [103, 2, 1, "", "text"], [103, 2, 1, "", "uri"], [103, 2, 1, "", "weight"]], "docarray.document.generators": [[104, 5, 1, "", "from_csv"], [104, 5, 1, "", "from_files"], [104, 5, 1, "", "from_huggingface_datasets"], [104, 5, 1, "", "from_lines"], [104, 5, 1, "", "from_ndarray"], [104, 5, 1, "", "from_ndjson"]], "docarray.document.mixins": [[105, 1, 1, "", "AllMixins"], [106, 0, 0, "-", "attribute"], [107, 0, 0, "-", "audio"], [108, 0, 0, "-", "blob"], [109, 0, 0, "-", "content"], [110, 0, 0, "-", "convert"], [111, 0, 0, "-", "dump"], [112, 0, 0, "-", "featurehash"], [113, 0, 0, "-", "helper"], [114, 0, 0, "-", "image"], [115, 0, 0, "-", "mesh"], [116, 0, 0, "-", "multimodal"], [117, 0, 0, "-", "plot"], [118, 0, 0, "-", "porting"], [119, 0, 0, "-", "property"], [120, 0, 0, "-", "protobuf"], [121, 0, 0, "-", "pydantic"], [122, 0, 0, "-", "rich_embedding"], [123, 0, 0, "-", "strawberry"], [124, 0, 0, "-", "sugar"], [125, 0, 0, "-", "text"], [126, 0, 0, "-", "video"]], "docarray.document.mixins.AllMixins": [[105, 4, 1, "", "adjacency"], [105, 4, 1, "", "blob"], [105, 4, 1, "", "chunks"], [105, 4, 1, "", "content"], [105, 4, 1, "", "content_hash"], [105, 4, 1, "", "content_type"], [105, 3, 1, "", "convert_blob_to_datauri"], [105, 3, 1, "", "convert_blob_to_image_tensor"], [105, 3, 1, "", "convert_blob_to_tensor"], [105, 3, 1, "", "convert_content_to_datauri"], [105, 3, 1, "", "convert_image_tensor_to_blob"], [105, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [105, 3, 1, "", "convert_image_tensor_to_uri"], [105, 3, 1, "", "convert_tensor_to_blob"], [105, 3, 1, "", "convert_tensor_to_text"], [105, 3, 1, "", "convert_text_to_datauri"], [105, 3, 1, "", "convert_text_to_tensor"], [105, 3, 1, "", "convert_uri_to_datauri"], [105, 3, 1, "", "display"], [105, 3, 1, "", "embed"], [105, 3, 1, "", "embed_feature_hashing"], [105, 4, 1, "", "embedding"], [105, 4, 1, "", "evaluations"], [105, 3, 1, "", "from_base64"], [105, 3, 1, "", "from_bytes"], [105, 3, 1, "", "from_dict"], [105, 3, 1, "", "from_json"], [105, 3, 1, "", "from_protobuf"], [105, 3, 1, "", "from_pydantic_model"], [105, 3, 1, "", "from_strawberry_type"], [105, 3, 1, "", "get_json_schema"], [105, 3, 1, "", "get_multi_modal_attribute"], [105, 3, 1, "", "get_vocabulary"], [105, 4, 1, "", "granularity"], [105, 4, 1, "", "id"], [105, 4, 1, "", "is_multimodal"], [105, 3, 1, "", "load_pil_image_to_datauri"], [105, 3, 1, "", "load_uri_to_audio_tensor"], [105, 3, 1, "", "load_uri_to_blob"], [105, 3, 1, "", "load_uri_to_image_tensor"], [105, 3, 1, "", "load_uri_to_point_cloud_tensor"], [105, 3, 1, "", "load_uri_to_text"], [105, 3, 1, "", "load_uri_to_video_tensor"], [105, 4, 1, "", "location"], [105, 3, 1, "", "match"], [105, 4, 1, "", "matches"], [105, 4, 1, "", "mime_type"], [105, 4, 1, "", "modality"], [105, 4, 1, "", "offset"], [105, 4, 1, "", "parent_id"], [105, 3, 1, "", "plot_matches_sprites"], [105, 3, 1, "", "post"], [105, 3, 1, "", "save_audio_tensor_to_file"], [105, 3, 1, "", "save_blob_to_file"], [105, 3, 1, "", "save_image_tensor_to_file"], [105, 3, 1, "", "save_uri_to_file"], [105, 3, 1, "", "save_video_tensor_to_file"], [105, 4, 1, "", "scores"], [105, 3, 1, "", "set_image_tensor_channel_axis"], [105, 3, 1, "", "set_image_tensor_inv_normalization"], [105, 3, 1, "", "set_image_tensor_normalization"], [105, 3, 1, "", "set_image_tensor_shape"], [105, 3, 1, "", "summary"], [105, 4, 1, "", "tags"], [105, 4, 1, "", "tensor"], [105, 4, 1, "", "text"], [105, 3, 1, "", "to_base64"], [105, 3, 1, "", "to_bytes"], [105, 3, 1, "", "to_dict"], [105, 3, 1, "", "to_json"], [105, 3, 1, "", "to_protobuf"], [105, 3, 1, "", "to_pydantic_model"], [105, 3, 1, "", "to_strawberry_type"], [105, 4, 1, "", "uri"], [105, 4, 1, "", "weight"]], "docarray.document.mixins.attribute": [[106, 1, 1, "", "GetAttributesMixin"]], "docarray.document.mixins.audio": [[107, 1, 1, "", "AudioDataMixin"]], "docarray.document.mixins.audio.AudioDataMixin": [[107, 3, 1, "", "load_uri_to_audio_tensor"], [107, 3, 1, "", "save_audio_tensor_to_file"]], "docarray.document.mixins.blob": [[108, 1, 1, "", "BlobDataMixin"]], "docarray.document.mixins.blob.BlobDataMixin": [[108, 3, 1, "", "convert_blob_to_datauri"], [108, 3, 1, "", "load_uri_to_blob"], [108, 3, 1, "", "save_blob_to_file"]], "docarray.document.mixins.content": [[109, 1, 1, "", "ContentPropertyMixin"]], "docarray.document.mixins.content.ContentPropertyMixin": [[109, 4, 1, "", "content_hash"], [109, 3, 1, "", "convert_content_to_datauri"]], "docarray.document.mixins.convert": [[110, 1, 1, "", "ConvertMixin"]], "docarray.document.mixins.convert.ConvertMixin": [[110, 3, 1, "", "convert_blob_to_tensor"], [110, 3, 1, "", "convert_tensor_to_blob"], [110, 3, 1, "", "convert_uri_to_datauri"]], "docarray.document.mixins.dump": [[111, 1, 1, "", "UriFileMixin"]], "docarray.document.mixins.dump.UriFileMixin": [[111, 3, 1, "", "save_uri_to_file"]], "docarray.document.mixins.featurehash": [[112, 1, 1, "", "FeatureHashMixin"]], "docarray.document.mixins.featurehash.FeatureHashMixin": [[112, 3, 1, "", "embed_feature_hashing"]], "docarray.document.mixins.image": [[114, 1, 1, "", "ImageDataMixin"]], "docarray.document.mixins.image.ImageDataMixin": [[114, 3, 1, "", "convert_blob_to_image_tensor"], [114, 3, 1, "", "convert_image_tensor_to_blob"], [114, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [114, 3, 1, "", "convert_image_tensor_to_uri"], [114, 3, 1, "", "load_pil_image_to_datauri"], [114, 3, 1, "", "load_uri_to_image_tensor"], [114, 3, 1, "", "save_image_tensor_to_file"], [114, 3, 1, "", "set_image_tensor_channel_axis"], [114, 3, 1, "", "set_image_tensor_inv_normalization"], [114, 3, 1, "", "set_image_tensor_normalization"], [114, 3, 1, "", "set_image_tensor_shape"]], "docarray.document.mixins.mesh": [[115, 1, 1, "", "MeshDataMixin"]], "docarray.document.mixins.mesh.MeshDataMixin": [[115, 3, 1, "", "load_uri_to_point_cloud_tensor"]], "docarray.document.mixins.multimodal": [[116, 1, 1, "", "MultiModalMixin"]], "docarray.document.mixins.multimodal.MultiModalMixin": [[116, 3, 1, "", "get_multi_modal_attribute"], [116, 4, 1, "", "is_multimodal"]], "docarray.document.mixins.plot": [[117, 1, 1, "", "PlotMixin"]], "docarray.document.mixins.plot.PlotMixin": [[117, 3, 1, "", "display"], [117, 3, 1, "", "plot_matches_sprites"], [117, 3, 1, "", "summary"]], "docarray.document.mixins.porting": [[118, 1, 1, "", "PortingMixin"]], "docarray.document.mixins.porting.PortingMixin": [[118, 3, 1, "", "from_base64"], [118, 3, 1, "", "from_bytes"], [118, 3, 1, "", "from_dict"], [118, 3, 1, "", "from_json"], [118, 3, 1, "", "to_base64"], [118, 3, 1, "", "to_bytes"], [118, 3, 1, "", "to_dict"], [118, 3, 1, "", "to_json"]], "docarray.document.mixins.property": [[119, 1, 1, "", "PropertyMixin"]], "docarray.document.mixins.property.PropertyMixin": [[119, 4, 1, "", "adjacency"], [119, 4, 1, "", "blob"], [119, 4, 1, "", "chunks"], [119, 4, 1, "", "content"], [119, 4, 1, "", "content_type"], [119, 4, 1, "", "embedding"], [119, 4, 1, "", "evaluations"], [119, 4, 1, "", "granularity"], [119, 4, 1, "", "id"], [119, 4, 1, "", "location"], [119, 4, 1, "", "matches"], [119, 4, 1, "", "mime_type"], [119, 4, 1, "", "modality"], [119, 4, 1, "", "offset"], [119, 4, 1, "", "parent_id"], [119, 4, 1, "", "scores"], [119, 4, 1, "", "tags"], [119, 4, 1, "", "tensor"], [119, 4, 1, "", "text"], [119, 4, 1, "", "uri"], [119, 4, 1, "", "weight"]], "docarray.document.mixins.protobuf": [[120, 1, 1, "", "ProtobufMixin"]], "docarray.document.mixins.protobuf.ProtobufMixin": [[120, 3, 1, "", "from_protobuf"], [120, 3, 1, "", "to_protobuf"]], "docarray.document.mixins.pydantic": [[121, 1, 1, "", "PydanticMixin"]], "docarray.document.mixins.pydantic.PydanticMixin": [[121, 3, 1, "", "from_pydantic_model"], [121, 3, 1, "", "get_json_schema"], [121, 3, 1, "", "to_pydantic_model"]], "docarray.document.mixins.rich_embedding": [[122, 1, 1, "", "ColorBoxEmbedding"]], "docarray.document.mixins.strawberry": [[123, 1, 1, "", "StrawberryMixin"]], "docarray.document.mixins.strawberry.StrawberryMixin": [[123, 3, 1, "", "from_strawberry_type"], [123, 3, 1, "", "to_strawberry_type"]], "docarray.document.mixins.sugar": [[124, 1, 1, "", "SingletonSugarMixin"]], "docarray.document.mixins.sugar.SingletonSugarMixin": [[124, 3, 1, "", "embed"], [124, 3, 1, "", "match"], [124, 3, 1, "", "post"]], "docarray.document.mixins.text": [[125, 1, 1, "", "TextDataMixin"]], "docarray.document.mixins.text.TextDataMixin": [[125, 3, 1, "", "convert_tensor_to_text"], [125, 3, 1, "", "convert_text_to_datauri"], [125, 3, 1, "", "convert_text_to_tensor"], [125, 3, 1, "", "get_vocabulary"], [125, 3, 1, "", "load_uri_to_text"]], "docarray.document.mixins.video": [[126, 1, 1, "", "VideoDataMixin"]], "docarray.document.mixins.video.VideoDataMixin": [[126, 3, 1, "", "load_uri_to_video_tensor"], [126, 3, 1, "", "save_video_tensor_to_file"]], "docarray.document.pydantic_model": [[127, 1, 1, "", "PydanticDocument"]], "docarray.document.pydantic_model.PydanticDocument": [[127, 1, 1, "", "Config"], [127, 2, 1, "", "adjacency"], [127, 2, 1, "", "blob"], [127, 2, 1, "", "chunks"], [127, 3, 1, "", "construct"], [127, 3, 1, "", "copy"], [127, 3, 1, "", "dict"], [127, 2, 1, "", "embedding"], [127, 2, 1, "", "evaluations"], [127, 3, 1, "", "from_orm"], [127, 2, 1, "", "granularity"], [127, 2, 1, "", "id"], [127, 3, 1, "", "json"], [127, 2, 1, "", "location"], [127, 2, 1, "", "matches"], [127, 2, 1, "", "mime_type"], [127, 2, 1, "", "modality"], [127, 2, 1, "", "offset"], [127, 2, 1, "", "parent_id"], [127, 3, 1, "", "parse_file"], [127, 3, 1, "", "parse_obj"], [127, 3, 1, "", "parse_raw"], [127, 3, 1, "", "schema"], [127, 3, 1, "", "schema_json"], [127, 2, 1, "", "scores"], [127, 2, 1, "", "tags"], [127, 2, 1, "", "tensor"], [127, 2, 1, "", "text"], [127, 3, 1, "", "update_forward_refs"], [127, 2, 1, "", "uri"], [127, 3, 1, "", "validate"], [127, 2, 1, "", "weight"]], "docarray.document.pydantic_model.PydanticDocument.Config": [[127, 2, 1, "", "smart_union"]], "docarray.helper": [[129, 5, 1, "", "add_protocol_and_compress_to_file_path"], [129, 1, 1, "", "cached_property"], [129, 5, 1, "", "compress_bytes"], [129, 5, 1, "", "dataclass_from_dict"], [129, 5, 1, "", "decompress_bytes"], [129, 5, 1, "", "deprecate_by"], [129, 5, 1, "", "download_mermaid_url"], [129, 5, 1, "", "dunder_get"], [129, 5, 1, "", "filter_dict"], [129, 5, 1, "", "get_ci_vendor"], [129, 5, 1, "", "get_compress_ctx"], [129, 5, 1, "", "get_full_version"], [129, 5, 1, "", "get_request_header"], [129, 5, 1, "", "protocol_and_compress_from_file_path"], [129, 5, 1, "", "random_identity"], [129, 5, 1, "", "random_port"], [129, 5, 1, "", "random_uuid"], [129, 5, 1, "", "reset_ports"], [129, 5, 1, "", "typename"]], "docarray.math": [[131, 0, 0, "-", "distance"], [136, 0, 0, "-", "evaluation"], [137, 0, 0, "-", "helper"], [138, 0, 0, "-", "ndarray"]], "docarray.math.distance": [[131, 5, 1, "", "cdist"], [132, 0, 0, "-", "numpy"], [131, 5, 1, "", "pdist"], [134, 0, 0, "-", "tensorflow"], [135, 0, 0, "-", "torch"]], "docarray.math.distance.numpy": [[132, 5, 1, "", "cosine"], [132, 5, 1, "", "euclidean"], [132, 5, 1, "", "sparse_cosine"], [132, 5, 1, "", "sparse_euclidean"], [132, 5, 1, "", "sparse_sqeuclidean"], [132, 5, 1, "", "sqeuclidean"]], "docarray.math.distance.tensorflow": [[134, 5, 1, "", "cosine"], [134, 5, 1, "", "euclidean"], [134, 5, 1, "", "sqeuclidean"]], "docarray.math.distance.torch": [[135, 5, 1, "", "cosine"], [135, 5, 1, "", "euclidean"], [135, 5, 1, "", "sqeuclidean"]], "docarray.math.evaluation": [[136, 5, 1, "", "average_precision"], [136, 5, 1, "", "dcg_at_k"], [136, 5, 1, "", "f1_score_at_k"], [136, 5, 1, "", "hit_at_k"], [136, 5, 1, "", "ndcg_at_k"], [136, 5, 1, "", "precision_at_k"], [136, 5, 1, "", "r_precision"], [136, 5, 1, "", "recall_at_k"], [136, 5, 1, "", "reciprocal_rank"]], "docarray.math.helper": [[137, 5, 1, "", "minmax_normalize"], [137, 5, 1, "", "top_k"], [137, 5, 1, "", "update_rows_x_mat_best"]], "docarray.math.ndarray": [[138, 5, 1, "", "check_arraylike_equality"], [138, 5, 1, "", "detach_tensor_if_present"], [138, 5, 1, "", "get_array_rows"], [138, 5, 1, "", "get_array_type"], [138, 5, 1, "", "ravel"], [138, 5, 1, "", "to_list"], [138, 5, 1, "", "to_numpy_array"], [138, 5, 1, "", "unravel"]], "docarray.proto": [[140, 0, 0, "-", "docarray_pb2"], [141, 0, 0, "-", "io"]], "docarray.proto.io": [[141, 5, 1, "", "flush_proto"], [142, 0, 0, "-", "ndarray"], [141, 5, 1, "", "parse_proto"]], "docarray.proto.io.ndarray": [[142, 5, 1, "", "flush_ndarray"], [142, 5, 1, "", "read_ndarray"]], "docarray.score": [[143, 1, 1, "", "NamedScore"], [144, 0, 0, "-", "data"], [145, 0, 0, "-", "mixins"]], "docarray.score.NamedScore": [[143, 3, 1, "", "clear"], [143, 3, 1, "", "copy_from"], [143, 4, 1, "", "description"], [143, 4, 1, "", "nbytes"], [143, 4, 1, "", "non_empty_fields"], [143, 4, 1, "", "op_name"], [143, 3, 1, "", "pop"], [143, 4, 1, "", "ref_id"], [143, 3, 1, "", "to_dict"], [143, 4, 1, "", "value"]], "docarray.score.data": [[144, 1, 1, "", "NamedScoreData"]], "docarray.score.data.NamedScoreData": [[144, 2, 1, "", "description"], [144, 2, 1, "", "op_name"], [144, 2, 1, "", "ref_id"], [144, 2, 1, "", "value"]], "docarray.score.mixins": [[145, 1, 1, "", "AllMixins"], [146, 0, 0, "-", "property"], [147, 0, 0, "-", "representer"]], "docarray.score.mixins.AllMixins": [[145, 4, 1, "", "description"], [145, 4, 1, "", "op_name"], [145, 4, 1, "", "ref_id"], [145, 3, 1, "", "to_dict"], [145, 4, 1, "", "value"]], "docarray.score.mixins.property": [[146, 1, 1, "", "PropertyMixin"]], "docarray.score.mixins.property.PropertyMixin": [[146, 4, 1, "", "description"], [146, 4, 1, "", "op_name"], [146, 4, 1, "", "ref_id"], [146, 4, 1, "", "value"]], "docarray.score.mixins.representer": [[147, 1, 1, "", "RepresentMixin"]], "docarray.score.mixins.representer.RepresentMixin": [[147, 3, 1, "", "to_dict"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:function", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"annlit": [0, 13, 58, 59, 60, 61, 62, 63], "usag": [0, 2, 5, 6, 7], "config": [0, 2, 4, 5, 6, 7, 159], "vector": [0, 2, 4, 5, 7], "search": [0, 1, 2, 4, 5], "filter": [0, 2, 4, 5, 7, 176], "exampl": [0, 4, 5, 7, 8, 151, 153, 178], "find": [0, 3, 5, 7, 28, 60, 71, 76, 81, 93, 165, 178], "onli": [0, 7], "queri": [0, 2, 7, 176, 178], "One": 1, "million": 1, "scale": [1, 184], "benchmark": 1, "result": [1, 7, 183], "setup": 1, "set": [1, 7], "nearest": [1, 165, 178], "neighbour": [1, 165, 178], "rational": 1, "experi": 1, "design": [1, 186], "incomplet": 1, "store": [1, 3, 4, 10], "conclus": 1, "elasticsearch": 2, "start": [2, 5, 7], "elast": [2, 17, 69, 70, 71, 72, 73], "servic": [2, 5, 7, 160, 184], "creat": [2, 3, 5, 7, 162], "documentarrai": [2, 3, 5, 7, 10, 150, 165, 173, 177, 183, 185], "backend": [2, 3, 4, 5, 7, 59, 65, 70, 75, 80, 87, 92, 150, 179], "secur": 2, "connect": 2, "text": [2, 50, 125, 156, 160], "field": [2, 150, 158, 159, 183], "tag": [2, 172], "note": 2, "add": [3, 150], "new": [3, 162], "document": [3, 4, 10, 16, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 150, 156, 159, 164, 165, 167, 172, 173, 175, 183, 185, 188, 189], "step": 3, "1": [3, 151, 152, 154, 155, 156, 157], "folder": 3, "2": [3, 150, 151, 152, 154, 156, 157], "implement": 3, "getsetdel": [3, 61, 66, 72, 77, 82, 88, 94], "py": 3, "3": [3, 150, 151, 152, 154, 156, 157], "seqlik": [3, 63, 68, 73, 78, 84, 90, 95], "4": [3, 150, 151, 152, 154, 156, 157], "5": [3, 150, 151, 152, 154, 155, 156, 157], "6": [3, 151, 152, 155, 157], "summar": 3, "everyth": 3, "__init__": 3, "7": [3, 151, 154, 156, 157], "subclass": 3, "from": [3, 159, 163, 164, 169, 173, 181], "8": [3, 151, 154, 156, 157], "entrypoint": 3, "On": [3, 165], "pull": 3, "request": 3, "test": 3, "type": [3, 101, 148, 158, 162, 178, 188, 189], "hint": 3, "construct": [4, 159, 164, 173], "summari": [4, 182, 184], "known": 4, "limit": [4, 183], "multipl": [4, 158, 165, 173, 176], "refer": 4, "same": 4, "storag": [4, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 150], "out": [4, 184], "arrai": [4, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 173], "modif": 4, "element": [4, 173], "access": [4, 158, 163, 171, 172], "i": [4, 161, 178, 186], "slower": 4, "qdrant": [5, 52, 79, 80, 81, 82, 83, 84], "minimum": [5, 7], "sqlite": [6, 56, 86, 87, 88, 89, 90], "weaviat": [7, 91, 92, 93, 94, 95, 96], "sort": 7, "certainti": 7, "includ": 7, "addit": 7, "properti": [7, 119, 146], "return": [7, 178, 183], "graphql": 8, "basic": [8, 172], "integr": 8, "fastapi": [8, 183], "pytorch": 9, "deep": [9, 173], "learn": 9, "framework": 9, "load": [9, 151, 152, 155, 157, 163], "map": 9, "batch": [9, 172], "one": 9, "shot": 9, "python": 10, "api": [10, 150], "docarrai": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 183, 186, 187, 188, 189], "dataclass": [10, 98, 99, 100, 101, 150, 158, 159, 161], "packag": [11, 12, 20, 22, 32, 53, 57, 58, 64, 69, 74, 79, 86, 91, 98, 102, 105, 130, 131, 139, 141, 143, 145, 148, 154, 184], "subpackag": [11, 12, 20, 57, 102, 130, 139, 143], "submodul": [11, 12, 20, 22, 32, 53, 57, 58, 64, 69, 74, 79, 86, 91, 98, 102, 105, 130, 131, 139, 141, 143, 145], "modul": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148], "content": [11, 12, 20, 21, 22, 32, 53, 57, 58, 64, 69, 74, 79, 86, 91, 98, 102, 105, 109, 130, 131, 139, 141, 143, 145, 148, 150, 163, 171, 185, 188, 189], "base": [14, 64, 65, 66, 67, 68, 97], "chunk": 15, "match": [18, 41, 156, 175, 178, 182], "memori": [19, 74, 75, 76, 77, 78], "mixin": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 145, 146, 147], "dataload": [22, 23], "helper": [23, 62, 67, 83, 89, 113, 129, 137, 172], "delitem": 24, "emb": [25, 160, 174], "empti": [26, 164, 173], "evalu": [27, 136, 175], "getattr": 29, "getitem": 30, "group": 31, "io": [32, 33, 34, 35, 36, 37, 38, 39, 40, 141, 142], "binari": [33, 181], "common": 34, "csv": [35, 155], "datafram": [36, 181], "from_gen": 37, "json": [38, 150, 169, 181, 183], "pbar": 39, "pushpul": 40, "parallel": [42, 179], "plot": [43, 117, 182], "post": 44, "pydant": [45, 121, 166, 183], "reduc": 46, "sampl": [47, 172], "setitem": 48, "strawberri": [49, 123, 166], "travers": 51, "queryset": [53, 54, 55], "lookup": 54, "parser": 55, "registri": 85, "getter": 99, "setter": 100, "data": [103, 144, 151, 152, 157, 163], "gener": 104, "attribut": [106, 163, 164, 171], "audio": [107, 151], "blob": 108, "convert": [110, 156, 163, 166, 183], "dump": 111, "featurehash": [112, 166], "imag": [114, 152, 160, 182, 185], "mesh": [115, 154], "multimod": [116, 161], "port": [118, 166], "protobuf": [120, 166, 169, 181, 189], "rich_embed": 122, "sugar": 124, "video": [126, 157], "pydantic_model": 127, "strawberry_typ": 128, "math": [130, 131, 132, 133, 134, 135, 136, 137, 138], "distanc": [131, 132, 133, 134, 135], "numpi": 132, "paddl": 133, "tensorflow": 134, "torch": 135, "ndarrai": [138, 142, 156, 171], "proto": [139, 140, 141, 142, 188, 189], "docarray_pb2": 140, "score": [143, 144, 145, 146, 147], "represent": 147, "changelog": 150, "0": [150, 151, 152, 154, 155, 156, 157], "11": [150, 151, 152, 156, 157], "chang": 150, "documentarrayinmemori": 150, "": [150, 159, 161, 164, 167, 168, 169, 172, 173, 177], "contain": 150, "list": [150, 158, 173, 181], "10": [150, 151, 152], "high": 150, "level": 150, "serial": [150, 169, 181], "format": [150, 181], "default": 150, "dict": [150, 169], "strategi": 150, "name": 150, "svg": [151, 152, 154, 155, 156, 157], "version": [151, 152, 154, 155, 156, 157], "width": [151, 152, 154, 155, 156, 157], "0em": [151, 152, 154, 155, 156, 157], "height": [151, 152, 154, 155, 156, 157], "class": [151, 152, 154, 155, 156, 157, 159], "sd": [151, 152, 154, 155, 156, 157], "octicon": [151, 152, 154, 155, 156, 157], "unmut": 151, "viewbox": [151, 152, 154, 155, 156, 157], "16": [151, 152, 154, 155, 156, 157], "aria": [151, 152, 154, 155, 156, 157], "hidden": [151, 152, 154, 155, 156, 157], "true": [151, 152, 154, 155, 156, 157], "path": [151, 152, 154, 155, 156, 157], "fill": [151, 152, 154, 155, 156, 157, 165], "rule": [151, 152, 154, 155, 156, 157, 164], "evenodd": [151, 152, 154, 155, 156, 157], "d": [151, 152, 154, 155, 156, 157], "m7": 151, "563": 151, "069a": 151, "75": [151, 152, 154, 155, 156, 157], "018": 151, "75v10": [151, 152], "5a": [151, 152, 157], "01": [151, 152, 154, 155, 156], "238": 151, "57l3": 151, "472": 151, "11h1": 151, "75a1": [151, 152, 155, 157], "010": [151, 155], "9": [151, 156], "25v": [151, 157], "5c0": [151, 152, 157], "784": [151, 152, 155, 157], "5h1": [151, 155, 156], "723l3": 151, "289": 151, "82a": 151, "801": 151, "111zm6": 151, "38l4": 151, "319a": 151, "488": [151, 156], "181h": 151, "2a": [151, 157], "25": [151, 152, 154, 155, 157], "00": [151, 152, 154, 155, 156, 157], "25v2": [151, 152], "138": [151, 152, 155, 157], "112": [151, 152, 155, 157], "25h2a": 151, "18l6": 151, "62v4": 151, "38zm6": 151, "096": 151, "038a": 151, "011": [151, 152], "06": 151, "314": 151, "000": [151, 152, 157], "193": 151, "06v": 151, "001zm": 151, "121a": 151, "061": 151, "95": 151, "101": [151, 156], "07l": 151, "001": [151, 154, 156], "001z": 151, "wav": 151, "file": [151, 155, 157, 173], "save": [151, 155, 157], "other": [151, 172], "tool": 151, "librari": 151, "m1": 152, "25v10": 152, "25h": [152, 157], "94a": 152, "76": 152, "03": 152, "03l6": 152, "077": 152, "078a1": 152, "012": 152, "412": [152, 156], "06l14": 152, "31v2": 152, "75a": [152, 155, 157], "25h1": 152, "75zm12": 152, "11h4": 152, "81l5": 152, "048": 152, "047a": 152, "344": 152, "009l4": 152, "298": 152, "889v": 152, "917a": 152, "25zm1": 152, "0014": 152, "1h1": 152, "14": [152, 155], "216": [152, 155, 156, 157], "15": 152, "15h12": 152, "5a1": [152, 157], "0016": [152, 157], "13": [152, 156, 157], "25zm5": 152, "6a": 152, "0zm7": 152, "6a2": 152, "014": 152, "0z": 152, "simpl": [152, 156], "process": [152, 160, 179, 180], "displai": [152, 185], "sprite": [152, 182, 185], "segment": [152, 156], "larg": [152, 181], "complic": 152, "small": 152, "ones": 152, "m8": 154, "878": 154, "392a1": 154, "756": 154, "0l": 154, "045a1": 154, "951v6": 154, "098c0": 154, "624": 154, "332": [154, 156], "872": 154, "514l5": 154, "0l5": 154, "045c": 154, "54": [154, 156], "313": 154, "89": 154, "514v4": 154, "951c0": 154, "514l8": 154, "392zm7": 154, "875": 154, "69a": 154, "0l4": 154, "63": [154, 156], "685l8": 154, "133": 154, "245": 154, "375l4": 154, "685zm2": 154, "677v5": 154, "372c0": 154, "09": 154, "047": 154, "171": 154, "125": 154, "216l4": 154, "625": 154, "683v8": 154, "432l2": 154, "677zm6": 154, "271l4": 154, "683a": 154, "216v5": 154, "677l8": 154, "432v5": 154, "516z": 154, "3d": 154, "point": 154, "cloud": [154, 181], "tabl": [155, 182, 188, 189], "m0": 155, "75c0": 155, "0h12": 155, "5c15": 155, "75v3": 155, "585a": 155, "746": 155, "83v8": 155, "085a1": 155, "0114": 155, "16h6": 155, "309a": 155, "748": 155, "118": 155, "0h1": 155, "25v6": [155, 157], "165a": 155, "83v1": 155, "75zm1": 155, "5v7": 155, "25h5v": 155, "8h1": 155, "5zm5": 155, "5v1": 155, "25h5v5zm1": 155, "5v8h7": 155, "5h": 155, "8zm8": 155, "8v1": 155, "5h7": 155, "25v5z": 155, "typographi": 156, "m6": 156, "21": 156, "5l4": 156, "574": 156, "594": 156, "857": 156, "5h6": 156, "21zm": 156, "5l": 156, "829": 156, "487a": 156, "423": 156, "474l5": 156, "735": 156, "332a1": 156, "302": 156, "018l": 156, "39": 156, "688a": 156, "415": 156, "496l2": 156, "10h6": 156, "71zm3": 156, "358c10": 156, "53": 156, "374": 156, "87": 156, "4c1": 156, "939": 156, "601v5": 156, "649a": 156, "448": 156, "275c13": 156, "995": 156, "12": [156, 157], "82": 156, "13c": 156, "77": 156, "514": 156, "231": 156, "078": 156, "709": 156, "577": 156, "922": 156, "199": 156, "041": 156, "694": 156, "265": 156, "411": 156, "887": 156, "944c11": 156, "78": 156, "88": 156, "5v": 156, "899c0": 156, "869": 156, "528": 156, "282": 156, "84": 156, "858a": 156, "32": 156, "716zm14": 156, "9h13c": 156, "881": 156, "375": 156, "22": 156, "637": 156, "444": 156, "253": 156, "217": 156, "363": 156, "806": 156, "408": 156, "155": 156, "697": 156, "896": 156, "249": 156, "354": 156, "732": 156, "26": 156, "209": 156, "588": 156, "449": 156, "35": 156, "257": 156, "495": 156, "551v9z": 156, "long": 156, "back": 156, "via": [156, 160, 165, 174, 180], "featur": 156, "hash": 156, "devic": 157, "camera": 157, "m16": 157, "136": 157, "643l11": 157, "425v4": 157, "009": 157, "3h": 157, "75v6": 157, "13h7": 157, "0011": 157, "675l3": 157, "864": 157, "318a": 157, "5zm": 157, "075l3": 157, "1v": 157, "85l": 157, "1v1": 157, "65zm9": 157, "75v": 157, "25h7": 157, "5z": 157, "kei": 157, "frame": 157, "extract": 157, "modal": [158, 160, 162], "selector": [158, 171], "syntax": [158, 171], "select": 158, "slice": 158, "object": [158, 173, 183], "nest": [158, 164, 168, 171, 172], "decor": 159, "annot": 159, "behavior": 159, "us": [159, 165, 179, 184], "advanc": 159, "what": [159, 161, 164, 167, 168, 169, 172, 173, 177, 178, 186], "next": [159, 161, 164, 167, 168, 169, 172, 173, 177], "clip": 160, "understand": 161, "problem": 161, "challeng": 161, "support": [162, 178, 187], "overrid": 162, "exist": 162, "uri": 163, "an": [164, 173], "unknown": 164, "handl": 164, "resolv": 164, "copi": [164, 173], "anoth": 164, "embed": [165, 171, 182, 185], "neural": [165, 174], "network": [165, 174, 179], "fluent": 166, "interfac": 166, "method": 166, "blobdata": 166, "imagedata": 166, "contentproperti": 166, "textdata": 166, "singletonsugar": 166, "audiodata": 166, "meshdata": 166, "videodata": 166, "urifil": 166, "structur": [168, 172], "arbitrari": 169, "byte": [169, 181], "base64": [169, 181], "visual": [170, 182], "auto": 171, "ravel": 171, "dunder": 171, "sugari": 171, "index": 172, "id": 172, "boolean": 172, "mask": 172, "flatten": 172, "handi": 172, "shuffl": 172, "split": 172, "like": 173, "singl": 173, "local": [173, 184], "identifi": 175, "condit": 176, "oper": 176, "combin": 176, "differ": 178, "between": [178, 183], "which": 178, "side": 178, "gpu": [178, 179], "when": 179, "choos": 179, "thread": 179, "map_batch": 179, "overlap": 179, "cpu": 179, "comput": 179, "why": 179, "129": 179, "128": 179, "time": 179, "extern": 180, "flow": 180, "executor": [180, 184], "accept": 180, "scheme": 180, "read": 180, "more": 180, "wire": 181, "pickl": 181, "disk": 181, "stream": 181, "projector": 182, "schema": 183, "valid": 183, "incom": 183, "model": 183, "respons": 183, "recurs": 183, "jina": [184, 186], "depend": 184, "direct": 184, "invok": 184, "hub": 184, "code": 184, "three": 184, "good": 184, "reason": 184, "A": 184, "client": 184, "server": 184, "architectur": 184, "share": 184, "reus": 184, "jupyt": 185, "notebook": 185, "colab": 185, "rich": 185, "pycharm": 185, "user": [185, 186], "compar": 186, "altern": 186, "To": 186, "huggingfac": 186, "dataset": 186, "awkwardarrai": 186, "zarr": 186, "welcom": 187, "instal": 187, "join": 187, "u": 187, "protocol": [188, 189], "densendarrayproto": [188, 189], "documentarrayproto": [188, 189], "documentproto": [188, 189], "evaluationsentri": [188, 189], "scoresentri": [188, 189], "namedscoreproto": [188, 189], "ndarrayproto": [188, 189], "sparsendarrayproto": [188, 189], "scalar": [188, 189], "valu": [188, 189], "rebuild": 189}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Annlite": [[0, "annlite"]], "Usage": [[0, "usage"], [2, "usage"], [5, "usage"], [6, "usage"], [7, "usage"]], "Config": [[0, "config"], [2, "config"], [5, "config"], [6, "config"], [7, "config"]], "Vector search with filter": [[0, "vector-search-with-filter"], [5, "vector-search-with-filter"]], "Example of .find with a filter only": [[0, "example-of-find-with-a-filter-only"], [7, "example-of-find-with-a-filter-only"]], "Example of .find with query vector and filter": [[0, "example-of-find-with-query-vector-and-filter"], [7, "example-of-find-with-query-vector-and-filter"]], "One Million Scale Benchmark": [[1, "one-million-scale-benchmark"]], "Benchmark result": [[1, "benchmark-result"]], "Benchmark setup": [[1, "benchmark-setup"]], "Settings of the nearest neighbour search": [[1, "settings-of-the-nearest-neighbour-search"]], "Rationale on the experiment design": [[1, "rationale-on-the-experiment-design"]], "Incompleteness on the stores": [[1, "incompleteness-on-the-stores"]], "Conclusion": [[1, "conclusion"]], "Elasticsearch": [[2, "elasticsearch"]], "Start Elastic service": [[2, "start-elastic-service"]], "Create DocumentArray with Elasticsearch backend": [[2, "create-documentarray-with-elasticsearch-backend"]], "Secure connection": [[2, "secure-connection"]], "Vector search with filter query": [[2, "vector-search-with-filter-query"]], "Search by filter query": [[2, "search-by-filter-query"]], "Search by .text field": [[2, "search-by-text-field"]], "Search by .tags field": [[2, "search-by-tags-field"]], "Note": [[2, null]], "Add New Document Store": [[3, "add-new-document-store"]], "Step 1: create the folder": [[3, "step-1-create-the-folder"]], "Step 2: implement getsetdel.py": [[3, "step-2-implement-getsetdel-py"]], "Step 3: implement seqlike.py": [[3, "step-3-implement-seqlike-py"]], "Step 4: implement backend.py": [[3, "step-4-implement-backend-py"]], "Step 5: implement find.py": [[3, "step-5-implement-find-py"]], "Step 6: summarize everything in __init__.py.": [[3, "step-6-summarize-everything-in-init-py"]], "Step 7: subclass from DocumentArray": [[3, "step-7-subclass-from-documentarray"]], "Step 8: add entrypoint to DocumentArray": [[3, "step-8-add-entrypoint-to-documentarray"]], "On pull request: add tests and type-hint": [[3, "on-pull-request-add-tests-and-type-hint"]], "Document Store": [[4, "document-store"]], "Construct": [[4, "construct"], [159, "construct"], [164, "construct"], [173, "construct"]], "Construct with config": [[4, "construct-with-config"]], "Search summary": [[4, "search-summary"]], "Vector search example": [[4, "vector-search-example"]], "Vector search with filter example": [[4, "vector-search-with-filter-example"]], "Filter example": [[4, "filter-example"]], "Known limitations": [[4, "known-limitations"]], "Multiple references to the same storage backend": [[4, "multiple-references-to-the-same-storage-backend"]], "Out-of-array modification": [[4, "out-of-array-modification"]], "Elements access is slower": [[4, "elements-access-is-slower"]], "Qdrant": [[5, "qdrant"]], "Start Qdrant service": [[5, "start-qdrant-service"]], "Create DocumentArray with Qdrant backend": [[5, "create-documentarray-with-qdrant-backend"]], "Minimum example": [[5, "minimum-example"], [7, "minimum-example"]], "Example of .find with a filter": [[5, "example-of-find-with-a-filter"]], "SQLite": [[6, "sqlite"]], "Weaviate": [[7, "weaviate"]], "Start Weaviate service": [[7, "start-weaviate-service"]], "Create DocumentArray with Weaviate backend": [[7, "create-documentarray-with-weaviate-backend"]], "Filtering": [[7, "filtering"]], "Sorting": [[7, "sorting"]], "Example of .find with vector and sort": [[7, "example-of-find-with-vector-and-sort"]], "Set minimum certainty on query results": [[7, "set-minimum-certainty-on-query-results"]], "Include additional properties in the return": [[7, "include-additional-properties-in-the-return"]], "GraphQL": [[8, "graphql"]], "Basic example": [[8, "basic-example"]], "Integrate with FastAPI": [[8, "integrate-with-fastapi"]], "PyTorch/Deep Learning Frameworks": [[9, "pytorch-deep-learning-frameworks"]], "Load, map, batch in one-shot": [[9, "load-map-batch-in-one-shot"]], " Python API": [[10, "python-api"]], "docarray - Document and DocumentArray": [[10, "docarray-document-and-documentarray"]], "docarray.dataclasses - Dataclass": [[10, "docarray-dataclasses-dataclass"]], "docarray.array - Document stores": [[10, "docarray-array-document-stores"]], "docarray package": [[11, "docarray-package"]], "Subpackages": [[11, "subpackages"], [12, "subpackages"], [20, "subpackages"], [57, "subpackages"], [102, "subpackages"], [130, "subpackages"], [139, "subpackages"], [143, "subpackages"]], "Submodules": [[11, "submodules"], [12, "submodules"], [20, "submodules"], [22, "submodules"], [32, "submodules"], [53, "submodules"], [57, "submodules"], [58, "submodules"], [64, "submodules"], [69, "submodules"], [74, "submodules"], [79, "submodules"], [86, "submodules"], [91, "submodules"], [98, "submodules"], [102, "submodules"], [105, "submodules"], [130, "submodules"], [131, "submodules"], [139, "submodules"], [141, "submodules"], [143, "submodules"], [145, "submodules"]], "Module contents": [[11, "module-docarray"], [12, "module-docarray.array"], [20, "module-docarray.array.mixins"], [22, "module-docarray.array.mixins.dataloader"], [32, "module-docarray.array.mixins.io"], [53, "module-docarray.array.queryset"], [57, "module-docarray.array.storage"], [58, "module-docarray.array.storage.annlite"], [64, "module-docarray.array.storage.base"], [69, "module-docarray.array.storage.elastic"], [74, "module-docarray.array.storage.memory"], [79, "module-docarray.array.storage.qdrant"], [86, "module-docarray.array.storage.sqlite"], [91, "module-docarray.array.storage.weaviate"], [98, "module-docarray.dataclasses"], [102, "module-docarray.document"], [105, "module-docarray.document.mixins"], [130, "module-docarray.math"], [131, "module-docarray.math.distance"], [139, "module-docarray.proto"], [141, "module-docarray.proto.io"], [143, "module-docarray.score"], [145, "module-docarray.score.mixins"], [148, "module-docarray.typing"]], "docarray.array package": [[12, "docarray-array-package"]], "docarray.array.annlite module": [[13, "module-docarray.array.annlite"]], "docarray.array.base module": [[14, "module-docarray.array.base"]], "docarray.array.chunk module": [[15, "module-docarray.array.chunk"]], "docarray.array.document module": [[16, "module-docarray.array.document"]], "docarray.array.elastic module": [[17, "module-docarray.array.elastic"]], "docarray.array.match module": [[18, "module-docarray.array.match"]], "docarray.array.memory module": [[19, "module-docarray.array.memory"]], "docarray.array.mixins package": [[20, "docarray-array-mixins-package"]], "docarray.array.mixins.content module": [[21, "module-docarray.array.mixins.content"]], "docarray.array.mixins.dataloader package": [[22, "docarray-array-mixins-dataloader-package"]], "docarray.array.mixins.dataloader.helper module": [[23, "module-docarray.array.mixins.dataloader.helper"]], "docarray.array.mixins.delitem module": [[24, "module-docarray.array.mixins.delitem"]], "docarray.array.mixins.embed module": [[25, "module-docarray.array.mixins.embed"]], "docarray.array.mixins.empty module": [[26, "module-docarray.array.mixins.empty"]], "docarray.array.mixins.evaluation module": [[27, "module-docarray.array.mixins.evaluation"]], "docarray.array.mixins.find module": [[28, "module-docarray.array.mixins.find"]], "docarray.array.mixins.getattr module": [[29, "module-docarray.array.mixins.getattr"]], "docarray.array.mixins.getitem module": [[30, "module-docarray.array.mixins.getitem"]], "docarray.array.mixins.group module": [[31, "module-docarray.array.mixins.group"]], "docarray.array.mixins.io package": [[32, "docarray-array-mixins-io-package"]], "docarray.array.mixins.io.binary module": [[33, "module-docarray.array.mixins.io.binary"]], "docarray.array.mixins.io.common module": [[34, "module-docarray.array.mixins.io.common"]], "docarray.array.mixins.io.csv module": [[35, "module-docarray.array.mixins.io.csv"]], "docarray.array.mixins.io.dataframe module": [[36, "module-docarray.array.mixins.io.dataframe"]], "docarray.array.mixins.io.from_gen module": [[37, "module-docarray.array.mixins.io.from_gen"]], "docarray.array.mixins.io.json module": [[38, "module-docarray.array.mixins.io.json"]], "docarray.array.mixins.io.pbar module": [[39, "module-docarray.array.mixins.io.pbar"]], "docarray.array.mixins.io.pushpull module": [[40, "module-docarray.array.mixins.io.pushpull"]], "docarray.array.mixins.match module": [[41, "module-docarray.array.mixins.match"]], "docarray.array.mixins.parallel module": [[42, "module-docarray.array.mixins.parallel"]], "docarray.array.mixins.plot module": [[43, "module-docarray.array.mixins.plot"]], "docarray.array.mixins.post module": [[44, "module-docarray.array.mixins.post"]], "docarray.array.mixins.pydantic module": [[45, "module-docarray.array.mixins.pydantic"]], "docarray.array.mixins.reduce module": [[46, "module-docarray.array.mixins.reduce"]], "docarray.array.mixins.sample module": [[47, "module-docarray.array.mixins.sample"]], "docarray.array.mixins.setitem module": [[48, "module-docarray.array.mixins.setitem"]], "docarray.array.mixins.strawberry module": [[49, "module-docarray.array.mixins.strawberry"]], "docarray.array.mixins.text module": [[50, "module-docarray.array.mixins.text"]], "docarray.array.mixins.traverse module": [[51, "module-docarray.array.mixins.traverse"]], "docarray.array.qdrant module": [[52, "module-docarray.array.qdrant"]], "docarray.array.queryset package": [[53, "docarray-array-queryset-package"]], "docarray.array.queryset.lookup module": [[54, "module-docarray.array.queryset.lookup"]], "docarray.array.queryset.parser module": [[55, "module-docarray.array.queryset.parser"]], "docarray.array.sqlite module": [[56, "module-docarray.array.sqlite"]], "docarray.array.storage package": [[57, "docarray-array-storage-package"]], "docarray.array.storage.annlite package": [[58, "docarray-array-storage-annlite-package"]], "docarray.array.storage.annlite.backend module": [[59, "module-docarray.array.storage.annlite.backend"]], "docarray.array.storage.annlite.find module": [[60, "module-docarray.array.storage.annlite.find"]], "docarray.array.storage.annlite.getsetdel module": [[61, "module-docarray.array.storage.annlite.getsetdel"]], "docarray.array.storage.annlite.helper module": [[62, "module-docarray.array.storage.annlite.helper"]], "docarray.array.storage.annlite.seqlike module": [[63, "module-docarray.array.storage.annlite.seqlike"]], "docarray.array.storage.base package": [[64, "docarray-array-storage-base-package"]], "docarray.array.storage.base.backend module": [[65, "module-docarray.array.storage.base.backend"]], "docarray.array.storage.base.getsetdel module": [[66, "module-docarray.array.storage.base.getsetdel"]], "docarray.array.storage.base.helper module": [[67, "module-docarray.array.storage.base.helper"]], "docarray.array.storage.base.seqlike module": [[68, "module-docarray.array.storage.base.seqlike"]], "docarray.array.storage.elastic package": [[69, "docarray-array-storage-elastic-package"]], "docarray.array.storage.elastic.backend module": [[70, "module-docarray.array.storage.elastic.backend"]], "docarray.array.storage.elastic.find module": [[71, "module-docarray.array.storage.elastic.find"]], "docarray.array.storage.elastic.getsetdel module": [[72, "module-docarray.array.storage.elastic.getsetdel"]], "docarray.array.storage.elastic.seqlike module": [[73, "module-docarray.array.storage.elastic.seqlike"]], "docarray.array.storage.memory package": [[74, "docarray-array-storage-memory-package"]], "docarray.array.storage.memory.backend module": [[75, "module-docarray.array.storage.memory.backend"]], "docarray.array.storage.memory.find module": [[76, "module-docarray.array.storage.memory.find"]], "docarray.array.storage.memory.getsetdel module": [[77, "module-docarray.array.storage.memory.getsetdel"]], "docarray.array.storage.memory.seqlike module": [[78, "module-docarray.array.storage.memory.seqlike"]], "docarray.array.storage.qdrant package": [[79, "docarray-array-storage-qdrant-package"]], "docarray.array.storage.qdrant.backend module": [[80, "module-docarray.array.storage.qdrant.backend"]], "docarray.array.storage.qdrant.find module": [[81, "module-docarray.array.storage.qdrant.find"]], "docarray.array.storage.qdrant.getsetdel module": [[82, "module-docarray.array.storage.qdrant.getsetdel"]], "docarray.array.storage.qdrant.helper module": [[83, "module-docarray.array.storage.qdrant.helper"]], "docarray.array.storage.qdrant.seqlike module": [[84, "module-docarray.array.storage.qdrant.seqlike"]], "docarray.array.storage.registry module": [[85, "module-docarray.array.storage.registry"]], "docarray.array.storage.sqlite package": [[86, "docarray-array-storage-sqlite-package"]], "docarray.array.storage.sqlite.backend module": [[87, "module-docarray.array.storage.sqlite.backend"]], "docarray.array.storage.sqlite.getsetdel module": [[88, "module-docarray.array.storage.sqlite.getsetdel"]], "docarray.array.storage.sqlite.helper module": [[89, "module-docarray.array.storage.sqlite.helper"]], "docarray.array.storage.sqlite.seqlike module": [[90, "module-docarray.array.storage.sqlite.seqlike"]], "docarray.array.storage.weaviate package": [[91, "docarray-array-storage-weaviate-package"]], "docarray.array.storage.weaviate.backend module": [[92, "module-docarray.array.storage.weaviate.backend"]], "docarray.array.storage.weaviate.find module": [[93, "module-docarray.array.storage.weaviate.find"]], "docarray.array.storage.weaviate.getsetdel module": [[94, "module-docarray.array.storage.weaviate.getsetdel"]], "docarray.array.storage.weaviate.seqlike module": [[95, "module-docarray.array.storage.weaviate.seqlike"]], "docarray.array.weaviate module": [[96, "module-docarray.array.weaviate"]], "docarray.base module": [[97, "module-docarray.base"]], "docarray.dataclasses package": [[98, "docarray-dataclasses-package"]], "docarray.dataclasses.getter module": [[99, "module-docarray.dataclasses.getter"]], "docarray.dataclasses.setter module": [[100, "module-docarray.dataclasses.setter"]], "docarray.dataclasses.types module": [[101, "module-docarray.dataclasses.types"]], "docarray.document package": [[102, "docarray-document-package"]], "docarray.document.data module": [[103, "module-docarray.document.data"]], "docarray.document.generators module": [[104, "module-docarray.document.generators"]], "docarray.document.mixins package": [[105, "docarray-document-mixins-package"]], "docarray.document.mixins.attribute module": [[106, "module-docarray.document.mixins.attribute"]], "docarray.document.mixins.audio module": [[107, "module-docarray.document.mixins.audio"]], "docarray.document.mixins.blob module": [[108, "module-docarray.document.mixins.blob"]], "docarray.document.mixins.content module": [[109, "module-docarray.document.mixins.content"]], "docarray.document.mixins.convert module": [[110, "module-docarray.document.mixins.convert"]], "docarray.document.mixins.dump module": [[111, "module-docarray.document.mixins.dump"]], "docarray.document.mixins.featurehash module": [[112, "module-docarray.document.mixins.featurehash"]], "docarray.document.mixins.helper module": [[113, "module-docarray.document.mixins.helper"]], "docarray.document.mixins.image module": [[114, "module-docarray.document.mixins.image"]], "docarray.document.mixins.mesh module": [[115, "module-docarray.document.mixins.mesh"]], "docarray.document.mixins.multimodal module": [[116, "module-docarray.document.mixins.multimodal"]], "docarray.document.mixins.plot module": [[117, "module-docarray.document.mixins.plot"]], "docarray.document.mixins.porting module": [[118, "module-docarray.document.mixins.porting"]], "docarray.document.mixins.property module": [[119, "module-docarray.document.mixins.property"]], "docarray.document.mixins.protobuf module": [[120, "module-docarray.document.mixins.protobuf"]], "docarray.document.mixins.pydantic module": [[121, "module-docarray.document.mixins.pydantic"]], "docarray.document.mixins.rich_embedding module": [[122, "module-docarray.document.mixins.rich_embedding"]], "docarray.document.mixins.strawberry module": [[123, "module-docarray.document.mixins.strawberry"]], "docarray.document.mixins.sugar module": [[124, "module-docarray.document.mixins.sugar"]], "docarray.document.mixins.text module": [[125, "module-docarray.document.mixins.text"]], "docarray.document.mixins.video module": [[126, "module-docarray.document.mixins.video"]], "docarray.document.pydantic_model module": [[127, "module-docarray.document.pydantic_model"]], "docarray.document.strawberry_type module": [[128, "docarray-document-strawberry-type-module"]], "docarray.helper module": [[129, "module-docarray.helper"]], "docarray.math package": [[130, "docarray-math-package"]], "docarray.math.distance package": [[131, "docarray-math-distance-package"]], "docarray.math.distance.numpy module": [[132, "module-docarray.math.distance.numpy"]], "docarray.math.distance.paddle module": [[133, "docarray-math-distance-paddle-module"]], "docarray.math.distance.tensorflow module": [[134, "module-docarray.math.distance.tensorflow"]], "docarray.math.distance.torch module": [[135, "module-docarray.math.distance.torch"]], "docarray.math.evaluation module": [[136, "module-docarray.math.evaluation"]], "docarray.math.helper module": [[137, "module-docarray.math.helper"]], "docarray.math.ndarray module": [[138, "module-docarray.math.ndarray"]], "docarray.proto package": [[139, "docarray-proto-package"]], "docarray.proto.docarray_pb2 module": [[140, "module-docarray.proto.docarray_pb2"]], "docarray.proto.io package": [[141, "docarray-proto-io-package"]], "docarray.proto.io.ndarray module": [[142, "module-docarray.proto.io.ndarray"]], "docarray.score package": [[143, "docarray-score-package"]], "docarray.score.data module": [[144, "module-docarray.score.data"]], "docarray.score.mixins package": [[145, "docarray-score-mixins-package"]], "docarray.score.mixins.property module": [[146, "module-docarray.score.mixins.property"]], "docarray.score.mixins.representer module": [[147, "module-docarray.score.mixins.representer"]], "docarray.typing package": [[148, "docarray-typing-package"]], "docarray": [[149, "docarray"]], "Changelog": [[150, "changelog"]], "0.11.0: change DocumentArrayInMemory\u2019s container to list": [[150, "change-documentarrayinmemory-s-container-to-list"]], "0.10.0: add high-level dataclass API to Document": [[150, "add-high-level-dataclass-api-to-document"]], "0.5.0: add storage backend to DocumentArray": [[150, "add-storage-backend-to-documentarray"]], "0.4.0: change on the DocumentArray serialization format": [[150, "change-on-the-documentarray-serialization-format"]], "0.3.0: change on the default JSON/dict serialization strategy": [[150, "change-on-the-default-json-dict-serialization-strategy"]], "0.2.0: change on the content field name": [[150, "change-on-the-content-field-name"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-unmute\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.563 2.069A.75.75 0 018 2.75v10.5a.75.75 0 01-1.238.57L3.472 11H1.75A1.75 1.75 0 010 9.25v-2.5C0 5.784.784 5 1.75 5h1.723l3.289-2.82a.75.75 0 01.801-.111zM6.5 4.38L4.238 6.319a.75.75 0 01-.488.181h-2a.25.25 0 00-.25.25v2.5c0 .138.112.25.25.25h2a.75.75 0 01.488.18L6.5 11.62V4.38zm6.096-2.038a.75.75 0 011.06 0 8 8 0 010 11.314.75.75 0 01-1.06-1.06 6.5 6.5 0 000-9.193.75.75 0 010-1.06v-.001zm-1.06 2.121a.75.75 0 10-1.061 1.061 3.5 3.5 0 010 4.95.75.75 0 101.06 1.06 5 5 0 000-7.07l.001-.001z\"></path></svg> Audio": [[151, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-unmute-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m7-563-2-069a-75-75-0-018-2-75v10-5a-75-75-0-01-1-238-57l3-472-11h1-75a1-75-1-75-0-010-9-25v-2-5c0-5-784-784-5-1-75-5h1-723l3-289-2-82a-75-75-0-01-801-111zm6-5-4-38l4-238-6-319a-75-75-0-01-488-181h-2a-25-25-0-00-25-25v2-5c0-138-112-25-25-25h2a-75-75-0-01-488-18l6-5-11-62v4-38zm6-096-2-038a-75-75-0-011-06-0-8-8-0-010-11-314-75-75-0-01-1-06-1-06-6-5-6-5-0-000-9-193-75-75-0-010-1-06v-001zm-1-06-2-121a-75-75-0-10-1-061-1-061-3-5-3-5-0-010-4-95-75-75-0-101-06-1-06-5-5-0-000-7-07l-001-001z-path-svg-audio"]], "Load .wav file": [[151, "load-wav-file"]], "Save as .wav file": [[151, "save-as-wav-file"]], "Example": [[151, "example"], [178, "example"]], "Other tools & libraries for audio data": [[151, "other-tools-libraries-for-audio-data"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-image\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M1.75 2.5a.25.25 0 00-.25.25v10.5c0 .138.112.25.25.25h.94a.76.76 0 01.03-.03l6.077-6.078a1.75 1.75 0 012.412-.06L14.5 10.31V2.75a.25.25 0 00-.25-.25H1.75zm12.5 11H4.81l5.048-5.047a.25.25 0 01.344-.009l4.298 3.889v.917a.25.25 0 01-.25.25zm1.75-.25V2.75A1.75 1.75 0 0014.25 1H1.75A1.75 1.75 0 000 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0016 13.25zM5.5 6a.5.5 0 11-1 0 .5.5 0 011 0zM7 6a2 2 0 11-4 0 2 2 0 014 0z\"></path></svg> Image": [[152, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-image-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m1-75-2-5a-25-25-0-00-25-25v10-5c0-138-112-25-25-25h-94a-76-76-0-01-03-03l6-077-6-078a1-75-1-75-0-012-412-06l14-5-10-31v2-75a-25-25-0-00-25-25h1-75zm12-5-11h4-81l5-048-5-047a-25-25-0-01-344-009l4-298-3-889v-917a-25-25-0-01-25-25zm1-75-25v2-75a1-75-1-75-0-0014-25-1h1-75a1-75-1-75-0-000-2-75v10-5c0-14-216-784-15-1-75-15h12-5a1-75-1-75-0-0016-13-25zm5-5-6a-5-5-0-11-1-0-5-5-0-011-0zm7-6a2-2-0-11-4-0-2-2-0-014-0z-path-svg-image"]], "Load image data": [[152, "load-image-data"]], "Simple image processing": [[152, "simple-image-processing"]], "Display image sprite": [[152, "display-image-sprite"], [185, "display-image-sprite"]], "Segment large complicated image into small ones": [[152, "segment-large-complicated-image-into-small-ones"]], "Examples": [[153, "examples"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-package\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M8.878.392a1.75 1.75 0 00-1.756 0l-5.25 3.045A1.75 1.75 0 001 4.951v6.098c0 .624.332 1.2.872 1.514l5.25 3.045a1.75 1.75 0 001.756 0l5.25-3.045c.54-.313.872-.89.872-1.514V4.951c0-.624-.332-1.2-.872-1.514L8.878.392zM7.875 1.69a.25.25 0 01.25 0l4.63 2.685L8 7.133 3.245 4.375l4.63-2.685zM2.5 5.677v5.372c0 .09.047.171.125.216l4.625 2.683V8.432L2.5 5.677zm6.25 8.271l4.625-2.683a.25.25 0 00.125-.216V5.677L8.75 8.432v5.516z\"></path></svg> 3D Mesh": [[154, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-package-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m8-878-392a1-75-1-75-0-00-1-756-0l-5-25-3-045a1-75-1-75-0-001-4-951v6-098c0-624-332-1-2-872-1-514l5-25-3-045a1-75-1-75-0-001-756-0l5-25-3-045c-54-313-872-89-872-1-514v4-951c0-624-332-1-2-872-1-514l8-878-392zm7-875-1-69a-25-25-0-01-25-0l4-63-2-685l8-7-133-3-245-4-375l4-63-2-685zm2-5-5-677v5-372c0-09-047-171-125-216l4-625-2-683v8-432l2-5-5-677zm6-25-8-271l4-625-2-683a-25-25-0-00-125-216v5-677l8-75-8-432v5-516z-path-svg-3d-mesh"]], "Point cloud": [[154, "point-cloud"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-table\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v3.585a.746.746 0 010 .83v8.085A1.75 1.75 0 0114.25 16H6.309a.748.748 0 01-1.118 0H1.75A1.75 1.75 0 010 14.25V6.165a.746.746 0 010-.83V1.75zM1.5 6.5v7.75c0 .138.112.25.25.25H5v-8H1.5zM5 5H1.5V1.75a.25.25 0 01.25-.25H5V5zm1.5 1.5v8h7.75a.25.25 0 00.25-.25V6.5h-8zm8-1.5h-8V1.5h7.75a.25.25 0 01.25.25V5z\"></path></svg> Table": [[155, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-table-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m0-1-75c0-784-784-0-1-75-0h12-5c15-216-0-16-784-16-1-75v3-585a-746-746-0-010-83v8-085a1-75-1-75-0-0114-25-16h6-309a-748-748-0-01-1-118-0h1-75a1-75-1-75-0-010-14-25v6-165a-746-746-0-010-83v1-75zm1-5-6-5v7-75c0-138-112-25-25-25h5v-8h1-5zm5-5h1-5v1-75a-25-25-0-01-25-25h5v5zm1-5-1-5v8h7-75a-25-25-0-00-25-25v6-5h-8zm8-1-5h-8v1-5h7-75a-25-25-0-01-25-25v5z-path-svg-table"]], "Load CSV table": [[155, "load-csv-table"]], "Save as CSV file": [[155, "save-as-csv-file"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-typography\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M6.21 8.5L4.574 3.594 2.857 8.5H6.21zm.5 1.5l.829 2.487a.75.75 0 001.423-.474L5.735 2.332a1.216 1.216 0 00-2.302-.018l-3.39 9.688a.75.75 0 001.415.496L2.332 10H6.71zm3.13-4.358C10.53 4.374 11.87 4 13 4c1.5 0 3 .939 3 2.601v5.649a.75.75 0 01-1.448.275C13.995 12.82 13.3 13 12.5 13c-.77 0-1.514-.231-2.078-.709-.577-.488-.922-1.199-.922-2.041 0-.694.265-1.411.887-1.944C11 7.78 11.88 7.5 13 7.5h1.5v-.899c0-.54-.5-1.101-1.5-1.101-.869 0-1.528.282-1.84.858a.75.75 0 11-1.32-.716zM14.5 9H13c-.881 0-1.375.22-1.637.444-.253.217-.363.5-.363.806 0 .408.155.697.39.896.249.21.63.354 1.11.354.732 0 1.26-.209 1.588-.449.35-.257.412-.495.412-.551V9z\"></path></svg> Text": [[156, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-typography-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m6-21-8-5l4-574-3-594-2-857-8-5h6-21zm-5-1-5l-829-2-487a-75-75-0-001-423-474l5-735-2-332a1-216-1-216-0-00-2-302-018l-3-39-9-688a-75-75-0-001-415-496l2-332-10h6-71zm3-13-4-358c10-53-4-374-11-87-4-13-4c1-5-0-3-939-3-2-601v5-649a-75-75-0-01-1-448-275c13-995-12-82-13-3-13-12-5-13c-77-0-1-514-231-2-078-709-577-488-922-1-199-922-2-041-0-694-265-1-411-887-1-944c11-7-78-11-88-7-5-13-7-5h1-5v-899c0-54-5-1-101-1-5-1-101-869-0-1-528-282-1-84-858a-75-75-0-11-1-32-716zm14-5-9h13c-881-0-1-375-22-1-637-444-253-217-363-5-363-806-0-408-155-697-39-896-249-21-63-354-1-11-354-732-0-1-26-209-1-588-449-35-257-412-495-412-551v9z-path-svg-text"]], "Segment long documents": [[156, "segment-long-documents"]], "Convert text into ndarray": [[156, "convert-text-into-ndarray"]], "Convert ndarray back to text": [[156, "convert-ndarray-back-to-text"]], "Simple text matching via feature hashing": [[156, "simple-text-matching-via-feature-hashing"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-device-camera-video\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M16 3.75a.75.75 0 00-1.136-.643L11 5.425V4.75A1.75 1.75 0 009.25 3h-7.5A1.75 1.75 0 000 4.75v6.5C0 12.216.784 13 1.75 13h7.5A1.75 1.75 0 0011 11.25v-.675l3.864 2.318A.75.75 0 0016 12.25v-8.5zm-5 5.075l3.5 2.1v-5.85l-3.5 2.1v1.65zM9.5 6.75v-2a.25.25 0 00-.25-.25h-7.5a.25.25 0 00-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-4.5z\"></path></svg> Video": [[157, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-device-camera-video-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m16-3-75a-75-75-0-00-1-136-643l11-5-425v4-75a1-75-1-75-0-009-25-3h-7-5a1-75-1-75-0-000-4-75v6-5c0-12-216-784-13-1-75-13h7-5a1-75-1-75-0-0011-11-25v-675l3-864-2-318a-75-75-0-0016-12-25v-8-5zm-5-5-075l3-5-2-1v-5-85l-3-5-2-1v1-65zm9-5-6-75v-2a-25-25-0-00-25-25h-7-5a-25-25-0-00-25-25v6-5c0-138-112-25-25-25h7-5a-25-25-0-00-25-25v-4-5z-path-svg-video"]], "Load video data": [[157, "load-video-data"]], "Key frame extraction": [[157, "key-frame-extraction"]], "Save as video file": [[157, "save-as-video-file"]], "Access Modality": [[158, "access-modality"]], "Selector Syntax": [[158, "selector-syntax"]], "Select multiple fields": [[158, "select-multiple-fields"]], "Slice dataclass objects": [[158, "slice-dataclass-objects"]], "Slice List[Type] fields": [[158, "slice-list-type-fields"]], "Select nested fields": [[158, "select-nested-fields"]], "Dataclass decorator": [[159, "dataclass-decorator"]], "Annotate class fields": [[159, "annotate-class-fields"]], "Behavior of field annotation": [[159, "behavior-of-field-annotation"]], "Construct from/to Document": [[159, "construct-from-to-document"]], "Use field() for advanced configs": [[159, "use-field-for-advanced-configs"]], "What\u2019s next?": [[159, "what-s-next"], [164, "what-s-next"], [167, "what-s-next"], [168, "what-s-next"], [169, "what-s-next"], [172, "what-s-next"], [173, "what-s-next"], [177, "what-s-next"]], "Process Modality": [[160, "process-modality"]], "Embed image and text via CLIP": [[160, "embed-image-and-text-via-clip"]], "Embed via CLIP-as-service": [[160, "embed-via-clip-as-service"]], "Dataclass": [[161, "dataclass"]], "What is multimodal?": [[161, "what-is-multimodal"]], "Understanding the problem": [[161, "understanding-the-problem"]], "Understanding the challenges": [[161, "understanding-the-challenges"]], "What\u2019s next": [[161, "what-s-next"]], "Support New Modality": [[162, "support-new-modality"]], "Create new types": [[162, "create-new-types"]], "Override existing types": [[162, "override-existing-types"]], "Access Attributes": [[163, "access-attributes"], [171, "access-attributes"]], "Content attributes": [[163, "content-attributes"]], "Load content from URI": [[163, "load-content-from-uri"]], "Convert content to data URI": [[163, null]], "Construct an empty Document": [[164, "construct-an-empty-document"]], "Construct with attributes": [[164, "construct-with-attributes"]], "Nested Document": [[164, "nested-document"]], "Unknown attributes handling": [[164, "unknown-attributes-handling"]], "Resolve unknown attributes with rules": [[164, "resolve-unknown-attributes-with-rules"]], "Copy from another Document": [[164, "copy-from-another-document"]], "Embedding": [[165, "embedding"]], "Fill embedding via neural network": [[165, "fill-embedding-via-neural-network"]], "On multiple Documents use DocumentArray": [[165, null], [165, null]], "Find nearest-neighbours": [[165, "find-nearest-neighbours"]], "Fluent Interface": [[166, "fluent-interface"]], "Methods": [[166, "methods"]], "BlobData": [[166, "blobdata"]], "ImageData": [[166, "imagedata"]], "Convert": [[166, "convert"]], "ContentProperty": [[166, "contentproperty"]], "TextData": [[166, "textdata"]], "SingletonSugar": [[166, "singletonsugar"]], "FeatureHash": [[166, "featurehash"]], "Porting": [[166, "porting"]], "Protobuf": [[166, "protobuf"]], "Pydantic": [[166, "pydantic"]], "Strawberry": [[166, "strawberry"]], "AudioData": [[166, "audiodata"]], "MeshData": [[166, "meshdata"]], "VideoData": [[166, "videodata"]], "UriFile": [[166, "urifile"]], "Document": [[167, "document"]], "Nested Structure": [[168, "nested-structure"]], "Serialization": [[169, "serialization"], [181, "serialization"]], "From/to JSON": [[169, "from-to-json"], [181, "from-to-json"]], "From/to arbitrary JSON": [[169, "from-to-arbitrary-json"]], "From/to bytes": [[169, "from-to-bytes"], [181, "from-to-bytes"]], "From/to base64": [[169, "from-to-base64"], [181, "from-to-base64"]], "From/to dict": [[169, "from-to-dict"]], "From/to Protobuf": [[169, "from-to-protobuf"], [181, "from-to-protobuf"]], "Visualization": [[170, "visualization"], [182, "visualization"]], "Attribute selector": [[171, "attribute-selector"]], "Auto-ravel on NdArray": [[171, "auto-ravel-on-ndarray"]], "Dunder syntax for nested attributes": [[171, "dunder-syntax-for-nested-attributes"]], "Content and embedding sugary attributes": [[171, "content-and-embedding-sugary-attributes"]], "Access Documents": [[172, "access-documents"]], "Basic indexing": [[172, "basic-indexing"]], "Index by Document id": [[172, "index-by-document-id"]], "Index by boolean mask": [[172, "index-by-boolean-mask"]], "Index by nested structure": [[172, "index-by-nested-structure"]], "Index by flatten": [[172, "index-by-flatten"]], "Other Handy Helpers": [[172, "other-handy-helpers"]], "Batching": [[172, "batching"]], "Sampling": [[172, "sampling"]], "Shuffling": [[172, "shuffling"]], "Splitting by .tags": [[172, "splitting-by-tags"]], "Construct an empty array": [[173, "construct-an-empty-array"]], "Construct with empty Documents": [[173, "construct-with-empty-documents"]], "Construct from list-like objects": [[173, "construct-from-list-like-objects"]], "Construct from multiple DocumentArray": [[173, "construct-from-multiple-documentarray"]], "Construct from a single Document": [[173, "construct-from-a-single-document"]], "Deep copy on elements": [[173, "deep-copy-on-elements"]], "Construct from local files": [[173, "construct-from-local-files"]], "Embed via Neural Network": [[174, "embed-via-neural-network"]], "Evaluate Matches": [[175, "evaluate-matches"]], "Document identifier": [[175, "document-identifier"]], "Query by Conditions": [[176, "query-by-conditions"]], "Filter with query operators": [[176, "filter-with-query-operators"]], "Combine multiple conditions": [[176, "combine-multiple-conditions"]], "DocumentArray": [[177, "documentarray"]], "Match Nearest Neighbours": [[178, "match-nearest-neighbours"]], "Difference between find and match": [[178, "difference-between-find-and-match"]], "Which side is the query at?": [[178, "which-side-is-the-query-at"]], "What is the type of the query?": [[178, "what-is-the-type-of-the-query"]], "What is the return?": [[178, "what-is-the-return"]], "GPU support": [[178, "gpu-support"]], "Parallelization": [[179, "parallelization"]], "When to choose process or thread backend?": [[179, null]], "Use map_batch() to overlap CPU & GPU computation": [[179, "use-map-batch-to-overlap-cpu-gpu-computation"]], "Why 129s? Why not 128s": [[179, null]], "Use map_batch() to overlap CPU and network time": [[179, "use-map-batch-to-overlap-cpu-and-network-time"]], "Process via External Flow or Executor": [[180, "process-via-external-flow-or-executor"]], "Accept schemes": [[180, "accept-schemes"]], "Read more": [[180, "read-more"]], "Wire format of pickle and protobuf": [[181, "wire-format-of-pickle-and-protobuf"]], "From/to disk": [[181, "from-to-disk"]], "Stream large binary serialization from disk": [[181, "stream-large-binary-serialization-from-disk"]], "From/to list": [[181, "from-to-list"]], "From/to dataframe": [[181, "from-to-dataframe"]], "From/to cloud": [[181, "from-to-cloud"]], "Summary in table": [[182, "summary-in-table"]], "Image sprites": [[182, "image-sprites"]], "Plot Matches": [[182, "plot-matches"]], "Embedding projector": [[182, "embedding-projector"]], "FastAPI/Pydantic": [[183, "fastapi-pydantic"]], "JSON Schema": [[183, "json-schema"]], "Validate incoming Document and DocumentArray": [[183, "validate-incoming-document-and-documentarray"]], "Convert between pydantic model and DocArray objects": [[183, "convert-between-pydantic-model-and-docarray-objects"]], "Limit returned fields by response model": [[183, "limit-returned-fields-by-response-model"]], "Limit returned results recursively": [[183, "limit-returned-results-recursively"]], "Jina": [[184, "jina"]], "Package dependency": [[184, "package-dependency"]], "Direct invoke Jina/Hub Executor": [[184, "direct-invoke-jina-hub-executor"]], "Local code as a service": [[184, "local-code-as-a-service"]], "Three good reasons to use Jina": [[184, "three-good-reasons-to-use-jina"]], "A client-server architecture": [[184, "a-client-server-architecture"]], "Scale it out": [[184, "scale-it-out"]], "Share and reuse it": [[184, "share-and-reuse-it"]], "Summary": [[184, "summary"]], "Jupyter Notebook/Colab": [[185, "jupyter-notebook-colab"]], "Display Document": [[185, "display-document"]], "Display rich content": [[185, "display-rich-content"]], "Display DocumentArray": [[185, "display-documentarray"]], "Display embeddings": [[185, "display-embeddings"]], "PyCharm users": [[185, "pycharm-users"]], "What is DocArray?": [[186, "what-is-docarray"]], "Design": [[186, "design"]], "Comparing to Alternatives": [[186, "comparing-to-alternatives"]], "To Huggingface Datasets": [[186, "to-huggingface-datasets"]], "To AwkwardArray": [[186, "to-awkwardarray"]], "To Zarr": [[186, "to-zarr"]], "To Jina Users": [[186, "to-jina-users"]], "Welcome to DocArray!": [[187, "welcome-to-docarray"]], "Install": [[187, "install"]], "Support": [[187, "support"]], "Join Us": [[187, "join-us"]], "Protocol Documentation": [[188, "protocol-documentation"], [189, "protocol-documentation"]], "Table of Contents": [[188, "table-of-contents"], [189, "table-of-contents"]], "docarray.proto": [[188, "docarray-proto"], [189, "docarray-proto"]], "DenseNdArrayProto": [[188, "densendarrayproto"], [189, "densendarrayproto"]], "DocumentArrayProto": [[188, "documentarrayproto"], [189, "documentarrayproto"]], "DocumentProto": [[188, "documentproto"], [189, "documentproto"]], "DocumentProto.EvaluationsEntry": [[188, "documentproto-evaluationsentry"], [189, "documentproto-evaluationsentry"]], "DocumentProto.ScoresEntry": [[188, "documentproto-scoresentry"], [189, "documentproto-scoresentry"]], "NamedScoreProto": [[188, "namedscoreproto"], [189, "namedscoreproto"]], "NdArrayProto": [[188, "ndarrayproto"], [189, "ndarrayproto"]], "SparseNdArrayProto": [[188, "sparsendarrayproto"], [189, "sparsendarrayproto"]], "Scalar Value Types": [[188, "scalar-value-types"], [189, "scalar-value-types"]], "Rebuild Protobuf": [[189, "rebuild-protobuf"]]}, "indexentries": {"docarray": [[11, "module-docarray"]], "module": [[11, "module-docarray"], [12, "module-docarray.array"], [13, "module-docarray.array.annlite"], [14, "module-docarray.array.base"], [15, "module-docarray.array.chunk"], [16, "module-docarray.array.document"], [17, "module-docarray.array.elastic"], [18, "module-docarray.array.match"], [19, "module-docarray.array.memory"], [20, "module-docarray.array.mixins"], [21, "module-docarray.array.mixins.content"], [22, "module-docarray.array.mixins.dataloader"], [23, "module-docarray.array.mixins.dataloader.helper"], [24, "module-docarray.array.mixins.delitem"], [25, "module-docarray.array.mixins.embed"], [26, "module-docarray.array.mixins.empty"], [27, "module-docarray.array.mixins.evaluation"], [28, "module-docarray.array.mixins.find"], [29, "module-docarray.array.mixins.getattr"], [30, "module-docarray.array.mixins.getitem"], [31, "module-docarray.array.mixins.group"], [32, "module-docarray.array.mixins.io"], [33, "module-docarray.array.mixins.io.binary"], [34, "module-docarray.array.mixins.io.common"], [35, "module-docarray.array.mixins.io.csv"], [36, "module-docarray.array.mixins.io.dataframe"], [37, "module-docarray.array.mixins.io.from_gen"], [38, "module-docarray.array.mixins.io.json"], [39, "module-docarray.array.mixins.io.pbar"], [40, "module-docarray.array.mixins.io.pushpull"], [41, "module-docarray.array.mixins.match"], [42, "module-docarray.array.mixins.parallel"], [43, "module-docarray.array.mixins.plot"], [44, "module-docarray.array.mixins.post"], [45, "module-docarray.array.mixins.pydantic"], [46, "module-docarray.array.mixins.reduce"], [47, "module-docarray.array.mixins.sample"], [48, "module-docarray.array.mixins.setitem"], [49, "module-docarray.array.mixins.strawberry"], [50, "module-docarray.array.mixins.text"], [51, "module-docarray.array.mixins.traverse"], [52, "module-docarray.array.qdrant"], [53, "module-docarray.array.queryset"], [54, "module-docarray.array.queryset.lookup"], [55, "module-docarray.array.queryset.parser"], [56, "module-docarray.array.sqlite"], [57, "module-docarray.array.storage"], [58, "module-docarray.array.storage.annlite"], [59, "module-docarray.array.storage.annlite.backend"], [60, "module-docarray.array.storage.annlite.find"], [61, "module-docarray.array.storage.annlite.getsetdel"], [62, "module-docarray.array.storage.annlite.helper"], [63, "module-docarray.array.storage.annlite.seqlike"], [64, "module-docarray.array.storage.base"], [65, "module-docarray.array.storage.base.backend"], [66, "module-docarray.array.storage.base.getsetdel"], [67, "module-docarray.array.storage.base.helper"], [68, "module-docarray.array.storage.base.seqlike"], [69, "module-docarray.array.storage.elastic"], [70, "module-docarray.array.storage.elastic.backend"], [71, "module-docarray.array.storage.elastic.find"], [72, "module-docarray.array.storage.elastic.getsetdel"], [73, "module-docarray.array.storage.elastic.seqlike"], [74, "module-docarray.array.storage.memory"], [75, "module-docarray.array.storage.memory.backend"], [76, "module-docarray.array.storage.memory.find"], [77, "module-docarray.array.storage.memory.getsetdel"], [78, "module-docarray.array.storage.memory.seqlike"], [79, "module-docarray.array.storage.qdrant"], [80, "module-docarray.array.storage.qdrant.backend"], [81, "module-docarray.array.storage.qdrant.find"], [82, "module-docarray.array.storage.qdrant.getsetdel"], [83, "module-docarray.array.storage.qdrant.helper"], [84, "module-docarray.array.storage.qdrant.seqlike"], [85, "module-docarray.array.storage.registry"], [86, "module-docarray.array.storage.sqlite"], [87, "module-docarray.array.storage.sqlite.backend"], [88, "module-docarray.array.storage.sqlite.getsetdel"], [89, "module-docarray.array.storage.sqlite.helper"], [90, "module-docarray.array.storage.sqlite.seqlike"], [91, "module-docarray.array.storage.weaviate"], [92, "module-docarray.array.storage.weaviate.backend"], [93, "module-docarray.array.storage.weaviate.find"], [94, "module-docarray.array.storage.weaviate.getsetdel"], [95, "module-docarray.array.storage.weaviate.seqlike"], [96, "module-docarray.array.weaviate"], [97, "module-docarray.base"], [98, "module-docarray.dataclasses"], [99, "module-docarray.dataclasses.getter"], [100, "module-docarray.dataclasses.setter"], [101, "module-docarray.dataclasses.types"], [102, "module-docarray.document"], [103, "module-docarray.document.data"], [104, "module-docarray.document.generators"], [105, "module-docarray.document.mixins"], [106, "module-docarray.document.mixins.attribute"], [107, "module-docarray.document.mixins.audio"], [108, "module-docarray.document.mixins.blob"], [109, "module-docarray.document.mixins.content"], [110, "module-docarray.document.mixins.convert"], [111, "module-docarray.document.mixins.dump"], [112, "module-docarray.document.mixins.featurehash"], [113, "module-docarray.document.mixins.helper"], [114, "module-docarray.document.mixins.image"], [115, "module-docarray.document.mixins.mesh"], [116, "module-docarray.document.mixins.multimodal"], [117, "module-docarray.document.mixins.plot"], [118, "module-docarray.document.mixins.porting"], [119, "module-docarray.document.mixins.property"], [120, "module-docarray.document.mixins.protobuf"], [121, "module-docarray.document.mixins.pydantic"], [122, "module-docarray.document.mixins.rich_embedding"], [123, "module-docarray.document.mixins.strawberry"], [124, "module-docarray.document.mixins.sugar"], [125, "module-docarray.document.mixins.text"], [126, "module-docarray.document.mixins.video"], [127, "module-docarray.document.pydantic_model"], [129, "module-docarray.helper"], [130, "module-docarray.math"], [131, "module-docarray.math.distance"], [132, "module-docarray.math.distance.numpy"], [134, "module-docarray.math.distance.tensorflow"], [135, "module-docarray.math.distance.torch"], [136, "module-docarray.math.evaluation"], [137, "module-docarray.math.helper"], [138, "module-docarray.math.ndarray"], [139, "module-docarray.proto"], [140, "module-docarray.proto.docarray_pb2"], [141, "module-docarray.proto.io"], [142, "module-docarray.proto.io.ndarray"], [143, "module-docarray.score"], [144, "module-docarray.score.data"], [145, "module-docarray.score.mixins"], [146, "module-docarray.score.mixins.property"], [147, "module-docarray.score.mixins.representer"], [148, "module-docarray.typing"]], "docarray.array": [[12, "module-docarray.array"]], "annliteconfig (class in docarray.array.annlite)": [[13, "docarray.array.annlite.AnnliteConfig"]], "documentarrayannlite (class in docarray.array.annlite)": [[13, "docarray.array.annlite.DocumentArrayAnnlite"]], "type_map (docarray.array.annlite.documentarrayannlite attribute)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.TYPE_MAP"]], "append() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.append"]], "apply() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.apply"]], "apply_batch() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.apply_batch"]], "batch() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.batch"]], "batch_ids() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.batch_ids"]], "blobs (docarray.array.annlite.documentarrayannlite property)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.blobs"]], "clear() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.clear"]], "columns (docarray.array.annlite.annliteconfig attribute)": [[13, "docarray.array.annlite.AnnliteConfig.columns"]], "contents (docarray.array.annlite.documentarrayannlite property)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.contents"]], "count() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.count"]], "data_path (docarray.array.annlite.annliteconfig attribute)": [[13, "docarray.array.annlite.AnnliteConfig.data_path"]], "dataloader() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.dataloader"]], "docarray.array.annlite": [[13, "module-docarray.array.annlite"]], "ef_construction (docarray.array.annlite.annliteconfig attribute)": [[13, "docarray.array.annlite.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.annlite.annliteconfig attribute)": [[13, "docarray.array.annlite.AnnliteConfig.ef_search"]], "embed() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.embed"]], "embeddings (docarray.array.annlite.documentarrayannlite property)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.embeddings"]], "empty() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.empty"]], "evaluate() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.evaluate"]], "extend() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.extend"]], "find() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.find"]], "flatten() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.flatten"]], "from_base64() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.from_base64"]], "from_bytes() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.from_bytes"]], "from_csv() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.from_csv"]], "from_dataframe() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.from_dataframe"]], "from_dict() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.from_dict"]], "from_files() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.from_files"]], "from_huggingface_datasets() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.from_huggingface_datasets"]], "from_json() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.from_json"]], "from_lines() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.from_lines"]], "from_list() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.from_list"]], "from_ndarray() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.from_ndarray"]], "from_ndjson() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.from_ndjson"]], "from_protobuf() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.from_protobuf"]], "from_pydantic_model() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.from_pydantic_model"]], "from_strawberry_type() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.from_strawberry_type"]], "get_json_schema() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.get_json_schema"]], "get_vocabulary() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.get_vocabulary"]], "index() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.index"]], "insert() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.insert"]], "load() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.load"]], "load_binary() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.load_binary"]], "load_csv() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.load_csv"]], "load_json() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.load_json"]], "map() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.map"]], "map_batch() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.map_batch"]], "match() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.match"]], "max_connection (docarray.array.annlite.annliteconfig attribute)": [[13, "docarray.array.annlite.AnnliteConfig.max_connection"]], "metric (docarray.array.annlite.annliteconfig attribute)": [[13, "docarray.array.annlite.AnnliteConfig.metric"]], "n_dim (docarray.array.annlite.annliteconfig attribute)": [[13, "docarray.array.annlite.AnnliteConfig.n_dim"]], "plot_embeddings() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.plot_embeddings"]], "plot_image_sprites() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.plot_image_sprites"]], "pop() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.pop"]], "post() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.post"]], "pull() (docarray.array.annlite.documentarrayannlite class method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.pull"]], "push() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.push"]], "reduce() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.reduce"]], "reduce_all() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.reduce_all"]], "remove() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.remove"]], "reverse() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.reverse"]], "sample() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.sample"]], "save() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.save"]], "save_binary() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.save_binary"]], "save_csv() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.save_csv"]], "save_embeddings_csv() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.save_embeddings_csv"]], "save_gif() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.save_gif"]], "save_json() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.save_json"]], "serialize_config (docarray.array.annlite.annliteconfig attribute)": [[13, "docarray.array.annlite.AnnliteConfig.serialize_config"]], "shuffle() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.shuffle"]], "split_by_tag() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.split_by_tag"]], "summary() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.summary"]], "tensors (docarray.array.annlite.documentarrayannlite property)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.tensors"]], "texts (docarray.array.annlite.documentarrayannlite property)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.texts"]], "to_base64() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.to_base64"]], "to_bytes() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.to_bytes"]], "to_dataframe() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.to_dataframe"]], "to_dict() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.to_dict"]], "to_json() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.to_json"]], "to_list() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.to_list"]], "to_protobuf() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.to_protobuf"]], "to_pydantic_model() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.to_pydantic_model"]], "to_strawberry_type() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.to_strawberry_type"]], "traverse() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.traverse"]], "traverse_flat() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.traverse_flat"]], "traverse_flat_per_path() (docarray.array.annlite.documentarrayannlite method)": [[13, "docarray.array.annlite.DocumentArrayAnnlite.traverse_flat_per_path"]], "basedocumentarray (class in docarray.array.base)": [[14, "docarray.array.base.BaseDocumentArray"]], "append() (docarray.array.base.basedocumentarray method)": [[14, "docarray.array.base.BaseDocumentArray.append"]], "clear() (docarray.array.base.basedocumentarray method)": [[14, "docarray.array.base.BaseDocumentArray.clear"]], "count() (docarray.array.base.basedocumentarray method)": [[14, "docarray.array.base.BaseDocumentArray.count"]], "docarray.array.base": [[14, "module-docarray.array.base"]], "extend() (docarray.array.base.basedocumentarray method)": [[14, "docarray.array.base.BaseDocumentArray.extend"]], "index() (docarray.array.base.basedocumentarray method)": [[14, "docarray.array.base.BaseDocumentArray.index"]], "insert() (docarray.array.base.basedocumentarray method)": [[14, "docarray.array.base.BaseDocumentArray.insert"]], "pop() (docarray.array.base.basedocumentarray method)": [[14, "docarray.array.base.BaseDocumentArray.pop"]], "remove() (docarray.array.base.basedocumentarray method)": [[14, "docarray.array.base.BaseDocumentArray.remove"]], "reverse() (docarray.array.base.basedocumentarray method)": [[14, "docarray.array.base.BaseDocumentArray.reverse"]], "chunkarray (class in docarray.array.chunk)": [[15, "docarray.array.chunk.ChunkArray"]], "type_map (docarray.array.chunk.chunkarray attribute)": [[15, "docarray.array.chunk.ChunkArray.TYPE_MAP"]], "adjacency (docarray.array.chunk.chunkarray property)": [[15, "docarray.array.chunk.ChunkArray.adjacency"]], "append() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.append"]], "apply() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.apply"]], "apply_batch() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.apply_batch"]], "batch() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.batch"]], "batch_ids() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.batch_ids"]], "blobs (docarray.array.chunk.chunkarray property)": [[15, "docarray.array.chunk.ChunkArray.blobs"]], "clear() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.clear"]], "contents (docarray.array.chunk.chunkarray property)": [[15, "docarray.array.chunk.ChunkArray.contents"]], "count() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.count"]], "dataloader() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.dataloader"]], "docarray.array.chunk": [[15, "module-docarray.array.chunk"]], "embed() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.embed"]], "embeddings (docarray.array.chunk.chunkarray property)": [[15, "docarray.array.chunk.ChunkArray.embeddings"]], "empty() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.empty"]], "evaluate() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.evaluate"]], "extend() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.extend"]], "find() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.find"]], "flatten() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.flatten"]], "from_base64() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.from_base64"]], "from_bytes() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.from_bytes"]], "from_csv() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.from_csv"]], "from_dataframe() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.from_dataframe"]], "from_dict() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.from_dict"]], "from_files() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.from_files"]], "from_huggingface_datasets() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.from_huggingface_datasets"]], "from_json() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.from_json"]], "from_lines() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.from_lines"]], "from_list() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.from_list"]], "from_ndarray() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.from_ndarray"]], "from_ndjson() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.from_ndjson"]], "from_protobuf() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.from_protobuf"]], "from_pydantic_model() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.from_strawberry_type"]], "get_json_schema() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.get_json_schema"]], "get_vocabulary() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.get_vocabulary"]], "granularity (docarray.array.chunk.chunkarray property)": [[15, "docarray.array.chunk.ChunkArray.granularity"]], "index() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.index"]], "insert() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.insert"]], "load() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.load"]], "load_binary() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.load_binary"]], "load_csv() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.load_csv"]], "load_json() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.load_json"]], "map() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.map"]], "map_batch() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.map_batch"]], "match() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.match"]], "plot_embeddings() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.plot_image_sprites"]], "pop() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.pop"]], "post() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.post"]], "pull() (docarray.array.chunk.chunkarray class method)": [[15, "docarray.array.chunk.ChunkArray.pull"]], "push() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.push"]], "reduce() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.reduce"]], "reduce_all() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.reduce_all"]], "reference_doc (docarray.array.chunk.chunkarray property)": [[15, "docarray.array.chunk.ChunkArray.reference_doc"]], "remove() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.remove"]], "reverse() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.reverse"]], "sample() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.sample"]], "save() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.save"]], "save_binary() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.save_binary"]], "save_csv() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.save_csv"]], "save_embeddings_csv() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.save_embeddings_csv"]], "save_gif() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.save_gif"]], "save_json() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.save_json"]], "shuffle() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.shuffle"]], "split_by_tag() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.split_by_tag"]], "summary() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.summary"]], "tensors (docarray.array.chunk.chunkarray property)": [[15, "docarray.array.chunk.ChunkArray.tensors"]], "texts (docarray.array.chunk.chunkarray property)": [[15, "docarray.array.chunk.ChunkArray.texts"]], "to_base64() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.to_base64"]], "to_bytes() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.to_bytes"]], "to_dataframe() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.to_dataframe"]], "to_dict() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.to_dict"]], "to_json() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.to_json"]], "to_list() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.to_list"]], "to_protobuf() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.to_protobuf"]], "to_pydantic_model() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.to_strawberry_type"]], "traverse() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.traverse"]], "traverse_flat() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.chunk.chunkarray method)": [[15, "docarray.array.chunk.ChunkArray.traverse_flat_per_path"]], "documentarray (class in docarray.array.document)": [[16, "docarray.array.document.DocumentArray"]], "append() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.append"]], "apply() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.apply"]], "apply_batch() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.apply_batch"]], "batch() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.batch"]], "batch_ids() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.batch_ids"]], "blobs (docarray.array.document.documentarray property)": [[16, "docarray.array.document.DocumentArray.blobs"]], "clear() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.clear"]], "contents (docarray.array.document.documentarray property)": [[16, "docarray.array.document.DocumentArray.contents"]], "count() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.count"]], "dataloader() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.dataloader"]], "docarray.array.document": [[16, "module-docarray.array.document"]], "embed() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.embed"]], "embeddings (docarray.array.document.documentarray property)": [[16, "docarray.array.document.DocumentArray.embeddings"]], "empty() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.empty"]], "evaluate() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.evaluate"]], "extend() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.extend"]], "find() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.find"]], "flatten() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.flatten"]], "from_base64() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.from_base64"]], "from_bytes() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.from_bytes"]], "from_csv() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.from_csv"]], "from_dataframe() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.from_dataframe"]], "from_dict() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.from_dict"]], "from_files() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.from_files"]], "from_huggingface_datasets() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.from_huggingface_datasets"]], "from_json() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.from_json"]], "from_lines() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.from_lines"]], "from_list() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.from_list"]], "from_ndarray() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.from_ndarray"]], "from_ndjson() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.from_ndjson"]], "from_protobuf() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.from_protobuf"]], "from_pydantic_model() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.from_strawberry_type"]], "get_json_schema() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.get_json_schema"]], "get_vocabulary() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.get_vocabulary"]], "index() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.index"]], "insert() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.insert"]], "load() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.load"]], "load_binary() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.load_binary"]], "load_csv() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.load_csv"]], "load_json() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.load_json"]], "map() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.map"]], "map_batch() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.map_batch"]], "match() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.match"]], "plot_embeddings() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.plot_image_sprites"]], "pop() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.pop"]], "post() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.post"]], "pull() (docarray.array.document.documentarray class method)": [[16, "docarray.array.document.DocumentArray.pull"]], "push() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.push"]], "reduce() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.reduce"]], "reduce_all() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.reduce_all"]], "remove() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.remove"]], "reverse() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.reverse"]], "sample() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.sample"]], "save() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.save"]], "save_binary() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.save_binary"]], "save_csv() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.save_csv"]], "save_embeddings_csv() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.save_embeddings_csv"]], "save_gif() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.save_gif"]], "save_json() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.save_json"]], "shuffle() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.shuffle"]], "split_by_tag() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.split_by_tag"]], "summary() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.summary"]], "tensors (docarray.array.document.documentarray property)": [[16, "docarray.array.document.DocumentArray.tensors"]], "texts (docarray.array.document.documentarray property)": [[16, "docarray.array.document.DocumentArray.texts"]], "to_base64() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.to_base64"]], "to_bytes() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.to_bytes"]], "to_dataframe() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.to_dataframe"]], "to_dict() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.to_dict"]], "to_json() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.to_json"]], "to_list() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.to_list"]], "to_protobuf() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.to_protobuf"]], "to_pydantic_model() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.to_strawberry_type"]], "traverse() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.traverse"]], "traverse_flat() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.document.documentarray method)": [[16, "docarray.array.document.DocumentArray.traverse_flat_per_path"]], "documentarrayelastic (class in docarray.array.elastic)": [[17, "docarray.array.elastic.DocumentArrayElastic"]], "elasticconfig (class in docarray.array.elastic)": [[17, "docarray.array.elastic.ElasticConfig"]], "type_map (docarray.array.elastic.documentarrayelastic attribute)": [[17, "docarray.array.elastic.DocumentArrayElastic.TYPE_MAP"]], "append() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.append"]], "apply() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.apply"]], "apply_batch() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.apply_batch"]], "batch() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.batch"]], "batch_ids() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.batch_ids"]], "batch_size (docarray.array.elastic.elasticconfig attribute)": [[17, "docarray.array.elastic.ElasticConfig.batch_size"]], "blobs (docarray.array.elastic.documentarrayelastic property)": [[17, "docarray.array.elastic.DocumentArrayElastic.blobs"]], "clear() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.clear"]], "columns (docarray.array.elastic.elasticconfig attribute)": [[17, "docarray.array.elastic.ElasticConfig.columns"]], "contents (docarray.array.elastic.documentarrayelastic property)": [[17, "docarray.array.elastic.DocumentArrayElastic.contents"]], "count() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.count"]], "dataloader() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.dataloader"]], "distance (docarray.array.elastic.elasticconfig attribute)": [[17, "docarray.array.elastic.ElasticConfig.distance"]], "docarray.array.elastic": [[17, "module-docarray.array.elastic"]], "ef_construction (docarray.array.elastic.elasticconfig attribute)": [[17, "docarray.array.elastic.ElasticConfig.ef_construction"]], "embed() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.embed"]], "embeddings (docarray.array.elastic.documentarrayelastic property)": [[17, "docarray.array.elastic.DocumentArrayElastic.embeddings"]], "empty() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.empty"]], "es_config (docarray.array.elastic.elasticconfig attribute)": [[17, "docarray.array.elastic.ElasticConfig.es_config"]], "evaluate() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.evaluate"]], "extend() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.extend"]], "find() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.find"]], "flatten() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.flatten"]], "from_base64() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.from_base64"]], "from_bytes() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.from_bytes"]], "from_csv() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.from_csv"]], "from_dataframe() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.from_dataframe"]], "from_dict() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.from_dict"]], "from_files() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.from_files"]], "from_huggingface_datasets() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.from_huggingface_datasets"]], "from_json() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.from_json"]], "from_lines() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.from_lines"]], "from_list() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.from_list"]], "from_ndarray() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.from_ndarray"]], "from_ndjson() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.from_ndjson"]], "from_protobuf() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.from_protobuf"]], "from_pydantic_model() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.from_pydantic_model"]], "from_strawberry_type() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.from_strawberry_type"]], "get_json_schema() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.get_json_schema"]], "get_vocabulary() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.get_vocabulary"]], "hosts (docarray.array.elastic.elasticconfig attribute)": [[17, "docarray.array.elastic.ElasticConfig.hosts"]], "index() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.index"]], "index_name (docarray.array.elastic.elasticconfig attribute)": [[17, "docarray.array.elastic.ElasticConfig.index_name"]], "index_text (docarray.array.elastic.elasticconfig attribute)": [[17, "docarray.array.elastic.ElasticConfig.index_text"]], "insert() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.insert"]], "load() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.load"]], "load_binary() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.load_binary"]], "load_csv() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.load_csv"]], "load_json() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.load_json"]], "m (docarray.array.elastic.elasticconfig attribute)": [[17, "docarray.array.elastic.ElasticConfig.m"]], "map() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.map"]], "map_batch() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.map_batch"]], "match() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.match"]], "n_dim (docarray.array.elastic.elasticconfig attribute)": [[17, "docarray.array.elastic.ElasticConfig.n_dim"]], "plot_embeddings() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.plot_embeddings"]], "plot_image_sprites() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.plot_image_sprites"]], "pop() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.pop"]], "post() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.post"]], "pull() (docarray.array.elastic.documentarrayelastic class method)": [[17, "docarray.array.elastic.DocumentArrayElastic.pull"]], "push() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.push"]], "reduce() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.reduce"]], "reduce_all() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.reduce_all"]], "remove() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.remove"]], "reverse() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.reverse"]], "sample() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.sample"]], "save() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.save"]], "save_binary() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.save_binary"]], "save_csv() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.save_csv"]], "save_embeddings_csv() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.save_embeddings_csv"]], "save_gif() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.save_gif"]], "save_json() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.save_json"]], "shuffle() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.shuffle"]], "split_by_tag() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.split_by_tag"]], "summary() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.summary"]], "tag_indices (docarray.array.elastic.elasticconfig attribute)": [[17, "docarray.array.elastic.ElasticConfig.tag_indices"]], "tensors (docarray.array.elastic.documentarrayelastic property)": [[17, "docarray.array.elastic.DocumentArrayElastic.tensors"]], "texts (docarray.array.elastic.documentarrayelastic property)": [[17, "docarray.array.elastic.DocumentArrayElastic.texts"]], "to_base64() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.to_base64"]], "to_bytes() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.to_bytes"]], "to_dataframe() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.to_dataframe"]], "to_dict() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.to_dict"]], "to_json() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.to_json"]], "to_list() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.to_list"]], "to_protobuf() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.to_protobuf"]], "to_pydantic_model() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.to_pydantic_model"]], "to_strawberry_type() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.to_strawberry_type"]], "traverse() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.traverse"]], "traverse_flat() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.traverse_flat"]], "traverse_flat_per_path() (docarray.array.elastic.documentarrayelastic method)": [[17, "docarray.array.elastic.DocumentArrayElastic.traverse_flat_per_path"]], "matcharray (class in docarray.array.match)": [[18, "docarray.array.match.MatchArray"]], "type_map (docarray.array.match.matcharray attribute)": [[18, "docarray.array.match.MatchArray.TYPE_MAP"]], "adjacency (docarray.array.match.matcharray property)": [[18, "docarray.array.match.MatchArray.adjacency"]], "append() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.append"]], "apply() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.apply"]], "apply_batch() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.apply_batch"]], "batch() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.batch"]], "batch_ids() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.batch_ids"]], "blobs (docarray.array.match.matcharray property)": [[18, "docarray.array.match.MatchArray.blobs"]], "clear() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.clear"]], "contents (docarray.array.match.matcharray property)": [[18, "docarray.array.match.MatchArray.contents"]], "count() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.count"]], "dataloader() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.dataloader"]], "docarray.array.match": [[18, "module-docarray.array.match"]], "embed() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.embed"]], "embeddings (docarray.array.match.matcharray property)": [[18, "docarray.array.match.MatchArray.embeddings"]], "empty() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.empty"]], "evaluate() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.evaluate"]], "extend() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.extend"]], "find() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.find"]], "flatten() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.flatten"]], "from_base64() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.from_base64"]], "from_bytes() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.from_bytes"]], "from_csv() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.from_csv"]], "from_dataframe() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.from_dataframe"]], "from_dict() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.from_dict"]], "from_files() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.from_files"]], "from_huggingface_datasets() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.from_huggingface_datasets"]], "from_json() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.from_json"]], "from_lines() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.from_lines"]], "from_list() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.from_list"]], "from_ndarray() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.from_ndarray"]], "from_ndjson() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.from_ndjson"]], "from_protobuf() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.from_protobuf"]], "from_pydantic_model() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.from_strawberry_type"]], "get_json_schema() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.get_json_schema"]], "get_vocabulary() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.get_vocabulary"]], "granularity (docarray.array.match.matcharray property)": [[18, "docarray.array.match.MatchArray.granularity"]], "index() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.index"]], "insert() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.insert"]], "load() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.load"]], "load_binary() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.load_binary"]], "load_csv() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.load_csv"]], "load_json() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.load_json"]], "map() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.map"]], "map_batch() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.map_batch"]], "match() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.match"]], "plot_embeddings() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.plot_image_sprites"]], "pop() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.pop"]], "post() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.post"]], "pull() (docarray.array.match.matcharray class method)": [[18, "docarray.array.match.MatchArray.pull"]], "push() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.push"]], "reduce() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.reduce"]], "reduce_all() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.reduce_all"]], "reference_doc (docarray.array.match.matcharray property)": [[18, "docarray.array.match.MatchArray.reference_doc"]], "remove() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.remove"]], "reverse() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.reverse"]], "sample() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.sample"]], "save() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.save"]], "save_binary() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.save_binary"]], "save_csv() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.save_csv"]], "save_embeddings_csv() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.save_embeddings_csv"]], "save_gif() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.save_gif"]], "save_json() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.save_json"]], "shuffle() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.shuffle"]], "split_by_tag() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.split_by_tag"]], "summary() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.summary"]], "tensors (docarray.array.match.matcharray property)": [[18, "docarray.array.match.MatchArray.tensors"]], "texts (docarray.array.match.matcharray property)": [[18, "docarray.array.match.MatchArray.texts"]], "to_base64() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.to_base64"]], "to_bytes() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.to_bytes"]], "to_dataframe() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.to_dataframe"]], "to_dict() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.to_dict"]], "to_json() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.to_json"]], "to_list() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.to_list"]], "to_protobuf() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.to_protobuf"]], "to_pydantic_model() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.to_strawberry_type"]], "traverse() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.traverse"]], "traverse_flat() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.match.matcharray method)": [[18, "docarray.array.match.MatchArray.traverse_flat_per_path"]], "documentarrayinmemory (class in docarray.array.memory)": [[19, "docarray.array.memory.DocumentArrayInMemory"]], "type_map (docarray.array.memory.documentarrayinmemory attribute)": [[19, "docarray.array.memory.DocumentArrayInMemory.TYPE_MAP"]], "append() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.append"]], "apply() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.apply"]], "apply_batch() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.apply_batch"]], "batch() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.batch"]], "batch_ids() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.batch_ids"]], "blobs (docarray.array.memory.documentarrayinmemory property)": [[19, "docarray.array.memory.DocumentArrayInMemory.blobs"]], "clear() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.clear"]], "contents (docarray.array.memory.documentarrayinmemory property)": [[19, "docarray.array.memory.DocumentArrayInMemory.contents"]], "count() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.count"]], "dataloader() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.dataloader"]], "docarray.array.memory": [[19, "module-docarray.array.memory"]], "embed() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.embed"]], "embeddings (docarray.array.memory.documentarrayinmemory property)": [[19, "docarray.array.memory.DocumentArrayInMemory.embeddings"]], "empty() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.empty"]], "evaluate() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.evaluate"]], "extend() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.extend"]], "find() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.find"]], "flatten() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.flatten"]], "from_base64() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.from_base64"]], "from_bytes() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.from_bytes"]], "from_csv() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.from_csv"]], "from_dataframe() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.from_dataframe"]], "from_dict() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.from_dict"]], "from_files() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.from_files"]], "from_huggingface_datasets() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.from_huggingface_datasets"]], "from_json() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.from_json"]], "from_lines() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.from_lines"]], "from_list() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.from_list"]], "from_ndarray() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.from_ndarray"]], "from_ndjson() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.from_ndjson"]], "from_protobuf() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.from_protobuf"]], "from_pydantic_model() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.from_pydantic_model"]], "from_strawberry_type() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.from_strawberry_type"]], "get_json_schema() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.get_json_schema"]], "get_vocabulary() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.get_vocabulary"]], "index() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.index"]], "insert() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.insert"]], "load() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.load"]], "load_binary() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.load_binary"]], "load_csv() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.load_csv"]], "load_json() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.load_json"]], "map() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.map"]], "map_batch() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.map_batch"]], "match() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.match"]], "plot_embeddings() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.plot_embeddings"]], "plot_image_sprites() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.plot_image_sprites"]], "pop() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.pop"]], "post() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.post"]], "pull() (docarray.array.memory.documentarrayinmemory class method)": [[19, "docarray.array.memory.DocumentArrayInMemory.pull"]], "push() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.push"]], "reduce() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.reduce"]], "reduce_all() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.reduce_all"]], "remove() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.remove"]], "reverse() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.reverse"]], "sample() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.sample"]], "save() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.save"]], "save_binary() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.save_binary"]], "save_csv() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.save_csv"]], "save_embeddings_csv() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.save_embeddings_csv"]], "save_gif() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.save_gif"]], "save_json() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.save_json"]], "shuffle() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.shuffle"]], "split_by_tag() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.split_by_tag"]], "summary() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.summary"]], "tensors (docarray.array.memory.documentarrayinmemory property)": [[19, "docarray.array.memory.DocumentArrayInMemory.tensors"]], "texts (docarray.array.memory.documentarrayinmemory property)": [[19, "docarray.array.memory.DocumentArrayInMemory.texts"]], "to_base64() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.to_base64"]], "to_bytes() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.to_bytes"]], "to_dataframe() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.to_dataframe"]], "to_dict() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.to_dict"]], "to_json() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.to_json"]], "to_list() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.to_list"]], "to_protobuf() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.to_protobuf"]], "to_pydantic_model() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.to_pydantic_model"]], "to_strawberry_type() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.to_strawberry_type"]], "traverse() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.traverse"]], "traverse_flat() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.traverse_flat"]], "traverse_flat_per_path() (docarray.array.memory.documentarrayinmemory method)": [[19, "docarray.array.memory.DocumentArrayInMemory.traverse_flat_per_path"]], "allmixins (class in docarray.array.mixins)": [[20, "docarray.array.mixins.AllMixins"]], "apply() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.apply"]], "apply_batch() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.apply_batch"]], "batch() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.batch"]], "batch_ids() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.batch_ids"]], "blobs (docarray.array.mixins.allmixins property)": [[20, "docarray.array.mixins.AllMixins.blobs"]], "contents (docarray.array.mixins.allmixins property)": [[20, "docarray.array.mixins.AllMixins.contents"]], "dataloader() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.dataloader"]], "docarray.array.mixins": [[20, "module-docarray.array.mixins"]], "embed() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.embed"]], "embeddings (docarray.array.mixins.allmixins property)": [[20, "docarray.array.mixins.AllMixins.embeddings"]], "empty() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.empty"]], "evaluate() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.evaluate"]], "find() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.find"]], "flatten() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.flatten"]], "from_base64() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.from_base64"]], "from_bytes() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.from_bytes"]], "from_csv() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.from_csv"]], "from_dataframe() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.from_dataframe"]], "from_dict() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.from_dict"]], "from_files() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.from_files"]], "from_huggingface_datasets() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.from_huggingface_datasets"]], "from_json() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.from_json"]], "from_lines() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.from_lines"]], "from_list() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.from_list"]], "from_ndarray() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.from_ndarray"]], "from_ndjson() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.from_ndjson"]], "from_protobuf() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.from_protobuf"]], "from_pydantic_model() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.from_pydantic_model"]], "from_strawberry_type() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.from_strawberry_type"]], "get_json_schema() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.get_json_schema"]], "get_vocabulary() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.get_vocabulary"]], "load() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.load"]], "load_binary() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.load_binary"]], "load_csv() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.load_csv"]], "load_json() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.load_json"]], "map() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.map"]], "map_batch() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.map_batch"]], "match() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.match"]], "plot_embeddings() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.plot_embeddings"]], "plot_image_sprites() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.plot_image_sprites"]], "post() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.post"]], "pull() (docarray.array.mixins.allmixins class method)": [[20, "docarray.array.mixins.AllMixins.pull"]], "push() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.push"]], "reduce() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.reduce"]], "reduce_all() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.reduce_all"]], "sample() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.sample"]], "save() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.save"]], "save_binary() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.save_binary"]], "save_csv() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.save_csv"]], "save_embeddings_csv() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.save_embeddings_csv"]], "save_gif() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.save_gif"]], "save_json() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.save_json"]], "shuffle() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.shuffle"]], "split_by_tag() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.split_by_tag"]], "summary() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.summary"]], "tensors (docarray.array.mixins.allmixins property)": [[20, "docarray.array.mixins.AllMixins.tensors"]], "texts (docarray.array.mixins.allmixins property)": [[20, "docarray.array.mixins.AllMixins.texts"]], "to_base64() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.to_base64"]], "to_bytes() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.to_bytes"]], "to_dataframe() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.to_dataframe"]], "to_dict() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.to_dict"]], "to_json() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.to_json"]], "to_list() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.to_list"]], "to_protobuf() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.to_protobuf"]], "to_pydantic_model() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.to_pydantic_model"]], "to_strawberry_type() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.to_strawberry_type"]], "traverse() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.traverse"]], "traverse_flat() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.traverse_flat"]], "traverse_flat_per_path() (docarray.array.mixins.allmixins method)": [[20, "docarray.array.mixins.AllMixins.traverse_flat_per_path"]], "contentpropertymixin (class in docarray.array.mixins.content)": [[21, "docarray.array.mixins.content.ContentPropertyMixin"]], "blobs (docarray.array.mixins.content.contentpropertymixin property)": [[21, "docarray.array.mixins.content.ContentPropertyMixin.blobs"]], "contents (docarray.array.mixins.content.contentpropertymixin property)": [[21, "docarray.array.mixins.content.ContentPropertyMixin.contents"]], "docarray.array.mixins.content": [[21, "module-docarray.array.mixins.content"]], "embeddings (docarray.array.mixins.content.contentpropertymixin property)": [[21, "docarray.array.mixins.content.ContentPropertyMixin.embeddings"]], "tensors (docarray.array.mixins.content.contentpropertymixin property)": [[21, "docarray.array.mixins.content.ContentPropertyMixin.tensors"]], "texts (docarray.array.mixins.content.contentpropertymixin property)": [[21, "docarray.array.mixins.content.ContentPropertyMixin.texts"]], "dataloadermixin (class in docarray.array.mixins.dataloader)": [[22, "docarray.array.mixins.dataloader.DataLoaderMixin"]], "dataloader() (docarray.array.mixins.dataloader.dataloadermixin class method)": [[22, "docarray.array.mixins.dataloader.DataLoaderMixin.dataloader"]], "docarray.array.mixins.dataloader": [[22, "module-docarray.array.mixins.dataloader"]], "documentarrayloader (class in docarray.array.mixins.dataloader.helper)": [[23, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader"]], "apply() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[23, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.apply"]], "apply_batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[23, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.apply_batch"]], "batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[23, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.batch"]], "batch_ids() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[23, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.batch_ids"]], "docarray.array.mixins.dataloader.helper": [[23, "module-docarray.array.mixins.dataloader.helper"]], "map() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[23, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.map"]], "map_batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[23, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.map_batch"]], "split_by_tag() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[23, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.split_by_tag"]], "delitemmixin (class in docarray.array.mixins.delitem)": [[24, "docarray.array.mixins.delitem.DelItemMixin"]], "docarray.array.mixins.delitem": [[24, "module-docarray.array.mixins.delitem"]], "embedmixin (class in docarray.array.mixins.embed)": [[25, "docarray.array.mixins.embed.EmbedMixin"]], "docarray.array.mixins.embed": [[25, "module-docarray.array.mixins.embed"]], "embed() (docarray.array.mixins.embed.embedmixin method)": [[25, "docarray.array.mixins.embed.EmbedMixin.embed"]], "get_framework() (in module docarray.array.mixins.embed)": [[25, "docarray.array.mixins.embed.get_framework"]], "emptymixin (class in docarray.array.mixins.empty)": [[26, "docarray.array.mixins.empty.EmptyMixin"]], "docarray.array.mixins.empty": [[26, "module-docarray.array.mixins.empty"]], "empty() (docarray.array.mixins.empty.emptymixin class method)": [[26, "docarray.array.mixins.empty.EmptyMixin.empty"]], "evaluationmixin (class in docarray.array.mixins.evaluation)": [[27, "docarray.array.mixins.evaluation.EvaluationMixin"]], "docarray.array.mixins.evaluation": [[27, "module-docarray.array.mixins.evaluation"]], "evaluate() (docarray.array.mixins.evaluation.evaluationmixin method)": [[27, "docarray.array.mixins.evaluation.EvaluationMixin.evaluate"]], "findmixin (class in docarray.array.mixins.find)": [[28, "docarray.array.mixins.find.FindMixin"]], "docarray.array.mixins.find": [[28, "module-docarray.array.mixins.find"]], "find() (docarray.array.mixins.find.findmixin method)": [[28, "docarray.array.mixins.find.FindMixin.find"]], "getattributemixin (class in docarray.array.mixins.getattr)": [[29, "docarray.array.mixins.getattr.GetAttributeMixin"]], "docarray.array.mixins.getattr": [[29, "module-docarray.array.mixins.getattr"]], "getitemmixin (class in docarray.array.mixins.getitem)": [[30, "docarray.array.mixins.getitem.GetItemMixin"]], "docarray.array.mixins.getitem": [[30, "module-docarray.array.mixins.getitem"]], "groupmixin (class in docarray.array.mixins.group)": [[31, "docarray.array.mixins.group.GroupMixin"]], "batch() (docarray.array.mixins.group.groupmixin method)": [[31, "docarray.array.mixins.group.GroupMixin.batch"]], "batch_ids() (docarray.array.mixins.group.groupmixin method)": [[31, "docarray.array.mixins.group.GroupMixin.batch_ids"]], "docarray.array.mixins.group": [[31, "module-docarray.array.mixins.group"]], "split_by_tag() (docarray.array.mixins.group.groupmixin method)": [[31, "docarray.array.mixins.group.GroupMixin.split_by_tag"]], "docarray.array.mixins.io": [[32, "module-docarray.array.mixins.io"]], "binaryiomixin (class in docarray.array.mixins.io.binary)": [[33, "docarray.array.mixins.io.binary.BinaryIOMixin"]], "lazyrequestreader (class in docarray.array.mixins.io.binary)": [[33, "docarray.array.mixins.io.binary.LazyRequestReader"]], "docarray.array.mixins.io.binary": [[33, "module-docarray.array.mixins.io.binary"]], "from_base64() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[33, "docarray.array.mixins.io.binary.BinaryIOMixin.from_base64"]], "from_bytes() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[33, "docarray.array.mixins.io.binary.BinaryIOMixin.from_bytes"]], "from_protobuf() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[33, "docarray.array.mixins.io.binary.BinaryIOMixin.from_protobuf"]], "load_binary() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[33, "docarray.array.mixins.io.binary.BinaryIOMixin.load_binary"]], "save_binary() (docarray.array.mixins.io.binary.binaryiomixin method)": [[33, "docarray.array.mixins.io.binary.BinaryIOMixin.save_binary"]], "to_base64() (docarray.array.mixins.io.binary.binaryiomixin method)": [[33, "docarray.array.mixins.io.binary.BinaryIOMixin.to_base64"]], "to_bytes() (docarray.array.mixins.io.binary.binaryiomixin method)": [[33, "docarray.array.mixins.io.binary.BinaryIOMixin.to_bytes"]], "to_protobuf() (docarray.array.mixins.io.binary.binaryiomixin method)": [[33, "docarray.array.mixins.io.binary.BinaryIOMixin.to_protobuf"]], "commoniomixin (class in docarray.array.mixins.io.common)": [[34, "docarray.array.mixins.io.common.CommonIOMixin"]], "docarray.array.mixins.io.common": [[34, "module-docarray.array.mixins.io.common"]], "load() (docarray.array.mixins.io.common.commoniomixin class method)": [[34, "docarray.array.mixins.io.common.CommonIOMixin.load"]], "save() (docarray.array.mixins.io.common.commoniomixin method)": [[34, "docarray.array.mixins.io.common.CommonIOMixin.save"]], "csviomixin (class in docarray.array.mixins.io.csv)": [[35, "docarray.array.mixins.io.csv.CsvIOMixin"]], "docarray.array.mixins.io.csv": [[35, "module-docarray.array.mixins.io.csv"]], "load_csv() (docarray.array.mixins.io.csv.csviomixin class method)": [[35, "docarray.array.mixins.io.csv.CsvIOMixin.load_csv"]], "save_csv() (docarray.array.mixins.io.csv.csviomixin method)": [[35, "docarray.array.mixins.io.csv.CsvIOMixin.save_csv"]], "save_embeddings_csv() (docarray.array.mixins.io.csv.csviomixin method)": [[35, "docarray.array.mixins.io.csv.CsvIOMixin.save_embeddings_csv"]], "dataframeiomixin (class in docarray.array.mixins.io.dataframe)": [[36, "docarray.array.mixins.io.dataframe.DataframeIOMixin"]], "docarray.array.mixins.io.dataframe": [[36, "module-docarray.array.mixins.io.dataframe"]], "from_dataframe() (docarray.array.mixins.io.dataframe.dataframeiomixin class method)": [[36, "docarray.array.mixins.io.dataframe.DataframeIOMixin.from_dataframe"]], "to_dataframe() (docarray.array.mixins.io.dataframe.dataframeiomixin method)": [[36, "docarray.array.mixins.io.dataframe.DataframeIOMixin.to_dataframe"]], "fromgeneratormixin (class in docarray.array.mixins.io.from_gen)": [[37, "docarray.array.mixins.io.from_gen.FromGeneratorMixin"]], "docarray.array.mixins.io.from_gen": [[37, "module-docarray.array.mixins.io.from_gen"]], "from_csv() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[37, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_csv"]], "from_files() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[37, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_files"]], "from_huggingface_datasets() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[37, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_huggingface_datasets"]], "from_lines() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[37, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_lines"]], "from_ndarray() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[37, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_ndarray"]], "from_ndjson() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[37, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_ndjson"]], "jsoniomixin (class in docarray.array.mixins.io.json)": [[38, "docarray.array.mixins.io.json.JsonIOMixin"]], "docarray.array.mixins.io.json": [[38, "module-docarray.array.mixins.io.json"]], "from_dict() (docarray.array.mixins.io.json.jsoniomixin class method)": [[38, "docarray.array.mixins.io.json.JsonIOMixin.from_dict"]], "from_json() (docarray.array.mixins.io.json.jsoniomixin class method)": [[38, "docarray.array.mixins.io.json.JsonIOMixin.from_json"]], "from_list() (docarray.array.mixins.io.json.jsoniomixin class method)": [[38, "docarray.array.mixins.io.json.JsonIOMixin.from_list"]], "load_json() (docarray.array.mixins.io.json.jsoniomixin class method)": [[38, "docarray.array.mixins.io.json.JsonIOMixin.load_json"]], "save_json() (docarray.array.mixins.io.json.jsoniomixin method)": [[38, "docarray.array.mixins.io.json.JsonIOMixin.save_json"]], "to_dict() (docarray.array.mixins.io.json.jsoniomixin method)": [[38, "docarray.array.mixins.io.json.JsonIOMixin.to_dict"]], "to_json() (docarray.array.mixins.io.json.jsoniomixin method)": [[38, "docarray.array.mixins.io.json.JsonIOMixin.to_json"]], "to_list() (docarray.array.mixins.io.json.jsoniomixin method)": [[38, "docarray.array.mixins.io.json.JsonIOMixin.to_list"]], "qpscolumn (class in docarray.array.mixins.io.pbar)": [[39, "docarray.array.mixins.io.pbar.QPSColumn"]], "docarray.array.mixins.io.pbar": [[39, "module-docarray.array.mixins.io.pbar"]], "get_pbar() (in module docarray.array.mixins.io.pbar)": [[39, "docarray.array.mixins.io.pbar.get_pbar"]], "get_progressbar() (in module docarray.array.mixins.io.pbar)": [[39, "docarray.array.mixins.io.pbar.get_progressbar"]], "get_table_column() (docarray.array.mixins.io.pbar.qpscolumn method)": [[39, "docarray.array.mixins.io.pbar.QPSColumn.get_table_column"]], "max_refresh (docarray.array.mixins.io.pbar.qpscolumn attribute)": [[39, "docarray.array.mixins.io.pbar.QPSColumn.max_refresh"]], "render() (docarray.array.mixins.io.pbar.qpscolumn method)": [[39, "docarray.array.mixins.io.pbar.QPSColumn.render"]], "pushpullmixin (class in docarray.array.mixins.io.pushpull)": [[40, "docarray.array.mixins.io.pushpull.PushPullMixin"]], "docarray.array.mixins.io.pushpull": [[40, "module-docarray.array.mixins.io.pushpull"]], "pull() (docarray.array.mixins.io.pushpull.pushpullmixin class method)": [[40, "docarray.array.mixins.io.pushpull.PushPullMixin.pull"]], "push() (docarray.array.mixins.io.pushpull.pushpullmixin method)": [[40, "docarray.array.mixins.io.pushpull.PushPullMixin.push"]], "matchmixin (class in docarray.array.mixins.match)": [[41, "docarray.array.mixins.match.MatchMixin"]], "docarray.array.mixins.match": [[41, "module-docarray.array.mixins.match"]], "match() (docarray.array.mixins.match.matchmixin method)": [[41, "docarray.array.mixins.match.MatchMixin.match"]], "parallelmixin (class in docarray.array.mixins.parallel)": [[42, "docarray.array.mixins.parallel.ParallelMixin"]], "apply() (docarray.array.mixins.parallel.parallelmixin method)": [[42, "docarray.array.mixins.parallel.ParallelMixin.apply"]], "apply_batch() (docarray.array.mixins.parallel.parallelmixin method)": [[42, "docarray.array.mixins.parallel.ParallelMixin.apply_batch"]], "docarray.array.mixins.parallel": [[42, "module-docarray.array.mixins.parallel"]], "map() (docarray.array.mixins.parallel.parallelmixin method)": [[42, "docarray.array.mixins.parallel.ParallelMixin.map"]], "map_batch() (docarray.array.mixins.parallel.parallelmixin method)": [[42, "docarray.array.mixins.parallel.ParallelMixin.map_batch"]], "plotmixin (class in docarray.array.mixins.plot)": [[43, "docarray.array.mixins.plot.PlotMixin"]], "docarray.array.mixins.plot": [[43, "module-docarray.array.mixins.plot"]], "plot_embeddings() (docarray.array.mixins.plot.plotmixin method)": [[43, "docarray.array.mixins.plot.PlotMixin.plot_embeddings"]], "plot_image_sprites() (docarray.array.mixins.plot.plotmixin method)": [[43, "docarray.array.mixins.plot.PlotMixin.plot_image_sprites"]], "save_gif() (docarray.array.mixins.plot.plotmixin method)": [[43, "docarray.array.mixins.plot.PlotMixin.save_gif"]], "summary() (docarray.array.mixins.plot.plotmixin method)": [[43, "docarray.array.mixins.plot.PlotMixin.summary"]], "postmixin (class in docarray.array.mixins.post)": [[44, "docarray.array.mixins.post.PostMixin"]], "docarray.array.mixins.post": [[44, "module-docarray.array.mixins.post"]], "post() (docarray.array.mixins.post.postmixin method)": [[44, "docarray.array.mixins.post.PostMixin.post"]], "pydanticmixin (class in docarray.array.mixins.pydantic)": [[45, "docarray.array.mixins.pydantic.PydanticMixin"]], "docarray.array.mixins.pydantic": [[45, "module-docarray.array.mixins.pydantic"]], "from_pydantic_model() (docarray.array.mixins.pydantic.pydanticmixin class method)": [[45, "docarray.array.mixins.pydantic.PydanticMixin.from_pydantic_model"]], "get_json_schema() (docarray.array.mixins.pydantic.pydanticmixin class method)": [[45, "docarray.array.mixins.pydantic.PydanticMixin.get_json_schema"]], "to_pydantic_model() (docarray.array.mixins.pydantic.pydanticmixin method)": [[45, "docarray.array.mixins.pydantic.PydanticMixin.to_pydantic_model"]], "reducemixin (class in docarray.array.mixins.reduce)": [[46, "docarray.array.mixins.reduce.ReduceMixin"]], "docarray.array.mixins.reduce": [[46, "module-docarray.array.mixins.reduce"]], "reduce() (docarray.array.mixins.reduce.reducemixin method)": [[46, "docarray.array.mixins.reduce.ReduceMixin.reduce"]], "reduce_all() (docarray.array.mixins.reduce.reducemixin method)": [[46, "docarray.array.mixins.reduce.ReduceMixin.reduce_all"]], "samplemixin (class in docarray.array.mixins.sample)": [[47, "docarray.array.mixins.sample.SampleMixin"]], "docarray.array.mixins.sample": [[47, "module-docarray.array.mixins.sample"]], "sample() (docarray.array.mixins.sample.samplemixin method)": [[47, "docarray.array.mixins.sample.SampleMixin.sample"]], "shuffle() (docarray.array.mixins.sample.samplemixin method)": [[47, "docarray.array.mixins.sample.SampleMixin.shuffle"]], "setitemmixin (class in docarray.array.mixins.setitem)": [[48, "docarray.array.mixins.setitem.SetItemMixin"]], "docarray.array.mixins.setitem": [[48, "module-docarray.array.mixins.setitem"]], "strawberrymixin (class in docarray.array.mixins.strawberry)": [[49, "docarray.array.mixins.strawberry.StrawberryMixin"]], "docarray.array.mixins.strawberry": [[49, "module-docarray.array.mixins.strawberry"]], "from_strawberry_type() (docarray.array.mixins.strawberry.strawberrymixin class method)": [[49, "docarray.array.mixins.strawberry.StrawberryMixin.from_strawberry_type"]], "to_strawberry_type() (docarray.array.mixins.strawberry.strawberrymixin method)": [[49, "docarray.array.mixins.strawberry.StrawberryMixin.to_strawberry_type"]], "texttoolsmixin (class in docarray.array.mixins.text)": [[50, "docarray.array.mixins.text.TextToolsMixin"]], "docarray.array.mixins.text": [[50, "module-docarray.array.mixins.text"]], "get_vocabulary() (docarray.array.mixins.text.texttoolsmixin method)": [[50, "docarray.array.mixins.text.TextToolsMixin.get_vocabulary"]], "traversemixin (class in docarray.array.mixins.traverse)": [[51, "docarray.array.mixins.traverse.TraverseMixin"]], "docarray.array.mixins.traverse": [[51, "module-docarray.array.mixins.traverse"]], "flatten() (docarray.array.mixins.traverse.traversemixin method)": [[51, "docarray.array.mixins.traverse.TraverseMixin.flatten"]], "traverse() (docarray.array.mixins.traverse.traversemixin method)": [[51, "docarray.array.mixins.traverse.TraverseMixin.traverse"]], "traverse_flat() (docarray.array.mixins.traverse.traversemixin method)": [[51, "docarray.array.mixins.traverse.TraverseMixin.traverse_flat"]], "traverse_flat_per_path() (docarray.array.mixins.traverse.traversemixin method)": [[51, "docarray.array.mixins.traverse.TraverseMixin.traverse_flat_per_path"]], "documentarrayqdrant (class in docarray.array.qdrant)": [[52, "docarray.array.qdrant.DocumentArrayQdrant"]], "qdrantconfig (class in docarray.array.qdrant)": [[52, "docarray.array.qdrant.QdrantConfig"]], "type_map (docarray.array.qdrant.documentarrayqdrant attribute)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.TYPE_MAP"]], "append() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.append"]], "apply() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.apply"]], "apply_batch() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.apply_batch"]], "batch() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.batch"]], "batch_ids() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.batch_ids"]], "blobs (docarray.array.qdrant.documentarrayqdrant property)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.blobs"]], "clear() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.clear"]], "client (docarray.array.qdrant.documentarrayqdrant property)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.client"]], "collection_name (docarray.array.qdrant.documentarrayqdrant property)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.collection_name"]], "collection_name (docarray.array.qdrant.qdrantconfig attribute)": [[52, "docarray.array.qdrant.QdrantConfig.collection_name"]], "collection_name_meta (docarray.array.qdrant.documentarrayqdrant property)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.collection_name_meta"]], "columns (docarray.array.qdrant.qdrantconfig attribute)": [[52, "docarray.array.qdrant.QdrantConfig.columns"]], "config (docarray.array.qdrant.documentarrayqdrant property)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.config"]], "contents (docarray.array.qdrant.documentarrayqdrant property)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.contents"]], "count() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.count"]], "dataloader() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.dataloader"]], "distance (docarray.array.qdrant.documentarrayqdrant property)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.distance"]], "distance (docarray.array.qdrant.qdrantconfig attribute)": [[52, "docarray.array.qdrant.QdrantConfig.distance"]], "docarray.array.qdrant": [[52, "module-docarray.array.qdrant"]], "ef_construct (docarray.array.qdrant.qdrantconfig attribute)": [[52, "docarray.array.qdrant.QdrantConfig.ef_construct"]], "embed() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.embed"]], "embeddings (docarray.array.qdrant.documentarrayqdrant property)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.embeddings"]], "empty() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.empty"]], "evaluate() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.evaluate"]], "extend() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.extend"]], "find() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.find"]], "flatten() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.flatten"]], "from_base64() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.from_base64"]], "from_bytes() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.from_bytes"]], "from_csv() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.from_csv"]], "from_dataframe() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.from_dataframe"]], "from_dict() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.from_dict"]], "from_files() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.from_files"]], "from_huggingface_datasets() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.from_huggingface_datasets"]], "from_json() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.from_json"]], "from_lines() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.from_lines"]], "from_list() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.from_list"]], "from_ndarray() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.from_ndarray"]], "from_ndjson() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.from_ndjson"]], "from_protobuf() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.from_protobuf"]], "from_pydantic_model() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.from_pydantic_model"]], "from_strawberry_type() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.from_strawberry_type"]], "full_scan_threshold (docarray.array.qdrant.qdrantconfig attribute)": [[52, "docarray.array.qdrant.QdrantConfig.full_scan_threshold"]], "get_json_schema() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.get_json_schema"]], "get_vocabulary() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.get_vocabulary"]], "host (docarray.array.qdrant.qdrantconfig attribute)": [[52, "docarray.array.qdrant.QdrantConfig.host"]], "index() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.index"]], "insert() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.insert"]], "load() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.load"]], "load_binary() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.load_binary"]], "load_csv() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.load_csv"]], "load_json() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.load_json"]], "m (docarray.array.qdrant.qdrantconfig attribute)": [[52, "docarray.array.qdrant.QdrantConfig.m"]], "map() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.map"]], "map_batch() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.map_batch"]], "match() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.match"]], "n_dim (docarray.array.qdrant.documentarrayqdrant property)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.n_dim"]], "n_dim (docarray.array.qdrant.qdrantconfig attribute)": [[52, "docarray.array.qdrant.QdrantConfig.n_dim"]], "plot_embeddings() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.plot_embeddings"]], "plot_image_sprites() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.plot_image_sprites"]], "pop() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.pop"]], "port (docarray.array.qdrant.qdrantconfig attribute)": [[52, "docarray.array.qdrant.QdrantConfig.port"]], "post() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.post"]], "pull() (docarray.array.qdrant.documentarrayqdrant class method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.pull"]], "push() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.push"]], "reduce() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.reduce"]], "reduce_all() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.reduce_all"]], "remove() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.remove"]], "reverse() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.reverse"]], "sample() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.sample"]], "save() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.save"]], "save_binary() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.save_binary"]], "save_csv() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.save_csv"]], "save_embeddings_csv() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.save_embeddings_csv"]], "save_gif() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.save_gif"]], "save_json() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.save_json"]], "scan() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.scan"]], "scroll_batch_size (docarray.array.qdrant.documentarrayqdrant property)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.scroll_batch_size"]], "scroll_batch_size (docarray.array.qdrant.qdrantconfig attribute)": [[52, "docarray.array.qdrant.QdrantConfig.scroll_batch_size"]], "serialization_config (docarray.array.qdrant.documentarrayqdrant property)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.serialization_config"]], "serialize_config (docarray.array.qdrant.documentarrayqdrant property)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.serialize_config"]], "serialize_config (docarray.array.qdrant.qdrantconfig attribute)": [[52, "docarray.array.qdrant.QdrantConfig.serialize_config"]], "shuffle() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.shuffle"]], "split_by_tag() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.split_by_tag"]], "summary() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.summary"]], "tensors (docarray.array.qdrant.documentarrayqdrant property)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.tensors"]], "texts (docarray.array.qdrant.documentarrayqdrant property)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.texts"]], "to_base64() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.to_base64"]], "to_bytes() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.to_bytes"]], "to_dataframe() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.to_dataframe"]], "to_dict() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.to_dict"]], "to_json() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.to_json"]], "to_list() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.to_list"]], "to_protobuf() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.to_protobuf"]], "to_pydantic_model() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.to_pydantic_model"]], "to_strawberry_type() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.to_strawberry_type"]], "traverse() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.traverse"]], "traverse_flat() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.traverse_flat"]], "traverse_flat_per_path() (docarray.array.qdrant.documentarrayqdrant method)": [[52, "docarray.array.qdrant.DocumentArrayQdrant.traverse_flat_per_path"]], "docarray.array.queryset": [[53, "module-docarray.array.queryset"]], "lookupleaf (class in docarray.array.queryset.lookup)": [[54, "docarray.array.queryset.lookup.LookupLeaf"]], "lookupnode (class in docarray.array.queryset.lookup)": [[54, "docarray.array.queryset.lookup.LookupNode"]], "lookuptreeelem (class in docarray.array.queryset.lookup)": [[54, "docarray.array.queryset.lookup.LookupTreeElem"]], "lookupyerror": [[54, "docarray.array.queryset.lookup.LookupyError"]], "q (in module docarray.array.queryset.lookup)": [[54, "docarray.array.queryset.lookup.Q"]], "add_child() (docarray.array.queryset.lookup.lookupnode method)": [[54, "docarray.array.queryset.lookup.LookupNode.add_child"]], "args (docarray.array.queryset.lookup.lookupyerror attribute)": [[54, "docarray.array.queryset.lookup.LookupyError.args"]], "docarray.array.queryset.lookup": [[54, "module-docarray.array.queryset.lookup"]], "dunder_partition() (in module docarray.array.queryset.lookup)": [[54, "docarray.array.queryset.lookup.dunder_partition"]], "evaluate() (docarray.array.queryset.lookup.lookupleaf method)": [[54, "docarray.array.queryset.lookup.LookupLeaf.evaluate"]], "evaluate() (docarray.array.queryset.lookup.lookupnode method)": [[54, "docarray.array.queryset.lookup.LookupNode.evaluate"]], "evaluate() (docarray.array.queryset.lookup.lookuptreeelem method)": [[54, "docarray.array.queryset.lookup.LookupTreeElem.evaluate"]], "guard_q() (in module docarray.array.queryset.lookup)": [[54, "docarray.array.queryset.lookup.guard_Q"]], "guard_iter() (in module docarray.array.queryset.lookup)": [[54, "docarray.array.queryset.lookup.guard_iter"]], "guard_list() (in module docarray.array.queryset.lookup)": [[54, "docarray.array.queryset.lookup.guard_list"]], "guard_str() (in module docarray.array.queryset.lookup)": [[54, "docarray.array.queryset.lookup.guard_str"]], "guard_type() (in module docarray.array.queryset.lookup)": [[54, "docarray.array.queryset.lookup.guard_type"]], "iff() (in module docarray.array.queryset.lookup)": [[54, "docarray.array.queryset.lookup.iff"]], "iff_not_none() (in module docarray.array.queryset.lookup)": [[54, "docarray.array.queryset.lookup.iff_not_none"]], "lookup() (in module docarray.array.queryset.lookup)": [[54, "docarray.array.queryset.lookup.lookup"]], "with_traceback() (docarray.array.queryset.lookup.lookupyerror method)": [[54, "docarray.array.queryset.lookup.LookupyError.with_traceback"]], "queryparser (class in docarray.array.queryset.parser)": [[55, "docarray.array.queryset.parser.QueryParser"]], "docarray.array.queryset.parser": [[55, "module-docarray.array.queryset.parser"]], "evaluate() (docarray.array.queryset.parser.queryparser method)": [[55, "docarray.array.queryset.parser.QueryParser.evaluate"]], "documentarraysqlite (class in docarray.array.sqlite)": [[56, "docarray.array.sqlite.DocumentArraySqlite"]], "sqliteconfig (class in docarray.array.sqlite)": [[56, "docarray.array.sqlite.SqliteConfig"]], "type_map (docarray.array.sqlite.documentarraysqlite attribute)": [[56, "docarray.array.sqlite.DocumentArraySqlite.TYPE_MAP"]], "append() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.append"]], "apply() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.apply"]], "apply_batch() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.apply_batch"]], "batch() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.batch"]], "batch_ids() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.batch_ids"]], "blobs (docarray.array.sqlite.documentarraysqlite property)": [[56, "docarray.array.sqlite.DocumentArraySqlite.blobs"]], "clear() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.clear"]], "conn_config (docarray.array.sqlite.sqliteconfig attribute)": [[56, "docarray.array.sqlite.SqliteConfig.conn_config"]], "connection (docarray.array.sqlite.sqliteconfig attribute)": [[56, "docarray.array.sqlite.SqliteConfig.connection"]], "contents (docarray.array.sqlite.documentarraysqlite property)": [[56, "docarray.array.sqlite.DocumentArraySqlite.contents"]], "count() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.count"]], "dataloader() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.dataloader"]], "docarray.array.sqlite": [[56, "module-docarray.array.sqlite"]], "embed() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.embed"]], "embeddings (docarray.array.sqlite.documentarraysqlite property)": [[56, "docarray.array.sqlite.DocumentArraySqlite.embeddings"]], "empty() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.empty"]], "evaluate() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.evaluate"]], "extend() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.extend"]], "find() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.find"]], "flatten() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.flatten"]], "from_base64() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.from_base64"]], "from_bytes() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.from_bytes"]], "from_csv() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.from_csv"]], "from_dataframe() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.from_dataframe"]], "from_dict() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.from_dict"]], "from_files() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.from_files"]], "from_huggingface_datasets() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.from_huggingface_datasets"]], "from_json() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.from_json"]], "from_lines() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.from_lines"]], "from_list() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.from_list"]], "from_ndarray() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.from_ndarray"]], "from_ndjson() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.from_ndjson"]], "from_protobuf() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.from_protobuf"]], "from_pydantic_model() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.from_pydantic_model"]], "from_strawberry_type() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.from_strawberry_type"]], "get_json_schema() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.get_json_schema"]], "get_vocabulary() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.get_vocabulary"]], "index() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.index"]], "insert() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.insert"]], "journal_mode (docarray.array.sqlite.sqliteconfig attribute)": [[56, "docarray.array.sqlite.SqliteConfig.journal_mode"]], "load() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.load"]], "load_binary() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.load_binary"]], "load_csv() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.load_csv"]], "load_json() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.load_json"]], "map() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.map"]], "map_batch() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.map_batch"]], "match() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.match"]], "plot_embeddings() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.plot_embeddings"]], "plot_image_sprites() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.plot_image_sprites"]], "pop() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.pop"]], "post() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.post"]], "pull() (docarray.array.sqlite.documentarraysqlite class method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.pull"]], "push() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.push"]], "reduce() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.reduce"]], "reduce_all() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.reduce_all"]], "remove() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.remove"]], "reverse() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.reverse"]], "sample() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.sample"]], "save() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.save"]], "save_binary() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.save_binary"]], "save_csv() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.save_csv"]], "save_embeddings_csv() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.save_embeddings_csv"]], "save_gif() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.save_gif"]], "save_json() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.save_json"]], "schema_version (docarray.array.sqlite.documentarraysqlite attribute)": [[56, "docarray.array.sqlite.DocumentArraySqlite.schema_version"]], "serialize_config (docarray.array.sqlite.sqliteconfig attribute)": [[56, "docarray.array.sqlite.SqliteConfig.serialize_config"]], "shuffle() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.shuffle"]], "split_by_tag() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.split_by_tag"]], "summary() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.summary"]], "synchronous (docarray.array.sqlite.sqliteconfig attribute)": [[56, "docarray.array.sqlite.SqliteConfig.synchronous"]], "table_name (docarray.array.sqlite.sqliteconfig attribute)": [[56, "docarray.array.sqlite.SqliteConfig.table_name"]], "tensors (docarray.array.sqlite.documentarraysqlite property)": [[56, "docarray.array.sqlite.DocumentArraySqlite.tensors"]], "texts (docarray.array.sqlite.documentarraysqlite property)": [[56, "docarray.array.sqlite.DocumentArraySqlite.texts"]], "to_base64() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.to_base64"]], "to_bytes() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.to_bytes"]], "to_dataframe() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.to_dataframe"]], "to_dict() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.to_dict"]], "to_json() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.to_json"]], "to_list() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.to_list"]], "to_protobuf() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.to_protobuf"]], "to_pydantic_model() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.to_pydantic_model"]], "to_strawberry_type() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.to_strawberry_type"]], "traverse() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.traverse"]], "traverse_flat() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.traverse_flat"]], "traverse_flat_per_path() (docarray.array.sqlite.documentarraysqlite method)": [[56, "docarray.array.sqlite.DocumentArraySqlite.traverse_flat_per_path"]], "docarray.array.storage": [[57, "module-docarray.array.storage"]], "annliteconfig (class in docarray.array.storage.annlite)": [[58, "docarray.array.storage.annlite.AnnliteConfig"]], "storagemixins (class in docarray.array.storage.annlite)": [[58, "docarray.array.storage.annlite.StorageMixins"]], "type_map (docarray.array.storage.annlite.storagemixins attribute)": [[58, "docarray.array.storage.annlite.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.annlite.storagemixins method)": [[58, "docarray.array.storage.annlite.StorageMixins.append"]], "clear() (docarray.array.storage.annlite.storagemixins method)": [[58, "docarray.array.storage.annlite.StorageMixins.clear"]], "columns (docarray.array.storage.annlite.annliteconfig attribute)": [[58, "docarray.array.storage.annlite.AnnliteConfig.columns"]], "count() (docarray.array.storage.annlite.storagemixins method)": [[58, "docarray.array.storage.annlite.StorageMixins.count"]], "data_path (docarray.array.storage.annlite.annliteconfig attribute)": [[58, "docarray.array.storage.annlite.AnnliteConfig.data_path"]], "docarray.array.storage.annlite": [[58, "module-docarray.array.storage.annlite"]], "ef_construction (docarray.array.storage.annlite.annliteconfig attribute)": [[58, "docarray.array.storage.annlite.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.storage.annlite.annliteconfig attribute)": [[58, "docarray.array.storage.annlite.AnnliteConfig.ef_search"]], "extend() (docarray.array.storage.annlite.storagemixins method)": [[58, "docarray.array.storage.annlite.StorageMixins.extend"]], "index() (docarray.array.storage.annlite.storagemixins method)": [[58, "docarray.array.storage.annlite.StorageMixins.index"]], "insert() (docarray.array.storage.annlite.storagemixins method)": [[58, "docarray.array.storage.annlite.StorageMixins.insert"]], "max_connection (docarray.array.storage.annlite.annliteconfig attribute)": [[58, "docarray.array.storage.annlite.AnnliteConfig.max_connection"]], "metric (docarray.array.storage.annlite.annliteconfig attribute)": [[58, "docarray.array.storage.annlite.AnnliteConfig.metric"]], "n_dim (docarray.array.storage.annlite.annliteconfig attribute)": [[58, "docarray.array.storage.annlite.AnnliteConfig.n_dim"]], "pop() (docarray.array.storage.annlite.storagemixins method)": [[58, "docarray.array.storage.annlite.StorageMixins.pop"]], "remove() (docarray.array.storage.annlite.storagemixins method)": [[58, "docarray.array.storage.annlite.StorageMixins.remove"]], "reverse() (docarray.array.storage.annlite.storagemixins method)": [[58, "docarray.array.storage.annlite.StorageMixins.reverse"]], "serialize_config (docarray.array.storage.annlite.annliteconfig attribute)": [[58, "docarray.array.storage.annlite.AnnliteConfig.serialize_config"]], "annliteconfig (class in docarray.array.storage.annlite.backend)": [[59, "docarray.array.storage.annlite.backend.AnnliteConfig"]], "backendmixin (class in docarray.array.storage.annlite.backend)": [[59, "docarray.array.storage.annlite.backend.BackendMixin"]], "type_map (docarray.array.storage.annlite.backend.backendmixin attribute)": [[59, "docarray.array.storage.annlite.backend.BackendMixin.TYPE_MAP"]], "columns (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[59, "docarray.array.storage.annlite.backend.AnnliteConfig.columns"]], "data_path (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[59, "docarray.array.storage.annlite.backend.AnnliteConfig.data_path"]], "docarray.array.storage.annlite.backend": [[59, "module-docarray.array.storage.annlite.backend"]], "ef_construction (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[59, "docarray.array.storage.annlite.backend.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[59, "docarray.array.storage.annlite.backend.AnnliteConfig.ef_search"]], "max_connection (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[59, "docarray.array.storage.annlite.backend.AnnliteConfig.max_connection"]], "metric (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[59, "docarray.array.storage.annlite.backend.AnnliteConfig.metric"]], "n_dim (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[59, "docarray.array.storage.annlite.backend.AnnliteConfig.n_dim"]], "serialize_config (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[59, "docarray.array.storage.annlite.backend.AnnliteConfig.serialize_config"]], "findmixin (class in docarray.array.storage.annlite.find)": [[60, "docarray.array.storage.annlite.find.FindMixin"]], "docarray.array.storage.annlite.find": [[60, "module-docarray.array.storage.annlite.find"]], "getsetdelmixin (class in docarray.array.storage.annlite.getsetdel)": [[61, "docarray.array.storage.annlite.getsetdel.GetSetDelMixin"]], "docarray.array.storage.annlite.getsetdel": [[61, "module-docarray.array.storage.annlite.getsetdel"]], "offsetmapping (class in docarray.array.storage.annlite.helper)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping"]], "clear() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.clear"]], "close() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.close"]], "commit() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.commit"]], "create_table() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.create_table"]], "del_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.del_at_offset"]], "del_at_offsets() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.del_at_offsets"]], "docarray.array.storage.annlite.helper": [[62, "module-docarray.array.storage.annlite.helper"]], "drop() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.drop"]], "drop_table() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.drop_table"]], "dump() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.dump"]], "execute() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.execute"]], "execute_many() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.execute_many"]], "extend_doc_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.extend_doc_ids"]], "get_all_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.get_all_ids"]], "get_id_by_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.get_id_by_offset"]], "get_ids_by_offsets() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.get_ids_by_offsets"]], "get_offset_by_id() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.get_offset_by_id"]], "get_offsets_by_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.get_offsets_by_ids"]], "insert_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.insert_at_offset"]], "load() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.load"]], "name (docarray.array.storage.annlite.helper.offsetmapping property)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.name"]], "schema (docarray.array.storage.annlite.helper.offsetmapping property)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.schema"]], "set_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.set_at_offset"]], "shift_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.shift_offset"]], "size (docarray.array.storage.annlite.helper.offsetmapping property)": [[62, "docarray.array.storage.annlite.helper.OffsetMapping.size"]], "sequencelikemixin (class in docarray.array.storage.annlite.seqlike)": [[63, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[63, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[63, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[63, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.annlite.seqlike": [[63, "module-docarray.array.storage.annlite.seqlike"]], "extend() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[63, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[63, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[63, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[63, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[63, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[63, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.reverse"]], "docarray.array.storage.base": [[64, "module-docarray.array.storage.base"]], "basebackendmixin (class in docarray.array.storage.base.backend)": [[65, "docarray.array.storage.base.backend.BaseBackendMixin"]], "type_map (docarray.array.storage.base.backend.basebackendmixin attribute)": [[65, "docarray.array.storage.base.backend.BaseBackendMixin.TYPE_MAP"]], "typemap (class in docarray.array.storage.base.backend)": [[65, "docarray.array.storage.base.backend.TypeMap"]], "converter (docarray.array.storage.base.backend.typemap property)": [[65, "docarray.array.storage.base.backend.TypeMap.converter"]], "count() (docarray.array.storage.base.backend.typemap method)": [[65, "docarray.array.storage.base.backend.TypeMap.count"]], "docarray.array.storage.base.backend": [[65, "module-docarray.array.storage.base.backend"]], "index() (docarray.array.storage.base.backend.typemap method)": [[65, "docarray.array.storage.base.backend.TypeMap.index"]], "type (docarray.array.storage.base.backend.typemap property)": [[65, "docarray.array.storage.base.backend.TypeMap.type"]], "basegetsetdelmixin (class in docarray.array.storage.base.getsetdel)": [[66, "docarray.array.storage.base.getsetdel.BaseGetSetDelMixin"]], "docarray.array.storage.base.getsetdel": [[66, "module-docarray.array.storage.base.getsetdel"]], "offset2id (class in docarray.array.storage.base.helper)": [[67, "docarray.array.storage.base.helper.Offset2ID"]], "append() (docarray.array.storage.base.helper.offset2id method)": [[67, "docarray.array.storage.base.helper.Offset2ID.append"]], "clear() (docarray.array.storage.base.helper.offset2id method)": [[67, "docarray.array.storage.base.helper.Offset2ID.clear"]], "delete_by_id() (docarray.array.storage.base.helper.offset2id method)": [[67, "docarray.array.storage.base.helper.Offset2ID.delete_by_id"]], "delete_by_ids() (docarray.array.storage.base.helper.offset2id method)": [[67, "docarray.array.storage.base.helper.Offset2ID.delete_by_ids"]], "delete_by_offset() (docarray.array.storage.base.helper.offset2id method)": [[67, "docarray.array.storage.base.helper.Offset2ID.delete_by_offset"]], "docarray.array.storage.base.helper": [[67, "module-docarray.array.storage.base.helper"]], "extend() (docarray.array.storage.base.helper.offset2id method)": [[67, "docarray.array.storage.base.helper.Offset2ID.extend"]], "get_id() (docarray.array.storage.base.helper.offset2id method)": [[67, "docarray.array.storage.base.helper.Offset2ID.get_id"]], "index() (docarray.array.storage.base.helper.offset2id method)": [[67, "docarray.array.storage.base.helper.Offset2ID.index"]], "insert() (docarray.array.storage.base.helper.offset2id method)": [[67, "docarray.array.storage.base.helper.Offset2ID.insert"]], "load() (docarray.array.storage.base.helper.offset2id method)": [[67, "docarray.array.storage.base.helper.Offset2ID.load"]], "save() (docarray.array.storage.base.helper.offset2id method)": [[67, "docarray.array.storage.base.helper.Offset2ID.save"]], "update() (docarray.array.storage.base.helper.offset2id method)": [[67, "docarray.array.storage.base.helper.Offset2ID.update"]], "update_ids() (docarray.array.storage.base.helper.offset2id method)": [[67, "docarray.array.storage.base.helper.Offset2ID.update_ids"]], "basesequencelikemixin (class in docarray.array.storage.base.seqlike)": [[68, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin"]], "append() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[68, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.append"]], "clear() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[68, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.clear"]], "count() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[68, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.count"]], "docarray.array.storage.base.seqlike": [[68, "module-docarray.array.storage.base.seqlike"]], "extend() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[68, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.extend"]], "index() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[68, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.index"]], "insert() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[68, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.insert"]], "pop() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[68, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.pop"]], "remove() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[68, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[68, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.reverse"]], "elasticconfig (class in docarray.array.storage.elastic)": [[69, "docarray.array.storage.elastic.ElasticConfig"]], "storagemixins (class in docarray.array.storage.elastic)": [[69, "docarray.array.storage.elastic.StorageMixins"]], "type_map (docarray.array.storage.elastic.storagemixins attribute)": [[69, "docarray.array.storage.elastic.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.elastic.storagemixins method)": [[69, "docarray.array.storage.elastic.StorageMixins.append"]], "batch_size (docarray.array.storage.elastic.elasticconfig attribute)": [[69, "docarray.array.storage.elastic.ElasticConfig.batch_size"]], "clear() (docarray.array.storage.elastic.storagemixins method)": [[69, "docarray.array.storage.elastic.StorageMixins.clear"]], "columns (docarray.array.storage.elastic.elasticconfig attribute)": [[69, "docarray.array.storage.elastic.ElasticConfig.columns"]], "count() (docarray.array.storage.elastic.storagemixins method)": [[69, "docarray.array.storage.elastic.StorageMixins.count"]], "distance (docarray.array.storage.elastic.elasticconfig attribute)": [[69, "docarray.array.storage.elastic.ElasticConfig.distance"]], "docarray.array.storage.elastic": [[69, "module-docarray.array.storage.elastic"]], "ef_construction (docarray.array.storage.elastic.elasticconfig attribute)": [[69, "docarray.array.storage.elastic.ElasticConfig.ef_construction"]], "es_config (docarray.array.storage.elastic.elasticconfig attribute)": [[69, "docarray.array.storage.elastic.ElasticConfig.es_config"]], "extend() (docarray.array.storage.elastic.storagemixins method)": [[69, "docarray.array.storage.elastic.StorageMixins.extend"]], "find() (docarray.array.storage.elastic.storagemixins method)": [[69, "docarray.array.storage.elastic.StorageMixins.find"]], "hosts (docarray.array.storage.elastic.elasticconfig attribute)": [[69, "docarray.array.storage.elastic.ElasticConfig.hosts"]], "index() (docarray.array.storage.elastic.storagemixins method)": [[69, "docarray.array.storage.elastic.StorageMixins.index"]], "index_name (docarray.array.storage.elastic.elasticconfig attribute)": [[69, "docarray.array.storage.elastic.ElasticConfig.index_name"]], "index_text (docarray.array.storage.elastic.elasticconfig attribute)": [[69, "docarray.array.storage.elastic.ElasticConfig.index_text"]], "insert() (docarray.array.storage.elastic.storagemixins method)": [[69, "docarray.array.storage.elastic.StorageMixins.insert"]], "m (docarray.array.storage.elastic.elasticconfig attribute)": [[69, "docarray.array.storage.elastic.ElasticConfig.m"]], "n_dim (docarray.array.storage.elastic.elasticconfig attribute)": [[69, "docarray.array.storage.elastic.ElasticConfig.n_dim"]], "pop() (docarray.array.storage.elastic.storagemixins method)": [[69, "docarray.array.storage.elastic.StorageMixins.pop"]], "remove() (docarray.array.storage.elastic.storagemixins method)": [[69, "docarray.array.storage.elastic.StorageMixins.remove"]], "reverse() (docarray.array.storage.elastic.storagemixins method)": [[69, "docarray.array.storage.elastic.StorageMixins.reverse"]], "tag_indices (docarray.array.storage.elastic.elasticconfig attribute)": [[69, "docarray.array.storage.elastic.ElasticConfig.tag_indices"]], "backendmixin (class in docarray.array.storage.elastic.backend)": [[70, "docarray.array.storage.elastic.backend.BackendMixin"]], "elasticconfig (class in docarray.array.storage.elastic.backend)": [[70, "docarray.array.storage.elastic.backend.ElasticConfig"]], "type_map (docarray.array.storage.elastic.backend.backendmixin attribute)": [[70, "docarray.array.storage.elastic.backend.BackendMixin.TYPE_MAP"]], "batch_size (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.backend.ElasticConfig.batch_size"]], "columns (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.backend.ElasticConfig.columns"]], "distance (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.backend.ElasticConfig.distance"]], "docarray.array.storage.elastic.backend": [[70, "module-docarray.array.storage.elastic.backend"]], "ef_construction (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.backend.ElasticConfig.ef_construction"]], "es_config (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.backend.ElasticConfig.es_config"]], "hosts (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.backend.ElasticConfig.hosts"]], "index_name (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.backend.ElasticConfig.index_name"]], "index_text (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.backend.ElasticConfig.index_text"]], "m (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.backend.ElasticConfig.m"]], "n_dim (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.backend.ElasticConfig.n_dim"]], "tag_indices (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.backend.ElasticConfig.tag_indices"]], "findmixin (class in docarray.array.storage.elastic.find)": [[71, "docarray.array.storage.elastic.find.FindMixin"]], "docarray.array.storage.elastic.find": [[71, "module-docarray.array.storage.elastic.find"]], "find() (docarray.array.storage.elastic.find.findmixin method)": [[71, "docarray.array.storage.elastic.find.FindMixin.find"]], "getsetdelmixin (class in docarray.array.storage.elastic.getsetdel)": [[72, "docarray.array.storage.elastic.getsetdel.GetSetDelMixin"]], "docarray.array.storage.elastic.getsetdel": [[72, "module-docarray.array.storage.elastic.getsetdel"]], "sequencelikemixin (class in docarray.array.storage.elastic.seqlike)": [[73, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[73, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[73, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[73, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.elastic.seqlike": [[73, "module-docarray.array.storage.elastic.seqlike"]], "extend() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[73, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[73, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[73, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[73, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[73, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[73, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.reverse"]], "storagemixins (class in docarray.array.storage.memory)": [[74, "docarray.array.storage.memory.StorageMixins"]], "type_map (docarray.array.storage.memory.storagemixins attribute)": [[74, "docarray.array.storage.memory.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.memory.storagemixins method)": [[74, "docarray.array.storage.memory.StorageMixins.append"]], "clear() (docarray.array.storage.memory.storagemixins method)": [[74, "docarray.array.storage.memory.StorageMixins.clear"]], "count() (docarray.array.storage.memory.storagemixins method)": [[74, "docarray.array.storage.memory.StorageMixins.count"]], "docarray.array.storage.memory": [[74, "module-docarray.array.storage.memory"]], "extend() (docarray.array.storage.memory.storagemixins method)": [[74, "docarray.array.storage.memory.StorageMixins.extend"]], "index() (docarray.array.storage.memory.storagemixins method)": [[74, "docarray.array.storage.memory.StorageMixins.index"]], "insert() (docarray.array.storage.memory.storagemixins method)": [[74, "docarray.array.storage.memory.StorageMixins.insert"]], "pop() (docarray.array.storage.memory.storagemixins method)": [[74, "docarray.array.storage.memory.StorageMixins.pop"]], "remove() (docarray.array.storage.memory.storagemixins method)": [[74, "docarray.array.storage.memory.StorageMixins.remove"]], "reverse() (docarray.array.storage.memory.storagemixins method)": [[74, "docarray.array.storage.memory.StorageMixins.reverse"]], "backendmixin (class in docarray.array.storage.memory.backend)": [[75, "docarray.array.storage.memory.backend.BackendMixin"]], "type_map (docarray.array.storage.memory.backend.backendmixin attribute)": [[75, "docarray.array.storage.memory.backend.BackendMixin.TYPE_MAP"]], "docarray.array.storage.memory.backend": [[75, "module-docarray.array.storage.memory.backend"]], "needs_id2offset_rebuild() (in module docarray.array.storage.memory.backend)": [[75, "docarray.array.storage.memory.backend.needs_id2offset_rebuild"]], "findmixin (class in docarray.array.storage.memory.find)": [[76, "docarray.array.storage.memory.find.FindMixin"]], "docarray.array.storage.memory.find": [[76, "module-docarray.array.storage.memory.find"]], "getsetdelmixin (class in docarray.array.storage.memory.getsetdel)": [[77, "docarray.array.storage.memory.getsetdel.GetSetDelMixin"]], "docarray.array.storage.memory.getsetdel": [[77, "module-docarray.array.storage.memory.getsetdel"]], "sequencelikemixin (class in docarray.array.storage.memory.seqlike)": [[78, "docarray.array.storage.memory.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[78, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[78, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[78, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.memory.seqlike": [[78, "module-docarray.array.storage.memory.seqlike"]], "extend() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[78, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[78, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[78, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[78, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[78, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[78, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.reverse"]], "qdrantconfig (class in docarray.array.storage.qdrant)": [[79, "docarray.array.storage.qdrant.QdrantConfig"]], "storagemixins (class in docarray.array.storage.qdrant)": [[79, "docarray.array.storage.qdrant.StorageMixins"]], "type_map (docarray.array.storage.qdrant.storagemixins attribute)": [[79, "docarray.array.storage.qdrant.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.qdrant.storagemixins method)": [[79, "docarray.array.storage.qdrant.StorageMixins.append"]], "clear() (docarray.array.storage.qdrant.storagemixins method)": [[79, "docarray.array.storage.qdrant.StorageMixins.clear"]], "client (docarray.array.storage.qdrant.storagemixins property)": [[79, "docarray.array.storage.qdrant.StorageMixins.client"]], "collection_name (docarray.array.storage.qdrant.qdrantconfig attribute)": [[79, "docarray.array.storage.qdrant.QdrantConfig.collection_name"]], "collection_name (docarray.array.storage.qdrant.storagemixins property)": [[79, "docarray.array.storage.qdrant.StorageMixins.collection_name"]], "collection_name_meta (docarray.array.storage.qdrant.storagemixins property)": [[79, "docarray.array.storage.qdrant.StorageMixins.collection_name_meta"]], "columns (docarray.array.storage.qdrant.qdrantconfig attribute)": [[79, "docarray.array.storage.qdrant.QdrantConfig.columns"]], "config (docarray.array.storage.qdrant.storagemixins property)": [[79, "docarray.array.storage.qdrant.StorageMixins.config"]], "count() (docarray.array.storage.qdrant.storagemixins method)": [[79, "docarray.array.storage.qdrant.StorageMixins.count"]], "distance (docarray.array.storage.qdrant.qdrantconfig attribute)": [[79, "docarray.array.storage.qdrant.QdrantConfig.distance"]], "distance (docarray.array.storage.qdrant.storagemixins property)": [[79, "docarray.array.storage.qdrant.StorageMixins.distance"]], "docarray.array.storage.qdrant": [[79, "module-docarray.array.storage.qdrant"]], "ef_construct (docarray.array.storage.qdrant.qdrantconfig attribute)": [[79, "docarray.array.storage.qdrant.QdrantConfig.ef_construct"]], "extend() (docarray.array.storage.qdrant.storagemixins method)": [[79, "docarray.array.storage.qdrant.StorageMixins.extend"]], "full_scan_threshold (docarray.array.storage.qdrant.qdrantconfig attribute)": [[79, "docarray.array.storage.qdrant.QdrantConfig.full_scan_threshold"]], "host (docarray.array.storage.qdrant.qdrantconfig attribute)": [[79, "docarray.array.storage.qdrant.QdrantConfig.host"]], "index() (docarray.array.storage.qdrant.storagemixins method)": [[79, "docarray.array.storage.qdrant.StorageMixins.index"]], "insert() (docarray.array.storage.qdrant.storagemixins method)": [[79, "docarray.array.storage.qdrant.StorageMixins.insert"]], "m (docarray.array.storage.qdrant.qdrantconfig attribute)": [[79, "docarray.array.storage.qdrant.QdrantConfig.m"]], "n_dim (docarray.array.storage.qdrant.qdrantconfig attribute)": [[79, "docarray.array.storage.qdrant.QdrantConfig.n_dim"]], "n_dim (docarray.array.storage.qdrant.storagemixins property)": [[79, "docarray.array.storage.qdrant.StorageMixins.n_dim"]], "pop() (docarray.array.storage.qdrant.storagemixins method)": [[79, "docarray.array.storage.qdrant.StorageMixins.pop"]], "port (docarray.array.storage.qdrant.qdrantconfig attribute)": [[79, "docarray.array.storage.qdrant.QdrantConfig.port"]], "remove() (docarray.array.storage.qdrant.storagemixins method)": [[79, "docarray.array.storage.qdrant.StorageMixins.remove"]], "reverse() (docarray.array.storage.qdrant.storagemixins method)": [[79, "docarray.array.storage.qdrant.StorageMixins.reverse"]], "scan() (docarray.array.storage.qdrant.storagemixins method)": [[79, "docarray.array.storage.qdrant.StorageMixins.scan"]], "scroll_batch_size (docarray.array.storage.qdrant.qdrantconfig attribute)": [[79, "docarray.array.storage.qdrant.QdrantConfig.scroll_batch_size"]], "scroll_batch_size (docarray.array.storage.qdrant.storagemixins property)": [[79, "docarray.array.storage.qdrant.StorageMixins.scroll_batch_size"]], "serialization_config (docarray.array.storage.qdrant.storagemixins property)": [[79, "docarray.array.storage.qdrant.StorageMixins.serialization_config"]], "serialize_config (docarray.array.storage.qdrant.qdrantconfig attribute)": [[79, "docarray.array.storage.qdrant.QdrantConfig.serialize_config"]], "serialize_config (docarray.array.storage.qdrant.storagemixins property)": [[79, "docarray.array.storage.qdrant.StorageMixins.serialize_config"]], "backendmixin (class in docarray.array.storage.qdrant.backend)": [[80, "docarray.array.storage.qdrant.backend.BackendMixin"]], "qdrantconfig (class in docarray.array.storage.qdrant.backend)": [[80, "docarray.array.storage.qdrant.backend.QdrantConfig"]], "type_map (docarray.array.storage.qdrant.backend.backendmixin attribute)": [[80, "docarray.array.storage.qdrant.backend.BackendMixin.TYPE_MAP"]], "collection_name (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.backend.QdrantConfig.collection_name"]], "columns (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.backend.QdrantConfig.columns"]], "distance (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.backend.QdrantConfig.distance"]], "docarray.array.storage.qdrant.backend": [[80, "module-docarray.array.storage.qdrant.backend"]], "ef_construct (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.backend.QdrantConfig.ef_construct"]], "full_scan_threshold (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.backend.QdrantConfig.full_scan_threshold"]], "host (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.backend.QdrantConfig.host"]], "m (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.backend.QdrantConfig.m"]], "n_dim (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.backend.QdrantConfig.n_dim"]], "port (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.backend.QdrantConfig.port"]], "scroll_batch_size (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.backend.QdrantConfig.scroll_batch_size"]], "serialize_config (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.backend.QdrantConfig.serialize_config"]], "findmixin (class in docarray.array.storage.qdrant.find)": [[81, "docarray.array.storage.qdrant.find.FindMixin"]], "client (docarray.array.storage.qdrant.find.findmixin property)": [[81, "docarray.array.storage.qdrant.find.FindMixin.client"]], "collection_name (docarray.array.storage.qdrant.find.findmixin property)": [[81, "docarray.array.storage.qdrant.find.FindMixin.collection_name"]], "distance (docarray.array.storage.qdrant.find.findmixin property)": [[81, "docarray.array.storage.qdrant.find.FindMixin.distance"]], "docarray.array.storage.qdrant.find": [[81, "module-docarray.array.storage.qdrant.find"]], "serialize_config (docarray.array.storage.qdrant.find.findmixin property)": [[81, "docarray.array.storage.qdrant.find.FindMixin.serialize_config"]], "getsetdelmixin (class in docarray.array.storage.qdrant.getsetdel)": [[82, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin"]], "client (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[82, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.client"]], "collection_name (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[82, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.collection_name"]], "docarray.array.storage.qdrant.getsetdel": [[82, "module-docarray.array.storage.qdrant.getsetdel"]], "n_dim (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[82, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.n_dim"]], "scan() (docarray.array.storage.qdrant.getsetdel.getsetdelmixin method)": [[82, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.scan"]], "scroll_batch_size (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[82, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.scroll_batch_size"]], "serialization_config (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[82, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.serialization_config"]], "docarray.array.storage.qdrant.helper": [[83, "module-docarray.array.storage.qdrant.helper"]], "sequencelikemixin (class in docarray.array.storage.qdrant.seqlike)": [[84, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.clear"]], "client (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[84, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.client"]], "collection_name (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[84, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.collection_name"]], "config (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[84, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.config"]], "count() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.qdrant.seqlike": [[84, "module-docarray.array.storage.qdrant.seqlike"]], "extend() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.reverse"]], "docarray.array.storage.registry": [[85, "module-docarray.array.storage.registry"]], "sqliteconfig (class in docarray.array.storage.sqlite)": [[86, "docarray.array.storage.sqlite.SqliteConfig"]], "storagemixins (class in docarray.array.storage.sqlite)": [[86, "docarray.array.storage.sqlite.StorageMixins"]], "type_map (docarray.array.storage.sqlite.storagemixins attribute)": [[86, "docarray.array.storage.sqlite.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.sqlite.storagemixins method)": [[86, "docarray.array.storage.sqlite.StorageMixins.append"]], "clear() (docarray.array.storage.sqlite.storagemixins method)": [[86, "docarray.array.storage.sqlite.StorageMixins.clear"]], "conn_config (docarray.array.storage.sqlite.sqliteconfig attribute)": [[86, "docarray.array.storage.sqlite.SqliteConfig.conn_config"]], "connection (docarray.array.storage.sqlite.sqliteconfig attribute)": [[86, "docarray.array.storage.sqlite.SqliteConfig.connection"]], "count() (docarray.array.storage.sqlite.storagemixins method)": [[86, "docarray.array.storage.sqlite.StorageMixins.count"]], "docarray.array.storage.sqlite": [[86, "module-docarray.array.storage.sqlite"]], "extend() (docarray.array.storage.sqlite.storagemixins method)": [[86, "docarray.array.storage.sqlite.StorageMixins.extend"]], "index() (docarray.array.storage.sqlite.storagemixins method)": [[86, "docarray.array.storage.sqlite.StorageMixins.index"]], "insert() (docarray.array.storage.sqlite.storagemixins method)": [[86, "docarray.array.storage.sqlite.StorageMixins.insert"]], "journal_mode (docarray.array.storage.sqlite.sqliteconfig attribute)": [[86, "docarray.array.storage.sqlite.SqliteConfig.journal_mode"]], "pop() (docarray.array.storage.sqlite.storagemixins method)": [[86, "docarray.array.storage.sqlite.StorageMixins.pop"]], "remove() (docarray.array.storage.sqlite.storagemixins method)": [[86, "docarray.array.storage.sqlite.StorageMixins.remove"]], "reverse() (docarray.array.storage.sqlite.storagemixins method)": [[86, "docarray.array.storage.sqlite.StorageMixins.reverse"]], "schema_version (docarray.array.storage.sqlite.storagemixins attribute)": [[86, "docarray.array.storage.sqlite.StorageMixins.schema_version"]], "serialize_config (docarray.array.storage.sqlite.sqliteconfig attribute)": [[86, "docarray.array.storage.sqlite.SqliteConfig.serialize_config"]], "synchronous (docarray.array.storage.sqlite.sqliteconfig attribute)": [[86, "docarray.array.storage.sqlite.SqliteConfig.synchronous"]], "table_name (docarray.array.storage.sqlite.sqliteconfig attribute)": [[86, "docarray.array.storage.sqlite.SqliteConfig.table_name"]], "backendmixin (class in docarray.array.storage.sqlite.backend)": [[87, "docarray.array.storage.sqlite.backend.BackendMixin"]], "sqliteconfig (class in docarray.array.storage.sqlite.backend)": [[87, "docarray.array.storage.sqlite.backend.SqliteConfig"]], "type_map (docarray.array.storage.sqlite.backend.backendmixin attribute)": [[87, "docarray.array.storage.sqlite.backend.BackendMixin.TYPE_MAP"]], "conn_config (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[87, "docarray.array.storage.sqlite.backend.SqliteConfig.conn_config"]], "connection (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[87, "docarray.array.storage.sqlite.backend.SqliteConfig.connection"]], "docarray.array.storage.sqlite.backend": [[87, "module-docarray.array.storage.sqlite.backend"]], "journal_mode (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[87, "docarray.array.storage.sqlite.backend.SqliteConfig.journal_mode"]], "schema_version (docarray.array.storage.sqlite.backend.backendmixin attribute)": [[87, "docarray.array.storage.sqlite.backend.BackendMixin.schema_version"]], "serialize_config (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[87, "docarray.array.storage.sqlite.backend.SqliteConfig.serialize_config"]], "synchronous (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[87, "docarray.array.storage.sqlite.backend.SqliteConfig.synchronous"]], "table_name (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[87, "docarray.array.storage.sqlite.backend.SqliteConfig.table_name"]], "getsetdelmixin (class in docarray.array.storage.sqlite.getsetdel)": [[88, "docarray.array.storage.sqlite.getsetdel.GetSetDelMixin"]], "docarray.array.storage.sqlite.getsetdel": [[88, "module-docarray.array.storage.sqlite.getsetdel"]], "docarray.array.storage.sqlite.helper": [[89, "module-docarray.array.storage.sqlite.helper"]], "initialize_table() (in module docarray.array.storage.sqlite.helper)": [[89, "docarray.array.storage.sqlite.helper.initialize_table"]], "sequencelikemixin (class in docarray.array.storage.sqlite.seqlike)": [[90, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[90, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[90, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[90, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.sqlite.seqlike": [[90, "module-docarray.array.storage.sqlite.seqlike"]], "extend() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[90, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[90, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[90, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[90, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[90, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[90, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.reverse"]], "storagemixins (class in docarray.array.storage.weaviate)": [[91, "docarray.array.storage.weaviate.StorageMixins"]], "type_map (docarray.array.storage.weaviate.storagemixins attribute)": [[91, "docarray.array.storage.weaviate.StorageMixins.TYPE_MAP"]], "weaviateconfig (class in docarray.array.storage.weaviate)": [[91, "docarray.array.storage.weaviate.WeaviateConfig"]], "append() (docarray.array.storage.weaviate.storagemixins method)": [[91, "docarray.array.storage.weaviate.StorageMixins.append"]], "cleanup_interval_seconds (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.cleanup_interval_seconds"]], "clear() (docarray.array.storage.weaviate.storagemixins method)": [[91, "docarray.array.storage.weaviate.StorageMixins.clear"]], "columns (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.columns"]], "count() (docarray.array.storage.weaviate.storagemixins method)": [[91, "docarray.array.storage.weaviate.StorageMixins.count"]], "distance (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.distance"]], "docarray.array.storage.weaviate": [[91, "module-docarray.array.storage.weaviate"]], "dynamic_ef_factor (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.ef"]], "ef_construction (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.ef_construction"]], "extend() (docarray.array.storage.weaviate.storagemixins method)": [[91, "docarray.array.storage.weaviate.StorageMixins.extend"]], "flat_search_cutoff (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.flat_search_cutoff"]], "host (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.host"]], "index() (docarray.array.storage.weaviate.storagemixins method)": [[91, "docarray.array.storage.weaviate.StorageMixins.index"]], "insert() (docarray.array.storage.weaviate.storagemixins method)": [[91, "docarray.array.storage.weaviate.StorageMixins.insert"]], "max_connections (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.max_connections"]], "n_dim (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.n_dim"]], "name (docarray.array.storage.weaviate.storagemixins property)": [[91, "docarray.array.storage.weaviate.StorageMixins.name"]], "name (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.name"]], "pop() (docarray.array.storage.weaviate.storagemixins method)": [[91, "docarray.array.storage.weaviate.StorageMixins.pop"]], "port (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.port"]], "protocol (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.protocol"]], "remove() (docarray.array.storage.weaviate.storagemixins method)": [[91, "docarray.array.storage.weaviate.StorageMixins.remove"]], "reverse() (docarray.array.storage.weaviate.storagemixins method)": [[91, "docarray.array.storage.weaviate.StorageMixins.reverse"]], "serialize_config (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.serialize_config"]], "skip (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.skip"]], "timeout_config (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.timeout_config"]], "vector_cache_max_objects (docarray.array.storage.weaviate.weaviateconfig attribute)": [[91, "docarray.array.storage.weaviate.WeaviateConfig.vector_cache_max_objects"]], "backendmixin (class in docarray.array.storage.weaviate.backend)": [[92, "docarray.array.storage.weaviate.backend.BackendMixin"]], "type_map (docarray.array.storage.weaviate.backend.backendmixin attribute)": [[92, "docarray.array.storage.weaviate.backend.BackendMixin.TYPE_MAP"]], "weaviateconfig (class in docarray.array.storage.weaviate.backend)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig"]], "cleanup_interval_seconds (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.cleanup_interval_seconds"]], "columns (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.columns"]], "distance (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.distance"]], "docarray.array.storage.weaviate.backend": [[92, "module-docarray.array.storage.weaviate.backend"]], "dynamic_ef_factor (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.ef"]], "ef_construction (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.ef_construction"]], "flat_search_cutoff (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.flat_search_cutoff"]], "host (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.host"]], "max_connections (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.max_connections"]], "n_dim (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.n_dim"]], "name (docarray.array.storage.weaviate.backend.backendmixin property)": [[92, "docarray.array.storage.weaviate.backend.BackendMixin.name"]], "name (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.name"]], "port (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.port"]], "protocol (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.protocol"]], "serialize_config (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.serialize_config"]], "skip (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.skip"]], "timeout_config (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.timeout_config"]], "vector_cache_max_objects (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.backend.WeaviateConfig.vector_cache_max_objects"]], "findmixin (class in docarray.array.storage.weaviate.find)": [[93, "docarray.array.storage.weaviate.find.FindMixin"]], "docarray.array.storage.weaviate.find": [[93, "module-docarray.array.storage.weaviate.find"]], "getsetdelmixin (class in docarray.array.storage.weaviate.getsetdel)": [[94, "docarray.array.storage.weaviate.getsetdel.GetSetDelMixin"]], "docarray.array.storage.weaviate.getsetdel": [[94, "module-docarray.array.storage.weaviate.getsetdel"]], "sequencelikemixin (class in docarray.array.storage.weaviate.seqlike)": [[95, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[95, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[95, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[95, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.weaviate.seqlike": [[95, "module-docarray.array.storage.weaviate.seqlike"]], "extend() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[95, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[95, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[95, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[95, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[95, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[95, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.reverse"]], "documentarrayweaviate (class in docarray.array.weaviate)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate"]], "type_map (docarray.array.weaviate.documentarrayweaviate attribute)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.TYPE_MAP"]], "weaviateconfig (class in docarray.array.weaviate)": [[96, "docarray.array.weaviate.WeaviateConfig"]], "append() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.append"]], "apply() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.apply"]], "apply_batch() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.apply_batch"]], "batch() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.batch"]], "batch_ids() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.batch_ids"]], "blobs (docarray.array.weaviate.documentarrayweaviate property)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.blobs"]], "cleanup_interval_seconds (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.cleanup_interval_seconds"]], "clear() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.clear"]], "columns (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.columns"]], "contents (docarray.array.weaviate.documentarrayweaviate property)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.contents"]], "count() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.count"]], "dataloader() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.dataloader"]], "distance (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.distance"]], "docarray.array.weaviate": [[96, "module-docarray.array.weaviate"]], "dynamic_ef_factor (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.ef"]], "ef_construction (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.ef_construction"]], "embed() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.embed"]], "embeddings (docarray.array.weaviate.documentarrayweaviate property)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.embeddings"]], "empty() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.empty"]], "evaluate() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.evaluate"]], "extend() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.extend"]], "find() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.find"]], "flat_search_cutoff (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.flat_search_cutoff"]], "flatten() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.flatten"]], "from_base64() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.from_base64"]], "from_bytes() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.from_bytes"]], "from_csv() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.from_csv"]], "from_dataframe() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.from_dataframe"]], "from_dict() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.from_dict"]], "from_files() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.from_files"]], "from_huggingface_datasets() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.from_huggingface_datasets"]], "from_json() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.from_json"]], "from_lines() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.from_lines"]], "from_list() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.from_list"]], "from_ndarray() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.from_ndarray"]], "from_ndjson() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.from_ndjson"]], "from_protobuf() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.from_protobuf"]], "from_pydantic_model() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.from_pydantic_model"]], "from_strawberry_type() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.from_strawberry_type"]], "get_json_schema() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.get_json_schema"]], "get_vocabulary() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.get_vocabulary"]], "host (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.host"]], "index() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.index"]], "insert() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.insert"]], "load() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.load"]], "load_binary() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.load_binary"]], "load_csv() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.load_csv"]], "load_json() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.load_json"]], "map() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.map"]], "map_batch() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.map_batch"]], "match() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.match"]], "max_connections (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.max_connections"]], "n_dim (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.n_dim"]], "name (docarray.array.weaviate.documentarrayweaviate property)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.name"]], "name (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.name"]], "plot_embeddings() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.plot_embeddings"]], "plot_image_sprites() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.plot_image_sprites"]], "pop() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.pop"]], "port (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.port"]], "post() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.post"]], "protocol (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.protocol"]], "pull() (docarray.array.weaviate.documentarrayweaviate class method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.pull"]], "push() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.push"]], "reduce() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.reduce"]], "reduce_all() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.reduce_all"]], "remove() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.remove"]], "reverse() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.reverse"]], "sample() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.sample"]], "save() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.save"]], "save_binary() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.save_binary"]], "save_csv() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.save_csv"]], "save_embeddings_csv() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.save_embeddings_csv"]], "save_gif() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.save_gif"]], "save_json() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.save_json"]], "serialize_config (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.serialize_config"]], "shuffle() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.shuffle"]], "skip (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.skip"]], "split_by_tag() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.split_by_tag"]], "summary() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.summary"]], "tensors (docarray.array.weaviate.documentarrayweaviate property)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.tensors"]], "texts (docarray.array.weaviate.documentarrayweaviate property)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.texts"]], "timeout_config (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.timeout_config"]], "to_base64() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.to_base64"]], "to_bytes() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.to_bytes"]], "to_dataframe() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.to_dataframe"]], "to_dict() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.to_dict"]], "to_json() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.to_json"]], "to_list() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.to_list"]], "to_protobuf() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.to_protobuf"]], "to_pydantic_model() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.to_pydantic_model"]], "to_strawberry_type() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.to_strawberry_type"]], "traverse() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.traverse"]], "traverse_flat() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.traverse_flat"]], "traverse_flat_per_path() (docarray.array.weaviate.documentarrayweaviate method)": [[96, "docarray.array.weaviate.DocumentArrayWeaviate.traverse_flat_per_path"]], "vector_cache_max_objects (docarray.array.weaviate.weaviateconfig attribute)": [[96, "docarray.array.weaviate.WeaviateConfig.vector_cache_max_objects"]], "basedctype (class in docarray.base)": [[97, "docarray.base.BaseDCType"]], "clear() (docarray.base.basedctype method)": [[97, "docarray.base.BaseDCType.clear"]], "copy_from() (docarray.base.basedctype method)": [[97, "docarray.base.BaseDCType.copy_from"]], "docarray.base": [[97, "module-docarray.base"]], "nbytes (docarray.base.basedctype property)": [[97, "docarray.base.BaseDCType.nbytes"]], "non_empty_fields (docarray.base.basedctype property)": [[97, "docarray.base.BaseDCType.non_empty_fields"]], "pop() (docarray.base.basedctype method)": [[97, "docarray.base.BaseDCType.pop"]], "docarray.dataclasses": [[98, "module-docarray.dataclasses"]], "audio_getter() (in module docarray.dataclasses.getter)": [[99, "docarray.dataclasses.getter.audio_getter"]], "blob_getter() (in module docarray.dataclasses.getter)": [[99, "docarray.dataclasses.getter.blob_getter"]], "docarray.dataclasses.getter": [[99, "module-docarray.dataclasses.getter"]], "image_getter() (in module docarray.dataclasses.getter)": [[99, "docarray.dataclasses.getter.image_getter"]], "json_getter() (in module docarray.dataclasses.getter)": [[99, "docarray.dataclasses.getter.json_getter"]], "mesh_getter() (in module docarray.dataclasses.getter)": [[99, "docarray.dataclasses.getter.mesh_getter"]], "tabular_getter() (in module docarray.dataclasses.getter)": [[99, "docarray.dataclasses.getter.tabular_getter"]], "text_getter() (in module docarray.dataclasses.getter)": [[99, "docarray.dataclasses.getter.text_getter"]], "video_getter() (in module docarray.dataclasses.getter)": [[99, "docarray.dataclasses.getter.video_getter"]], "audio_setter() (in module docarray.dataclasses.setter)": [[100, "docarray.dataclasses.setter.audio_setter"]], "blob_setter() (in module docarray.dataclasses.setter)": [[100, "docarray.dataclasses.setter.blob_setter"]], "docarray.dataclasses.setter": [[100, "module-docarray.dataclasses.setter"]], "image_setter() (in module docarray.dataclasses.setter)": [[100, "docarray.dataclasses.setter.image_setter"]], "json_setter() (in module docarray.dataclasses.setter)": [[100, "docarray.dataclasses.setter.json_setter"]], "mesh_setter() (in module docarray.dataclasses.setter)": [[100, "docarray.dataclasses.setter.mesh_setter"]], "tabular_setter() (in module docarray.dataclasses.setter)": [[100, "docarray.dataclasses.setter.tabular_setter"]], "text_setter() (in module docarray.dataclasses.setter)": [[100, "docarray.dataclasses.setter.text_setter"]], "video_setter() (in module docarray.dataclasses.setter)": [[100, "docarray.dataclasses.setter.video_setter"]], "dataclass() (in module docarray.dataclasses.types)": [[101, "docarray.dataclasses.types.dataclass"]], "docarray.dataclasses.types": [[101, "module-docarray.dataclasses.types"]], "field() (in module docarray.dataclasses.types)": [[101, "docarray.dataclasses.types.field"]], "is_multimodal() (in module docarray.dataclasses.types)": [[101, "docarray.dataclasses.types.is_multimodal"]], "document (class in docarray.document)": [[102, "docarray.document.Document"]], "adjacency (docarray.document.document property)": [[102, "docarray.document.Document.adjacency"]], "blob (docarray.document.document property)": [[102, "docarray.document.Document.blob"]], "chunks (docarray.document.document property)": [[102, "docarray.document.Document.chunks"]], "clear() (docarray.document.document method)": [[102, "docarray.document.Document.clear"]], "content (docarray.document.document property)": [[102, "docarray.document.Document.content"]], "content_hash (docarray.document.document property)": [[102, "docarray.document.Document.content_hash"]], "content_type (docarray.document.document property)": [[102, "docarray.document.Document.content_type"]], "convert_blob_to_datauri() (docarray.document.document method)": [[102, "docarray.document.Document.convert_blob_to_datauri"]], "convert_blob_to_image_tensor() (docarray.document.document method)": [[102, "docarray.document.Document.convert_blob_to_image_tensor"]], "convert_blob_to_tensor() (docarray.document.document method)": [[102, "docarray.document.Document.convert_blob_to_tensor"]], "convert_content_to_datauri() (docarray.document.document method)": [[102, "docarray.document.Document.convert_content_to_datauri"]], "convert_image_tensor_to_blob() (docarray.document.document method)": [[102, "docarray.document.Document.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.document method)": [[102, "docarray.document.Document.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.document method)": [[102, "docarray.document.Document.convert_image_tensor_to_uri"]], "convert_tensor_to_blob() (docarray.document.document method)": [[102, "docarray.document.Document.convert_tensor_to_blob"]], "convert_tensor_to_text() (docarray.document.document method)": [[102, "docarray.document.Document.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.document method)": [[102, "docarray.document.Document.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.document method)": [[102, "docarray.document.Document.convert_text_to_tensor"]], "convert_uri_to_datauri() (docarray.document.document method)": [[102, "docarray.document.Document.convert_uri_to_datauri"]], "copy_from() (docarray.document.document method)": [[102, "docarray.document.Document.copy_from"]], "display() (docarray.document.document method)": [[102, "docarray.document.Document.display"]], "docarray.document": [[102, "module-docarray.document"]], "embed() (docarray.document.document method)": [[102, "docarray.document.Document.embed"]], "embed_feature_hashing() (docarray.document.document method)": [[102, "docarray.document.Document.embed_feature_hashing"]], "embedding (docarray.document.document property)": [[102, "docarray.document.Document.embedding"]], "evaluations (docarray.document.document property)": [[102, "docarray.document.Document.evaluations"]], "from_base64() (docarray.document.document class method)": [[102, "docarray.document.Document.from_base64"]], "from_bytes() (docarray.document.document class method)": [[102, "docarray.document.Document.from_bytes"]], "from_dict() (docarray.document.document class method)": [[102, "docarray.document.Document.from_dict"]], "from_json() (docarray.document.document class method)": [[102, "docarray.document.Document.from_json"]], "from_protobuf() (docarray.document.document class method)": [[102, "docarray.document.Document.from_protobuf"]], "from_pydantic_model() (docarray.document.document class method)": [[102, "docarray.document.Document.from_pydantic_model"]], "from_strawberry_type() (docarray.document.document class method)": [[102, "docarray.document.Document.from_strawberry_type"]], "get_json_schema() (docarray.document.document class method)": [[102, "docarray.document.Document.get_json_schema"]], "get_multi_modal_attribute() (docarray.document.document method)": [[102, "docarray.document.Document.get_multi_modal_attribute"]], "get_vocabulary() (docarray.document.document method)": [[102, "docarray.document.Document.get_vocabulary"]], "granularity (docarray.document.document property)": [[102, "docarray.document.Document.granularity"]], "id (docarray.document.document property)": [[102, "docarray.document.Document.id"]], "is_multimodal (docarray.document.document property)": [[102, "docarray.document.Document.is_multimodal"]], "load_pil_image_to_datauri() (docarray.document.document method)": [[102, "docarray.document.Document.load_pil_image_to_datauri"]], "load_uri_to_audio_tensor() (docarray.document.document method)": [[102, "docarray.document.Document.load_uri_to_audio_tensor"]], "load_uri_to_blob() (docarray.document.document method)": [[102, "docarray.document.Document.load_uri_to_blob"]], "load_uri_to_image_tensor() (docarray.document.document method)": [[102, "docarray.document.Document.load_uri_to_image_tensor"]], "load_uri_to_point_cloud_tensor() (docarray.document.document method)": [[102, "docarray.document.Document.load_uri_to_point_cloud_tensor"]], "load_uri_to_text() (docarray.document.document method)": [[102, "docarray.document.Document.load_uri_to_text"]], "load_uri_to_video_tensor() (docarray.document.document method)": [[102, "docarray.document.Document.load_uri_to_video_tensor"]], "location (docarray.document.document property)": [[102, "docarray.document.Document.location"]], "match() (docarray.document.document method)": [[102, "docarray.document.Document.match"]], "matches (docarray.document.document property)": [[102, "docarray.document.Document.matches"]], "mime_type (docarray.document.document property)": [[102, "docarray.document.Document.mime_type"]], "modality (docarray.document.document property)": [[102, "docarray.document.Document.modality"]], "nbytes (docarray.document.document property)": [[102, "docarray.document.Document.nbytes"]], "non_empty_fields (docarray.document.document property)": [[102, "docarray.document.Document.non_empty_fields"]], "offset (docarray.document.document property)": [[102, "docarray.document.Document.offset"]], "parent_id (docarray.document.document property)": [[102, "docarray.document.Document.parent_id"]], "plot_matches_sprites() (docarray.document.document method)": [[102, "docarray.document.Document.plot_matches_sprites"]], "pop() (docarray.document.document method)": [[102, "docarray.document.Document.pop"]], "post() (docarray.document.document method)": [[102, "docarray.document.Document.post"]], "save_audio_tensor_to_file() (docarray.document.document method)": [[102, "docarray.document.Document.save_audio_tensor_to_file"]], "save_blob_to_file() (docarray.document.document method)": [[102, "docarray.document.Document.save_blob_to_file"]], "save_image_tensor_to_file() (docarray.document.document method)": [[102, "docarray.document.Document.save_image_tensor_to_file"]], "save_uri_to_file() (docarray.document.document method)": [[102, "docarray.document.Document.save_uri_to_file"]], "save_video_tensor_to_file() (docarray.document.document method)": [[102, "docarray.document.Document.save_video_tensor_to_file"]], "scores (docarray.document.document property)": [[102, "docarray.document.Document.scores"]], "set_image_tensor_channel_axis() (docarray.document.document method)": [[102, "docarray.document.Document.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.document method)": [[102, "docarray.document.Document.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.document method)": [[102, "docarray.document.Document.set_image_tensor_normalization"]], "set_image_tensor_shape() (docarray.document.document method)": [[102, "docarray.document.Document.set_image_tensor_shape"]], "summary() (docarray.document.document method)": [[102, "docarray.document.Document.summary"]], "tags (docarray.document.document property)": [[102, "docarray.document.Document.tags"]], "tensor (docarray.document.document property)": [[102, "docarray.document.Document.tensor"]], "text (docarray.document.document property)": [[102, "docarray.document.Document.text"]], "to_base64() (docarray.document.document method)": [[102, "docarray.document.Document.to_base64"]], "to_bytes() (docarray.document.document method)": [[102, "docarray.document.Document.to_bytes"]], "to_dict() (docarray.document.document method)": [[102, "docarray.document.Document.to_dict"]], "to_json() (docarray.document.document method)": [[102, "docarray.document.Document.to_json"]], "to_protobuf() (docarray.document.document method)": [[102, "docarray.document.Document.to_protobuf"]], "to_pydantic_model() (docarray.document.document method)": [[102, "docarray.document.Document.to_pydantic_model"]], "to_strawberry_type() (docarray.document.document method)": [[102, "docarray.document.Document.to_strawberry_type"]], "uri (docarray.document.document property)": [[102, "docarray.document.Document.uri"]], "weight (docarray.document.document property)": [[102, "docarray.document.Document.weight"]], "documentdata (class in docarray.document.data)": [[103, "docarray.document.data.DocumentData"]], "adjacency (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.adjacency"]], "blob (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.blob"]], "chunks (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.chunks"]], "content (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.content"]], "docarray.document.data": [[103, "module-docarray.document.data"]], "embedding (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.embedding"]], "evaluations (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.evaluations"]], "granularity (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.granularity"]], "id (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.id"]], "location (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.location"]], "matches (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.matches"]], "mime_type (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.mime_type"]], "modality (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.modality"]], "offset (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.offset"]], "parent_id (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.parent_id"]], "scores (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.scores"]], "tags (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.tags"]], "tensor (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.tensor"]], "text (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.text"]], "uri (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.uri"]], "weight (docarray.document.data.documentdata attribute)": [[103, "docarray.document.data.DocumentData.weight"]], "docarray.document.generators": [[104, "module-docarray.document.generators"]], "from_csv() (in module docarray.document.generators)": [[104, "docarray.document.generators.from_csv"]], "from_files() (in module docarray.document.generators)": [[104, "docarray.document.generators.from_files"]], "from_huggingface_datasets() (in module docarray.document.generators)": [[104, "docarray.document.generators.from_huggingface_datasets"]], "from_lines() (in module docarray.document.generators)": [[104, "docarray.document.generators.from_lines"]], "from_ndarray() (in module docarray.document.generators)": [[104, "docarray.document.generators.from_ndarray"]], "from_ndjson() (in module docarray.document.generators)": [[104, "docarray.document.generators.from_ndjson"]], "allmixins (class in docarray.document.mixins)": [[105, "docarray.document.mixins.AllMixins"]], "adjacency (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.adjacency"]], "blob (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.blob"]], "chunks (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.chunks"]], "content (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.content"]], "content_hash (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.content_hash"]], "content_type (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.content_type"]], "convert_blob_to_datauri() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.convert_blob_to_datauri"]], "convert_blob_to_image_tensor() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.convert_blob_to_image_tensor"]], "convert_blob_to_tensor() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.convert_blob_to_tensor"]], "convert_content_to_datauri() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.convert_content_to_datauri"]], "convert_image_tensor_to_blob() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.convert_image_tensor_to_uri"]], "convert_tensor_to_blob() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.convert_tensor_to_blob"]], "convert_tensor_to_text() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.convert_text_to_tensor"]], "convert_uri_to_datauri() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.convert_uri_to_datauri"]], "display() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.display"]], "docarray.document.mixins": [[105, "module-docarray.document.mixins"]], "embed() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.embed"]], "embed_feature_hashing() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.embed_feature_hashing"]], "embedding (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.embedding"]], "evaluations (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.evaluations"]], "from_base64() (docarray.document.mixins.allmixins class method)": [[105, "docarray.document.mixins.AllMixins.from_base64"]], "from_bytes() (docarray.document.mixins.allmixins class method)": [[105, "docarray.document.mixins.AllMixins.from_bytes"]], "from_dict() (docarray.document.mixins.allmixins class method)": [[105, "docarray.document.mixins.AllMixins.from_dict"]], "from_json() (docarray.document.mixins.allmixins class method)": [[105, "docarray.document.mixins.AllMixins.from_json"]], "from_protobuf() (docarray.document.mixins.allmixins class method)": [[105, "docarray.document.mixins.AllMixins.from_protobuf"]], "from_pydantic_model() (docarray.document.mixins.allmixins class method)": [[105, "docarray.document.mixins.AllMixins.from_pydantic_model"]], "from_strawberry_type() (docarray.document.mixins.allmixins class method)": [[105, "docarray.document.mixins.AllMixins.from_strawberry_type"]], "get_json_schema() (docarray.document.mixins.allmixins class method)": [[105, "docarray.document.mixins.AllMixins.get_json_schema"]], "get_multi_modal_attribute() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.get_multi_modal_attribute"]], "get_vocabulary() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.get_vocabulary"]], "granularity (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.granularity"]], "id (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.id"]], "is_multimodal (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.is_multimodal"]], "load_pil_image_to_datauri() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.load_pil_image_to_datauri"]], "load_uri_to_audio_tensor() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.load_uri_to_audio_tensor"]], "load_uri_to_blob() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.load_uri_to_blob"]], "load_uri_to_image_tensor() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.load_uri_to_image_tensor"]], "load_uri_to_point_cloud_tensor() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.load_uri_to_point_cloud_tensor"]], "load_uri_to_text() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.load_uri_to_text"]], "load_uri_to_video_tensor() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.load_uri_to_video_tensor"]], "location (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.location"]], "match() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.match"]], "matches (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.matches"]], "mime_type (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.mime_type"]], "modality (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.modality"]], "offset (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.offset"]], "parent_id (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.parent_id"]], "plot_matches_sprites() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.plot_matches_sprites"]], "post() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.post"]], "save_audio_tensor_to_file() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.save_audio_tensor_to_file"]], "save_blob_to_file() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.save_blob_to_file"]], "save_image_tensor_to_file() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.save_image_tensor_to_file"]], "save_uri_to_file() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.save_uri_to_file"]], "save_video_tensor_to_file() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.save_video_tensor_to_file"]], "scores (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.scores"]], "set_image_tensor_channel_axis() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.set_image_tensor_normalization"]], "set_image_tensor_shape() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.set_image_tensor_shape"]], "summary() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.summary"]], "tags (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.tags"]], "tensor (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.tensor"]], "text (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.text"]], "to_base64() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.to_base64"]], "to_bytes() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.to_bytes"]], "to_dict() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.to_dict"]], "to_json() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.to_json"]], "to_protobuf() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.to_protobuf"]], "to_pydantic_model() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.to_pydantic_model"]], "to_strawberry_type() (docarray.document.mixins.allmixins method)": [[105, "docarray.document.mixins.AllMixins.to_strawberry_type"]], "uri (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.uri"]], "weight (docarray.document.mixins.allmixins property)": [[105, "docarray.document.mixins.AllMixins.weight"]], "getattributesmixin (class in docarray.document.mixins.attribute)": [[106, "docarray.document.mixins.attribute.GetAttributesMixin"]], "docarray.document.mixins.attribute": [[106, "module-docarray.document.mixins.attribute"]], "audiodatamixin (class in docarray.document.mixins.audio)": [[107, "docarray.document.mixins.audio.AudioDataMixin"]], "docarray.document.mixins.audio": [[107, "module-docarray.document.mixins.audio"]], "load_uri_to_audio_tensor() (docarray.document.mixins.audio.audiodatamixin method)": [[107, "docarray.document.mixins.audio.AudioDataMixin.load_uri_to_audio_tensor"]], "save_audio_tensor_to_file() (docarray.document.mixins.audio.audiodatamixin method)": [[107, "docarray.document.mixins.audio.AudioDataMixin.save_audio_tensor_to_file"]], "blobdatamixin (class in docarray.document.mixins.blob)": [[108, "docarray.document.mixins.blob.BlobDataMixin"]], "convert_blob_to_datauri() (docarray.document.mixins.blob.blobdatamixin method)": [[108, "docarray.document.mixins.blob.BlobDataMixin.convert_blob_to_datauri"]], "docarray.document.mixins.blob": [[108, "module-docarray.document.mixins.blob"]], "load_uri_to_blob() (docarray.document.mixins.blob.blobdatamixin method)": [[108, "docarray.document.mixins.blob.BlobDataMixin.load_uri_to_blob"]], "save_blob_to_file() (docarray.document.mixins.blob.blobdatamixin method)": [[108, "docarray.document.mixins.blob.BlobDataMixin.save_blob_to_file"]], "contentpropertymixin (class in docarray.document.mixins.content)": [[109, "docarray.document.mixins.content.ContentPropertyMixin"]], "content_hash (docarray.document.mixins.content.contentpropertymixin property)": [[109, "docarray.document.mixins.content.ContentPropertyMixin.content_hash"]], "convert_content_to_datauri() (docarray.document.mixins.content.contentpropertymixin method)": [[109, "docarray.document.mixins.content.ContentPropertyMixin.convert_content_to_datauri"]], "docarray.document.mixins.content": [[109, "module-docarray.document.mixins.content"]], "convertmixin (class in docarray.document.mixins.convert)": [[110, "docarray.document.mixins.convert.ConvertMixin"]], "convert_blob_to_tensor() (docarray.document.mixins.convert.convertmixin method)": [[110, "docarray.document.mixins.convert.ConvertMixin.convert_blob_to_tensor"]], "convert_tensor_to_blob() (docarray.document.mixins.convert.convertmixin method)": [[110, "docarray.document.mixins.convert.ConvertMixin.convert_tensor_to_blob"]], "convert_uri_to_datauri() (docarray.document.mixins.convert.convertmixin method)": [[110, "docarray.document.mixins.convert.ConvertMixin.convert_uri_to_datauri"]], "docarray.document.mixins.convert": [[110, "module-docarray.document.mixins.convert"]], "urifilemixin (class in docarray.document.mixins.dump)": [[111, "docarray.document.mixins.dump.UriFileMixin"]], "docarray.document.mixins.dump": [[111, "module-docarray.document.mixins.dump"]], "save_uri_to_file() (docarray.document.mixins.dump.urifilemixin method)": [[111, "docarray.document.mixins.dump.UriFileMixin.save_uri_to_file"]], "featurehashmixin (class in docarray.document.mixins.featurehash)": [[112, "docarray.document.mixins.featurehash.FeatureHashMixin"]], "docarray.document.mixins.featurehash": [[112, "module-docarray.document.mixins.featurehash"]], "embed_feature_hashing() (docarray.document.mixins.featurehash.featurehashmixin method)": [[112, "docarray.document.mixins.featurehash.FeatureHashMixin.embed_feature_hashing"]], "docarray.document.mixins.helper": [[113, "module-docarray.document.mixins.helper"]], "imagedatamixin (class in docarray.document.mixins.image)": [[114, "docarray.document.mixins.image.ImageDataMixin"]], "convert_blob_to_image_tensor() (docarray.document.mixins.image.imagedatamixin method)": [[114, "docarray.document.mixins.image.ImageDataMixin.convert_blob_to_image_tensor"]], "convert_image_tensor_to_blob() (docarray.document.mixins.image.imagedatamixin method)": [[114, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.mixins.image.imagedatamixin method)": [[114, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.mixins.image.imagedatamixin method)": [[114, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_uri"]], "docarray.document.mixins.image": [[114, "module-docarray.document.mixins.image"]], "load_pil_image_to_datauri() (docarray.document.mixins.image.imagedatamixin method)": [[114, "docarray.document.mixins.image.ImageDataMixin.load_pil_image_to_datauri"]], "load_uri_to_image_tensor() (docarray.document.mixins.image.imagedatamixin method)": [[114, "docarray.document.mixins.image.ImageDataMixin.load_uri_to_image_tensor"]], "save_image_tensor_to_file() (docarray.document.mixins.image.imagedatamixin method)": [[114, "docarray.document.mixins.image.ImageDataMixin.save_image_tensor_to_file"]], "set_image_tensor_channel_axis() (docarray.document.mixins.image.imagedatamixin method)": [[114, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.mixins.image.imagedatamixin method)": [[114, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.mixins.image.imagedatamixin method)": [[114, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_normalization"]], "set_image_tensor_shape() (docarray.document.mixins.image.imagedatamixin method)": [[114, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_shape"]], "meshdatamixin (class in docarray.document.mixins.mesh)": [[115, "docarray.document.mixins.mesh.MeshDataMixin"]], "docarray.document.mixins.mesh": [[115, "module-docarray.document.mixins.mesh"]], "load_uri_to_point_cloud_tensor() (docarray.document.mixins.mesh.meshdatamixin method)": [[115, "docarray.document.mixins.mesh.MeshDataMixin.load_uri_to_point_cloud_tensor"]], "multimodalmixin (class in docarray.document.mixins.multimodal)": [[116, "docarray.document.mixins.multimodal.MultiModalMixin"]], "docarray.document.mixins.multimodal": [[116, "module-docarray.document.mixins.multimodal"]], "get_multi_modal_attribute() (docarray.document.mixins.multimodal.multimodalmixin method)": [[116, "docarray.document.mixins.multimodal.MultiModalMixin.get_multi_modal_attribute"]], "is_multimodal (docarray.document.mixins.multimodal.multimodalmixin property)": [[116, "docarray.document.mixins.multimodal.MultiModalMixin.is_multimodal"]], "plotmixin (class in docarray.document.mixins.plot)": [[117, "docarray.document.mixins.plot.PlotMixin"]], "display() (docarray.document.mixins.plot.plotmixin method)": [[117, "docarray.document.mixins.plot.PlotMixin.display"]], "docarray.document.mixins.plot": [[117, "module-docarray.document.mixins.plot"]], "plot_matches_sprites() (docarray.document.mixins.plot.plotmixin method)": [[117, "docarray.document.mixins.plot.PlotMixin.plot_matches_sprites"]], "summary() (docarray.document.mixins.plot.plotmixin method)": [[117, "docarray.document.mixins.plot.PlotMixin.summary"]], "portingmixin (class in docarray.document.mixins.porting)": [[118, "docarray.document.mixins.porting.PortingMixin"]], "docarray.document.mixins.porting": [[118, "module-docarray.document.mixins.porting"]], "from_base64() (docarray.document.mixins.porting.portingmixin class method)": [[118, "docarray.document.mixins.porting.PortingMixin.from_base64"]], "from_bytes() (docarray.document.mixins.porting.portingmixin class method)": [[118, "docarray.document.mixins.porting.PortingMixin.from_bytes"]], "from_dict() (docarray.document.mixins.porting.portingmixin class method)": [[118, "docarray.document.mixins.porting.PortingMixin.from_dict"]], "from_json() (docarray.document.mixins.porting.portingmixin class method)": [[118, "docarray.document.mixins.porting.PortingMixin.from_json"]], "to_base64() (docarray.document.mixins.porting.portingmixin method)": [[118, "docarray.document.mixins.porting.PortingMixin.to_base64"]], "to_bytes() (docarray.document.mixins.porting.portingmixin method)": [[118, "docarray.document.mixins.porting.PortingMixin.to_bytes"]], "to_dict() (docarray.document.mixins.porting.portingmixin method)": [[118, "docarray.document.mixins.porting.PortingMixin.to_dict"]], "to_json() (docarray.document.mixins.porting.portingmixin method)": [[118, "docarray.document.mixins.porting.PortingMixin.to_json"]], "propertymixin (class in docarray.document.mixins.property)": [[119, "docarray.document.mixins.property.PropertyMixin"]], "adjacency (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.adjacency"]], "blob (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.blob"]], "chunks (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.chunks"]], "content (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.content"]], "content_type (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.content_type"]], "docarray.document.mixins.property": [[119, "module-docarray.document.mixins.property"]], "embedding (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.embedding"]], "evaluations (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.evaluations"]], "granularity (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.granularity"]], "id (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.id"]], "location (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.location"]], "matches (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.matches"]], "mime_type (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.mime_type"]], "modality (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.modality"]], "offset (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.offset"]], "parent_id (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.parent_id"]], "scores (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.scores"]], "tags (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.tags"]], "tensor (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.tensor"]], "text (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.text"]], "uri (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.uri"]], "weight (docarray.document.mixins.property.propertymixin property)": [[119, "docarray.document.mixins.property.PropertyMixin.weight"]], "protobufmixin (class in docarray.document.mixins.protobuf)": [[120, "docarray.document.mixins.protobuf.ProtobufMixin"]], "docarray.document.mixins.protobuf": [[120, "module-docarray.document.mixins.protobuf"]], "from_protobuf() (docarray.document.mixins.protobuf.protobufmixin class method)": [[120, "docarray.document.mixins.protobuf.ProtobufMixin.from_protobuf"]], "to_protobuf() (docarray.document.mixins.protobuf.protobufmixin method)": [[120, "docarray.document.mixins.protobuf.ProtobufMixin.to_protobuf"]], "pydanticmixin (class in docarray.document.mixins.pydantic)": [[121, "docarray.document.mixins.pydantic.PydanticMixin"]], "docarray.document.mixins.pydantic": [[121, "module-docarray.document.mixins.pydantic"]], "from_pydantic_model() (docarray.document.mixins.pydantic.pydanticmixin class method)": [[121, "docarray.document.mixins.pydantic.PydanticMixin.from_pydantic_model"]], "get_json_schema() (docarray.document.mixins.pydantic.pydanticmixin class method)": [[121, "docarray.document.mixins.pydantic.PydanticMixin.get_json_schema"]], "to_pydantic_model() (docarray.document.mixins.pydantic.pydanticmixin method)": [[121, "docarray.document.mixins.pydantic.PydanticMixin.to_pydantic_model"]], "colorboxembedding (class in docarray.document.mixins.rich_embedding)": [[122, "docarray.document.mixins.rich_embedding.ColorBoxEmbedding"]], "docarray.document.mixins.rich_embedding": [[122, "module-docarray.document.mixins.rich_embedding"]], "strawberrymixin (class in docarray.document.mixins.strawberry)": [[123, "docarray.document.mixins.strawberry.StrawberryMixin"]], "docarray.document.mixins.strawberry": [[123, "module-docarray.document.mixins.strawberry"]], "from_strawberry_type() (docarray.document.mixins.strawberry.strawberrymixin class method)": [[123, "docarray.document.mixins.strawberry.StrawberryMixin.from_strawberry_type"]], "to_strawberry_type() (docarray.document.mixins.strawberry.strawberrymixin method)": [[123, "docarray.document.mixins.strawberry.StrawberryMixin.to_strawberry_type"]], "singletonsugarmixin (class in docarray.document.mixins.sugar)": [[124, "docarray.document.mixins.sugar.SingletonSugarMixin"]], "docarray.document.mixins.sugar": [[124, "module-docarray.document.mixins.sugar"]], "embed() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[124, "docarray.document.mixins.sugar.SingletonSugarMixin.embed"]], "match() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[124, "docarray.document.mixins.sugar.SingletonSugarMixin.match"]], "post() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[124, "docarray.document.mixins.sugar.SingletonSugarMixin.post"]], "textdatamixin (class in docarray.document.mixins.text)": [[125, "docarray.document.mixins.text.TextDataMixin"]], "convert_tensor_to_text() (docarray.document.mixins.text.textdatamixin method)": [[125, "docarray.document.mixins.text.TextDataMixin.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.mixins.text.textdatamixin method)": [[125, "docarray.document.mixins.text.TextDataMixin.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.mixins.text.textdatamixin method)": [[125, "docarray.document.mixins.text.TextDataMixin.convert_text_to_tensor"]], "docarray.document.mixins.text": [[125, "module-docarray.document.mixins.text"]], "get_vocabulary() (docarray.document.mixins.text.textdatamixin method)": [[125, "docarray.document.mixins.text.TextDataMixin.get_vocabulary"]], "load_uri_to_text() (docarray.document.mixins.text.textdatamixin method)": [[125, "docarray.document.mixins.text.TextDataMixin.load_uri_to_text"]], "videodatamixin (class in docarray.document.mixins.video)": [[126, "docarray.document.mixins.video.VideoDataMixin"]], "docarray.document.mixins.video": [[126, "module-docarray.document.mixins.video"]], "load_uri_to_video_tensor() (docarray.document.mixins.video.videodatamixin method)": [[126, "docarray.document.mixins.video.VideoDataMixin.load_uri_to_video_tensor"]], "save_video_tensor_to_file() (docarray.document.mixins.video.videodatamixin method)": [[126, "docarray.document.mixins.video.VideoDataMixin.save_video_tensor_to_file"]], "pydanticdocument (class in docarray.document.pydantic_model)": [[127, "docarray.document.pydantic_model.PydanticDocument"]], "pydanticdocument.config (class in docarray.document.pydantic_model)": [[127, "docarray.document.pydantic_model.PydanticDocument.Config"]], "adjacency (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.adjacency"]], "blob (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.blob"]], "chunks (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.chunks"]], "construct() (docarray.document.pydantic_model.pydanticdocument class method)": [[127, "docarray.document.pydantic_model.PydanticDocument.construct"]], "copy() (docarray.document.pydantic_model.pydanticdocument method)": [[127, "docarray.document.pydantic_model.PydanticDocument.copy"]], "dict() (docarray.document.pydantic_model.pydanticdocument method)": [[127, "docarray.document.pydantic_model.PydanticDocument.dict"]], "docarray.document.pydantic_model": [[127, "module-docarray.document.pydantic_model"]], "embedding (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.embedding"]], "evaluations (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.evaluations"]], "from_orm() (docarray.document.pydantic_model.pydanticdocument class method)": [[127, "docarray.document.pydantic_model.PydanticDocument.from_orm"]], "granularity (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.granularity"]], "id (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.id"]], "json() (docarray.document.pydantic_model.pydanticdocument method)": [[127, "docarray.document.pydantic_model.PydanticDocument.json"]], "location (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.location"]], "matches (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.matches"]], "mime_type (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.mime_type"]], "modality (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.modality"]], "offset (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.offset"]], "parent_id (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.parent_id"]], "parse_file() (docarray.document.pydantic_model.pydanticdocument class method)": [[127, "docarray.document.pydantic_model.PydanticDocument.parse_file"]], "parse_obj() (docarray.document.pydantic_model.pydanticdocument class method)": [[127, "docarray.document.pydantic_model.PydanticDocument.parse_obj"]], "parse_raw() (docarray.document.pydantic_model.pydanticdocument class method)": [[127, "docarray.document.pydantic_model.PydanticDocument.parse_raw"]], "schema() (docarray.document.pydantic_model.pydanticdocument class method)": [[127, "docarray.document.pydantic_model.PydanticDocument.schema"]], "schema_json() (docarray.document.pydantic_model.pydanticdocument class method)": [[127, "docarray.document.pydantic_model.PydanticDocument.schema_json"]], "scores (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.scores"]], "smart_union (docarray.document.pydantic_model.pydanticdocument.config attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.Config.smart_union"]], "tags (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.tags"]], "tensor (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.tensor"]], "text (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.text"]], "update_forward_refs() (docarray.document.pydantic_model.pydanticdocument class method)": [[127, "docarray.document.pydantic_model.PydanticDocument.update_forward_refs"]], "uri (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.uri"]], "validate() (docarray.document.pydantic_model.pydanticdocument class method)": [[127, "docarray.document.pydantic_model.PydanticDocument.validate"]], "weight (docarray.document.pydantic_model.pydanticdocument attribute)": [[127, "docarray.document.pydantic_model.PydanticDocument.weight"]], "add_protocol_and_compress_to_file_path() (in module docarray.helper)": [[129, "docarray.helper.add_protocol_and_compress_to_file_path"]], "cached_property (class in docarray.helper)": [[129, "docarray.helper.cached_property"]], "compress_bytes() (in module docarray.helper)": [[129, "docarray.helper.compress_bytes"]], "dataclass_from_dict() (in module docarray.helper)": [[129, "docarray.helper.dataclass_from_dict"]], "decompress_bytes() (in module docarray.helper)": [[129, "docarray.helper.decompress_bytes"]], "deprecate_by() (in module docarray.helper)": [[129, "docarray.helper.deprecate_by"]], "docarray.helper": [[129, "module-docarray.helper"]], "download_mermaid_url() (in module docarray.helper)": [[129, "docarray.helper.download_mermaid_url"]], "dunder_get() (in module docarray.helper)": [[129, "docarray.helper.dunder_get"]], "filter_dict() (in module docarray.helper)": [[129, "docarray.helper.filter_dict"]], "get_ci_vendor() (in module docarray.helper)": [[129, "docarray.helper.get_ci_vendor"]], "get_compress_ctx() (in module docarray.helper)": [[129, "docarray.helper.get_compress_ctx"]], "get_full_version() (in module docarray.helper)": [[129, "docarray.helper.get_full_version"]], "get_request_header() (in module docarray.helper)": [[129, "docarray.helper.get_request_header"]], "protocol_and_compress_from_file_path() (in module docarray.helper)": [[129, "docarray.helper.protocol_and_compress_from_file_path"]], "random_identity() (in module docarray.helper)": [[129, "docarray.helper.random_identity"]], "random_port() (in module docarray.helper)": [[129, "docarray.helper.random_port"]], "random_uuid() (in module docarray.helper)": [[129, "docarray.helper.random_uuid"]], "reset_ports() (in module docarray.helper)": [[129, "docarray.helper.reset_ports"]], "typename() (in module docarray.helper)": [[129, "docarray.helper.typename"]], "docarray.math": [[130, "module-docarray.math"]], "cdist() (in module docarray.math.distance)": [[131, "docarray.math.distance.cdist"]], "docarray.math.distance": [[131, "module-docarray.math.distance"]], "pdist() (in module docarray.math.distance)": [[131, "docarray.math.distance.pdist"]], "cosine() (in module docarray.math.distance.numpy)": [[132, "docarray.math.distance.numpy.cosine"]], "docarray.math.distance.numpy": [[132, "module-docarray.math.distance.numpy"]], "euclidean() (in module docarray.math.distance.numpy)": [[132, "docarray.math.distance.numpy.euclidean"]], "sparse_cosine() (in module docarray.math.distance.numpy)": [[132, "docarray.math.distance.numpy.sparse_cosine"]], "sparse_euclidean() (in module docarray.math.distance.numpy)": [[132, "docarray.math.distance.numpy.sparse_euclidean"]], "sparse_sqeuclidean() (in module docarray.math.distance.numpy)": [[132, "docarray.math.distance.numpy.sparse_sqeuclidean"]], "sqeuclidean() (in module docarray.math.distance.numpy)": [[132, "docarray.math.distance.numpy.sqeuclidean"]], "cosine() (in module docarray.math.distance.tensorflow)": [[134, "docarray.math.distance.tensorflow.cosine"]], "docarray.math.distance.tensorflow": [[134, "module-docarray.math.distance.tensorflow"]], "euclidean() (in module docarray.math.distance.tensorflow)": [[134, "docarray.math.distance.tensorflow.euclidean"]], "sqeuclidean() (in module docarray.math.distance.tensorflow)": [[134, "docarray.math.distance.tensorflow.sqeuclidean"]], "cosine() (in module docarray.math.distance.torch)": [[135, "docarray.math.distance.torch.cosine"]], "docarray.math.distance.torch": [[135, "module-docarray.math.distance.torch"]], "euclidean() (in module docarray.math.distance.torch)": [[135, "docarray.math.distance.torch.euclidean"]], "sqeuclidean() (in module docarray.math.distance.torch)": [[135, "docarray.math.distance.torch.sqeuclidean"]], "average_precision() (in module docarray.math.evaluation)": [[136, "docarray.math.evaluation.average_precision"]], "dcg_at_k() (in module docarray.math.evaluation)": [[136, "docarray.math.evaluation.dcg_at_k"]], "docarray.math.evaluation": [[136, "module-docarray.math.evaluation"]], "f1_score_at_k() (in module docarray.math.evaluation)": [[136, "docarray.math.evaluation.f1_score_at_k"]], "hit_at_k() (in module docarray.math.evaluation)": [[136, "docarray.math.evaluation.hit_at_k"]], "ndcg_at_k() (in module docarray.math.evaluation)": [[136, "docarray.math.evaluation.ndcg_at_k"]], "precision_at_k() (in module docarray.math.evaluation)": [[136, "docarray.math.evaluation.precision_at_k"]], "r_precision() (in module docarray.math.evaluation)": [[136, "docarray.math.evaluation.r_precision"]], "recall_at_k() (in module docarray.math.evaluation)": [[136, "docarray.math.evaluation.recall_at_k"]], "reciprocal_rank() (in module docarray.math.evaluation)": [[136, "docarray.math.evaluation.reciprocal_rank"]], "docarray.math.helper": [[137, "module-docarray.math.helper"]], "minmax_normalize() (in module docarray.math.helper)": [[137, "docarray.math.helper.minmax_normalize"]], "top_k() (in module docarray.math.helper)": [[137, "docarray.math.helper.top_k"]], "update_rows_x_mat_best() (in module docarray.math.helper)": [[137, "docarray.math.helper.update_rows_x_mat_best"]], "check_arraylike_equality() (in module docarray.math.ndarray)": [[138, "docarray.math.ndarray.check_arraylike_equality"]], "detach_tensor_if_present() (in module docarray.math.ndarray)": [[138, "docarray.math.ndarray.detach_tensor_if_present"]], "docarray.math.ndarray": [[138, "module-docarray.math.ndarray"]], "get_array_rows() (in module docarray.math.ndarray)": [[138, "docarray.math.ndarray.get_array_rows"]], "get_array_type() (in module docarray.math.ndarray)": [[138, "docarray.math.ndarray.get_array_type"]], "ravel() (in module docarray.math.ndarray)": [[138, "docarray.math.ndarray.ravel"]], "to_list() (in module docarray.math.ndarray)": [[138, "docarray.math.ndarray.to_list"]], "to_numpy_array() (in module docarray.math.ndarray)": [[138, "docarray.math.ndarray.to_numpy_array"]], "unravel() (in module docarray.math.ndarray)": [[138, "docarray.math.ndarray.unravel"]], "docarray.proto": [[139, "module-docarray.proto"]], "docarray.proto.docarray_pb2": [[140, "module-docarray.proto.docarray_pb2"]], "docarray.proto.io": [[141, "module-docarray.proto.io"]], "flush_proto() (in module docarray.proto.io)": [[141, "docarray.proto.io.flush_proto"]], "parse_proto() (in module docarray.proto.io)": [[141, "docarray.proto.io.parse_proto"]], "docarray.proto.io.ndarray": [[142, "module-docarray.proto.io.ndarray"]], "flush_ndarray() (in module docarray.proto.io.ndarray)": [[142, "docarray.proto.io.ndarray.flush_ndarray"]], "read_ndarray() (in module docarray.proto.io.ndarray)": [[142, "docarray.proto.io.ndarray.read_ndarray"]], "namedscore (class in docarray.score)": [[143, "docarray.score.NamedScore"]], "clear() (docarray.score.namedscore method)": [[143, "docarray.score.NamedScore.clear"]], "copy_from() (docarray.score.namedscore method)": [[143, "docarray.score.NamedScore.copy_from"]], "description (docarray.score.namedscore property)": [[143, "docarray.score.NamedScore.description"]], "docarray.score": [[143, "module-docarray.score"]], "nbytes (docarray.score.namedscore property)": [[143, "docarray.score.NamedScore.nbytes"]], "non_empty_fields (docarray.score.namedscore property)": [[143, "docarray.score.NamedScore.non_empty_fields"]], "op_name (docarray.score.namedscore property)": [[143, "docarray.score.NamedScore.op_name"]], "pop() (docarray.score.namedscore method)": [[143, "docarray.score.NamedScore.pop"]], "ref_id (docarray.score.namedscore property)": [[143, "docarray.score.NamedScore.ref_id"]], "to_dict() (docarray.score.namedscore method)": [[143, "docarray.score.NamedScore.to_dict"]], "value (docarray.score.namedscore property)": [[143, "docarray.score.NamedScore.value"]], "namedscoredata (class in docarray.score.data)": [[144, "docarray.score.data.NamedScoreData"]], "description (docarray.score.data.namedscoredata attribute)": [[144, "docarray.score.data.NamedScoreData.description"]], "docarray.score.data": [[144, "module-docarray.score.data"]], "op_name (docarray.score.data.namedscoredata attribute)": [[144, "docarray.score.data.NamedScoreData.op_name"]], "ref_id (docarray.score.data.namedscoredata attribute)": [[144, "docarray.score.data.NamedScoreData.ref_id"]], "value (docarray.score.data.namedscoredata attribute)": [[144, "docarray.score.data.NamedScoreData.value"]], "allmixins (class in docarray.score.mixins)": [[145, "docarray.score.mixins.AllMixins"]], "description (docarray.score.mixins.allmixins property)": [[145, "docarray.score.mixins.AllMixins.description"]], "docarray.score.mixins": [[145, "module-docarray.score.mixins"]], "op_name (docarray.score.mixins.allmixins property)": [[145, "docarray.score.mixins.AllMixins.op_name"]], "ref_id (docarray.score.mixins.allmixins property)": [[145, "docarray.score.mixins.AllMixins.ref_id"]], "to_dict() (docarray.score.mixins.allmixins method)": [[145, "docarray.score.mixins.AllMixins.to_dict"]], "value (docarray.score.mixins.allmixins property)": [[145, "docarray.score.mixins.AllMixins.value"]], "propertymixin (class in docarray.score.mixins.property)": [[146, "docarray.score.mixins.property.PropertyMixin"]], "description (docarray.score.mixins.property.propertymixin property)": [[146, "docarray.score.mixins.property.PropertyMixin.description"]], "docarray.score.mixins.property": [[146, "module-docarray.score.mixins.property"]], "op_name (docarray.score.mixins.property.propertymixin property)": [[146, "docarray.score.mixins.property.PropertyMixin.op_name"]], "ref_id (docarray.score.mixins.property.propertymixin property)": [[146, "docarray.score.mixins.property.PropertyMixin.ref_id"]], "value (docarray.score.mixins.property.propertymixin property)": [[146, "docarray.score.mixins.property.PropertyMixin.value"]], "representmixin (class in docarray.score.mixins.representer)": [[147, "docarray.score.mixins.representer.RepresentMixin"]], "docarray.score.mixins.representer": [[147, "module-docarray.score.mixins.representer"]], "to_dict() (docarray.score.mixins.representer.representmixin method)": [[147, "docarray.score.mixins.representer.RepresentMixin.to_dict"]], "docarray.typing": [[148, "module-docarray.typing"]]}})