Search.setIndex({"docnames": ["advanced/document-store/annlite", "advanced/document-store/benchmark", "advanced/document-store/elasticsearch", "advanced/document-store/extend", "advanced/document-store/index", "advanced/document-store/qdrant", "advanced/document-store/redis", "advanced/document-store/sqlite", "advanced/document-store/weaviate", "advanced/graphql-support/index", "advanced/torch-support/index", "api", "api/docarray", "api/docarray.array", "api/docarray.array.annlite", "api/docarray.array.base", "api/docarray.array.chunk", "api/docarray.array.document", "api/docarray.array.elastic", "api/docarray.array.match", "api/docarray.array.memory", "api/docarray.array.mixins", "api/docarray.array.mixins.content", "api/docarray.array.mixins.dataloader", "api/docarray.array.mixins.dataloader.helper", "api/docarray.array.mixins.delitem", "api/docarray.array.mixins.embed", "api/docarray.array.mixins.empty", "api/docarray.array.mixins.evaluation", "api/docarray.array.mixins.find", "api/docarray.array.mixins.getattr", "api/docarray.array.mixins.getitem", "api/docarray.array.mixins.group", "api/docarray.array.mixins.io", "api/docarray.array.mixins.io.binary", "api/docarray.array.mixins.io.common", "api/docarray.array.mixins.io.csv", "api/docarray.array.mixins.io.dataframe", "api/docarray.array.mixins.io.from_gen", "api/docarray.array.mixins.io.json", "api/docarray.array.mixins.io.pbar", "api/docarray.array.mixins.io.pushpull", "api/docarray.array.mixins.match", "api/docarray.array.mixins.parallel", "api/docarray.array.mixins.plot", "api/docarray.array.mixins.post", "api/docarray.array.mixins.pydantic", "api/docarray.array.mixins.reduce", "api/docarray.array.mixins.sample", "api/docarray.array.mixins.setitem", "api/docarray.array.mixins.strawberry", "api/docarray.array.mixins.text", "api/docarray.array.mixins.traverse", "api/docarray.array.qdrant", "api/docarray.array.queryset", "api/docarray.array.queryset.lookup", "api/docarray.array.queryset.parser", "api/docarray.array.redis", "api/docarray.array.sqlite", "api/docarray.array.storage", "api/docarray.array.storage.annlite", "api/docarray.array.storage.annlite.backend", "api/docarray.array.storage.annlite.find", "api/docarray.array.storage.annlite.getsetdel", "api/docarray.array.storage.annlite.helper", "api/docarray.array.storage.annlite.seqlike", "api/docarray.array.storage.base", "api/docarray.array.storage.base.backend", "api/docarray.array.storage.base.getsetdel", "api/docarray.array.storage.base.helper", "api/docarray.array.storage.base.seqlike", "api/docarray.array.storage.elastic", "api/docarray.array.storage.elastic.backend", "api/docarray.array.storage.elastic.find", "api/docarray.array.storage.elastic.getsetdel", "api/docarray.array.storage.elastic.seqlike", "api/docarray.array.storage.memory", "api/docarray.array.storage.memory.backend", "api/docarray.array.storage.memory.find", "api/docarray.array.storage.memory.getsetdel", "api/docarray.array.storage.memory.seqlike", "api/docarray.array.storage.qdrant", "api/docarray.array.storage.qdrant.backend", "api/docarray.array.storage.qdrant.find", "api/docarray.array.storage.qdrant.getsetdel", "api/docarray.array.storage.qdrant.helper", "api/docarray.array.storage.qdrant.seqlike", "api/docarray.array.storage.redis", "api/docarray.array.storage.redis.backend", "api/docarray.array.storage.redis.find", "api/docarray.array.storage.redis.getsetdel", "api/docarray.array.storage.redis.seqlike", "api/docarray.array.storage.registry", "api/docarray.array.storage.sqlite", "api/docarray.array.storage.sqlite.backend", "api/docarray.array.storage.sqlite.getsetdel", "api/docarray.array.storage.sqlite.helper", "api/docarray.array.storage.sqlite.seqlike", "api/docarray.array.storage.weaviate", "api/docarray.array.storage.weaviate.backend", "api/docarray.array.storage.weaviate.find", "api/docarray.array.storage.weaviate.getsetdel", "api/docarray.array.storage.weaviate.seqlike", "api/docarray.array.weaviate", "api/docarray.base", "api/docarray.dataclasses", "api/docarray.dataclasses.getter", "api/docarray.dataclasses.setter", "api/docarray.dataclasses.types", "api/docarray.document", "api/docarray.document.data", "api/docarray.document.generators", "api/docarray.document.mixins", "api/docarray.document.mixins.attribute", "api/docarray.document.mixins.audio", "api/docarray.document.mixins.blob", "api/docarray.document.mixins.content", "api/docarray.document.mixins.convert", "api/docarray.document.mixins.dump", "api/docarray.document.mixins.featurehash", "api/docarray.document.mixins.helper", "api/docarray.document.mixins.image", "api/docarray.document.mixins.mesh", "api/docarray.document.mixins.multimodal", "api/docarray.document.mixins.plot", "api/docarray.document.mixins.porting", "api/docarray.document.mixins.property", "api/docarray.document.mixins.protobuf", "api/docarray.document.mixins.pydantic", "api/docarray.document.mixins.rich_embedding", "api/docarray.document.mixins.strawberry", "api/docarray.document.mixins.sugar", "api/docarray.document.mixins.text", "api/docarray.document.mixins.video", "api/docarray.document.pydantic_model", "api/docarray.document.strawberry_type", "api/docarray.helper", "api/docarray.math", "api/docarray.math.distance", "api/docarray.math.distance.numpy", "api/docarray.math.distance.paddle", "api/docarray.math.distance.tensorflow", "api/docarray.math.distance.torch", "api/docarray.math.evaluation", "api/docarray.math.helper", "api/docarray.math.ndarray", "api/docarray.proto", "api/docarray.proto.docarray_pb2", "api/docarray.proto.io", "api/docarray.proto.io.ndarray", "api/docarray.proto.pb", "api/docarray.proto.pb.docarray_pb2", "api/docarray.proto.pb2", "api/docarray.proto.pb2.docarray_pb2", "api/docarray.score", "api/docarray.score.data", "api/docarray.score.mixins", "api/docarray.score.mixins.property", "api/docarray.score.mixins.representer", "api/docarray.typing", "api/modules", "changelog/index", "datatypes/audio/index", "datatypes/image/index", "datatypes/index", "datatypes/mesh/index", "datatypes/multimodal/index", "datatypes/tabular/index", "datatypes/text/index", "datatypes/video/index", "fundamentals/dataclass/access", "fundamentals/dataclass/construct", "fundamentals/dataclass/example", "fundamentals/dataclass/index", "fundamentals/dataclass/new-type", "fundamentals/document/attribute", "fundamentals/document/construct", "fundamentals/document/embedding", "fundamentals/document/fluent-interface", "fundamentals/document/index", "fundamentals/document/nested", "fundamentals/document/serialization", "fundamentals/document/visualization", "fundamentals/documentarray/access-attributes", "fundamentals/documentarray/access-elements", "fundamentals/documentarray/construct", "fundamentals/documentarray/embedding", "fundamentals/documentarray/evaluation", "fundamentals/documentarray/find", "fundamentals/documentarray/index", "fundamentals/documentarray/matching", "fundamentals/documentarray/parallelization", "fundamentals/documentarray/post-external", "fundamentals/documentarray/serialization", "fundamentals/documentarray/subindex", "fundamentals/documentarray/visualization", "fundamentals/fastapi-support/index", "fundamentals/jina-support/index", "fundamentals/notebook-support/index", "get-started/install", "get-started/what-is", "index", "proto/docs", "proto/index"], "filenames": ["advanced/document-store/annlite.md", "advanced/document-store/benchmark.md", "advanced/document-store/elasticsearch.md", "advanced/document-store/extend.md", "advanced/document-store/index.md", "advanced/document-store/qdrant.md", "advanced/document-store/redis.md", "advanced/document-store/sqlite.md", "advanced/document-store/weaviate.md", "advanced/graphql-support/index.md", "advanced/torch-support/index.md", "api.rst", "api/docarray.rst", "api/docarray.array.rst", "api/docarray.array.annlite.rst", "api/docarray.array.base.rst", "api/docarray.array.chunk.rst", "api/docarray.array.document.rst", "api/docarray.array.elastic.rst", "api/docarray.array.match.rst", "api/docarray.array.memory.rst", "api/docarray.array.mixins.rst", "api/docarray.array.mixins.content.rst", "api/docarray.array.mixins.dataloader.rst", "api/docarray.array.mixins.dataloader.helper.rst", "api/docarray.array.mixins.delitem.rst", "api/docarray.array.mixins.embed.rst", "api/docarray.array.mixins.empty.rst", "api/docarray.array.mixins.evaluation.rst", "api/docarray.array.mixins.find.rst", "api/docarray.array.mixins.getattr.rst", "api/docarray.array.mixins.getitem.rst", "api/docarray.array.mixins.group.rst", "api/docarray.array.mixins.io.rst", "api/docarray.array.mixins.io.binary.rst", "api/docarray.array.mixins.io.common.rst", "api/docarray.array.mixins.io.csv.rst", "api/docarray.array.mixins.io.dataframe.rst", "api/docarray.array.mixins.io.from_gen.rst", "api/docarray.array.mixins.io.json.rst", "api/docarray.array.mixins.io.pbar.rst", "api/docarray.array.mixins.io.pushpull.rst", "api/docarray.array.mixins.match.rst", "api/docarray.array.mixins.parallel.rst", "api/docarray.array.mixins.plot.rst", "api/docarray.array.mixins.post.rst", "api/docarray.array.mixins.pydantic.rst", "api/docarray.array.mixins.reduce.rst", "api/docarray.array.mixins.sample.rst", "api/docarray.array.mixins.setitem.rst", "api/docarray.array.mixins.strawberry.rst", "api/docarray.array.mixins.text.rst", "api/docarray.array.mixins.traverse.rst", "api/docarray.array.qdrant.rst", "api/docarray.array.queryset.rst", "api/docarray.array.queryset.lookup.rst", "api/docarray.array.queryset.parser.rst", "api/docarray.array.redis.rst", "api/docarray.array.sqlite.rst", "api/docarray.array.storage.rst", "api/docarray.array.storage.annlite.rst", "api/docarray.array.storage.annlite.backend.rst", "api/docarray.array.storage.annlite.find.rst", "api/docarray.array.storage.annlite.getsetdel.rst", "api/docarray.array.storage.annlite.helper.rst", "api/docarray.array.storage.annlite.seqlike.rst", "api/docarray.array.storage.base.rst", "api/docarray.array.storage.base.backend.rst", "api/docarray.array.storage.base.getsetdel.rst", "api/docarray.array.storage.base.helper.rst", "api/docarray.array.storage.base.seqlike.rst", "api/docarray.array.storage.elastic.rst", "api/docarray.array.storage.elastic.backend.rst", "api/docarray.array.storage.elastic.find.rst", "api/docarray.array.storage.elastic.getsetdel.rst", "api/docarray.array.storage.elastic.seqlike.rst", "api/docarray.array.storage.memory.rst", "api/docarray.array.storage.memory.backend.rst", "api/docarray.array.storage.memory.find.rst", "api/docarray.array.storage.memory.getsetdel.rst", "api/docarray.array.storage.memory.seqlike.rst", "api/docarray.array.storage.qdrant.rst", "api/docarray.array.storage.qdrant.backend.rst", "api/docarray.array.storage.qdrant.find.rst", "api/docarray.array.storage.qdrant.getsetdel.rst", "api/docarray.array.storage.qdrant.helper.rst", "api/docarray.array.storage.qdrant.seqlike.rst", "api/docarray.array.storage.redis.rst", "api/docarray.array.storage.redis.backend.rst", "api/docarray.array.storage.redis.find.rst", "api/docarray.array.storage.redis.getsetdel.rst", "api/docarray.array.storage.redis.seqlike.rst", "api/docarray.array.storage.registry.rst", "api/docarray.array.storage.sqlite.rst", "api/docarray.array.storage.sqlite.backend.rst", "api/docarray.array.storage.sqlite.getsetdel.rst", "api/docarray.array.storage.sqlite.helper.rst", "api/docarray.array.storage.sqlite.seqlike.rst", "api/docarray.array.storage.weaviate.rst", "api/docarray.array.storage.weaviate.backend.rst", "api/docarray.array.storage.weaviate.find.rst", "api/docarray.array.storage.weaviate.getsetdel.rst", "api/docarray.array.storage.weaviate.seqlike.rst", "api/docarray.array.weaviate.rst", "api/docarray.base.rst", "api/docarray.dataclasses.rst", "api/docarray.dataclasses.getter.rst", "api/docarray.dataclasses.setter.rst", "api/docarray.dataclasses.types.rst", "api/docarray.document.rst", "api/docarray.document.data.rst", "api/docarray.document.generators.rst", "api/docarray.document.mixins.rst", "api/docarray.document.mixins.attribute.rst", "api/docarray.document.mixins.audio.rst", "api/docarray.document.mixins.blob.rst", "api/docarray.document.mixins.content.rst", "api/docarray.document.mixins.convert.rst", "api/docarray.document.mixins.dump.rst", "api/docarray.document.mixins.featurehash.rst", "api/docarray.document.mixins.helper.rst", "api/docarray.document.mixins.image.rst", "api/docarray.document.mixins.mesh.rst", "api/docarray.document.mixins.multimodal.rst", "api/docarray.document.mixins.plot.rst", "api/docarray.document.mixins.porting.rst", "api/docarray.document.mixins.property.rst", "api/docarray.document.mixins.protobuf.rst", "api/docarray.document.mixins.pydantic.rst", "api/docarray.document.mixins.rich_embedding.rst", "api/docarray.document.mixins.strawberry.rst", "api/docarray.document.mixins.sugar.rst", "api/docarray.document.mixins.text.rst", "api/docarray.document.mixins.video.rst", "api/docarray.document.pydantic_model.rst", "api/docarray.document.strawberry_type.rst", "api/docarray.helper.rst", "api/docarray.math.rst", "api/docarray.math.distance.rst", "api/docarray.math.distance.numpy.rst", "api/docarray.math.distance.paddle.rst", "api/docarray.math.distance.tensorflow.rst", "api/docarray.math.distance.torch.rst", "api/docarray.math.evaluation.rst", "api/docarray.math.helper.rst", "api/docarray.math.ndarray.rst", "api/docarray.proto.rst", "api/docarray.proto.docarray_pb2.rst", "api/docarray.proto.io.rst", "api/docarray.proto.io.ndarray.rst", "api/docarray.proto.pb.rst", "api/docarray.proto.pb.docarray_pb2.rst", "api/docarray.proto.pb2.rst", "api/docarray.proto.pb2.docarray_pb2.rst", "api/docarray.score.rst", "api/docarray.score.data.rst", "api/docarray.score.mixins.rst", "api/docarray.score.mixins.property.rst", "api/docarray.score.mixins.representer.rst", "api/docarray.typing.rst", "api/modules.rst", "changelog/index.md", "datatypes/audio/index.md", "datatypes/image/index.md", "datatypes/index.md", "datatypes/mesh/index.md", "datatypes/multimodal/index.md", "datatypes/tabular/index.md", "datatypes/text/index.md", "datatypes/video/index.md", "fundamentals/dataclass/access.md", "fundamentals/dataclass/construct.md", "fundamentals/dataclass/example.md", "fundamentals/dataclass/index.md", "fundamentals/dataclass/new-type.md", "fundamentals/document/attribute.md", "fundamentals/document/construct.md", "fundamentals/document/embedding.md", "fundamentals/document/fluent-interface.md", "fundamentals/document/index.md", "fundamentals/document/nested.md", "fundamentals/document/serialization.md", "fundamentals/document/visualization.md", "fundamentals/documentarray/access-attributes.md", "fundamentals/documentarray/access-elements.md", "fundamentals/documentarray/construct.md", "fundamentals/documentarray/embedding.md", "fundamentals/documentarray/evaluation.md", "fundamentals/documentarray/find.md", "fundamentals/documentarray/index.md", "fundamentals/documentarray/matching.md", "fundamentals/documentarray/parallelization.md", "fundamentals/documentarray/post-external.md", "fundamentals/documentarray/serialization.md", "fundamentals/documentarray/subindex.md", "fundamentals/documentarray/visualization.md", "fundamentals/fastapi-support/index.md", "fundamentals/jina-support/index.md", "fundamentals/notebook-support/index.md", "get-started/install.md", "get-started/what-is.md", "index.md", "proto/docs.md", "proto/index.md"], "titles": ["Annlite", "One Million Scale Benchmark", "Elasticsearch", "Add New Document Store", "Document Store", "Qdrant", "Redis", "SQLite", "Weaviate", "GraphQL", "PyTorch/Deep Learning Frameworks", "<span class=\"fab fa-python\"></span> Python API", "docarray package", "docarray.array package", "docarray.array.annlite module", "docarray.array.base module", "docarray.array.chunk module", "docarray.array.document module", "docarray.array.elastic module", "docarray.array.match module", "docarray.array.memory module", "docarray.array.mixins package", "docarray.array.mixins.content module", "docarray.array.mixins.dataloader package", "docarray.array.mixins.dataloader.helper module", "docarray.array.mixins.delitem module", "docarray.array.mixins.embed module", "docarray.array.mixins.empty module", "docarray.array.mixins.evaluation module", "docarray.array.mixins.find module", "docarray.array.mixins.getattr module", "docarray.array.mixins.getitem module", "docarray.array.mixins.group module", "docarray.array.mixins.io package", "docarray.array.mixins.io.binary module", "docarray.array.mixins.io.common module", "docarray.array.mixins.io.csv module", "docarray.array.mixins.io.dataframe module", "docarray.array.mixins.io.from_gen module", "docarray.array.mixins.io.json module", "docarray.array.mixins.io.pbar module", "docarray.array.mixins.io.pushpull module", "docarray.array.mixins.match module", "docarray.array.mixins.parallel module", "docarray.array.mixins.plot module", "docarray.array.mixins.post module", "docarray.array.mixins.pydantic module", "docarray.array.mixins.reduce module", "docarray.array.mixins.sample module", "docarray.array.mixins.setitem module", "docarray.array.mixins.strawberry module", "docarray.array.mixins.text module", "docarray.array.mixins.traverse module", "docarray.array.qdrant module", "docarray.array.queryset package", "docarray.array.queryset.lookup module", "docarray.array.queryset.parser module", "docarray.array.redis module", "docarray.array.sqlite module", "docarray.array.storage package", "docarray.array.storage.annlite package", "docarray.array.storage.annlite.backend module", "docarray.array.storage.annlite.find module", "docarray.array.storage.annlite.getsetdel module", "docarray.array.storage.annlite.helper module", "docarray.array.storage.annlite.seqlike module", "docarray.array.storage.base package", "docarray.array.storage.base.backend module", "docarray.array.storage.base.getsetdel module", "docarray.array.storage.base.helper module", "docarray.array.storage.base.seqlike module", "docarray.array.storage.elastic package", "docarray.array.storage.elastic.backend module", "docarray.array.storage.elastic.find module", "docarray.array.storage.elastic.getsetdel module", "docarray.array.storage.elastic.seqlike module", "docarray.array.storage.memory package", "docarray.array.storage.memory.backend module", "docarray.array.storage.memory.find module", "docarray.array.storage.memory.getsetdel module", "docarray.array.storage.memory.seqlike module", "docarray.array.storage.qdrant package", "docarray.array.storage.qdrant.backend module", "docarray.array.storage.qdrant.find module", "docarray.array.storage.qdrant.getsetdel module", "docarray.array.storage.qdrant.helper module", "docarray.array.storage.qdrant.seqlike module", "docarray.array.storage.redis package", "docarray.array.storage.redis.backend module", "docarray.array.storage.redis.find module", "docarray.array.storage.redis.getsetdel module", "docarray.array.storage.redis.seqlike module", "docarray.array.storage.registry module", "docarray.array.storage.sqlite package", "docarray.array.storage.sqlite.backend module", "docarray.array.storage.sqlite.getsetdel module", "docarray.array.storage.sqlite.helper module", "docarray.array.storage.sqlite.seqlike module", "docarray.array.storage.weaviate package", "docarray.array.storage.weaviate.backend module", "docarray.array.storage.weaviate.find module", "docarray.array.storage.weaviate.getsetdel module", "docarray.array.storage.weaviate.seqlike module", "docarray.array.weaviate module", "docarray.base module", "docarray.dataclasses package", "docarray.dataclasses.getter module", "docarray.dataclasses.setter module", "docarray.dataclasses.types module", "docarray.document package", "docarray.document.data module", "docarray.document.generators module", "docarray.document.mixins package", "docarray.document.mixins.attribute module", "docarray.document.mixins.audio module", "docarray.document.mixins.blob module", "docarray.document.mixins.content module", "docarray.document.mixins.convert module", "docarray.document.mixins.dump module", "docarray.document.mixins.featurehash module", "docarray.document.mixins.helper module", "docarray.document.mixins.image module", "docarray.document.mixins.mesh module", "docarray.document.mixins.multimodal module", "docarray.document.mixins.plot module", "docarray.document.mixins.porting module", "docarray.document.mixins.property module", "docarray.document.mixins.protobuf module", "docarray.document.mixins.pydantic module", "docarray.document.mixins.rich_embedding module", "docarray.document.mixins.strawberry module", "docarray.document.mixins.sugar module", "docarray.document.mixins.text module", "docarray.document.mixins.video module", "docarray.document.pydantic_model module", "docarray.document.strawberry_type module", "docarray.helper module", "docarray.math package", "docarray.math.distance package", "docarray.math.distance.numpy module", "docarray.math.distance.paddle module", "docarray.math.distance.tensorflow module", "docarray.math.distance.torch module", "docarray.math.evaluation module", "docarray.math.helper module", "docarray.math.ndarray module", "docarray.proto package", "docarray.proto.docarray_pb2 module", "docarray.proto.io package", "docarray.proto.io.ndarray module", "docarray.proto.pb package", "docarray.proto.pb.docarray_pb2 module", "docarray.proto.pb2 package", "docarray.proto.pb2.docarray_pb2 module", "docarray.score package", "docarray.score.data module", "docarray.score.mixins package", "docarray.score.mixins.property module", "docarray.score.mixins.representer module", "docarray.typing package", "docarray", "Changelog", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-unmute\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.563 2.069A.75.75 0 018 2.75v10.5a.75.75 0 01-1.238.57L3.472 11H1.75A1.75 1.75 0 010 9.25v-2.5C0 5.784.784 5 1.75 5h1.723l3.289-2.82a.75.75 0 01.801-.111zM6.5 4.38L4.238 6.319a.75.75 0 01-.488.181h-2a.25.25 0 00-.25.25v2.5c0 .138.112.25.25.25h2a.75.75 0 01.488.18L6.5 11.62V4.38zm6.096-2.038a.75.75 0 011.06 0 8 8 0 010 11.314.75.75 0 01-1.06-1.06 6.5 6.5 0 000-9.193.75.75 0 010-1.06v-.001zm-1.06 2.121a.75.75 0 10-1.061 1.061 3.5 3.5 0 010 4.95.75.75 0 101.06 1.06 5 5 0 000-7.07l.001-.001z\"></path></svg> Audio", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-image\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M1.75 2.5a.25.25 0 00-.25.25v10.5c0 .138.112.25.25.25h.94a.76.76 0 01.03-.03l6.077-6.078a1.75 1.75 0 012.412-.06L14.5 10.31V2.75a.25.25 0 00-.25-.25H1.75zm12.5 11H4.81l5.048-5.047a.25.25 0 01.344-.009l4.298 3.889v.917a.25.25 0 01-.25.25zm1.75-.25V2.75A1.75 1.75 0 0014.25 1H1.75A1.75 1.75 0 000 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0016 13.25zM5.5 6a.5.5 0 11-1 0 .5.5 0 011 0zM7 6a2 2 0 11-4 0 2 2 0 014 0z\"></path></svg> Image", "Multimodal Data", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-package\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M8.878.392a1.75 1.75 0 00-1.756 0l-5.25 3.045A1.75 1.75 0 001 4.951v6.098c0 .624.332 1.2.872 1.514l5.25 3.045a1.75 1.75 0 001.756 0l5.25-3.045c.54-.313.872-.89.872-1.514V4.951c0-.624-.332-1.2-.872-1.514L8.878.392zM7.875 1.69a.25.25 0 01.25 0l4.63 2.685L8 7.133 3.245 4.375l4.63-2.685zM2.5 5.677v5.372c0 .09.047.171.125.216l4.625 2.683V8.432L2.5 5.677zm6.25 8.271l4.625-2.683a.25.25 0 00.125-.216V5.677L8.75 8.432v5.516z\"></path></svg> 3D Mesh", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-stack\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.122.392a1.75 1.75 0 011.756 0l5.003 2.902c.83.481.83 1.68 0 2.162L8.878 8.358a1.75 1.75 0 01-1.756 0L2.119 5.456a1.25 1.25 0 010-2.162L7.122.392zM8.125 1.69a.25.25 0 00-.25 0l-4.63 2.685 4.63 2.685a.25.25 0 00.25 0l4.63-2.685-4.63-2.685zM1.601 7.789a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0L1.874 8.814A.75.75 0 011.6 7.789zm0 3.5a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0l-5.248-3.044a.75.75 0 01-.273-1.025z\"></path></svg> Multi-modal", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-table\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v3.585a.746.746 0 010 .83v8.085A1.75 1.75 0 0114.25 16H6.309a.748.748 0 01-1.118 0H1.75A1.75 1.75 0 010 14.25V6.165a.746.746 0 010-.83V1.75zM1.5 6.5v7.75c0 .138.112.25.25.25H5v-8H1.5zM5 5H1.5V1.75a.25.25 0 01.25-.25H5V5zm1.5 1.5v8h7.75a.25.25 0 00.25-.25V6.5h-8zm8-1.5h-8V1.5h7.75a.25.25 0 01.25.25V5z\"></path></svg> Table", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-typography\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M6.21 8.5L4.574 3.594 2.857 8.5H6.21zm.5 1.5l.829 2.487a.75.75 0 001.423-.474L5.735 2.332a1.216 1.216 0 00-2.302-.018l-3.39 9.688a.75.75 0 001.415.496L2.332 10H6.71zm3.13-4.358C10.53 4.374 11.87 4 13 4c1.5 0 3 .939 3 2.601v5.649a.75.75 0 01-1.448.275C13.995 12.82 13.3 13 12.5 13c-.77 0-1.514-.231-2.078-.709-.577-.488-.922-1.199-.922-2.041 0-.694.265-1.411.887-1.944C11 7.78 11.88 7.5 13 7.5h1.5v-.899c0-.54-.5-1.101-1.5-1.101-.869 0-1.528.282-1.84.858a.75.75 0 11-1.32-.716zM14.5 9H13c-.881 0-1.375.22-1.637.444-.253.217-.363.5-.363.806 0 .408.155.697.39.896.249.21.63.354 1.11.354.732 0 1.26-.209 1.588-.449.35-.257.412-.495.412-.551V9z\"></path></svg> Text", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-device-camera-video\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M16 3.75a.75.75 0 00-1.136-.643L11 5.425V4.75A1.75 1.75 0 009.25 3h-7.5A1.75 1.75 0 000 4.75v6.5C0 12.216.784 13 1.75 13h7.5A1.75 1.75 0 0011 11.25v-.675l3.864 2.318A.75.75 0 0016 12.25v-8.5zm-5 5.075l3.5 2.1v-5.85l-3.5 2.1v1.65zM9.5 6.75v-2a.25.25 0 00-.25-.25h-7.5a.25.25 0 00-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-4.5z\"></path></svg> Video", "Access Modality", "Construct", "Process Modality", "Dataclass", "Support New Modality", "Access Attributes", "Construct", "Embedding", "Fluent Interface", "Document", "Nested Structure", "Serialization", "Visualization", "Access Attributes", "Access Documents", "Construct", "Embed via Neural Network", "Evaluate Matches", "Query by Conditions", "DocumentArray", "Find Nearest Neighbours", "Parallelization", "Process via External Flow or Executor", "Serialization", "Search over Nested Structure", "Visualization", "FastAPI/Pydantic", "Jina", "Jupyter Notebook/Colab", "Install", "What is DocArray?", "Welcome to DocArray!", "Protocol Documentation", "Protocol Documentation"], "terms": {"One": [0, 2, 3, 4, 5, 6, 7, 8, 161, 163, 167, 168, 169, 171, 173, 175, 176, 179, 181, 183, 184, 185, 187, 188, 190, 191, 192, 193, 196, 197, 200, 201], "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 32, 34, 35, 36, 39, 41, 42, 43, 44, 45, 53, 57, 58, 68, 71, 73, 87, 89, 103, 109, 111, 112, 121, 123, 127, 132, 133, 136, 138, 141, 142, 143, 144, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 34, 35, 36, 39, 40, 41, 42, 43, 44, 47, 51, 52, 53, 55, 57, 58, 68, 71, 73, 87, 89, 103, 108, 109, 111, 112, 115, 117, 119, 121, 124, 125, 132, 136, 143, 161, 162, 163, 166, 168, 169, 170, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203], "document": [0, 1, 2, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 32, 34, 36, 42, 43, 44, 45, 47, 48, 51, 52, 53, 55, 57, 58, 60, 65, 70, 71, 73, 75, 76, 80, 81, 84, 86, 87, 89, 91, 93, 97, 98, 102, 103, 104, 107, 108, 136, 143, 145, 148, 154, 160, 162, 163, 164, 165, 167, 172, 173, 174, 175, 178, 180, 181, 182, 183, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201], "store": [0, 2, 5, 6, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 32, 34, 36, 41, 42, 44, 53, 57, 58, 98, 99, 103, 109, 112, 117, 121, 122, 124, 136, 161, 166, 167, 168, 169, 170, 173, 174, 175, 178, 184, 187, 188, 189, 190, 193, 194, 200, 201], "documentarrai": [0, 1, 7, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 57, 58, 60, 65, 68, 70, 71, 73, 75, 76, 78, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 109, 110, 112, 123, 131, 132, 145, 163, 164, 166, 167, 168, 172, 173, 176, 178, 179, 180, 181, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201], "It": [0, 2, 3, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 26, 36, 44, 53, 55, 57, 58, 103, 161, 163, 165, 168, 171, 172, 173, 176, 177, 181, 184, 187, 189, 191, 192, 193, 194, 197, 199, 200, 201], "i": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 32, 34, 35, 36, 39, 41, 42, 43, 44, 47, 48, 51, 52, 53, 55, 57, 58, 60, 65, 67, 68, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 108, 109, 111, 112, 114, 115, 117, 118, 121, 124, 132, 133, 134, 136, 138, 143, 144, 145, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 201, 202, 203], "when": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 32, 34, 36, 42, 43, 44, 47, 52, 53, 57, 58, 71, 73, 87, 89, 103, 108, 109, 111, 112, 121, 122, 144, 161, 163, 166, 168, 171, 174, 175, 176, 180, 181, 182, 183, 184, 186, 187, 189, 190, 192, 193, 194, 196, 197, 200, 201, 202, 203], "one": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 32, 43, 45, 47, 52, 53, 57, 58, 64, 103, 109, 111, 112, 122, 143, 163, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 181, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 197, 198, 199, 200], "want": [0, 2, 3, 4, 5, 6, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 41, 44, 47, 53, 57, 58, 68, 103, 109, 112, 121, 136, 161, 163, 166, 167, 168, 170, 173, 174, 175, 176, 177, 179, 181, 183, 184, 186, 187, 191, 192, 193, 196, 197, 199], "have": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 52, 53, 55, 57, 58, 103, 109, 112, 121, 143, 166, 168, 169, 170, 171, 172, 173, 176, 177, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 193, 196, 197, 199, 200, 201, 202, 203], "faster": [0, 2, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 22, 34, 35, 53, 57, 58, 103, 177, 181, 191], "retriev": [0, 1, 2, 3, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 41, 42, 53, 57, 58, 71, 73, 87, 89, 103, 143, 144, 187, 194], "embed": [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26, 36, 42, 44, 53, 57, 58, 103, 109, 110, 112, 119, 126, 134, 164, 168, 170, 171, 172, 179, 181, 182, 186, 187, 188, 190, 193, 194, 196, 199, 200, 201, 202, 203], "e": [0, 1, 2, 3, 4, 5, 6, 8, 9, 16, 111, 143, 163, 173, 175, 176, 180, 181, 183, 184, 186, 187, 191, 192, 193, 200, 201], "match": [0, 2, 4, 5, 6, 8, 9, 12, 13, 14, 16, 17, 18, 20, 21, 28, 29, 47, 52, 53, 55, 57, 58, 71, 73, 87, 89, 103, 109, 110, 111, 112, 121, 124, 126, 131, 134, 164, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 193, 194, 196, 200, 201, 202, 203], "thi": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 34, 36, 41, 42, 43, 44, 47, 52, 53, 55, 57, 58, 61, 64, 71, 72, 73, 77, 87, 88, 89, 94, 98, 99, 103, 104, 108, 109, 111, 112, 116, 117, 119, 121, 123, 124, 132, 133, 134, 136, 143, 154, 161, 163, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], "featur": [0, 1, 2, 3, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 109, 112, 119, 133, 161, 162, 164, 165, 166, 169, 170, 171, 173, 177, 178, 181, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201], "requir": [0, 2, 3, 4, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 28, 37, 53, 55, 57, 58, 63, 79, 95, 103, 109, 112, 119, 133, 163, 165, 166, 169, 171, 179, 180, 181, 190, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203], "you": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 37, 41, 42, 43, 44, 47, 53, 57, 58, 68, 71, 73, 87, 89, 103, 109, 111, 112, 121, 132, 134, 143, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "instal": [0, 2, 5, 6, 8, 9, 14, 37, 53, 103, 163, 165, 169, 181, 192, 193, 195, 196, 197, 198], "via": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 39, 41, 43, 52, 53, 57, 58, 103, 163, 164, 165, 167, 169, 171, 173, 180, 181, 182, 183, 184, 187, 190, 193, 196, 197, 198, 199, 200, 201], "pip": [0, 2, 5, 6, 8, 9, 14, 53, 103, 163, 165, 169, 181, 192, 193, 195, 196, 197, 198, 199, 201], "docarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 197, 198], "instanti": [0, 2, 5, 6, 8, 18, 53, 57, 103, 164], "storag": [0, 1, 2, 3, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 29, 41, 53, 57, 58, 103, 168, 194, 200], "like": [0, 3, 4, 5, 9, 14, 16, 17, 18, 19, 20, 21, 34, 38, 41, 44, 53, 57, 58, 65, 70, 75, 80, 91, 97, 102, 103, 109, 112, 114, 119, 121, 122, 127, 133, 139, 163, 165, 166, 168, 169, 170, 171, 175, 177, 179, 181, 183, 186, 188, 189, 190, 191, 192, 193, 194, 196, 197, 200, 202, 203], "so": [0, 1, 3, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 41, 53, 55, 57, 58, 103, 109, 112, 132, 163, 168, 172, 173, 174, 181, 183, 184, 187, 190, 191, 196, 197, 200], "from": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 24, 26, 28, 29, 32, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 47, 48, 51, 53, 55, 57, 58, 60, 65, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 104, 108, 109, 111, 112, 115, 117, 121, 122, 124, 125, 128, 130, 131, 132, 133, 134, 136, 143, 144, 145, 154, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 174, 177, 178, 179, 182, 183, 184, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 202, 203], "import": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 26, 37, 53, 57, 58, 103, 108, 109, 145, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201], "da": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 36, 42, 51, 53, 57, 58, 103, 161, 163, 166, 167, 168, 170, 172, 177, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 200], "n_dim": [0, 2, 4, 5, 6, 8, 13, 14, 17, 18, 53, 57, 59, 60, 61, 71, 72, 81, 82, 84, 87, 88, 98, 99, 103, 109, 112, 119, 168, 194], "10": [0, 1, 2, 3, 4, 5, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 124, 168, 169, 177, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 199], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 32, 35, 41, 43, 47, 48, 51, 53, 55, 57, 58, 60, 65, 68, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 108, 109, 111, 112, 121, 124, 133, 136, 161, 163, 165, 168, 169, 170, 171, 172, 173, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203], "would": [0, 1, 2, 3, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103, 168, 173, 175, 179, 183, 185, 187, 200], "same": [0, 1, 2, 3, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 32, 41, 42, 43, 44, 47, 53, 57, 58, 71, 73, 87, 89, 103, 109, 112, 121, 145, 166, 168, 169, 171, 173, 176, 179, 180, 181, 183, 184, 187, 189, 193, 196, 197, 198, 202, 203], "ordinari": [0, 2, 5, 6, 8], "To": [0, 2, 3, 4, 5, 6, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 34, 42, 43, 53, 57, 58, 103, 109, 112, 132, 161, 162, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 185, 188, 190, 191, 193, 194, 197, 199, 203], "access": [0, 1, 2, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 116, 164, 171, 173, 176, 178, 180, 188, 189, 193, 194, 197, 200], "formerli": [0, 2, 5, 7, 8], "persist": [0, 2, 3, 5, 7, 8, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "specifi": [0, 1, 2, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 24, 28, 29, 32, 34, 42, 44, 53, 57, 58, 71, 73, 87, 89, 103, 109, 111, 134, 136, 163, 171, 174, 176, 181, 184, 186, 187, 188, 190, 193, 194, 197, 202, 203], "data_path": [0, 3, 4, 13, 14, 59, 60, 61, 64, 168, 194], "data": [0, 1, 2, 3, 4, 6, 8, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 23, 34, 35, 36, 39, 46, 47, 53, 57, 58, 60, 65, 69, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 109, 111, 112, 114, 115, 117, 118, 121, 122, 124, 125, 128, 130, 132, 133, 134, 136, 144, 154, 167, 168, 170, 171, 173, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], "summari": [0, 2, 5, 6, 7, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 124, 166, 167, 168, 170, 171, 174, 176, 177, 180, 182, 183, 184, 185, 187, 188, 192, 193, 194], "note": [0, 1, 3, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 24, 32, 35, 42, 53, 57, 58, 103, 109, 112, 119, 133, 134, 136, 143, 161, 163, 169, 178, 180, 181, 184, 185, 186, 187, 190, 197, 198, 199, 202, 203], "mandatori": [0, 5, 6], "befor": [0, 1, 5, 9, 14, 15, 16, 17, 18, 19, 20, 21, 24, 32, 43, 53, 55, 57, 58, 103, 134, 161, 163, 166, 168, 170, 171, 172, 173, 191, 196, 197, 199], "backend": [0, 1, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 42, 43, 53, 57, 58, 59, 60, 66, 68, 71, 73, 76, 81, 87, 89, 93, 98, 103, 181, 188], "other": [0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 29, 42, 47, 53, 55, 57, 58, 68, 71, 73, 87, 89, 103, 104, 109, 134, 143, 154, 163, 164, 166, 171, 175, 177, 179, 181, 191, 193, 194, 197, 200, 201, 202, 203], "function": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 34, 35, 36, 37, 38, 42, 43, 44, 45, 48, 49, 51, 52, 53, 55, 57, 58, 60, 61, 63, 71, 72, 77, 78, 79, 88, 94, 95, 98, 99, 103, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 128, 130, 132, 133, 134, 136, 143, 161, 163, 166, 168, 171, 174, 175, 178, 179, 186, 187, 188, 190, 191, 197, 200, 202, 203], "behav": [0, 2, 5, 6, 7, 8, 134, 183], "memori": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 34, 43, 53, 57, 58, 59, 103, 166, 176, 185, 186, 189, 190, 193, 200, 201], "follow": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 29, 45, 53, 55, 57, 58, 68, 71, 73, 87, 89, 103, 109, 112, 124, 161, 163, 165, 166, 170, 171, 172, 173, 176, 177, 178, 179, 181, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 196, 197, 198, 199, 201], "set": [0, 2, 3, 4, 5, 6, 7, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 32, 34, 36, 41, 42, 43, 44, 47, 48, 53, 55, 57, 58, 71, 73, 87, 89, 103, 108, 109, 111, 112, 113, 115, 117, 119, 121, 124, 127, 132, 133, 134, 145, 161, 171, 173, 174, 175, 176, 177, 179, 181, 183, 184, 185, 186, 187, 190, 191, 193, 200], "name": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 14, 16, 17, 18, 19, 20, 21, 24, 26, 28, 32, 36, 41, 44, 53, 55, 57, 58, 59, 60, 64, 98, 99, 103, 104, 109, 111, 112, 114, 133, 136, 154, 167, 170, 171, 173, 175, 183, 184, 186, 188, 192, 193, 194, 202, 203], "descript": [0, 2, 5, 6, 7, 8, 12, 40, 108, 154, 155, 156, 157, 166, 170, 171, 173, 179, 180, 188, 193, 202, 203], "default": [0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 24, 26, 29, 32, 35, 36, 39, 41, 42, 43, 48, 53, 57, 58, 60, 65, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 104, 108, 109, 111, 112, 117, 121, 134, 136, 154, 171, 174, 181, 186, 187, 190, 191, 192, 193, 197], "number": [0, 1, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 42, 43, 45, 48, 53, 57, 58, 60, 65, 67, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 99, 102, 103, 104, 109, 111, 112, 117, 119, 122, 124, 136, 143, 144, 145, 154, 163, 170, 175, 187, 188, 200, 202, 203], "dimens": [0, 1, 2, 5, 6, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103, 109, 111, 112, 119, 144, 169, 202, 203], "alwai": [0, 5, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 44, 53, 57, 58, 103, 145, 164, 167, 170, 171, 172, 178, 179, 181, 184, 186, 190, 202, 203], "folder": [0, 14, 16, 17, 18, 19, 20, 21, 41, 44, 53, 57, 58, 103, 197], "where": [0, 2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 34, 41, 42, 44, 51, 53, 57, 58, 103, 109, 112, 132, 143, 145, 168, 169, 170, 174, 183, 184, 191, 193, 197, 199, 200, 201], "locat": [0, 6, 12, 109, 110, 112, 126, 134, 179, 181, 193, 202, 203], "A": [0, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 47, 48, 52, 53, 55, 56, 57, 58, 78, 103, 109, 136, 163, 165, 168, 170, 171, 173, 175, 179, 184, 188, 190, 198, 202, 203], "random": [0, 4, 5, 7, 9, 10, 14, 16, 17, 18, 19, 20, 21, 44, 48, 53, 57, 58, 103, 136, 176, 177, 183, 186, 187, 190, 194, 195, 196, 200], "temp": [0, 7], "metric": [0, 1, 2, 4, 5, 6, 8, 13, 14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 53, 57, 58, 59, 60, 61, 71, 73, 87, 89, 103, 131, 138, 143, 168, 179, 187, 190, 194, 202, 203], "distanc": [0, 2, 5, 6, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 58, 59, 71, 72, 73, 81, 82, 83, 87, 88, 89, 98, 99, 103, 137, 144, 190], "dure": [0, 1, 3, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 41, 52, 53, 57, 58, 103, 109, 168, 176, 200], "cosin": [0, 2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 58, 60, 61, 71, 72, 73, 81, 82, 87, 88, 89, 103, 131, 137, 138, 139, 141, 142, 166, 168, 183, 190, 194], "dot": [0, 5, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 179], "euclidean": [0, 4, 5, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 137, 138, 139, 141, 142, 190], "ef_construct": [0, 1, 2, 5, 6, 8, 13, 14, 18, 53, 57, 59, 60, 61, 71, 72, 81, 82, 87, 88, 98, 99, 103, 194], "size": [0, 1, 2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 27, 32, 35, 38, 39, 43, 44, 53, 57, 58, 60, 64, 103, 109, 111, 112, 121, 124, 163, 165, 166, 169, 170, 188, 193], "dynam": [0, 1, 2, 8, 179, 200, 202, 203], "list": [0, 1, 2, 3, 6, 8, 9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 28, 29, 32, 34, 38, 39, 41, 46, 47, 48, 50, 52, 53, 57, 58, 60, 61, 64, 65, 70, 71, 72, 73, 75, 76, 80, 81, 82, 86, 87, 88, 89, 91, 93, 97, 98, 99, 102, 103, 109, 110, 111, 112, 126, 127, 134, 136, 143, 145, 164, 171, 175, 177, 179, 180, 181, 183, 184, 187, 189, 190, 192, 196, 200, 201, 202, 203], "nearest": [0, 2, 3, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 187, 188, 201], "neighbor": [0, 1, 2, 3, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103, 109, 112, 121], "construct": [0, 1, 2, 3, 5, 8, 109, 134, 170, 172, 173, 179, 184, 189], "none": [0, 1, 2, 3, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 48, 52, 53, 57, 58, 60, 61, 64, 65, 69, 70, 71, 72, 73, 75, 76, 80, 81, 82, 86, 87, 88, 89, 91, 93, 94, 96, 97, 98, 99, 102, 103, 104, 108, 109, 110, 111, 112, 117, 121, 124, 125, 127, 131, 132, 133, 134, 136, 143, 144, 145, 148, 149, 154, 155, 166, 172, 175, 181, 185, 187, 193, 194, 196], "valu": [0, 1, 2, 3, 4, 5, 6, 8, 9, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 32, 39, 42, 43, 44, 47, 51, 53, 55, 57, 58, 60, 65, 67, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 104, 107, 108, 109, 112, 121, 123, 125, 132, 134, 136, 143, 144, 145, 149, 154, 155, 156, 157, 161, 166, 167, 168, 170, 171, 174, 175, 176, 179, 181, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 195, 196, 200], "packag": [0, 1, 133, 160, 162, 171, 177, 199, 200, 201], "ef_search": [0, 13, 14, 59, 60, 61, 194], "max_connect": [0, 1, 8, 13, 14, 59, 60, 61, 98, 99, 103, 194], "bi": [0, 1], "direct": [0, 1, 64], "link": [0, 1], "creat": [0, 1, 9, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 32, 34, 53, 55, 57, 58, 64, 67, 103, 108, 109, 111, 112, 133, 134, 136, 164, 165, 166, 168, 170, 171, 172, 175, 184, 187, 193, 194, 200], "everi": [0, 1, 4, 14, 16, 17, 18, 19, 20, 21, 24, 43, 44, 47, 53, 57, 58, 103, 161, 176, 187, 191, 201], "new": [0, 1, 4, 8, 14, 16, 17, 18, 19, 20, 21, 24, 43, 45, 53, 57, 58, 64, 67, 103, 108, 109, 112, 121, 134, 136, 161, 173, 184, 185, 194, 197, 200, 201], "element": [0, 1, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 34, 35, 36, 39, 42, 43, 48, 53, 55, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 143, 145, 163, 179, 181, 183, 184, 189, 190, 191, 193, 200, 202, 203], "n_compon": [0, 13, 14, 59, 60, 61], "output": [0, 4, 6, 14, 16, 17, 18, 19, 20, 21, 23, 24, 36, 43, 44, 48, 53, 57, 58, 103, 109, 112, 119, 121, 124, 136, 161, 166, 168, 170, 181, 186, 196, 197, 198, 199, 200], "pca": 0, "model": [0, 8, 14, 16, 17, 18, 19, 20, 21, 26, 46, 50, 53, 57, 58, 103, 109, 112, 121, 128, 130, 134, 164, 165, 168, 170, 172, 173, 177, 178, 181, 186, 193, 197, 202, 203], "should": [0, 3, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 40, 43, 53, 57, 58, 68, 103, 109, 111, 112, 119, 124, 132, 134, 161, 163, 172, 173, 176, 177, 181, 187, 190, 191, 199, 200, 201], "posit": [0, 1, 3, 4, 8, 14, 16, 18, 19, 20, 53, 57, 58, 60, 65, 69, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 143, 179, 202, 203], "less": [0, 1, 6, 8, 136, 161, 181, 188, 193], "than": [0, 1, 2, 3, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 57, 58, 103, 109, 112, 132, 136, 168, 175, 177, 184, 187, 188, 191, 193, 202, 203], "": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 26, 29, 41, 47, 53, 55, 57, 58, 60, 65, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 136, 162, 163, 166, 168, 169, 170, 172, 175, 177, 182, 183, 186, 187, 188, 190, 191, 193, 196, 197, 198, 200, 201], "check": [0, 3, 4, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 55, 57, 58, 103, 145, 166, 175, 181, 184, 187, 193, 196, 197, 201], "sourc": [0, 3, 6, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 138, 139, 141, 142, 143, 144, 145, 148, 149, 154, 155, 156, 157, 158, 162, 165, 192, 197, 201], "code": [0, 1, 2, 4, 5, 6, 8, 9, 11, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 109, 112, 116, 151, 153, 172, 173, 175, 185, 191, 192, 193, 200, 201], "restrict": [0, 2, 5, 6, 8, 55, 109, 112, 133, 162, 170, 184, 193, 196], "user": [0, 1, 2, 3, 4, 5, 6, 8, 9, 11, 14, 17, 20, 53, 58, 103, 109, 161, 163, 173, 177, 185, 188, 189, 190, 193, 196, 197], "defin": [0, 2, 3, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 36, 52, 53, 57, 58, 103, 108, 111, 163, 166, 168, 170, 173, 174, 175, 181, 185, 187, 188, 190, 196, 202, 203], "guidelin": [0, 2, 5, 8], "provid": [0, 1, 2, 3, 4, 6, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 25, 28, 29, 30, 31, 38, 42, 43, 47, 48, 49, 53, 55, 57, 58, 61, 68, 71, 72, 73, 74, 77, 78, 87, 88, 89, 90, 94, 99, 101, 103, 109, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 128, 130, 131, 132, 133, 143, 163, 168, 171, 173, 178, 179, 181, 183, 184, 187, 191, 193, 200], "repositori": [0, 1, 172], "consid": [0, 1, 2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 42, 51, 53, 57, 58, 71, 73, 87, 89, 103, 109, 111, 112, 119, 143, 168, 171, 173, 184, 185, 187, 188, 189, 193, 197], "certain": [0, 2, 4, 8, 14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 103, 163, 168, 180, 184, 196], "tag": [0, 1, 4, 5, 8, 12, 14, 16, 17, 18, 19, 20, 21, 24, 28, 29, 32, 36, 53, 55, 57, 58, 71, 73, 87, 89, 103, 109, 110, 112, 119, 126, 133, 134, 166, 167, 168, 171, 173, 176, 179, 181, 183, 187, 188, 193, 202, 203], "price": [0, 2, 4, 5, 6, 8, 14, 17], "all": [0, 1, 2, 3, 4, 6, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 29, 34, 36, 41, 42, 44, 47, 51, 52, 53, 55, 57, 58, 71, 73, 87, 89, 103, 104, 109, 112, 117, 121, 127, 132, 134, 143, 145, 154, 161, 163, 166, 168, 170, 171, 173, 174, 175, 177, 178, 183, 184, 185, 187, 188, 189, 191, 193, 195, 196, 197, 198, 199, 200, 201], "lower": [0, 2, 5, 6, 8, 181], "equal": [0, 1, 2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 22, 44, 53, 57, 58, 103, 187, 188], "some": [0, 1, 2, 3, 4, 6, 8, 9, 10, 17, 20, 104, 109, 154, 161, 162, 163, 164, 166, 168, 171, 173, 177, 180, 181, 183, 185, 187, 188, 190, 191, 192, 196, 197, 198, 199, 200], "max_pric": [0, 2, 4, 5, 6, 8, 14], "index": [0, 1, 2, 3, 5, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 29, 31, 44, 49, 51, 53, 57, 58, 59, 60, 65, 66, 67, 69, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 109, 112, 132, 136, 168, 179, 194, 199, 200, 201, 202, 203], "numpi": [0, 2, 3, 4, 5, 6, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 26, 34, 36, 53, 57, 58, 103, 109, 111, 112, 117, 127, 137, 138, 143, 144, 145, 166, 168, 171, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 190, 194, 195, 199, 200, 201], "np": [0, 2, 3, 4, 5, 6, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 29, 38, 53, 57, 58, 103, 131, 138, 139, 141, 142, 145, 166, 168, 175, 177, 181, 182, 183, 186, 187, 190, 194, 195, 196, 200], "3": [0, 1, 2, 4, 5, 6, 8, 9, 10, 14, 17, 109, 145, 170, 171, 175, 176, 177, 181, 183, 184, 185, 187, 190, 191, 192, 195, 196, 197, 199, 200, 201], "column": [0, 2, 4, 5, 6, 8, 13, 14, 16, 17, 18, 19, 20, 21, 36, 40, 53, 57, 58, 59, 60, 61, 71, 72, 81, 82, 87, 88, 98, 99, 103, 167, 170, 171, 173, 194, 200], "float": [0, 2, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 28, 29, 38, 40, 42, 44, 53, 57, 58, 60, 61, 71, 72, 73, 87, 88, 89, 98, 99, 103, 109, 110, 111, 112, 117, 121, 126, 131, 134, 139, 141, 142, 143, 144, 145, 154, 155, 156, 157, 179, 202, 203], "extend": [0, 1, 2, 3, 4, 5, 6, 8, 13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 60, 65, 66, 69, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 168, 185, 187, 191, 194], "id": [0, 1, 2, 3, 4, 5, 6, 8, 9, 12, 14, 16, 17, 18, 19, 20, 21, 24, 28, 29, 32, 42, 44, 53, 57, 58, 64, 69, 71, 73, 87, 89, 98, 99, 103, 109, 110, 112, 121, 124, 126, 134, 136, 163, 166, 167, 168, 169, 170, 175, 176, 177, 179, 180, 181, 182, 183, 185, 187, 188, 190, 192, 193, 194, 195, 196, 198, 201, 202, 203], "f": [0, 2, 4, 5, 6, 8, 14, 17, 55, 166, 169, 190, 191, 197, 200], "r": [0, 1, 2, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 34, 38, 52, 53, 57, 58, 103, 111, 143, 168, 170, 184, 188, 192, 197, 200], "rang": [0, 1, 2, 4, 5, 6, 8, 14, 15, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 144, 185, 187, 188, 192, 194, 200], "print": [0, 2, 4, 5, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 124, 162, 163, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 181, 183, 184, 185, 186, 187, 188, 190, 191, 193, 195, 196, 198, 201], "nindex": [0, 2, 5, 6, 8], "n": [0, 2, 5, 6, 8, 138, 168, 200, 202, 203], "tags__pric": [0, 2, 5, 6, 8], "t": [0, 1, 2, 4, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 34, 35, 36, 37, 38, 39, 41, 43, 46, 47, 50, 52, 53, 57, 58, 68, 103, 104, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 125, 127, 128, 130, 131, 132, 133, 154, 163, 168, 173, 176, 177, 181, 184, 187, 196, 197, 200], "Then": [0, 2, 5, 6, 8, 166, 186, 189, 193, 196], "whose": [0, 2, 6, 8, 109, 112, 121, 188, 199], "appli": [0, 1, 2, 6, 8, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 35, 36, 43, 47, 52, 53, 55, 57, 58, 71, 73, 87, 89, 103, 109, 112, 121, 143, 161, 166, 168, 171, 173, 183, 187, 191, 196, 197], "n_limit": [0, 2, 4, 5, 6, 8, 14], "4": [0, 1, 2, 4, 5, 6, 8, 9, 10, 14, 145, 170, 177, 184, 185, 187, 190, 191], "lte": [0, 2, 4, 5, 14, 188], "result": [0, 2, 3, 4, 5, 6, 9, 14, 16, 17, 18, 19, 20, 21, 24, 28, 29, 42, 43, 47, 53, 57, 58, 71, 73, 87, 89, 103, 109, 112, 119, 170, 181, 183, 187, 190, 191, 193, 195, 197, 200], "return": [0, 2, 3, 6, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 57, 58, 60, 64, 65, 67, 70, 71, 73, 75, 76, 77, 80, 81, 83, 84, 86, 87, 89, 91, 93, 96, 97, 98, 99, 102, 103, 104, 107, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 138, 139, 141, 142, 143, 144, 145, 148, 149, 154, 156, 157, 166, 168, 174, 180, 183, 184, 191, 194, 197, 199, 200], "verifi": [0, 2, 6, 8], "most": [0, 1, 2, 3, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 42, 47, 53, 57, 58, 103, 161, 165, 166, 173, 175, 176, 181, 184, 193, 199, 201], "satisfi": [0, 2, 6, 8, 109, 112, 115, 117, 132, 171], "condit": [0, 1, 2, 6, 8, 55, 56], "0": [0, 1, 2, 4, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 22, 27, 38, 42, 44, 45, 51, 53, 57, 58, 67, 93, 94, 103, 109, 111, 112, 117, 121, 132, 138, 143, 144, 145, 170, 171, 172, 175, 177, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201], "1": [0, 1, 2, 4, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 42, 44, 45, 51, 52, 53, 57, 58, 64, 67, 103, 108, 109, 111, 112, 117, 121, 124, 131, 132, 136, 143, 144, 145, 161, 170, 171, 172, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203], "2": [0, 1, 2, 4, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 46, 47, 51, 52, 53, 55, 57, 58, 103, 109, 112, 114, 128, 138, 139, 141, 142, 145, 170, 171, 175, 176, 177, 181, 183, 184, 185, 187, 188, 190, 191, 192, 193, 196, 200, 201, 202, 203], "up": [0, 1, 2, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103, 191, 197, 199, 201], "9": [0, 1, 2, 5, 6, 8, 17, 20, 145, 187], "ha": [0, 1, 2, 3, 4, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 35, 44, 53, 57, 58, 103, 109, 112, 121, 124, 163, 166, 167, 168, 170, 171, 173, 177, 179, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 199], "we": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 136, 163, 166, 168, 169, 171, 172, 173, 177, 181, 183, 184, 185, 187, 188, 189, 190, 191, 195, 196, 197, 198, 199, 200, 201], "ones": [0, 2, 4, 5, 6, 8, 17, 164, 183, 184, 185, 193], "8": [0, 1, 2, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 35, 36, 39, 53, 57, 58, 103, 109, 111, 112, 115, 117, 132, 145, 175, 188, 202, 203], "must": [0, 2, 3, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 68, 71, 73, 87, 89, 103, 181, 184, 191, 202, 203], "As": [0, 1, 2, 3, 4, 5, 8, 163, 168, 175, 181, 183, 185, 191, 197, 199, 200], "an": [0, 1, 2, 3, 4, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 32, 34, 43, 44, 52, 53, 55, 57, 58, 71, 73, 87, 89, 98, 99, 103, 108, 109, 111, 112, 114, 119, 121, 124, 132, 134, 161, 163, 166, 168, 171, 172, 173, 174, 175, 178, 179, 181, 182, 183, 184, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203], "let": [0, 2, 3, 4, 5, 6, 8, 9, 10, 138, 162, 163, 166, 168, 169, 171, 172, 173, 175, 177, 179, 183, 184, 186, 187, 188, 189, 190, 191, 196, 200], "encod": [0, 2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 35, 36, 39, 53, 57, 58, 103, 109, 111, 112, 115, 117, 125, 132, 133, 134, 168, 172, 202, 203], "inform": [0, 2, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 36, 41, 53, 57, 58, 103, 136, 163, 170, 171, 173, 175, 176, 177, 179, 181, 184, 185, 187, 193], "propos": [0, 2, 5, 6, 8], "implement": [0, 1, 2, 4, 5, 8, 9, 10, 14, 20, 26, 53, 58, 63, 65, 68, 70, 74, 75, 79, 80, 90, 91, 95, 97, 101, 102, 103, 161, 184, 189, 191, 193, 196], "7": [0, 1, 2, 4, 5, 6, 8, 145, 172, 185, 187, 190, 199, 201, 202, 203], "np_queri": [0, 2, 4, 5, 6, 8, 17], "nqueri": [0, 2, 5, 6, 8], "limit": [0, 2, 3, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 35, 42, 53, 55, 57, 58, 71, 73, 87, 89, 103, 109, 112, 131, 133, 168, 183, 187, 190, 197, 200], "nembed": [0, 2, 5, 6, 8], "neighbour": [0, 2, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 180, 187, 188], "zip": [0, 2, 5, 8, 111], "tembed": [0, 2, 5, 6, 8], "6": [0, 1, 2, 4, 5, 6, 8, 143, 145, 168, 177, 184, 187, 190, 200], "5": [0, 1, 2, 4, 5, 6, 8, 143, 145, 172, 177, 184, 185, 187, 188, 190, 191, 192, 193, 195, 197], "randomli": [1, 14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 103, 136], "gener": [1, 3, 5, 8, 12, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 34, 38, 43, 44, 48, 53, 57, 58, 68, 103, 109, 112, 121, 124, 132, 133, 134, 136, 151, 153, 161, 164, 167, 169, 175, 185, 200, 202, 203], "uniform": 1, "distribut": [1, 55, 136], "support": [1, 3, 4, 6, 8, 9, 14, 15, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 58, 60, 65, 68, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 109, 114, 117, 121, 122, 132, 133, 145, 168, 171, 178, 181, 184, 186, 188, 191, 192, 193, 196, 199, 200], "includ": [1, 3, 11, 55, 109, 111, 112, 121, 132, 134, 161, 170, 181, 194, 196, 197, 200, 201], "classic": 1, "databas": [1, 3, 4, 6, 7, 8, 58, 64, 136, 161, 168, 201], "vector": [1, 3, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103, 166, 168, 177, 186, 201], "under": [1, 3, 4, 55, 143, 161, 168, 171, 173, 183, 193, 194, 199, 200, 201], "api": [1, 3, 8, 9, 163, 168, 172, 173, 175, 176, 181, 184, 186, 189, 191, 193, 196, 197, 200, 201], "usag": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 108, 136, 161, 176, 193, 196], "version": [1, 2, 3, 5, 6, 8, 68, 136, 161, 192, 193, 199, 201], "In": [1, 3, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 34, 43, 53, 57, 58, 71, 73, 87, 89, 103, 109, 112, 132, 165, 167, 168, 169, 170, 171, 172, 173, 175, 177, 179, 181, 183, 185, 187, 189, 190, 193, 196, 197, 198, 199, 200, 201, 202, 203], "16": [1, 6, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 183, 191], "sqlite": [1, 3, 4, 12, 13, 17, 59], "weaviat": [1, 4, 12, 13, 17, 59, 201], "qdrant": [1, 4, 12, 13, 59, 201], "annlit": [1, 4, 5, 12, 13, 17, 59, 168, 194, 201], "anlit": 1, "elasticsearch": [1, 4, 17, 18, 201], "redi": [1, 4, 12, 13, 17, 59, 201], "focu": 1, "task": [1, 40, 166, 193, 197, 200], "add": [1, 8, 16, 17, 19, 134, 163, 166, 170, 180, 181, 184, 185, 187, 193, 197], "read": [1, 2, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103, 109, 111, 112, 115, 117, 161, 167, 170, 171, 173, 175, 176, 178, 181, 185, 200, 201], "exist": [1, 3, 6, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 41, 43, 44, 47, 53, 55, 57, 58, 103, 172, 173, 180, 188, 192], "some_id": 1, "updat": [1, 2, 3, 4, 8, 66, 68, 69, 134, 144, 184, 193, 194, 197, 200], "delet": [1, 3, 4, 7, 8, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 183, 184, 193, 194], "del": [1, 183, 184], "find": [1, 2, 4, 6, 13, 14, 16, 17, 18, 19, 20, 21, 53, 55, 57, 58, 59, 60, 71, 76, 81, 87, 98, 103, 144, 164, 168, 181, 185, 186, 188, 191, 194, 198, 199], "boolean": [1, 2, 6, 18, 71, 72, 188, 202, 203], "filter": [1, 9, 14, 16, 17, 18, 19, 20, 21, 24, 29, 32, 42, 52, 53, 57, 58, 71, 73, 87, 89, 103, 111, 136, 181, 184, 193], "describ": [1, 138, 161, 175, 176, 181, 188, 190, 192, 193, 197], "queri": [1, 3, 4, 5, 9, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 56, 57, 58, 71, 73, 87, 89, 103, 109, 112, 124, 143, 166, 168, 194, 197, 201], "approxim": [1, 2, 3, 4, 6, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103, 187], "abov": [1, 3, 4, 8, 9, 55, 68, 166, 171, 173, 178, 190, 192, 193, 200], "ar": [1, 3, 4, 5, 6, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 24, 28, 32, 34, 35, 42, 47, 52, 53, 55, 57, 58, 68, 103, 104, 109, 111, 112, 119, 121, 132, 134, 143, 145, 154, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 175, 176, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], "often": [1, 3, 4, 8, 163, 167, 168, 177, 178, 179, 181, 191, 193, 196, 197, 200, 202, 203], "atom": 1, "oper": [1, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 68, 103, 199, 202, 203], "high": [1, 3, 8, 10, 162, 172, 173, 200], "level": [1, 3, 8, 10, 47, 136, 162, 164, 166, 173, 179, 183, 184, 191, 193, 194, 200, 202, 203], "henc": [1, 163, 165, 167, 181, 191, 192, 200], "understand": [1, 4, 176, 196, 198, 200], "perform": [1, 2, 3, 4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103, 134, 136, 164, 179, 191, 199, 200, 202, 203], "give": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 35, 44, 53, 57, 58, 103, 108, 163, 176, 181, 183, 191, 196, 197, 199], "good": [1, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 167, 200], "estim": [1, 193], "differ": [1, 3, 4, 6, 14, 16, 17, 18, 19, 20, 21, 42, 44, 52, 53, 57, 58, 103, 109, 112, 121, 122, 166, 168, 174, 176, 181, 183, 187, 188, 191, 193, 200], "interest": [1, 163, 184, 194, 196], "singl": [1, 2, 3, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 43, 44, 52, 53, 57, 58, 68, 103, 109, 112, 124, 163, 171, 181, 190, 192, 196, 197], "which": [1, 2, 3, 4, 6, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 32, 34, 35, 36, 39, 41, 43, 53, 55, 57, 58, 68, 103, 109, 111, 112, 115, 118, 119, 121, 124, 133, 134, 136, 161, 163, 166, 168, 169, 171, 172, 173, 175, 176, 177, 179, 181, 184, 188, 191, 193, 195, 199, 200, 202, 203], "mean": [1, 4, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 109, 112, 117, 121, 143, 162, 169, 171, 174, 175, 177, 178, 183, 187, 190, 192, 194, 196, 197, 199], "evalu": [1, 4, 12, 13, 14, 16, 17, 18, 19, 20, 21, 53, 54, 55, 56, 57, 58, 103, 109, 110, 112, 126, 134, 137, 179, 180, 181, 189, 193, 200, 201, 202, 203], "time": [1, 2, 4, 5, 6, 10, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 136, 166, 168, 169, 173, 181, 190, 193, 200], "repeatedli": [1, 4], "report": 1, "averag": [1, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 143, 187, 200], "conduct": [1, 163, 187, 191, 193, 200], "end": [1, 8, 14, 15, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 109, 112, 132, 168, 179, 202, 203], "call": [1, 2, 3, 4, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 171, 174, 177, 181, 192, 196], "just": [1, 3, 4, 8, 9, 136, 163, 168, 171, 183, 184, 188, 198], "underli": [1, 4], "therefor": [1, 3, 6, 68, 200], "particular": [1, 4, 14, 16, 17, 18, 19, 20, 21, 36, 53, 55, 57, 58, 103, 111, 193], "influenc": 1, "neg": [1, 202, 203], "our": [1, 4, 14, 17, 20, 53, 58, 103, 109, 166, 169, 170, 173, 177, 184, 186, 187, 191, 201], "interfac": [1, 2, 3, 161, 162, 181, 185, 188, 189, 200], "If": [1, 2, 3, 4, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 32, 34, 42, 43, 44, 47, 48, 53, 55, 57, 58, 71, 73, 87, 89, 103, 109, 111, 112, 121, 124, 143, 161, 166, 167, 168, 170, 171, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201], "spot": 1, "bottleneck": 1, "thrill": 1, "know": [1, 4, 8, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 111, 168, 173, 184, 189, 191, 193, 200, 201], "about": [1, 2, 4, 5, 6, 8, 9, 161, 170, 171, 173, 174, 176, 181, 183, 184, 190, 193, 197, 200, 201], "improv": [1, 4, 191, 197, 198, 200], "similar": [1, 2, 6, 8, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 166, 168, 181, 183, 190, 191, 193, 200], "algorithm": [1, 6, 8, 14, 16, 17, 18, 19, 20, 21, 23, 34, 53, 57, 58, 103, 136, 163, 165, 173, 193], "onli": [1, 3, 5, 9, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 34, 35, 41, 42, 43, 44, 53, 55, 57, 58, 71, 73, 87, 89, 103, 109, 111, 112, 121, 133, 143, 161, 169, 170, 171, 173, 174, 175, 176, 181, 184, 185, 186, 187, 190, 191, 193, 196, 200], "paramet": [1, 2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 32, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 57, 58, 60, 64, 65, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 104, 108, 109, 111, 112, 114, 115, 117, 118, 119, 121, 122, 124, 125, 127, 128, 130, 132, 133, 134, 136, 138, 139, 141, 142, 143, 144, 145, 154, 169, 171, 181, 193, 194, 202, 203], "ef": [1, 8, 13, 59, 98, 99, 103], "hnsw": [1, 2, 5, 6, 8, 57, 87, 88], "might": [1, 2, 4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 43, 47, 53, 57, 58, 103, 166, 168, 187], "fix": [1, 109, 112, 119, 165, 193], "big": [1, 9, 10, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 108, 168, 184, 189, 190, 196, 200], "impact": 1, "even": [1, 3, 4, 8, 136, 170, 187, 196, 198], "configur": [1, 2, 3, 5, 8, 53, 103, 194, 198], "cannot": [1, 134], "easili": [1, 2, 3, 4, 10, 167, 168, 172, 173, 175, 185, 193, 196, 200], "compar": [1, 9, 14, 16, 17, 18, 19, 20, 21, 28, 34, 39, 44, 53, 57, 58, 103, 108, 165, 166, 171, 191], "research": 1, "showcas": [1, 4, 172], "what": [1, 2, 4, 6, 9, 163, 168, 169, 175, 191, 196, 197], "expect": [1, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 68, 103, 109, 112, 133, 161, 181, 183], "get": [1, 2, 3, 4, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 22, 34, 40, 45, 51, 53, 57, 58, 103, 104, 108, 109, 112, 113, 116, 132, 136, 145, 154, 163, 168, 175, 176, 179, 180, 181, 183, 184, 186, 187, 188, 193, 196, 197, 198, 201], "without": [1, 3, 14, 16, 17, 18, 19, 20, 21, 26, 42, 48, 53, 55, 57, 58, 103, 145, 168, 171, 172, 173, 183, 184, 193, 197], "tune": [1, 2], "hyper": 1, "practic": [1, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 173, 175, 184, 191, 193], "strongli": [1, 196], "recommend": [1, 4, 9, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 109, 112, 121, 161, 173, 176, 181, 193, 196, 200, 201], "them": [1, 3, 10, 14, 16, 17, 18, 19, 20, 21, 23, 42, 47, 53, 57, 58, 103, 161, 163, 164, 167, 168, 169, 170, 171, 172, 173, 177, 179, 181, 183, 184, 187, 190, 194, 196, 197, 198, 199, 200], "achiev": [1, 196], "qualiti": [1, 197], "tabl": [1, 3, 4, 7, 14, 16, 17, 18, 19, 20, 21, 40, 41, 53, 57, 58, 64, 103, 164, 171, 184, 193, 198], "summar": [1, 170, 184, 193, 197, 199], "smaller": [1, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 34, 35, 42, 43, 53, 57, 58, 103, 181, 184, 196], "better": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 163, 168, 182, 184, 191, 193, 199], "except": [1, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 43, 53, 55, 57, 58, 103, 190], "recal": [1, 143, 185], "best": [1, 4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 109, 112, 116, 144, 167, 181, 189, 193, 194], "each": [1, 3, 4, 7, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 32, 42, 43, 44, 45, 52, 53, 57, 58, 71, 73, 87, 89, 103, 109, 111, 112, 119, 121, 122, 138, 139, 141, 142, 145, 163, 164, 167, 168, 169, 170, 171, 173, 174, 175, 177, 179, 181, 184, 185, 187, 190, 191, 193, 194, 197, 202, 203], "highlight": [1, 40, 200], "bold": 1, "1m": 1, "m": [1, 2, 5, 6, 13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 59, 71, 72, 81, 82, 87, 88, 103, 168, 171, 183, 184, 187, 190, 199], "01": [1, 172], "39": 1, "43": 1, "00": [1, 197], "366": 1, "35": [1, 190], "62": 1, "31": 1, "23": [1, 196], "59": 1, "72": 1, "57": 1, "30": [1, 109, 112, 133, 188], "42": 1, "19": [1, 187], "286": 1, "50": [1, 184, 188], "14": [1, 188, 193], "605": 1, "51": 1, "612": 1, "33": 1, "27": [1, 6, 109, 112, 133], "94": 1, "13": [1, 8], "38": [1, 6], "242": 1, "02": [1, 172], "11": [1, 188, 191], "307": 1, "40": 1, "85": [1, 188], "74": 1, "656": 1, "446": 1, "77": 1, "24": [1, 197], "114": 1, "36": 1, "20": [1, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 131], "09": [1, 193], "227": 1, "608": 1, "44": 1, "22": [1, 188], "26": 1, "208": 1, "715": 1, "15": [1, 9, 184, 188], "58": 1, "650": 1, "83": 1, "convert": [1, 9, 14, 16, 17, 18, 19, 20, 21, 34, 39, 46, 50, 53, 57, 58, 60, 61, 66, 67, 71, 72, 87, 88, 98, 99, 103, 109, 112, 114, 115, 116, 119, 121, 122, 125, 127, 128, 130, 132, 133, 163, 164, 165, 167, 171, 172, 176, 193, 200], "per": [1, 5, 8, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 109, 112, 133, 134, 143, 144, 170, 171, 190], "second": [1, 4, 14, 16, 17, 18, 19, 20, 21, 47, 53, 55, 57, 58, 103, 109, 112, 133, 136, 144, 145, 166, 173, 183, 191, 196, 197, 201], "qp": 1, "dp": 1, "higher": [1, 8, 187], "610": 1, "305": 1, "345": 1, "71": [1, 6], "428": 1, "570": 1, "190": [1, 187], "70": 1, "3125": 1, "816": 1, "381": 1, "032": 1, "04": 1, "380": 1, "000": [1, 200], "152": 1, "216": 1, "033": 1, "34": 1, "604": 1, "664": [1, 181, 200], "241": 1, "002": 1, "90": [1, 187], "001": 1, "55": 1, "76": 1, "409": 1, "618": [1, 163, 166], "122": 1, "101": 1, "211": 1, "192": [1, 6, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 192, 197], "224": [1, 109, 112, 121, 163, 166], "125": 1, "824": 1, "769": 1, "759": 1, "106": 1, "49": 1, "448": 1, "615": 1, "48": [1, 6, 187], "111": 1, "620": 1, "435": 1, "200": [1, 6, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 196], "398": 1, "481": 1, "64": [1, 2, 5, 6, 10, 18, 53, 57, 71, 72, 81, 82, 87, 88, 109, 112, 121, 163, 178, 200], "now": [1, 3, 4, 8, 9, 10, 161, 163, 168, 172, 174, 183, 184, 185, 186, 187, 191, 193, 196, 197, 199, 200], "elabor": 1, "first": [1, 4, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 41, 44, 47, 53, 55, 57, 58, 60, 65, 67, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 109, 112, 115, 133, 136, 143, 144, 145, 163, 166, 167, 168, 169, 170, 171, 173, 179, 181, 183, 184, 186, 187, 188, 191, 197, 199, 200, 201], "128": [1, 2, 5, 6, 186, 194], "choos": [1, 4, 134, 190, 193], "two": [1, 4, 6, 8, 55, 109, 112, 121, 132, 145, 166, 168, 169, 171, 173, 180, 183, 187, 188, 191, 198], "reason": [1, 4, 8, 173, 181, 193, 196, 200], "common": [1, 2, 4, 6, 9, 10, 21, 33, 166, 167, 170, 171, 175, 176, 179, 181, 183, 184, 185, 187, 188, 192, 193, 194, 195, 198, 199, 200, 201], "sme": 1, "wise": [1, 191], "break": [1, 161, 168, 183], "point": [1, 4, 5, 109, 112, 121, 122, 164, 171, 175, 178, 187, 195, 197], "product": [1, 4, 9, 193, 197, 198, 200], "system": [1, 14, 16, 17, 18, 19, 20, 21, 23, 24, 36, 42, 43, 53, 57, 58, 103, 111, 197, 200, 202, 203], "structur": [1, 3, 8, 14, 16, 17, 18, 19, 20, 21, 28, 35, 44, 53, 57, 58, 103, 109, 112, 124, 165, 166, 170, 171, 173, 174, 176, 179, 182, 187, 189, 198, 200, 201, 202, 203], "94ee6627ee7f582e5e28124e78c3d2f9": 1, "49841760378680844": 1, "703959752118305": 1, "6920759535687985": 1, "10248648858410625": 1, "k": [1, 14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 103, 143, 144, 187, 190, 201], "indic": [1, 2, 4, 6, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 121, 124, 144, 170, 176, 202, 203], "do": [1, 2, 3, 4, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 41, 43, 47, 53, 55, 57, 58, 68, 103, 109, 112, 121, 163, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 183, 184, 186, 187, 190, 191, 193, 195, 196, 197, 199, 201], "exhaust": [1, 8, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103], "instead": [1, 4, 8, 58, 111, 136, 170, 171, 173, 174, 175, 177, 181, 183, 191, 199, 200, 202, 203], "thei": [1, 3, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 41, 47, 53, 57, 58, 68, 103, 108, 161, 166, 169, 173, 175, 176, 180, 181, 183, 184, 187, 193, 196, 197, 199], "maximum": [1, 8, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 109, 111, 112, 132, 143, 170, 181, 193], "slowest": 1, "were": 1, "ghz": 1, "amd": 1, "ryzen": 1, "threadripp": 1, "3960x": 1, "core": [1, 8, 10, 191, 196, 199, 200], "processor": 1, "python": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 34, 39, 53, 57, 58, 103, 109, 111, 112, 125, 133, 162, 171, 173, 175, 177, 179, 181, 183, 184, 185, 188, 189, 191, 193, 200, 201, 202, 203], "12": [1, 6, 161, 184, 185, 192, 196], "besid": [1, 6, 167, 188, 200], "client": [1, 2, 3, 5, 6, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 59, 71, 73, 81, 83, 84, 86, 87, 89, 103, 172, 196], "server": [1, 2, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 98, 99, 103, 196, 201], "pattern": [1, 4, 10, 38, 111, 166, 175, 185, 193, 196], "offici": [1, 2, 9], "docker": [1, 2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 192, 197, 203], "imag": [1, 2, 5, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 108, 109, 112, 124, 136, 164, 166, 169, 170, 171, 173, 174, 175, 176, 178, 179, 181, 182, 183, 184, 185, 191, 194, 197, 199, 200, 201, 202, 203], "node": [1, 2, 5, 55], "gb": 1, "ram": 1, "alloc": 1, "That": [1, 163, 171, 173, 175, 176, 178, 184, 189, 200], "replica": [1, 197], "shard": 1, "did": [1, 4], "opt": [1, 199], "cluster": 1, "becaus": [1, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 161, 163, 172, 187, 191, 196, 197], "mainli": [1, 55, 68, 161, 196], "aim": [1, 3, 200], "assess": 1, "capabl": [1, 4], "instanc": [1, 3, 8, 67, 108, 134], "overhead": [1, 193], "come": [1, 3, 9, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 168, 170, 181, 184, 200, 202, 203], "side": [1, 2, 4, 6, 14, 16, 17, 18, 19, 20, 21, 28, 29, 53, 57, 58, 71, 73, 87, 89, 103, 109, 112, 132, 179, 187, 196, 200], "unless": [1, 3, 171, 193, 197], "specif": [1, 2, 3, 4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 36, 53, 57, 58, 71, 73, 87, 89, 103, 111, 161, 166, 170, 171, 173, 174, 181, 187], "more": [1, 2, 3, 4, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 34, 41, 47, 53, 57, 58, 68, 103, 111, 161, 162, 166, 167, 168, 170, 171, 175, 176, 177, 181, 183, 184, 186, 189, 191, 193, 195, 196, 197, 200, 201, 202, 203], "effici": [1, 4, 6, 8, 68, 109, 112, 115, 117, 132, 184, 189, 200, 201, 202, 203], "own": [1, 109, 112, 121, 173, 188, 191, 194, 199, 200], "By": [1, 2, 3, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 35, 36, 39, 53, 57, 58, 71, 73, 87, 89, 103, 109, 111, 112, 121, 162, 173, 181, 186, 187, 190, 191], "vendor": [1, 3], "For": [1, 2, 3, 4, 6, 8, 11, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 109, 163, 166, 167, 168, 169, 170, 171, 173, 176, 177, 178, 180, 181, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 201], "ann": [1, 3, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103], "100": [1, 2, 5, 109, 112, 124, 184, 187, 188, 197], "control": [1, 8, 9, 161, 169, 181, 185], "accuraci": [1, 2, 8], "bigger": 1, "lead": [1, 8, 176], "longer": [1, 4, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 109, 112, 132, 168], "accur": [1, 5, 8, 166], "slower": [1, 8, 14, 16, 17, 18, 19, 20, 21, 39, 53, 57, 58, 103], "max": [1, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 144, 193, 200], "connect": [1, 4, 7, 8, 13, 53, 55, 58, 59, 93, 94, 98, 99, 103, 109, 112, 132, 192], "work": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 34, 43, 53, 57, 58, 103, 111, 136, 163, 164, 166, 171, 173, 175, 179, 181, 183, 184, 186, 187, 189, 190, 191, 193, 196, 197, 198, 200, 201], "dataset": [1, 109, 111, 112, 121, 163, 166], "intrins": [1, 194], "dimension": [1, 2, 6, 109, 112, 119, 121, 138, 177, 200], "while": [1, 8, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 163, 171, 176, 187, 200], "low": [1, 8, 161, 172], "final": [1, 3, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 47, 53, 55, 57, 58, 103, 162, 163, 166, 173, 188, 189, 196, 197], "full": [1, 3, 4, 6, 9, 11, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 161, 163, 165, 169, 171, 175, 181, 193, 195, 196, 199, 200, 201], "script": [1, 4], "avail": [1, 4, 8, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 68, 103, 136, 161, 191, 197, 199], "here": [1, 2, 3, 4, 5, 6, 8, 9, 136, 161, 162, 164, 166, 168, 169, 171, 173, 175, 181, 183, 184, 185, 186, 188, 191, 192, 193, 194, 196, 197, 199, 200], "fair": 1, "across": [1, 181, 193], "favour": 1, "benefit": [1, 4, 173], "wa": [1, 4, 8, 134, 166, 168, 175, 184, 193, 200], "imposs": 1, "its": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 109, 112, 116, 121, 124, 132, 161, 166, 167, 176, 181, 185, 187, 191, 193, 195, 196, 198, 200], "definit": [1, 134, 163, 196], "vari": 1, "base": [1, 2, 3, 5, 6, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 144, 154, 155, 156, 157, 158, 160, 161, 163, 166, 168, 169, 173, 175, 184, 187, 188, 190, 196], "principl": [1, 175, 181], "cover": [1, 166, 200], "offer": [1, 58, 171, 184], "try": [1, 4, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 111, 134, 167, 181], "crud": 1, "measur": [1, 143], "Not": [1, 187, 188, 193], "speed": [1, 2, 8, 14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 58, 103, 191, 200], "also": [1, 2, 3, 4, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 44, 47, 53, 57, 58, 103, 109, 143, 161, 163, 168, 169, 171, 172, 173, 174, 175, 176, 179, 181, 183, 184, 185, 188, 189, 190, 191, 192, 193, 196, 197, 200], "sinc": [1, 4, 8, 109, 112, 121, 134, 136, 166, 200], "make": [1, 2, 3, 4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 41, 42, 44, 53, 57, 58, 68, 103, 109, 112, 121, 134, 169, 171, 175, 176, 181, 185, 187, 189, 191, 194, 196, 197, 199, 201], "sure": [1, 2, 3, 4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 42, 44, 53, 57, 58, 68, 103, 171, 191, 199, 201], "allow": [1, 3, 4, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 41, 49, 53, 57, 58, 103, 113, 116, 134, 161, 166, 168, 171, 173, 175, 178, 181, 184, 187, 189, 193, 197, 200, 201], "suit": [1, 165], "case": [1, 3, 4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 34, 53, 57, 58, 68, 71, 73, 87, 89, 103, 136, 166, 170, 171, 175, 181, 187, 190, 193, 197, 201], "built": [1, 9, 14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103, 171, 174, 176, 191, 201], "top": [1, 3, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 124, 143, 144, 166, 179, 183, 184, 187, 190, 194, 202, 203], "furthermor": [1, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103, 193], "made": [1, 4, 161, 165, 171, 181, 200], "run": [1, 2, 4, 5, 8, 9, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 168, 190, 191, 197, 198, 199, 203], "contain": [1, 2, 3, 4, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 27, 28, 29, 32, 36, 42, 47, 52, 53, 57, 58, 71, 73, 87, 89, 103, 109, 111, 112, 121, 124, 136, 163, 166, 167, 168, 169, 171, 173, 175, 177, 181, 183, 184, 187, 189, 192, 195, 199, 200, 202, 203], "local": [1, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 175, 179, 192, 193, 199, 200, 201, 202, 203], "network": [1, 2, 10, 17, 172, 181, 193, 197, 200, 201], "resourc": [1, 175, 191, 197], "those": [1, 2, 3, 4, 6, 14, 16, 17, 18, 19, 20, 21, 28, 36, 53, 57, 58, 68, 103, 136, 168, 173, 179, 181, 189], "much": [1, 14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 58, 103, 163, 168, 176, 177, 181, 184, 185, 196, 198, 199], "possibl": [1, 176, 182, 193, 199], "grpc": [1, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 172, 192, 197], "http": [1, 2, 5, 8, 9, 14, 16, 17, 18, 19, 20, 21, 44, 45, 53, 55, 57, 58, 71, 72, 98, 99, 103, 109, 111, 143, 168, 170, 171, 175, 176, 179, 191, 192, 194, 197, 199, 202, 203], "batch": [1, 2, 3, 5, 6, 8, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 32, 42, 43, 53, 57, 58, 68, 103, 191], "re": [1, 8, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 161, 164, 168, 179, 184, 199], "okai": [1, 184, 191, 197], "long": [1, 8, 18, 57, 71, 72, 87, 88, 164, 191, 196, 200, 202, 203], "jina": [1, 3, 14, 16, 17, 18, 19, 20, 21, 41, 45, 53, 57, 58, 103, 109, 111, 112, 132, 136, 166, 170, 171, 172, 173, 176, 188, 191, 192, 193, 194, 199, 201, 202, 203], "open": [1, 3, 9, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 111, 112, 114, 133, 162, 165, 172, 201], "constantli": 1, "accordingli": [1, 109, 112, 117, 121, 161], "believ": 1, "miss": [1, 108, 199, 200, 201], "optim": [1, 4, 8, 186, 198, 200, 201], "g": [1, 2, 3, 4, 6, 8, 9, 111, 173, 175, 180, 183, 184, 187, 192, 193, 200], "recent": [1, 4], "upstream": [1, 193, 197], "avoid": [1, 3, 4, 10, 139, 141, 142, 144, 161, 166, 193], "unnecessari": [1, 193], "step": [1, 4, 10, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 68, 103, 163, 181, 193, 195, 196, 197, 198], "feel": [1, 4, 168, 171], "free": [1, 55, 162, 165], "rais": [1, 14, 15, 16, 17, 18, 19, 20, 21, 29, 53, 55, 57, 58, 60, 65, 67, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 134, 176], "pr": [1, 143], "issu": [1, 4, 136, 166, 191], "your": [1, 3, 4, 6, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 36, 41, 43, 53, 57, 58, 103, 109, 111, 112, 121, 163, 164, 167, 168, 170, 171, 173, 175, 176, 181, 186, 187, 189, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203], "contribut": [1, 3], "yet": [1, 166, 168, 200], "variou": [1, 55], "milvu": 1, "current": [1, 6, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 109, 112, 121, 145], "doe": [1, 4, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 109, 111, 112, 121, 176, 181, 185, 186, 187, 188, 196, 197], "integr": [1, 10, 161, 172, 181, 196, 200, 201], "pinecon": 1, "soon": [1, 200], "ll": [1, 168], "onc": [1, 14, 16, 17, 18, 19, 20, 21, 47, 52, 53, 57, 58, 103, 109, 112, 133, 168, 177, 181, 184, 190, 194], "faiss": 1, "annoi": [1, 196], "scann": 1, "librari": [1, 55, 111, 136, 164, 181, 200, 201], "actual": [1, 3, 4, 26, 55, 68, 109, 112, 133, 166, 175, 199, 202, 203], "itself": [1, 4, 8, 14, 16, 17, 18, 19, 20, 21, 26, 34, 37, 45, 53, 57, 58, 103, 109, 112, 114, 115, 116, 117, 118, 121, 122, 124, 125, 132, 133, 161, 183, 185, 187, 190, 193, 196], "intern": [1, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103, 109, 112, 115], "hope": [1, 191], "help": [1, 8, 25, 51, 111, 163, 173, 175, 176, 181, 196, 201], "select": [1, 9, 171, 172, 183, 184, 188], "depend": [1, 4, 8, 14, 16, 17, 18, 19, 20, 21, 29, 42, 47, 53, 57, 58, 71, 73, 87, 89, 103, 109, 112, 133, 163, 169, 181, 186, 188, 190, 191, 192, 193, 195, 196, 198, 201], "need": [1, 2, 3, 5, 6, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 28, 44, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 161, 163, 167, 168, 171, 172, 173, 174, 175, 181, 184, 186, 188, 189, 191, 193, 194, 196, 197, 198, 199], "mai": [1, 4, 9, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 41, 43, 53, 57, 58, 103, 109, 111, 112, 115, 117, 132, 136, 163, 166, 168, 171, 174, 179, 181, 183, 184, 185, 187, 193, 197, 198, 199, 200, 202, 203], "prefer": [1, 181], "fewer": [1, 8], "enjoi": [1, 3, 8, 173, 199], "latenc": [1, 172, 193], "sai": [1, 10, 168, 174, 175, 181, 187, 190, 191, 193, 196, 197], "fit": [1, 3, 4, 7, 10, 55, 171, 181, 186, 189, 190, 200], "care": [1, 167, 171], "figur": [1, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 44, 53, 57, 58, 103, 172, 193, 200], "show": [1, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 34, 36, 41, 43, 44, 45, 53, 57, 58, 103, 109, 112, 124, 133, 163, 172, 176, 184, 185, 193, 197], "variat": 1, "w": [1, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 109, 112, 121, 168, 188], "accord": [1, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 57, 58, 103, 109, 112, 116, 138, 184, 190], "red": [1, 6, 108, 184], "dash": 1, "line": [1, 4, 38, 111, 162, 163, 168, 171, 197], "repres": [1, 14, 16, 17, 18, 19, 20, 21, 36, 46, 48, 50, 52, 53, 55, 57, 58, 103, 109, 111, 112, 116, 123, 128, 130, 136, 144, 145, 161, 164, 166, 167, 168, 169, 171, 173, 175, 179, 183, 184, 194, 200, 201, 202, 203], "threshold": [1, 8], "300": 1, "omit": 1, "left": [1, 14, 16, 17, 18, 19, 20, 21, 28, 40, 42, 47, 53, 57, 58, 64, 103, 109, 112, 124, 163, 173, 177, 179, 187, 190, 197, 202, 203], "plot": [1, 13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 58, 103, 109, 112, 184, 197, 198], "right": [1, 4, 14, 16, 17, 18, 19, 20, 21, 28, 44, 53, 55, 57, 58, 103, 109, 112, 132, 169, 173, 177, 187, 190, 191, 199], "too": [1, 9, 163, 168, 184, 185, 189, 190, 196, 200], "slow": [1, 3, 4, 10, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 68, 103], "fast": [1, 8, 9, 14, 17, 53, 103, 200, 201], "choic": [1, 4], "append": [1, 3, 4, 13, 14, 15, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 59, 60, 65, 66, 69, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 169, 180, 182, 185, 187], "insert": [1, 3, 8, 13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 60, 65, 66, 69, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 194], "matter": 1, "moreov": [1, 4, 193], "monolith": [1, 197, 200], "fastest": [1, 193], "trade": 1, "off": [1, 4, 7, 8, 58, 93, 94, 109, 112, 132], "between": [1, 3, 4, 8, 109, 111, 112, 117, 121, 138, 139, 141, 142, 167, 171, 178, 181, 188, 193, 200, 202, 203], "term": [1, 168], "observ": [1, 138, 167, 169, 199], "highest": [1, 8], "compos": [2, 5, 6, 8, 55], "yml": [2, 5, 6, 8], "co": [2, 111], "environ": [2, 8, 136, 197, 198, 199, 201], "xpack": 2, "enabl": [2, 4, 6, 25, 31, 61, 72, 77, 88, 94, 99, 161, 196, 198, 199, 201], "fals": [2, 4, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 29, 32, 34, 38, 41, 42, 43, 44, 45, 53, 55, 57, 58, 71, 72, 73, 87, 88, 89, 103, 104, 108, 109, 111, 112, 115, 117, 119, 121, 122, 124, 131, 132, 133, 134, 136, 144, 154, 167, 170, 171, 176, 183, 184, 185, 187, 188, 192, 193, 194, 195], "discoveri": 2, "type": [2, 4, 6, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 57, 58, 60, 61, 64, 65, 66, 67, 70, 71, 72, 73, 75, 76, 77, 80, 81, 83, 84, 86, 87, 88, 89, 91, 93, 96, 97, 98, 99, 102, 103, 104, 105, 107, 109, 111, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 138, 139, 141, 142, 143, 144, 145, 148, 149, 154, 156, 157, 160, 164, 167, 171, 172, 173, 175, 179, 181, 183, 184, 185, 187, 188, 189, 192, 193, 194, 195, 196, 200, 201], "port": [2, 5, 6, 8, 13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 59, 81, 82, 87, 88, 98, 99, 103, 109, 112, 136, 192, 197], "9200": [2, 18, 71, 72], "u": [2, 5, 6, 8, 109, 112, 115, 117, 132, 168, 191, 192, 197, 199], "assum": [2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 22, 34, 53, 57, 58, 103, 109, 112, 117, 121, 166, 181, 190, 191], "address": [2, 5, 6, 8, 53, 103, 136, 176, 192, 197], "localhost": [2, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 71, 72, 81, 82, 87, 88, 98, 99, 103, 192], "creation": [2, 6, 193], "layer": [2, 8, 186], "disabl": [2, 40], "plain": [2, 109, 176, 181, 190, 193], "pass": [2, 4, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 36, 37, 43, 53, 55, 57, 58, 103, 109, 111, 112, 115, 121, 125, 132, 134, 161, 169, 174, 181, 187, 193, 194, 200], "host": [2, 5, 6, 8, 13, 14, 16, 17, 18, 19, 20, 21, 44, 45, 53, 57, 58, 59, 71, 72, 81, 82, 87, 88, 98, 99, 103, 192, 197], "api_id": 2, "ca_cert": 2, "insid": [2, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 109, 112, 121, 176, 181, 184, 185, 190, 191, 192, 196], "es_config": [2, 13, 18, 59, 71, 72], "constructor": [2, 3, 4, 6, 16, 174, 176, 180, 181], "exampl": [2, 6, 7, 14, 16, 17, 18, 19, 20, 21, 34, 52, 53, 57, 58, 68, 103, 108, 109, 112, 121, 136, 143, 145, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 191, 192, 193, 194, 196, 197, 198, 199, 200], "prq7je_hj4i4auh": 2, "hq": 2, "hanxiao": [2, 163, 177], "http_ca": 2, "crt": 2, "certif": 2, "password": 2, "etc": [2, 3, 145, 161, 171, 173, 189, 194, 201], "index_nam": [2, 4, 6, 13, 18, 57, 59, 71, 72, 87, 88], "build": [2, 5, 6, 8, 9, 27, 40, 109, 112, 125, 128, 130, 165, 168, 171, 177, 181, 183, 185, 193, 196, 200, 201], "previous": [2, 6, 8, 53, 58, 103, 161], "old_stuff": 2, "_": [2, 6, 185, 194], "1000": [2, 6, 163, 165, 166, 184, 195], "da2": [2, 4, 6, 185, 187, 190], "length": [2, 3, 4, 5, 6, 9, 14, 16, 17, 18, 19, 20, 21, 24, 28, 32, 53, 57, 58, 103, 109, 112, 132, 167, 168, 169, 170, 174, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 202, 203], "2000": 2, "homogen": [2, 4, 6, 9, 167, 170, 183, 184, 185, 187, 188, 192, 193, 194, 195], "true": [2, 4, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 28, 34, 36, 38, 40, 41, 42, 44, 53, 55, 57, 58, 64, 87, 88, 103, 108, 109, 111, 112, 121, 123, 124, 133, 134, 136, 145, 170, 171, 176, 177, 181, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198], "attribut": [2, 4, 6, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 24, 28, 29, 30, 32, 44, 47, 51, 52, 53, 57, 58, 71, 73, 87, 89, 103, 109, 112, 119, 123, 132, 166, 167, 170, 171, 174, 177, 179, 180, 181, 184, 185, 187, 188, 189, 192, 193, 194, 195, 200, 202, 203], "uniqu": [2, 3, 4, 6, 9, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 109, 112, 116, 167, 170, 176, 179, 183, 184, 185, 187, 188, 192, 193, 194, 195, 200, 202, 203], "empti": [2, 3, 4, 5, 6, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 32, 44, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 104, 109, 112, 124, 143, 154, 167, 170, 171, 175, 177, 181, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 198, 200], "ndarrai": [2, 3, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 26, 29, 34, 38, 42, 53, 57, 58, 71, 73, 87, 89, 103, 109, 111, 112, 117, 119, 121, 127, 131, 133, 137, 138, 139, 141, 142, 144, 146, 148, 161, 164, 165, 166, 170, 171, 175, 177, 178, 179, 181, 186, 187, 188, 189, 190, 194, 198, 200, 202, 203], "str": [2, 3, 4, 6, 9, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 32, 34, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 51, 52, 53, 57, 58, 60, 61, 64, 67, 71, 72, 73, 76, 77, 81, 82, 83, 84, 86, 87, 88, 89, 93, 94, 98, 99, 103, 104, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 121, 124, 125, 126, 127, 128, 131, 132, 133, 134, 136, 138, 141, 142, 145, 154, 155, 156, 157, 167, 168, 170, 171, 174, 176, 183, 184, 185, 187, 188, 192, 193, 194, 195, 196, 202, 203], "14890289": 2, "3168339": 2, "03050802": 2, "06785086": 2, "94719299": 2, "32490566": 2, "how": [2, 3, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 109, 112, 121, 163, 166, 171, 172, 173, 174, 175, 176, 179, 181, 184, 185, 189, 191, 193, 196, 197, 199, 200, 201], "being": [2, 4, 8], "sent": [2, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "ad": [2, 8, 9, 14, 16, 17, 18, 19, 20, 21, 28, 47, 53, 57, 58, 103, 173, 174, 185, 194, 197], "addit": [2, 5, 9, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 111, 170, 171, 199, 201], "kwarg": [2, 3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 28, 29, 34, 35, 36, 37, 38, 39, 41, 42, 45, 53, 55, 57, 58, 70, 71, 73, 75, 76, 80, 81, 86, 87, 89, 91, 93, 97, 98, 102, 103, 104, 109, 111, 112, 115, 121, 125, 131, 132, 143, 154, 181, 187, 197], "method": [2, 3, 4, 6, 8, 13, 14, 16, 17, 18, 19, 20, 21, 28, 34, 47, 52, 53, 57, 58, 59, 65, 68, 70, 75, 80, 87, 88, 91, 97, 102, 103, 109, 111, 112, 125, 131, 136, 143, 162, 171, 173, 176, 180, 181, 187, 193, 197], "see": [2, 3, 4, 8, 9, 14, 17, 20, 53, 58, 103, 109, 136, 163, 166, 169, 171, 173, 175, 176, 179, 182, 183, 184, 185, 187, 188, 189, 191, 194, 196, 198, 200, 201], "detail": [2, 4, 11, 14, 17, 20, 53, 58, 103, 109, 111, 161, 163, 167, 171, 181, 186, 196, 197, 200], "int": [2, 3, 6, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 32, 38, 42, 43, 44, 45, 48, 51, 53, 57, 58, 60, 61, 64, 65, 70, 71, 72, 73, 75, 76, 80, 81, 82, 84, 86, 87, 88, 89, 91, 93, 97, 98, 99, 102, 103, 104, 109, 110, 111, 112, 114, 116, 117, 119, 121, 122, 124, 126, 131, 132, 133, 134, 136, 143, 144, 145, 154, 170, 171, 179, 184, 187, 188, 196, 202, 203], "l2_norm": 2, "thread_count": 2, "chunk_siz": 2, "500": [2, 8], "max_chunk_byt": 2, "104857600": 2, "queue_siz": 2, "batch_siz": [2, 6, 10, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 32, 42, 43, 45, 53, 57, 58, 59, 71, 72, 87, 88, 103, 131, 184, 186, 190, 191], "overriden": 2, "parallel": [2, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 42, 53, 57, 58, 103, 184, 189, 197], "pre": [2, 6, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 134, 172, 181, 193, 197, 199], "dsl": 2, "addition": [2, 3, 14, 53, 103], "knn": 2, "num_candid": 2, "Such": [2, 5, 6, 8, 191, 192, 194], "leverag": [2, 3, 4, 9, 68, 168, 171, 172, 173, 174, 176, 181, 190, 191, 192, 196], "flag": [2, 6], "index_text": [2, 6, 13, 18, 57, 59, 71, 72, 87, 88], "sever": [2, 4, 6], "pizza": 2, "person": [2, 55], "eat": 2, "restaur": 2, "pizza_doc": 2, "part": [2, 6, 9, 55, 168, 175, 181, 184], "mostli": [2, 6, 8], "applic": [2, 6, 163, 168, 197, 200], "split": [2, 6, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 55, 57, 58, 103, 168], "group": [2, 6, 13, 14, 16, 17, 18, 19, 20, 21, 24, 36, 53, 57, 58, 103, 111, 179, 184], "item": [2, 3, 6, 14, 15, 16, 17, 18, 19, 20, 53, 55, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 109, 112, 117, 143, 163, 184, 196], "32": [2, 6, 10, 14, 16, 17, 18, 19, 20, 21, 24, 32, 43, 53, 57, 58, 103, 172, 186, 191], "tag_indic": [2, 6, 13, 18, 57, 59, 71, 72, 87, 88], "food_typ": [2, 6], "italian": [2, 6], "spanish": [2, 6], "food": [2, 6], "cheap": [2, 6], "french": [2, 6], "expens": [2, 6, 8], "chines": [2, 6], "noddl": [2, 6], "quit": [2, 6, 169, 191, 196, 200], "results_cheap": [2, 6], "results_italian": [2, 6], "tags__food_typ": [2, 6], "don": [2, 6, 9, 68, 111, 168, 173, 176, 177, 184, 197], "hostnam": [2, 5, 8], "dict": [2, 3, 4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 24, 28, 29, 32, 36, 38, 41, 42, 45, 51, 53, 56, 57, 58, 60, 61, 67, 71, 72, 73, 76, 77, 81, 82, 83, 84, 87, 88, 89, 93, 94, 98, 99, 103, 108, 109, 110, 111, 112, 125, 126, 132, 133, 134, 136, 167, 171, 176, 179, 184, 188, 193, 196, 200], "cloud_id": 2, "api_kei": 2, "class": [2, 3, 4, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 143, 154, 155, 156, 157, 158, 170, 172, 173, 174, 181, 183, 194, 196, 197, 202, 203], "object": [2, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 69, 71, 72, 73, 78, 81, 82, 83, 87, 88, 89, 93, 94, 98, 99, 100, 103, 104, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 136, 145, 155, 157, 158, 161, 171, 172, 173, 174, 175, 176, 178, 179, 181, 183, 188, 189, 190, 193, 198, 200], "whether": [2, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 53, 55, 57, 58, 71, 73, 87, 89, 103, 109, 111, 112, 119, 164, 174, 179, 186], "handl": [2, 3, 6, 68, 115, 162, 165, 173, 178, 181, 196], "refresh": 2, "plural": 2, "compli": 2, "seen": [3, 173], "previou": [3, 4, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 143, 163, 179, 193, 202, 203], "chapter": [3, 161, 171, 173, 176, 179, 181, 183, 184, 185, 188, 196, 198, 200], "sql": [3, 4, 64], "nosql": 3, "motiv": [3, 164, 200], "board": 3, "advanc": [3, 9, 25, 31, 49, 113, 162, 166, 180, 189, 199, 200, 201], "languag": [3, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103, 166, 168, 172, 175, 188, 193], "power": [3, 26, 63, 79, 95, 183, 189], "well": [3, 8, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 161, 166, 173, 176, 179, 196, 198, 199], "design": [3, 109, 112, 115, 117, 132, 170, 171, 173, 177, 181, 187, 193, 201], "maintain": [3, 175, 181], "plug": 3, "ai": [3, 109, 166, 170, 171, 172, 176, 191, 194, 201], "ecosystem": [3, 173, 181, 201], "hub": [3, 111, 172, 173, 192], "clip": [3, 173, 179, 201, 202, 203], "servic": [3, 9, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 173, 196, 200, 201], "finetun": [3, 173, 200], "synergi": 3, "after": [3, 8, 9, 14, 16, 17, 18, 19, 20, 21, 26, 53, 55, 57, 58, 103, 109, 112, 114, 115, 116, 117, 118, 121, 122, 132, 133, 143, 163, 166, 168, 170, 171, 186, 187, 193, 196, 197], "extens": [3, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 136, 193, 200], "conveni": [3, 168], "promis": [3, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "experi": [3, 189, 197, 198, 200, 201], "regular": [3, 4, 188, 197, 202, 203], "extra": [3, 4, 14, 16, 17, 18, 19, 20, 21, 36, 37, 42, 53, 57, 58, 103, 109, 112, 125, 134, 161, 181, 197, 198, 199, 201], "learn": [3, 4, 9, 163, 165, 168, 170, 171, 172, 173, 176, 177, 179, 184, 189, 196, 200, 201], "walk": [3, 166], "through": [3, 4, 166, 168, 170, 173, 175, 184, 196], "mydocstor": 3, "look": [3, 4, 109, 112, 121, 163, 166, 169, 171, 177, 186, 187, 191, 193, 196, 200], "config": [3, 6, 13, 14, 17, 53, 58, 59, 81, 86, 98, 99, 103, 109, 134, 168, 194], "start": [3, 4, 14, 15, 16, 17, 18, 19, 20, 21, 44, 52, 53, 57, 58, 60, 65, 67, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 109, 112, 117, 121, 170, 179, 184, 197, 201, 202, 203], "go": [3, 4, 166, 181, 184, 193, 196, 202, 203], "arrai": [3, 12, 109, 111, 112, 117, 129, 132, 138, 139, 141, 142, 144, 145, 160, 169, 175, 176, 177, 181, 182, 183, 188, 190, 193, 196, 200, 202, 203], "sub": [3, 14, 16, 17, 18, 19, 20, 21, 44, 52, 53, 57, 58, 103, 111, 168, 169, 170, 171, 173, 174, 175, 179, 180, 184, 202, 203], "four": [3, 200, 202, 203], "file": [3, 7, 14, 16, 17, 18, 19, 20, 21, 34, 35, 36, 38, 39, 44, 53, 55, 57, 58, 103, 109, 111, 112, 114, 115, 118, 121, 122, 133, 136, 161, 164, 168, 171, 175, 178, 179, 181, 191, 193, 202, 203], "readm": [3, 168], "md": 3, "These": [3, 8, 14, 16, 17, 18, 19, 20, 21, 28, 32, 37, 53, 57, 58, 68, 103, 176, 189, 196, 202, 203], "consist": [3, 8, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 165, 166, 173, 179, 200, 201, 202, 203], "necessari": [3, 61, 72, 77, 88, 94, 99, 143, 171], "search": [3, 8, 9, 14, 16, 17, 18, 19, 20, 21, 29, 42, 48, 53, 57, 58, 71, 73, 87, 88, 89, 103, 163, 164, 172, 173, 177, 179, 201, 202, 203], "anoth": [3, 4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 42, 43, 53, 57, 58, 103, 104, 109, 154, 168, 170, 171, 175, 177, 178, 185, 190], "basegetsetdelmixin": [3, 59, 63, 66, 68, 74, 79, 84, 90, 95, 101], "getsetdelmixin": [3, 59, 60, 63, 71, 74, 76, 79, 81, 84, 87, 90, 93, 95, 98, 101], "def": [3, 8, 10, 108, 166, 168, 174, 191, 196, 197], "_get_doc_by_id": [3, 68], "self": [3, 14, 16, 17, 18, 19, 20, 21, 24, 28, 32, 42, 44, 53, 55, 57, 58, 103, 104, 109, 154, 191, 197], "_id": [3, 69], "_del_doc_by_id": [3, 68], "_set_doc_by_id": [3, 68], "_load_offset2id": 3, "_save_offset2id": 3, "five": [3, 168, 200], "correspond": [3, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 136, 166, 167, 168, 170, 171, 174, 175, 179, 190, 202, 203], "logic": [3, 4, 47, 183, 188, 196, 197], "string": [3, 6, 8, 14, 16, 17, 18, 19, 20, 21, 29, 34, 36, 39, 42, 45, 52, 53, 57, 58, 71, 73, 87, 89, 98, 99, 103, 109, 111, 112, 114, 124, 125, 133, 136, 138, 175, 176, 179, 181, 183, 184, 186, 188, 193, 196, 202, 203], "essenti": 3, "ensur": [3, 4, 170, 181], "offset2id": [3, 59, 64, 66, 68, 69], "map": [3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 36, 43, 51, 53, 57, 58, 71, 72, 103, 108, 109, 111, 112, 132, 167, 171, 173, 174, 176, 179, 191, 202, 203], "behaviour": [3, 108], "inherit": [3, 16, 19, 131, 178, 194], "order": [3, 8, 14, 16, 17, 18, 19, 20, 21, 24, 32, 47, 53, 57, 58, 103, 108, 136, 143, 184], "keep": [3, 8, 58, 68, 109, 112, 133, 173, 174, 176, 190, 197], "mind": [3, 68, 173, 190], "upper": [3, 8, 169], "upsert": 3, "remov": [3, 13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 60, 65, 66, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 136, 181, 183, 200], "old": [3, 136, 161, 200], "recommened": 3, "_get_docs_by_id": [3, 68], "_del_docs_by_id": [3, 68], "_clear_storag": [3, 68], "_set_doc_value_pair": 3, "_set_doc_value_pairs_nest": 3, "_set_docs_by_id": [3, 68], "signatur": 3, "fine": [3, 161], "grain": [3, 161], "frequent": [3, 8, 109, 112, 115, 117, 132, 176, 179, 181, 193, 200], "fulli": [3, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 28, 32, 53, 57, 58, 103, 109, 112, 121, 175, 184, 194], "option": [3, 6, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 32, 34, 36, 38, 40, 41, 42, 43, 44, 45, 48, 52, 53, 57, 58, 60, 61, 65, 70, 71, 72, 73, 75, 76, 80, 81, 82, 86, 87, 88, 89, 91, 93, 94, 97, 98, 99, 102, 103, 108, 109, 110, 111, 112, 117, 121, 124, 125, 126, 127, 131, 132, 133, 134, 136, 143, 144, 145, 154, 155, 156, 157, 184, 192, 196, 198], "refer": [3, 8, 11, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 171, 181, 184, 185, 192, 193], "out": [3, 9, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 32, 43, 53, 55, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 166, 173, 177, 181, 193, 201], "iter": [3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 38, 43, 52, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 84, 86, 87, 91, 93, 97, 98, 102, 103, 111, 185, 191, 200], "union": [3, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 34, 35, 36, 38, 39, 42, 43, 53, 57, 58, 60, 61, 71, 72, 73, 81, 82, 87, 88, 89, 93, 94, 98, 99, 103, 109, 110, 111, 112, 114, 115, 118, 121, 125, 131, 132, 133, 134, 138, 144], "type_check": 3, "basesequencelikemixin": [3, 59, 65, 66, 70, 75, 80, 86, 91, 97, 102], "sequencelikemixin": [3, 59, 60, 65, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102], "__eq__": 3, "__contains__": 3, "x": [3, 10, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103, 108, 138, 144, 145, 161, 171, 174, 179, 181, 193, 197, 200, 202, 203], "__repr__": 3, "__add__": 3, "custom": [3, 7, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 108, 170, 187, 194], "_append": 3, "overrid": [3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 29, 41, 53, 57, 58, 68, 103, 108, 187], "last": [3, 4, 8, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 32, 43, 44, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 109, 112, 121, 124, 144, 163, 167, 169, 173, 183, 184, 191], "_extend": 3, "__len__": 3, "reli": [3, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 180, 183, 191, 200], "__iter__": 3, "standard": [3, 109, 112, 121, 171, 173], "mutablesequ": [3, 15, 70], "dataclass": [3, 4, 6, 12, 109, 112, 123, 160, 164, 168, 172, 174, 175, 176, 184, 194, 200], "basebackendmixin": [3, 59, 61, 66, 67, 72, 77, 82, 88, 94, 99], "documentarraysourcetyp": [3, 17], "mydocstoreconfig": 3, "config1": 3, "config2": 3, "config3": 3, "backendmixin": [3, 59, 60, 61, 71, 72, 76, 77, 81, 82, 87, 88, 93, 94, 98, 99], "_init_storag": 3, "_doc": [3, 17, 194], "super": [3, 175, 176, 201], "_ensure_unique_config": 3, "config_root": 3, "config_subindex": 3, "config_join": 3, "subindex_nam": 3, "identifi": [3, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 167, 176, 179, 186, 202, 203], "expos": [3, 9, 197], "argument": [3, 8, 14, 15, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 109, 111, 112, 115, 121, 132, 134, 171, 174, 176, 181, 185, 187, 190, 193], "init_storag": 3, "pars": [3, 4, 56, 109, 112, 125, 134, 181], "either": [3, 4, 6, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 42, 43, 52, 53, 57, 58, 103, 109, 112, 121, 124, 133, 138, 141, 142, 175, 188, 190, 192, 197, 198, 202, 203], "veri": [3, 4, 8, 10, 14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 58, 103, 161, 163, 168, 171, 177, 184, 185, 191, 196, 197, 200], "copi": [3, 17, 55, 104, 109, 134, 154, 170, 187, 190], "behavior": [3, 4, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 161, 174, 176, 181, 185, 187], "subindex": [3, 4, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 164, 194], "root": [3, 14, 16, 17, 18, 19, 20, 21, 47, 52, 53, 57, 58, 103, 171, 176, 183, 184, 187], "field": [3, 8, 9, 12, 14, 16, 17, 18, 19, 20, 21, 28, 29, 36, 53, 55, 57, 58, 67, 71, 73, 87, 88, 89, 103, 104, 105, 108, 109, 111, 112, 119, 124, 132, 134, 145, 154, 167, 168, 172, 173, 174, 175, 176, 177, 179, 181, 183, 184, 187, 188, 193, 194, 198, 202, 203], "explicitli": [3, 4, 136, 181], "usual": [3, 168, 174, 177], "howev": [3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 143, 161, 171, 181, 184, 191, 200], "table_nam": [3, 4, 7, 13, 58, 59, 93, 94, 96], "clash": 3, "parent": [3, 16, 164, 173, 179, 194, 196, 202, 203], "und": 3, "subindic": 3, "despit": 3, "within": [3, 6, 8, 14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 103, 165], "typevar": [3, 108, 174], "input": [3, 4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 29, 43, 53, 57, 58, 71, 73, 87, 89, 103, 109, 112, 121, 134, 136, 145, 181, 183, 186, 196, 200], "mydocumentstorearraytyp": 3, "findmixin": [3, 13, 21, 29, 59, 60, 62, 71, 73, 76, 78, 81, 83, 87, 89, 93, 98, 100], "_find_similar_vector": 3, "_find": [3, 29], "elasticarraytyp": 3, "given": [3, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 42, 43, 44, 53, 57, 58, 71, 73, 87, 89, 103, 109, 111, 112, 121, 124, 168, 171, 173, 174, 175, 176, 186, 187, 188, 190, 193, 194], "otherwis": [3, 8, 9, 14, 16, 17, 18, 19, 20, 21, 29, 44, 53, 55, 57, 58, 71, 73, 87, 89, 103, 109, 112, 114, 121, 171, 197], "closest": [3, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103, 166, 168, 190], "abc": [3, 21, 60, 67, 68, 71, 76, 87, 93, 98], "__all__": 3, "storagemixin": [3, 14, 18, 20, 53, 57, 58, 59, 60, 71, 76, 81, 87, 93, 98, 103], "past": 3, "modul": [3, 8, 160, 171, 173, 201], "content": [3, 14, 16, 17, 18, 19, 20, 41, 53, 57, 58, 103, 110, 111, 118, 126, 160, 176, 177, 178, 179, 185, 188], "documentarraymydocstor": 3, "__new__": [3, 18, 53, 57, 103], "cl": [3, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 108], "arg": [3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 34, 37, 38, 41, 53, 54, 55, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 109, 111, 112, 125, 131, 161], "almost": [3, 4, 173], "allmixin": [3, 13, 17, 21, 109, 112, 154, 156], "basedocumentarrai": [3, 12, 13, 15, 17], "documentarraylik": [3, 14, 16, 17, 18, 19, 20, 21, 28, 39, 53, 57, 58, 103], "elif": 3, "documentarrayinmemori": [3, 9, 12, 13, 16, 19, 20], "done": [3, 10, 175, 191, 193, 196, 197], "abl": [3, 9], "welcom": 3, "back": [3, 4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 43, 45, 53, 57, 58, 103, 161, 163, 164, 171, 184, 193, 196, 199, 201], "least": [3, 163, 184], "unit": [3, 172, 173, 175], "test_advance_index": 3, "test_sequ": 3, "test_construct": 3, "pleas": [3, 11, 14, 16, 17, 18, 19, 20, 21, 24, 34, 42, 43, 53, 57, 58, 68, 103, 109, 112, 121, 143, 161, 176, 181, 184, 192, 193, 196, 198, 199], "overload": 3, "readi": [3, 172, 181, 191, 193, 197, 200, 201], "commit": [3, 4, 60, 64], "live": [4, 168, 200, 201], "extern": [4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 161, 176, 197], "over": [4, 5, 10, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 111, 134, 161, 180, 181, 184, 187, 193, 200], "switch": [4, 163, 181, 189, 190, 197], "idiom": [4, 9, 173, 200, 201], "take": [4, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 134, 163, 168, 172, 191, 196], "simpl": [4, 8, 111, 162, 164, 171, 172, 173, 178, 180, 184, 186, 190, 191, 193, 200], "db": [4, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "multimod": [4, 6, 108, 109, 112, 170, 171, 172, 173, 184, 194, 200, 201], "documentarraysqlit": [4, 12, 13, 58], "documentarraysqlite97c8c833586444a89272ff0ff4287edb": 4, "serialize_config": [4, 7, 8, 13, 14, 53, 58, 59, 60, 61, 81, 82, 83, 93, 94, 98, 99, 103, 194], "conn_config": [4, 7, 13, 58, 59, 93, 94], "journal_mod": [4, 7, 13, 58, 59, 93, 94], "synchron": [4, 7, 13, 58, 59, 93, 94], "modifi": [4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 43, 45, 53, 55, 57, 58, 103, 176, 178, 191], "statement": 4, "properli": 4, "save": [4, 9, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 35, 36, 37, 39, 44, 48, 53, 57, 58, 66, 69, 103, 109, 112, 114, 115, 118, 121, 133, 164, 190, 191, 193, 197], "unexpect": [4, 176], "yield": [4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 43, 52, 53, 57, 58, 103, 109, 111, 112, 133, 169, 181, 185, 191, 193], "inaccess": 4, "procedur": [4, 168, 191, 196], "ident": [4, 8, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 176, 185, 187], "emb": [4, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 58, 103, 109, 112, 131, 164, 173, 175, 177, 178, 183, 190, 201], "plot_embed": [4, 13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 186, 195, 198], "box": [4, 9, 173], "There": [4, 8, 10, 166, 171, 175, 191, 199, 200], "wai": [4, 6, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 166, 171, 173, 176, 183, 184, 189, 191, 194, 196, 198], "initi": [4, 8, 14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 98, 99, 103, 109, 176], "4477814032": 4, "alia": [4, 55, 67, 98, 99, 103], "style": [4, 40, 111, 197, 198], "Of": [4, 168, 183, 196], "cours": [4, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 168, 183, 196], "explicit": 4, "nest": [4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 35, 52, 53, 57, 58, 103, 109, 112, 124, 136, 164, 167, 168, 171, 173, 175, 177, 179, 182, 187, 188, 189, 196, 198, 200, 201], "modal": [4, 12, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 109, 110, 112, 126, 134, 164, 171, 175, 176, 179, 181, 184, 188, 193, 194, 200, 201, 202, 203], "load": [4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 23, 33, 34, 35, 36, 37, 39, 42, 53, 57, 58, 60, 64, 66, 69, 103, 111, 161, 164, 165, 166, 168, 172, 174, 181, 186, 191, 193, 197, 200], "former": [4, 170, 181], "sqliteconfig": [4, 12, 13, 17, 58, 59, 93, 94], "cfg": 4, "test": [4, 5, 6, 10, 108, 161, 170, 171, 174, 191, 199, 201], "flexibl": [4, 170], "error": [4, 187, 196], "prone": 4, "placehold": 4, "prototyp": [4, 9, 198], "unnecessarili": 4, "relev": [4, 143, 187, 202, 203], "scale": [4, 109, 112, 121, 200], "desir": [4, 109, 112, 121, 194], "eas": 4, "setup": 4, "million": [4, 10, 109, 112, 121, 181, 190, 193], "benchmark": [4, 6, 190, 193, 200], "exact": [4, 20, 58], "scan": [4, 13, 53, 59, 81, 84, 163, 185], "explan": [4, 8, 192], "found": [4, 8, 136, 171, 181, 193, 196, 197, 200], "introduc": [4, 161, 176, 181, 183, 196], "consider": [4, 8], "think": [4, 171, 184], "program": [4, 162, 191], "view": [4, 109, 112, 121, 163], "sync": [4, 13, 14, 16, 18, 19, 20, 53, 57, 58, 59, 60, 63, 66, 68, 71, 74, 76, 79, 81, 84, 87, 90, 93, 95, 98, 101, 103], "da1": [4, 7, 58, 185, 190], "my_index": 4, "len": [4, 168, 171, 181, 191, 193, 195, 196, 200], "execut": [4, 60, 64, 186], "fresh": 4, "increment": 4, "seem": [4, 173, 200], "happen": [4, 191], "scope": [4, 9, 179, 202, 203], "exit": [4, 8, 109, 112, 133, 169], "destroi": 4, "But": [4, 163, 168, 173, 175, 181, 183, 190, 196], "had": [4, 200], "occur": [4, 143], "correctli": [4, 10, 187, 198], "prove": 4, "yourself": [4, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 175, 191], "comment": 4, "third": 4, "explor": 4, "predict": [4, 187], "manner": 4, "another_index": 4, "hurrai": 4, "problem": [4, 10, 163, 190, 191, 196], "temp3": 4, "text": [4, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 29, 40, 53, 55, 57, 58, 71, 72, 73, 87, 88, 89, 103, 108, 109, 110, 111, 112, 115, 117, 119, 126, 134, 164, 166, 170, 171, 173, 175, 176, 177, 178, 179, 181, 183, 185, 186, 187, 188, 192, 193, 194, 196, 200, 201, 202, 203], "hello": [4, 14, 16, 17, 18, 19, 20, 21, 45, 53, 55, 57, 58, 103, 109, 162, 166, 167, 168, 171, 175, 176, 181, 183, 185, 192, 193, 194, 196, 200], "realli": [4, 171, 181], "date": 4, "sens": [4, 8, 109, 112, 121, 169, 187, 196], "speak": 4, "alreadi": [4, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 184, 189, 195, 199], "written": [4, 14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103, 168, 192, 197], "snippet": [4, 9, 172, 173, 193], "increas": [4, 136, 200], "simpli": [4, 8, 163, 165, 166, 168, 170, 171, 175, 178, 181, 183, 184, 186, 187, 189, 190, 193, 196, 197], "put": [4, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 124, 163, 169, 170, 171, 173, 177, 200], "meta": [4, 173, 202, 203], "immedi": [4, 191, 197], "costli": 4, "consequ": [4, 197], "block": [4, 10, 184, 191, 197, 200], "solv": [4, 171, 173, 191], "refactor": [4, 161, 172, 197, 200], "temp4": 4, "correct": [4, 181, 187, 193], "home": 4, "messag": [4, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 109, 112, 127, 176, 181, 185, 193], "write": [4, 167, 190, 197, 201], "row": [4, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103, 138, 139, 141, 142, 144, 145, 167, 171, 190, 200], "below": [4, 8, 168, 171, 179, 180, 184, 191, 192, 193, 197, 198, 200], "ani": [4, 8, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 55, 57, 58, 71, 72, 87, 88, 103, 109, 111, 112, 115, 117, 121, 125, 132, 134, 136, 145, 161, 166, 170, 171, 175, 179, 183, 184, 187, 188, 192, 194, 196, 197, 200, 202, 203], "any_store_beyond_in_memori": 4, "d": [4, 5, 10, 109, 112, 132, 136, 170, 171, 172, 175, 176, 177, 178, 180, 181, 183, 184, 185, 187, 188, 190, 191, 192, 193, 194, 196, 197, 200, 202, 203], "slice": [4, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 184], "NOT": [4, 55, 109, 112, 121], "chang": [4, 6, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 134, 163, 173, 174, 176, 181, 185, 187, 197, 200], "solut": [4, 172, 173, 175, 201], "selector": [4, 161, 170, 171, 172, 184], "obvious": 4, "disk": [4, 8, 10, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 161, 189], "concern": 4, "overwhelm": 4, "affect": [4, 161], "On": [4, 8, 168, 186, 198], "bright": 4, "modern": [4, 181, 196, 201], "highli": [4, 163, 173, 181, 193, 200], "resolv": [4, 9, 167], "activ": [4, 177, 186, 200, 201], "continu": [4, 171, 173, 183, 184, 193], "v0": [5, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 192], "6333": [5, 53, 81, 82], "ulimit": 5, "lot": [5, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103, 191], "collect": [5, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 124, 163, 173], "nofil": 5, "soft": 5, "65535": 5, "hard": [5, 163], "collection_nam": [5, 13, 53, 59, 81, 82, 83, 84, 86], "scroll_batch_s": [5, 13, 53, 59, 81, 82, 84], "scroll": 5, "larger": [5, 14, 16, 17, 18, 19, 20, 21, 39, 53, 57, 58, 103, 109, 112, 119], "full_scan_threshold": [5, 13, 53, 59, 81, 82], "minim": [5, 184], "amount": [5, 193], "payload": 5, "edg": [5, 8], "graph": [5, 6, 8, 145], "space": [5, 138, 184], "init": [5, 108, 171, 193], "4917906896": 5, "ndocumentarrai": [5, 193], "kei": [5, 8, 14, 16, 17, 18, 19, 20, 21, 26, 28, 51, 53, 55, 57, 58, 103, 108, 109, 112, 125, 132, 133, 136, 161, 164, 194, 202, 203], "redislab": 6, "redisearch": 6, "6379": [6, 57, 87, 88], "previuosli": 6, "idx": [6, 69, 169], "documentarrayredi": [6, 12, 13, 57, 90], "update_schema": [6, 13, 57, 59, 87, 88], "redis_config": [6, 13, 57, 59, 87, 88], "ef_runtim": [6, 13, 57, 59, 87, 88], "block_siz": [6, 13, 57, 59, 87, 88], "1048576": 6, "initial_cap": [6, 13, 57, 59, 87, 88], "socket_timeout": 6, "ssl": 6, "redissearch": 6, "l2": [6, 8], "ip": 6, "flat": [6, 8, 184], "syntax": [6, 131, 161, 170, 171, 172, 178, 184, 192, 200], "color": [6, 10, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 121, 124, 163, 197], "stock": 6, "blue": 6, "doc": [6, 9, 14, 16, 17, 18, 19, 20, 21, 24, 32, 52, 53, 55, 56, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 106, 108, 111, 145, 148, 161, 163, 165, 166, 170, 171, 173, 174, 175, 179, 180, 186, 188, 191, 192, 193, 195, 196, 197, 202, 203], "inf": 6, "score": [6, 8, 12, 14, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 58, 103, 109, 110, 112, 126, 134, 143, 160, 166, 177, 179, 181, 183, 187, 190, 193, 202, 203], "108": 6, "integ": [6, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 60, 65, 70, 71, 72, 75, 76, 80, 81, 86, 87, 88, 91, 93, 97, 98, 102, 103, 109, 112, 132, 168, 184, 202, 203], "treat": [6, 109, 112, 114], "With": [6, 8, 14, 20, 53, 58, 103, 166, 185, 191, 197], "geospati": 6, "geo": [6, 57, 87, 88], "max_dist": 6, "earth": 6, "coordin": [6, 179, 202, 203], "98": 6, "17": 6, "km": 6, "brute": [6, 8], "forc": [6, 8, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 109, 112, 127], "robust": 6, "hierarch": 6, "navig": 6, "small": [6, 8, 109, 112, 119, 139, 141, 142, 144, 164, 168, 184, 193], "world": [6, 166, 167, 168, 171, 173, 175, 176, 181, 183, 185, 193, 194, 196, 201], "both": [6, 7, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 161, 175, 180, 186, 190, 196, 200], "configuratoin": 6, "96046447754e": 6, "08": 6, "token1": 6, "token2": 6, "token3": 6, "token4": 6, "rank": [6, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 143, 187], "bm25": 6, "tfidf": 6, "docnorm": 6, "dismax": 6, "docscor": 6, "ham": [6, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "scorer": 6, "larg": [7, 8, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 119, 161, 164, 184, 186, 190, 191, 200], "reconnect": 7, "mine": [7, 58], "filenam": [7, 14, 16, 17, 18, 19, 20, 21, 23, 34, 35, 36, 39, 53, 57, 58, 103, 109, 111, 112, 115, 118, 121, 136, 185, 193], "serial": [7, 8, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 109, 112, 125, 136, 167, 189, 191, 196, 197, 199, 200, 201], "sqlite3": 7, "pragma": 7, "journal": [7, 166, 188], "mode": [7, 111, 136], "video": [8, 109, 112, 164, 171, 175, 178, 179, 198, 199, 200, 201, 202, 203], "tutori": [8, 9, 201], "guid": [8, 11, 14, 17, 20, 53, 58, 103, 109, 161], "command": [8, 57, 87, 88, 162], "8080": [8, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 98, 99, 103], "scheme": [8, 179, 202, 203], "semitechnologi": 8, "restart": 8, "failur": 8, "query_defaults_limit": 8, "25": [8, 188], "authentication_anonymous_access_en": 8, "persistence_data_path": 8, "var": 8, "lib": 8, "default_vectorizer_modul": 8, "enable_modul": 8, "cluster_hostnam": 8, "node1": 8, "protocol": [8, 10, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 34, 39, 53, 57, 58, 59, 98, 99, 103, 109, 112, 125, 136, 151, 153, 161, 181, 191, 192, 193, 197, 200], "bound": [8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 108, 169, 174, 191], "capit": 8, "1234": [8, 103, 186], "preses": 8, "comput": [8, 14, 16, 17, 18, 19, 20, 21, 26, 28, 42, 53, 57, 58, 103, 109, 112, 121, 138, 141, 142, 168, 179, 184, 189, 190, 193, 196, 200, 202, 203], "squar": [8, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 139, 141, 142, 170], "chosen": [8, 136, 190], "becom": [8, 184], "tradeoff": 8, "timeout_config": [8, 13, 59, 98, 99, 103], "timeout": [8, 109, 112, 115, 121, 132], "request": [8, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 136, 191, 193, 197, 199, 201], "dynamic_ef_min": [8, 13, 59, 98, 99, 103], "act": 8, "boundari": 8, "enough": [8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 168, 200], "suggest": [8, 191], "never": [8, 181], "drop": [8, 60, 64, 176], "dynamic_ef_max": [8, 13, 59, 98, 99, 103], "cap": 8, "massiv": 8, "dynamic_ef_factor": [8, 13, 59, 98, 99, 103], "determin": [8, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 109, 112, 121, 133, 136, 143, 169, 171], "factor": 8, "vector_cache_max_object": [8, 13, 59, 98, 99, 103], "held": 8, "2m": 8, "lookup": [8, 13, 54, 56], "magnitud": 8, "cach": [8, 136], "sparingli": 8, "flat_search_cutoff": [8, 13, 59, 98, 99, 103], "absolut": 8, "cutoff": 8, "bypass": 8, "entir": [8, 166], "40000": 8, "turn": [8, 168], "cleanup_interval_second": [8, 13, 59, 98, 99, 103], "async": [8, 196], "process": [8, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 109, 112, 114, 115, 116, 117, 118, 121, 122, 132, 133, 162, 164, 166, 173, 174, 178, 184, 193, 196, 197, 199, 200, 201], "repair": 8, "prior": 8, "cleanup": 8, "mark": [8, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 168], "still": [8, 161, 166, 171, 184, 191], "member": [8, 108, 201], "reassign": 8, "datapoint": 8, "typic": [8, 55], "adjust": 8, "down": [8, 199], "clean": [8, 196], "skip": [8, 13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 59, 98, 99, 103, 109, 112, 124], "situat": 8, "doesn": [8, 163], "meant": 8, "glue": 8, "duplic": [8, 134], "candid": 8, "worst": 8, "earli": [8, 184, 198], "met": 8, "togeth": [8, 14, 16, 17, 18, 19, 20, 21, 22, 24, 32, 36, 53, 57, 58, 103, 111, 136, 163, 184, 185, 197], "normal": [8, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 109, 112, 121, 124, 131, 143, 144, 163, 178, 191, 197], "immut": 8, "And": [8, 55, 168, 188, 196], "bert": 8, "transform": 8, "automodel": 8, "autotoken": 8, "token": [8, 14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 168, 172, 193], "from_pretrain": 8, "uncas": 8, "collate_fn": [8, 14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103], "return_tensor": 8, "pt": 8, "truncat": 8, "pad": [8, 14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 109, 112, 121, 132, 168, 184], "path": [8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 34, 44, 52, 53, 57, 58, 103, 109, 111, 112, 124, 134, 136, 171, 179, 183, 184, 185, 192, 194, 202, 203], "lessthanequ": 8, "valuenumb": 8, "lowerthanequ": 8, "valueint": 8, "v3": 8, "upgrad": 8, "primit": [8, 171], "natur": [8, 161, 175, 183, 185], "further": [8, 11, 14, 17, 20, 53, 58, 103, 109, 166, 168, 170, 179, 196], "lowest": 8, "dummi": [8, 9], "word": [8, 14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 109, 112, 132, 161, 168, 173, 184, 194, 200], "desc": 8, "asc": 8, "ascend": 8, "nearvector": 8, "combin": [8, 164, 179, 193, 197], "sometim": [8, 109, 112, 115, 117, 132, 168], "query_param": 8, "dictionari": [8, 14, 16, 17, 18, 19, 20, 21, 28, 51, 53, 57, 58, 103, 109, 112, 132, 134, 188, 194], "bodi": [8, 165, 168, 196], "familiar": [8, 166, 170, 173, 195, 200], "graphql": [8, 197, 199, 201], "goe": 8, "36840257": 8, "13973749": 8, "28994447": 8, "_addit": 8, "said": [8, 191], "theoret": 8, "anyth": [8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 189, 190], "weaviate_certainti": 8, "someth": [8, 177, 187, 197], "0000001": 8, "cosine_similar": 8, "0000002000000001": 8, "attach": [8, 109, 112, 133, 195], "featureproject": 8, "classif": 8, "page": [8, 166, 175], "text2vec": 8, "contextionari": 8, "respons": [8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 191, 201], "param": [8, 14, 16, 17, 18, 19, 20, 21, 41, 47, 53, 55, 57, 58, 103, 138, 139, 145], "creationtimeunix": 8, "lastupdatetimeunix": 8, "tags__creationtimeunix": 8, "tags__lastupdatetimeunix": 8, "1656020204563": 8, "exactli": [9, 171, 197], "verbos": 9, "rest": [9, 181, 191, 193, 196, 200], "stabl": 9, "app": [9, 196, 201], "endpoint": [9, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 192, 196, 197], "schema": [9, 14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 58, 60, 64, 98, 99, 103, 109, 112, 128, 134, 161, 174, 179, 181, 201], "strawberri": [9, 13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 58, 103, 109, 112, 199, 201], "debug": [9, 136, 198], "articl": [9, 170, 171, 173, 199], "serv": [9, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 177], "introduct": [9, 161], "background": [9, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "stronli": 9, "confus": [9, 161], "matcharrai": [9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 109, 112, 126, 183, 184, 187], "rememb": [9, 168, 170, 193], "fetch": [9, 175], "strawberry_typ": [9, 12, 109], "strawberrydocu": [9, 14, 16, 17, 18, 19, 20, 21, 50, 53, 57, 58, 103, 109, 112, 130], "lambda": [9, 108, 166, 168, 171, 172, 174, 187], "to_strawberry_typ": [9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 50, 53, 57, 58, 103, 109, 112, 130], "notic": [9, 55, 188], "could": [9, 14, 16, 17, 18, 19, 20, 21, 36, 41, 53, 57, 58, 103, 111, 163, 166, 179, 191, 202, 203], "preprocess": [9, 10, 163, 172, 178, 191, 193], "toi": [9, 162, 167, 169], "py": [9, 111], "consol": [9, 197, 198], "8000": 9, "browser": 9, "graphiql": 9, "playground": 9, "url": [9, 136, 179, 199, 202, 203], "beyond": [9, 196, 198], "decid": [9, 109, 112, 124], "perfect": [9, 172, 201], "short": [9, 161, 168, 196], "wrap": [9, 68, 109, 112, 123, 136, 171, 176, 197], "asgi": 9, "graphql_app": 9, "add_rout": 9, "add_websocket_rout": 9, "tensorflow": [10, 137, 138, 175, 177, 179, 183, 186, 190, 200, 201], "paddlepaddl": [10, 175, 177, 179, 183, 186, 200, 201], "tensor": [10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26, 44, 53, 57, 58, 103, 109, 110, 112, 114, 117, 121, 122, 124, 126, 132, 133, 134, 141, 142, 145, 161, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 186, 190, 191, 193, 198, 199, 200, 201, 202, 203], "spars": [10, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 109, 112, 119, 138, 139, 145, 175, 177, 179, 183, 190, 199, 201, 202, 203], "dens": [10, 109, 112, 119, 145, 163, 175, 177, 179, 181, 183, 186, 190, 202, 203], "pickl": [10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 34, 43, 53, 57, 58, 103, 109, 112, 125, 161, 181], "protobuf": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 34, 39, 53, 57, 58, 103, 104, 109, 111, 112, 125, 136, 154, 161, 176, 185, 191, 199, 200, 201, 202], "o": [10, 173, 184], "compress": [10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 34, 53, 57, 58, 103, 109, 112, 125, 136, 181, 191, 193, 199, 200, 201], "transit": [10, 197, 200, 201], "preserv": [10, 14, 16, 17, 18, 19, 20, 21, 24, 32, 44, 53, 57, 58, 103, 109, 112, 114, 184], "paddl": [10, 14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103, 137, 138, 186, 190], "torch": [10, 26, 137, 138, 145, 166, 170, 172, 177, 186, 190, 199, 200, 201], "to_spars": 10, "to_tensor": 10, "save_binari": [10, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 39, 53, 57, 58, 103, 193], "gz": [10, 111], "again": [10, 193, 196], "load_binari": [10, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 58, 103, 161, 193], "engin": [10, 18, 53, 57, 103, 171, 181, 196, 200, 201], "gpu": [10, 184, 186, 192, 193, 200, 201], "intens": [10, 200], "stuff": 10, "mani": [10, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 109, 112, 121, 163, 173, 193, 196, 197, 198, 200], "pitfal": 10, "few": [10, 173], "cpu": [10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 42, 43, 53, 57, 58, 103, 131, 138, 141, 142, 172, 184, 186, 190, 199, 201], "util": [10, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103], "drain": [10, 191], "dataload": [10, 13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 58, 103], "illustr": [10, 172, 180], "14gb": 10, "cpu_job": [10, 191], "sleep": [10, 191], "job": [10, 191], "gpu_job": [10, 191], "func": [10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 77, 103, 136, 191], "num_work": [10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 42, 43, 53, 57, 58, 103, 131, 191], "donecpu": 10, "section": [11, 171, 173, 176, 189, 191, 196, 199, 200], "codebas": [11, 172, 193, 200], "extract": [11, 109, 112, 121, 136, 162, 164], "docstr": 11, "mixin": [12, 13, 78, 109, 154], "queryset": [12, 13], "annliteconfig": [12, 13, 14, 17, 59, 60, 61], "documentarrayannlit": [12, 13, 14, 194], "chunk": [12, 13, 14, 17, 18, 19, 20, 21, 47, 52, 53, 57, 58, 103, 109, 110, 112, 121, 122, 126, 134, 163, 164, 166, 169, 170, 171, 173, 174, 175, 176, 179, 180, 181, 182, 183, 184, 191, 193, 194, 200, 202, 203], "chunkarrai": [12, 13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 109, 112, 126, 163, 183, 184, 194], "elast": [12, 13, 59], "documentarrayelast": [12, 13, 18, 74], "elasticconfig": [12, 13, 17, 18, 59, 71, 72], "documentarrayqdr": [12, 13, 53], "qdrantconfig": [12, 13, 53, 59, 81, 82], "redisconfig": [12, 13, 17, 57, 59, 87, 88], "documentarrayweavi": [12, 13, 53, 98, 99, 101, 103], "weaviateconfig": [12, 13, 17, 59, 98, 99, 103], "getter": [12, 22, 30, 105, 108, 172, 174, 175], "image_gett": [12, 105, 106, 108], "text_gett": [12, 105, 106, 108], "uri_gett": [12, 105, 106], "audio_gett": [12, 105, 106], "video_gett": [12, 105, 106], "mesh_gett": [12, 105, 106], "tabular_gett": [12, 105, 106], "blob_gett": [12, 105, 106], "json_gett": [12, 105, 106], "setter": [12, 22, 105, 108, 172, 174, 175], "image_sett": [12, 105, 107, 108], "text_sett": [12, 105, 107, 108], "uri_sett": [12, 105, 107], "audio_sett": [12, 105, 107], "video_sett": [12, 105, 107], "mesh_sett": [12, 105, 107], "blob_sett": [12, 105, 107], "json_sett": [12, 105, 107], "tabular_sett": [12, 105, 107], "is_multimod": [12, 105, 108, 109, 112, 123, 171], "documentdata": [12, 109, 110], "from_ndarrai": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 58, 103, 109, 111], "from_fil": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 58, 103, 109, 111, 163, 185, 191, 195, 197], "from_csv": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 58, 103, 109, 111, 167], "from_huggingface_dataset": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 58, 103, 109, 111], "from_ndjson": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 58, 103, 109, 111], "from_lin": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 58, 103, 109, 111], "pydantic_model": [12, 109, 196], "pydanticdocu": [12, 14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 58, 103, 109, 112, 128, 134, 196], "adjac": [12, 13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 109, 110, 112, 126, 134, 176, 177, 179, 180, 181, 182, 184, 187, 193, 202, 203], "blob": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103, 109, 110, 112, 117, 121, 126, 134, 161, 171, 174, 175, 176, 177, 178, 179, 181, 183, 193, 202, 203], "clear": [12, 13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 60, 64, 65, 66, 69, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 104, 109, 154, 175, 180], "content_hash": [12, 109, 112, 116], "content_typ": [12, 109, 112, 126, 134, 175], "convert_blob_to_datauri": [12, 109, 112, 115, 178], "convert_blob_to_image_tensor": [12, 109, 112, 121, 178], "convert_blob_to_tensor": [12, 109, 112, 117, 178], "convert_content_to_datauri": [12, 109, 112, 116, 178], "convert_image_tensor_to_blob": [12, 109, 112, 121, 178], "convert_image_tensor_to_sliding_window": [12, 109, 112, 121, 163, 178], "convert_image_tensor_to_uri": [12, 109, 112, 121, 178], "convert_tensor_to_blob": [12, 109, 112, 117, 178], "convert_tensor_to_text": [12, 109, 112, 132, 168, 178], "convert_text_to_datauri": [12, 109, 112, 132, 178], "convert_text_to_tensor": [12, 109, 112, 132, 168, 178], "convert_uri_to_datauri": [12, 109, 112, 117, 175, 178], "copy_from": [12, 104, 109, 154, 176], "displai": [12, 109, 112, 124, 164, 182], "display_tensor": [12, 109, 112, 124], "display_uri": [12, 109, 112, 124], "embed_feature_hash": [12, 17, 20, 109, 112, 119, 166, 168, 178], "from_base64": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 58, 103, 109, 112, 125, 178, 181, 193], "from_byt": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 58, 103, 109, 112, 125, 161, 178, 181, 193], "from_dict": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 37, 39, 53, 57, 58, 103, 109, 112, 125, 161, 178, 181], "from_json": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 58, 103, 109, 112, 125, 161, 178, 181, 193, 196], "from_protobuf": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 58, 103, 109, 112, 127, 178, 181, 193], "from_pydantic_model": [12, 13, 14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 58, 103, 109, 112, 128, 178, 193, 196], "from_strawberry_typ": [12, 13, 14, 16, 17, 18, 19, 20, 21, 50, 53, 57, 58, 103, 109, 112, 130, 178], "generator_from_webcam": [12, 109, 112, 133, 169], "get_json_schema": [12, 13, 14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 58, 103, 109, 112, 128, 196], "get_multi_modal_attribut": [12, 109, 112, 123], "get_vocabulari": [12, 13, 14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 109, 112, 132, 168], "granular": [12, 13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 109, 110, 112, 126, 134, 166, 168, 170, 171, 174, 176, 179, 180, 181, 182, 184, 193, 202, 203], "load_pil_image_to_datauri": [12, 109, 112, 121], "load_uri_to_audio_tensor": [12, 109, 112, 114, 162, 178], "load_uri_to_blob": [12, 108, 109, 112, 115, 174, 178], "load_uri_to_image_tensor": [12, 109, 112, 121, 163, 175, 177, 178, 191, 194, 197], "load_uri_to_point_cloud_tensor": [12, 109, 112, 122, 165, 178], "load_uri_to_text": [12, 109, 112, 132, 168, 175, 178], "load_uri_to_video_tensor": [12, 109, 112, 133, 169, 178], "mime_typ": [12, 109, 110, 112, 126, 134, 163, 166, 168, 170, 171, 174, 175, 176, 179, 181, 183, 185, 192, 193, 202, 203], "nbyte": [12, 104, 109, 154], "non_empty_field": [12, 104, 109, 154, 175], "offset": [12, 64, 109, 110, 112, 117, 126, 134, 179, 181, 184, 193, 202, 203], "parent_id": [12, 109, 110, 112, 126, 134, 166, 168, 170, 171, 174, 176, 179, 180, 181, 182, 184, 193, 194, 202, 203], "plot_matches_sprit": [12, 109, 112, 124, 195], "pop": [12, 13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 60, 65, 66, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 104, 109, 154, 175], "post": [12, 13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 58, 103, 109, 112, 131, 170, 173, 191, 192, 196, 197], "save_audio_tensor_to_fil": [12, 109, 112, 114, 162, 178], "save_blob_to_fil": [12, 109, 112, 115, 178], "save_image_tensor_to_fil": [12, 109, 112, 121, 163, 169, 178], "save_uri_to_fil": [12, 109, 112, 118, 178], "save_video_tensor_to_fil": [12, 109, 112, 133, 169, 178], "set_image_tensor_channel_axi": [12, 109, 112, 121, 163, 166, 177, 178, 191, 197], "set_image_tensor_inv_norm": [12, 109, 112, 121, 178], "set_image_tensor_norm": [12, 109, 112, 121, 163, 166, 177, 178, 191, 197], "set_image_tensor_resampl": [12, 109, 112, 121], "set_image_tensor_shap": [12, 109, 112, 121, 163, 166, 178], "set_multi_modal_attribut": [12, 109, 112, 123], "to_base64": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 58, 103, 109, 112, 125, 181, 193], "to_byt": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 58, 103, 109, 112, 125, 161, 181, 193], "to_dict": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 58, 103, 109, 112, 125, 154, 156, 158, 161, 181, 188, 193], "to_json": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 58, 103, 109, 112, 125, 161, 181, 193, 196], "to_protobuf": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 58, 103, 109, 112, 127, 181, 193], "to_pydantic_model": [12, 13, 14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 58, 103, 109, 112, 128, 193, 196], "uri": [12, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 121, 122, 124, 126, 132, 133, 134, 162, 163, 165, 166, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 185, 191, 192, 193, 194, 198, 202, 203], "weight": [12, 109, 110, 112, 126, 134, 143, 179, 181, 188, 193, 202, 203], "math": [12, 160, 191], "r_precis": [12, 137, 143, 187], "precision_at_k": [12, 137, 143, 187], "hit_at_k": [12, 137, 143, 187], "average_precis": [12, 137, 143, 187], "reciprocal_rank": [12, 137, 143, 187], "recall_at_k": [12, 137, 143, 187], "f1_score_at_k": [12, 137, 143, 187], "dcg_at_k": [12, 137, 143, 187], "ndcg_at_k": [12, 137, 143, 187], "helper": [12, 21, 22, 23, 26, 27, 30, 31, 32, 35, 36, 38, 43, 44, 45, 49, 59, 60, 66, 81, 93, 109, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 128, 130, 132, 133, 137, 160, 168, 178], "minmax_norm": [12, 137, 144], "top_k": [12, 109, 112, 124, 137, 144, 195], "update_rows_x_mat_best": [12, 137, 144], "unravel": [12, 137, 145, 183], "ravel": [12, 137, 145], "get_array_typ": [12, 137, 145], "to_numpy_arrai": [12, 137, 145], "to_list": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 58, 103, 137, 145, 181, 193, 200], "get_array_row": [12, 137, 145], "check_arraylike_equ": [12, 137, 145], "detach_tensor_if_pres": [12, 137, 145], "proto": [12, 134, 160], "io": [12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 146, 161, 162, 172, 173, 175, 181, 191, 199, 200, 201], "pb": [12, 146], "pb2": [12, 146], "docarray_pb2": [12, 146, 150, 152, 181], "namedscoredata": [12, 154, 155], "namedscor": [12, 109, 110, 112, 126, 154, 166, 179], "op_nam": [12, 154, 155, 156, 157, 202, 203], "ref_id": [12, 154, 155, 156, 157, 168, 202, 203], "basedctyp": [12, 104, 109, 154, 160], "typenam": [12, 136, 160], "deprecate_bi": [12, 136, 160], "dunder_get": [12, 136, 160], "random_ident": [12, 136, 160], "random_uuid": [12, 136, 160], "download_mermaid_url": [12, 136, 160], "get_request_head": [12, 136, 160], "get_full_vers": [12, 136, 160], "get_ci_vendor": [12, 136, 160], "reset_port": [12, 136, 160], "random_port": [12, 136, 160], "cached_properti": [12, 136, 160], "compress_byt": [12, 136, 160], "decompress_byt": [12, 136, 160], "get_compress_ctx": [12, 136, 160], "dataclass_from_dict": [12, 136, 160], "protocol_and_compress_from_file_path": [12, 136, 160], "add_protocol_and_compress_to_file_path": [12, 136, 160], "filter_dict": [12, 136, 160], "contentpropertymixin": [13, 21, 22, 109, 112, 116], "delitem": [13, 21, 63, 79, 95], "delitemmixin": [13, 21, 25], "embedmixin": [13, 21, 26], "get_framework": [13, 21, 26], "emptymixin": [13, 21, 27], "evaluationmixin": [13, 21, 28], "getattr": [13, 21], "getattributemixin": [13, 21, 30], "getitem": [13, 21, 63, 79, 95], "getitemmixin": [13, 21, 31], "groupmixin": [13, 21, 24, 32], "matchmixin": [13, 21, 42], "parallelmixin": [13, 21, 24, 43], "plotmixin": [13, 21, 44, 109, 112, 124], "postmixin": [13, 21, 45], "pydant": [13, 14, 16, 17, 18, 19, 20, 21, 50, 53, 57, 58, 103, 109, 112, 125, 181, 193], "pydanticmixin": [13, 21, 46, 109, 112, 128], "reduc": [13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 58, 103], "reducemixin": [13, 21, 47], "sampl": [13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 58, 103, 109, 111, 112, 114, 122, 165, 171], "samplemixin": [13, 21, 48], "setitem": [13, 21, 63, 79, 95], "setitemmixin": [13, 21, 49], "strawberrymixin": [13, 21, 50, 109, 112, 130], "texttoolsmixin": [13, 21, 51], "travers": [13, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 57, 58, 103, 180, 184, 200], "traversemixin": [13, 21, 52], "apply_batch": [13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 191], "batch_id": [13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 53, 57, 58, 103], "cloud_delet": [13, 14, 16, 17, 18, 19, 20, 21, 33, 41, 53, 57, 58, 103, 193], "cloud_list": [13, 14, 16, 17, 18, 19, 20, 21, 33, 41, 53, 57, 58, 103, 193], "cloud_pul": [13, 14, 16, 17, 18, 19, 20, 21, 33, 41, 53, 57, 58, 103], "cloud_push": [13, 14, 16, 17, 18, 19, 20, 21, 33, 41, 53, 57, 58, 103], "flatten": [13, 14, 16, 17, 18, 19, 20, 21, 36, 52, 53, 57, 58, 103, 167, 183], "from_datafram": [13, 14, 16, 17, 18, 19, 20, 21, 33, 37, 53, 57, 58, 103, 193], "from_list": [13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 58, 103, 193], "load_csv": [13, 14, 16, 17, 18, 19, 20, 21, 33, 36, 53, 57, 58, 103], "load_json": [13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 58, 103], "map_batch": [13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 184], "plot_image_sprit": [13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 163, 169, 195, 197], "pull": [13, 14, 16, 17, 18, 19, 20, 21, 33, 41, 53, 57, 58, 103, 168, 193, 199, 201], "push": [13, 14, 16, 17, 18, 19, 20, 21, 33, 41, 53, 57, 58, 103, 191, 193, 197, 199, 201], "reduce_al": [13, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103], "save_csv": [13, 14, 16, 17, 18, 19, 20, 21, 33, 36, 53, 57, 58, 103, 167], "save_embeddings_csv": [13, 14, 16, 17, 18, 19, 20, 21, 33, 36, 53, 57, 58, 103], "save_gif": [13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "save_json": [13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 39, 53, 57, 58, 103], "shuffl": [13, 14, 16, 17, 18, 19, 20, 21, 24, 32, 38, 43, 48, 53, 57, 58, 103, 111, 187], "split_by_tag": [13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 53, 57, 58, 103, 184], "to_datafram": [13, 14, 16, 17, 18, 19, 20, 21, 33, 37, 53, 57, 58, 103, 193], "traverse_flat": [13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103], "traverse_flat_per_path": [13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103], "lookuptreeelem": [13, 54, 55], "lookupnod": [13, 54, 55], "lookupleaf": [13, 54, 55], "q": [13, 54, 55, 109, 168, 177, 181, 190, 193], "lookupyerror": [13, 54, 55], "dunder_partit": [13, 54, 55], "iff": [13, 54, 55], "iff_not_non": [13, 54, 55], "guard_typ": [13, 54, 55], "guard_str": [13, 54, 55], "guard_list": [13, 54, 55], "guard_q": [13, 54, 55], "guard_it": [13, 54, 55], "parser": [13, 54, 109, 112, 125], "querypars": [13, 54, 56], "registri": [13, 59], "type_map": [13, 14, 16, 18, 19, 20, 53, 57, 58, 59, 60, 61, 66, 67, 71, 72, 76, 77, 81, 82, 87, 88, 93, 94, 98, 99, 103], "count": [13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 60, 65, 66, 67, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 109, 112, 117], "revers": [13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 60, 65, 66, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 162], "reference_doc": [13, 16, 19], "max_es_returned_doc": [13, 18, 59, 71, 74], "collection_name_meta": [13, 53, 59, 81], "serialization_config": [13, 53, 59, 81, 84], "schema_vers": [13, 58, 59, 93, 94, 96], "factori": [14, 18, 53, 57, 58, 60, 61, 71, 72, 81, 82, 87, 88, 93, 94, 98, 99, 103, 110], "tupl": [14, 16, 17, 18, 19, 20, 21, 42, 44, 51, 53, 57, 58, 60, 61, 67, 71, 72, 81, 82, 87, 88, 98, 99, 103, 104, 109, 112, 119, 121, 131, 132, 133, 136, 144, 145, 154, 175, 177, 179, 183, 185], "typemap": [14, 16, 18, 19, 20, 53, 57, 58, 59, 60, 61, 66, 67, 71, 72, 76, 77, 81, 82, 87, 88, 93, 94, 98, 99, 103], "_safe_cast_int": [14, 18, 60, 61, 71, 72, 98, 99, 103], "sequenc": [14, 15, 16, 17, 18, 19, 20, 21, 22, 36, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 109, 112, 115, 117, 121, 132, 185, 202, 203], "noqa": [14, 16, 17, 18, 19, 20, 21, 24, 38, 43, 53, 57, 58, 103], "dar102": [14, 16, 17, 18, 19, 20, 21, 24, 38, 43, 53, 57, 58, 103], "dar101": [14, 16, 17, 18, 19, 20, 21, 24, 38, 43, 53, 57, 58, 103], "dar201": [14, 16, 17, 18, 19, 20, 21, 24, 38, 43, 53, 57, 58, 103], "rtype": [14, 16, 17, 18, 19, 20, 21, 24, 34, 43, 47, 53, 57, 58, 103, 138, 139, 145], "show_progress": [14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 41, 43, 44, 45, 53, 57, 58, 103, 192, 193, 197], "until": [14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 57, 58, 103, 191], "along": [14, 16, 17, 18, 19, 20, 21, 22, 24, 29, 32, 53, 57, 58, 71, 73, 87, 89, 103], "traversal_path": [14, 16, 17, 18, 19, 20, 21, 24, 32, 52, 53, 57, 58, 103], "bool": [14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 32, 34, 36, 38, 41, 42, 43, 44, 45, 52, 53, 55, 57, 58, 71, 72, 73, 87, 88, 89, 98, 99, 103, 108, 109, 111, 112, 115, 117, 119, 121, 122, 123, 124, 131, 132, 133, 134, 136, 144, 145, 202, 203], "divid": [14, 16, 17, 18, 19, 20, 21, 24, 32, 43, 53, 57, 58, 103], "minibatch": [14, 16, 17, 18, 19, 20, 21, 24, 32, 43, 53, 57, 58, 103, 191], "progress": [14, 16, 17, 18, 19, 20, 21, 24, 32, 34, 41, 43, 44, 53, 57, 58, 103], "bar": [14, 16, 17, 18, 19, 20, 21, 24, 32, 34, 41, 43, 44, 53, 57, 58, 103, 109, 176], "properti": [14, 16, 17, 18, 19, 20, 21, 22, 28, 47, 53, 57, 58, 64, 67, 81, 83, 84, 86, 98, 99, 103, 104, 109, 112, 116, 123, 136, 154, 156, 171, 178, 196], "byte": [14, 16, 17, 18, 19, 20, 21, 22, 34, 53, 57, 58, 87, 88, 103, 104, 109, 110, 112, 114, 117, 125, 126, 136, 154, 171, 176, 179, 185, 200, 201, 202, 203], "static": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 200], "cloud": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 122, 164, 171, 178, 197, 199, 200, 201], "show_tabl": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 193], "classmethod": [14, 16, 17, 18, 19, 20, 21, 23, 27, 34, 35, 36, 37, 38, 39, 41, 46, 50, 53, 57, 58, 103, 109, 112, 125, 127, 128, 130, 133, 134], "local_cach": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 193], "upload": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 191, 193, 197], "download": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 109, 112, 115, 136, 163, 177, 193, 199], "public": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 193, 197, 201], "brand": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "later": [14, 16, 17, 18, 19, 20, 21, 23, 24, 41, 43, 47, 53, 57, 58, 68, 103, 168, 174, 197], "kinda": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "clipboard": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "everyon": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "anyon": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 175], "surviv": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "complic": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 164, 173, 201], "lifetim": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 193], "atm": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "dai": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 168, 200], "week": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103, 193], "temporari": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "transmiss": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "creator": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "login": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "icon": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "emoji": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "fff": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 58, 103], "documentcontenttyp": [14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103, 109, 110, 112, 126], "arraytyp": [14, 16, 17, 18, 19, 20, 21, 22, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 109, 110, 112, 126, 131, 138, 139, 145, 149], "occurr": [14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 60, 65, 67, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103], "thread": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 109, 112, 133, 200], "pool": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103], "callabl": [14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 42, 43, 52, 53, 57, 58, 71, 73, 77, 87, 89, 103, 108, 131, 190], "place": [14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 43, 47, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 109, 112, 115, 163, 173, 178, 191], "multi": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 52, 53, 57, 58, 103, 164, 170, 176, 177, 179, 191, 196, 200, 201, 202, 203], "perhap": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103], "yourselv": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103], "wish": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103], "regardless": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 145, 184, 191], "multiprocess": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 109, 112, 133], "variabl": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 98, 99, 103, 136, 186, 193, 202, 203], "origin": [14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 32, 43, 53, 55, 57, 58, 103, 109, 112, 121, 136, 168, 172, 174, 178, 179, 184, 185, 202, 203], "share": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103, 173, 187, 193, 200], "worker": [14, 16, 17, 18, 19, 20, 21, 23, 24, 42, 43, 53, 57, 58, 103], "threadpool": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 103], "ignor": [14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 43, 47, 53, 57, 58, 71, 73, 87, 89, 103, 171, 191, 192], "close": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 58, 60, 64, 103, 168, 187, 200], "progressbar": [14, 16, 17, 18, 19, 20, 21, 23, 44, 45, 53, 57, 58, 103, 198], "embed_model": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103, 131, 141, 142], "devic": [14, 16, 17, 18, 19, 20, 21, 26, 42, 53, 57, 58, 103, 131, 138, 141, 142, 172, 186, 190], "256": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103, 109, 112, 119, 131, 166, 171, 177, 184, 190, 194, 195], "to_numpi": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103, 186], "fill": [14, 16, 17, 18, 19, 20, 21, 26, 28, 38, 53, 57, 58, 103, 111, 171, 174, 176, 180, 185, 186, 191], "inplac": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103, 109, 112, 114, 115, 116, 117, 121, 124, 132, 184, 191], "anydnn": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103, 131], "kera": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103, 186], "pytorch": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103, 163, 175, 177, 179, 183, 186, 190, 197, 199], "cuda": [14, 16, 17, 18, 19, 20, 21, 26, 42, 53, 57, 58, 103, 138, 141, 142, 172, 186, 190], "framework": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103, 145, 163, 181, 186, 190, 196, 200], "format": [14, 16, 17, 18, 19, 20, 21, 26, 29, 35, 36, 53, 57, 58, 71, 73, 87, 89, 103, 111, 181, 186, 196, 197, 200], "collatefntyp": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103], "mini": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 58, 103], "stack": [14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103], "ground_truth": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 187], "hash_fn": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 187], "metric_nam": [14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 131], "strict": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "label_tag": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "label": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 136, 171, 187, 202, 203], "groundtruth": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 187], "altern": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 187, 199, 201], "directli": [14, 16, 17, 18, 19, 20, 21, 22, 28, 44, 53, 57, 58, 103, 111, 163, 166, 170, 175, 176, 181, 182, 184, 185, 190, 194], "annot": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 108, 170, 173, 201], "form": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 109, 112, 115, 117, 132, 134, 170, 188, 193], "deriv": [14, 16, 17, 18, 19, 20, 21, 28, 51, 53, 55, 57, 58, 63, 68, 79, 95, 103, 109, 112, 132], "align": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 187], "semant": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 161, 190], "prevent": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "irrelev": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 187], "accident": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103], "keyword": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 58, 103, 109, 111, 112, 115, 121, 132, 134, 176, 187, 194], "exclude_self": [14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 131, 168, 187], "only_id": [14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 58, 71, 73, 87, 89, 103, 131, 190], "latter": [14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103, 170], "notimplementederror": [14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 71, 73, 87, 89, 103], "effect": [14, 16, 17, 18, 19, 20, 21, 42, 52, 53, 57, 58, 103, 109, 112, 121, 173, 176, 188], "_show_progress": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103], "df": [14, 16, 17, 18, 19, 20, 21, 37, 53, 57, 58, 103, 193], "panda": [14, 16, 17, 18, 19, 20, 21, 37, 53, 57, 58, 103, 167, 189, 193, 200], "datafram": [14, 16, 17, 18, 19, 20, 21, 33, 53, 57, 58, 103, 167, 185, 189, 200, 201], "jsonschema": [14, 16, 17, 18, 19, 20, 21, 39, 53, 57, 58, 103, 109, 112, 125, 161, 181], "pb_msg": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 109, 112, 127, 148, 149], "basemodel": [14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 58, 103, 109, 112, 128, 134, 196], "indent": [14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 58, 103, 109, 112, 128], "json": [14, 16, 17, 18, 19, 20, 21, 33, 35, 36, 38, 46, 53, 57, 58, 103, 109, 111, 112, 125, 128, 134, 166, 171, 173, 176, 185, 200, 201], "min_freq": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103], "text_attr": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 109, 112, 132], "vocabulari": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 109, 112, 132, 168], "textual": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 109, 112, 132, 166, 168], "minimum": [14, 16, 17, 18, 19, 20, 21, 44, 51, 53, 57, 58, 103, 109, 112, 124], "frequenc": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 109, 112, 114, 132], "reserv": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 109, 112, 132, 168], "unknown": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 58, 103, 109, 112, 132, 168, 181], "stop": [14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 60, 65, 67, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 201], "valueerror": [14, 15, 16, 17, 18, 19, 20, 26, 53, 57, 58, 60, 65, 67, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103, 187], "present": [14, 15, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 60, 65, 67, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103], "file_format": [14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 58, 103], "binari": [14, 16, 17, 18, 19, 20, 21, 33, 35, 36, 53, 57, 58, 103, 109, 111, 112, 115, 117, 125, 132, 143, 161, 175, 178, 179, 181, 185, 202, 203], "utf": [14, 16, 17, 18, 19, 20, 21, 35, 36, 39, 53, 57, 58, 103, 109, 111, 112, 115, 117, 132, 202, 203], "csv": [14, 16, 17, 18, 19, 20, 21, 33, 35, 38, 53, 57, 58, 103, 111, 164, 171, 185, 201], "textio": [14, 16, 17, 18, 19, 20, 21, 35, 36, 38, 39, 53, 57, 58, 103, 111], "binaryio": [14, 16, 17, 18, 19, 20, 21, 34, 35, 53, 57, 58, 103, 109, 112, 114, 115, 118, 121, 133], "human": [14, 16, 17, 18, 19, 20, 21, 34, 35, 39, 53, 57, 58, 103, 168], "readabl": [14, 16, 17, 18, 19, 20, 21, 34, 35, 39, 53, 57, 58, 103, 176, 184], "compat": [14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 58, 103, 161, 181], "complex": [14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 58, 103, 166], "restor": [14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 58, 103], "stream": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 161, 162, 169, 200, 201], "file_nam": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103], "interpol": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103], "respect": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 134, 166, 175, 199], "my_docarrai": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 193], "lz4": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 181, 193, 199, 201], "field_resolv": [14, 16, 17, 18, 19, 20, 21, 36, 38, 53, 57, 58, 103, 104, 109, 111, 154, 167, 176], "darrai": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 131], "use_scipi": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 131, 168, 190], "sqeuclidean": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 137, 138, 139, 141, 142, 190], "nativ": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 162, 197, 199], "scipi": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 109, 112, 119, 138, 139, 145, 175, 177, 179, 183, 190, 199, 201], "braycurti": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "canberra": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "chebyshev": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "cityblock": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "correl": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "dice": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "jaccard": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 168], "jensenshannon": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "kulsinski": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "mahalanobi": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "minkowski": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "rogerstanimoto": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "russellrao": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "seuclidean": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "sokalmichen": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "sokalsneath": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "wminkowski": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "yule": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "invert": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 188], "against": [14, 16, 17, 18, 19, 20, 21, 42, 53, 55, 57, 58, 103, 177, 187, 190], "b": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 134, 136, 168, 169, 171, 172, 174, 176, 181, 184, 190, 191, 193], "min": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 144, 200], "rescal": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "significantli": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103], "speedup": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 191, 200], "hand": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 109, 112, 132, 177, 181, 187, 190, 201], "matrix": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 58, 103, 109, 112, 119, 138, 144, 175, 177, 179, 183, 200], "titl": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 133, 168, 172, 196], "mydocumentarrai": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "image_sprit": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 195, 198], "min_image_s": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "channel_axi": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 121, 124, 163, 166, 195, 197], "start_serv": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "127": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "image_sourc": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "interact": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 195, 198], "visual": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 124, 169, 175, 186, 189, 193, 198, 199, 200, 201], "projector": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 199, 201], "multipl": [14, 16, 17, 18, 19, 20, 21, 24, 32, 44, 52, 53, 57, 58, 103, 109, 112, 122, 166, 168, 175, 180, 181, 183, 184, 187, 189, 193, 197, 200], "bind": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 196], "frontend": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "axi": [14, 16, 17, 18, 19, 20, 21, 22, 38, 44, 53, 57, 58, 103, 109, 111, 112, 121, 124, 163, 191, 197], "channel": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 121, 124, 163, 191, 201], "info": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 121, 124], "fallback": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "canvas_s": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 124], "512": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 194], "min_siz": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 124], "skip_empti": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 124], "show_index": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "fig_siz": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "keep_aspect_ratio": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "sprite": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 124, 164, 169, 199, 201], "ui": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 124], "canva": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 124], "who": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 171, 193, 200], "corner": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "aspect": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "ratio": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 121], "indexerror": [14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103], "remot": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 175, 179, 189, 192, 197, 202, 203], "flow": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 111, 197, 201], "sandbox": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 192, 197], "168": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 192, 197], "123": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103], "jinahub": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 192, 197], "latest": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 192, 199, 201], "send": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 58, 103, 172, 181, 191, 196], "merg": [14, 16, 17, 18, 19, 20, 21, 47, 53, 55, 57, 58, 103], "prioriti": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 200], "reduct": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103], "sequenti": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 186, 191], "belong": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 179, 202, 203], "kept": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103], "non": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 104, 109, 112, 115, 117, 121, 124, 132, 154, 176, 181, 184, 191, 193, 198], "sort": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 58, 103, 136], "IN": [14, 15, 16, 17, 18, 19, 20, 53, 55, 57, 58, 60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102, 103], "seed": [14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 103], "replac": [14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 103, 171], "state": [14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 103, 175], "produc": [14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 58, 103], "flatten_tag": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103, 167], "exclude_field": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103], "dialect": [14, 16, 17, 18, 19, 20, 21, 36, 38, 53, 57, 58, 103, 111], "excel": [14, 16, 17, 18, 19, 20, 21, 36, 38, 53, 57, 58, 103, 111], "with_head": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103], "tag__fieldnam": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103], "separ": [14, 16, 17, 18, 19, 20, 21, 36, 52, 53, 57, 58, 103, 111, 167, 170, 173, 181, 184], "wont": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103], "predefin": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103, 111, 179, 188], "savetxt": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 58, 103], "durat": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "size_ratio": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "inline_displai": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "gif": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "frame": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 133, 164], "millisecond": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "jupyt": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 176, 193, 201], "notebook": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 176, 182, 188, 201], "atribut": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103], "meth": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 103, 109, 112, 115, 121, 132], "newli": [14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103], "shape": [14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103, 109, 112, 121, 133, 138, 162, 163, 165, 166, 169, 171, 181, 183, 202, 203], "dtype": [14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 58, 103, 109, 112, 117, 132, 162, 166, 171, 177, 181, 202, 203], "_file_ctx": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103], "export": [14, 16, 17, 18, 19, 20, 21, 37, 53, 57, 58, 103, 181, 186], "ndarray_typ": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 109, 112, 127, 148, 149, 181], "documentarrayproto": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 58, 103, 193], "filter_fn": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103], "traversablesequ": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103], "leav": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103], "comma": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 170, 184], "c": [14, 16, 17, 18, 19, 20, 21, 52, 53, 55, 57, 58, 103, 109, 112, 121, 168, 169, 172, 183, 184, 194, 197, 199, 201, 202, 203], "child": [14, 16, 17, 18, 19, 20, 21, 52, 53, 55, 57, 58, 103], "cc": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 184, 194], "mm": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103], "cm": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 184, 188], "reach": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 161, 197], "fly": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103, 173], "traverse_flattened_per_path": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 103], "abstract": [15, 17, 68, 83, 84, 86], "subset": [16, 19], "doc_view": 16, "represent": [16, 134, 154, 156, 161, 165, 173, 176, 177, 186, 193, 200, 202, 203], "safeguard": 16, "legit": 16, "subindex_config": [17, 166, 168, 194], "cake": [17, 20], "lie": [17, 20], "barrel": [17, 20], "roll": [17, 20], "scores__jaccard__valu": [17, 20], "neural": [17, 166, 172, 201], "executor": [17, 163, 172, 173], "10000": [18, 71, 74], "doubl": [18, 55, 57, 71, 72, 87, 88, 136, 183, 202, 203], "documentarrayload": [21, 23, 24], "dataloadermixin": [21, 23], "lazyrequestread": [21, 33, 34], "binaryiomixin": [21, 33, 34], "commoniomixin": [21, 33, 35], "csviomixin": [21, 33, 36], "dataframeiomixin": [21, 33, 37], "from_gen": [21, 33], "fromgeneratormixin": [21, 33, 38], "jsoniomixin": [21, 33, 39], "pbar": [21, 33], "qpscolumn": [21, 33, 40], "get_pbar": [21, 33, 40], "get_progressbar": [21, 33, 40], "pushpul": [21, 33], "pushpullmixin": [21, 33, 41], "plugin": [21, 112], "__delitem__": [25, 68, 74, 90, 101], "dnn_model": 26, "dnn": [26, 177, 186], "solid": 26, "__module__": 26, "idea": [26, 172, 196, 200, 201], "tell": [26, 171], "subclass": [29, 68, 197], "bulk": [30, 177, 181, 183], "__getitem__": [31, 68, 74, 90, 101], "render": [33, 40, 182, 200], "get_table_column": [33, 40], "max_refresh": [33, 40], "dam": [36, 51], "recurs": [38, 111, 179, 180, 202, 203], "sampling_r": [38, 111], "read_mod": [38, 111, 185], "to_dataturi": [38, 111], "exclude_regex": [38, 111], "dataset_path": [38, 111], "filter_field": [38, 111], "datasets_kwarg": [38, 111], "fp": [38, 109, 111, 112, 133, 169], "filepath": [38, 111], "line_format": [38, 111], "text_format": 40, "justifi": 40, "markup": 40, "table_column": 40, "textcolumn": 40, "total": [40, 104, 109, 154, 191], "transmit": 41, "children": [47, 55], "__setitem__": [49, 68, 74, 90, 101], "nlp": [51, 200], "machin": [53, 103, 171, 177, 179, 193, 199], "qdrantclient": [53, 81, 83, 84, 86], "add_child": [54, 55], "with_traceback": [54, 55], "github": 55, "com": [55, 199], "naiquevin": 55, "lookupi": 55, "mit": 55, "licens": [55, 201], "copyright": 55, "2013": 55, "vineet": 55, "naik": 55, "naikvin": 55, "gmail": 55, "permiss": 55, "herebi": 55, "grant": 55, "charg": [55, 168], "obtain": 55, "softwar": [55, 165, 169], "associ": [55, 194], "deal": [55, 184, 197], "publish": 55, "sublicens": 55, "sell": 55, "permit": 55, "whom": 55, "furnish": 55, "subject": [55, 200], "shall": [55, 171, 173, 191], "substanti": 55, "portion": 55, "THE": [55, 166], "AS": 55, "warranti": 55, "OF": 55, "kind": [55, 109, 175, 200], "express": [55, 171, 173, 175, 179, 183, 185, 188, 201], "OR": [55, 188], "impli": 55, "BUT": 55, "TO": 55, "merchant": 55, "FOR": 55, "purpos": [55, 173, 175, 188, 200], "AND": [55, 188], "noninfring": 55, "NO": 55, "event": [55, 109, 112, 133, 201], "author": [55, 166, 173], "holder": 55, "BE": 55, "liabl": 55, "claim": 55, "damag": 55, "liabil": 55, "action": [55, 188, 194], "contract": 55, "tort": 55, "aris": 55, "WITH": [55, 166], "val": 55, "pair": [55, 172, 187], "hold": [55, 176], "text__exact": 55, "els": [55, 136, 143, 172, 189], "text_exact": 55, "tags__nam": 55, "tree": 55, "op": 55, "negat": 55, "eg": [55, 136], "language__neq": 55, "rubi": [55, 202, 203], "framework__startswith": 55, "language__exact": 55, "php": [55, 202, 203], "leaf": 55, "tb": 55, "__traceback__": 55, "dunderkei": [55, 136], "everyth": [55, 173, 181, 193, 200], "underscor": [55, 136], "a__b__c": 55, "a__b": [55, 136], "precond": 55, "shortcut": 55, "partial": [55, 191], "commonli": 55, "precondit": 55, "mix": [55, 136, 187, 189, 200, 201], "classinfo": 55, "textfield": [57, 87, 88], "numericfield": [57, 87, 88], "geofield": [57, 87, 88], "wal": [58, 93, 94], "simplest": [58, 163], "getsetdel": [59, 60, 66, 71, 76, 81, 87, 93, 98], "offsetmap": [59, 60, 64], "seqlik": [59, 60, 66, 71, 76, 81, 87, 93, 98], "needs_id2offset_rebuild": [59, 76, 77], "initialize_t": [59, 93, 96], "create_t": [60, 64], "extend_doc_id": [60, 64], "get_id_by_offset": [60, 64], "get_ids_by_offset": [60, 64], "get_offsets_by_id": [60, 64], "get_offset_by_id": [60, 64], "get_all_id": [60, 64], "del_at_offset": [60, 64], "insert_at_offset": [60, 64], "set_at_offset": [60, 64], "shift_offset": [60, 64], "drop_tabl": [60, 64], "dump": [60, 64, 109, 112, 125, 134, 163, 169, 178], "execute_mani": [60, 64], "kwd": [60, 65, 70, 71, 75, 76, 80, 81, 86, 87, 91, 93, 97, 98, 102], "in_memori": 64, "doc_id": 64, "shift_from": 64, "shift_step": 64, "data_fil": 64, "get_id": [66, 69], "delete_by_id": [66, 69], "delete_by_offset": [66, 69], "update_id": [66, 69], "9223372036854775807": 67, "_set_doc": 68, "_del_doc": 68, "_del_all_doc": 68, "wrapper": 68, "inner": [68, 170], "whenev": 68, "likewis": 68, "data_id": 69, "_ids_map": 69, "concret": [74, 90, 101], "container_type_nam": 96, "cur": 96, "_class_nam": [98, 99, 103], "_obj": [104, 109, 154], "unknown_fields_handl": [104, 109, 154, 176], "catch": [104, 109, 154, 176], "overwrit": [104, 109, 154], "emtpi": [104, 109, 154], "consum": [104, 109, 154, 190, 191], "_source_field": [108, 174], "default_factori": [108, 171], "repr": [108, 171], "hash": [108, 109, 112, 116, 119, 164, 171, 178, 187], "metadata": [108, 166, 179], "myimag": [108, 174], "my_sett": [108, 174], "my_gett": [108, 174], "mmdoc": [108, 170, 171, 172, 174], "banner": [108, 170, 171, 172, 173, 174, 184], "jpeg": [108, 109, 112, 121, 163, 170, 171, 174, 181, 185], "eq": [108, 188], "unsafe_hash": 108, "frozen": 108, "type_var_map": [108, 174], "_field": 108, "appl": [108, 163, 166, 175, 178, 181, 194], "png": [108, 109, 112, 121, 163, 166, 169, 172, 173, 175, 178, 183, 185, 194, 197], "__bound__": 108, "covari": 108, "__covariant__": 108, "contravari": 108, "__contravariant__": 108, "_types_registri": 108, "collid": 108, "obj": [108, 109, 112, 125, 134, 136], "getattributesmixin": [109, 112, 113], "audio": [109, 112, 164, 171, 173, 175, 178, 179, 198, 200, 201, 202, 203], "audiodatamixin": [109, 112, 114], "blobdatamixin": [109, 112, 115], "convertmixin": [109, 112, 117], "urifilemixin": [109, 112, 118], "featurehash": [109, 112], "featurehashmixin": [109, 112, 119], "imagedatamixin": [109, 112, 121], "mesh": [109, 112, 164, 171, 175, 178, 179, 199, 201], "meshdatamixin": [109, 112, 122], "multimodalmixin": [109, 112, 123], "portingmixin": [109, 112, 125], "propertymixin": [109, 112, 126, 154, 156, 157], "protobufmixin": [109, 112, 127], "rich_embed": [109, 112], "colorboxembed": [109, 112, 129], "sugar": [109, 112, 192], "singletonsugarmixin": [109, 112, 131], "textdatamixin": [109, 112, 132], "videodatamixin": [109, 112, 133], "smart_union": [109, 134], "from_orm": [109, 134], "parse_fil": [109, 134], "parse_obj": [109, 134], "parse_raw": [109, 134], "schema_json": [109, 134], "update_forward_ref": [109, 134], "valid": [109, 111, 112, 125, 134, 171, 181, 187, 191, 193, 194, 200, 201], "structvaluetyp": [109, 110, 112, 126], "basic": [109, 171, 172, 173, 179, 187, 198, 199, 200, 201], "3d": [109, 112, 122, 164, 175, 178, 179, 199, 201], "d1": [109, 175, 176, 177, 182, 185], "d3": [109, 176, 177, 182], "d4": [109, 176, 177], "foo": [109, 176, 191, 192, 197], "d0": [109, 176, 177, 182], "d2": [109, 176, 177, 182], "torchvis": [109, 166, 170, 177, 186, 199], "usr": [109, 199], "jpg": [109, 136, 163, 170, 177, 181, 183, 185, 191, 195], "resnet50": [109, 166, 170, 177, 186], "pretrain": [109, 112, 121, 166, 170, 177, 186], "organ": [109, 179], "charset": [109, 112, 115, 117, 132], "base64": [109, 112, 115, 117, 125, 132, 175, 201], "charact": [109, 112, 115, 117, 132, 168, 187], "regist": [109, 112, 115, 117, 132], "iana": [109, 112, 115, 117, 132], "arbitrari": [109, 112, 115, 117, 119, 132, 173, 193, 202, 203], "octet": [109, 112, 115, 117, 132], "rule": [109, 112, 115, 117, 132, 181, 191], "7bit": [109, 112, 115, 117, 132], "bit": [109, 112, 115, 117, 132, 163, 183, 184, 202, 203], "ascii": [109, 112, 115, 117, 132, 202, 203], "width": [109, 112, 114, 121, 124, 179, 180, 202, 203], "height": [109, 112, 121], "_valid_": [109, 112, 117, 121], "buffer": [109, 112, 117, 151, 153, 161, 163, 175, 181, 202, 203], "effort": [109, 112, 116, 181], "image_format": [109, 112, 121], "window_shap": [109, 112, 121, 163], "stride": [109, 112, 121, 163], "as_chunk": [109, 112, 121, 122, 163], "slide": [109, 112, 121, 163], "window": [109, 112, 121, 133, 163, 199, 201], "h": [109, 112, 121, 188], "target_s": [109, 112, 121], "denot": [109, 112, 121, 170], "vertic": [109, 112, 121, 180, 197], "horizont": [109, 112, 121, 180, 197], "patch": [109, 112, 121], "area": [109, 112, 121, 143], "outsid": [109, 112, 121], "zero": [109, 111, 112, 121, 139, 141, 142, 144, 168, 185, 202, 203], "vocab": [109, 112, 132, 168], "delimit": [109, 112, 132], "max_length": [109, 112, 132, 168], "int64": [109, 112, 132, 202, 203], "1d": [109, 112, 132, 144], "build_vocab": [109, 112, 132], "entri": [109, 112, 132, 144], "cut": [109, 112, 132, 163], "begin": [109, 112, 132, 168, 170, 200], "shorter": [109, 112, 132], "datauri": [109, 111, 112, 117, 121], "from_": [109, 112, 124], "max_valu": [109, 112, 119], "1000000": [109, 112, 119], "trick": [109, 112, 119, 196], "caus": [109, 112, 119], "collis": [109, 112, 119], "overal": [109, 112, 119, 166, 169, 197], "csr_matrix": [109, 112, 119, 138, 145, 190], "bytearrai": [109, 112, 125], "height_width": [109, 112, 133], "show_window": [109, 112, 133], "window_titl": [109, 112, 133], "webcam": [109, 112, 133, 164], "exit_kei": [109, 112, 133], "exit_ev": [109, 112, 133], "opencv": [109, 112, 133], "hardwar": [109, 112, 133, 169], "camera": [109, 112, 133], "preview": [109, 112, 133], "guarante": [109, 112, 133, 171, 200], "press": [109, 112, 133, 169], "asyncio": [109, 112, 133], "counter": [109, 112, 132], "text_field": [109, 112, 132], "pillow": [109, 112, 121, 163, 199, 201], "header": [109, 112, 121, 136, 191], "pilimag": [109, 112, 121], "_uri_to_blob": [109, 112, 115, 121, 132], "geometri": [109, 112, 122], "attr": [109, 112, 132], "only_keyfram": [109, 112, 133, 169], "keyfram": [109, 112, 133], "inv_norm": [109, 112, 124, 195], "1920": [109, 112, 124], "invers": [109, 112, 121, 124], "float32": [109, 112, 121, 124, 162, 166, 171, 177, 186, 190, 202, 203], "uint8": [109, 112, 121, 124, 171, 193], "sample_r": [109, 112, 114], "44100": [109, 112, 114], "sample_width": [109, 112, 114], "wav": [109, 112, 114, 164, 171], "mono": [109, 112, 114], "stereo": [109, 112, 114], "frame_r": [109, 112, 133], "codec": [109, 112, 133], "h264": [109, 112, 133], "mp4": [109, 112, 133, 169], "decod": [109, 112, 133, 168], "original_channel_axi": [109, 112, 121, 166], "new_channel_axi": [109, 112, 121, 166], "move": [109, 112, 121, 173, 197], "img_mean": [109, 112, 121], "485": [109, 112, 121], "456": [109, 112, 121], "406": [109, 112, 121], "img_std": [109, 112, 121], "229": [109, 112, 121], "225": [109, 112, 121], "deviat": [109, 112, 121], "std": [109, 112, 121, 190], "train": [109, 112, 121, 172, 200], "scratch": [109, 112, 121], "calcul": [109, 112, 121, 143, 187], "imagenet": [109, 112, 121], "mean_r": [109, 112, 121], "mean_g": [109, 112, 121], "mean_b": [109, 112, 121], "std_r": [109, 112, 121], "std_g": [109, 112, 121], "std_b": [109, 112, 121], "grai": [109, 112, 121], "black": [109, 112, 121, 170], "white": [109, 112, 121, 170, 171], "rgb": [109, 112, 121], "mnist": [109, 112, 121], "stddev": [109, 112, 121], "greyscal": [109, 112, 121], "resampl": [109, 112, 121], "dumper": [109, 112, 125], "documentproto": [109, 112, 127, 148, 181, 193], "_reference_doc": 110, "_metadata": [110, 166, 170, 202, 203], "beforehand": 111, "shell": 111, "wildcard": 111, "directori": 111, "subdirectori": 111, "rate": 111, "rb": 111, "plan": 111, "index_fil": 111, "search_fil": 111, "handler": 111, "auto": [111, 182, 190, 201], "hug": 111, "face": 111, "huggingfac": 111, "load_dataset": 111, "package_refer": 111, "loading_method": 111, "html": [111, 168, 175], "univers": [116, 178], "convers": [117, 170, 178], "_propertymixin": 126, "sugari": [131, 178], "_namedscor": 134, "validationerror": 134, "_fields_set": 134, "__dict__": 134, "__fields_set__": 134, "trust": 134, "exclud": [134, 181], "deep": [134, 163, 165, 173, 176, 177, 183, 184, 200, 201], "abstractsetintstr": 134, "mappingintstrani": 134, "preced": 134, "dictstrani": 134, "by_alia": 134, "skip_default": 134, "exclude_unset": 134, "exclude_default": 134, "exclude_non": [134, 181, 188], "models_as_dict": 134, "dumps_kwarg": 134, "suppli": [134, 202, 203], "unicod": [134, 202, 203], "utf8": 134, "allow_pickl": 134, "ref_templ": 134, "localn": 134, "forwardref": 134, "globaln": 134, "target": [136, 144], "new_fn": 136, "removed_at": 136, "deprec": 136, "old_fn_nam": 136, "_dict": 136, "fieldnam": 136, "dunderscor": 136, "referenc": 136, "referrenc": 136, "struct": [136, 202, 203], "use_uuid1": 136, "uuid": [136, 176], "mac": [136, 199, 201], "uuid1": [136, 176], "afford": 136, "closer": 136, "uuid4": 136, "relat": [136, 166, 179, 192, 197, 199, 200, 201], "lost": [136, 191], "mermaid_url": 136, "suffix": 136, "svg": 136, "decor": [136, 173, 197], "wb": 136, "klass": 136, "dikt": 136, "file_path": 136, "default_protocol": 136, "default_compress": 136, "docarray_fashion_mnist": 136, "gzip": [136, 181, 191, 193], "bin": [136, 193, 199], "sparse_cosin": [137, 138, 139], "sparse_sqeuclidean": [137, 138, 139], "sparse_euclidean": [137, 138, 139], "pdist": [137, 138], "cdist": [137, 138], "x_mat": [138, 139, 141, 142, 144], "pairwis": 138, "coo_matrix": [138, 177, 183], "ndim": [138, 139, 141, 142, 145, 202, 203], "y_mat": [138, 139, 141, 142], "y": [138, 145, 179, 202, 203], "n_x": 138, "n_y": 138, "dist": 138, "j": [138, 200], "ep": [139, 141, 142, 144], "1e": [139, 141, 142, 144], "07": [139, 141, 142, 144, 166], "jitter": [139, 141, 142, 144], "divd": [139, 141, 142, 144], "binary_relev": 143, "precis": [143, 187, 191], "fist": 143, "nonzero": [143, 202, 203], "wrong": 143, "en": 143, "wikipedia": 143, "org": [143, 168, 175, 199], "wiki": 143, "evaluation_measures_": 143, "information_retriev": 143, "percentag": 143, "hit": [143, 163], "curv": 143, "reciproc": [143, 187], "max_rel": [143, 187], "been": [143, 194, 196, 200], "harmon": 143, "f1": [143, 176], "discount": 143, "cumul": 143, "gain": 143, "dcg": 143, "real": [143, 163, 173, 187, 196, 198], "www": [143, 168, 175], "stanford": 143, "edu": 143, "cs276": 143, "handout": 143, "evaluationnew": 143, "pdf": [143, 175], "6309": 143, "4307": 143, "ndcg": 143, "t_rang": 144, "x_rang": 144, "2d": 144, "descend": 144, "largest": 144, "biggest": [144, 200], "x_mat_best": 144, "x_inds_best": 144, "x_ind": 144, "raise_error_if_not_arrai": 145, "tf": [145, 177, 186], "num_row": 145, "sp": [145, 177, 190], "detach": 145, "read_ndarrai": [146, 148, 149], "flush_ndarrai": [146, 148, 149], "parse_proto": [146, 148], "flush_proto": [146, 148], "representmixin": [154, 156, 158], "_reference_n": 155, "subpackag": 160, "submodul": 160, "project": [161, 162, 175, 197], "bump": 161, "minor": [161, 188], "autom": 161, "releas": [161, 197, 200], "bug": 161, "track": 161, "explain": [161, 171], "rational": [161, 170, 173], "behind": [161, 170, 173], "involv": [161, 166, 168], "Its": [161, 181, 200], "intention": 161, "undocu": 161, "backward": 161, "concept": [161, 200], "major": [161, 200], "wire": [161, 181, 200, 201], "migrat": 161, "favor": 161, "ed": [161, 181], "unschema": [161, 181], "awar": [161, 199], "stick": 161, "archiv": 161, "acknowledg": 161, "caffe": 161, "unifi": [161, 200, 201], "terminologi": 161, "fluent": 161, "remark": [161, 193], "30833": 162, "olleh": 162, "ffmpeg": 162, "multimedia": 162, "pydub": 162, "manipul": [162, 200], "easi": [162, 167, 168, 171, 173, 176, 183, 184, 197, 200, 201], "librosa": 162, "music": 162, "analysi": 162, "pyaudioanalysi": 162, "signal": 162, "matplotlib": [163, 199, 201], "255": [163, 166, 170, 175], "641": [163, 166], "resiz": [163, 178], "downsampl": 163, "upsampl": 163, "meet": [163, 201], "chain": [163, 178], "feed": [163, 197], "resnet": 163, "2489083": 163, "proc": 163, "yep": 163, "uneat": 163, "quick": [163, 175], "img": 163, "nice": [163, 168, 196], "overview": [163, 176], "rich": [163, 184, 193, 200], "salienc": 163, "krusti": 163, "burger": 163, "yellow": 163, "schoolbu": 163, "intent": 163, "guess": [163, 179, 191, 202, 203], "breakdown": 163, "simpler": 163, "approach": 163, "datatyp": 163, "792": 163, "180": 163, "three": [163, 168, 169, 175, 183, 190, 200], "7585b8aa": 163, "3826": 163, "11ec": [163, 167], "bc1a": 163, "1e008a366d48": [163, 167], "h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0": 163, "simpson": 163, "hmm": 163, "whole": [163, 191, 193, 196], "overlap": [163, 184, 193], "oversampl": 163, "segment": 164, "tool": 164, "trimesh": [165, 199, 201], "polygon": 165, "profession": 165, "commerci": 165, "uniti": 165, "blender": 165, "repeat": [165, 193, 196, 202, 203], "uniformli": 165, "easier": [165, 175, 181], "vike": 165, "glb": 165, "pictur": [165, 179, 180, 197], "depict": [165, 179, 184, 200], "jointli": [166, 173], "comfort": 166, "cleanli": 166, "individu": [166, 187], "stand": [166, 168], "relationship": [166, 173], "domain": [166, 171, 173, 200], "suppos": 166, "newspap": [166, 173], "main": [166, 196], "main_text": 166, "cast": [166, 177, 181], "automat": [166, 175, 176, 181, 183, 194, 198], "7f03e397da8725aa8a2aed4a0d64f263": 166, "627c3b052b86e908b10475a4649ce49b": 166, "79e75c074aa444341baac18549930450": 166, "6861a1e3d77c3560a630dee34ba5ac7f": 166, "daili": 166, "cab4e047bc84ffb6b8b0597ff4ee0e9f": 166, "ea686d21029e4687df83a6ee31af98b2": 166, "139a5f16ab176b5c9d5088b1f2792973": 166, "f1e7527757c7dc6006fa8fa36e7b788f": 166, "2a13aee3a2ac8eadc07f43bc2dd83583": 166, "b6bcfa7000a25bd84ddcd35813c99b4c": 166, "71018fd73c13187309590e82b5255416": 166, "b6bcfa7000a25bd84ddcd35813c99b4": 166, "b335f748006204dd27bb5fa9a99a572f": 166, "7769657ae7c25227920b5ae35a2a3c31": 166, "29f1835bac77e435f00976c5cf4e97cb": 166, "bc8adb52bad51ccff3d6e7834a4b536a": 166, "29f1835bac77e435f00976c5cf4e97c": 166, "c602af33ed3f2d693a5633e53b87e19c": 166, "1ee83d2c391f078736732bb34a021587": 166, "c8fe3b8fd101bea6a4820a53d2993bdf": 166, "img_model": 166, "combine_embed": 166, "sophist": 166, "concaten": [166, 185], "1512": 166, "tackl": [166, 173], "downstream": 166, "especi": [166, 168, 191, 198], "query_pag": 166, "pear": 166, "cou": 166, "closest_match_img": 166, "closest_match_pag": 166, "5922ee1ad0dbfe707301b573f98c5939": 166, "e6266f88f6ebcb3417358440934bcf81": 166, "defaultdict": [166, 187], "1920929e": 166, "29a0e323e2e9befcc42e9823b111f90f": 166, "175e386b1aa248f9387db46341b73e05": 166, "similarli": 166, "a0f33de91bb7d53811c7cb3015cdf1b8": 166, "float64": [166, 177, 202, 203], "01911603045476573": 166, "b9c9206422e27c8a0f1b4a4e745901ec": 166, "97cbca49aeaf0ea1f609b161dc9ec934": 166, "9183813fc38f291f353b76d4125506d6": 166, "freeli": 167, "tabular": [167, 171, 175], "usernam": 167, "booker12": 167, "9012": 167, "rachel": 167, "booker": 167, "grey07": 167, "2070": 167, "laura": 167, "grei": 167, "johnson81": 167, "4081": 167, "craig": 167, "johnson": 167, "jenkins46": 167, "9346": 167, "mari": 167, "jenkin": 167, "smith79": 167, "5079": 167, "jami": 167, "smith": 167, "attempt": 167, "fail": 167, "manual": [167, 176, 177], "tmp": [167, 194], "thing": [167, 168, 169, 181, 191, 196, 197], "english": 167, "german": 167, "hallo": 167, "welt": 167, "tag__english": 167, "tag__german": 167, "029388a4": 167, "3830": 167, "b6b2": 167, "0293968c": 167, "418de220": 167, "aad8": 167, "418dec52": 167, "inlin": [168, 175], "w3": 168, "histori": 168, "19921103": 168, "hypertext": 168, "3c128f326fbf11ec90821e008a366d49": 168, "\u0928\u092e\u0938": 168, "\u0924": 168, "\u0926": 168, "\u0928": 168, "\u092f": 168, "\u4f60\u597d\u4e16\u754c": 168, "\u3053\u3093\u306b\u3061\u306f\u4e16\u754c": 168, "\u043f\u0440\u0438\u0432\u0435\u0442": 168, "\u043c\u0438\u0440": 168, "thousand": [168, 193], "finer": 168, "5a12d7a86fbf11ec99a21e008a366d49": 168, "5a12e2346fbf11ec99a21e008a366d49": 168, "5a12e2f26fbf11ec99a21e008a366d49": 168, "5a12e3886fbf11ec99a21e008a366d49": 168, "5a12e41e6fbf11ec99a21e008a366d49": 168, "5a12e4966fbf11ec99a21e008a366d49": 168, "goodby": 168, "symbol": 168, "phrase": 168, "sentenc": [168, 173], "bonu": 168, "she": 168, "enter": [168, 196], "room": 168, "pride": [168, 175], "prejudic": [168, 175], "gutenberg": [168, 175], "1342": [168, 175], "txt": [168, 175], "strip": 168, "scores__jaccard": 168, "staircas": 168, "breakfast": 168, "congratul": [168, 199], "air": 168, "ungraci": 168, "mr": 168, "bennet": 168, "alon": 168, "f47f7448709811ec960a1e008a366d49": 168, "6666666666666666": 168, "7142857142857143": 168, "imagin": [168, 196], "lyric": 168, "song": 168, "choru": 168, "song1_titl": 168, "me": [168, 200], "song1": 168, "talk": [168, 183, 197], "awai": [168, 191, 200], "anywai": [168, 191], "todai": 168, "shy": 168, "love": 168, "ok": 168, "gone": 168, "needless": 168, "odd": 168, "stumbl": 168, "slowli": 168, "life": 168, "safe": 168, "sorri": 168, "oh": 168, "yeah": 168, "plai": [168, 173, 198], "my": [168, 184, 187], "worri": [168, 184, 197], "ve": [168, 200], "got": [168, 169, 193, 196], "song2_titl": 168, "trooper": 168, "song2": 168, "fire": 168, "musket": 168, "wait": [168, 191], "next": [168, 188, 191, 197, 201], "attack": 168, "bugl": 168, "sound": [168, 173, 184], "battlefield": 168, "win": 168, "smell": 168, "acrid": 168, "smoke": 168, "hors": 168, "breath": 168, "plung": 168, "death": 168, "he": 168, "sweat": 168, "fear": 168, "mighti": 168, "roar": 168, "russian": 168, "gun": 168, "race": 168, "toward": 168, "wall": 168, "scream": 168, "pain": 168, "comrad": 168, "fall": 168, "hurdl": 168, "lai": 168, "ground": 168, "round": 168, "far": [168, 172, 173, 184], "won": [168, 196], "fight": 168, "hi": [168, 192], "sight": 168, "trigger": [168, 200], "blow": 168, "burst": 168, "gaze": 168, "sky": 168, "numb": 168, "throat": 168, "dry": 168, "forgotten": 168, "tear": 168, "draw": 168, "groan": 168, "doc1": [168, 173, 193], "song_titl": 168, "doc2": [168, 173, 193], "bag": 168, "descriptor": 168, "build_token": 168, "token_pattern": 168, "compil": 168, "findal": 168, "bow_feature_vector": 168, "prepar": [168, 188], "n_featur": 168, "da_backend": 168, "annlite_data": 168, "find_song_name_from_song_snippet": 168, "similar_item": 168, "most_similar_doc": 168, "Will": 168, "av": [169, 199, 201], "250": [169, 197], "176": [169, 193], "320": 169, "dim": [169, 202, 203], "176x320": 169, "infer": 169, "framer": 169, "around": [169, 191], "25fp": 169, "mov": 169, "redund": 169, "enumer": [169, 191], "60fp": 169, "60": 169, "esc": 169, "blog": 170, "paragraph": [170, 194], "eaccc9c573c07f13b7ee8aa04a83c9eb": 170, "140540453339296": 170, "banner_tensor": 170, "transpos": 170, "unsqueez": [170, 172], "outer": 170, "innerdoc": 170, "outerdoc": 170, "feature_imag": [170, 171], "websit": [170, 171], "94de1bef2fc8010ff4fe86791a671c44": 170, "fact": [170, 171, 181], "field1": [170, 188], "field2": 170, "nois": [170, 171, 187], "bracket": [170, 188], "nonetyp": [170, 187], "accept": [170, 171, 174, 175, 187, 188], "front": 170, "deepli": 170, "nested_field1": 170, "bannerdoc": [170, 171], "columnarticl": [170, 171], "c1": [170, 184], "c2": 170, "unawar": 171, "mymultimodaldoc": 171, "avatar": 171, "Be": 171, "assign": [171, 175, 177, 183], "conflict": 171, "f3b193bbe8403c3ce1599b82f941f68a": 171, "18c7ca1c829fe819250faa4914bc45c1": 171, "504": 171, "1ee7fadddc23fc72365b2069f82d4bb4": 171, "is_dataclass": 171, "mmdoc1": 171, "mmdoc2": 171, "sequel": [171, 190], "pixel": 171, "soundfx": 171, "90c744c5155c2356d27f8c91955f70f7": 171, "c9d71990088fb0d8db3c83a6bd35650d": 171, "22e27708288e70813673711c86f834e": 171, "05ad36dfb0c520027b18c582d205c176": 171, "63248": 171, "unannot": 171, "17c77b443471f9d752cbcc360174b65f": 171, "some_field": 171, "other_field": 171, "15725d705b6c8d7e99908d380d614fa5": 171, "48a84621d51d94383b86db89e64022a3": 171, "1cb5cc74f1f986876a0c4c87201b9a28": 171, "instruct": 171, "complet": [171, 185, 187, 197, 200, 201], "52d9dcca4bc30cd0ef3b82917459cd32": 171, "04edacf582c5aa7b0bcfcf3d3e0a57bf": 171, "f5e9f105162e26d1d42ef7e2d363095a": 171, "d7d0b506f690890113e6a601ef80f8c6": 171, "75a3df4c26498d338589d2b2c20e156": 171, "cb1df29a384a6d39aa81e5af93316c4d": 171, "65cce8eb564f9ce136ff693b8ecb8f53": 171, "4dc4497d608b4f96094711e90cfb8078": 171, "f7b3aaefeab73af18f8372a594405b46": 171, "encourag": 171, "m_r": 171, "assert": [171, 174], "mutabl": 171, "builtin": 171, "great": 171, "scientist": [171, 189, 196, 198, 200, 201], "intuit": [171, 173, 176, 196, 200, 201], "straightforward": [171, 173], "aka": [171, 173], "nutshel": [172, 173, 189, 196], "develop": [172, 197, 199, 200, 201], "openai": 172, "contrast": 172, "varieti": 172, "pil": 172, "is_avail": 172, "vit": 172, "diagram": 172, "dog": [172, 173], "cat": [172, 173], "no_grad": 172, "image_featur": 172, "encode_imag": 172, "text_featur": 172, "encode_text": 172, "3285e": 172, "6554e": 172, "3394e": 172, "5605e": 172, "2397e": 172, "0547": 172, "0061": 172, "0495": 172, "6638": 172, "1281": 172, "4950": 172, "1447": 172, "0225": 172, "2909": 172, "4472": 172, "3420": 172, "1798": 172, "1981": 172, "2040": 172, "1533": 172, "4514": 172, "5664": 172, "0596": 172, "m1": [172, 174, 199], "m2": [172, 174, 199], "m3": 172, "scalabl": [172, 197, 200], "microservic": [172, 181, 193, 197, 200], "extrem": [172, 180, 200], "touch": 172, "v": [172, 190, 197, 200, 201, 203], "clip_client": 172, "demo": 172, "ca": 172, "51000": 172, "3137": 172, "1458": 172, "303": 172, "8877": 172, "2546": 172, "11365": 172, "05466": 172, "005997": 172, "0498": 172, "663": 172, "1274": 172, "4944": 172, "1442": 172, "02275": 172, "291": 172, "4468": 172, "3416": 172, "1985": 172, "204": 172, "1534": 172, "4507": 172, "0598": 172, "wparticl": 173, "headlin": 173, "flight": 173, "pet": 173, "pick": 173, "seat": 173, "anim": 173, "calm": 173, "nathan": 173, "diller": 173, "travel": 173, "destin": [173, 184], "hood": [173, 194], "beauti": 173, "spend": 173, "mixtur": 173, "card": 173, "washington": 173, "bbc": 173, "transfer": [173, 193, 196, 200, 201], "doc0": 173, "Or": [173, 197], "redesign": [173, 200], "why": [173, 181, 198, 201], "implicit": 173, "answer": [173, 191], "trivial": 173, "eleg": 173, "translat": 174, "bde1ab74306c2f63188069879e3945ac": 174, "cd594a6870a8921d7a9c6b0ec764251d": 174, "xff": 174, "xd8": 174, "xe0": 174, "x00": [174, 181, 193], "x10jfif": 174, "x01": [174, 181, 193], "x0": 174, "56810": 174, "recov": 174, "invok": 174, "im": 174, "unset": 175, "among": 175, "spmatrix": [175, 177, 179], "intermedi": [175, 181, 193, 200], "mutual": 175, "exclus": 175, "7623808c6d6211ec9cf21e008a366d49": 175, "reset": 175, "grab": 175, "b4d675466d6211ecae8d1e008a366d49": 175, "2808eeb86d6311ecaddb1e008a366d49": 175, "ebook": 175, "jane": 175, "austen": 175, "anywher": 175, "wor": 175, "ivborw0kggoaaaansuheugaaaaua": 175, "aaafcayaaacnbyblaaaaheleqvqi12p4": 175, "w38giaxdibke0dhxgljnbaao": 175, "9txl0y4ohwaaaabjru5erkjggg": 175, "load_uri_to_": 175, "5dd542406d3f11eca3241e008a366d49": 176, "hex": 176, "though": [176, 187, 190], "forget": [176, 200], "autocomplet": 176, "a14effee6d3e11ec8bde1e008a366d49": 176, "a14f00986d3e11ec8bde1e008a366d49": 176, "a14f01a66d3e11ec8bde1e008a366d49": 176, "a14f023c6d3e11ec8bde1e008a366d49": 176, "comfortab": 176, "idiomat": 176, "googl": [176, 193, 198, 200, 201, 202, 203], "colab": [176, 182, 193, 200, 201], "prettifi": 176, "caught": 176, "f957e84a6d4311ecbea21e008a366d49": 176, "silent": 176, "attributeerror": 176, "4479829968": 176, "piec": 177, "d5": 177, "from_dens": 177, "unlik": [177, 181], "assig": 177, "stai": [177, 200], "smarter": 177, "loop": [177, 181, 183, 190, 191], "00003": 177, "ten": [177, 187], "63a39fa86d6911eca6fa1e008a366d49": 177, "63a39aee6d6911eca6fa1e008a366d49": 177, "63a399d66d6911eca6fa1e008a366d49": 177, "63a39b346d6911eca6fa1e008a366d49": 177, "63a3999a6d6911eca6fa1e008a366d49": 177, "63a39a626d6911eca6fa1e008a366d49": 177, "63a397ba6d6911eca6fa1e008a366d49": 177, "63a39a1c6d6911eca6fa1e008a366d49": 177, "63a39ab26d6911eca6fa1e008a366d49": 177, "63a399046d6911eca6fa1e008a366d49": 177, "63a399546d6911eca6fa1e008a366d49": 177, "apple1": 178, "equival": 178, "hexdigest": [179, 202, 203], "raw": [179, 199, 202, 203], "depth": [179, 180, 184, 196, 202, 203], "cross": [179, 200, 201, 202, 203], "mime": [179, 202, 203], "crop": [179, 202, 203], "timestamp": [179, 188, 202, 203], "comprehens": [179, 200, 201], "categor": 179, "comprehend": 179, "scienc": [179, 201], "commun": [179, 187, 201], "7f907d786d6c11ec840a1e008a366d49": 180, "7f907c606d6c11ec840a1e008a366d49": 180, "7f907cba6d6c11ec840a1e008a366d49": 180, "7f907ab26d6c11ec840a1e008a366d49": 180, "7f907c106d6c11ec840a1e008a366d49": 180, "crucial": [180, 181, 193], "fortun": [180, 199], "thank": [180, 183], "shown": [180, 198], "wherea": [180, 181, 200], "receiv": [181, 187, 196], "compact": [181, 183, 193], "reader": [181, 184, 196], "wonder": 181, "aren": 181, "nonetheless": [181, 193], "decis": [181, 200], "sake": [181, 184], "clariti": [181, 184], "webservic": [181, 193, 196, 201], "fastapi": [181, 193, 195, 199, 201], "d_as_json": 181, "641032d677b311ecb67a1e008a366d49": 181, "null": [181, 193], "db66bc2e77b311eca5f51e008a366d49": 181, "mimetyp": 181, "aqaaaaaaaaacaaaaaaaaaamaaaaaaaaa": 181, "i8": 181, "clsname": 181, "appreci": [181, 200], "uppercas": 181, "cdbc4f7a77b411ec96ad1e008a366d49": 181, "ey": 181, "handcraft": 181, "smoothli": 181, "encount": 181, "thumb": 181, "friend": [181, 193, 196, 200], "upset": 181, "ever": [181, 196, 200], "probabl": [181, 183, 184, 196], "d_byte": 181, "d_r": 181, "x80": [181, 193], "x03cdocarrai": [181, 193], "ndocument": [181, 193], "nq": [181, 193], "x81q": [181, 193], "x02x": 181, "x05": [181, 193], "x00_dataq": [181, 193], "ndocumentdata": 181, "x04": [181, 193], "x06": 181, "x0e": 181, "x00_reference_docq": 181, "x07h": 181, "x01x": 181, "x02": [181, 193], "x00idq": 181, "x08x": 181, "x005d29a9f26d5911ec88d51e008a366d49q": 181, "tx": 181, "x00parent_": 181, "3644c0fa6d5a11ecbb081e008a366d49": 181, "110": [181, 187], "666": 181, "spooki": 181, "deseri": [181, 193], "protcol": [181, 193], "ganjzg9jyxjyyxkuzg9jdw1lbnqkrg9jdw1lbnqkcqapgxebfxecwauaaabfzgf0yxedy2rvy2fycmf5lmrvy3vtzw50lmrhdgekrg9jdw1lbnreyxrhcneekyfxbx1xbihydgaaaf9yzwzlcmvuy2vfzg9jcqdoavgcaaaaawrxcfggaaaazmzjnty3odg3mzaymtfly2e4njmxztawogeznjzkndlxcvgjaaaacgfyzw50x2lkcqpowasaaabncmfudwxhcml0exeltlgjaaaaywrqywnlbmn5cqxowayaaabidwzmzxjxdu5ybaaaagjsb2jxdk5ycqaaag1pbwvfdhlwzxepwaoaaab0zxh0l3bsywlucrbybaaaahrlehrxevgfaaaaagvsbg9xelghaaaay29udgvudhettlggaaaad2vpz2h0crrowamaaab1cmlxfu5ybaaaahrhz3nxfk5ybgaaag9mznnldhextlgiaaaabg9jyxrpb25xge5ycqaaagvtymvkzgluz3ezxxeakesbswjla2vycaaaag1vzgfsaxr5crtowasaaabldmfsdwf0aw9uc3ectlggaaaac2nvcmvzcr1owayaaabjahvua3nxhk5ybwaaag1hdgnozxnxh051ynnilg": 181, "156": 181, "d_as_dict": 181, "5596c84c77b711ecafed1e008a366d49": 181, "d_proto": 181, "d66463b46d6a11ecbf891e008a366d49": 181, "e4b215106d6a11ecb28b1e008a366d49": 181, "hundr": 181, "ineffici": [181, 202, 203], "context": [183, 200], "tast": 183, "element_selector": 183, "attribute_selector": 183, "scores__cosine__valu": 183, "8d41ce5c6f0d11eca2181e008a366d49": 183, "8d41cfa66f0d11eca2181e008a366d49": 183, "8d41cff66f0d11eca2181e008a366d49": 183, "db60ab8a6f0d11ec99511e008a366d49": 183, "db60abda6f0d11ec99511e008a366d49": 183, "db60c12e6f0d11ec99511e008a366d49": 183, "db60c1886f0d11ec99511e008a366d49": 183, "db60c4266f0d11ec99511e008a366d49": 183, "db60c46c6f0d11ec99511e008a366d49": 183, "285db6586f0e11ec99401e008a366d49": 183, "285db6b26f0e11ec99401e008a366d49": 183, "285dbff46f0e11ec99401e008a366d49": 183, "285dc0586f0e11ec99401e008a366d49": 183, "285db3606f0e11ec99401e008a366d49": 183, "285dcc746f0e11ec99401e008a366d49": 183, "285dccce6f0e11ec99401e008a366d49": 183, "285dce0e6f0e11ec99401e008a366d49": 183, "285dce5e6f0e11ec99401e008a366d49": 183, "285db4fa6f0e11ec99401e008a366d49": 183, "285dcf946f0e11ec99401e008a366d49": 183, "285dcfda6f0e11ec99401e008a366d49": 183, "285dd1066f0e11ec99401e008a366d49": 183, "285dd16a6f0e11ec99401e008a366d49": 183, "285db55e6f0e11ec99401e008a366d49": 183, "shot": [183, 193], "095cd76a6f0f11ec82211e008a366d49": 183, "095cd8d26f0f11ec82211e008a366d49": 183, "095cd92c6f0f11ec82211e008a366d49": 183, "coo": 183, "matric": 183, "sp_emb": 183, "key1": 183, "tags__key1": 183, "5164d792709a11ec9ae71e008a366d49": 183, "5164d986709a11ec9ae71e008a366d49": 183, "5164d922709a11ec9ae71e008a366d49": 183, "006942970007385196": 183, "48303283924326845": 183, "3859268166910603": 183, "220446049250313e": 183, "quickli": [183, 185, 193], "favorit": [184, 200], "ask": 184, "coin": 184, "exploit": 184, "routin": [184, 200], "a04633546e6211ec8ad31e008a366d49": 184, "af7923406e6211ecbc811e008a366d49": 184, "ellipsi": 184, "3m": 184, "excit": [184, 189], "834f14666e6511ec8e331e008a366d49": 184, "834f32846e6511ec8e331e008a366d49": 184, "4883468432": 184, "7e27fa246e6611ec9a441e008a366d49": 184, "7e27fb826e6611ec9a441e008a366d49": 184, "99851c7a6e6611ecba351e008a366d49": 184, "4874066256": 184, "No": [184, 189, 193, 199, 200, 201], "techniqu": [184, 191], "4513619088": 184, "remain": [184, 189], "path1": 184, "path2": 184, "path3": 184, "rout": 184, "mc": 184, "assigend": 184, "2f94c1426ee511ecbb491e008a366d49": 184, "2f94cd9a6ee511ecbb491e008a366d49": 184, "2f94cdfe6ee511ecbb491e008a366d49": 184, "2f94c4086ee511ecbb491e008a366d49": 184, "2f94c46c6ee511ecbb491e008a366d49": 184, "circl": 184, "intend": 184, "4912623312": 184, "4905929552": 184, "4913359824": 184, "deeper": 184, "ye": [184, 191], "liter": 184, "anymor": 184, "b_da": 184, "4887691536": 184, "4887691600": 184, "4887691408": 184, "232": 184, "categori": 184, "rv": 184, "4869273936": 184, "4876081680": 184, "4876735056": 184, "spoiler": 184, "alert": 184, "4453362704": 185, "4446140816": 185, "4866772176": 185, "da3": 185, "5024988176": 185, "4525853328": 185, "4452802192": 185, "afterward": [185, 193], "surpris": 185, "authent": 185, "mention": [185, 196], "glob": 185, "da_jpg": 185, "da_png": 185, "da_al": 185, "astyp": [186, 190], "mlp": 186, "onnx": [186, 200, 201], "nn": [186, 201], "linear": 186, "in_featur": 186, "out_featur": 186, "relu": 186, "preliminari": 186, "cli": 186, "rand": [186, 194], "do_constant_fold": 186, "constant": [186, 193, 200], "fold": 186, "input_nam": 186, "output_nam": 186, "dynamic_ax": 186, "ax": 186, "inferencesess": 186, "onnxruntim": 186, "0506": 186, "0015": 186, "1154": 186, "1630": 186, "2376": 186, "0576": 186, "4109": 186, "0052": 186, "0027": 186, "0800": 186, "0928": 186, "1326": 186, "2256": 186, "1649": 186, "0435": 186, "2312": 186, "0068": 186, "0991": 186, "0767": 186, "0501": 186, "1393": 186, "0965": 186, "2062": 186, "my_text_model": 186, "da_predict": 187, "da_groundtruth": 187, "example_da": 187, "imperfect": 187, "47": 187, "fake": 187, "6333333333333333": 187, "fulfil": 187, "recogn": 187, "p_da": 187, "g_da": 187, "42dc84b26fab11ecbc181e008a366d49": 187, "42dc98086fab11ecbc181e008a366d49": 187, "badli": 187, "mongodb": 188, "21": 188, "uom": 188, "paper": 188, "planner": 188, "75": 188, "postcard": 188, "45": 188, "operator1": 188, "value1": 188, "dunder": 188, "tags__timestamp": 188, "substitut": 188, "curli": 188, "ne": 188, "gt": 188, "greater": [188, 202, 203], "gte": 188, "lt": 188, "nin": 188, "regex": 188, "pprint": 188, "pretti": [188, 195, 198, 201], "92aee5d665d0c4dd34db10d83642ad": 188, "1a9d2139b02bc1c7842ecda94b347889": 188, "tags__h": 188, "4045a9659875fd1299e482d710753de3": 188, "cf7691c445220b94b88ff116911bad24": 188, "tags__w": 188, "44c6a4b18eaa005c6dbe15a28a32ebc": 188, "join": [188, 191], "claus": 188, "22985b71b6d483c31cbe507ed4d02bd1": 188, "a071faf19feac5809642e3afcd3a5878": 188, "411ecc70a71a3f00fc3259bf08c239d1": 188, "greatli": [189, 200, 201], "acceler": [189, 200, 201], "accpet": 190, "one_million_doc": 190, "rh": 190, "lh": 190, "20000000298023224": 190, "5620499849319458": 190, "6763054132461548": 190, "allevi": 190, "oom": 190, "1_000_000": 190, "768": 190, "18": 190, "dev": [190, 199, 201], "1_000": 190, "97": 190, "inter": 191, "naiv": 191, "popular": 191, "charm": 191, "6000": 191, "6016": 191, "signific": 191, "tip": 191, "modif": [191, 194], "peopl": [191, 197, 200], "told": 191, "whatev": 191, "pipelin": 191, "1024": 191, "question": 191, "jump": 191, "whiteboard": 191, "144": 191, "rather": 191, "btw": 191, "immedid": 191, "cv": 191, "inevit": 191, "domin": 191, "476": 191, "326": 191, "shed": 191, "light": 191, "mindset": 191, "potenti": [191, 196], "gen": 191, "_head": 191, "_get_chunk": 191, "_batch": 191, "_to_stream_byt": 191, "num_doc_in_chunk": 191, "_tail": 191, "hubbl": 191, "v2": 191, "rpc": 191, "artifact": 191, "12345": [192, 197], "alex": 192, "laptop": [192, 193], "coquitts7": 192, "wide": [192, 193], "netloc": 192, "websocket": [192, 197], "jinhub": 192, "55566": 192, "8081": 192, "porcess": 192, "anytim": [193, 201], "abil": 193, "a677577877b611eca3811e008a366d49": 193, "a67758f477b611eca3811e008a366d49": 193, "da_r": 193, "descrbi": 193, "x03": 193, "cdocarrai": 193, "portabl": [193, 200], "insecur": 193, "2gb": 193, "bz2": 193, "lzma": 193, "zlib": 193, "jan": 193, "2022": [193, 199], "interpret": 193, "argu": 193, "realist": 193, "unreal": 193, "rel": 193, "doc1_byt": 193, "doc2_byt": 193, "uint64": [193, 202, 203], "uint32": [193, 202, 203], "dock_byt": 193, "dock": 193, "da_rec": 193, "simplifi": [193, 201], "consumpt": [193, 200], "da_gener": 193, "xxxl": 193, "nut": 193, "d_str": 193, "bcjngebawhuaaad": 193, "iw": 193, "uqdpl9udnsfvomzb8m7skigrkntiyotqynzmwmzexzwnim2i1mwuwmdhhmzy2zdq5mgaep2findiahd9imtgyab0vnwuyab0fytiahh9myaadp2mzyzyahd9jodayab0fzdiaht9kmtzkaabqnjzkndkaaaaa": 193, "2571b8b66e4d11ec9f271e008a366d49": 193, "2571ba466e4d11ec9f271e008a366d49": 193, "ae55782a6e4d11ec803c1e008a366d49": 193, "ae557a146e4d11ec803c1e008a366d49": 193, "43cb93b26e4e11ec8b731e008a366d49": 193, "43cb95746e4e11ec8b731e008a366d49": 193, "heavylift": 193, "myda123": 193, "analyz": 193, "colleagu": 193, "4gb": 193, "unchang": 193, "da123": 193, "15t07": 193, "54": 193, "256z": 193, "subindci": 194, "sublevel": 194, "searchabl": 194, "fledg": 194, "mydocu": 194, "_imag": 194, "tmp_w1yqmpc": 194, "tmp_iar4ofr": 194, "documentarri": 194, "top_image_match": 194, "top_level_match": 194, "visualis": 195, "stori": [196, 200], "pydanticdocumentarrai": 196, "although": [196, 200], "happi": 196, "brainfuck": 196, "isinst": 196, "web": 196, "fundament": [196, 200], "openapi": [196, 201], "ref": 196, "hint": [196, 201], "create_item": 196, "create_arrai": 196, "starlett": 196, "testclient": 196, "422": 196, "loc": 196, "msg": 196, "type_error": 196, "reject": 196, "meaningless": 196, "response_model": 196, "idonli": 196, "get_item_no_embed": 196, "065a5548756211ecaa8d1e008a366d49": 196, "declar": 196, "idandmatch": 196, "get_match": 196, "get_match_id_onli": 196, "unlimit": 196, "ef82e4f4756411ecb2c01e008a366d49": 196, "ef82e6d4756411ecb2c01e008a366d49": 196, "ef82e760756411ecb2c01e008a366d49": 196, "ef82e7ec756411ecb2c01e008a366d49": 196, "didn": 196, "degre": 196, "idmatch": 196, "response_model_exclude_non": 196, "3da6383e756511ecb7cb1e008a366d49": 196, "3da63a14756511ecb7cb1e008a366d49": 196, "3da6392e756511ecb7cb1e008a366d49": 196, "3da63b72756511ecb7cb1e008a366d49": 196, "3da639ce756511ecb7cb1e008a366d49": 196, "3da63a5a756511ecb7cb1e008a366d49": 196, "3da63ae6756511ecb7cb1e008a366d49": 196, "3da63aa0756511ecb7cb1e008a366d49": 196, "3da63b2c756511ecb7cb1e008a366d49": 196, "3da63988756511ecb7cb1e008a366d49": 196, "focus": [197, 200], "journei": 197, "equip": 197, "independ": [197, 200], "termin": [197, 198], "preproc": 197, "slightli": 197, "myexecutor": 197, "staticmethod": 197, "26202": 197, "57050": 197, "privat": 197, "102": 197, "84": 197, "172": 197, "88": 197, "05": 197, "eta": 197, "80": 197, "show_progressbar": 197, "throughput": 197, "mp0pe477": 197, "manag": [197, 199], "accomplish": 197, "littl": 197, "stage": 198, "demonstr": 198, "cell": 198, "richer": 198, "broken": 198, "emul": 198, "linux": [199, 201], "conda": [199, 201], "forg": [199, 201], "seral": [199, 201], "uvicorn": [199, 201], "demand": [199, 201], "reproduc": [199, 201], "__version__": [199, 201], "maco": 199, "chip": 199, "rosetta": 199, "unam": 199, "arm64": 199, "brew": 199, "confirm": 199, "reinstal": 199, "destruct": 199, "proceed": 199, "bash": 199, "curl": 199, "fssl": 199, "githubusercont": 199, "head": 199, "sh": 199, "platform": 199, "python3": 199, "aug": 199, "libexec": 199, "pypi": 199, "successfulli": 199, "mp": 199, "torchaudio": 199, "whl": 199, "nightli": 199, "unstructur": [200, 201], "media": 200, "toolkit": 200, "jupyterlab": 200, "happili": 200, "maxim": 200, "de": 200, "filetyp": 200, "haven": 200, "unfair": 200, "dedic": 200, "vision": 200, "coupl": 200, "hf": 200, "temporarili": 200, "resid": 200, "oppos": 200, "physic": 200, "occasion": 200, "precompil": 200, "contigu": 200, "particl": 200, "crunch": 200, "awkward": 200, "ak": 200, "toytim": 200, "timecontext": 200, "100_000": 200, "ak_arrai": 200, "from_it": 200, "004": 200, "031": 200, "known": 200, "ago": 200, "perspect": 200, "numer": 200, "thrown": 200, "boost": 200, "usabl": 200, "comparison": [200, 201], "100k": 200, "repetit": 200, "revis": 200, "realiz": 200, "due": 200, "deliber": 200, "constraint": 200, "door": 201, "foundat": 201, "dall": 201, "discoart": 201, "powerhous": 201, "mainstream": 201, "neighboour": 201, "versatil": 201, "reliabl": 201, "pycharm": 201, "bootcamp": 201, "slack": 201, "chat": 201, "discuss": 201, "tuesdai": 201, "month": 201, "zoom": 201, "calendar": 201, "ical": 201, "youtub": 201, "subscrib": 201, "apach": 201, "hire": 201, "quantiz": [202, 203], "cls_name": [202, 203], "java": [202, 203], "int32": [202, 203], "sint32": [202, 203], "bignum": [202, 203], "fixnum": [202, 203], "sint64": [202, 203], "uint": [202, 203], "ulong": [202, 203], "sign": [202, 203], "fixed32": [202, 203], "28": [202, 203], "fixed64": [202, 203], "eight": [202, 203], "56": [202, 203], "sfixed32": [202, 203], "sfixed64": [202, 203], "trueclass": [202, 203], "falseclass": [202, 203], "bytestr": [202, 203], "8bit": [202, 203], "cd": 203, "pwd": 203, "jinaai": 203, "protogen": 203}, "objects": {"": [[12, 0, 0, "-", "docarray"]], "docarray": [[13, 0, 0, "-", "array"], [104, 0, 0, "-", "base"], [105, 0, 0, "-", "dataclasses"], [109, 0, 0, "-", "document"], [136, 0, 0, "-", "helper"], [137, 0, 0, "-", "math"], [146, 0, 0, "-", "proto"], [154, 0, 0, "-", "score"], [159, 0, 0, "-", "typing"]], "docarray.array": [[14, 0, 0, "-", "annlite"], [15, 0, 0, "-", "base"], [16, 0, 0, "-", "chunk"], [17, 0, 0, "-", "document"], [18, 0, 0, "-", "elastic"], [19, 0, 0, "-", "match"], [20, 0, 0, "-", "memory"], [21, 0, 0, "-", "mixins"], [53, 0, 0, "-", "qdrant"], [54, 0, 0, "-", "queryset"], [57, 0, 0, "-", "redis"], [58, 0, 0, "-", "sqlite"], [59, 0, 0, "-", "storage"], [103, 0, 0, "-", "weaviate"]], "docarray.array.annlite": [[14, 1, 1, "", "AnnliteConfig"], [14, 1, 1, "", "DocumentArrayAnnlite"]], "docarray.array.annlite.AnnliteConfig": [[14, 2, 1, "", "columns"], [14, 2, 1, "", "data_path"], [14, 2, 1, "", "ef_construction"], [14, 2, 1, "", "ef_search"], [14, 2, 1, "", "max_connection"], [14, 2, 1, "", "metric"], [14, 2, 1, "", "n_components"], [14, 2, 1, "", "n_dim"], [14, 2, 1, "", "serialize_config"]], "docarray.array.annlite.DocumentArrayAnnlite": [[14, 2, 1, "", "TYPE_MAP"], [14, 3, 1, "", "append"], [14, 3, 1, "", "apply"], [14, 3, 1, "", "apply_batch"], [14, 3, 1, "", "batch"], [14, 3, 1, "", "batch_ids"], [14, 4, 1, "", "blobs"], [14, 3, 1, "", "clear"], [14, 3, 1, "", "cloud_delete"], [14, 3, 1, "", "cloud_list"], [14, 3, 1, "", "cloud_pull"], [14, 3, 1, "", "cloud_push"], [14, 4, 1, "", "contents"], [14, 3, 1, "", "count"], [14, 3, 1, "", "dataloader"], [14, 3, 1, "", "embed"], [14, 4, 1, "", "embeddings"], [14, 3, 1, "", "empty"], [14, 3, 1, "", "evaluate"], [14, 3, 1, "", "extend"], [14, 3, 1, "", "find"], [14, 3, 1, "", "flatten"], [14, 3, 1, "", "from_base64"], [14, 3, 1, "", "from_bytes"], [14, 3, 1, "", "from_csv"], [14, 3, 1, "", "from_dataframe"], [14, 3, 1, "", "from_dict"], [14, 3, 1, "", "from_files"], [14, 3, 1, "", "from_huggingface_datasets"], [14, 3, 1, "", "from_json"], [14, 3, 1, "", "from_lines"], [14, 3, 1, "", "from_list"], [14, 3, 1, "", "from_ndarray"], [14, 3, 1, "", "from_ndjson"], [14, 3, 1, "", "from_protobuf"], [14, 3, 1, "", "from_pydantic_model"], [14, 3, 1, "", "from_strawberry_type"], [14, 3, 1, "", "get_json_schema"], [14, 3, 1, "", "get_vocabulary"], [14, 3, 1, "", "index"], [14, 3, 1, "", "insert"], [14, 3, 1, "", "load"], [14, 3, 1, "", "load_binary"], [14, 3, 1, "", "load_csv"], [14, 3, 1, "", "load_json"], [14, 3, 1, "", "map"], [14, 3, 1, "", "map_batch"], [14, 3, 1, "", "match"], [14, 3, 1, "", "plot_embeddings"], [14, 3, 1, "", "plot_image_sprites"], [14, 3, 1, "", "pop"], [14, 3, 1, "", "post"], [14, 3, 1, "", "pull"], [14, 3, 1, "", "push"], [14, 3, 1, "", "reduce"], [14, 3, 1, "", "reduce_all"], [14, 3, 1, "", "remove"], [14, 3, 1, "", "reverse"], [14, 3, 1, "", "sample"], [14, 3, 1, "", "save"], [14, 3, 1, "", "save_binary"], [14, 3, 1, "", "save_csv"], [14, 3, 1, "", "save_embeddings_csv"], [14, 3, 1, "", "save_gif"], [14, 3, 1, "", "save_json"], [14, 3, 1, "", "shuffle"], [14, 3, 1, "", "split_by_tag"], [14, 3, 1, "", "summary"], [14, 3, 1, "", "sync"], [14, 4, 1, "", "tensors"], [14, 4, 1, "", "texts"], [14, 3, 1, "", "to_base64"], [14, 3, 1, "", "to_bytes"], [14, 3, 1, "", "to_dataframe"], [14, 3, 1, "", "to_dict"], [14, 3, 1, "", "to_json"], [14, 3, 1, "", "to_list"], [14, 3, 1, "", "to_protobuf"], [14, 3, 1, "", "to_pydantic_model"], [14, 3, 1, "", "to_strawberry_type"], [14, 3, 1, "", "traverse"], [14, 3, 1, "", "traverse_flat"], [14, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.base": [[15, 1, 1, "", "BaseDocumentArray"]], "docarray.array.base.BaseDocumentArray": [[15, 3, 1, "", "append"], [15, 3, 1, "", "clear"], [15, 3, 1, "", "count"], [15, 3, 1, "", "extend"], [15, 3, 1, "", "index"], [15, 3, 1, "", "insert"], [15, 3, 1, "", "pop"], [15, 3, 1, "", "remove"], [15, 3, 1, "", "reverse"]], "docarray.array.chunk": [[16, 1, 1, "", "ChunkArray"]], "docarray.array.chunk.ChunkArray": [[16, 2, 1, "", "TYPE_MAP"], [16, 4, 1, "", "adjacency"], [16, 3, 1, "", "append"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "apply_batch"], [16, 3, 1, "", "batch"], [16, 3, 1, "", "batch_ids"], [16, 4, 1, "", "blobs"], [16, 3, 1, "", "clear"], [16, 3, 1, "", "cloud_delete"], [16, 3, 1, "", "cloud_list"], [16, 3, 1, "", "cloud_pull"], [16, 3, 1, "", "cloud_push"], [16, 4, 1, "", "contents"], [16, 3, 1, "", "count"], [16, 3, 1, "", "dataloader"], [16, 3, 1, "", "embed"], [16, 4, 1, "", "embeddings"], [16, 3, 1, "", "empty"], [16, 3, 1, "", "evaluate"], [16, 3, 1, "", "extend"], [16, 3, 1, "", "find"], [16, 3, 1, "", "flatten"], [16, 3, 1, "", "from_base64"], [16, 3, 1, "", "from_bytes"], [16, 3, 1, "", "from_csv"], [16, 3, 1, "", "from_dataframe"], [16, 3, 1, "", "from_dict"], [16, 3, 1, "", "from_files"], [16, 3, 1, "", "from_huggingface_datasets"], [16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_lines"], [16, 3, 1, "", "from_list"], [16, 3, 1, "", "from_ndarray"], [16, 3, 1, "", "from_ndjson"], [16, 3, 1, "", "from_protobuf"], [16, 3, 1, "", "from_pydantic_model"], [16, 3, 1, "", "from_strawberry_type"], [16, 3, 1, "", "get_json_schema"], [16, 3, 1, "", "get_vocabulary"], [16, 4, 1, "", "granularity"], [16, 3, 1, "", "index"], [16, 3, 1, "", "insert"], [16, 3, 1, "", "load"], [16, 3, 1, "", "load_binary"], [16, 3, 1, "", "load_csv"], [16, 3, 1, "", "load_json"], [16, 3, 1, "", "map"], [16, 3, 1, "", "map_batch"], [16, 3, 1, "", "match"], [16, 3, 1, "", "plot_embeddings"], [16, 3, 1, "", "plot_image_sprites"], [16, 3, 1, "", "pop"], [16, 3, 1, "", "post"], [16, 3, 1, "", "pull"], [16, 3, 1, "", "push"], [16, 3, 1, "", "reduce"], [16, 3, 1, "", "reduce_all"], [16, 4, 1, "", "reference_doc"], [16, 3, 1, "", "remove"], [16, 3, 1, "", "reverse"], [16, 3, 1, "", "sample"], [16, 3, 1, "", "save"], [16, 3, 1, "", "save_binary"], [16, 3, 1, "", "save_csv"], [16, 3, 1, "", "save_embeddings_csv"], [16, 3, 1, "", "save_gif"], [16, 3, 1, "", "save_json"], [16, 3, 1, "", "shuffle"], [16, 3, 1, "", "split_by_tag"], [16, 3, 1, "", "summary"], [16, 3, 1, "", "sync"], [16, 4, 1, "", "tensors"], [16, 4, 1, "", "texts"], [16, 3, 1, "", "to_base64"], [16, 3, 1, "", "to_bytes"], [16, 3, 1, "", "to_dataframe"], [16, 3, 1, "", "to_dict"], [16, 3, 1, "", "to_json"], [16, 3, 1, "", "to_list"], [16, 3, 1, "", "to_protobuf"], [16, 3, 1, "", "to_pydantic_model"], [16, 3, 1, "", "to_strawberry_type"], [16, 3, 1, "", "traverse"], [16, 3, 1, "", "traverse_flat"], [16, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.document": [[17, 1, 1, "", "DocumentArray"]], "docarray.array.document.DocumentArray": [[17, 3, 1, "", "append"], [17, 3, 1, "", "apply"], [17, 3, 1, "", "apply_batch"], [17, 3, 1, "", "batch"], [17, 3, 1, "", "batch_ids"], [17, 4, 1, "", "blobs"], [17, 3, 1, "", "clear"], [17, 3, 1, "", "cloud_delete"], [17, 3, 1, "", "cloud_list"], [17, 3, 1, "", "cloud_pull"], [17, 3, 1, "", "cloud_push"], [17, 4, 1, "", "contents"], [17, 3, 1, "", "count"], [17, 3, 1, "", "dataloader"], [17, 3, 1, "", "embed"], [17, 4, 1, "", "embeddings"], [17, 3, 1, "", "empty"], [17, 3, 1, "", "evaluate"], [17, 3, 1, "", "extend"], [17, 3, 1, "", "find"], [17, 3, 1, "", "flatten"], [17, 3, 1, "", "from_base64"], [17, 3, 1, "", "from_bytes"], [17, 3, 1, "", "from_csv"], [17, 3, 1, "", "from_dataframe"], [17, 3, 1, "", "from_dict"], [17, 3, 1, "", "from_files"], [17, 3, 1, "", "from_huggingface_datasets"], [17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_lines"], [17, 3, 1, "", "from_list"], [17, 3, 1, "", "from_ndarray"], [17, 3, 1, "", "from_ndjson"], [17, 3, 1, "", "from_protobuf"], [17, 3, 1, "", "from_pydantic_model"], [17, 3, 1, "", "from_strawberry_type"], [17, 3, 1, "", "get_json_schema"], [17, 3, 1, "", "get_vocabulary"], [17, 3, 1, "", "index"], [17, 3, 1, "", "insert"], [17, 3, 1, "", "load"], [17, 3, 1, "", "load_binary"], [17, 3, 1, "", "load_csv"], [17, 3, 1, "", "load_json"], [17, 3, 1, "", "map"], [17, 3, 1, "", "map_batch"], [17, 3, 1, "", "match"], [17, 3, 1, "", "plot_embeddings"], [17, 3, 1, "", "plot_image_sprites"], [17, 3, 1, "", "pop"], [17, 3, 1, "", "post"], [17, 3, 1, "", "pull"], [17, 3, 1, "", "push"], [17, 3, 1, "", "reduce"], [17, 3, 1, "", "reduce_all"], [17, 3, 1, "", "remove"], [17, 3, 1, "", "reverse"], [17, 3, 1, "", "sample"], [17, 3, 1, "", "save"], [17, 3, 1, "", "save_binary"], [17, 3, 1, "", "save_csv"], [17, 3, 1, "", "save_embeddings_csv"], [17, 3, 1, "", "save_gif"], [17, 3, 1, "", "save_json"], [17, 3, 1, "", "shuffle"], [17, 3, 1, "", "split_by_tag"], [17, 3, 1, "", "summary"], [17, 4, 1, "", "tensors"], [17, 4, 1, "", "texts"], [17, 3, 1, "", "to_base64"], [17, 3, 1, "", "to_bytes"], [17, 3, 1, "", "to_dataframe"], [17, 3, 1, "", "to_dict"], [17, 3, 1, "", "to_json"], [17, 3, 1, "", "to_list"], [17, 3, 1, "", "to_protobuf"], [17, 3, 1, "", "to_pydantic_model"], [17, 3, 1, "", "to_strawberry_type"], [17, 3, 1, "", "traverse"], [17, 3, 1, "", "traverse_flat"], [17, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.elastic": [[18, 1, 1, "", "DocumentArrayElastic"], [18, 1, 1, "", "ElasticConfig"]], "docarray.array.elastic.DocumentArrayElastic": [[18, 2, 1, "", "MAX_ES_RETURNED_DOCS"], [18, 2, 1, "", "TYPE_MAP"], [18, 3, 1, "", "append"], [18, 3, 1, "", "apply"], [18, 3, 1, "", "apply_batch"], [18, 3, 1, "", "batch"], [18, 3, 1, "", "batch_ids"], [18, 4, 1, "", "blobs"], [18, 3, 1, "", "clear"], [18, 3, 1, "", "cloud_delete"], [18, 3, 1, "", "cloud_list"], [18, 3, 1, "", "cloud_pull"], [18, 3, 1, "", "cloud_push"], [18, 4, 1, "", "contents"], [18, 3, 1, "", "count"], [18, 3, 1, "", "dataloader"], [18, 3, 1, "", "embed"], [18, 4, 1, "", "embeddings"], [18, 3, 1, "", "empty"], [18, 3, 1, "", "evaluate"], [18, 3, 1, "", "extend"], [18, 3, 1, "", "find"], [18, 3, 1, "", "flatten"], [18, 3, 1, "", "from_base64"], [18, 3, 1, "", "from_bytes"], [18, 3, 1, "", "from_csv"], [18, 3, 1, "", "from_dataframe"], [18, 3, 1, "", "from_dict"], [18, 3, 1, "", "from_files"], [18, 3, 1, "", "from_huggingface_datasets"], [18, 3, 1, "", "from_json"], [18, 3, 1, "", "from_lines"], [18, 3, 1, "", "from_list"], [18, 3, 1, "", "from_ndarray"], [18, 3, 1, "", "from_ndjson"], [18, 3, 1, "", "from_protobuf"], [18, 3, 1, "", "from_pydantic_model"], [18, 3, 1, "", "from_strawberry_type"], [18, 3, 1, "", "get_json_schema"], [18, 3, 1, "", "get_vocabulary"], [18, 3, 1, "", "index"], [18, 3, 1, "", "insert"], [18, 3, 1, "", "load"], [18, 3, 1, "", "load_binary"], [18, 3, 1, "", "load_csv"], [18, 3, 1, "", "load_json"], [18, 3, 1, "", "map"], [18, 3, 1, "", "map_batch"], [18, 3, 1, "", "match"], [18, 3, 1, "", "plot_embeddings"], [18, 3, 1, "", "plot_image_sprites"], [18, 3, 1, "", "pop"], [18, 3, 1, "", "post"], [18, 3, 1, "", "pull"], [18, 3, 1, "", "push"], [18, 3, 1, "", "reduce"], [18, 3, 1, "", "reduce_all"], [18, 3, 1, "", "remove"], [18, 3, 1, "", "reverse"], [18, 3, 1, "", "sample"], [18, 3, 1, "", "save"], [18, 3, 1, "", "save_binary"], [18, 3, 1, "", "save_csv"], [18, 3, 1, "", "save_embeddings_csv"], [18, 3, 1, "", "save_gif"], [18, 3, 1, "", "save_json"], [18, 3, 1, "", "shuffle"], [18, 3, 1, "", "split_by_tag"], [18, 3, 1, "", "summary"], [18, 3, 1, "", "sync"], [18, 4, 1, "", "tensors"], [18, 4, 1, "", "texts"], [18, 3, 1, "", "to_base64"], [18, 3, 1, "", "to_bytes"], [18, 3, 1, "", "to_dataframe"], [18, 3, 1, "", "to_dict"], [18, 3, 1, "", "to_json"], [18, 3, 1, "", "to_list"], [18, 3, 1, "", "to_protobuf"], [18, 3, 1, "", "to_pydantic_model"], [18, 3, 1, "", "to_strawberry_type"], [18, 3, 1, "", "traverse"], [18, 3, 1, "", "traverse_flat"], [18, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.elastic.ElasticConfig": [[18, 2, 1, "", "batch_size"], [18, 2, 1, "", "columns"], [18, 2, 1, "", "distance"], [18, 2, 1, "", "ef_construction"], [18, 2, 1, "", "es_config"], [18, 2, 1, "", "hosts"], [18, 2, 1, "", "index_name"], [18, 2, 1, "", "index_text"], [18, 2, 1, "", "m"], [18, 2, 1, "", "n_dim"], [18, 2, 1, "", "tag_indices"]], "docarray.array.match": [[19, 1, 1, "", "MatchArray"]], "docarray.array.match.MatchArray": [[19, 2, 1, "", "TYPE_MAP"], [19, 4, 1, "", "adjacency"], [19, 3, 1, "", "append"], [19, 3, 1, "", "apply"], [19, 3, 1, "", "apply_batch"], [19, 3, 1, "", "batch"], [19, 3, 1, "", "batch_ids"], [19, 4, 1, "", "blobs"], [19, 3, 1, "", "clear"], [19, 3, 1, "", "cloud_delete"], [19, 3, 1, "", "cloud_list"], [19, 3, 1, "", "cloud_pull"], [19, 3, 1, "", "cloud_push"], [19, 4, 1, "", "contents"], [19, 3, 1, "", "count"], [19, 3, 1, "", "dataloader"], [19, 3, 1, "", "embed"], [19, 4, 1, "", "embeddings"], [19, 3, 1, "", "empty"], [19, 3, 1, "", "evaluate"], [19, 3, 1, "", "extend"], [19, 3, 1, "", "find"], [19, 3, 1, "", "flatten"], [19, 3, 1, "", "from_base64"], [19, 3, 1, "", "from_bytes"], [19, 3, 1, "", "from_csv"], [19, 3, 1, "", "from_dataframe"], [19, 3, 1, "", "from_dict"], [19, 3, 1, "", "from_files"], [19, 3, 1, "", "from_huggingface_datasets"], [19, 3, 1, "", "from_json"], [19, 3, 1, "", "from_lines"], [19, 3, 1, "", "from_list"], [19, 3, 1, "", "from_ndarray"], [19, 3, 1, "", "from_ndjson"], [19, 3, 1, "", "from_protobuf"], [19, 3, 1, "", "from_pydantic_model"], [19, 3, 1, "", "from_strawberry_type"], [19, 3, 1, "", "get_json_schema"], [19, 3, 1, "", "get_vocabulary"], [19, 4, 1, "", "granularity"], [19, 3, 1, "", "index"], [19, 3, 1, "", "insert"], [19, 3, 1, "", "load"], [19, 3, 1, "", "load_binary"], [19, 3, 1, "", "load_csv"], [19, 3, 1, "", "load_json"], [19, 3, 1, "", "map"], [19, 3, 1, "", "map_batch"], [19, 3, 1, "", "match"], [19, 3, 1, "", "plot_embeddings"], [19, 3, 1, "", "plot_image_sprites"], [19, 3, 1, "", "pop"], [19, 3, 1, "", "post"], [19, 3, 1, "", "pull"], [19, 3, 1, "", "push"], [19, 3, 1, "", "reduce"], [19, 3, 1, "", "reduce_all"], [19, 4, 1, "", "reference_doc"], [19, 3, 1, "", "remove"], [19, 3, 1, "", "reverse"], [19, 3, 1, "", "sample"], [19, 3, 1, "", "save"], [19, 3, 1, "", "save_binary"], [19, 3, 1, "", "save_csv"], [19, 3, 1, "", "save_embeddings_csv"], [19, 3, 1, "", "save_gif"], [19, 3, 1, "", "save_json"], [19, 3, 1, "", "shuffle"], [19, 3, 1, "", "split_by_tag"], [19, 3, 1, "", "summary"], [19, 3, 1, "", "sync"], [19, 4, 1, "", "tensors"], [19, 4, 1, "", "texts"], [19, 3, 1, "", "to_base64"], [19, 3, 1, "", "to_bytes"], [19, 3, 1, "", "to_dataframe"], [19, 3, 1, "", "to_dict"], [19, 3, 1, "", "to_json"], [19, 3, 1, "", "to_list"], [19, 3, 1, "", "to_protobuf"], [19, 3, 1, "", "to_pydantic_model"], [19, 3, 1, "", "to_strawberry_type"], [19, 3, 1, "", "traverse"], [19, 3, 1, "", "traverse_flat"], [19, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.memory": [[20, 1, 1, "", "DocumentArrayInMemory"]], "docarray.array.memory.DocumentArrayInMemory": [[20, 2, 1, "", "TYPE_MAP"], [20, 3, 1, "", "append"], [20, 3, 1, "", "apply"], [20, 3, 1, "", "apply_batch"], [20, 3, 1, "", "batch"], [20, 3, 1, "", "batch_ids"], [20, 4, 1, "", "blobs"], [20, 3, 1, "", "clear"], [20, 3, 1, "", "cloud_delete"], [20, 3, 1, "", "cloud_list"], [20, 3, 1, "", "cloud_pull"], [20, 3, 1, "", "cloud_push"], [20, 4, 1, "", "contents"], [20, 3, 1, "", "count"], [20, 3, 1, "", "dataloader"], [20, 3, 1, "", "embed"], [20, 4, 1, "", "embeddings"], [20, 3, 1, "", "empty"], [20, 3, 1, "", "evaluate"], [20, 3, 1, "", "extend"], [20, 3, 1, "", "find"], [20, 3, 1, "", "flatten"], [20, 3, 1, "", "from_base64"], [20, 3, 1, "", "from_bytes"], [20, 3, 1, "", "from_csv"], [20, 3, 1, "", "from_dataframe"], [20, 3, 1, "", "from_dict"], [20, 3, 1, "", "from_files"], [20, 3, 1, "", "from_huggingface_datasets"], [20, 3, 1, "", "from_json"], [20, 3, 1, "", "from_lines"], [20, 3, 1, "", "from_list"], [20, 3, 1, "", "from_ndarray"], [20, 3, 1, "", "from_ndjson"], [20, 3, 1, "", "from_protobuf"], [20, 3, 1, "", "from_pydantic_model"], [20, 3, 1, "", "from_strawberry_type"], [20, 3, 1, "", "get_json_schema"], [20, 3, 1, "", "get_vocabulary"], [20, 3, 1, "", "index"], [20, 3, 1, "", "insert"], [20, 3, 1, "", "load"], [20, 3, 1, "", "load_binary"], [20, 3, 1, "", "load_csv"], [20, 3, 1, "", "load_json"], [20, 3, 1, "", "map"], [20, 3, 1, "", "map_batch"], [20, 3, 1, "", "match"], [20, 3, 1, "", "plot_embeddings"], [20, 3, 1, "", "plot_image_sprites"], [20, 3, 1, "", "pop"], [20, 3, 1, "", "post"], [20, 3, 1, "", "pull"], [20, 3, 1, "", "push"], [20, 3, 1, "", "reduce"], [20, 3, 1, "", "reduce_all"], [20, 3, 1, "", "remove"], [20, 3, 1, "", "reverse"], [20, 3, 1, "", "sample"], [20, 3, 1, "", "save"], [20, 3, 1, "", "save_binary"], [20, 3, 1, "", "save_csv"], [20, 3, 1, "", "save_embeddings_csv"], [20, 3, 1, "", "save_gif"], [20, 3, 1, "", "save_json"], [20, 3, 1, "", "shuffle"], [20, 3, 1, "", "split_by_tag"], [20, 3, 1, "", "summary"], [20, 3, 1, "", "sync"], [20, 4, 1, "", "tensors"], [20, 4, 1, "", "texts"], [20, 3, 1, "", "to_base64"], [20, 3, 1, "", "to_bytes"], [20, 3, 1, "", "to_dataframe"], [20, 3, 1, "", "to_dict"], [20, 3, 1, "", "to_json"], [20, 3, 1, "", "to_list"], [20, 3, 1, "", "to_protobuf"], [20, 3, 1, "", "to_pydantic_model"], [20, 3, 1, "", "to_strawberry_type"], [20, 3, 1, "", "traverse"], [20, 3, 1, "", "traverse_flat"], [20, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.mixins": [[21, 1, 1, "", "AllMixins"], [22, 0, 0, "-", "content"], [23, 0, 0, "-", "dataloader"], [25, 0, 0, "-", "delitem"], [26, 0, 0, "-", "embed"], [27, 0, 0, "-", "empty"], [28, 0, 0, "-", "evaluation"], [29, 0, 0, "-", "find"], [30, 0, 0, "-", "getattr"], [31, 0, 0, "-", "getitem"], [32, 0, 0, "-", "group"], [33, 0, 0, "-", "io"], [42, 0, 0, "-", "match"], [43, 0, 0, "-", "parallel"], [44, 0, 0, "-", "plot"], [45, 0, 0, "-", "post"], [46, 0, 0, "-", "pydantic"], [47, 0, 0, "-", "reduce"], [48, 0, 0, "-", "sample"], [49, 0, 0, "-", "setitem"], [50, 0, 0, "-", "strawberry"], [51, 0, 0, "-", "text"], [52, 0, 0, "-", "traverse"]], "docarray.array.mixins.AllMixins": [[21, 3, 1, "", "apply"], [21, 3, 1, "", "apply_batch"], [21, 3, 1, "", "batch"], [21, 3, 1, "", "batch_ids"], [21, 4, 1, "", "blobs"], [21, 3, 1, "", "cloud_delete"], [21, 3, 1, "", "cloud_list"], [21, 3, 1, "", "cloud_pull"], [21, 3, 1, "", "cloud_push"], [21, 4, 1, "", "contents"], [21, 3, 1, "", "dataloader"], [21, 3, 1, "", "embed"], [21, 4, 1, "", "embeddings"], [21, 3, 1, "", "empty"], [21, 3, 1, "", "evaluate"], [21, 3, 1, "", "find"], [21, 3, 1, "", "flatten"], [21, 3, 1, "", "from_base64"], [21, 3, 1, "", "from_bytes"], [21, 3, 1, "", "from_csv"], [21, 3, 1, "", "from_dataframe"], [21, 3, 1, "", "from_dict"], [21, 3, 1, "", "from_files"], [21, 3, 1, "", "from_huggingface_datasets"], [21, 3, 1, "", "from_json"], [21, 3, 1, "", "from_lines"], [21, 3, 1, "", "from_list"], [21, 3, 1, "", "from_ndarray"], [21, 3, 1, "", "from_ndjson"], [21, 3, 1, "", "from_protobuf"], [21, 3, 1, "", "from_pydantic_model"], [21, 3, 1, "", "from_strawberry_type"], [21, 3, 1, "", "get_json_schema"], [21, 3, 1, "", "get_vocabulary"], [21, 3, 1, "", "load"], [21, 3, 1, "", "load_binary"], [21, 3, 1, "", "load_csv"], [21, 3, 1, "", "load_json"], [21, 3, 1, "", "map"], [21, 3, 1, "", "map_batch"], [21, 3, 1, "", "match"], [21, 3, 1, "", "plot_embeddings"], [21, 3, 1, "", "plot_image_sprites"], [21, 3, 1, "", "post"], [21, 3, 1, "", "pull"], [21, 3, 1, "", "push"], [21, 3, 1, "", "reduce"], [21, 3, 1, "", "reduce_all"], [21, 3, 1, "", "sample"], [21, 3, 1, "", "save"], [21, 3, 1, "", "save_binary"], [21, 3, 1, "", "save_csv"], [21, 3, 1, "", "save_embeddings_csv"], [21, 3, 1, "", "save_gif"], [21, 3, 1, "", "save_json"], [21, 3, 1, "", "shuffle"], [21, 3, 1, "", "split_by_tag"], [21, 3, 1, "", "summary"], [21, 4, 1, "", "tensors"], [21, 4, 1, "", "texts"], [21, 3, 1, "", "to_base64"], [21, 3, 1, "", "to_bytes"], [21, 3, 1, "", "to_dataframe"], [21, 3, 1, "", "to_dict"], [21, 3, 1, "", "to_json"], [21, 3, 1, "", "to_list"], [21, 3, 1, "", "to_protobuf"], [21, 3, 1, "", "to_pydantic_model"], [21, 3, 1, "", "to_strawberry_type"], [21, 3, 1, "", "traverse"], [21, 3, 1, "", "traverse_flat"], [21, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.mixins.content": [[22, 1, 1, "", "ContentPropertyMixin"]], "docarray.array.mixins.content.ContentPropertyMixin": [[22, 4, 1, "", "blobs"], [22, 4, 1, "", "contents"], [22, 4, 1, "", "embeddings"], [22, 4, 1, "", "tensors"], [22, 4, 1, "", "texts"]], "docarray.array.mixins.dataloader": [[23, 1, 1, "", "DataLoaderMixin"], [24, 0, 0, "-", "helper"]], "docarray.array.mixins.dataloader.DataLoaderMixin": [[23, 3, 1, "", "dataloader"]], "docarray.array.mixins.dataloader.helper": [[24, 1, 1, "", "DocumentArrayLoader"]], "docarray.array.mixins.dataloader.helper.DocumentArrayLoader": [[24, 3, 1, "", "apply"], [24, 3, 1, "", "apply_batch"], [24, 3, 1, "", "batch"], [24, 3, 1, "", "batch_ids"], [24, 3, 1, "", "map"], [24, 3, 1, "", "map_batch"], [24, 3, 1, "", "split_by_tag"]], "docarray.array.mixins.delitem": [[25, 1, 1, "", "DelItemMixin"]], "docarray.array.mixins.embed": [[26, 1, 1, "", "EmbedMixin"], [26, 5, 1, "", "get_framework"]], "docarray.array.mixins.embed.EmbedMixin": [[26, 3, 1, "", "embed"]], "docarray.array.mixins.empty": [[27, 1, 1, "", "EmptyMixin"]], "docarray.array.mixins.empty.EmptyMixin": [[27, 3, 1, "", "empty"]], "docarray.array.mixins.evaluation": [[28, 1, 1, "", "EvaluationMixin"]], "docarray.array.mixins.evaluation.EvaluationMixin": [[28, 3, 1, "", "evaluate"]], "docarray.array.mixins.find": [[29, 1, 1, "", "FindMixin"]], "docarray.array.mixins.find.FindMixin": [[29, 3, 1, "", "find"]], "docarray.array.mixins.getattr": [[30, 1, 1, "", "GetAttributeMixin"]], "docarray.array.mixins.getitem": [[31, 1, 1, "", "GetItemMixin"]], "docarray.array.mixins.group": [[32, 1, 1, "", "GroupMixin"]], "docarray.array.mixins.group.GroupMixin": [[32, 3, 1, "", "batch"], [32, 3, 1, "", "batch_ids"], [32, 3, 1, "", "split_by_tag"]], "docarray.array.mixins.io": [[34, 0, 0, "-", "binary"], [35, 0, 0, "-", "common"], [36, 0, 0, "-", "csv"], [37, 0, 0, "-", "dataframe"], [38, 0, 0, "-", "from_gen"], [39, 0, 0, "-", "json"], [40, 0, 0, "-", "pbar"], [41, 0, 0, "-", "pushpull"]], "docarray.array.mixins.io.binary": [[34, 1, 1, "", "BinaryIOMixin"], [34, 1, 1, "", "LazyRequestReader"]], "docarray.array.mixins.io.binary.BinaryIOMixin": [[34, 3, 1, "", "from_base64"], [34, 3, 1, "", "from_bytes"], [34, 3, 1, "", "from_protobuf"], [34, 3, 1, "", "load_binary"], [34, 3, 1, "", "save_binary"], [34, 3, 1, "", "to_base64"], [34, 3, 1, "", "to_bytes"], [34, 3, 1, "", "to_protobuf"]], "docarray.array.mixins.io.common": [[35, 1, 1, "", "CommonIOMixin"]], "docarray.array.mixins.io.common.CommonIOMixin": [[35, 3, 1, "", "load"], [35, 3, 1, "", "save"]], "docarray.array.mixins.io.csv": [[36, 1, 1, "", "CsvIOMixin"]], "docarray.array.mixins.io.csv.CsvIOMixin": [[36, 3, 1, "", "load_csv"], [36, 3, 1, "", "save_csv"], [36, 3, 1, "", "save_embeddings_csv"]], "docarray.array.mixins.io.dataframe": [[37, 1, 1, "", "DataframeIOMixin"]], "docarray.array.mixins.io.dataframe.DataframeIOMixin": [[37, 3, 1, "", "from_dataframe"], [37, 3, 1, "", "to_dataframe"]], "docarray.array.mixins.io.from_gen": [[38, 1, 1, "", "FromGeneratorMixin"]], "docarray.array.mixins.io.from_gen.FromGeneratorMixin": [[38, 3, 1, "", "from_csv"], [38, 3, 1, "", "from_files"], [38, 3, 1, "", "from_huggingface_datasets"], [38, 3, 1, "", "from_lines"], [38, 3, 1, "", "from_ndarray"], [38, 3, 1, "", "from_ndjson"]], "docarray.array.mixins.io.json": [[39, 1, 1, "", "JsonIOMixin"]], "docarray.array.mixins.io.json.JsonIOMixin": [[39, 3, 1, "", "from_dict"], [39, 3, 1, "", "from_json"], [39, 3, 1, "", "from_list"], [39, 3, 1, "", "load_json"], [39, 3, 1, "", "save_json"], [39, 3, 1, "", "to_dict"], [39, 3, 1, "", "to_json"], [39, 3, 1, "", "to_list"]], "docarray.array.mixins.io.pbar": [[40, 1, 1, "", "QPSColumn"], [40, 5, 1, "", "get_pbar"], [40, 5, 1, "", "get_progressbar"]], "docarray.array.mixins.io.pbar.QPSColumn": [[40, 3, 1, "", "get_table_column"], [40, 2, 1, "", "max_refresh"], [40, 3, 1, "", "render"]], "docarray.array.mixins.io.pushpull": [[41, 1, 1, "", "PushPullMixin"]], "docarray.array.mixins.io.pushpull.PushPullMixin": [[41, 3, 1, "", "cloud_delete"], [41, 3, 1, "", "cloud_list"], [41, 3, 1, "", "cloud_pull"], [41, 3, 1, "", "cloud_push"], [41, 3, 1, "", "pull"], [41, 3, 1, "", "push"]], "docarray.array.mixins.match": [[42, 1, 1, "", "MatchMixin"]], "docarray.array.mixins.match.MatchMixin": [[42, 3, 1, "", "match"]], "docarray.array.mixins.parallel": [[43, 1, 1, "", "ParallelMixin"]], "docarray.array.mixins.parallel.ParallelMixin": [[43, 3, 1, "", "apply"], [43, 3, 1, "", "apply_batch"], [43, 3, 1, "", "map"], [43, 3, 1, "", "map_batch"]], "docarray.array.mixins.plot": [[44, 1, 1, "", "PlotMixin"]], "docarray.array.mixins.plot.PlotMixin": [[44, 3, 1, "", "plot_embeddings"], [44, 3, 1, "", "plot_image_sprites"], [44, 3, 1, "", "save_gif"], [44, 3, 1, "", "summary"]], "docarray.array.mixins.post": [[45, 1, 1, "", "PostMixin"]], "docarray.array.mixins.post.PostMixin": [[45, 3, 1, "", "post"]], "docarray.array.mixins.pydantic": [[46, 1, 1, "", "PydanticMixin"]], "docarray.array.mixins.pydantic.PydanticMixin": [[46, 3, 1, "", "from_pydantic_model"], [46, 3, 1, "", "get_json_schema"], [46, 3, 1, "", "to_pydantic_model"]], "docarray.array.mixins.reduce": [[47, 1, 1, "", "ReduceMixin"]], "docarray.array.mixins.reduce.ReduceMixin": [[47, 3, 1, "", "reduce"], [47, 3, 1, "", "reduce_all"]], "docarray.array.mixins.sample": [[48, 1, 1, "", "SampleMixin"]], "docarray.array.mixins.sample.SampleMixin": [[48, 3, 1, "", "sample"], [48, 3, 1, "", "shuffle"]], "docarray.array.mixins.setitem": [[49, 1, 1, "", "SetItemMixin"]], "docarray.array.mixins.strawberry": [[50, 1, 1, "", "StrawberryMixin"]], "docarray.array.mixins.strawberry.StrawberryMixin": [[50, 3, 1, "", "from_strawberry_type"], [50, 3, 1, "", "to_strawberry_type"]], "docarray.array.mixins.text": [[51, 1, 1, "", "TextToolsMixin"]], "docarray.array.mixins.text.TextToolsMixin": [[51, 3, 1, "", "get_vocabulary"]], "docarray.array.mixins.traverse": [[52, 1, 1, "", "TraverseMixin"]], "docarray.array.mixins.traverse.TraverseMixin": [[52, 3, 1, "", "flatten"], [52, 3, 1, "", "traverse"], [52, 3, 1, "", "traverse_flat"], [52, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.qdrant": [[53, 1, 1, "", "DocumentArrayQdrant"], [53, 1, 1, "", "QdrantConfig"]], "docarray.array.qdrant.DocumentArrayQdrant": [[53, 2, 1, "", "TYPE_MAP"], [53, 3, 1, "", "append"], [53, 3, 1, "", "apply"], [53, 3, 1, "", "apply_batch"], [53, 3, 1, "", "batch"], [53, 3, 1, "", "batch_ids"], [53, 4, 1, "", "blobs"], [53, 3, 1, "", "clear"], [53, 4, 1, "", "client"], [53, 3, 1, "", "cloud_delete"], [53, 3, 1, "", "cloud_list"], [53, 3, 1, "", "cloud_pull"], [53, 3, 1, "", "cloud_push"], [53, 4, 1, "", "collection_name"], [53, 4, 1, "", "collection_name_meta"], [53, 4, 1, "", "config"], [53, 4, 1, "", "contents"], [53, 3, 1, "", "count"], [53, 3, 1, "", "dataloader"], [53, 4, 1, "", "distance"], [53, 3, 1, "", "embed"], [53, 4, 1, "", "embeddings"], [53, 3, 1, "", "empty"], [53, 3, 1, "", "evaluate"], [53, 3, 1, "", "extend"], [53, 3, 1, "", "find"], [53, 3, 1, "", "flatten"], [53, 3, 1, "", "from_base64"], [53, 3, 1, "", "from_bytes"], [53, 3, 1, "", "from_csv"], [53, 3, 1, "", "from_dataframe"], [53, 3, 1, "", "from_dict"], [53, 3, 1, "", "from_files"], [53, 3, 1, "", "from_huggingface_datasets"], [53, 3, 1, "", "from_json"], [53, 3, 1, "", "from_lines"], [53, 3, 1, "", "from_list"], [53, 3, 1, "", "from_ndarray"], [53, 3, 1, "", "from_ndjson"], [53, 3, 1, "", "from_protobuf"], [53, 3, 1, "", "from_pydantic_model"], [53, 3, 1, "", "from_strawberry_type"], [53, 3, 1, "", "get_json_schema"], [53, 3, 1, "", "get_vocabulary"], [53, 3, 1, "", "index"], [53, 3, 1, "", "insert"], [53, 3, 1, "", "load"], [53, 3, 1, "", "load_binary"], [53, 3, 1, "", "load_csv"], [53, 3, 1, "", "load_json"], [53, 3, 1, "", "map"], [53, 3, 1, "", "map_batch"], [53, 3, 1, "", "match"], [53, 4, 1, "", "n_dim"], [53, 3, 1, "", "plot_embeddings"], [53, 3, 1, "", "plot_image_sprites"], [53, 3, 1, "", "pop"], [53, 3, 1, "", "post"], [53, 3, 1, "", "pull"], [53, 3, 1, "", "push"], [53, 3, 1, "", "reduce"], [53, 3, 1, "", "reduce_all"], [53, 3, 1, "", "remove"], [53, 3, 1, "", "reverse"], [53, 3, 1, "", "sample"], [53, 3, 1, "", "save"], [53, 3, 1, "", "save_binary"], [53, 3, 1, "", "save_csv"], [53, 3, 1, "", "save_embeddings_csv"], [53, 3, 1, "", "save_gif"], [53, 3, 1, "", "save_json"], [53, 3, 1, "", "scan"], [53, 4, 1, "", "scroll_batch_size"], [53, 4, 1, "", "serialization_config"], [53, 4, 1, "", "serialize_config"], [53, 3, 1, "", "shuffle"], [53, 3, 1, "", "split_by_tag"], [53, 3, 1, "", "summary"], [53, 3, 1, "", "sync"], [53, 4, 1, "", "tensors"], [53, 4, 1, "", "texts"], [53, 3, 1, "", "to_base64"], [53, 3, 1, "", "to_bytes"], [53, 3, 1, "", "to_dataframe"], [53, 3, 1, "", "to_dict"], [53, 3, 1, "", "to_json"], [53, 3, 1, "", "to_list"], [53, 3, 1, "", "to_protobuf"], [53, 3, 1, "", "to_pydantic_model"], [53, 3, 1, "", "to_strawberry_type"], [53, 3, 1, "", "traverse"], [53, 3, 1, "", "traverse_flat"], [53, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.qdrant.QdrantConfig": [[53, 2, 1, "", "collection_name"], [53, 2, 1, "", "columns"], [53, 2, 1, "", "distance"], [53, 2, 1, "", "ef_construct"], [53, 2, 1, "", "full_scan_threshold"], [53, 2, 1, "", "host"], [53, 2, 1, "", "m"], [53, 2, 1, "", "n_dim"], [53, 2, 1, "", "port"], [53, 2, 1, "", "scroll_batch_size"], [53, 2, 1, "", "serialize_config"]], "docarray.array.queryset": [[55, 0, 0, "-", "lookup"], [56, 0, 0, "-", "parser"]], "docarray.array.queryset.lookup": [[55, 1, 1, "", "LookupLeaf"], [55, 1, 1, "", "LookupNode"], [55, 1, 1, "", "LookupTreeElem"], [55, 6, 1, "", "LookupyError"], [55, 2, 1, "", "Q"], [55, 5, 1, "", "dunder_partition"], [55, 5, 1, "", "guard_Q"], [55, 5, 1, "", "guard_iter"], [55, 5, 1, "", "guard_list"], [55, 5, 1, "", "guard_str"], [55, 5, 1, "", "guard_type"], [55, 5, 1, "", "iff"], [55, 5, 1, "", "iff_not_none"], [55, 5, 1, "", "lookup"]], "docarray.array.queryset.lookup.LookupLeaf": [[55, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupNode": [[55, 3, 1, "", "add_child"], [55, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupTreeElem": [[55, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupyError": [[55, 2, 1, "", "args"], [55, 3, 1, "", "with_traceback"]], "docarray.array.queryset.parser": [[56, 1, 1, "", "QueryParser"]], "docarray.array.queryset.parser.QueryParser": [[56, 3, 1, "", "evaluate"]], "docarray.array.redis": [[57, 1, 1, "", "DocumentArrayRedis"], [57, 1, 1, "", "RedisConfig"]], "docarray.array.redis.DocumentArrayRedis": [[57, 2, 1, "", "TYPE_MAP"], [57, 3, 1, "", "append"], [57, 3, 1, "", "apply"], [57, 3, 1, "", "apply_batch"], [57, 3, 1, "", "batch"], [57, 3, 1, "", "batch_ids"], [57, 4, 1, "", "blobs"], [57, 3, 1, "", "clear"], [57, 3, 1, "", "cloud_delete"], [57, 3, 1, "", "cloud_list"], [57, 3, 1, "", "cloud_pull"], [57, 3, 1, "", "cloud_push"], [57, 4, 1, "", "contents"], [57, 3, 1, "", "count"], [57, 3, 1, "", "dataloader"], [57, 3, 1, "", "embed"], [57, 4, 1, "", "embeddings"], [57, 3, 1, "", "empty"], [57, 3, 1, "", "evaluate"], [57, 3, 1, "", "extend"], [57, 3, 1, "", "find"], [57, 3, 1, "", "flatten"], [57, 3, 1, "", "from_base64"], [57, 3, 1, "", "from_bytes"], [57, 3, 1, "", "from_csv"], [57, 3, 1, "", "from_dataframe"], [57, 3, 1, "", "from_dict"], [57, 3, 1, "", "from_files"], [57, 3, 1, "", "from_huggingface_datasets"], [57, 3, 1, "", "from_json"], [57, 3, 1, "", "from_lines"], [57, 3, 1, "", "from_list"], [57, 3, 1, "", "from_ndarray"], [57, 3, 1, "", "from_ndjson"], [57, 3, 1, "", "from_protobuf"], [57, 3, 1, "", "from_pydantic_model"], [57, 3, 1, "", "from_strawberry_type"], [57, 3, 1, "", "get_json_schema"], [57, 3, 1, "", "get_vocabulary"], [57, 3, 1, "", "index"], [57, 3, 1, "", "insert"], [57, 3, 1, "", "load"], [57, 3, 1, "", "load_binary"], [57, 3, 1, "", "load_csv"], [57, 3, 1, "", "load_json"], [57, 3, 1, "", "map"], [57, 3, 1, "", "map_batch"], [57, 3, 1, "", "match"], [57, 3, 1, "", "plot_embeddings"], [57, 3, 1, "", "plot_image_sprites"], [57, 3, 1, "", "pop"], [57, 3, 1, "", "post"], [57, 3, 1, "", "pull"], [57, 3, 1, "", "push"], [57, 3, 1, "", "reduce"], [57, 3, 1, "", "reduce_all"], [57, 3, 1, "", "remove"], [57, 3, 1, "", "reverse"], [57, 3, 1, "", "sample"], [57, 3, 1, "", "save"], [57, 3, 1, "", "save_binary"], [57, 3, 1, "", "save_csv"], [57, 3, 1, "", "save_embeddings_csv"], [57, 3, 1, "", "save_gif"], [57, 3, 1, "", "save_json"], [57, 3, 1, "", "shuffle"], [57, 3, 1, "", "split_by_tag"], [57, 3, 1, "", "summary"], [57, 3, 1, "", "sync"], [57, 4, 1, "", "tensors"], [57, 4, 1, "", "texts"], [57, 3, 1, "", "to_base64"], [57, 3, 1, "", "to_bytes"], [57, 3, 1, "", "to_dataframe"], [57, 3, 1, "", "to_dict"], [57, 3, 1, "", "to_json"], [57, 3, 1, "", "to_list"], [57, 3, 1, "", "to_protobuf"], [57, 3, 1, "", "to_pydantic_model"], [57, 3, 1, "", "to_strawberry_type"], [57, 3, 1, "", "traverse"], [57, 3, 1, "", "traverse_flat"], [57, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.redis.RedisConfig": [[57, 2, 1, "", "batch_size"], [57, 2, 1, "", "block_size"], [57, 2, 1, "", "columns"], [57, 2, 1, "", "distance"], [57, 2, 1, "", "ef_construction"], [57, 2, 1, "", "ef_runtime"], [57, 2, 1, "", "host"], [57, 2, 1, "", "index_name"], [57, 2, 1, "", "index_text"], [57, 2, 1, "", "initial_cap"], [57, 2, 1, "", "m"], [57, 2, 1, "", "method"], [57, 2, 1, "", "n_dim"], [57, 2, 1, "", "port"], [57, 2, 1, "", "redis_config"], [57, 2, 1, "", "tag_indices"], [57, 2, 1, "", "update_schema"]], "docarray.array.sqlite": [[58, 1, 1, "", "DocumentArraySqlite"], [58, 1, 1, "", "SqliteConfig"]], "docarray.array.sqlite.DocumentArraySqlite": [[58, 2, 1, "", "TYPE_MAP"], [58, 3, 1, "", "append"], [58, 3, 1, "", "apply"], [58, 3, 1, "", "apply_batch"], [58, 3, 1, "", "batch"], [58, 3, 1, "", "batch_ids"], [58, 4, 1, "", "blobs"], [58, 3, 1, "", "clear"], [58, 3, 1, "", "cloud_delete"], [58, 3, 1, "", "cloud_list"], [58, 3, 1, "", "cloud_pull"], [58, 3, 1, "", "cloud_push"], [58, 4, 1, "", "contents"], [58, 3, 1, "", "count"], [58, 3, 1, "", "dataloader"], [58, 3, 1, "", "embed"], [58, 4, 1, "", "embeddings"], [58, 3, 1, "", "empty"], [58, 3, 1, "", "evaluate"], [58, 3, 1, "", "extend"], [58, 3, 1, "", "find"], [58, 3, 1, "", "flatten"], [58, 3, 1, "", "from_base64"], [58, 3, 1, "", "from_bytes"], [58, 3, 1, "", "from_csv"], [58, 3, 1, "", "from_dataframe"], [58, 3, 1, "", "from_dict"], [58, 3, 1, "", "from_files"], [58, 3, 1, "", "from_huggingface_datasets"], [58, 3, 1, "", "from_json"], [58, 3, 1, "", "from_lines"], [58, 3, 1, "", "from_list"], [58, 3, 1, "", "from_ndarray"], [58, 3, 1, "", "from_ndjson"], [58, 3, 1, "", "from_protobuf"], [58, 3, 1, "", "from_pydantic_model"], [58, 3, 1, "", "from_strawberry_type"], [58, 3, 1, "", "get_json_schema"], [58, 3, 1, "", "get_vocabulary"], [58, 3, 1, "", "index"], [58, 3, 1, "", "insert"], [58, 3, 1, "", "load"], [58, 3, 1, "", "load_binary"], [58, 3, 1, "", "load_csv"], [58, 3, 1, "", "load_json"], [58, 3, 1, "", "map"], [58, 3, 1, "", "map_batch"], [58, 3, 1, "", "match"], [58, 3, 1, "", "plot_embeddings"], [58, 3, 1, "", "plot_image_sprites"], [58, 3, 1, "", "pop"], [58, 3, 1, "", "post"], [58, 3, 1, "", "pull"], [58, 3, 1, "", "push"], [58, 3, 1, "", "reduce"], [58, 3, 1, "", "reduce_all"], [58, 3, 1, "", "remove"], [58, 3, 1, "", "reverse"], [58, 3, 1, "", "sample"], [58, 3, 1, "", "save"], [58, 3, 1, "", "save_binary"], [58, 3, 1, "", "save_csv"], [58, 3, 1, "", "save_embeddings_csv"], [58, 3, 1, "", "save_gif"], [58, 3, 1, "", "save_json"], [58, 2, 1, "", "schema_version"], [58, 3, 1, "", "shuffle"], [58, 3, 1, "", "split_by_tag"], [58, 3, 1, "", "summary"], [58, 3, 1, "", "sync"], [58, 4, 1, "", "tensors"], [58, 4, 1, "", "texts"], [58, 3, 1, "", "to_base64"], [58, 3, 1, "", "to_bytes"], [58, 3, 1, "", "to_dataframe"], [58, 3, 1, "", "to_dict"], [58, 3, 1, "", "to_json"], [58, 3, 1, "", "to_list"], [58, 3, 1, "", "to_protobuf"], [58, 3, 1, "", "to_pydantic_model"], [58, 3, 1, "", "to_strawberry_type"], [58, 3, 1, "", "traverse"], [58, 3, 1, "", "traverse_flat"], [58, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.sqlite.SqliteConfig": [[58, 2, 1, "", "conn_config"], [58, 2, 1, "", "connection"], [58, 2, 1, "", "journal_mode"], [58, 2, 1, "", "serialize_config"], [58, 2, 1, "", "synchronous"], [58, 2, 1, "", "table_name"]], "docarray.array.storage": [[60, 0, 0, "-", "annlite"], [66, 0, 0, "-", "base"], [71, 0, 0, "-", "elastic"], [76, 0, 0, "-", "memory"], [81, 0, 0, "-", "qdrant"], [87, 0, 0, "-", "redis"], [92, 0, 0, "-", "registry"], [93, 0, 0, "-", "sqlite"], [98, 0, 0, "-", "weaviate"]], "docarray.array.storage.annlite": [[60, 1, 1, "", "AnnliteConfig"], [60, 1, 1, "", "StorageMixins"], [61, 0, 0, "-", "backend"], [62, 0, 0, "-", "find"], [63, 0, 0, "-", "getsetdel"], [64, 0, 0, "-", "helper"], [65, 0, 0, "-", "seqlike"]], "docarray.array.storage.annlite.AnnliteConfig": [[60, 2, 1, "", "columns"], [60, 2, 1, "", "data_path"], [60, 2, 1, "", "ef_construction"], [60, 2, 1, "", "ef_search"], [60, 2, 1, "", "max_connection"], [60, 2, 1, "", "metric"], [60, 2, 1, "", "n_components"], [60, 2, 1, "", "n_dim"], [60, 2, 1, "", "serialize_config"]], "docarray.array.storage.annlite.StorageMixins": [[60, 2, 1, "", "TYPE_MAP"], [60, 3, 1, "", "append"], [60, 3, 1, "", "clear"], [60, 3, 1, "", "count"], [60, 3, 1, "", "extend"], [60, 3, 1, "", "index"], [60, 3, 1, "", "insert"], [60, 3, 1, "", "pop"], [60, 3, 1, "", "remove"], [60, 3, 1, "", "reverse"], [60, 3, 1, "", "sync"]], "docarray.array.storage.annlite.backend": [[61, 1, 1, "", "AnnliteConfig"], [61, 1, 1, "", "BackendMixin"]], "docarray.array.storage.annlite.backend.AnnliteConfig": [[61, 2, 1, "", "columns"], [61, 2, 1, "", "data_path"], [61, 2, 1, "", "ef_construction"], [61, 2, 1, "", "ef_search"], [61, 2, 1, "", "max_connection"], [61, 2, 1, "", "metric"], [61, 2, 1, "", "n_components"], [61, 2, 1, "", "n_dim"], [61, 2, 1, "", "serialize_config"]], "docarray.array.storage.annlite.backend.BackendMixin": [[61, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.annlite.find": [[62, 1, 1, "", "FindMixin"]], "docarray.array.storage.annlite.getsetdel": [[63, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.annlite.getsetdel.GetSetDelMixin": [[63, 3, 1, "", "sync"]], "docarray.array.storage.annlite.helper": [[64, 1, 1, "", "OffsetMapping"]], "docarray.array.storage.annlite.helper.OffsetMapping": [[64, 3, 1, "", "clear"], [64, 3, 1, "", "close"], [64, 3, 1, "", "commit"], [64, 3, 1, "", "create_table"], [64, 3, 1, "", "del_at_offset"], [64, 3, 1, "", "del_at_offsets"], [64, 3, 1, "", "drop"], [64, 3, 1, "", "drop_table"], [64, 3, 1, "", "dump"], [64, 3, 1, "", "execute"], [64, 3, 1, "", "execute_many"], [64, 3, 1, "", "extend_doc_ids"], [64, 3, 1, "", "get_all_ids"], [64, 3, 1, "", "get_id_by_offset"], [64, 3, 1, "", "get_ids_by_offsets"], [64, 3, 1, "", "get_offset_by_id"], [64, 3, 1, "", "get_offsets_by_ids"], [64, 3, 1, "", "insert_at_offset"], [64, 3, 1, "", "load"], [64, 4, 1, "", "name"], [64, 4, 1, "", "schema"], [64, 3, 1, "", "set_at_offset"], [64, 3, 1, "", "shift_offset"], [64, 4, 1, "", "size"]], "docarray.array.storage.annlite.seqlike": [[65, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.annlite.seqlike.SequenceLikeMixin": [[65, 3, 1, "", "append"], [65, 3, 1, "", "clear"], [65, 3, 1, "", "count"], [65, 3, 1, "", "extend"], [65, 3, 1, "", "index"], [65, 3, 1, "", "insert"], [65, 3, 1, "", "pop"], [65, 3, 1, "", "remove"], [65, 3, 1, "", "reverse"]], "docarray.array.storage.base": [[67, 0, 0, "-", "backend"], [68, 0, 0, "-", "getsetdel"], [69, 0, 0, "-", "helper"], [70, 0, 0, "-", "seqlike"]], "docarray.array.storage.base.backend": [[67, 1, 1, "", "BaseBackendMixin"], [67, 1, 1, "", "TypeMap"]], "docarray.array.storage.base.backend.BaseBackendMixin": [[67, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.base.backend.TypeMap": [[67, 4, 1, "", "converter"], [67, 3, 1, "", "count"], [67, 3, 1, "", "index"], [67, 4, 1, "", "type"]], "docarray.array.storage.base.getsetdel": [[68, 1, 1, "", "BaseGetSetDelMixin"]], "docarray.array.storage.base.getsetdel.BaseGetSetDelMixin": [[68, 3, 1, "", "sync"]], "docarray.array.storage.base.helper": [[69, 1, 1, "", "Offset2ID"]], "docarray.array.storage.base.helper.Offset2ID": [[69, 3, 1, "", "append"], [69, 3, 1, "", "clear"], [69, 3, 1, "", "delete_by_id"], [69, 3, 1, "", "delete_by_ids"], [69, 3, 1, "", "delete_by_offset"], [69, 3, 1, "", "extend"], [69, 3, 1, "", "get_id"], [69, 3, 1, "", "index"], [69, 3, 1, "", "insert"], [69, 3, 1, "", "load"], [69, 3, 1, "", "save"], [69, 3, 1, "", "update"], [69, 3, 1, "", "update_ids"]], "docarray.array.storage.base.seqlike": [[70, 1, 1, "", "BaseSequenceLikeMixin"]], "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin": [[70, 3, 1, "", "append"], [70, 3, 1, "", "clear"], [70, 3, 1, "", "count"], [70, 3, 1, "", "extend"], [70, 3, 1, "", "index"], [70, 3, 1, "", "insert"], [70, 3, 1, "", "pop"], [70, 3, 1, "", "remove"], [70, 3, 1, "", "reverse"]], "docarray.array.storage.elastic": [[71, 1, 1, "", "ElasticConfig"], [71, 1, 1, "", "StorageMixins"], [72, 0, 0, "-", "backend"], [73, 0, 0, "-", "find"], [74, 0, 0, "-", "getsetdel"], [75, 0, 0, "-", "seqlike"]], "docarray.array.storage.elastic.ElasticConfig": [[71, 2, 1, "", "batch_size"], [71, 2, 1, "", "columns"], [71, 2, 1, "", "distance"], [71, 2, 1, "", "ef_construction"], [71, 2, 1, "", "es_config"], [71, 2, 1, "", "hosts"], [71, 2, 1, "", "index_name"], [71, 2, 1, "", "index_text"], [71, 2, 1, "", "m"], [71, 2, 1, "", "n_dim"], [71, 2, 1, "", "tag_indices"]], "docarray.array.storage.elastic.StorageMixins": [[71, 2, 1, "", "MAX_ES_RETURNED_DOCS"], [71, 2, 1, "", "TYPE_MAP"], [71, 3, 1, "", "append"], [71, 3, 1, "", "clear"], [71, 3, 1, "", "count"], [71, 3, 1, "", "extend"], [71, 3, 1, "", "find"], [71, 3, 1, "", "index"], [71, 3, 1, "", "insert"], [71, 3, 1, "", "pop"], [71, 3, 1, "", "remove"], [71, 3, 1, "", "reverse"], [71, 3, 1, "", "sync"]], "docarray.array.storage.elastic.backend": [[72, 1, 1, "", "BackendMixin"], [72, 1, 1, "", "ElasticConfig"]], "docarray.array.storage.elastic.backend.BackendMixin": [[72, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.elastic.backend.ElasticConfig": [[72, 2, 1, "", "batch_size"], [72, 2, 1, "", "columns"], [72, 2, 1, "", "distance"], [72, 2, 1, "", "ef_construction"], [72, 2, 1, "", "es_config"], [72, 2, 1, "", "hosts"], [72, 2, 1, "", "index_name"], [72, 2, 1, "", "index_text"], [72, 2, 1, "", "m"], [72, 2, 1, "", "n_dim"], [72, 2, 1, "", "tag_indices"]], "docarray.array.storage.elastic.find": [[73, 1, 1, "", "FindMixin"]], "docarray.array.storage.elastic.find.FindMixin": [[73, 3, 1, "", "find"]], "docarray.array.storage.elastic.getsetdel": [[74, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.elastic.getsetdel.GetSetDelMixin": [[74, 2, 1, "", "MAX_ES_RETURNED_DOCS"], [74, 3, 1, "", "sync"]], "docarray.array.storage.elastic.seqlike": [[75, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.elastic.seqlike.SequenceLikeMixin": [[75, 3, 1, "", "append"], [75, 3, 1, "", "clear"], [75, 3, 1, "", "count"], [75, 3, 1, "", "extend"], [75, 3, 1, "", "index"], [75, 3, 1, "", "insert"], [75, 3, 1, "", "pop"], [75, 3, 1, "", "remove"], [75, 3, 1, "", "reverse"]], "docarray.array.storage.memory": [[76, 1, 1, "", "StorageMixins"], [77, 0, 0, "-", "backend"], [78, 0, 0, "-", "find"], [79, 0, 0, "-", "getsetdel"], [80, 0, 0, "-", "seqlike"]], "docarray.array.storage.memory.StorageMixins": [[76, 2, 1, "", "TYPE_MAP"], [76, 3, 1, "", "append"], [76, 3, 1, "", "clear"], [76, 3, 1, "", "count"], [76, 3, 1, "", "extend"], [76, 3, 1, "", "index"], [76, 3, 1, "", "insert"], [76, 3, 1, "", "pop"], [76, 3, 1, "", "remove"], [76, 3, 1, "", "reverse"], [76, 3, 1, "", "sync"]], "docarray.array.storage.memory.backend": [[77, 1, 1, "", "BackendMixin"], [77, 5, 1, "", "needs_id2offset_rebuild"]], "docarray.array.storage.memory.backend.BackendMixin": [[77, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.memory.find": [[78, 1, 1, "", "FindMixin"]], "docarray.array.storage.memory.getsetdel": [[79, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.memory.getsetdel.GetSetDelMixin": [[79, 3, 1, "", "sync"]], "docarray.array.storage.memory.seqlike": [[80, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.memory.seqlike.SequenceLikeMixin": [[80, 3, 1, "", "append"], [80, 3, 1, "", "clear"], [80, 3, 1, "", "count"], [80, 3, 1, "", "extend"], [80, 3, 1, "", "index"], [80, 3, 1, "", "insert"], [80, 3, 1, "", "pop"], [80, 3, 1, "", "remove"], [80, 3, 1, "", "reverse"]], "docarray.array.storage.qdrant": [[81, 1, 1, "", "QdrantConfig"], [81, 1, 1, "", "StorageMixins"], [82, 0, 0, "-", "backend"], [83, 0, 0, "-", "find"], [84, 0, 0, "-", "getsetdel"], [85, 0, 0, "-", "helper"], [86, 0, 0, "-", "seqlike"]], "docarray.array.storage.qdrant.QdrantConfig": [[81, 2, 1, "", "collection_name"], [81, 2, 1, "", "columns"], [81, 2, 1, "", "distance"], [81, 2, 1, "", "ef_construct"], [81, 2, 1, "", "full_scan_threshold"], [81, 2, 1, "", "host"], [81, 2, 1, "", "m"], [81, 2, 1, "", "n_dim"], [81, 2, 1, "", "port"], [81, 2, 1, "", "scroll_batch_size"], [81, 2, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.StorageMixins": [[81, 2, 1, "", "TYPE_MAP"], [81, 3, 1, "", "append"], [81, 3, 1, "", "clear"], [81, 4, 1, "", "client"], [81, 4, 1, "", "collection_name"], [81, 4, 1, "", "collection_name_meta"], [81, 4, 1, "", "config"], [81, 3, 1, "", "count"], [81, 4, 1, "", "distance"], [81, 3, 1, "", "extend"], [81, 3, 1, "", "index"], [81, 3, 1, "", "insert"], [81, 4, 1, "", "n_dim"], [81, 3, 1, "", "pop"], [81, 3, 1, "", "remove"], [81, 3, 1, "", "reverse"], [81, 3, 1, "", "scan"], [81, 4, 1, "", "scroll_batch_size"], [81, 4, 1, "", "serialization_config"], [81, 4, 1, "", "serialize_config"], [81, 3, 1, "", "sync"]], "docarray.array.storage.qdrant.backend": [[82, 1, 1, "", "BackendMixin"], [82, 1, 1, "", "QdrantConfig"]], "docarray.array.storage.qdrant.backend.BackendMixin": [[82, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.qdrant.backend.QdrantConfig": [[82, 2, 1, "", "collection_name"], [82, 2, 1, "", "columns"], [82, 2, 1, "", "distance"], [82, 2, 1, "", "ef_construct"], [82, 2, 1, "", "full_scan_threshold"], [82, 2, 1, "", "host"], [82, 2, 1, "", "m"], [82, 2, 1, "", "n_dim"], [82, 2, 1, "", "port"], [82, 2, 1, "", "scroll_batch_size"], [82, 2, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.find": [[83, 1, 1, "", "FindMixin"]], "docarray.array.storage.qdrant.find.FindMixin": [[83, 4, 1, "", "client"], [83, 4, 1, "", "collection_name"], [83, 4, 1, "", "distance"], [83, 4, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.getsetdel": [[84, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin": [[84, 4, 1, "", "client"], [84, 4, 1, "", "collection_name"], [84, 4, 1, "", "n_dim"], [84, 3, 1, "", "scan"], [84, 4, 1, "", "scroll_batch_size"], [84, 4, 1, "", "serialization_config"], [84, 3, 1, "", "sync"]], "docarray.array.storage.qdrant.seqlike": [[86, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin": [[86, 3, 1, "", "append"], [86, 3, 1, "", "clear"], [86, 4, 1, "", "client"], [86, 4, 1, "", "collection_name"], [86, 4, 1, "", "config"], [86, 3, 1, "", "count"], [86, 3, 1, "", "extend"], [86, 3, 1, "", "index"], [86, 3, 1, "", "insert"], [86, 3, 1, "", "pop"], [86, 3, 1, "", "remove"], [86, 3, 1, "", "reverse"]], "docarray.array.storage.redis": [[87, 1, 1, "", "RedisConfig"], [87, 1, 1, "", "StorageMixins"], [88, 0, 0, "-", "backend"], [89, 0, 0, "-", "find"], [90, 0, 0, "-", "getsetdel"], [91, 0, 0, "-", "seqlike"]], "docarray.array.storage.redis.RedisConfig": [[87, 2, 1, "", "batch_size"], [87, 2, 1, "", "block_size"], [87, 2, 1, "", "columns"], [87, 2, 1, "", "distance"], [87, 2, 1, "", "ef_construction"], [87, 2, 1, "", "ef_runtime"], [87, 2, 1, "", "host"], [87, 2, 1, "", "index_name"], [87, 2, 1, "", "index_text"], [87, 2, 1, "", "initial_cap"], [87, 2, 1, "", "m"], [87, 2, 1, "", "method"], [87, 2, 1, "", "n_dim"], [87, 2, 1, "", "port"], [87, 2, 1, "", "redis_config"], [87, 2, 1, "", "tag_indices"], [87, 2, 1, "", "update_schema"]], "docarray.array.storage.redis.StorageMixins": [[87, 2, 1, "", "TYPE_MAP"], [87, 3, 1, "", "append"], [87, 3, 1, "", "clear"], [87, 3, 1, "", "count"], [87, 3, 1, "", "extend"], [87, 3, 1, "", "find"], [87, 3, 1, "", "index"], [87, 3, 1, "", "insert"], [87, 3, 1, "", "pop"], [87, 3, 1, "", "remove"], [87, 3, 1, "", "reverse"], [87, 3, 1, "", "sync"]], "docarray.array.storage.redis.backend": [[88, 1, 1, "", "BackendMixin"], [88, 1, 1, "", "RedisConfig"]], "docarray.array.storage.redis.backend.BackendMixin": [[88, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.redis.backend.RedisConfig": [[88, 2, 1, "", "batch_size"], [88, 2, 1, "", "block_size"], [88, 2, 1, "", "columns"], [88, 2, 1, "", "distance"], [88, 2, 1, "", "ef_construction"], [88, 2, 1, "", "ef_runtime"], [88, 2, 1, "", "host"], [88, 2, 1, "", "index_name"], [88, 2, 1, "", "index_text"], [88, 2, 1, "", "initial_cap"], [88, 2, 1, "", "m"], [88, 2, 1, "", "method"], [88, 2, 1, "", "n_dim"], [88, 2, 1, "", "port"], [88, 2, 1, "", "redis_config"], [88, 2, 1, "", "tag_indices"], [88, 2, 1, "", "update_schema"]], "docarray.array.storage.redis.find": [[89, 1, 1, "", "FindMixin"]], "docarray.array.storage.redis.find.FindMixin": [[89, 3, 1, "", "find"]], "docarray.array.storage.redis.getsetdel": [[90, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.redis.getsetdel.GetSetDelMixin": [[90, 3, 1, "", "sync"]], "docarray.array.storage.redis.seqlike": [[91, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.redis.seqlike.SequenceLikeMixin": [[91, 3, 1, "", "append"], [91, 3, 1, "", "clear"], [91, 3, 1, "", "count"], [91, 3, 1, "", "extend"], [91, 3, 1, "", "index"], [91, 3, 1, "", "insert"], [91, 3, 1, "", "pop"], [91, 3, 1, "", "remove"], [91, 3, 1, "", "reverse"]], "docarray.array.storage.sqlite": [[93, 1, 1, "", "SqliteConfig"], [93, 1, 1, "", "StorageMixins"], [94, 0, 0, "-", "backend"], [95, 0, 0, "-", "getsetdel"], [96, 0, 0, "-", "helper"], [97, 0, 0, "-", "seqlike"]], "docarray.array.storage.sqlite.SqliteConfig": [[93, 2, 1, "", "conn_config"], [93, 2, 1, "", "connection"], [93, 2, 1, "", "journal_mode"], [93, 2, 1, "", "serialize_config"], [93, 2, 1, "", "synchronous"], [93, 2, 1, "", "table_name"]], "docarray.array.storage.sqlite.StorageMixins": [[93, 2, 1, "", "TYPE_MAP"], [93, 3, 1, "", "append"], [93, 3, 1, "", "clear"], [93, 3, 1, "", "count"], [93, 3, 1, "", "extend"], [93, 3, 1, "", "index"], [93, 3, 1, "", "insert"], [93, 3, 1, "", "pop"], [93, 3, 1, "", "remove"], [93, 3, 1, "", "reverse"], [93, 2, 1, "", "schema_version"], [93, 3, 1, "", "sync"]], "docarray.array.storage.sqlite.backend": [[94, 1, 1, "", "BackendMixin"], [94, 1, 1, "", "SqliteConfig"]], "docarray.array.storage.sqlite.backend.BackendMixin": [[94, 2, 1, "", "TYPE_MAP"], [94, 2, 1, "", "schema_version"]], "docarray.array.storage.sqlite.backend.SqliteConfig": [[94, 2, 1, "", "conn_config"], [94, 2, 1, "", "connection"], [94, 2, 1, "", "journal_mode"], [94, 2, 1, "", "serialize_config"], [94, 2, 1, "", "synchronous"], [94, 2, 1, "", "table_name"]], "docarray.array.storage.sqlite.getsetdel": [[95, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.sqlite.getsetdel.GetSetDelMixin": [[95, 3, 1, "", "sync"]], "docarray.array.storage.sqlite.helper": [[96, 5, 1, "", "initialize_table"]], "docarray.array.storage.sqlite.seqlike": [[97, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin": [[97, 3, 1, "", "append"], [97, 3, 1, "", "clear"], [97, 3, 1, "", "count"], [97, 3, 1, "", "extend"], [97, 3, 1, "", "index"], [97, 3, 1, "", "insert"], [97, 3, 1, "", "pop"], [97, 3, 1, "", "remove"], [97, 3, 1, "", "reverse"]], "docarray.array.storage.weaviate": [[98, 1, 1, "", "StorageMixins"], [98, 1, 1, "", "WeaviateConfig"], [99, 0, 0, "-", "backend"], [100, 0, 0, "-", "find"], [101, 0, 0, "-", "getsetdel"], [102, 0, 0, "-", "seqlike"]], "docarray.array.storage.weaviate.StorageMixins": [[98, 2, 1, "", "TYPE_MAP"], [98, 3, 1, "", "append"], [98, 3, 1, "", "clear"], [98, 3, 1, "", "count"], [98, 3, 1, "", "extend"], [98, 3, 1, "", "index"], [98, 3, 1, "", "insert"], [98, 4, 1, "", "name"], [98, 3, 1, "", "pop"], [98, 3, 1, "", "remove"], [98, 3, 1, "", "reverse"], [98, 3, 1, "", "sync"]], "docarray.array.storage.weaviate.WeaviateConfig": [[98, 2, 1, "", "cleanup_interval_seconds"], [98, 2, 1, "", "columns"], [98, 2, 1, "", "distance"], [98, 2, 1, "", "dynamic_ef_factor"], [98, 2, 1, "", "dynamic_ef_max"], [98, 2, 1, "", "dynamic_ef_min"], [98, 2, 1, "", "ef"], [98, 2, 1, "", "ef_construction"], [98, 2, 1, "", "flat_search_cutoff"], [98, 2, 1, "", "host"], [98, 2, 1, "", "max_connections"], [98, 2, 1, "", "n_dim"], [98, 2, 1, "", "name"], [98, 2, 1, "", "port"], [98, 2, 1, "", "protocol"], [98, 2, 1, "", "serialize_config"], [98, 2, 1, "", "skip"], [98, 2, 1, "", "timeout_config"], [98, 2, 1, "", "vector_cache_max_objects"]], "docarray.array.storage.weaviate.backend": [[99, 1, 1, "", "BackendMixin"], [99, 1, 1, "", "WeaviateConfig"]], "docarray.array.storage.weaviate.backend.BackendMixin": [[99, 2, 1, "", "TYPE_MAP"], [99, 4, 1, "", "name"]], "docarray.array.storage.weaviate.backend.WeaviateConfig": [[99, 2, 1, "", "cleanup_interval_seconds"], [99, 2, 1, "", "columns"], [99, 2, 1, "", "distance"], [99, 2, 1, "", "dynamic_ef_factor"], [99, 2, 1, "", "dynamic_ef_max"], [99, 2, 1, "", "dynamic_ef_min"], [99, 2, 1, "", "ef"], [99, 2, 1, "", "ef_construction"], [99, 2, 1, "", "flat_search_cutoff"], [99, 2, 1, "", "host"], [99, 2, 1, "", "max_connections"], [99, 2, 1, "", "n_dim"], [99, 2, 1, "", "name"], [99, 2, 1, "", "port"], [99, 2, 1, "", "protocol"], [99, 2, 1, "", "serialize_config"], [99, 2, 1, "", "skip"], [99, 2, 1, "", "timeout_config"], [99, 2, 1, "", "vector_cache_max_objects"]], "docarray.array.storage.weaviate.find": [[100, 1, 1, "", "FindMixin"]], "docarray.array.storage.weaviate.getsetdel": [[101, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.weaviate.getsetdel.GetSetDelMixin": [[101, 3, 1, "", "sync"]], "docarray.array.storage.weaviate.seqlike": [[102, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin": [[102, 3, 1, "", "append"], [102, 3, 1, "", "clear"], [102, 3, 1, "", "count"], [102, 3, 1, "", "extend"], [102, 3, 1, "", "index"], [102, 3, 1, "", "insert"], [102, 3, 1, "", "pop"], [102, 3, 1, "", "remove"], [102, 3, 1, "", "reverse"]], "docarray.array.weaviate": [[103, 1, 1, "", "DocumentArrayWeaviate"], [103, 1, 1, "", "WeaviateConfig"]], "docarray.array.weaviate.DocumentArrayWeaviate": [[103, 2, 1, "", "TYPE_MAP"], [103, 3, 1, "", "append"], [103, 3, 1, "", "apply"], [103, 3, 1, "", "apply_batch"], [103, 3, 1, "", "batch"], [103, 3, 1, "", "batch_ids"], [103, 4, 1, "", "blobs"], [103, 3, 1, "", "clear"], [103, 3, 1, "", "cloud_delete"], [103, 3, 1, "", "cloud_list"], [103, 3, 1, "", "cloud_pull"], [103, 3, 1, "", "cloud_push"], [103, 4, 1, "", "contents"], [103, 3, 1, "", "count"], [103, 3, 1, "", "dataloader"], [103, 3, 1, "", "embed"], [103, 4, 1, "", "embeddings"], [103, 3, 1, "", "empty"], [103, 3, 1, "", "evaluate"], [103, 3, 1, "", "extend"], [103, 3, 1, "", "find"], [103, 3, 1, "", "flatten"], [103, 3, 1, "", "from_base64"], [103, 3, 1, "", "from_bytes"], [103, 3, 1, "", "from_csv"], [103, 3, 1, "", "from_dataframe"], [103, 3, 1, "", "from_dict"], [103, 3, 1, "", "from_files"], [103, 3, 1, "", "from_huggingface_datasets"], [103, 3, 1, "", "from_json"], [103, 3, 1, "", "from_lines"], [103, 3, 1, "", "from_list"], [103, 3, 1, "", "from_ndarray"], [103, 3, 1, "", "from_ndjson"], [103, 3, 1, "", "from_protobuf"], [103, 3, 1, "", "from_pydantic_model"], [103, 3, 1, "", "from_strawberry_type"], [103, 3, 1, "", "get_json_schema"], [103, 3, 1, "", "get_vocabulary"], [103, 3, 1, "", "index"], [103, 3, 1, "", "insert"], [103, 3, 1, "", "load"], [103, 3, 1, "", "load_binary"], [103, 3, 1, "", "load_csv"], [103, 3, 1, "", "load_json"], [103, 3, 1, "", "map"], [103, 3, 1, "", "map_batch"], [103, 3, 1, "", "match"], [103, 4, 1, "", "name"], [103, 3, 1, "", "plot_embeddings"], [103, 3, 1, "", "plot_image_sprites"], [103, 3, 1, "", "pop"], [103, 3, 1, "", "post"], [103, 3, 1, "", "pull"], [103, 3, 1, "", "push"], [103, 3, 1, "", "reduce"], [103, 3, 1, "", "reduce_all"], [103, 3, 1, "", "remove"], [103, 3, 1, "", "reverse"], [103, 3, 1, "", "sample"], [103, 3, 1, "", "save"], [103, 3, 1, "", "save_binary"], [103, 3, 1, "", "save_csv"], [103, 3, 1, "", "save_embeddings_csv"], [103, 3, 1, "", "save_gif"], [103, 3, 1, "", "save_json"], [103, 3, 1, "", "shuffle"], [103, 3, 1, "", "split_by_tag"], [103, 3, 1, "", "summary"], [103, 3, 1, "", "sync"], [103, 4, 1, "", "tensors"], [103, 4, 1, "", "texts"], [103, 3, 1, "", "to_base64"], [103, 3, 1, "", "to_bytes"], [103, 3, 1, "", "to_dataframe"], [103, 3, 1, "", "to_dict"], [103, 3, 1, "", "to_json"], [103, 3, 1, "", "to_list"], [103, 3, 1, "", "to_protobuf"], [103, 3, 1, "", "to_pydantic_model"], [103, 3, 1, "", "to_strawberry_type"], [103, 3, 1, "", "traverse"], [103, 3, 1, "", "traverse_flat"], [103, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.weaviate.WeaviateConfig": [[103, 2, 1, "", "cleanup_interval_seconds"], [103, 2, 1, "", "columns"], [103, 2, 1, "", "distance"], [103, 2, 1, "", "dynamic_ef_factor"], [103, 2, 1, "", "dynamic_ef_max"], [103, 2, 1, "", "dynamic_ef_min"], [103, 2, 1, "", "ef"], [103, 2, 1, "", "ef_construction"], [103, 2, 1, "", "flat_search_cutoff"], [103, 2, 1, "", "host"], [103, 2, 1, "", "max_connections"], [103, 2, 1, "", "n_dim"], [103, 2, 1, "", "name"], [103, 2, 1, "", "port"], [103, 2, 1, "", "protocol"], [103, 2, 1, "", "serialize_config"], [103, 2, 1, "", "skip"], [103, 2, 1, "", "timeout_config"], [103, 2, 1, "", "vector_cache_max_objects"]], "docarray.base": [[104, 1, 1, "", "BaseDCType"]], "docarray.base.BaseDCType": [[104, 3, 1, "", "clear"], [104, 3, 1, "", "copy_from"], [104, 4, 1, "", "nbytes"], [104, 4, 1, "", "non_empty_fields"], [104, 3, 1, "", "pop"]], "docarray.dataclasses": [[106, 0, 0, "-", "getter"], [107, 0, 0, "-", "setter"], [108, 0, 0, "-", "types"]], "docarray.dataclasses.getter": [[106, 5, 1, "", "audio_getter"], [106, 5, 1, "", "blob_getter"], [106, 5, 1, "", "image_getter"], [106, 5, 1, "", "json_getter"], [106, 5, 1, "", "mesh_getter"], [106, 5, 1, "", "tabular_getter"], [106, 5, 1, "", "text_getter"], [106, 5, 1, "", "uri_getter"], [106, 5, 1, "", "video_getter"]], "docarray.dataclasses.setter": [[107, 5, 1, "", "audio_setter"], [107, 5, 1, "", "blob_setter"], [107, 5, 1, "", "image_setter"], [107, 5, 1, "", "json_setter"], [107, 5, 1, "", "mesh_setter"], [107, 5, 1, "", "tabular_setter"], [107, 5, 1, "", "text_setter"], [107, 5, 1, "", "uri_setter"], [107, 5, 1, "", "video_setter"]], "docarray.dataclasses.types": [[108, 5, 1, "", "dataclass"], [108, 5, 1, "", "field"], [108, 5, 1, "", "is_multimodal"]], "docarray.document": [[109, 1, 1, "", "Document"], [110, 0, 0, "-", "data"], [111, 0, 0, "-", "generators"], [112, 0, 0, "-", "mixins"], [134, 0, 0, "-", "pydantic_model"]], "docarray.document.Document": [[109, 4, 1, "", "adjacency"], [109, 4, 1, "", "blob"], [109, 4, 1, "", "chunks"], [109, 3, 1, "", "clear"], [109, 4, 1, "", "content"], [109, 4, 1, "", "content_hash"], [109, 4, 1, "", "content_type"], [109, 3, 1, "", "convert_blob_to_datauri"], [109, 3, 1, "", "convert_blob_to_image_tensor"], [109, 3, 1, "", "convert_blob_to_tensor"], [109, 3, 1, "", "convert_content_to_datauri"], [109, 3, 1, "", "convert_image_tensor_to_blob"], [109, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [109, 3, 1, "", "convert_image_tensor_to_uri"], [109, 3, 1, "", "convert_tensor_to_blob"], [109, 3, 1, "", "convert_tensor_to_text"], [109, 3, 1, "", "convert_text_to_datauri"], [109, 3, 1, "", "convert_text_to_tensor"], [109, 3, 1, "", "convert_uri_to_datauri"], [109, 3, 1, "", "copy_from"], [109, 3, 1, "", "display"], [109, 3, 1, "", "display_tensor"], [109, 3, 1, "", "display_uri"], [109, 3, 1, "", "embed"], [109, 3, 1, "", "embed_feature_hashing"], [109, 4, 1, "", "embedding"], [109, 4, 1, "", "evaluations"], [109, 3, 1, "", "from_base64"], [109, 3, 1, "", "from_bytes"], [109, 3, 1, "", "from_dict"], [109, 3, 1, "", "from_json"], [109, 3, 1, "", "from_protobuf"], [109, 3, 1, "", "from_pydantic_model"], [109, 3, 1, "", "from_strawberry_type"], [109, 3, 1, "", "generator_from_webcam"], [109, 3, 1, "", "get_json_schema"], [109, 3, 1, "", "get_multi_modal_attribute"], [109, 3, 1, "", "get_vocabulary"], [109, 4, 1, "", "granularity"], [109, 4, 1, "", "id"], [109, 4, 1, "", "is_multimodal"], [109, 3, 1, "", "load_pil_image_to_datauri"], [109, 3, 1, "", "load_uri_to_audio_tensor"], [109, 3, 1, "", "load_uri_to_blob"], [109, 3, 1, "", "load_uri_to_image_tensor"], [109, 3, 1, "", "load_uri_to_point_cloud_tensor"], [109, 3, 1, "", "load_uri_to_text"], [109, 3, 1, "", "load_uri_to_video_tensor"], [109, 4, 1, "", "location"], [109, 3, 1, "", "match"], [109, 4, 1, "", "matches"], [109, 4, 1, "", "mime_type"], [109, 4, 1, "", "modality"], [109, 4, 1, "", "nbytes"], [109, 4, 1, "", "non_empty_fields"], [109, 4, 1, "", "offset"], [109, 4, 1, "", "parent_id"], [109, 3, 1, "", "plot_matches_sprites"], [109, 3, 1, "", "pop"], [109, 3, 1, "", "post"], [109, 3, 1, "", "save_audio_tensor_to_file"], [109, 3, 1, "", "save_blob_to_file"], [109, 3, 1, "", "save_image_tensor_to_file"], [109, 3, 1, "", "save_uri_to_file"], [109, 3, 1, "", "save_video_tensor_to_file"], [109, 4, 1, "", "scores"], [109, 3, 1, "", "set_image_tensor_channel_axis"], [109, 3, 1, "", "set_image_tensor_inv_normalization"], [109, 3, 1, "", "set_image_tensor_normalization"], [109, 3, 1, "", "set_image_tensor_resample"], [109, 3, 1, "", "set_image_tensor_shape"], [109, 3, 1, "", "set_multi_modal_attribute"], [109, 3, 1, "", "summary"], [109, 4, 1, "", "tags"], [109, 4, 1, "", "tensor"], [109, 4, 1, "", "text"], [109, 3, 1, "", "to_base64"], [109, 3, 1, "", "to_bytes"], [109, 3, 1, "", "to_dict"], [109, 3, 1, "", "to_json"], [109, 3, 1, "", "to_protobuf"], [109, 3, 1, "", "to_pydantic_model"], [109, 3, 1, "", "to_strawberry_type"], [109, 4, 1, "", "uri"], [109, 4, 1, "", "weight"]], "docarray.document.data": [[110, 1, 1, "", "DocumentData"]], "docarray.document.data.DocumentData": [[110, 2, 1, "", "adjacency"], [110, 2, 1, "", "blob"], [110, 2, 1, "", "chunks"], [110, 2, 1, "", "content"], [110, 2, 1, "", "embedding"], [110, 2, 1, "", "evaluations"], [110, 2, 1, "", "granularity"], [110, 2, 1, "", "id"], [110, 2, 1, "", "location"], [110, 2, 1, "", "matches"], [110, 2, 1, "", "mime_type"], [110, 2, 1, "", "modality"], [110, 2, 1, "", "offset"], [110, 2, 1, "", "parent_id"], [110, 2, 1, "", "scores"], [110, 2, 1, "", "tags"], [110, 2, 1, "", "tensor"], [110, 2, 1, "", "text"], [110, 2, 1, "", "uri"], [110, 2, 1, "", "weight"]], "docarray.document.generators": [[111, 5, 1, "", "from_csv"], [111, 5, 1, "", "from_files"], [111, 5, 1, "", "from_huggingface_datasets"], [111, 5, 1, "", "from_lines"], [111, 5, 1, "", "from_ndarray"], [111, 5, 1, "", "from_ndjson"]], "docarray.document.mixins": [[112, 1, 1, "", "AllMixins"], [113, 0, 0, "-", "attribute"], [114, 0, 0, "-", "audio"], [115, 0, 0, "-", "blob"], [116, 0, 0, "-", "content"], [117, 0, 0, "-", "convert"], [118, 0, 0, "-", "dump"], [119, 0, 0, "-", "featurehash"], [120, 0, 0, "-", "helper"], [121, 0, 0, "-", "image"], [122, 0, 0, "-", "mesh"], [123, 0, 0, "-", "multimodal"], [124, 0, 0, "-", "plot"], [125, 0, 0, "-", "porting"], [126, 0, 0, "-", "property"], [127, 0, 0, "-", "protobuf"], [128, 0, 0, "-", "pydantic"], [129, 0, 0, "-", "rich_embedding"], [130, 0, 0, "-", "strawberry"], [131, 0, 0, "-", "sugar"], [132, 0, 0, "-", "text"], [133, 0, 0, "-", "video"]], "docarray.document.mixins.AllMixins": [[112, 4, 1, "", "adjacency"], [112, 4, 1, "", "blob"], [112, 4, 1, "", "chunks"], [112, 4, 1, "", "content"], [112, 4, 1, "", "content_hash"], [112, 4, 1, "", "content_type"], [112, 3, 1, "", "convert_blob_to_datauri"], [112, 3, 1, "", "convert_blob_to_image_tensor"], [112, 3, 1, "", "convert_blob_to_tensor"], [112, 3, 1, "", "convert_content_to_datauri"], [112, 3, 1, "", "convert_image_tensor_to_blob"], [112, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [112, 3, 1, "", "convert_image_tensor_to_uri"], [112, 3, 1, "", "convert_tensor_to_blob"], [112, 3, 1, "", "convert_tensor_to_text"], [112, 3, 1, "", "convert_text_to_datauri"], [112, 3, 1, "", "convert_text_to_tensor"], [112, 3, 1, "", "convert_uri_to_datauri"], [112, 3, 1, "", "display"], [112, 3, 1, "", "display_tensor"], [112, 3, 1, "", "display_uri"], [112, 3, 1, "", "embed"], [112, 3, 1, "", "embed_feature_hashing"], [112, 4, 1, "", "embedding"], [112, 4, 1, "", "evaluations"], [112, 3, 1, "", "from_base64"], [112, 3, 1, "", "from_bytes"], [112, 3, 1, "", "from_dict"], [112, 3, 1, "", "from_json"], [112, 3, 1, "", "from_protobuf"], [112, 3, 1, "", "from_pydantic_model"], [112, 3, 1, "", "from_strawberry_type"], [112, 3, 1, "", "generator_from_webcam"], [112, 3, 1, "", "get_json_schema"], [112, 3, 1, "", "get_multi_modal_attribute"], [112, 3, 1, "", "get_vocabulary"], [112, 4, 1, "", "granularity"], [112, 4, 1, "", "id"], [112, 4, 1, "", "is_multimodal"], [112, 3, 1, "", "load_pil_image_to_datauri"], [112, 3, 1, "", "load_uri_to_audio_tensor"], [112, 3, 1, "", "load_uri_to_blob"], [112, 3, 1, "", "load_uri_to_image_tensor"], [112, 3, 1, "", "load_uri_to_point_cloud_tensor"], [112, 3, 1, "", "load_uri_to_text"], [112, 3, 1, "", "load_uri_to_video_tensor"], [112, 4, 1, "", "location"], [112, 3, 1, "", "match"], [112, 4, 1, "", "matches"], [112, 4, 1, "", "mime_type"], [112, 4, 1, "", "modality"], [112, 4, 1, "", "offset"], [112, 4, 1, "", "parent_id"], [112, 3, 1, "", "plot_matches_sprites"], [112, 3, 1, "", "post"], [112, 3, 1, "", "save_audio_tensor_to_file"], [112, 3, 1, "", "save_blob_to_file"], [112, 3, 1, "", "save_image_tensor_to_file"], [112, 3, 1, "", "save_uri_to_file"], [112, 3, 1, "", "save_video_tensor_to_file"], [112, 4, 1, "", "scores"], [112, 3, 1, "", "set_image_tensor_channel_axis"], [112, 3, 1, "", "set_image_tensor_inv_normalization"], [112, 3, 1, "", "set_image_tensor_normalization"], [112, 3, 1, "", "set_image_tensor_resample"], [112, 3, 1, "", "set_image_tensor_shape"], [112, 3, 1, "", "set_multi_modal_attribute"], [112, 3, 1, "", "summary"], [112, 4, 1, "", "tags"], [112, 4, 1, "", "tensor"], [112, 4, 1, "", "text"], [112, 3, 1, "", "to_base64"], [112, 3, 1, "", "to_bytes"], [112, 3, 1, "", "to_dict"], [112, 3, 1, "", "to_json"], [112, 3, 1, "", "to_protobuf"], [112, 3, 1, "", "to_pydantic_model"], [112, 3, 1, "", "to_strawberry_type"], [112, 4, 1, "", "uri"], [112, 4, 1, "", "weight"]], "docarray.document.mixins.attribute": [[113, 1, 1, "", "GetAttributesMixin"]], "docarray.document.mixins.audio": [[114, 1, 1, "", "AudioDataMixin"]], "docarray.document.mixins.audio.AudioDataMixin": [[114, 3, 1, "", "load_uri_to_audio_tensor"], [114, 3, 1, "", "save_audio_tensor_to_file"]], "docarray.document.mixins.blob": [[115, 1, 1, "", "BlobDataMixin"]], "docarray.document.mixins.blob.BlobDataMixin": [[115, 3, 1, "", "convert_blob_to_datauri"], [115, 3, 1, "", "load_uri_to_blob"], [115, 3, 1, "", "save_blob_to_file"]], "docarray.document.mixins.content": [[116, 1, 1, "", "ContentPropertyMixin"]], "docarray.document.mixins.content.ContentPropertyMixin": [[116, 4, 1, "", "content_hash"], [116, 3, 1, "", "convert_content_to_datauri"]], "docarray.document.mixins.convert": [[117, 1, 1, "", "ConvertMixin"]], "docarray.document.mixins.convert.ConvertMixin": [[117, 3, 1, "", "convert_blob_to_tensor"], [117, 3, 1, "", "convert_tensor_to_blob"], [117, 3, 1, "", "convert_uri_to_datauri"]], "docarray.document.mixins.dump": [[118, 1, 1, "", "UriFileMixin"]], "docarray.document.mixins.dump.UriFileMixin": [[118, 3, 1, "", "save_uri_to_file"]], "docarray.document.mixins.featurehash": [[119, 1, 1, "", "FeatureHashMixin"]], "docarray.document.mixins.featurehash.FeatureHashMixin": [[119, 3, 1, "", "embed_feature_hashing"]], "docarray.document.mixins.image": [[121, 1, 1, "", "ImageDataMixin"]], "docarray.document.mixins.image.ImageDataMixin": [[121, 3, 1, "", "convert_blob_to_image_tensor"], [121, 3, 1, "", "convert_image_tensor_to_blob"], [121, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [121, 3, 1, "", "convert_image_tensor_to_uri"], [121, 3, 1, "", "load_pil_image_to_datauri"], [121, 3, 1, "", "load_uri_to_image_tensor"], [121, 3, 1, "", "save_image_tensor_to_file"], [121, 3, 1, "", "set_image_tensor_channel_axis"], [121, 3, 1, "", "set_image_tensor_inv_normalization"], [121, 3, 1, "", "set_image_tensor_normalization"], [121, 3, 1, "", "set_image_tensor_resample"], [121, 3, 1, "", "set_image_tensor_shape"]], "docarray.document.mixins.mesh": [[122, 1, 1, "", "MeshDataMixin"]], "docarray.document.mixins.mesh.MeshDataMixin": [[122, 3, 1, "", "load_uri_to_point_cloud_tensor"]], "docarray.document.mixins.multimodal": [[123, 1, 1, "", "MultiModalMixin"]], "docarray.document.mixins.multimodal.MultiModalMixin": [[123, 3, 1, "", "get_multi_modal_attribute"], [123, 4, 1, "", "is_multimodal"], [123, 3, 1, "", "set_multi_modal_attribute"]], "docarray.document.mixins.plot": [[124, 1, 1, "", "PlotMixin"]], "docarray.document.mixins.plot.PlotMixin": [[124, 3, 1, "", "display"], [124, 3, 1, "", "display_tensor"], [124, 3, 1, "", "display_uri"], [124, 3, 1, "", "plot_matches_sprites"], [124, 3, 1, "", "summary"]], "docarray.document.mixins.porting": [[125, 1, 1, "", "PortingMixin"]], "docarray.document.mixins.porting.PortingMixin": [[125, 3, 1, "", "from_base64"], [125, 3, 1, "", "from_bytes"], [125, 3, 1, "", "from_dict"], [125, 3, 1, "", "from_json"], [125, 3, 1, "", "to_base64"], [125, 3, 1, "", "to_bytes"], [125, 3, 1, "", "to_dict"], [125, 3, 1, "", "to_json"]], "docarray.document.mixins.property": [[126, 1, 1, "", "PropertyMixin"]], "docarray.document.mixins.property.PropertyMixin": [[126, 4, 1, "", "adjacency"], [126, 4, 1, "", "blob"], [126, 4, 1, "", "chunks"], [126, 4, 1, "", "content"], [126, 4, 1, "", "content_type"], [126, 4, 1, "", "embedding"], [126, 4, 1, "", "evaluations"], [126, 4, 1, "", "granularity"], [126, 4, 1, "", "id"], [126, 4, 1, "", "location"], [126, 4, 1, "", "matches"], [126, 4, 1, "", "mime_type"], [126, 4, 1, "", "modality"], [126, 4, 1, "", "offset"], [126, 4, 1, "", "parent_id"], [126, 4, 1, "", "scores"], [126, 4, 1, "", "tags"], [126, 4, 1, "", "tensor"], [126, 4, 1, "", "text"], [126, 4, 1, "", "uri"], [126, 4, 1, "", "weight"]], "docarray.document.mixins.protobuf": [[127, 1, 1, "", "ProtobufMixin"]], "docarray.document.mixins.protobuf.ProtobufMixin": [[127, 3, 1, "", "from_protobuf"], [127, 3, 1, "", "to_protobuf"]], "docarray.document.mixins.pydantic": [[128, 1, 1, "", "PydanticMixin"]], "docarray.document.mixins.pydantic.PydanticMixin": [[128, 3, 1, "", "from_pydantic_model"], [128, 3, 1, "", "get_json_schema"], [128, 3, 1, "", "to_pydantic_model"]], "docarray.document.mixins.rich_embedding": [[129, 1, 1, "", "ColorBoxEmbedding"]], "docarray.document.mixins.strawberry": [[130, 1, 1, "", "StrawberryMixin"]], "docarray.document.mixins.strawberry.StrawberryMixin": [[130, 3, 1, "", "from_strawberry_type"], [130, 3, 1, "", "to_strawberry_type"]], "docarray.document.mixins.sugar": [[131, 1, 1, "", "SingletonSugarMixin"]], "docarray.document.mixins.sugar.SingletonSugarMixin": [[131, 3, 1, "", "embed"], [131, 3, 1, "", "match"], [131, 3, 1, "", "post"]], "docarray.document.mixins.text": [[132, 1, 1, "", "TextDataMixin"]], "docarray.document.mixins.text.TextDataMixin": [[132, 3, 1, "", "convert_tensor_to_text"], [132, 3, 1, "", "convert_text_to_datauri"], [132, 3, 1, "", "convert_text_to_tensor"], [132, 3, 1, "", "get_vocabulary"], [132, 3, 1, "", "load_uri_to_text"]], "docarray.document.mixins.video": [[133, 1, 1, "", "VideoDataMixin"]], "docarray.document.mixins.video.VideoDataMixin": [[133, 3, 1, "", "generator_from_webcam"], [133, 3, 1, "", "load_uri_to_video_tensor"], [133, 3, 1, "", "save_video_tensor_to_file"]], "docarray.document.pydantic_model": [[134, 1, 1, "", "PydanticDocument"]], "docarray.document.pydantic_model.PydanticDocument": [[134, 1, 1, "", "Config"], [134, 2, 1, "", "adjacency"], [134, 2, 1, "", "blob"], [134, 2, 1, "", "chunks"], [134, 3, 1, "", "construct"], [134, 3, 1, "", "copy"], [134, 3, 1, "", "dict"], [134, 2, 1, "", "embedding"], [134, 2, 1, "", "evaluations"], [134, 3, 1, "", "from_orm"], [134, 2, 1, "", "granularity"], [134, 2, 1, "", "id"], [134, 3, 1, "", "json"], [134, 2, 1, "", "location"], [134, 2, 1, "", "matches"], [134, 2, 1, "", "mime_type"], [134, 2, 1, "", "modality"], [134, 2, 1, "", "offset"], [134, 2, 1, "", "parent_id"], [134, 3, 1, "", "parse_file"], [134, 3, 1, "", "parse_obj"], [134, 3, 1, "", "parse_raw"], [134, 3, 1, "", "schema"], [134, 3, 1, "", "schema_json"], [134, 2, 1, "", "scores"], [134, 2, 1, "", "tags"], [134, 2, 1, "", "tensor"], [134, 2, 1, "", "text"], [134, 3, 1, "", "update_forward_refs"], [134, 2, 1, "", "uri"], [134, 3, 1, "", "validate"], [134, 2, 1, "", "weight"]], "docarray.document.pydantic_model.PydanticDocument.Config": [[134, 2, 1, "", "smart_union"]], "docarray.helper": [[136, 5, 1, "", "add_protocol_and_compress_to_file_path"], [136, 1, 1, "", "cached_property"], [136, 5, 1, "", "compress_bytes"], [136, 5, 1, "", "dataclass_from_dict"], [136, 5, 1, "", "decompress_bytes"], [136, 5, 1, "", "deprecate_by"], [136, 5, 1, "", "download_mermaid_url"], [136, 5, 1, "", "dunder_get"], [136, 5, 1, "", "filter_dict"], [136, 5, 1, "", "get_ci_vendor"], [136, 5, 1, "", "get_compress_ctx"], [136, 5, 1, "", "get_full_version"], [136, 5, 1, "", "get_request_header"], [136, 5, 1, "", "protocol_and_compress_from_file_path"], [136, 5, 1, "", "random_identity"], [136, 5, 1, "", "random_port"], [136, 5, 1, "", "random_uuid"], [136, 5, 1, "", "reset_ports"], [136, 5, 1, "", "typename"]], "docarray.math": [[138, 0, 0, "-", "distance"], [143, 0, 0, "-", "evaluation"], [144, 0, 0, "-", "helper"], [145, 0, 0, "-", "ndarray"]], "docarray.math.distance": [[138, 5, 1, "", "cdist"], [139, 0, 0, "-", "numpy"], [138, 5, 1, "", "pdist"], [141, 0, 0, "-", "tensorflow"], [142, 0, 0, "-", "torch"]], "docarray.math.distance.numpy": [[139, 5, 1, "", "cosine"], [139, 5, 1, "", "euclidean"], [139, 5, 1, "", "sparse_cosine"], [139, 5, 1, "", "sparse_euclidean"], [139, 5, 1, "", "sparse_sqeuclidean"], [139, 5, 1, "", "sqeuclidean"]], "docarray.math.distance.tensorflow": [[141, 5, 1, "", "cosine"], [141, 5, 1, "", "euclidean"], [141, 5, 1, "", "sqeuclidean"]], "docarray.math.distance.torch": [[142, 5, 1, "", "cosine"], [142, 5, 1, "", "euclidean"], [142, 5, 1, "", "sqeuclidean"]], "docarray.math.evaluation": [[143, 5, 1, "", "average_precision"], [143, 5, 1, "", "dcg_at_k"], [143, 5, 1, "", "f1_score_at_k"], [143, 5, 1, "", "hit_at_k"], [143, 5, 1, "", "ndcg_at_k"], [143, 5, 1, "", "precision_at_k"], [143, 5, 1, "", "r_precision"], [143, 5, 1, "", "recall_at_k"], [143, 5, 1, "", "reciprocal_rank"]], "docarray.math.helper": [[144, 5, 1, "", "minmax_normalize"], [144, 5, 1, "", "top_k"], [144, 5, 1, "", "update_rows_x_mat_best"]], "docarray.math.ndarray": [[145, 5, 1, "", "check_arraylike_equality"], [145, 5, 1, "", "detach_tensor_if_present"], [145, 5, 1, "", "get_array_rows"], [145, 5, 1, "", "get_array_type"], [145, 5, 1, "", "ravel"], [145, 5, 1, "", "to_list"], [145, 5, 1, "", "to_numpy_array"], [145, 5, 1, "", "unravel"]], "docarray.proto": [[147, 0, 0, "-", "docarray_pb2"], [148, 0, 0, "-", "io"], [150, 0, 0, "-", "pb"], [152, 0, 0, "-", "pb2"]], "docarray.proto.io": [[148, 5, 1, "", "flush_proto"], [149, 0, 0, "-", "ndarray"], [148, 5, 1, "", "parse_proto"]], "docarray.proto.io.ndarray": [[149, 5, 1, "", "flush_ndarray"], [149, 5, 1, "", "read_ndarray"]], "docarray.proto.pb": [[151, 0, 0, "-", "docarray_pb2"]], "docarray.proto.pb2": [[153, 0, 0, "-", "docarray_pb2"]], "docarray.score": [[154, 1, 1, "", "NamedScore"], [155, 0, 0, "-", "data"], [156, 0, 0, "-", "mixins"]], "docarray.score.NamedScore": [[154, 3, 1, "", "clear"], [154, 3, 1, "", "copy_from"], [154, 4, 1, "", "description"], [154, 4, 1, "", "nbytes"], [154, 4, 1, "", "non_empty_fields"], [154, 4, 1, "", "op_name"], [154, 3, 1, "", "pop"], [154, 4, 1, "", "ref_id"], [154, 3, 1, "", "to_dict"], [154, 4, 1, "", "value"]], "docarray.score.data": [[155, 1, 1, "", "NamedScoreData"]], "docarray.score.data.NamedScoreData": [[155, 2, 1, "", "description"], [155, 2, 1, "", "op_name"], [155, 2, 1, "", "ref_id"], [155, 2, 1, "", "value"]], "docarray.score.mixins": [[156, 1, 1, "", "AllMixins"], [157, 0, 0, "-", "property"], [158, 0, 0, "-", "representer"]], "docarray.score.mixins.AllMixins": [[156, 4, 1, "", "description"], [156, 4, 1, "", "op_name"], [156, 4, 1, "", "ref_id"], [156, 3, 1, "", "to_dict"], [156, 4, 1, "", "value"]], "docarray.score.mixins.property": [[157, 1, 1, "", "PropertyMixin"]], "docarray.score.mixins.property.PropertyMixin": [[157, 4, 1, "", "description"], [157, 4, 1, "", "op_name"], [157, 4, 1, "", "ref_id"], [157, 4, 1, "", "value"]], "docarray.score.mixins.representer": [[158, 1, 1, "", "RepresentMixin"]], "docarray.score.mixins.representer.RepresentMixin": [[158, 3, 1, "", "to_dict"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:function", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"annlit": [0, 14, 60, 61, 62, 63, 64, 65], "usag": [0, 2, 5, 6, 7, 8], "config": [0, 2, 4, 5, 7, 8, 171], "vector": [0, 2, 4, 5, 6, 8], "search": [0, 1, 2, 4, 5, 6, 166, 168, 194], "filter": [0, 2, 4, 5, 6, 8, 188], "exampl": [0, 4, 5, 8, 9, 162, 190], "find": [0, 3, 5, 8, 29, 62, 73, 78, 83, 89, 100, 166, 177, 190], "onli": [0, 8], "queri": [0, 2, 6, 8, 188, 190], "One": 1, "million": 1, "scale": [1, 197], "benchmark": 1, "result": [1, 8, 196], "setup": 1, "set": [1, 8], "nearest": [1, 177, 190], "neighbour": [1, 177, 190], "rational": 1, "experi": 1, "design": [1, 200], "incomplet": 1, "store": [1, 3, 4, 11], "conclus": 1, "elasticsearch": 2, "start": [2, 5, 6, 8], "elast": [2, 18, 71, 72, 73, 74, 75], "servic": [2, 5, 6, 8, 172, 197], "creat": [2, 3, 4, 5, 6, 8, 169, 174], "documentarrai": [2, 3, 4, 5, 6, 8, 11, 161, 170, 177, 185, 189, 196, 198], "backend": [2, 3, 4, 5, 6, 8, 61, 67, 72, 77, 82, 88, 94, 99, 161, 191], "secur": 2, "connect": 2, "bulk": 2, "request": [2, 3], "custom": 2, "note": [2, 6], "text": [2, 6, 51, 132, 168, 172], "field": [2, 6, 161, 170, 171, 196], "tag": [2, 6, 184], "add": [3, 161], "new": [3, 174], "document": [3, 4, 11, 17, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 161, 166, 168, 169, 170, 171, 176, 177, 179, 184, 185, 187, 196, 198, 202, 203], "step": 3, "1": [3, 162, 163, 165, 166, 167, 168, 169], "folder": 3, "2": [3, 161, 162, 163, 165, 166, 168, 169], "implement": 3, "getsetdel": [3, 63, 68, 74, 79, 84, 90, 95, 101], "py": 3, "3": [3, 161, 162, 163, 165, 166, 168, 169], "seqlik": [3, 65, 70, 75, 80, 86, 91, 97, 102], "4": [3, 161, 162, 163, 165, 166, 168, 169], "5": [3, 161, 162, 163, 165, 166, 167, 168, 169], "6": [3, 162, 163, 166, 167, 169], "summar": 3, "everyth": 3, "__init__": 3, "7": [3, 162, 165, 166, 168, 169], "subclass": 3, "from": [3, 169, 171, 175, 176, 181, 185, 193], "8": [3, 162, 165, 166, 168, 169], "entrypoint": 3, "On": [3, 177, 199], "pull": 3, "test": 3, "type": [3, 108, 159, 166, 170, 174, 190, 202, 203], "hint": 3, "construct": [4, 171, 176, 185, 194], "subindic": [4, 166, 194], "without": 4, "specifi": 4, "index": [4, 6, 184], "featur": [4, 168], "summari": [4, 195, 197], "persist": 4, "mutat": 4, "context": 4, "manag": 4, "known": 4, "limit": [4, 196], "multipl": [4, 170, 177, 185, 188], "refer": 4, "same": 4, "storag": [4, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 161], "out": [4, 197], "arrai": [4, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 185], "modif": 4, "element": [4, 185], "access": [4, 166, 170, 175, 183, 184], "i": [4, 173, 190, 200], "slower": 4, "qdrant": [5, 53, 81, 82, 83, 84, 85, 86], "minimum": [5, 8], "redi": [6, 57, 87, 88, 89, 90, 91], "configur": 6, "updat": 6, "schema": [6, 196], "sqlite": [7, 58, 93, 94, 95, 96, 97], "weaviat": [8, 98, 99, 100, 101, 102, 103], "sort": 8, "certainti": 8, "includ": 8, "addit": 8, "properti": [8, 126, 157], "return": [8, 170, 190, 196], "graphql": 9, "basic": [9, 184], "integr": 9, "fastapi": [9, 196], "pytorch": 10, "deep": [10, 185], "learn": 10, "framework": 10, "load": [10, 162, 163, 167, 169, 175], "map": 10, "batch": [10, 184], "one": 10, "shot": 10, "python": [11, 199], "api": [11, 161], "docarrai": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 196, 199, 200, 201, 202, 203], "dataclass": [11, 105, 106, 107, 108, 161, 166, 170, 171, 173], "packag": [12, 13, 21, 23, 33, 54, 59, 60, 66, 71, 76, 81, 87, 93, 98, 105, 109, 112, 137, 138, 146, 148, 150, 152, 154, 156, 159, 165, 197], "subpackag": [12, 13, 21, 59, 109, 137, 146, 154], "submodul": [12, 13, 21, 23, 33, 54, 59, 60, 66, 71, 76, 81, 87, 93, 98, 105, 109, 112, 137, 138, 146, 148, 150, 152, 154, 156], "modul": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159], "content": [12, 13, 21, 22, 23, 33, 54, 59, 60, 66, 71, 76, 81, 87, 93, 98, 105, 109, 112, 116, 137, 138, 146, 148, 150, 152, 154, 156, 159, 161, 175, 183, 198, 202, 203], "base": [15, 66, 67, 68, 69, 70, 104], "chunk": [16, 168], "match": [19, 42, 168, 187, 190, 195], "memori": [20, 76, 77, 78, 79, 80], "mixin": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 156, 157, 158], "dataload": [23, 24], "helper": [24, 64, 69, 85, 96, 120, 136, 144, 184], "delitem": 25, "emb": [26, 166, 172, 186], "empti": [27, 176, 185], "evalu": [28, 143, 187], "getattr": 30, "getitem": 31, "group": 32, "io": [33, 34, 35, 36, 37, 38, 39, 40, 41, 148, 149], "binari": [34, 193], "common": 35, "csv": [36, 167], "datafram": [37, 193], "from_gen": 38, "json": [39, 161, 181, 193, 196], "pbar": 40, "pushpul": 41, "parallel": [43, 191], "plot": [44, 124, 195], "post": 45, "pydant": [46, 128, 178, 196], "reduc": 47, "sampl": [48, 184], "setitem": 49, "strawberri": [50, 130, 178], "travers": 52, "queryset": [54, 55, 56], "lookup": 55, "parser": 56, "registri": 92, "getter": 106, "setter": 107, "data": [110, 155, 162, 163, 164, 166, 169, 175], "gener": [111, 166], "attribut": [113, 175, 176, 183], "audio": [114, 162], "blob": 115, "convert": [117, 168, 175, 178, 196], "dump": 118, "featurehash": [119, 178], "imag": [121, 163, 172, 195, 198], "mesh": [122, 165], "multimod": [123, 164], "port": [125, 178], "protobuf": [127, 178, 181, 193, 203], "rich_embed": 129, "sugar": 131, "video": [133, 169], "pydantic_model": 134, "strawberry_typ": 135, "math": [137, 138, 139, 140, 141, 142, 143, 144, 145], "distanc": [138, 139, 140, 141, 142], "numpi": 139, "paddl": 140, "tensorflow": 141, "torch": 142, "ndarrai": [145, 149, 168, 183], "proto": [146, 147, 148, 149, 150, 151, 152, 153, 202, 203], "docarray_pb2": [147, 151, 153], "pb": [150, 151], "pb2": [152, 153], "score": [154, 155, 156, 157, 158], "represent": 158, "changelog": 161, "0": [161, 162, 163, 165, 166, 167, 168, 169], "11": [161, 162, 163, 168, 169], "chang": 161, "documentarrayinmemori": 161, "": [161, 171, 173, 176, 179, 180, 181, 184, 185, 189], "contain": 161, "list": [161, 166, 170, 185, 193], "10": [161, 162, 163], "high": 161, "level": [161, 168, 170], "serial": [161, 181, 193], "format": [161, 193], "default": 161, "dict": [161, 181], "strategi": 161, "name": 161, "svg": [162, 163, 165, 166, 167, 168, 169], "version": [162, 163, 165, 166, 167, 168, 169], "width": [162, 163, 165, 166, 167, 168, 169], "0em": [162, 163, 165, 166, 167, 168, 169], "height": [162, 163, 165, 166, 167, 168, 169], "class": [162, 163, 165, 166, 167, 168, 169, 171], "sd": [162, 163, 165, 166, 167, 168, 169], "octicon": [162, 163, 165, 166, 167, 168, 169], "unmut": 162, "viewbox": [162, 163, 165, 166, 167, 168, 169], "16": [162, 163, 165, 166, 167, 168, 169], "aria": [162, 163, 165, 166, 167, 168, 169], "hidden": [162, 163, 165, 166, 167, 168, 169], "true": [162, 163, 165, 166, 167, 168, 169], "path": [162, 163, 165, 166, 167, 168, 169], "fill": [162, 163, 165, 166, 167, 168, 169, 177], "rule": [162, 163, 165, 166, 167, 168, 169, 176], "evenodd": [162, 163, 165, 166, 167, 168, 169], "d": [162, 163, 165, 166, 167, 168, 169], "m7": [162, 166], "563": 162, "069a": 162, "75": [162, 163, 165, 166, 167, 168, 169], "018": 162, "75v10": [162, 163], "5a": [162, 163, 166, 169], "01": [162, 163, 165, 166, 167, 168], "238": 162, "57l3": 162, "472": 162, "11h1": 162, "75a1": [162, 163, 167, 169], "010": [162, 166, 167], "9": [162, 168], "25v": [162, 169], "5c0": [162, 163, 169], "784": [162, 163, 167, 169], "5h1": [162, 167, 168], "723l3": 162, "289": 162, "82a": 162, "801": 162, "111zm6": 162, "38l4": 162, "319a": 162, "488": [162, 168], "181h": 162, "2a": [162, 169], "25": [162, 163, 165, 166, 167, 169], "00": [162, 163, 165, 166, 167, 168, 169], "25v2": [162, 163], "138": [162, 163, 167, 169], "112": [162, 163, 167, 169], "25h2a": 162, "18l6": 162, "62v4": 162, "38zm6": 162, "096": 162, "038a": 162, "011": [162, 163, 166], "06": 162, "314": 162, "000": [162, 163, 169], "193": 162, "06v": 162, "001zm": 162, "121a": 162, "061": 162, "95": 162, "101": [162, 168], "07l": 162, "001": [162, 165, 168], "001z": 162, "wav": 162, "file": [162, 167, 169, 185], "save": [162, 167, 169], "other": [162, 184], "tool": 162, "librari": 162, "m1": 163, "25v10": 163, "25h": [163, 169], "94a": 163, "76": 163, "03": 163, "03l6": 163, "077": 163, "078a1": 163, "012": 163, "412": [163, 168], "06l14": 163, "31v2": 163, "75a": [163, 167, 169], "25h1": 163, "75zm12": 163, "11h4": 163, "81l5": 163, "048": 163, "047a": 163, "344": 163, "009l4": 163, "298": 163, "889v": 163, "917a": 163, "25zm1": 163, "0014": 163, "1h1": 163, "14": [163, 167], "216": [163, 167, 168, 169], "15": 163, "15h12": 163, "5a1": [163, 169], "0016": [163, 169], "13": [163, 168, 169], "25zm5": 163, "6a": 163, "0zm7": 163, "6a2": 163, "014": 163, "0z": 163, "simpl": [163, 168], "process": [163, 172, 191, 192], "displai": [163, 198], "sprite": [163, 195, 198], "segment": [163, 168], "larg": [163, 193], "complic": 163, "small": 163, "ones": 163, "m8": 165, "878": [165, 166], "392a1": [165, 166], "756": [165, 166], "0l": [165, 166], "045a1": 165, "951v6": 165, "098c0": 165, "624": 165, "332": [165, 168], "872": 165, "514l5": 165, "0l5": [165, 166], "045c": 165, "54": [165, 168], "313": 165, "89": 165, "514v4": 165, "951c0": 165, "514l8": 165, "392zm7": 165, "875": 165, "69a": [165, 166], "0l4": [165, 166], "63": [165, 166, 168], "685l8": 165, "133": 165, "245": 165, "375l4": 165, "685zm2": 165, "677v5": 165, "372c0": 165, "09": 165, "047": 165, "171": 165, "125": [165, 166], "216l4": 165, "625": 165, "683v8": 165, "432l2": 165, "677zm6": 165, "271l4": 165, "683a": 165, "216v5": 165, "677l8": 165, "432v5": 165, "516z": 165, "3d": 165, "point": 165, "cloud": [165, 193], "stack": 166, "122": 166, "003": 166, "902c": 166, "83": 166, "481": 166, "68": 166, "162l8": 166, "358a1": 166, "0l2": 166, "119": 166, "456a1": 166, "162l7": 166, "392zm8": 166, "685": 166, "685a": 166, "685zm1": 166, "601": 166, "789a": 166, "025": 166, "273l5": 166, "249": [166, 168], "044a": 166, "752": 166, "298l": 166, "248": 166, "044a1": 166, "0l1": 166, "874": 166, "814a": 166, "789zm0": 166, "273": 166, "025z": 166, "multi": [166, 168, 173], "modal": [166, 168, 170, 172, 173, 174], "model": [166, 196], "your": 166, "instanti": 166, "nest": [166, 170, 176, 180, 183, 184, 194], "embed": [166, 177, 183, 195, 198], "each": 166, "parent": 166, "perform": 166, "combin": [166, 188], "tabl": [167, 195, 202, 203], "m0": 167, "75c0": 167, "0h12": 167, "5c15": 167, "75v3": 167, "585a": 167, "746": 167, "83v8": 167, "085a1": 167, "0114": 167, "16h6": 167, "309a": 167, "748": 167, "118": 167, "0h1": 167, "25v6": [167, 169], "165a": 167, "83v1": 167, "75zm1": 167, "5v7": 167, "25h5v": 167, "8h1": 167, "5zm5": 167, "5v1": 167, "25h5v5zm1": 167, "5v8h7": 167, "5h": 167, "8zm8": 167, "8v1": 167, "5h7": 167, "25v5z": 167, "typographi": 168, "m6": 168, "21": 168, "5l4": 168, "574": 168, "594": 168, "857": 168, "5h6": 168, "21zm": 168, "5l": 168, "829": 168, "487a": 168, "423": 168, "474l5": 168, "735": 168, "332a1": 168, "302": 168, "018l": 168, "39": 168, "688a": 168, "415": 168, "496l2": 168, "10h6": 168, "71zm3": 168, "358c10": 168, "53": 168, "374": 168, "87": 168, "4c1": 168, "939": 168, "601v5": 168, "649a": 168, "448": 168, "275c13": 168, "995": 168, "12": [168, 169], "82": 168, "13c": 168, "77": 168, "514": 168, "231": 168, "078": 168, "709": 168, "577": 168, "922": 168, "199": 168, "041": 168, "694": 168, "265": 168, "411": 168, "887": 168, "944c11": 168, "78": 168, "88": 168, "5v": 168, "899c0": 168, "869": 168, "528": 168, "282": 168, "84": 168, "858a": 168, "32": 168, "716zm14": 168, "9h13c": 168, "881": 168, "375": 168, "22": 168, "637": 168, "444": 168, "253": 168, "217": 168, "363": 168, "806": 168, "408": 168, "155": 168, "697": 168, "896": 168, "354": 168, "732": 168, "26": 168, "209": 168, "588": 168, "449": 168, "35": 168, "257": 168, "495": 168, "551v9z": 168, "long": 168, "back": 168, "via": [168, 172, 177, 186, 192], "hash": 168, "subindex": 168, "devic": [169, 199], "camera": 169, "m16": 169, "136": 169, "643l11": 169, "425v4": 169, "009": 169, "3h": 169, "75v6": 169, "13h7": 169, "0011": 169, "675l3": 169, "864": 169, "318a": 169, "5zm": 169, "075l3": 169, "1v": 169, "85l": 169, "1v1": 169, "65zm9": 169, "75v": 169, "25h7": 169, "5z": 169, "kei": 169, "frame": 169, "extract": 169, "webcam": 169, "select": 170, "slice": 170, "object": [170, 185, 196], "decor": 171, "annot": 171, "behavior": 171, "us": [171, 177, 191, 197], "advanc": 171, "what": [171, 173, 176, 179, 180, 181, 184, 185, 189, 190, 200], "next": [171, 173, 176, 179, 180, 181, 184, 185, 189], "clip": 172, "understand": 173, "problem": 173, "challeng": 173, "support": [174, 190, 201], "overrid": 174, "exist": 174, "uri": 175, "an": [176, 185], "unknown": 176, "handl": 176, "resolv": 176, "copi": [176, 185], "anoth": 176, "neural": [177, 186], "network": [177, 186, 191], "fluent": 178, "interfac": 178, "method": 178, "blobdata": 178, "imagedata": 178, "contentproperti": 178, "textdata": 178, "singletonsugar": 178, "audiodata": 178, "meshdata": 178, "videodata": 178, "urifil": 178, "structur": [180, 184, 194], "arbitrari": 181, "byte": [181, 193], "base64": [181, 193], "visual": [182, 195], "selector": 183, "auto": 183, "ravel": 183, "dunder": 183, "syntax": [183, 188], "sugari": 183, "id": 184, "boolean": 184, "mask": 184, "flatten": 184, "handi": 184, "shuffl": 184, "split": 184, "like": 185, "singl": 185, "local": [185, 197], "identifi": 187, "condit": 188, "oper": 188, "differ": 190, "between": [190, 196], "which": 190, "side": 190, "gpu": [190, 191], "when": 191, "choos": 191, "thread": 191, "map_batch": 191, "overlap": 191, "cpu": 191, "comput": 191, "why": 191, "129": 191, "128": 191, "time": 191, "extern": 192, "flow": 192, "executor": [192, 197], "accept": 192, "scheme": 192, "read": 192, "more": 192, "wire": 193, "pickl": 193, "disk": 193, "stream": 193, "over": 194, "modifi": 194, "through": 194, "projector": 195, "valid": 196, "incom": 196, "respons": 196, "recurs": 196, "jina": [197, 200], "depend": [197, 199], "direct": 197, "invok": 197, "hub": 197, "code": 197, "three": 197, "good": 197, "reason": 197, "A": 197, "client": 197, "server": 197, "architectur": 197, "share": 197, "reus": 197, "jupyt": 198, "notebook": 198, "colab": 198, "rich": 198, "pycharm": 198, "user": [198, 200], "instal": [199, 201], "appl": 199, "silicon": 199, "check": 199, "termin": 199, "homebrew": 199, "wheel": 199, "compar": 200, "altern": 200, "hug": 200, "face": 200, "dataset": 200, "To": 200, "awkwardarrai": 200, "zarr": 200, "welcom": 201, "join": 201, "u": 201, "protocol": [202, 203], "densendarrayproto": [202, 203], "documentarrayproto": [202, 203], "documentproto": [202, 203], "evaluationsentri": [202, 203], "scoresentri": [202, 203], "namedscoreproto": [202, 203], "ndarrayproto": [202, 203], "sparsendarrayproto": [202, 203], "scalar": [202, 203], "valu": [202, 203], "rebuild": 203}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Annlite": [[0, "annlite"]], "Usage": [[0, "usage"], [2, "usage"], [5, "usage"], [6, "usage"], [7, "usage"], [8, "usage"]], "Config": [[0, "config"], [2, "config"], [5, "config"], [7, "config"], [8, "config"]], "Vector search with filter": [[0, "vector-search-with-filter"], [5, "vector-search-with-filter"]], "Example of .find with a filter only": [[0, "example-of-find-with-a-filter-only"], [8, "example-of-find-with-a-filter-only"]], "Example of .find with query vector and filter": [[0, "example-of-find-with-query-vector-and-filter"], [8, "example-of-find-with-query-vector-and-filter"]], "One Million Scale Benchmark": [[1, "one-million-scale-benchmark"]], "Benchmark result": [[1, "benchmark-result"]], "Benchmark setup": [[1, "benchmark-setup"]], "Settings of the nearest neighbour search": [[1, "settings-of-the-nearest-neighbour-search"]], "Rationale on the experiment design": [[1, "rationale-on-the-experiment-design"]], "Incompleteness on the stores": [[1, "incompleteness-on-the-stores"]], "Conclusion": [[1, "conclusion"]], "Elasticsearch": [[2, "elasticsearch"]], "Start Elastic service": [[2, "start-elastic-service"]], "Create DocumentArray with Elasticsearch backend": [[2, "create-documentarray-with-elasticsearch-backend"]], "Secure connection": [[2, "secure-connection"]], "Bulk request customization": [[2, "bulk-request-customization"]], "Note": [[2, null], [2, null], [6, null]], "Vector search with filter query": [[2, "vector-search-with-filter-query"], [6, "vector-search-with-filter-query"]], "Search by filter query": [[2, "search-by-filter-query"], [6, "search-by-filter-query"]], "Search by .text field": [[2, "search-by-text-field"], [6, "search-by-text-field"]], "Search by .tags field": [[2, "search-by-tags-field"], [6, "search-by-tags-field"]], "Add New Document Store": [[3, "add-new-document-store"]], "Step 1: create the folder": [[3, "step-1-create-the-folder"]], "Step 2: implement getsetdel.py": [[3, "step-2-implement-getsetdel-py"]], "Step 3: implement seqlike.py": [[3, "step-3-implement-seqlike-py"]], "Step 4: implement backend.py": [[3, "step-4-implement-backend-py"]], "Step 5: implement find.py": [[3, "step-5-implement-find-py"]], "Step 6: summarize everything in __init__.py.": [[3, "step-6-summarize-everything-in-init-py"]], "Step 7: subclass from DocumentArray": [[3, "step-7-subclass-from-documentarray"]], "Step 8: add entrypoint to DocumentArray": [[3, "step-8-add-entrypoint-to-documentarray"]], "On pull request: add tests and type-hint": [[3, "on-pull-request-add-tests-and-type-hint"]], "Document Store": [[4, "document-store"]], "Construct": [[4, "construct"], [171, "construct"], [176, "construct"], [185, "construct"]], "Subindices": [[4, null], [166, null]], "Construct with config": [[4, "construct-with-config"]], "Creating DocumentArrays without specifying index": [[4, null]], "Feature summary": [[4, "feature-summary"]], "Vector search example": [[4, "vector-search-example"]], "Vector search with filter example": [[4, "vector-search-with-filter-example"]], "Filter example": [[4, "filter-example"]], "Persistence, mutations and context manager": [[4, "persistence-mutations-and-context-manager"]], "Known limitations": [[4, "known-limitations"]], "Multiple references to the same storage backend": [[4, "multiple-references-to-the-same-storage-backend"]], "Out-of-array modification": [[4, "out-of-array-modification"]], "Elements access is slower": [[4, "elements-access-is-slower"]], "Qdrant": [[5, "qdrant"]], "Start Qdrant service": [[5, "start-qdrant-service"]], "Create DocumentArray with Qdrant backend": [[5, "create-documentarray-with-qdrant-backend"]], "Minimum example": [[5, "minimum-example"], [8, "minimum-example"]], "Example of .find with a filter": [[5, "example-of-find-with-a-filter"]], "Redis": [[6, "redis"]], "Start Redis service": [[6, "start-redis-service"]], "Create DocumentArray with Redis backend": [[6, "create-documentarray-with-redis-backend"]], "Configuration": [[6, "configuration"]], "Update Vector Search Indexing Schema": [[6, "update-vector-search-indexing-schema"]], "SQLite": [[7, "sqlite"]], "Weaviate": [[8, "weaviate"]], "Start Weaviate service": [[8, "start-weaviate-service"]], "Create DocumentArray with Weaviate backend": [[8, "create-documentarray-with-weaviate-backend"]], "Filtering": [[8, "filtering"]], "Sorting": [[8, "sorting"]], "Example of .find with vector and sort": [[8, "example-of-find-with-vector-and-sort"]], "Set minimum certainty on query results": [[8, "set-minimum-certainty-on-query-results"]], "Include additional properties in the return": [[8, "include-additional-properties-in-the-return"]], "GraphQL": [[9, "graphql"]], "Basic example": [[9, "basic-example"]], "Integrate with FastAPI": [[9, "integrate-with-fastapi"]], "PyTorch/Deep Learning Frameworks": [[10, "pytorch-deep-learning-frameworks"]], "Load, map, batch in one-shot": [[10, "load-map-batch-in-one-shot"]], " Python API": [[11, "python-api"]], "docarray - Document and DocumentArray": [[11, "docarray-document-and-documentarray"]], "docarray.dataclasses - Dataclass": [[11, "docarray-dataclasses-dataclass"]], "docarray.array - Document stores": [[11, "docarray-array-document-stores"]], "docarray package": [[12, "docarray-package"]], "Subpackages": [[12, "subpackages"], [13, "subpackages"], [21, "subpackages"], [59, "subpackages"], [109, "subpackages"], [137, "subpackages"], [146, "subpackages"], [154, "subpackages"]], "Submodules": [[12, "submodules"], [13, "submodules"], [21, "submodules"], [23, "submodules"], [33, "submodules"], [54, "submodules"], [59, "submodules"], [60, "submodules"], [66, "submodules"], [71, "submodules"], [76, "submodules"], [81, "submodules"], [87, "submodules"], [93, "submodules"], [98, "submodules"], [105, "submodules"], [109, "submodules"], [112, "submodules"], [137, "submodules"], [138, "submodules"], [146, "submodules"], [148, "submodules"], [150, "submodules"], [152, "submodules"], [154, "submodules"], [156, "submodules"]], "Module contents": [[12, "module-docarray"], [13, "module-docarray.array"], [21, "module-docarray.array.mixins"], [23, "module-docarray.array.mixins.dataloader"], [33, "module-docarray.array.mixins.io"], [54, "module-docarray.array.queryset"], [59, "module-docarray.array.storage"], [60, "module-docarray.array.storage.annlite"], [66, "module-docarray.array.storage.base"], [71, "module-docarray.array.storage.elastic"], [76, "module-docarray.array.storage.memory"], [81, "module-docarray.array.storage.qdrant"], [87, "module-docarray.array.storage.redis"], [93, "module-docarray.array.storage.sqlite"], [98, "module-docarray.array.storage.weaviate"], [105, "module-docarray.dataclasses"], [109, "module-docarray.document"], [112, "module-docarray.document.mixins"], [137, "module-docarray.math"], [138, "module-docarray.math.distance"], [146, "module-docarray.proto"], [148, "module-docarray.proto.io"], [150, "module-docarray.proto.pb"], [152, "module-docarray.proto.pb2"], [154, "module-docarray.score"], [156, "module-docarray.score.mixins"], [159, "module-docarray.typing"]], "docarray.array package": [[13, "docarray-array-package"]], "docarray.array.annlite module": [[14, "module-docarray.array.annlite"]], "docarray.array.base module": [[15, "module-docarray.array.base"]], "docarray.array.chunk module": [[16, "module-docarray.array.chunk"]], "docarray.array.document module": [[17, "module-docarray.array.document"]], "docarray.array.elastic module": [[18, "module-docarray.array.elastic"]], "docarray.array.match module": [[19, "module-docarray.array.match"]], "docarray.array.memory module": [[20, "module-docarray.array.memory"]], "docarray.array.mixins package": [[21, "docarray-array-mixins-package"]], "docarray.array.mixins.content module": [[22, "module-docarray.array.mixins.content"]], "docarray.array.mixins.dataloader package": [[23, "docarray-array-mixins-dataloader-package"]], "docarray.array.mixins.dataloader.helper module": [[24, "module-docarray.array.mixins.dataloader.helper"]], "docarray.array.mixins.delitem module": [[25, "module-docarray.array.mixins.delitem"]], "docarray.array.mixins.embed module": [[26, "module-docarray.array.mixins.embed"]], "docarray.array.mixins.empty module": [[27, "module-docarray.array.mixins.empty"]], "docarray.array.mixins.evaluation module": [[28, "module-docarray.array.mixins.evaluation"]], "docarray.array.mixins.find module": [[29, "module-docarray.array.mixins.find"]], "docarray.array.mixins.getattr module": [[30, "module-docarray.array.mixins.getattr"]], "docarray.array.mixins.getitem module": [[31, "module-docarray.array.mixins.getitem"]], "docarray.array.mixins.group module": [[32, "module-docarray.array.mixins.group"]], "docarray.array.mixins.io package": [[33, "docarray-array-mixins-io-package"]], "docarray.array.mixins.io.binary module": [[34, "module-docarray.array.mixins.io.binary"]], "docarray.array.mixins.io.common module": [[35, "module-docarray.array.mixins.io.common"]], "docarray.array.mixins.io.csv module": [[36, "module-docarray.array.mixins.io.csv"]], "docarray.array.mixins.io.dataframe module": [[37, "module-docarray.array.mixins.io.dataframe"]], "docarray.array.mixins.io.from_gen module": [[38, "module-docarray.array.mixins.io.from_gen"]], "docarray.array.mixins.io.json module": [[39, "module-docarray.array.mixins.io.json"]], "docarray.array.mixins.io.pbar module": [[40, "module-docarray.array.mixins.io.pbar"]], "docarray.array.mixins.io.pushpull module": [[41, "module-docarray.array.mixins.io.pushpull"]], "docarray.array.mixins.match module": [[42, "module-docarray.array.mixins.match"]], "docarray.array.mixins.parallel module": [[43, "module-docarray.array.mixins.parallel"]], "docarray.array.mixins.plot module": [[44, "module-docarray.array.mixins.plot"]], "docarray.array.mixins.post module": [[45, "module-docarray.array.mixins.post"]], "docarray.array.mixins.pydantic module": [[46, "module-docarray.array.mixins.pydantic"]], "docarray.array.mixins.reduce module": [[47, "module-docarray.array.mixins.reduce"]], "docarray.array.mixins.sample module": [[48, "module-docarray.array.mixins.sample"]], "docarray.array.mixins.setitem module": [[49, "module-docarray.array.mixins.setitem"]], "docarray.array.mixins.strawberry module": [[50, "module-docarray.array.mixins.strawberry"]], "docarray.array.mixins.text module": [[51, "module-docarray.array.mixins.text"]], "docarray.array.mixins.traverse module": [[52, "module-docarray.array.mixins.traverse"]], "docarray.array.qdrant module": [[53, "module-docarray.array.qdrant"]], "docarray.array.queryset package": [[54, "docarray-array-queryset-package"]], "docarray.array.queryset.lookup module": [[55, "module-docarray.array.queryset.lookup"]], "docarray.array.queryset.parser module": [[56, "module-docarray.array.queryset.parser"]], "docarray.array.redis module": [[57, "module-docarray.array.redis"]], "docarray.array.sqlite module": [[58, "module-docarray.array.sqlite"]], "docarray.array.storage package": [[59, "docarray-array-storage-package"]], "docarray.array.storage.annlite package": [[60, "docarray-array-storage-annlite-package"]], "docarray.array.storage.annlite.backend module": [[61, "module-docarray.array.storage.annlite.backend"]], "docarray.array.storage.annlite.find module": [[62, "module-docarray.array.storage.annlite.find"]], "docarray.array.storage.annlite.getsetdel module": [[63, "module-docarray.array.storage.annlite.getsetdel"]], "docarray.array.storage.annlite.helper module": [[64, "module-docarray.array.storage.annlite.helper"]], "docarray.array.storage.annlite.seqlike module": [[65, "module-docarray.array.storage.annlite.seqlike"]], "docarray.array.storage.base package": [[66, "docarray-array-storage-base-package"]], "docarray.array.storage.base.backend module": [[67, "module-docarray.array.storage.base.backend"]], "docarray.array.storage.base.getsetdel module": [[68, "module-docarray.array.storage.base.getsetdel"]], "docarray.array.storage.base.helper module": [[69, "module-docarray.array.storage.base.helper"]], "docarray.array.storage.base.seqlike module": [[70, "module-docarray.array.storage.base.seqlike"]], "docarray.array.storage.elastic package": [[71, "docarray-array-storage-elastic-package"]], "docarray.array.storage.elastic.backend module": [[72, "module-docarray.array.storage.elastic.backend"]], "docarray.array.storage.elastic.find module": [[73, "module-docarray.array.storage.elastic.find"]], "docarray.array.storage.elastic.getsetdel module": [[74, "module-docarray.array.storage.elastic.getsetdel"]], "docarray.array.storage.elastic.seqlike module": [[75, "module-docarray.array.storage.elastic.seqlike"]], "docarray.array.storage.memory package": [[76, "docarray-array-storage-memory-package"]], "docarray.array.storage.memory.backend module": [[77, "module-docarray.array.storage.memory.backend"]], "docarray.array.storage.memory.find module": [[78, "module-docarray.array.storage.memory.find"]], "docarray.array.storage.memory.getsetdel module": [[79, "module-docarray.array.storage.memory.getsetdel"]], "docarray.array.storage.memory.seqlike module": [[80, "module-docarray.array.storage.memory.seqlike"]], "docarray.array.storage.qdrant package": [[81, "docarray-array-storage-qdrant-package"]], "docarray.array.storage.qdrant.backend module": [[82, "module-docarray.array.storage.qdrant.backend"]], "docarray.array.storage.qdrant.find module": [[83, "module-docarray.array.storage.qdrant.find"]], "docarray.array.storage.qdrant.getsetdel module": [[84, "module-docarray.array.storage.qdrant.getsetdel"]], "docarray.array.storage.qdrant.helper module": [[85, "module-docarray.array.storage.qdrant.helper"]], "docarray.array.storage.qdrant.seqlike module": [[86, "module-docarray.array.storage.qdrant.seqlike"]], "docarray.array.storage.redis package": [[87, "docarray-array-storage-redis-package"]], "docarray.array.storage.redis.backend module": [[88, "module-docarray.array.storage.redis.backend"]], "docarray.array.storage.redis.find module": [[89, "module-docarray.array.storage.redis.find"]], "docarray.array.storage.redis.getsetdel module": [[90, "module-docarray.array.storage.redis.getsetdel"]], "docarray.array.storage.redis.seqlike module": [[91, "module-docarray.array.storage.redis.seqlike"]], "docarray.array.storage.registry module": [[92, "module-docarray.array.storage.registry"]], "docarray.array.storage.sqlite package": [[93, "docarray-array-storage-sqlite-package"]], "docarray.array.storage.sqlite.backend module": [[94, "module-docarray.array.storage.sqlite.backend"]], "docarray.array.storage.sqlite.getsetdel module": [[95, "module-docarray.array.storage.sqlite.getsetdel"]], "docarray.array.storage.sqlite.helper module": [[96, "module-docarray.array.storage.sqlite.helper"]], "docarray.array.storage.sqlite.seqlike module": [[97, "module-docarray.array.storage.sqlite.seqlike"]], "docarray.array.storage.weaviate package": [[98, "docarray-array-storage-weaviate-package"]], "docarray.array.storage.weaviate.backend module": [[99, "module-docarray.array.storage.weaviate.backend"]], "docarray.array.storage.weaviate.find module": [[100, "module-docarray.array.storage.weaviate.find"]], "docarray.array.storage.weaviate.getsetdel module": [[101, "module-docarray.array.storage.weaviate.getsetdel"]], "docarray.array.storage.weaviate.seqlike module": [[102, "module-docarray.array.storage.weaviate.seqlike"]], "docarray.array.weaviate module": [[103, "module-docarray.array.weaviate"]], "docarray.base module": [[104, "module-docarray.base"]], "docarray.dataclasses package": [[105, "docarray-dataclasses-package"]], "docarray.dataclasses.getter module": [[106, "module-docarray.dataclasses.getter"]], "docarray.dataclasses.setter module": [[107, "module-docarray.dataclasses.setter"]], "docarray.dataclasses.types module": [[108, "module-docarray.dataclasses.types"]], "docarray.document package": [[109, "docarray-document-package"]], "docarray.document.data module": [[110, "module-docarray.document.data"]], "docarray.document.generators module": [[111, "module-docarray.document.generators"]], "docarray.document.mixins package": [[112, "docarray-document-mixins-package"]], "docarray.document.mixins.attribute module": [[113, "module-docarray.document.mixins.attribute"]], "docarray.document.mixins.audio module": [[114, "module-docarray.document.mixins.audio"]], "docarray.document.mixins.blob module": [[115, "module-docarray.document.mixins.blob"]], "docarray.document.mixins.content module": [[116, "module-docarray.document.mixins.content"]], "docarray.document.mixins.convert module": [[117, "module-docarray.document.mixins.convert"]], "docarray.document.mixins.dump module": [[118, "module-docarray.document.mixins.dump"]], "docarray.document.mixins.featurehash module": [[119, "module-docarray.document.mixins.featurehash"]], "docarray.document.mixins.helper module": [[120, "module-docarray.document.mixins.helper"]], "docarray.document.mixins.image module": [[121, "module-docarray.document.mixins.image"]], "docarray.document.mixins.mesh module": [[122, "module-docarray.document.mixins.mesh"]], "docarray.document.mixins.multimodal module": [[123, "module-docarray.document.mixins.multimodal"]], "docarray.document.mixins.plot module": [[124, "module-docarray.document.mixins.plot"]], "docarray.document.mixins.porting module": [[125, "module-docarray.document.mixins.porting"]], "docarray.document.mixins.property module": [[126, "module-docarray.document.mixins.property"]], "docarray.document.mixins.protobuf module": [[127, "module-docarray.document.mixins.protobuf"]], "docarray.document.mixins.pydantic module": [[128, "module-docarray.document.mixins.pydantic"]], "docarray.document.mixins.rich_embedding module": [[129, "module-docarray.document.mixins.rich_embedding"]], "docarray.document.mixins.strawberry module": [[130, "module-docarray.document.mixins.strawberry"]], "docarray.document.mixins.sugar module": [[131, "module-docarray.document.mixins.sugar"]], "docarray.document.mixins.text module": [[132, "module-docarray.document.mixins.text"]], "docarray.document.mixins.video module": [[133, "module-docarray.document.mixins.video"]], "docarray.document.pydantic_model module": [[134, "module-docarray.document.pydantic_model"]], "docarray.document.strawberry_type module": [[135, "docarray-document-strawberry-type-module"]], "docarray.helper module": [[136, "module-docarray.helper"]], "docarray.math package": [[137, "docarray-math-package"]], "docarray.math.distance package": [[138, "docarray-math-distance-package"]], "docarray.math.distance.numpy module": [[139, "module-docarray.math.distance.numpy"]], "docarray.math.distance.paddle module": [[140, "docarray-math-distance-paddle-module"]], "docarray.math.distance.tensorflow module": [[141, "module-docarray.math.distance.tensorflow"]], "docarray.math.distance.torch module": [[142, "module-docarray.math.distance.torch"]], "docarray.math.evaluation module": [[143, "module-docarray.math.evaluation"]], "docarray.math.helper module": [[144, "module-docarray.math.helper"]], "docarray.math.ndarray module": [[145, "module-docarray.math.ndarray"]], "docarray.proto package": [[146, "docarray-proto-package"]], "docarray.proto.docarray_pb2 module": [[147, "module-docarray.proto.docarray_pb2"]], "docarray.proto.io package": [[148, "docarray-proto-io-package"]], "docarray.proto.io.ndarray module": [[149, "module-docarray.proto.io.ndarray"]], "docarray.proto.pb package": [[150, "docarray-proto-pb-package"]], "docarray.proto.pb.docarray_pb2 module": [[151, "module-docarray.proto.pb.docarray_pb2"]], "docarray.proto.pb2 package": [[152, "docarray-proto-pb2-package"]], "docarray.proto.pb2.docarray_pb2 module": [[153, "module-docarray.proto.pb2.docarray_pb2"]], "docarray.score package": [[154, "docarray-score-package"]], "docarray.score.data module": [[155, "module-docarray.score.data"]], "docarray.score.mixins package": [[156, "docarray-score-mixins-package"]], "docarray.score.mixins.property module": [[157, "module-docarray.score.mixins.property"]], "docarray.score.mixins.representer module": [[158, "module-docarray.score.mixins.representer"]], "docarray.typing package": [[159, "docarray-typing-package"]], "docarray": [[160, "docarray"]], "Changelog": [[161, "changelog"]], "0.11.0: change DocumentArrayInMemory\u2019s container to list": [[161, "change-documentarrayinmemory-s-container-to-list"]], "0.10.0: add high-level dataclass API to Document": [[161, "add-high-level-dataclass-api-to-document"]], "0.5.0: add storage backend to DocumentArray": [[161, "add-storage-backend-to-documentarray"]], "0.4.0: change on the DocumentArray serialization format": [[161, "change-on-the-documentarray-serialization-format"]], "0.3.0: change on the default JSON/dict serialization strategy": [[161, "change-on-the-default-json-dict-serialization-strategy"]], "0.2.0: change on the content field name": [[161, "change-on-the-content-field-name"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-unmute\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.563 2.069A.75.75 0 018 2.75v10.5a.75.75 0 01-1.238.57L3.472 11H1.75A1.75 1.75 0 010 9.25v-2.5C0 5.784.784 5 1.75 5h1.723l3.289-2.82a.75.75 0 01.801-.111zM6.5 4.38L4.238 6.319a.75.75 0 01-.488.181h-2a.25.25 0 00-.25.25v2.5c0 .138.112.25.25.25h2a.75.75 0 01.488.18L6.5 11.62V4.38zm6.096-2.038a.75.75 0 011.06 0 8 8 0 010 11.314.75.75 0 01-1.06-1.06 6.5 6.5 0 000-9.193.75.75 0 010-1.06v-.001zm-1.06 2.121a.75.75 0 10-1.061 1.061 3.5 3.5 0 010 4.95.75.75 0 101.06 1.06 5 5 0 000-7.07l.001-.001z\"></path></svg> Audio": [[162, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-unmute-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m7-563-2-069a-75-75-0-018-2-75v10-5a-75-75-0-01-1-238-57l3-472-11h1-75a1-75-1-75-0-010-9-25v-2-5c0-5-784-784-5-1-75-5h1-723l3-289-2-82a-75-75-0-01-801-111zm6-5-4-38l4-238-6-319a-75-75-0-01-488-181h-2a-25-25-0-00-25-25v2-5c0-138-112-25-25-25h2a-75-75-0-01-488-18l6-5-11-62v4-38zm6-096-2-038a-75-75-0-011-06-0-8-8-0-010-11-314-75-75-0-01-1-06-1-06-6-5-6-5-0-000-9-193-75-75-0-010-1-06v-001zm-1-06-2-121a-75-75-0-10-1-061-1-061-3-5-3-5-0-010-4-95-75-75-0-101-06-1-06-5-5-0-000-7-07l-001-001z-path-svg-audio"]], "Load .wav file": [[162, "load-wav-file"]], "Save as .wav file": [[162, "save-as-wav-file"]], "Example": [[162, "example"], [190, "example"]], "Other tools & libraries for audio data": [[162, "other-tools-libraries-for-audio-data"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-image\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M1.75 2.5a.25.25 0 00-.25.25v10.5c0 .138.112.25.25.25h.94a.76.76 0 01.03-.03l6.077-6.078a1.75 1.75 0 012.412-.06L14.5 10.31V2.75a.25.25 0 00-.25-.25H1.75zm12.5 11H4.81l5.048-5.047a.25.25 0 01.344-.009l4.298 3.889v.917a.25.25 0 01-.25.25zm1.75-.25V2.75A1.75 1.75 0 0014.25 1H1.75A1.75 1.75 0 000 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0016 13.25zM5.5 6a.5.5 0 11-1 0 .5.5 0 011 0zM7 6a2 2 0 11-4 0 2 2 0 014 0z\"></path></svg> Image": [[163, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-image-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m1-75-2-5a-25-25-0-00-25-25v10-5c0-138-112-25-25-25h-94a-76-76-0-01-03-03l6-077-6-078a1-75-1-75-0-012-412-06l14-5-10-31v2-75a-25-25-0-00-25-25h1-75zm12-5-11h4-81l5-048-5-047a-25-25-0-01-344-009l4-298-3-889v-917a-25-25-0-01-25-25zm1-75-25v2-75a1-75-1-75-0-0014-25-1h1-75a1-75-1-75-0-000-2-75v10-5c0-14-216-784-15-1-75-15h12-5a1-75-1-75-0-0016-13-25zm5-5-6a-5-5-0-11-1-0-5-5-0-011-0zm7-6a2-2-0-11-4-0-2-2-0-014-0z-path-svg-image"]], "Load image data": [[163, "load-image-data"]], "Simple image processing": [[163, "simple-image-processing"]], "Display image sprite": [[163, "display-image-sprite"], [198, "display-image-sprite"]], "Segment large complicated image into small ones": [[163, "segment-large-complicated-image-into-small-ones"]], "Multimodal Data": [[164, "multimodal-data"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-package\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M8.878.392a1.75 1.75 0 00-1.756 0l-5.25 3.045A1.75 1.75 0 001 4.951v6.098c0 .624.332 1.2.872 1.514l5.25 3.045a1.75 1.75 0 001.756 0l5.25-3.045c.54-.313.872-.89.872-1.514V4.951c0-.624-.332-1.2-.872-1.514L8.878.392zM7.875 1.69a.25.25 0 01.25 0l4.63 2.685L8 7.133 3.245 4.375l4.63-2.685zM2.5 5.677v5.372c0 .09.047.171.125.216l4.625 2.683V8.432L2.5 5.677zm6.25 8.271l4.625-2.683a.25.25 0 00.125-.216V5.677L8.75 8.432v5.516z\"></path></svg> 3D Mesh": [[165, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-package-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m8-878-392a1-75-1-75-0-00-1-756-0l-5-25-3-045a1-75-1-75-0-001-4-951v6-098c0-624-332-1-2-872-1-514l5-25-3-045a1-75-1-75-0-001-756-0l5-25-3-045c-54-313-872-89-872-1-514v4-951c0-624-332-1-2-872-1-514l8-878-392zm7-875-1-69a-25-25-0-01-25-0l4-63-2-685l8-7-133-3-245-4-375l4-63-2-685zm2-5-5-677v5-372c0-09-047-171-125-216l4-625-2-683v8-432l2-5-5-677zm6-25-8-271l4-625-2-683a-25-25-0-00-125-216v5-677l8-75-8-432v5-516z-path-svg-3d-mesh"]], "Point cloud": [[165, "point-cloud"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-stack\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.122.392a1.75 1.75 0 011.756 0l5.003 2.902c.83.481.83 1.68 0 2.162L8.878 8.358a1.75 1.75 0 01-1.756 0L2.119 5.456a1.25 1.25 0 010-2.162L7.122.392zM8.125 1.69a.25.25 0 00-.25 0l-4.63 2.685 4.63 2.685a.25.25 0 00.25 0l4.63-2.685-4.63-2.685zM1.601 7.789a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0L1.874 8.814A.75.75 0 011.6 7.789zm0 3.5a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0l-5.248-3.044a.75.75 0 01-.273-1.025z\"></path></svg> Multi-modal": [[166, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-stack-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m7-122-392a1-75-1-75-0-011-756-0l5-003-2-902c-83-481-83-1-68-0-2-162l8-878-8-358a1-75-1-75-0-01-1-756-0l2-119-5-456a1-25-1-25-0-010-2-162l7-122-392zm8-125-1-69a-25-25-0-00-25-0l-4-63-2-685-4-63-2-685a-25-25-0-00-25-0l4-63-2-685-4-63-2-685zm1-601-7-789a-75-75-0-011-025-273l5-249-3-044a-25-25-0-00-25-0l5-249-3-044a-75-75-0-01-752-1-298l-5-248-3-044a1-75-1-75-0-01-1-756-0l1-874-8-814a-75-75-0-011-6-7-789zm0-3-5a-75-75-0-011-025-273l5-249-3-044a-25-25-0-00-25-0l5-249-3-044a-75-75-0-01-752-1-298l-5-248-3-044a1-75-1-75-0-01-1-756-0l-5-248-3-044a-75-75-0-01-273-1-025z-path-svg-multi-modal"]], "Model your data": [[166, "model-your-data"]], "Instantiate a Document": [[166, "instantiate-a-document"]], "Nested dataclasses and list types": [[166, "nested-dataclasses-and-list-types"]], "Access the data": [[166, "access-the-data"]], "Generate embeddings": [[166, "generate-embeddings"]], "Embed each modality": [[166, "embed-each-modality"]], "Embed parent Document": [[166, "embed-parent-document"]], "Perform search": [[166, "perform-search"]], "Find Document by modality embedding": [[166, "find-document-by-modality-embedding"]], "Find Document by combined embedding": [[166, "find-document-by-combined-embedding"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-table\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v3.585a.746.746 0 010 .83v8.085A1.75 1.75 0 0114.25 16H6.309a.748.748 0 01-1.118 0H1.75A1.75 1.75 0 010 14.25V6.165a.746.746 0 010-.83V1.75zM1.5 6.5v7.75c0 .138.112.25.25.25H5v-8H1.5zM5 5H1.5V1.75a.25.25 0 01.25-.25H5V5zm1.5 1.5v8h7.75a.25.25 0 00.25-.25V6.5h-8zm8-1.5h-8V1.5h7.75a.25.25 0 01.25.25V5z\"></path></svg> Table": [[167, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-table-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m0-1-75c0-784-784-0-1-75-0h12-5c15-216-0-16-784-16-1-75v3-585a-746-746-0-010-83v8-085a1-75-1-75-0-0114-25-16h6-309a-748-748-0-01-1-118-0h1-75a1-75-1-75-0-010-14-25v6-165a-746-746-0-010-83v1-75zm1-5-6-5v7-75c0-138-112-25-25-25h5v-8h1-5zm5-5h1-5v1-75a-25-25-0-01-25-25h5v5zm1-5-1-5v8h7-75a-25-25-0-00-25-25v6-5h-8zm8-1-5h-8v1-5h7-75a-25-25-0-01-25-25v5z-path-svg-table"]], "Load CSV table": [[167, "load-csv-table"]], "Save as CSV file": [[167, "save-as-csv-file"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-typography\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M6.21 8.5L4.574 3.594 2.857 8.5H6.21zm.5 1.5l.829 2.487a.75.75 0 001.423-.474L5.735 2.332a1.216 1.216 0 00-2.302-.018l-3.39 9.688a.75.75 0 001.415.496L2.332 10H6.71zm3.13-4.358C10.53 4.374 11.87 4 13 4c1.5 0 3 .939 3 2.601v5.649a.75.75 0 01-1.448.275C13.995 12.82 13.3 13 12.5 13c-.77 0-1.514-.231-2.078-.709-.577-.488-.922-1.199-.922-2.041 0-.694.265-1.411.887-1.944C11 7.78 11.88 7.5 13 7.5h1.5v-.899c0-.54-.5-1.101-1.5-1.101-.869 0-1.528.282-1.84.858a.75.75 0 11-1.32-.716zM14.5 9H13c-.881 0-1.375.22-1.637.444-.253.217-.363.5-.363.806 0 .408.155.697.39.896.249.21.63.354 1.11.354.732 0 1.26-.209 1.588-.449.35-.257.412-.495.412-.551V9z\"></path></svg> Text": [[168, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-typography-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m6-21-8-5l4-574-3-594-2-857-8-5h6-21zm-5-1-5l-829-2-487a-75-75-0-001-423-474l5-735-2-332a1-216-1-216-0-00-2-302-018l-3-39-9-688a-75-75-0-001-415-496l2-332-10h6-71zm3-13-4-358c10-53-4-374-11-87-4-13-4c1-5-0-3-939-3-2-601v5-649a-75-75-0-01-1-448-275c13-995-12-82-13-3-13-12-5-13c-77-0-1-514-231-2-078-709-577-488-922-1-199-922-2-041-0-694-265-1-411-887-1-944c11-7-78-11-88-7-5-13-7-5h1-5v-899c0-54-5-1-101-1-5-1-101-869-0-1-528-282-1-84-858a-75-75-0-11-1-32-716zm14-5-9h13c-881-0-1-375-22-1-637-444-253-217-363-5-363-806-0-408-155-697-39-896-249-21-63-354-1-11-354-732-0-1-26-209-1-588-449-35-257-412-495-412-551v9z-path-svg-text"]], "Segment long documents": [[168, "segment-long-documents"]], "Convert text into ndarray": [[168, "convert-text-into-ndarray"]], "Convert ndarray back to text": [[168, "convert-ndarray-back-to-text"]], "Simple text matching via feature hashing": [[168, "simple-text-matching-via-feature-hashing"]], "Searching at chunk level with subindex": [[168, "searching-at-chunk-level-with-subindex"]], "Multi-modal Documents": [[168, null]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-device-camera-video\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M16 3.75a.75.75 0 00-1.136-.643L11 5.425V4.75A1.75 1.75 0 009.25 3h-7.5A1.75 1.75 0 000 4.75v6.5C0 12.216.784 13 1.75 13h7.5A1.75 1.75 0 0011 11.25v-.675l3.864 2.318A.75.75 0 0016 12.25v-8.5zm-5 5.075l3.5 2.1v-5.85l-3.5 2.1v1.65zM9.5 6.75v-2a.25.25 0 00-.25-.25h-7.5a.25.25 0 00-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-4.5z\"></path></svg> Video": [[169, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-device-camera-video-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m16-3-75a-75-75-0-00-1-136-643l11-5-425v4-75a1-75-1-75-0-009-25-3h-7-5a1-75-1-75-0-000-4-75v6-5c0-12-216-784-13-1-75-13h7-5a1-75-1-75-0-0011-11-25v-675l3-864-2-318a-75-75-0-0016-12-25v-8-5zm-5-5-075l3-5-2-1v-5-85l-3-5-2-1v1-65zm9-5-6-75v-2a-25-25-0-00-25-25h-7-5a-25-25-0-00-25-25v6-5c0-138-112-25-25-25h7-5a-25-25-0-00-25-25v-4-5z-path-svg-video"]], "Load video data": [[169, "load-video-data"]], "Key frame extraction": [[169, "key-frame-extraction"]], "Save as video file": [[169, "save-as-video-file"]], "Create Document from webcam": [[169, "create-document-from-webcam"]], "Access Modality": [[170, "access-modality"]], "Return types": [[170, null]], "Document level access": [[170, "document-level-access"]], "Select nested fields": [[170, "select-nested-fields"], [170, "id1"]], "DocumentArray level access": [[170, "documentarray-level-access"]], "Select multiple fields": [[170, "select-multiple-fields"]], "Slice dataclass objects": [[170, "slice-dataclass-objects"]], "Slice List[Type] fields": [[170, "slice-list-type-fields"]], "Dataclass decorator": [[171, "dataclass-decorator"]], "Annotate class fields": [[171, "annotate-class-fields"]], "Behavior of field annotation": [[171, "behavior-of-field-annotation"]], "Construct from/to Document": [[171, "construct-from-to-document"]], "Use field() for advanced configs": [[171, "use-field-for-advanced-configs"]], "What\u2019s next?": [[171, "what-s-next"], [176, "what-s-next"], [179, "what-s-next"], [180, "what-s-next"], [181, "what-s-next"], [184, "what-s-next"], [185, "what-s-next"], [189, "what-s-next"]], "Process Modality": [[172, "process-modality"]], "Embed image and text via CLIP": [[172, "embed-image-and-text-via-clip"]], "Embed via CLIP-as-service": [[172, "embed-via-clip-as-service"]], "Dataclass": [[173, "dataclass"]], "What is multi-modality?": [[173, "what-is-multi-modality"]], "Understanding the problem": [[173, "understanding-the-problem"]], "Understanding the challenges": [[173, "understanding-the-challenges"]], "What\u2019s next": [[173, "what-s-next"]], "Support New Modality": [[174, "support-new-modality"]], "Create new types": [[174, "create-new-types"]], "Override existing types": [[174, "override-existing-types"]], "Access Attributes": [[175, "access-attributes"], [183, "access-attributes"]], "Content attributes": [[175, "content-attributes"]], "Load content from URI": [[175, "load-content-from-uri"]], "Convert content to data URI": [[175, null]], "Construct an empty Document": [[176, "construct-an-empty-document"]], "Construct with attributes": [[176, "construct-with-attributes"]], "Nested Document": [[176, "nested-document"]], "Unknown attributes handling": [[176, "unknown-attributes-handling"]], "Resolve unknown attributes with rules": [[176, "resolve-unknown-attributes-with-rules"]], "Copy from another Document": [[176, "copy-from-another-document"]], "Embedding": [[177, "embedding"]], "Fill embedding via neural network": [[177, "fill-embedding-via-neural-network"]], "On multiple Documents use DocumentArray": [[177, null], [177, null]], "Find nearest-neighbours": [[177, "find-nearest-neighbours"]], "Fluent Interface": [[178, "fluent-interface"]], "Methods": [[178, "methods"]], "BlobData": [[178, "blobdata"]], "ImageData": [[178, "imagedata"]], "Convert": [[178, "convert"]], "ContentProperty": [[178, "contentproperty"]], "TextData": [[178, "textdata"]], "SingletonSugar": [[178, "singletonsugar"]], "FeatureHash": [[178, "featurehash"]], "Porting": [[178, "porting"]], "Protobuf": [[178, "protobuf"]], "Pydantic": [[178, "pydantic"]], "Strawberry": [[178, "strawberry"]], "AudioData": [[178, "audiodata"]], "MeshData": [[178, "meshdata"]], "VideoData": [[178, "videodata"]], "UriFile": [[178, "urifile"]], "Document": [[179, "document"]], "Nested Structure": [[180, "nested-structure"]], "Serialization": [[181, "serialization"], [193, "serialization"]], "From/to JSON": [[181, "from-to-json"], [193, "from-to-json"]], "From/to arbitrary JSON": [[181, "from-to-arbitrary-json"]], "From/to bytes": [[181, "from-to-bytes"], [193, "from-to-bytes"]], "From/to base64": [[181, "from-to-base64"], [193, "from-to-base64"]], "From/to dict": [[181, "from-to-dict"]], "From/to Protobuf": [[181, "from-to-protobuf"], [193, "from-to-protobuf"]], "Visualization": [[182, "visualization"], [195, "visualization"]], "Attribute selector": [[183, "attribute-selector"]], "Auto-ravel on NdArray": [[183, "auto-ravel-on-ndarray"]], "Dunder syntax for nested attributes": [[183, "dunder-syntax-for-nested-attributes"]], "Content and embedding sugary attributes": [[183, "content-and-embedding-sugary-attributes"]], "Access Documents": [[184, "access-documents"]], "Basic indexing": [[184, "basic-indexing"]], "Index by Document id": [[184, "index-by-document-id"]], "Index by boolean mask": [[184, "index-by-boolean-mask"]], "Index by nested structure": [[184, "index-by-nested-structure"]], "Index by flatten": [[184, "index-by-flatten"]], "Other Handy Helpers": [[184, "other-handy-helpers"]], "Batching": [[184, "batching"]], "Sampling": [[184, "sampling"]], "Shuffling": [[184, "shuffling"]], "Splitting by .tags": [[184, "splitting-by-tags"]], "Construct an empty array": [[185, "construct-an-empty-array"]], "Construct with empty Documents": [[185, "construct-with-empty-documents"]], "Construct from list-like objects": [[185, "construct-from-list-like-objects"]], "Construct from multiple DocumentArray": [[185, "construct-from-multiple-documentarray"]], "Construct from a single Document": [[185, "construct-from-a-single-document"]], "Deep copy on elements": [[185, "deep-copy-on-elements"]], "Construct from local files": [[185, "construct-from-local-files"]], "Embed via Neural Network": [[186, "embed-via-neural-network"]], "Evaluate Matches": [[187, "evaluate-matches"]], "Document identifier": [[187, "document-identifier"]], "Query by Conditions": [[188, "query-by-conditions"]], "filter query syntax": [[188, null]], "Filter with query operators": [[188, "filter-with-query-operators"]], "Combine multiple conditions": [[188, "combine-multiple-conditions"]], "DocumentArray": [[189, "documentarray"]], "Find Nearest Neighbours": [[190, "find-nearest-neighbours"]], "Difference between find and match": [[190, "difference-between-find-and-match"]], "Which side is the query at?": [[190, "which-side-is-the-query-at"]], "What is the type of the query?": [[190, "what-is-the-type-of-the-query"]], "What is the return?": [[190, "what-is-the-return"]], "GPU support": [[190, "gpu-support"]], "Parallelization": [[191, "parallelization"]], "When to choose process or thread backend?": [[191, null]], "Use map_batch() to overlap CPU & GPU computation": [[191, "use-map-batch-to-overlap-cpu-gpu-computation"]], "Why 129s? Why not 128s": [[191, null]], "Use map_batch() to overlap CPU and network time": [[191, "use-map-batch-to-overlap-cpu-and-network-time"]], "Process via External Flow or Executor": [[192, "process-via-external-flow-or-executor"]], "Accept schemes": [[192, "accept-schemes"]], "Read more": [[192, "read-more"]], "Wire format of pickle and protobuf": [[193, "wire-format-of-pickle-and-protobuf"]], "From/to disk": [[193, "from-to-disk"]], "Stream large binary serialization from disk": [[193, "stream-large-binary-serialization-from-disk"]], "From/to list": [[193, "from-to-list"]], "From/to dataframe": [[193, "from-to-dataframe"]], "From/to cloud": [[193, "from-to-cloud"]], "Search over Nested Structure": [[194, "search-over-nested-structure"]], "Construct subindices": [[194, "construct-subindices"]], "Modify subindices": [[194, "modify-subindices"]], "Search through subindices": [[194, "search-through-subindices"]], "Summary in table": [[195, "summary-in-table"]], "Image sprites": [[195, "image-sprites"]], "Plot Matches": [[195, "plot-matches"]], "Embedding projector": [[195, "embedding-projector"]], "FastAPI/Pydantic": [[196, "fastapi-pydantic"]], "JSON Schema": [[196, "json-schema"]], "Validate incoming Document and DocumentArray": [[196, "validate-incoming-document-and-documentarray"]], "Convert between pydantic model and DocArray objects": [[196, "convert-between-pydantic-model-and-docarray-objects"]], "Limit returned fields by response model": [[196, "limit-returned-fields-by-response-model"]], "Limit returned results recursively": [[196, "limit-returned-results-recursively"]], "Jina": [[197, "jina"]], "Package dependency": [[197, "package-dependency"]], "Direct invoke Jina/Hub Executor": [[197, "direct-invoke-jina-hub-executor"]], "Local code as a service": [[197, "local-code-as-a-service"]], "Three good reasons to use Jina": [[197, "three-good-reasons-to-use-jina"]], "A client-server architecture": [[197, "a-client-server-architecture"]], "Scale it out": [[197, "scale-it-out"]], "Share and reuse it": [[197, "share-and-reuse-it"]], "Summary": [[197, "summary"]], "Jupyter Notebook/Colab": [[198, "jupyter-notebook-colab"]], "Display Document": [[198, "display-document"]], "Display rich content": [[198, "display-rich-content"]], "Display DocumentArray": [[198, "display-documentarray"]], "Display embeddings": [[198, "display-embeddings"]], "PyCharm users": [[198, "pycharm-users"]], "Install": [[199, "install"], [201, "install"]], "On Apple Silicon": [[199, "on-apple-silicon"]], "Check terminal and device": [[199, "check-terminal-and-device"]], "Install Homebrew": [[199, "install-homebrew"]], "Install Python": [[199, "install-python"]], "Install dependencies wheels": [[199, "install-dependencies-wheels"]], "Install DocArray": [[199, "install-docarray"]], "What is DocArray?": [[200, "what-is-docarray"]], "Design": [[200, "design"]], "Comparing to Alternatives": [[200, "comparing-to-alternatives"]], "Hugging Face Datasets": [[200, "hugging-face-datasets"]], "To AwkwardArray": [[200, "to-awkwardarray"]], "To Zarr": [[200, "to-zarr"]], "To Jina Users": [[200, "to-jina-users"]], "Welcome to DocArray!": [[201, "welcome-to-docarray"]], "Support": [[201, "support"]], "Join Us": [[201, "join-us"]], "Protocol Documentation": [[202, "protocol-documentation"], [203, "protocol-documentation"]], "Table of Contents": [[202, "table-of-contents"], [203, "table-of-contents"]], "docarray.proto": [[202, "docarray-proto"], [203, "docarray-proto"]], "DenseNdArrayProto": [[202, "densendarrayproto"], [203, "densendarrayproto"]], "DocumentArrayProto": [[202, "documentarrayproto"], [203, "documentarrayproto"]], "DocumentProto": [[202, "documentproto"], [203, "documentproto"]], "DocumentProto.EvaluationsEntry": [[202, "documentproto-evaluationsentry"], [203, "documentproto-evaluationsentry"]], "DocumentProto.ScoresEntry": [[202, "documentproto-scoresentry"], [203, "documentproto-scoresentry"]], "NamedScoreProto": [[202, "namedscoreproto"], [203, "namedscoreproto"]], "NdArrayProto": [[202, "ndarrayproto"], [203, "ndarrayproto"]], "SparseNdArrayProto": [[202, "sparsendarrayproto"], [203, "sparsendarrayproto"]], "Scalar Value Types": [[202, "scalar-value-types"], [203, "scalar-value-types"]], "Rebuild Protobuf": [[203, "rebuild-protobuf"]]}, "indexentries": {"docarray": [[12, "module-docarray"]], "module": [[12, "module-docarray"], [13, "module-docarray.array"], [14, "module-docarray.array.annlite"], [15, "module-docarray.array.base"], [16, "module-docarray.array.chunk"], [17, "module-docarray.array.document"], [18, "module-docarray.array.elastic"], [19, "module-docarray.array.match"], [20, "module-docarray.array.memory"], [21, "module-docarray.array.mixins"], [22, "module-docarray.array.mixins.content"], [23, "module-docarray.array.mixins.dataloader"], [24, "module-docarray.array.mixins.dataloader.helper"], [25, "module-docarray.array.mixins.delitem"], [26, "module-docarray.array.mixins.embed"], [27, "module-docarray.array.mixins.empty"], [28, "module-docarray.array.mixins.evaluation"], [29, "module-docarray.array.mixins.find"], [30, "module-docarray.array.mixins.getattr"], [31, "module-docarray.array.mixins.getitem"], [32, "module-docarray.array.mixins.group"], [33, "module-docarray.array.mixins.io"], [34, "module-docarray.array.mixins.io.binary"], [35, "module-docarray.array.mixins.io.common"], [36, "module-docarray.array.mixins.io.csv"], [37, "module-docarray.array.mixins.io.dataframe"], [38, "module-docarray.array.mixins.io.from_gen"], [39, "module-docarray.array.mixins.io.json"], [40, "module-docarray.array.mixins.io.pbar"], [41, "module-docarray.array.mixins.io.pushpull"], [42, "module-docarray.array.mixins.match"], [43, "module-docarray.array.mixins.parallel"], [44, "module-docarray.array.mixins.plot"], [45, "module-docarray.array.mixins.post"], [46, "module-docarray.array.mixins.pydantic"], [47, "module-docarray.array.mixins.reduce"], [48, "module-docarray.array.mixins.sample"], [49, "module-docarray.array.mixins.setitem"], [50, "module-docarray.array.mixins.strawberry"], [51, "module-docarray.array.mixins.text"], [52, "module-docarray.array.mixins.traverse"], [53, "module-docarray.array.qdrant"], [54, "module-docarray.array.queryset"], [55, "module-docarray.array.queryset.lookup"], [56, "module-docarray.array.queryset.parser"], [57, "module-docarray.array.redis"], [58, "module-docarray.array.sqlite"], [59, "module-docarray.array.storage"], [60, "module-docarray.array.storage.annlite"], [61, "module-docarray.array.storage.annlite.backend"], [62, "module-docarray.array.storage.annlite.find"], [63, "module-docarray.array.storage.annlite.getsetdel"], [64, "module-docarray.array.storage.annlite.helper"], [65, "module-docarray.array.storage.annlite.seqlike"], [66, "module-docarray.array.storage.base"], [67, "module-docarray.array.storage.base.backend"], [68, "module-docarray.array.storage.base.getsetdel"], [69, "module-docarray.array.storage.base.helper"], [70, "module-docarray.array.storage.base.seqlike"], [71, "module-docarray.array.storage.elastic"], [72, "module-docarray.array.storage.elastic.backend"], [73, "module-docarray.array.storage.elastic.find"], [74, "module-docarray.array.storage.elastic.getsetdel"], [75, "module-docarray.array.storage.elastic.seqlike"], [76, "module-docarray.array.storage.memory"], [77, "module-docarray.array.storage.memory.backend"], [78, "module-docarray.array.storage.memory.find"], [79, "module-docarray.array.storage.memory.getsetdel"], [80, "module-docarray.array.storage.memory.seqlike"], [81, "module-docarray.array.storage.qdrant"], [82, "module-docarray.array.storage.qdrant.backend"], [83, "module-docarray.array.storage.qdrant.find"], [84, "module-docarray.array.storage.qdrant.getsetdel"], [85, "module-docarray.array.storage.qdrant.helper"], [86, "module-docarray.array.storage.qdrant.seqlike"], [87, "module-docarray.array.storage.redis"], [88, "module-docarray.array.storage.redis.backend"], [89, "module-docarray.array.storage.redis.find"], [90, "module-docarray.array.storage.redis.getsetdel"], [91, "module-docarray.array.storage.redis.seqlike"], [92, "module-docarray.array.storage.registry"], [93, "module-docarray.array.storage.sqlite"], [94, "module-docarray.array.storage.sqlite.backend"], [95, "module-docarray.array.storage.sqlite.getsetdel"], [96, "module-docarray.array.storage.sqlite.helper"], [97, "module-docarray.array.storage.sqlite.seqlike"], [98, "module-docarray.array.storage.weaviate"], [99, "module-docarray.array.storage.weaviate.backend"], [100, "module-docarray.array.storage.weaviate.find"], [101, "module-docarray.array.storage.weaviate.getsetdel"], [102, "module-docarray.array.storage.weaviate.seqlike"], [103, "module-docarray.array.weaviate"], [104, "module-docarray.base"], [105, "module-docarray.dataclasses"], [106, "module-docarray.dataclasses.getter"], [107, "module-docarray.dataclasses.setter"], [108, "module-docarray.dataclasses.types"], [109, "module-docarray.document"], [110, "module-docarray.document.data"], [111, "module-docarray.document.generators"], [112, "module-docarray.document.mixins"], [113, "module-docarray.document.mixins.attribute"], [114, "module-docarray.document.mixins.audio"], [115, "module-docarray.document.mixins.blob"], [116, "module-docarray.document.mixins.content"], [117, "module-docarray.document.mixins.convert"], [118, "module-docarray.document.mixins.dump"], [119, "module-docarray.document.mixins.featurehash"], [120, "module-docarray.document.mixins.helper"], [121, "module-docarray.document.mixins.image"], [122, "module-docarray.document.mixins.mesh"], [123, "module-docarray.document.mixins.multimodal"], [124, "module-docarray.document.mixins.plot"], [125, "module-docarray.document.mixins.porting"], [126, "module-docarray.document.mixins.property"], [127, "module-docarray.document.mixins.protobuf"], [128, "module-docarray.document.mixins.pydantic"], [129, "module-docarray.document.mixins.rich_embedding"], [130, "module-docarray.document.mixins.strawberry"], [131, "module-docarray.document.mixins.sugar"], [132, "module-docarray.document.mixins.text"], [133, "module-docarray.document.mixins.video"], [134, "module-docarray.document.pydantic_model"], [136, "module-docarray.helper"], [137, "module-docarray.math"], [138, "module-docarray.math.distance"], [139, "module-docarray.math.distance.numpy"], [141, "module-docarray.math.distance.tensorflow"], [142, "module-docarray.math.distance.torch"], [143, "module-docarray.math.evaluation"], [144, "module-docarray.math.helper"], [145, "module-docarray.math.ndarray"], [146, "module-docarray.proto"], [147, "module-docarray.proto.docarray_pb2"], [148, "module-docarray.proto.io"], [149, "module-docarray.proto.io.ndarray"], [150, "module-docarray.proto.pb"], [151, "module-docarray.proto.pb.docarray_pb2"], [152, "module-docarray.proto.pb2"], [153, "module-docarray.proto.pb2.docarray_pb2"], [154, "module-docarray.score"], [155, "module-docarray.score.data"], [156, "module-docarray.score.mixins"], [157, "module-docarray.score.mixins.property"], [158, "module-docarray.score.mixins.representer"], [159, "module-docarray.typing"]], "docarray.array": [[13, "module-docarray.array"]], "annliteconfig (class in docarray.array.annlite)": [[14, "docarray.array.annlite.AnnliteConfig"]], "documentarrayannlite (class in docarray.array.annlite)": [[14, "docarray.array.annlite.DocumentArrayAnnlite"]], "type_map (docarray.array.annlite.documentarrayannlite attribute)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.TYPE_MAP"]], "append() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.append"]], "apply() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.apply"]], "apply_batch() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.apply_batch"]], "batch() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.batch"]], "batch_ids() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.batch_ids"]], "blobs (docarray.array.annlite.documentarrayannlite property)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.blobs"]], "clear() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.clear"]], "cloud_delete() (docarray.array.annlite.documentarrayannlite static method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.cloud_delete"]], "cloud_list() (docarray.array.annlite.documentarrayannlite static method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.cloud_list"]], "cloud_pull() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.cloud_pull"]], "cloud_push() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.cloud_push"]], "columns (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.columns"]], "contents (docarray.array.annlite.documentarrayannlite property)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.contents"]], "count() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.count"]], "data_path (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.data_path"]], "dataloader() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.dataloader"]], "docarray.array.annlite": [[14, "module-docarray.array.annlite"]], "ef_construction (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.ef_search"]], "embed() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.embed"]], "embeddings (docarray.array.annlite.documentarrayannlite property)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.embeddings"]], "empty() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.empty"]], "evaluate() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.evaluate"]], "extend() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.extend"]], "find() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.find"]], "flatten() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.flatten"]], "from_base64() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_base64"]], "from_bytes() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_bytes"]], "from_csv() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_csv"]], "from_dataframe() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_dataframe"]], "from_dict() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_dict"]], "from_files() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_files"]], "from_huggingface_datasets() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_huggingface_datasets"]], "from_json() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_json"]], "from_lines() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_lines"]], "from_list() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_list"]], "from_ndarray() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_ndarray"]], "from_ndjson() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_ndjson"]], "from_protobuf() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_protobuf"]], "from_pydantic_model() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_pydantic_model"]], "from_strawberry_type() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_strawberry_type"]], "get_json_schema() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.get_json_schema"]], "get_vocabulary() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.get_vocabulary"]], "index() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.index"]], "insert() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.insert"]], "load() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.load"]], "load_binary() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.load_binary"]], "load_csv() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.load_csv"]], "load_json() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.load_json"]], "map() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.map"]], "map_batch() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.map_batch"]], "match() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.match"]], "max_connection (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.max_connection"]], "metric (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.metric"]], "n_components (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.n_components"]], "n_dim (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.n_dim"]], "plot_embeddings() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.plot_embeddings"]], "plot_image_sprites() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.plot_image_sprites"]], "pop() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.pop"]], "post() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.post"]], "pull() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.pull"]], "push() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.push"]], "reduce() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.reduce"]], "reduce_all() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.reduce_all"]], "remove() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.remove"]], "reverse() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.reverse"]], "sample() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.sample"]], "save() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save"]], "save_binary() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save_binary"]], "save_csv() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save_csv"]], "save_embeddings_csv() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save_embeddings_csv"]], "save_gif() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save_gif"]], "save_json() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save_json"]], "serialize_config (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.serialize_config"]], "shuffle() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.shuffle"]], "split_by_tag() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.split_by_tag"]], "summary() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.summary"]], "sync() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.sync"]], "tensors (docarray.array.annlite.documentarrayannlite property)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.tensors"]], "texts (docarray.array.annlite.documentarrayannlite property)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.texts"]], "to_base64() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_base64"]], "to_bytes() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_bytes"]], "to_dataframe() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_dataframe"]], "to_dict() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_dict"]], "to_json() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_json"]], "to_list() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_list"]], "to_protobuf() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_protobuf"]], "to_pydantic_model() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_pydantic_model"]], "to_strawberry_type() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_strawberry_type"]], "traverse() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.traverse"]], "traverse_flat() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.traverse_flat"]], "traverse_flat_per_path() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.traverse_flat_per_path"]], "basedocumentarray (class in docarray.array.base)": [[15, "docarray.array.base.BaseDocumentArray"]], "append() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.append"]], "clear() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.clear"]], "count() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.count"]], "docarray.array.base": [[15, "module-docarray.array.base"]], "extend() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.extend"]], "index() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.index"]], "insert() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.insert"]], "pop() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.pop"]], "remove() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.remove"]], "reverse() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.reverse"]], "chunkarray (class in docarray.array.chunk)": [[16, "docarray.array.chunk.ChunkArray"]], "type_map (docarray.array.chunk.chunkarray attribute)": [[16, "docarray.array.chunk.ChunkArray.TYPE_MAP"]], "adjacency (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.adjacency"]], "append() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.append"]], "apply() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.apply"]], "apply_batch() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.apply_batch"]], "batch() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.batch"]], "batch_ids() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.batch_ids"]], "blobs (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.blobs"]], "clear() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.clear"]], "cloud_delete() (docarray.array.chunk.chunkarray static method)": [[16, "docarray.array.chunk.ChunkArray.cloud_delete"]], "cloud_list() (docarray.array.chunk.chunkarray static method)": [[16, "docarray.array.chunk.ChunkArray.cloud_list"]], "cloud_pull() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.cloud_pull"]], "cloud_push() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.cloud_push"]], "contents (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.contents"]], "count() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.count"]], "dataloader() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.dataloader"]], "docarray.array.chunk": [[16, "module-docarray.array.chunk"]], "embed() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.embed"]], "embeddings (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.embeddings"]], "empty() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.empty"]], "evaluate() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.evaluate"]], "extend() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.extend"]], "find() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.find"]], "flatten() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.flatten"]], "from_base64() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_base64"]], "from_bytes() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_bytes"]], "from_csv() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_csv"]], "from_dataframe() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_dataframe"]], "from_dict() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_dict"]], "from_files() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_files"]], "from_huggingface_datasets() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_huggingface_datasets"]], "from_json() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_json"]], "from_lines() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_lines"]], "from_list() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_list"]], "from_ndarray() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_ndarray"]], "from_ndjson() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_ndjson"]], "from_protobuf() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_protobuf"]], "from_pydantic_model() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_strawberry_type"]], "get_json_schema() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.get_json_schema"]], "get_vocabulary() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.get_vocabulary"]], "granularity (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.granularity"]], "index() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.index"]], "insert() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.insert"]], "load() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.load"]], "load_binary() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.load_binary"]], "load_csv() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.load_csv"]], "load_json() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.load_json"]], "map() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.map"]], "map_batch() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.map_batch"]], "match() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.match"]], "plot_embeddings() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.plot_image_sprites"]], "pop() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.pop"]], "post() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.post"]], "pull() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.pull"]], "push() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.push"]], "reduce() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.reduce"]], "reduce_all() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.reduce_all"]], "reference_doc (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.reference_doc"]], "remove() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.remove"]], "reverse() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.reverse"]], "sample() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.sample"]], "save() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save"]], "save_binary() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save_binary"]], "save_csv() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save_csv"]], "save_embeddings_csv() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save_embeddings_csv"]], "save_gif() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save_gif"]], "save_json() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save_json"]], "shuffle() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.shuffle"]], "split_by_tag() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.split_by_tag"]], "summary() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.summary"]], "sync() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.sync"]], "tensors (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.tensors"]], "texts (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.texts"]], "to_base64() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_base64"]], "to_bytes() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_bytes"]], "to_dataframe() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_dataframe"]], "to_dict() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_dict"]], "to_json() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_json"]], "to_list() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_list"]], "to_protobuf() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_protobuf"]], "to_pydantic_model() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_strawberry_type"]], "traverse() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.traverse"]], "traverse_flat() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.traverse_flat_per_path"]], "documentarray (class in docarray.array.document)": [[17, "docarray.array.document.DocumentArray"]], "append() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.append"]], "apply() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.apply"]], "apply_batch() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.apply_batch"]], "batch() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.batch"]], "batch_ids() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.batch_ids"]], "blobs (docarray.array.document.documentarray property)": [[17, "docarray.array.document.DocumentArray.blobs"]], "clear() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.clear"]], "cloud_delete() (docarray.array.document.documentarray static method)": [[17, "docarray.array.document.DocumentArray.cloud_delete"]], "cloud_list() (docarray.array.document.documentarray static method)": [[17, "docarray.array.document.DocumentArray.cloud_list"]], "cloud_pull() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.cloud_pull"]], "cloud_push() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.cloud_push"]], "contents (docarray.array.document.documentarray property)": [[17, "docarray.array.document.DocumentArray.contents"]], "count() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.count"]], "dataloader() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.dataloader"]], "docarray.array.document": [[17, "module-docarray.array.document"]], "embed() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.embed"]], "embeddings (docarray.array.document.documentarray property)": [[17, "docarray.array.document.DocumentArray.embeddings"]], "empty() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.empty"]], "evaluate() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.evaluate"]], "extend() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.extend"]], "find() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.find"]], "flatten() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.flatten"]], "from_base64() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_base64"]], "from_bytes() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_bytes"]], "from_csv() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_csv"]], "from_dataframe() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_dataframe"]], "from_dict() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_dict"]], "from_files() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_files"]], "from_huggingface_datasets() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_huggingface_datasets"]], "from_json() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_json"]], "from_lines() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_lines"]], "from_list() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_list"]], "from_ndarray() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_ndarray"]], "from_ndjson() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_ndjson"]], "from_protobuf() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_protobuf"]], "from_pydantic_model() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_strawberry_type"]], "get_json_schema() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.get_json_schema"]], "get_vocabulary() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.get_vocabulary"]], "index() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.index"]], "insert() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.insert"]], "load() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.load"]], "load_binary() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.load_binary"]], "load_csv() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.load_csv"]], "load_json() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.load_json"]], "map() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.map"]], "map_batch() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.map_batch"]], "match() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.match"]], "plot_embeddings() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.plot_image_sprites"]], "pop() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.pop"]], "post() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.post"]], "pull() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.pull"]], "push() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.push"]], "reduce() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.reduce"]], "reduce_all() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.reduce_all"]], "remove() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.remove"]], "reverse() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.reverse"]], "sample() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.sample"]], "save() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save"]], "save_binary() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save_binary"]], "save_csv() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save_csv"]], "save_embeddings_csv() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save_embeddings_csv"]], "save_gif() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save_gif"]], "save_json() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save_json"]], "shuffle() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.shuffle"]], "split_by_tag() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.split_by_tag"]], "summary() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.summary"]], "tensors (docarray.array.document.documentarray property)": [[17, "docarray.array.document.DocumentArray.tensors"]], "texts (docarray.array.document.documentarray property)": [[17, "docarray.array.document.DocumentArray.texts"]], "to_base64() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_base64"]], "to_bytes() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_bytes"]], "to_dataframe() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_dataframe"]], "to_dict() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_dict"]], "to_json() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_json"]], "to_list() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_list"]], "to_protobuf() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_protobuf"]], "to_pydantic_model() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_strawberry_type"]], "traverse() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.traverse"]], "traverse_flat() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.traverse_flat_per_path"]], "documentarrayelastic (class in docarray.array.elastic)": [[18, "docarray.array.elastic.DocumentArrayElastic"]], "elasticconfig (class in docarray.array.elastic)": [[18, "docarray.array.elastic.ElasticConfig"]], "max_es_returned_docs (docarray.array.elastic.documentarrayelastic attribute)": [[18, "docarray.array.elastic.DocumentArrayElastic.MAX_ES_RETURNED_DOCS"]], "type_map (docarray.array.elastic.documentarrayelastic attribute)": [[18, "docarray.array.elastic.DocumentArrayElastic.TYPE_MAP"]], "append() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.append"]], "apply() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.apply"]], "apply_batch() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.apply_batch"]], "batch() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.batch"]], "batch_ids() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.batch_ids"]], "batch_size (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.batch_size"]], "blobs (docarray.array.elastic.documentarrayelastic property)": [[18, "docarray.array.elastic.DocumentArrayElastic.blobs"]], "clear() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.clear"]], "cloud_delete() (docarray.array.elastic.documentarrayelastic static method)": [[18, "docarray.array.elastic.DocumentArrayElastic.cloud_delete"]], "cloud_list() (docarray.array.elastic.documentarrayelastic static method)": [[18, "docarray.array.elastic.DocumentArrayElastic.cloud_list"]], "cloud_pull() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.cloud_pull"]], "cloud_push() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.cloud_push"]], "columns (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.columns"]], "contents (docarray.array.elastic.documentarrayelastic property)": [[18, "docarray.array.elastic.DocumentArrayElastic.contents"]], "count() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.count"]], "dataloader() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.dataloader"]], "distance (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.distance"]], "docarray.array.elastic": [[18, "module-docarray.array.elastic"]], "ef_construction (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.ef_construction"]], "embed() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.embed"]], "embeddings (docarray.array.elastic.documentarrayelastic property)": [[18, "docarray.array.elastic.DocumentArrayElastic.embeddings"]], "empty() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.empty"]], "es_config (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.es_config"]], "evaluate() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.evaluate"]], "extend() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.extend"]], "find() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.find"]], "flatten() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.flatten"]], "from_base64() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_base64"]], "from_bytes() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_bytes"]], "from_csv() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_csv"]], "from_dataframe() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_dataframe"]], "from_dict() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_dict"]], "from_files() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_files"]], "from_huggingface_datasets() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_huggingface_datasets"]], "from_json() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_json"]], "from_lines() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_lines"]], "from_list() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_list"]], "from_ndarray() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_ndarray"]], "from_ndjson() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_ndjson"]], "from_protobuf() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_protobuf"]], "from_pydantic_model() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_pydantic_model"]], "from_strawberry_type() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_strawberry_type"]], "get_json_schema() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.get_json_schema"]], "get_vocabulary() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.get_vocabulary"]], "hosts (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.hosts"]], "index() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.index"]], "index_name (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.index_name"]], "index_text (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.index_text"]], "insert() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.insert"]], "load() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.load"]], "load_binary() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.load_binary"]], "load_csv() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.load_csv"]], "load_json() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.load_json"]], "m (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.m"]], "map() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.map"]], "map_batch() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.map_batch"]], "match() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.match"]], "n_dim (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.n_dim"]], "plot_embeddings() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.plot_embeddings"]], "plot_image_sprites() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.plot_image_sprites"]], "pop() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.pop"]], "post() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.post"]], "pull() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.pull"]], "push() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.push"]], "reduce() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.reduce"]], "reduce_all() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.reduce_all"]], "remove() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.remove"]], "reverse() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.reverse"]], "sample() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.sample"]], "save() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save"]], "save_binary() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save_binary"]], "save_csv() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save_csv"]], "save_embeddings_csv() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save_embeddings_csv"]], "save_gif() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save_gif"]], "save_json() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save_json"]], "shuffle() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.shuffle"]], "split_by_tag() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.split_by_tag"]], "summary() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.summary"]], "sync() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.sync"]], "tag_indices (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.tag_indices"]], "tensors (docarray.array.elastic.documentarrayelastic property)": [[18, "docarray.array.elastic.DocumentArrayElastic.tensors"]], "texts (docarray.array.elastic.documentarrayelastic property)": [[18, "docarray.array.elastic.DocumentArrayElastic.texts"]], "to_base64() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_base64"]], "to_bytes() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_bytes"]], "to_dataframe() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_dataframe"]], "to_dict() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_dict"]], "to_json() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_json"]], "to_list() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_list"]], "to_protobuf() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_protobuf"]], "to_pydantic_model() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_pydantic_model"]], "to_strawberry_type() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_strawberry_type"]], "traverse() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.traverse"]], "traverse_flat() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.traverse_flat"]], "traverse_flat_per_path() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.traverse_flat_per_path"]], "matcharray (class in docarray.array.match)": [[19, "docarray.array.match.MatchArray"]], "type_map (docarray.array.match.matcharray attribute)": [[19, "docarray.array.match.MatchArray.TYPE_MAP"]], "adjacency (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.adjacency"]], "append() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.append"]], "apply() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.apply"]], "apply_batch() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.apply_batch"]], "batch() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.batch"]], "batch_ids() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.batch_ids"]], "blobs (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.blobs"]], "clear() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.clear"]], "cloud_delete() (docarray.array.match.matcharray static method)": [[19, "docarray.array.match.MatchArray.cloud_delete"]], "cloud_list() (docarray.array.match.matcharray static method)": [[19, "docarray.array.match.MatchArray.cloud_list"]], "cloud_pull() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.cloud_pull"]], "cloud_push() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.cloud_push"]], "contents (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.contents"]], "count() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.count"]], "dataloader() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.dataloader"]], "docarray.array.match": [[19, "module-docarray.array.match"]], "embed() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.embed"]], "embeddings (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.embeddings"]], "empty() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.empty"]], "evaluate() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.evaluate"]], "extend() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.extend"]], "find() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.find"]], "flatten() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.flatten"]], "from_base64() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_base64"]], "from_bytes() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_bytes"]], "from_csv() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_csv"]], "from_dataframe() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_dataframe"]], "from_dict() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_dict"]], "from_files() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_files"]], "from_huggingface_datasets() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_huggingface_datasets"]], "from_json() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_json"]], "from_lines() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_lines"]], "from_list() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_list"]], "from_ndarray() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_ndarray"]], "from_ndjson() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_ndjson"]], "from_protobuf() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_protobuf"]], "from_pydantic_model() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_strawberry_type"]], "get_json_schema() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.get_json_schema"]], "get_vocabulary() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.get_vocabulary"]], "granularity (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.granularity"]], "index() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.index"]], "insert() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.insert"]], "load() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.load"]], "load_binary() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.load_binary"]], "load_csv() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.load_csv"]], "load_json() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.load_json"]], "map() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.map"]], "map_batch() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.map_batch"]], "match() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.match"]], "plot_embeddings() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.plot_image_sprites"]], "pop() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.pop"]], "post() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.post"]], "pull() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.pull"]], "push() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.push"]], "reduce() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.reduce"]], "reduce_all() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.reduce_all"]], "reference_doc (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.reference_doc"]], "remove() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.remove"]], "reverse() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.reverse"]], "sample() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.sample"]], "save() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save"]], "save_binary() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save_binary"]], "save_csv() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save_csv"]], "save_embeddings_csv() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save_embeddings_csv"]], "save_gif() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save_gif"]], "save_json() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save_json"]], "shuffle() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.shuffle"]], "split_by_tag() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.split_by_tag"]], "summary() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.summary"]], "sync() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.sync"]], "tensors (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.tensors"]], "texts (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.texts"]], "to_base64() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_base64"]], "to_bytes() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_bytes"]], "to_dataframe() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_dataframe"]], "to_dict() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_dict"]], "to_json() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_json"]], "to_list() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_list"]], "to_protobuf() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_protobuf"]], "to_pydantic_model() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_strawberry_type"]], "traverse() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.traverse"]], "traverse_flat() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.traverse_flat_per_path"]], "documentarrayinmemory (class in docarray.array.memory)": [[20, "docarray.array.memory.DocumentArrayInMemory"]], "type_map (docarray.array.memory.documentarrayinmemory attribute)": [[20, "docarray.array.memory.DocumentArrayInMemory.TYPE_MAP"]], "append() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.append"]], "apply() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.apply"]], "apply_batch() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.apply_batch"]], "batch() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.batch"]], "batch_ids() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.batch_ids"]], "blobs (docarray.array.memory.documentarrayinmemory property)": [[20, "docarray.array.memory.DocumentArrayInMemory.blobs"]], "clear() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.clear"]], "cloud_delete() (docarray.array.memory.documentarrayinmemory static method)": [[20, "docarray.array.memory.DocumentArrayInMemory.cloud_delete"]], "cloud_list() (docarray.array.memory.documentarrayinmemory static method)": [[20, "docarray.array.memory.DocumentArrayInMemory.cloud_list"]], "cloud_pull() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.cloud_pull"]], "cloud_push() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.cloud_push"]], "contents (docarray.array.memory.documentarrayinmemory property)": [[20, "docarray.array.memory.DocumentArrayInMemory.contents"]], "count() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.count"]], "dataloader() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.dataloader"]], "docarray.array.memory": [[20, "module-docarray.array.memory"]], "embed() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.embed"]], "embeddings (docarray.array.memory.documentarrayinmemory property)": [[20, "docarray.array.memory.DocumentArrayInMemory.embeddings"]], "empty() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.empty"]], "evaluate() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.evaluate"]], "extend() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.extend"]], "find() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.find"]], "flatten() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.flatten"]], "from_base64() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_base64"]], "from_bytes() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_bytes"]], "from_csv() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_csv"]], "from_dataframe() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_dataframe"]], "from_dict() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_dict"]], "from_files() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_files"]], "from_huggingface_datasets() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_huggingface_datasets"]], "from_json() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_json"]], "from_lines() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_lines"]], "from_list() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_list"]], "from_ndarray() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_ndarray"]], "from_ndjson() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_ndjson"]], "from_protobuf() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_protobuf"]], "from_pydantic_model() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_pydantic_model"]], "from_strawberry_type() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_strawberry_type"]], "get_json_schema() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.get_json_schema"]], "get_vocabulary() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.get_vocabulary"]], "index() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.index"]], "insert() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.insert"]], "load() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.load"]], "load_binary() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.load_binary"]], "load_csv() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.load_csv"]], "load_json() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.load_json"]], "map() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.map"]], "map_batch() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.map_batch"]], "match() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.match"]], "plot_embeddings() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.plot_embeddings"]], "plot_image_sprites() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.plot_image_sprites"]], "pop() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.pop"]], "post() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.post"]], "pull() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.pull"]], "push() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.push"]], "reduce() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.reduce"]], "reduce_all() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.reduce_all"]], "remove() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.remove"]], "reverse() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.reverse"]], "sample() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.sample"]], "save() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save"]], "save_binary() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save_binary"]], "save_csv() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save_csv"]], "save_embeddings_csv() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save_embeddings_csv"]], "save_gif() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save_gif"]], "save_json() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save_json"]], "shuffle() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.shuffle"]], "split_by_tag() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.split_by_tag"]], "summary() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.summary"]], "sync() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.sync"]], "tensors (docarray.array.memory.documentarrayinmemory property)": [[20, "docarray.array.memory.DocumentArrayInMemory.tensors"]], "texts (docarray.array.memory.documentarrayinmemory property)": [[20, "docarray.array.memory.DocumentArrayInMemory.texts"]], "to_base64() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_base64"]], "to_bytes() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_bytes"]], "to_dataframe() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_dataframe"]], "to_dict() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_dict"]], "to_json() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_json"]], "to_list() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_list"]], "to_protobuf() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_protobuf"]], "to_pydantic_model() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_pydantic_model"]], "to_strawberry_type() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_strawberry_type"]], "traverse() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.traverse"]], "traverse_flat() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.traverse_flat"]], "traverse_flat_per_path() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.traverse_flat_per_path"]], "allmixins (class in docarray.array.mixins)": [[21, "docarray.array.mixins.AllMixins"]], "apply() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.apply"]], "apply_batch() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.apply_batch"]], "batch() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.batch"]], "batch_ids() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.batch_ids"]], "blobs (docarray.array.mixins.allmixins property)": [[21, "docarray.array.mixins.AllMixins.blobs"]], "cloud_delete() (docarray.array.mixins.allmixins static method)": [[21, "docarray.array.mixins.AllMixins.cloud_delete"]], "cloud_list() (docarray.array.mixins.allmixins static method)": [[21, "docarray.array.mixins.AllMixins.cloud_list"]], "cloud_pull() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.cloud_pull"]], "cloud_push() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.cloud_push"]], "contents (docarray.array.mixins.allmixins property)": [[21, "docarray.array.mixins.AllMixins.contents"]], "dataloader() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.dataloader"]], "docarray.array.mixins": [[21, "module-docarray.array.mixins"]], "embed() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.embed"]], "embeddings (docarray.array.mixins.allmixins property)": [[21, "docarray.array.mixins.AllMixins.embeddings"]], "empty() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.empty"]], "evaluate() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.evaluate"]], "find() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.find"]], "flatten() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.flatten"]], "from_base64() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_base64"]], "from_bytes() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_bytes"]], "from_csv() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_csv"]], "from_dataframe() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_dataframe"]], "from_dict() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_dict"]], "from_files() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_files"]], "from_huggingface_datasets() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_huggingface_datasets"]], "from_json() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_json"]], "from_lines() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_lines"]], "from_list() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_list"]], "from_ndarray() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_ndarray"]], "from_ndjson() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_ndjson"]], "from_protobuf() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_protobuf"]], "from_pydantic_model() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_pydantic_model"]], "from_strawberry_type() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_strawberry_type"]], "get_json_schema() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.get_json_schema"]], "get_vocabulary() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.get_vocabulary"]], "load() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.load"]], "load_binary() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.load_binary"]], "load_csv() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.load_csv"]], "load_json() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.load_json"]], "map() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.map"]], "map_batch() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.map_batch"]], "match() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.match"]], "plot_embeddings() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.plot_embeddings"]], "plot_image_sprites() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.plot_image_sprites"]], "post() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.post"]], "pull() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.pull"]], "push() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.push"]], "reduce() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.reduce"]], "reduce_all() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.reduce_all"]], "sample() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.sample"]], "save() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save"]], "save_binary() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save_binary"]], "save_csv() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save_csv"]], "save_embeddings_csv() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save_embeddings_csv"]], "save_gif() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save_gif"]], "save_json() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save_json"]], "shuffle() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.shuffle"]], "split_by_tag() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.split_by_tag"]], "summary() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.summary"]], "tensors (docarray.array.mixins.allmixins property)": [[21, "docarray.array.mixins.AllMixins.tensors"]], "texts (docarray.array.mixins.allmixins property)": [[21, "docarray.array.mixins.AllMixins.texts"]], "to_base64() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_base64"]], "to_bytes() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_bytes"]], "to_dataframe() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_dataframe"]], "to_dict() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_dict"]], "to_json() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_json"]], "to_list() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_list"]], "to_protobuf() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_protobuf"]], "to_pydantic_model() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_pydantic_model"]], "to_strawberry_type() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_strawberry_type"]], "traverse() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.traverse"]], "traverse_flat() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.traverse_flat"]], "traverse_flat_per_path() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.traverse_flat_per_path"]], "contentpropertymixin (class in docarray.array.mixins.content)": [[22, "docarray.array.mixins.content.ContentPropertyMixin"]], "blobs (docarray.array.mixins.content.contentpropertymixin property)": [[22, "docarray.array.mixins.content.ContentPropertyMixin.blobs"]], "contents (docarray.array.mixins.content.contentpropertymixin property)": [[22, "docarray.array.mixins.content.ContentPropertyMixin.contents"]], "docarray.array.mixins.content": [[22, "module-docarray.array.mixins.content"]], "embeddings (docarray.array.mixins.content.contentpropertymixin property)": [[22, "docarray.array.mixins.content.ContentPropertyMixin.embeddings"]], "tensors (docarray.array.mixins.content.contentpropertymixin property)": [[22, "docarray.array.mixins.content.ContentPropertyMixin.tensors"]], "texts (docarray.array.mixins.content.contentpropertymixin property)": [[22, "docarray.array.mixins.content.ContentPropertyMixin.texts"]], "dataloadermixin (class in docarray.array.mixins.dataloader)": [[23, "docarray.array.mixins.dataloader.DataLoaderMixin"]], "dataloader() (docarray.array.mixins.dataloader.dataloadermixin class method)": [[23, "docarray.array.mixins.dataloader.DataLoaderMixin.dataloader"]], "docarray.array.mixins.dataloader": [[23, "module-docarray.array.mixins.dataloader"]], "documentarrayloader (class in docarray.array.mixins.dataloader.helper)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader"]], "apply() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.apply"]], "apply_batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.apply_batch"]], "batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.batch"]], "batch_ids() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.batch_ids"]], "docarray.array.mixins.dataloader.helper": [[24, "module-docarray.array.mixins.dataloader.helper"]], "map() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.map"]], "map_batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.map_batch"]], "split_by_tag() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.split_by_tag"]], "delitemmixin (class in docarray.array.mixins.delitem)": [[25, "docarray.array.mixins.delitem.DelItemMixin"]], "docarray.array.mixins.delitem": [[25, "module-docarray.array.mixins.delitem"]], "embedmixin (class in docarray.array.mixins.embed)": [[26, "docarray.array.mixins.embed.EmbedMixin"]], "docarray.array.mixins.embed": [[26, "module-docarray.array.mixins.embed"]], "embed() (docarray.array.mixins.embed.embedmixin method)": [[26, "docarray.array.mixins.embed.EmbedMixin.embed"]], "get_framework() (in module docarray.array.mixins.embed)": [[26, "docarray.array.mixins.embed.get_framework"]], "emptymixin (class in docarray.array.mixins.empty)": [[27, "docarray.array.mixins.empty.EmptyMixin"]], "docarray.array.mixins.empty": [[27, "module-docarray.array.mixins.empty"]], "empty() (docarray.array.mixins.empty.emptymixin class method)": [[27, "docarray.array.mixins.empty.EmptyMixin.empty"]], "evaluationmixin (class in docarray.array.mixins.evaluation)": [[28, "docarray.array.mixins.evaluation.EvaluationMixin"]], "docarray.array.mixins.evaluation": [[28, "module-docarray.array.mixins.evaluation"]], "evaluate() (docarray.array.mixins.evaluation.evaluationmixin method)": [[28, "docarray.array.mixins.evaluation.EvaluationMixin.evaluate"]], "findmixin (class in docarray.array.mixins.find)": [[29, "docarray.array.mixins.find.FindMixin"]], "docarray.array.mixins.find": [[29, "module-docarray.array.mixins.find"]], "find() (docarray.array.mixins.find.findmixin method)": [[29, "docarray.array.mixins.find.FindMixin.find"]], "getattributemixin (class in docarray.array.mixins.getattr)": [[30, "docarray.array.mixins.getattr.GetAttributeMixin"]], "docarray.array.mixins.getattr": [[30, "module-docarray.array.mixins.getattr"]], "getitemmixin (class in docarray.array.mixins.getitem)": [[31, "docarray.array.mixins.getitem.GetItemMixin"]], "docarray.array.mixins.getitem": [[31, "module-docarray.array.mixins.getitem"]], "groupmixin (class in docarray.array.mixins.group)": [[32, "docarray.array.mixins.group.GroupMixin"]], "batch() (docarray.array.mixins.group.groupmixin method)": [[32, "docarray.array.mixins.group.GroupMixin.batch"]], "batch_ids() (docarray.array.mixins.group.groupmixin method)": [[32, "docarray.array.mixins.group.GroupMixin.batch_ids"]], "docarray.array.mixins.group": [[32, "module-docarray.array.mixins.group"]], "split_by_tag() (docarray.array.mixins.group.groupmixin method)": [[32, "docarray.array.mixins.group.GroupMixin.split_by_tag"]], "docarray.array.mixins.io": [[33, "module-docarray.array.mixins.io"]], "binaryiomixin (class in docarray.array.mixins.io.binary)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin"]], "lazyrequestreader (class in docarray.array.mixins.io.binary)": [[34, "docarray.array.mixins.io.binary.LazyRequestReader"]], "docarray.array.mixins.io.binary": [[34, "module-docarray.array.mixins.io.binary"]], "from_base64() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.from_base64"]], "from_bytes() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.from_bytes"]], "from_protobuf() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.from_protobuf"]], "load_binary() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.load_binary"]], "save_binary() (docarray.array.mixins.io.binary.binaryiomixin method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.save_binary"]], "to_base64() (docarray.array.mixins.io.binary.binaryiomixin method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.to_base64"]], "to_bytes() (docarray.array.mixins.io.binary.binaryiomixin method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.to_bytes"]], "to_protobuf() (docarray.array.mixins.io.binary.binaryiomixin method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.to_protobuf"]], "commoniomixin (class in docarray.array.mixins.io.common)": [[35, "docarray.array.mixins.io.common.CommonIOMixin"]], "docarray.array.mixins.io.common": [[35, "module-docarray.array.mixins.io.common"]], "load() (docarray.array.mixins.io.common.commoniomixin class method)": [[35, "docarray.array.mixins.io.common.CommonIOMixin.load"]], "save() (docarray.array.mixins.io.common.commoniomixin method)": [[35, "docarray.array.mixins.io.common.CommonIOMixin.save"]], "csviomixin (class in docarray.array.mixins.io.csv)": [[36, "docarray.array.mixins.io.csv.CsvIOMixin"]], "docarray.array.mixins.io.csv": [[36, "module-docarray.array.mixins.io.csv"]], "load_csv() (docarray.array.mixins.io.csv.csviomixin class method)": [[36, "docarray.array.mixins.io.csv.CsvIOMixin.load_csv"]], "save_csv() (docarray.array.mixins.io.csv.csviomixin method)": [[36, "docarray.array.mixins.io.csv.CsvIOMixin.save_csv"]], "save_embeddings_csv() (docarray.array.mixins.io.csv.csviomixin method)": [[36, "docarray.array.mixins.io.csv.CsvIOMixin.save_embeddings_csv"]], "dataframeiomixin (class in docarray.array.mixins.io.dataframe)": [[37, "docarray.array.mixins.io.dataframe.DataframeIOMixin"]], "docarray.array.mixins.io.dataframe": [[37, "module-docarray.array.mixins.io.dataframe"]], "from_dataframe() (docarray.array.mixins.io.dataframe.dataframeiomixin class method)": [[37, "docarray.array.mixins.io.dataframe.DataframeIOMixin.from_dataframe"]], "to_dataframe() (docarray.array.mixins.io.dataframe.dataframeiomixin method)": [[37, "docarray.array.mixins.io.dataframe.DataframeIOMixin.to_dataframe"]], "fromgeneratormixin (class in docarray.array.mixins.io.from_gen)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin"]], "docarray.array.mixins.io.from_gen": [[38, "module-docarray.array.mixins.io.from_gen"]], "from_csv() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_csv"]], "from_files() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_files"]], "from_huggingface_datasets() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_huggingface_datasets"]], "from_lines() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_lines"]], "from_ndarray() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_ndarray"]], "from_ndjson() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_ndjson"]], "jsoniomixin (class in docarray.array.mixins.io.json)": [[39, "docarray.array.mixins.io.json.JsonIOMixin"]], "docarray.array.mixins.io.json": [[39, "module-docarray.array.mixins.io.json"]], "from_dict() (docarray.array.mixins.io.json.jsoniomixin class method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.from_dict"]], "from_json() (docarray.array.mixins.io.json.jsoniomixin class method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.from_json"]], "from_list() (docarray.array.mixins.io.json.jsoniomixin class method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.from_list"]], "load_json() (docarray.array.mixins.io.json.jsoniomixin class method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.load_json"]], "save_json() (docarray.array.mixins.io.json.jsoniomixin method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.save_json"]], "to_dict() (docarray.array.mixins.io.json.jsoniomixin method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.to_dict"]], "to_json() (docarray.array.mixins.io.json.jsoniomixin method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.to_json"]], "to_list() (docarray.array.mixins.io.json.jsoniomixin method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.to_list"]], "qpscolumn (class in docarray.array.mixins.io.pbar)": [[40, "docarray.array.mixins.io.pbar.QPSColumn"]], "docarray.array.mixins.io.pbar": [[40, "module-docarray.array.mixins.io.pbar"]], "get_pbar() (in module docarray.array.mixins.io.pbar)": [[40, "docarray.array.mixins.io.pbar.get_pbar"]], "get_progressbar() (in module docarray.array.mixins.io.pbar)": [[40, "docarray.array.mixins.io.pbar.get_progressbar"]], "get_table_column() (docarray.array.mixins.io.pbar.qpscolumn method)": [[40, "docarray.array.mixins.io.pbar.QPSColumn.get_table_column"]], "max_refresh (docarray.array.mixins.io.pbar.qpscolumn attribute)": [[40, "docarray.array.mixins.io.pbar.QPSColumn.max_refresh"]], "render() (docarray.array.mixins.io.pbar.qpscolumn method)": [[40, "docarray.array.mixins.io.pbar.QPSColumn.render"]], "pushpullmixin (class in docarray.array.mixins.io.pushpull)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin"]], "cloud_delete() (docarray.array.mixins.io.pushpull.pushpullmixin static method)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin.cloud_delete"]], "cloud_list() (docarray.array.mixins.io.pushpull.pushpullmixin static method)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin.cloud_list"]], "cloud_pull() (docarray.array.mixins.io.pushpull.pushpullmixin class method)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin.cloud_pull"]], "cloud_push() (docarray.array.mixins.io.pushpull.pushpullmixin method)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin.cloud_push"]], "docarray.array.mixins.io.pushpull": [[41, "module-docarray.array.mixins.io.pushpull"]], "pull() (docarray.array.mixins.io.pushpull.pushpullmixin class method)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin.pull"]], "push() (docarray.array.mixins.io.pushpull.pushpullmixin method)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin.push"]], "matchmixin (class in docarray.array.mixins.match)": [[42, "docarray.array.mixins.match.MatchMixin"]], "docarray.array.mixins.match": [[42, "module-docarray.array.mixins.match"]], "match() (docarray.array.mixins.match.matchmixin method)": [[42, "docarray.array.mixins.match.MatchMixin.match"]], "parallelmixin (class in docarray.array.mixins.parallel)": [[43, "docarray.array.mixins.parallel.ParallelMixin"]], "apply() (docarray.array.mixins.parallel.parallelmixin method)": [[43, "docarray.array.mixins.parallel.ParallelMixin.apply"]], "apply_batch() (docarray.array.mixins.parallel.parallelmixin method)": [[43, "docarray.array.mixins.parallel.ParallelMixin.apply_batch"]], "docarray.array.mixins.parallel": [[43, "module-docarray.array.mixins.parallel"]], "map() (docarray.array.mixins.parallel.parallelmixin method)": [[43, "docarray.array.mixins.parallel.ParallelMixin.map"]], "map_batch() (docarray.array.mixins.parallel.parallelmixin method)": [[43, "docarray.array.mixins.parallel.ParallelMixin.map_batch"]], "plotmixin (class in docarray.array.mixins.plot)": [[44, "docarray.array.mixins.plot.PlotMixin"]], "docarray.array.mixins.plot": [[44, "module-docarray.array.mixins.plot"]], "plot_embeddings() (docarray.array.mixins.plot.plotmixin method)": [[44, "docarray.array.mixins.plot.PlotMixin.plot_embeddings"]], "plot_image_sprites() (docarray.array.mixins.plot.plotmixin method)": [[44, "docarray.array.mixins.plot.PlotMixin.plot_image_sprites"]], "save_gif() (docarray.array.mixins.plot.plotmixin method)": [[44, "docarray.array.mixins.plot.PlotMixin.save_gif"]], "summary() (docarray.array.mixins.plot.plotmixin method)": [[44, "docarray.array.mixins.plot.PlotMixin.summary"]], "postmixin (class in docarray.array.mixins.post)": [[45, "docarray.array.mixins.post.PostMixin"]], "docarray.array.mixins.post": [[45, "module-docarray.array.mixins.post"]], "post() (docarray.array.mixins.post.postmixin method)": [[45, "docarray.array.mixins.post.PostMixin.post"]], "pydanticmixin (class in docarray.array.mixins.pydantic)": [[46, "docarray.array.mixins.pydantic.PydanticMixin"]], "docarray.array.mixins.pydantic": [[46, "module-docarray.array.mixins.pydantic"]], "from_pydantic_model() (docarray.array.mixins.pydantic.pydanticmixin class method)": [[46, "docarray.array.mixins.pydantic.PydanticMixin.from_pydantic_model"]], "get_json_schema() (docarray.array.mixins.pydantic.pydanticmixin class method)": [[46, "docarray.array.mixins.pydantic.PydanticMixin.get_json_schema"]], "to_pydantic_model() (docarray.array.mixins.pydantic.pydanticmixin method)": [[46, "docarray.array.mixins.pydantic.PydanticMixin.to_pydantic_model"]], "reducemixin (class in docarray.array.mixins.reduce)": [[47, "docarray.array.mixins.reduce.ReduceMixin"]], "docarray.array.mixins.reduce": [[47, "module-docarray.array.mixins.reduce"]], "reduce() (docarray.array.mixins.reduce.reducemixin method)": [[47, "docarray.array.mixins.reduce.ReduceMixin.reduce"]], "reduce_all() (docarray.array.mixins.reduce.reducemixin method)": [[47, "docarray.array.mixins.reduce.ReduceMixin.reduce_all"]], "samplemixin (class in docarray.array.mixins.sample)": [[48, "docarray.array.mixins.sample.SampleMixin"]], "docarray.array.mixins.sample": [[48, "module-docarray.array.mixins.sample"]], "sample() (docarray.array.mixins.sample.samplemixin method)": [[48, "docarray.array.mixins.sample.SampleMixin.sample"]], "shuffle() (docarray.array.mixins.sample.samplemixin method)": [[48, "docarray.array.mixins.sample.SampleMixin.shuffle"]], "setitemmixin (class in docarray.array.mixins.setitem)": [[49, "docarray.array.mixins.setitem.SetItemMixin"]], "docarray.array.mixins.setitem": [[49, "module-docarray.array.mixins.setitem"]], "strawberrymixin (class in docarray.array.mixins.strawberry)": [[50, "docarray.array.mixins.strawberry.StrawberryMixin"]], "docarray.array.mixins.strawberry": [[50, "module-docarray.array.mixins.strawberry"]], "from_strawberry_type() (docarray.array.mixins.strawberry.strawberrymixin class method)": [[50, "docarray.array.mixins.strawberry.StrawberryMixin.from_strawberry_type"]], "to_strawberry_type() (docarray.array.mixins.strawberry.strawberrymixin method)": [[50, "docarray.array.mixins.strawberry.StrawberryMixin.to_strawberry_type"]], "texttoolsmixin (class in docarray.array.mixins.text)": [[51, "docarray.array.mixins.text.TextToolsMixin"]], "docarray.array.mixins.text": [[51, "module-docarray.array.mixins.text"]], "get_vocabulary() (docarray.array.mixins.text.texttoolsmixin method)": [[51, "docarray.array.mixins.text.TextToolsMixin.get_vocabulary"]], "traversemixin (class in docarray.array.mixins.traverse)": [[52, "docarray.array.mixins.traverse.TraverseMixin"]], "docarray.array.mixins.traverse": [[52, "module-docarray.array.mixins.traverse"]], "flatten() (docarray.array.mixins.traverse.traversemixin method)": [[52, "docarray.array.mixins.traverse.TraverseMixin.flatten"]], "traverse() (docarray.array.mixins.traverse.traversemixin method)": [[52, "docarray.array.mixins.traverse.TraverseMixin.traverse"]], "traverse_flat() (docarray.array.mixins.traverse.traversemixin method)": [[52, "docarray.array.mixins.traverse.TraverseMixin.traverse_flat"]], "traverse_flat_per_path() (docarray.array.mixins.traverse.traversemixin method)": [[52, "docarray.array.mixins.traverse.TraverseMixin.traverse_flat_per_path"]], "documentarrayqdrant (class in docarray.array.qdrant)": [[53, "docarray.array.qdrant.DocumentArrayQdrant"]], "qdrantconfig (class in docarray.array.qdrant)": [[53, "docarray.array.qdrant.QdrantConfig"]], "type_map (docarray.array.qdrant.documentarrayqdrant attribute)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.TYPE_MAP"]], "append() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.append"]], "apply() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.apply"]], "apply_batch() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.apply_batch"]], "batch() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.batch"]], "batch_ids() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.batch_ids"]], "blobs (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.blobs"]], "clear() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.clear"]], "client (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.client"]], "cloud_delete() (docarray.array.qdrant.documentarrayqdrant static method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.cloud_delete"]], "cloud_list() (docarray.array.qdrant.documentarrayqdrant static method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.cloud_list"]], "cloud_pull() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.cloud_pull"]], "cloud_push() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.cloud_push"]], "collection_name (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.collection_name"]], "collection_name (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.collection_name"]], "collection_name_meta (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.collection_name_meta"]], "columns (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.columns"]], "config (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.config"]], "contents (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.contents"]], "count() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.count"]], "dataloader() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.dataloader"]], "distance (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.distance"]], "distance (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.distance"]], "docarray.array.qdrant": [[53, "module-docarray.array.qdrant"]], "ef_construct (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.ef_construct"]], "embed() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.embed"]], "embeddings (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.embeddings"]], "empty() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.empty"]], "evaluate() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.evaluate"]], "extend() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.extend"]], "find() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.find"]], "flatten() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.flatten"]], "from_base64() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_base64"]], "from_bytes() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_bytes"]], "from_csv() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_csv"]], "from_dataframe() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_dataframe"]], "from_dict() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_dict"]], "from_files() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_files"]], "from_huggingface_datasets() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_huggingface_datasets"]], "from_json() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_json"]], "from_lines() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_lines"]], "from_list() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_list"]], "from_ndarray() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_ndarray"]], "from_ndjson() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_ndjson"]], "from_protobuf() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_protobuf"]], "from_pydantic_model() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_pydantic_model"]], "from_strawberry_type() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_strawberry_type"]], "full_scan_threshold (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.full_scan_threshold"]], "get_json_schema() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.get_json_schema"]], "get_vocabulary() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.get_vocabulary"]], "host (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.host"]], "index() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.index"]], "insert() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.insert"]], "load() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.load"]], "load_binary() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.load_binary"]], "load_csv() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.load_csv"]], "load_json() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.load_json"]], "m (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.m"]], "map() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.map"]], "map_batch() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.map_batch"]], "match() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.match"]], "n_dim (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.n_dim"]], "n_dim (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.n_dim"]], "plot_embeddings() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.plot_embeddings"]], "plot_image_sprites() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.plot_image_sprites"]], "pop() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.pop"]], "port (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.port"]], "post() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.post"]], "pull() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.pull"]], "push() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.push"]], "reduce() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.reduce"]], "reduce_all() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.reduce_all"]], "remove() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.remove"]], "reverse() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.reverse"]], "sample() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.sample"]], "save() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save"]], "save_binary() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save_binary"]], "save_csv() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save_csv"]], "save_embeddings_csv() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save_embeddings_csv"]], "save_gif() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save_gif"]], "save_json() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save_json"]], "scan() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.scan"]], "scroll_batch_size (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.scroll_batch_size"]], "scroll_batch_size (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.scroll_batch_size"]], "serialization_config (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.serialization_config"]], "serialize_config (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.serialize_config"]], "serialize_config (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.serialize_config"]], "shuffle() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.shuffle"]], "split_by_tag() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.split_by_tag"]], "summary() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.summary"]], "sync() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.sync"]], "tensors (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.tensors"]], "texts (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.texts"]], "to_base64() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_base64"]], "to_bytes() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_bytes"]], "to_dataframe() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_dataframe"]], "to_dict() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_dict"]], "to_json() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_json"]], "to_list() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_list"]], "to_protobuf() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_protobuf"]], "to_pydantic_model() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_pydantic_model"]], "to_strawberry_type() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_strawberry_type"]], "traverse() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.traverse"]], "traverse_flat() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.traverse_flat"]], "traverse_flat_per_path() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.traverse_flat_per_path"]], "docarray.array.queryset": [[54, "module-docarray.array.queryset"]], "lookupleaf (class in docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.LookupLeaf"]], "lookupnode (class in docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.LookupNode"]], "lookuptreeelem (class in docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.LookupTreeElem"]], "lookupyerror": [[55, "docarray.array.queryset.lookup.LookupyError"]], "q (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.Q"]], "add_child() (docarray.array.queryset.lookup.lookupnode method)": [[55, "docarray.array.queryset.lookup.LookupNode.add_child"]], "args (docarray.array.queryset.lookup.lookupyerror attribute)": [[55, "docarray.array.queryset.lookup.LookupyError.args"]], "docarray.array.queryset.lookup": [[55, "module-docarray.array.queryset.lookup"]], "dunder_partition() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.dunder_partition"]], "evaluate() (docarray.array.queryset.lookup.lookupleaf method)": [[55, "docarray.array.queryset.lookup.LookupLeaf.evaluate"]], "evaluate() (docarray.array.queryset.lookup.lookupnode method)": [[55, "docarray.array.queryset.lookup.LookupNode.evaluate"]], "evaluate() (docarray.array.queryset.lookup.lookuptreeelem method)": [[55, "docarray.array.queryset.lookup.LookupTreeElem.evaluate"]], "guard_q() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.guard_Q"]], "guard_iter() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.guard_iter"]], "guard_list() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.guard_list"]], "guard_str() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.guard_str"]], "guard_type() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.guard_type"]], "iff() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.iff"]], "iff_not_none() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.iff_not_none"]], "lookup() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.lookup"]], "with_traceback() (docarray.array.queryset.lookup.lookupyerror method)": [[55, "docarray.array.queryset.lookup.LookupyError.with_traceback"]], "queryparser (class in docarray.array.queryset.parser)": [[56, "docarray.array.queryset.parser.QueryParser"]], "docarray.array.queryset.parser": [[56, "module-docarray.array.queryset.parser"]], "evaluate() (docarray.array.queryset.parser.queryparser method)": [[56, "docarray.array.queryset.parser.QueryParser.evaluate"]], "documentarrayredis (class in docarray.array.redis)": [[57, "docarray.array.redis.DocumentArrayRedis"]], "redisconfig (class in docarray.array.redis)": [[57, "docarray.array.redis.RedisConfig"]], "type_map (docarray.array.redis.documentarrayredis attribute)": [[57, "docarray.array.redis.DocumentArrayRedis.TYPE_MAP"]], "append() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.append"]], "apply() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.apply"]], "apply_batch() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.apply_batch"]], "batch() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.batch"]], "batch_ids() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.batch_ids"]], "batch_size (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.batch_size"]], "blobs (docarray.array.redis.documentarrayredis property)": [[57, "docarray.array.redis.DocumentArrayRedis.blobs"]], "block_size (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.block_size"]], "clear() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.clear"]], "cloud_delete() (docarray.array.redis.documentarrayredis static method)": [[57, "docarray.array.redis.DocumentArrayRedis.cloud_delete"]], "cloud_list() (docarray.array.redis.documentarrayredis static method)": [[57, "docarray.array.redis.DocumentArrayRedis.cloud_list"]], "cloud_pull() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.cloud_pull"]], "cloud_push() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.cloud_push"]], "columns (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.columns"]], "contents (docarray.array.redis.documentarrayredis property)": [[57, "docarray.array.redis.DocumentArrayRedis.contents"]], "count() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.count"]], "dataloader() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.dataloader"]], "distance (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.distance"]], "docarray.array.redis": [[57, "module-docarray.array.redis"]], "ef_construction (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.ef_construction"]], "ef_runtime (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.ef_runtime"]], "embed() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.embed"]], "embeddings (docarray.array.redis.documentarrayredis property)": [[57, "docarray.array.redis.DocumentArrayRedis.embeddings"]], "empty() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.empty"]], "evaluate() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.evaluate"]], "extend() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.extend"]], "find() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.find"]], "flatten() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.flatten"]], "from_base64() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_base64"]], "from_bytes() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_bytes"]], "from_csv() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_csv"]], "from_dataframe() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_dataframe"]], "from_dict() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_dict"]], "from_files() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_files"]], "from_huggingface_datasets() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_huggingface_datasets"]], "from_json() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_json"]], "from_lines() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_lines"]], "from_list() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_list"]], "from_ndarray() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_ndarray"]], "from_ndjson() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_ndjson"]], "from_protobuf() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_protobuf"]], "from_pydantic_model() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_pydantic_model"]], "from_strawberry_type() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.from_strawberry_type"]], "get_json_schema() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.get_json_schema"]], "get_vocabulary() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.get_vocabulary"]], "host (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.host"]], "index() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.index"]], "index_name (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.index_name"]], "index_text (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.index_text"]], "initial_cap (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.initial_cap"]], "insert() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.insert"]], "load() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.load"]], "load_binary() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.load_binary"]], "load_csv() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.load_csv"]], "load_json() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.load_json"]], "m (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.m"]], "map() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.map"]], "map_batch() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.map_batch"]], "match() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.match"]], "method (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.method"]], "n_dim (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.n_dim"]], "plot_embeddings() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.plot_embeddings"]], "plot_image_sprites() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.plot_image_sprites"]], "pop() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.pop"]], "port (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.port"]], "post() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.post"]], "pull() (docarray.array.redis.documentarrayredis class method)": [[57, "docarray.array.redis.DocumentArrayRedis.pull"]], "push() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.push"]], "redis_config (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.redis_config"]], "reduce() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.reduce"]], "reduce_all() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.reduce_all"]], "remove() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.remove"]], "reverse() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.reverse"]], "sample() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.sample"]], "save() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.save"]], "save_binary() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.save_binary"]], "save_csv() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.save_csv"]], "save_embeddings_csv() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.save_embeddings_csv"]], "save_gif() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.save_gif"]], "save_json() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.save_json"]], "shuffle() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.shuffle"]], "split_by_tag() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.split_by_tag"]], "summary() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.summary"]], "sync() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.sync"]], "tag_indices (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.tag_indices"]], "tensors (docarray.array.redis.documentarrayredis property)": [[57, "docarray.array.redis.DocumentArrayRedis.tensors"]], "texts (docarray.array.redis.documentarrayredis property)": [[57, "docarray.array.redis.DocumentArrayRedis.texts"]], "to_base64() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_base64"]], "to_bytes() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_bytes"]], "to_dataframe() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_dataframe"]], "to_dict() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_dict"]], "to_json() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_json"]], "to_list() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_list"]], "to_protobuf() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_protobuf"]], "to_pydantic_model() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_pydantic_model"]], "to_strawberry_type() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.to_strawberry_type"]], "traverse() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.traverse"]], "traverse_flat() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.traverse_flat"]], "traverse_flat_per_path() (docarray.array.redis.documentarrayredis method)": [[57, "docarray.array.redis.DocumentArrayRedis.traverse_flat_per_path"]], "update_schema (docarray.array.redis.redisconfig attribute)": [[57, "docarray.array.redis.RedisConfig.update_schema"]], "documentarraysqlite (class in docarray.array.sqlite)": [[58, "docarray.array.sqlite.DocumentArraySqlite"]], "sqliteconfig (class in docarray.array.sqlite)": [[58, "docarray.array.sqlite.SqliteConfig"]], "type_map (docarray.array.sqlite.documentarraysqlite attribute)": [[58, "docarray.array.sqlite.DocumentArraySqlite.TYPE_MAP"]], "append() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.append"]], "apply() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.apply"]], "apply_batch() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.apply_batch"]], "batch() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.batch"]], "batch_ids() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.batch_ids"]], "blobs (docarray.array.sqlite.documentarraysqlite property)": [[58, "docarray.array.sqlite.DocumentArraySqlite.blobs"]], "clear() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.clear"]], "cloud_delete() (docarray.array.sqlite.documentarraysqlite static method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.cloud_delete"]], "cloud_list() (docarray.array.sqlite.documentarraysqlite static method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.cloud_list"]], "cloud_pull() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.cloud_pull"]], "cloud_push() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.cloud_push"]], "conn_config (docarray.array.sqlite.sqliteconfig attribute)": [[58, "docarray.array.sqlite.SqliteConfig.conn_config"]], "connection (docarray.array.sqlite.sqliteconfig attribute)": [[58, "docarray.array.sqlite.SqliteConfig.connection"]], "contents (docarray.array.sqlite.documentarraysqlite property)": [[58, "docarray.array.sqlite.DocumentArraySqlite.contents"]], "count() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.count"]], "dataloader() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.dataloader"]], "docarray.array.sqlite": [[58, "module-docarray.array.sqlite"]], "embed() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.embed"]], "embeddings (docarray.array.sqlite.documentarraysqlite property)": [[58, "docarray.array.sqlite.DocumentArraySqlite.embeddings"]], "empty() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.empty"]], "evaluate() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.evaluate"]], "extend() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.extend"]], "find() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.find"]], "flatten() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.flatten"]], "from_base64() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_base64"]], "from_bytes() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_bytes"]], "from_csv() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_csv"]], "from_dataframe() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_dataframe"]], "from_dict() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_dict"]], "from_files() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_files"]], "from_huggingface_datasets() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_huggingface_datasets"]], "from_json() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_json"]], "from_lines() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_lines"]], "from_list() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_list"]], "from_ndarray() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_ndarray"]], "from_ndjson() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_ndjson"]], "from_protobuf() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_protobuf"]], "from_pydantic_model() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_pydantic_model"]], "from_strawberry_type() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.from_strawberry_type"]], "get_json_schema() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.get_json_schema"]], "get_vocabulary() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.get_vocabulary"]], "index() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.index"]], "insert() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.insert"]], "journal_mode (docarray.array.sqlite.sqliteconfig attribute)": [[58, "docarray.array.sqlite.SqliteConfig.journal_mode"]], "load() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.load"]], "load_binary() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.load_binary"]], "load_csv() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.load_csv"]], "load_json() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.load_json"]], "map() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.map"]], "map_batch() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.map_batch"]], "match() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.match"]], "plot_embeddings() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.plot_embeddings"]], "plot_image_sprites() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.plot_image_sprites"]], "pop() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.pop"]], "post() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.post"]], "pull() (docarray.array.sqlite.documentarraysqlite class method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.pull"]], "push() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.push"]], "reduce() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.reduce"]], "reduce_all() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.reduce_all"]], "remove() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.remove"]], "reverse() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.reverse"]], "sample() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.sample"]], "save() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.save"]], "save_binary() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.save_binary"]], "save_csv() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.save_csv"]], "save_embeddings_csv() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.save_embeddings_csv"]], "save_gif() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.save_gif"]], "save_json() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.save_json"]], "schema_version (docarray.array.sqlite.documentarraysqlite attribute)": [[58, "docarray.array.sqlite.DocumentArraySqlite.schema_version"]], "serialize_config (docarray.array.sqlite.sqliteconfig attribute)": [[58, "docarray.array.sqlite.SqliteConfig.serialize_config"]], "shuffle() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.shuffle"]], "split_by_tag() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.split_by_tag"]], "summary() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.summary"]], "sync() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.sync"]], "synchronous (docarray.array.sqlite.sqliteconfig attribute)": [[58, "docarray.array.sqlite.SqliteConfig.synchronous"]], "table_name (docarray.array.sqlite.sqliteconfig attribute)": [[58, "docarray.array.sqlite.SqliteConfig.table_name"]], "tensors (docarray.array.sqlite.documentarraysqlite property)": [[58, "docarray.array.sqlite.DocumentArraySqlite.tensors"]], "texts (docarray.array.sqlite.documentarraysqlite property)": [[58, "docarray.array.sqlite.DocumentArraySqlite.texts"]], "to_base64() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_base64"]], "to_bytes() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_bytes"]], "to_dataframe() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_dataframe"]], "to_dict() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_dict"]], "to_json() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_json"]], "to_list() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_list"]], "to_protobuf() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_protobuf"]], "to_pydantic_model() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_pydantic_model"]], "to_strawberry_type() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.to_strawberry_type"]], "traverse() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.traverse"]], "traverse_flat() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.traverse_flat"]], "traverse_flat_per_path() (docarray.array.sqlite.documentarraysqlite method)": [[58, "docarray.array.sqlite.DocumentArraySqlite.traverse_flat_per_path"]], "docarray.array.storage": [[59, "module-docarray.array.storage"]], "annliteconfig (class in docarray.array.storage.annlite)": [[60, "docarray.array.storage.annlite.AnnliteConfig"]], "storagemixins (class in docarray.array.storage.annlite)": [[60, "docarray.array.storage.annlite.StorageMixins"]], "type_map (docarray.array.storage.annlite.storagemixins attribute)": [[60, "docarray.array.storage.annlite.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.append"]], "clear() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.clear"]], "columns (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.columns"]], "count() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.count"]], "data_path (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.data_path"]], "docarray.array.storage.annlite": [[60, "module-docarray.array.storage.annlite"]], "ef_construction (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.ef_search"]], "extend() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.extend"]], "index() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.index"]], "insert() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.insert"]], "max_connection (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.max_connection"]], "metric (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.metric"]], "n_components (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.n_components"]], "n_dim (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.n_dim"]], "pop() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.pop"]], "remove() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.remove"]], "reverse() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.reverse"]], "serialize_config (docarray.array.storage.annlite.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.AnnliteConfig.serialize_config"]], "sync() (docarray.array.storage.annlite.storagemixins method)": [[60, "docarray.array.storage.annlite.StorageMixins.sync"]], "annliteconfig (class in docarray.array.storage.annlite.backend)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig"]], "backendmixin (class in docarray.array.storage.annlite.backend)": [[61, "docarray.array.storage.annlite.backend.BackendMixin"]], "type_map (docarray.array.storage.annlite.backend.backendmixin attribute)": [[61, "docarray.array.storage.annlite.backend.BackendMixin.TYPE_MAP"]], "columns (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.columns"]], "data_path (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.data_path"]], "docarray.array.storage.annlite.backend": [[61, "module-docarray.array.storage.annlite.backend"]], "ef_construction (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.ef_search"]], "max_connection (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.max_connection"]], "metric (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.metric"]], "n_components (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.n_components"]], "n_dim (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.n_dim"]], "serialize_config (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[61, "docarray.array.storage.annlite.backend.AnnliteConfig.serialize_config"]], "findmixin (class in docarray.array.storage.annlite.find)": [[62, "docarray.array.storage.annlite.find.FindMixin"]], "docarray.array.storage.annlite.find": [[62, "module-docarray.array.storage.annlite.find"]], "getsetdelmixin (class in docarray.array.storage.annlite.getsetdel)": [[63, "docarray.array.storage.annlite.getsetdel.GetSetDelMixin"]], "docarray.array.storage.annlite.getsetdel": [[63, "module-docarray.array.storage.annlite.getsetdel"]], "sync() (docarray.array.storage.annlite.getsetdel.getsetdelmixin method)": [[63, "docarray.array.storage.annlite.getsetdel.GetSetDelMixin.sync"]], "offsetmapping (class in docarray.array.storage.annlite.helper)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping"]], "clear() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.clear"]], "close() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.close"]], "commit() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.commit"]], "create_table() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.create_table"]], "del_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.del_at_offset"]], "del_at_offsets() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.del_at_offsets"]], "docarray.array.storage.annlite.helper": [[64, "module-docarray.array.storage.annlite.helper"]], "drop() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.drop"]], "drop_table() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.drop_table"]], "dump() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.dump"]], "execute() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.execute"]], "execute_many() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.execute_many"]], "extend_doc_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.extend_doc_ids"]], "get_all_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.get_all_ids"]], "get_id_by_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.get_id_by_offset"]], "get_ids_by_offsets() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.get_ids_by_offsets"]], "get_offset_by_id() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.get_offset_by_id"]], "get_offsets_by_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.get_offsets_by_ids"]], "insert_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.insert_at_offset"]], "load() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.load"]], "name (docarray.array.storage.annlite.helper.offsetmapping property)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.name"]], "schema (docarray.array.storage.annlite.helper.offsetmapping property)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.schema"]], "set_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.set_at_offset"]], "shift_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.shift_offset"]], "size (docarray.array.storage.annlite.helper.offsetmapping property)": [[64, "docarray.array.storage.annlite.helper.OffsetMapping.size"]], "sequencelikemixin (class in docarray.array.storage.annlite.seqlike)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.annlite.seqlike": [[65, "module-docarray.array.storage.annlite.seqlike"]], "extend() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[65, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.reverse"]], "docarray.array.storage.base": [[66, "module-docarray.array.storage.base"]], "basebackendmixin (class in docarray.array.storage.base.backend)": [[67, "docarray.array.storage.base.backend.BaseBackendMixin"]], "type_map (docarray.array.storage.base.backend.basebackendmixin attribute)": [[67, "docarray.array.storage.base.backend.BaseBackendMixin.TYPE_MAP"]], "typemap (class in docarray.array.storage.base.backend)": [[67, "docarray.array.storage.base.backend.TypeMap"]], "converter (docarray.array.storage.base.backend.typemap property)": [[67, "docarray.array.storage.base.backend.TypeMap.converter"]], "count() (docarray.array.storage.base.backend.typemap method)": [[67, "docarray.array.storage.base.backend.TypeMap.count"]], "docarray.array.storage.base.backend": [[67, "module-docarray.array.storage.base.backend"]], "index() (docarray.array.storage.base.backend.typemap method)": [[67, "docarray.array.storage.base.backend.TypeMap.index"]], "type (docarray.array.storage.base.backend.typemap property)": [[67, "docarray.array.storage.base.backend.TypeMap.type"]], "basegetsetdelmixin (class in docarray.array.storage.base.getsetdel)": [[68, "docarray.array.storage.base.getsetdel.BaseGetSetDelMixin"]], "docarray.array.storage.base.getsetdel": [[68, "module-docarray.array.storage.base.getsetdel"]], "sync() (docarray.array.storage.base.getsetdel.basegetsetdelmixin method)": [[68, "docarray.array.storage.base.getsetdel.BaseGetSetDelMixin.sync"]], "offset2id (class in docarray.array.storage.base.helper)": [[69, "docarray.array.storage.base.helper.Offset2ID"]], "append() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.append"]], "clear() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.clear"]], "delete_by_id() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.delete_by_id"]], "delete_by_ids() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.delete_by_ids"]], "delete_by_offset() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.delete_by_offset"]], "docarray.array.storage.base.helper": [[69, "module-docarray.array.storage.base.helper"]], "extend() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.extend"]], "get_id() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.get_id"]], "index() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.index"]], "insert() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.insert"]], "load() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.load"]], "save() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.save"]], "update() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.update"]], "update_ids() (docarray.array.storage.base.helper.offset2id method)": [[69, "docarray.array.storage.base.helper.Offset2ID.update_ids"]], "basesequencelikemixin (class in docarray.array.storage.base.seqlike)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin"]], "append() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.append"]], "clear() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.clear"]], "count() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.count"]], "docarray.array.storage.base.seqlike": [[70, "module-docarray.array.storage.base.seqlike"]], "extend() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.extend"]], "index() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.index"]], "insert() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.insert"]], "pop() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.pop"]], "remove() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[70, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.reverse"]], "elasticconfig (class in docarray.array.storage.elastic)": [[71, "docarray.array.storage.elastic.ElasticConfig"]], "max_es_returned_docs (docarray.array.storage.elastic.storagemixins attribute)": [[71, "docarray.array.storage.elastic.StorageMixins.MAX_ES_RETURNED_DOCS"]], "storagemixins (class in docarray.array.storage.elastic)": [[71, "docarray.array.storage.elastic.StorageMixins"]], "type_map (docarray.array.storage.elastic.storagemixins attribute)": [[71, "docarray.array.storage.elastic.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.append"]], "batch_size (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.batch_size"]], "clear() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.clear"]], "columns (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.columns"]], "count() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.count"]], "distance (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.distance"]], "docarray.array.storage.elastic": [[71, "module-docarray.array.storage.elastic"]], "ef_construction (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.ef_construction"]], "es_config (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.es_config"]], "extend() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.extend"]], "find() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.find"]], "hosts (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.hosts"]], "index() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.index"]], "index_name (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.index_name"]], "index_text (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.index_text"]], "insert() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.insert"]], "m (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.m"]], "n_dim (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.n_dim"]], "pop() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.pop"]], "remove() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.remove"]], "reverse() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.reverse"]], "sync() (docarray.array.storage.elastic.storagemixins method)": [[71, "docarray.array.storage.elastic.StorageMixins.sync"]], "tag_indices (docarray.array.storage.elastic.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.ElasticConfig.tag_indices"]], "backendmixin (class in docarray.array.storage.elastic.backend)": [[72, "docarray.array.storage.elastic.backend.BackendMixin"]], "elasticconfig (class in docarray.array.storage.elastic.backend)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig"]], "type_map (docarray.array.storage.elastic.backend.backendmixin attribute)": [[72, "docarray.array.storage.elastic.backend.BackendMixin.TYPE_MAP"]], "batch_size (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.batch_size"]], "columns (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.columns"]], "distance (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.distance"]], "docarray.array.storage.elastic.backend": [[72, "module-docarray.array.storage.elastic.backend"]], "ef_construction (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.ef_construction"]], "es_config (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.es_config"]], "hosts (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.hosts"]], "index_name (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.index_name"]], "index_text (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.index_text"]], "m (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.m"]], "n_dim (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.n_dim"]], "tag_indices (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[72, "docarray.array.storage.elastic.backend.ElasticConfig.tag_indices"]], "findmixin (class in docarray.array.storage.elastic.find)": [[73, "docarray.array.storage.elastic.find.FindMixin"]], "docarray.array.storage.elastic.find": [[73, "module-docarray.array.storage.elastic.find"]], "find() (docarray.array.storage.elastic.find.findmixin method)": [[73, "docarray.array.storage.elastic.find.FindMixin.find"]], "getsetdelmixin (class in docarray.array.storage.elastic.getsetdel)": [[74, "docarray.array.storage.elastic.getsetdel.GetSetDelMixin"]], "max_es_returned_docs (docarray.array.storage.elastic.getsetdel.getsetdelmixin attribute)": [[74, "docarray.array.storage.elastic.getsetdel.GetSetDelMixin.MAX_ES_RETURNED_DOCS"]], "docarray.array.storage.elastic.getsetdel": [[74, "module-docarray.array.storage.elastic.getsetdel"]], "sync() (docarray.array.storage.elastic.getsetdel.getsetdelmixin method)": [[74, "docarray.array.storage.elastic.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.elastic.seqlike)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.elastic.seqlike": [[75, "module-docarray.array.storage.elastic.seqlike"]], "extend() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[75, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.reverse"]], "storagemixins (class in docarray.array.storage.memory)": [[76, "docarray.array.storage.memory.StorageMixins"]], "type_map (docarray.array.storage.memory.storagemixins attribute)": [[76, "docarray.array.storage.memory.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.append"]], "clear() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.clear"]], "count() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.count"]], "docarray.array.storage.memory": [[76, "module-docarray.array.storage.memory"]], "extend() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.extend"]], "index() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.index"]], "insert() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.insert"]], "pop() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.pop"]], "remove() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.remove"]], "reverse() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.reverse"]], "sync() (docarray.array.storage.memory.storagemixins method)": [[76, "docarray.array.storage.memory.StorageMixins.sync"]], "backendmixin (class in docarray.array.storage.memory.backend)": [[77, "docarray.array.storage.memory.backend.BackendMixin"]], "type_map (docarray.array.storage.memory.backend.backendmixin attribute)": [[77, "docarray.array.storage.memory.backend.BackendMixin.TYPE_MAP"]], "docarray.array.storage.memory.backend": [[77, "module-docarray.array.storage.memory.backend"]], "needs_id2offset_rebuild() (in module docarray.array.storage.memory.backend)": [[77, "docarray.array.storage.memory.backend.needs_id2offset_rebuild"]], "findmixin (class in docarray.array.storage.memory.find)": [[78, "docarray.array.storage.memory.find.FindMixin"]], "docarray.array.storage.memory.find": [[78, "module-docarray.array.storage.memory.find"]], "getsetdelmixin (class in docarray.array.storage.memory.getsetdel)": [[79, "docarray.array.storage.memory.getsetdel.GetSetDelMixin"]], "docarray.array.storage.memory.getsetdel": [[79, "module-docarray.array.storage.memory.getsetdel"]], "sync() (docarray.array.storage.memory.getsetdel.getsetdelmixin method)": [[79, "docarray.array.storage.memory.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.memory.seqlike)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.memory.seqlike": [[80, "module-docarray.array.storage.memory.seqlike"]], "extend() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[80, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.reverse"]], "qdrantconfig (class in docarray.array.storage.qdrant)": [[81, "docarray.array.storage.qdrant.QdrantConfig"]], "storagemixins (class in docarray.array.storage.qdrant)": [[81, "docarray.array.storage.qdrant.StorageMixins"]], "type_map (docarray.array.storage.qdrant.storagemixins attribute)": [[81, "docarray.array.storage.qdrant.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.append"]], "clear() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.clear"]], "client (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.client"]], "collection_name (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.collection_name"]], "collection_name (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.collection_name"]], "collection_name_meta (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.collection_name_meta"]], "columns (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.columns"]], "config (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.config"]], "count() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.count"]], "distance (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.distance"]], "distance (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.distance"]], "docarray.array.storage.qdrant": [[81, "module-docarray.array.storage.qdrant"]], "ef_construct (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.ef_construct"]], "extend() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.extend"]], "full_scan_threshold (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.full_scan_threshold"]], "host (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.host"]], "index() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.index"]], "insert() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.insert"]], "m (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.m"]], "n_dim (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.n_dim"]], "n_dim (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.n_dim"]], "pop() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.pop"]], "port (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.port"]], "remove() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.remove"]], "reverse() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.reverse"]], "scan() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.scan"]], "scroll_batch_size (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.scroll_batch_size"]], "scroll_batch_size (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.scroll_batch_size"]], "serialization_config (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.serialization_config"]], "serialize_config (docarray.array.storage.qdrant.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.QdrantConfig.serialize_config"]], "serialize_config (docarray.array.storage.qdrant.storagemixins property)": [[81, "docarray.array.storage.qdrant.StorageMixins.serialize_config"]], "sync() (docarray.array.storage.qdrant.storagemixins method)": [[81, "docarray.array.storage.qdrant.StorageMixins.sync"]], "backendmixin (class in docarray.array.storage.qdrant.backend)": [[82, "docarray.array.storage.qdrant.backend.BackendMixin"]], "qdrantconfig (class in docarray.array.storage.qdrant.backend)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig"]], "type_map (docarray.array.storage.qdrant.backend.backendmixin attribute)": [[82, "docarray.array.storage.qdrant.backend.BackendMixin.TYPE_MAP"]], "collection_name (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.collection_name"]], "columns (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.columns"]], "distance (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.distance"]], "docarray.array.storage.qdrant.backend": [[82, "module-docarray.array.storage.qdrant.backend"]], "ef_construct (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.ef_construct"]], "full_scan_threshold (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.full_scan_threshold"]], "host (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.host"]], "m (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.m"]], "n_dim (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.n_dim"]], "port (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.port"]], "scroll_batch_size (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.scroll_batch_size"]], "serialize_config (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[82, "docarray.array.storage.qdrant.backend.QdrantConfig.serialize_config"]], "findmixin (class in docarray.array.storage.qdrant.find)": [[83, "docarray.array.storage.qdrant.find.FindMixin"]], "client (docarray.array.storage.qdrant.find.findmixin property)": [[83, "docarray.array.storage.qdrant.find.FindMixin.client"]], "collection_name (docarray.array.storage.qdrant.find.findmixin property)": [[83, "docarray.array.storage.qdrant.find.FindMixin.collection_name"]], "distance (docarray.array.storage.qdrant.find.findmixin property)": [[83, "docarray.array.storage.qdrant.find.FindMixin.distance"]], "docarray.array.storage.qdrant.find": [[83, "module-docarray.array.storage.qdrant.find"]], "serialize_config (docarray.array.storage.qdrant.find.findmixin property)": [[83, "docarray.array.storage.qdrant.find.FindMixin.serialize_config"]], "getsetdelmixin (class in docarray.array.storage.qdrant.getsetdel)": [[84, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin"]], "client (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[84, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.client"]], "collection_name (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[84, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.collection_name"]], "docarray.array.storage.qdrant.getsetdel": [[84, "module-docarray.array.storage.qdrant.getsetdel"]], "n_dim (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[84, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.n_dim"]], "scan() (docarray.array.storage.qdrant.getsetdel.getsetdelmixin method)": [[84, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.scan"]], "scroll_batch_size (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[84, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.scroll_batch_size"]], "serialization_config (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[84, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.serialization_config"]], "sync() (docarray.array.storage.qdrant.getsetdel.getsetdelmixin method)": [[84, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.sync"]], "docarray.array.storage.qdrant.helper": [[85, "module-docarray.array.storage.qdrant.helper"]], "sequencelikemixin (class in docarray.array.storage.qdrant.seqlike)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.clear"]], "client (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.client"]], "collection_name (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.collection_name"]], "config (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.config"]], "count() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.qdrant.seqlike": [[86, "module-docarray.array.storage.qdrant.seqlike"]], "extend() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[86, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.reverse"]], "redisconfig (class in docarray.array.storage.redis)": [[87, "docarray.array.storage.redis.RedisConfig"]], "storagemixins (class in docarray.array.storage.redis)": [[87, "docarray.array.storage.redis.StorageMixins"]], "type_map (docarray.array.storage.redis.storagemixins attribute)": [[87, "docarray.array.storage.redis.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.append"]], "batch_size (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.batch_size"]], "block_size (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.block_size"]], "clear() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.clear"]], "columns (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.columns"]], "count() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.count"]], "distance (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.distance"]], "docarray.array.storage.redis": [[87, "module-docarray.array.storage.redis"]], "ef_construction (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.ef_construction"]], "ef_runtime (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.ef_runtime"]], "extend() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.extend"]], "find() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.find"]], "host (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.host"]], "index() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.index"]], "index_name (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.index_name"]], "index_text (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.index_text"]], "initial_cap (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.initial_cap"]], "insert() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.insert"]], "m (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.m"]], "method (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.method"]], "n_dim (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.n_dim"]], "pop() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.pop"]], "port (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.port"]], "redis_config (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.redis_config"]], "remove() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.remove"]], "reverse() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.reverse"]], "sync() (docarray.array.storage.redis.storagemixins method)": [[87, "docarray.array.storage.redis.StorageMixins.sync"]], "tag_indices (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.tag_indices"]], "update_schema (docarray.array.storage.redis.redisconfig attribute)": [[87, "docarray.array.storage.redis.RedisConfig.update_schema"]], "backendmixin (class in docarray.array.storage.redis.backend)": [[88, "docarray.array.storage.redis.backend.BackendMixin"]], "redisconfig (class in docarray.array.storage.redis.backend)": [[88, "docarray.array.storage.redis.backend.RedisConfig"]], "type_map (docarray.array.storage.redis.backend.backendmixin attribute)": [[88, "docarray.array.storage.redis.backend.BackendMixin.TYPE_MAP"]], "batch_size (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.batch_size"]], "block_size (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.block_size"]], "columns (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.columns"]], "distance (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.distance"]], "docarray.array.storage.redis.backend": [[88, "module-docarray.array.storage.redis.backend"]], "ef_construction (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.ef_construction"]], "ef_runtime (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.ef_runtime"]], "host (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.host"]], "index_name (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.index_name"]], "index_text (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.index_text"]], "initial_cap (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.initial_cap"]], "m (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.m"]], "method (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.method"]], "n_dim (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.n_dim"]], "port (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.port"]], "redis_config (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.redis_config"]], "tag_indices (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.tag_indices"]], "update_schema (docarray.array.storage.redis.backend.redisconfig attribute)": [[88, "docarray.array.storage.redis.backend.RedisConfig.update_schema"]], "findmixin (class in docarray.array.storage.redis.find)": [[89, "docarray.array.storage.redis.find.FindMixin"]], "docarray.array.storage.redis.find": [[89, "module-docarray.array.storage.redis.find"]], "find() (docarray.array.storage.redis.find.findmixin method)": [[89, "docarray.array.storage.redis.find.FindMixin.find"]], "getsetdelmixin (class in docarray.array.storage.redis.getsetdel)": [[90, "docarray.array.storage.redis.getsetdel.GetSetDelMixin"]], "docarray.array.storage.redis.getsetdel": [[90, "module-docarray.array.storage.redis.getsetdel"]], "sync() (docarray.array.storage.redis.getsetdel.getsetdelmixin method)": [[90, "docarray.array.storage.redis.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.redis.seqlike)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.redis.seqlike": [[91, "module-docarray.array.storage.redis.seqlike"]], "extend() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.reverse"]], "docarray.array.storage.registry": [[92, "module-docarray.array.storage.registry"]], "sqliteconfig (class in docarray.array.storage.sqlite)": [[93, "docarray.array.storage.sqlite.SqliteConfig"]], "storagemixins (class in docarray.array.storage.sqlite)": [[93, "docarray.array.storage.sqlite.StorageMixins"]], "type_map (docarray.array.storage.sqlite.storagemixins attribute)": [[93, "docarray.array.storage.sqlite.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.append"]], "clear() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.clear"]], "conn_config (docarray.array.storage.sqlite.sqliteconfig attribute)": [[93, "docarray.array.storage.sqlite.SqliteConfig.conn_config"]], "connection (docarray.array.storage.sqlite.sqliteconfig attribute)": [[93, "docarray.array.storage.sqlite.SqliteConfig.connection"]], "count() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.count"]], "docarray.array.storage.sqlite": [[93, "module-docarray.array.storage.sqlite"]], "extend() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.extend"]], "index() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.index"]], "insert() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.insert"]], "journal_mode (docarray.array.storage.sqlite.sqliteconfig attribute)": [[93, "docarray.array.storage.sqlite.SqliteConfig.journal_mode"]], "pop() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.pop"]], "remove() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.remove"]], "reverse() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.reverse"]], "schema_version (docarray.array.storage.sqlite.storagemixins attribute)": [[93, "docarray.array.storage.sqlite.StorageMixins.schema_version"]], "serialize_config (docarray.array.storage.sqlite.sqliteconfig attribute)": [[93, "docarray.array.storage.sqlite.SqliteConfig.serialize_config"]], "sync() (docarray.array.storage.sqlite.storagemixins method)": [[93, "docarray.array.storage.sqlite.StorageMixins.sync"]], "synchronous (docarray.array.storage.sqlite.sqliteconfig attribute)": [[93, "docarray.array.storage.sqlite.SqliteConfig.synchronous"]], "table_name (docarray.array.storage.sqlite.sqliteconfig attribute)": [[93, "docarray.array.storage.sqlite.SqliteConfig.table_name"]], "backendmixin (class in docarray.array.storage.sqlite.backend)": [[94, "docarray.array.storage.sqlite.backend.BackendMixin"]], "sqliteconfig (class in docarray.array.storage.sqlite.backend)": [[94, "docarray.array.storage.sqlite.backend.SqliteConfig"]], "type_map (docarray.array.storage.sqlite.backend.backendmixin attribute)": [[94, "docarray.array.storage.sqlite.backend.BackendMixin.TYPE_MAP"]], "conn_config (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[94, "docarray.array.storage.sqlite.backend.SqliteConfig.conn_config"]], "connection (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[94, "docarray.array.storage.sqlite.backend.SqliteConfig.connection"]], "docarray.array.storage.sqlite.backend": [[94, "module-docarray.array.storage.sqlite.backend"]], "journal_mode (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[94, "docarray.array.storage.sqlite.backend.SqliteConfig.journal_mode"]], "schema_version (docarray.array.storage.sqlite.backend.backendmixin attribute)": [[94, "docarray.array.storage.sqlite.backend.BackendMixin.schema_version"]], "serialize_config (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[94, "docarray.array.storage.sqlite.backend.SqliteConfig.serialize_config"]], "synchronous (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[94, "docarray.array.storage.sqlite.backend.SqliteConfig.synchronous"]], "table_name (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[94, "docarray.array.storage.sqlite.backend.SqliteConfig.table_name"]], "getsetdelmixin (class in docarray.array.storage.sqlite.getsetdel)": [[95, "docarray.array.storage.sqlite.getsetdel.GetSetDelMixin"]], "docarray.array.storage.sqlite.getsetdel": [[95, "module-docarray.array.storage.sqlite.getsetdel"]], "sync() (docarray.array.storage.sqlite.getsetdel.getsetdelmixin method)": [[95, "docarray.array.storage.sqlite.getsetdel.GetSetDelMixin.sync"]], "docarray.array.storage.sqlite.helper": [[96, "module-docarray.array.storage.sqlite.helper"]], "initialize_table() (in module docarray.array.storage.sqlite.helper)": [[96, "docarray.array.storage.sqlite.helper.initialize_table"]], "sequencelikemixin (class in docarray.array.storage.sqlite.seqlike)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.sqlite.seqlike": [[97, "module-docarray.array.storage.sqlite.seqlike"]], "extend() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[97, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.reverse"]], "storagemixins (class in docarray.array.storage.weaviate)": [[98, "docarray.array.storage.weaviate.StorageMixins"]], "type_map (docarray.array.storage.weaviate.storagemixins attribute)": [[98, "docarray.array.storage.weaviate.StorageMixins.TYPE_MAP"]], "weaviateconfig (class in docarray.array.storage.weaviate)": [[98, "docarray.array.storage.weaviate.WeaviateConfig"]], "append() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.append"]], "cleanup_interval_seconds (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.cleanup_interval_seconds"]], "clear() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.clear"]], "columns (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.columns"]], "count() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.count"]], "distance (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.distance"]], "docarray.array.storage.weaviate": [[98, "module-docarray.array.storage.weaviate"]], "dynamic_ef_factor (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.ef"]], "ef_construction (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.ef_construction"]], "extend() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.extend"]], "flat_search_cutoff (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.flat_search_cutoff"]], "host (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.host"]], "index() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.index"]], "insert() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.insert"]], "max_connections (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.max_connections"]], "n_dim (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.n_dim"]], "name (docarray.array.storage.weaviate.storagemixins property)": [[98, "docarray.array.storage.weaviate.StorageMixins.name"]], "name (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.name"]], "pop() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.pop"]], "port (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.port"]], "protocol (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.protocol"]], "remove() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.remove"]], "reverse() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.reverse"]], "serialize_config (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.serialize_config"]], "skip (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.skip"]], "sync() (docarray.array.storage.weaviate.storagemixins method)": [[98, "docarray.array.storage.weaviate.StorageMixins.sync"]], "timeout_config (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.timeout_config"]], "vector_cache_max_objects (docarray.array.storage.weaviate.weaviateconfig attribute)": [[98, "docarray.array.storage.weaviate.WeaviateConfig.vector_cache_max_objects"]], "backendmixin (class in docarray.array.storage.weaviate.backend)": [[99, "docarray.array.storage.weaviate.backend.BackendMixin"]], "type_map (docarray.array.storage.weaviate.backend.backendmixin attribute)": [[99, "docarray.array.storage.weaviate.backend.BackendMixin.TYPE_MAP"]], "weaviateconfig (class in docarray.array.storage.weaviate.backend)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig"]], "cleanup_interval_seconds (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.cleanup_interval_seconds"]], "columns (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.columns"]], "distance (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.distance"]], "docarray.array.storage.weaviate.backend": [[99, "module-docarray.array.storage.weaviate.backend"]], "dynamic_ef_factor (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.ef"]], "ef_construction (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.ef_construction"]], "flat_search_cutoff (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.flat_search_cutoff"]], "host (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.host"]], "max_connections (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.max_connections"]], "n_dim (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.n_dim"]], "name (docarray.array.storage.weaviate.backend.backendmixin property)": [[99, "docarray.array.storage.weaviate.backend.BackendMixin.name"]], "name (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.name"]], "port (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.port"]], "protocol (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.protocol"]], "serialize_config (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.serialize_config"]], "skip (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.skip"]], "timeout_config (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.timeout_config"]], "vector_cache_max_objects (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[99, "docarray.array.storage.weaviate.backend.WeaviateConfig.vector_cache_max_objects"]], "findmixin (class in docarray.array.storage.weaviate.find)": [[100, "docarray.array.storage.weaviate.find.FindMixin"]], "docarray.array.storage.weaviate.find": [[100, "module-docarray.array.storage.weaviate.find"]], "getsetdelmixin (class in docarray.array.storage.weaviate.getsetdel)": [[101, "docarray.array.storage.weaviate.getsetdel.GetSetDelMixin"]], "docarray.array.storage.weaviate.getsetdel": [[101, "module-docarray.array.storage.weaviate.getsetdel"]], "sync() (docarray.array.storage.weaviate.getsetdel.getsetdelmixin method)": [[101, "docarray.array.storage.weaviate.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.weaviate.seqlike)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.weaviate.seqlike": [[102, "module-docarray.array.storage.weaviate.seqlike"]], "extend() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[102, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.reverse"]], "documentarrayweaviate (class in docarray.array.weaviate)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate"]], "type_map (docarray.array.weaviate.documentarrayweaviate attribute)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.TYPE_MAP"]], "weaviateconfig (class in docarray.array.weaviate)": [[103, "docarray.array.weaviate.WeaviateConfig"]], "append() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.append"]], "apply() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.apply"]], "apply_batch() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.apply_batch"]], "batch() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.batch"]], "batch_ids() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.batch_ids"]], "blobs (docarray.array.weaviate.documentarrayweaviate property)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.blobs"]], "cleanup_interval_seconds (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.cleanup_interval_seconds"]], "clear() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.clear"]], "cloud_delete() (docarray.array.weaviate.documentarrayweaviate static method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.cloud_delete"]], "cloud_list() (docarray.array.weaviate.documentarrayweaviate static method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.cloud_list"]], "cloud_pull() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.cloud_pull"]], "cloud_push() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.cloud_push"]], "columns (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.columns"]], "contents (docarray.array.weaviate.documentarrayweaviate property)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.contents"]], "count() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.count"]], "dataloader() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.dataloader"]], "distance (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.distance"]], "docarray.array.weaviate": [[103, "module-docarray.array.weaviate"]], "dynamic_ef_factor (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.ef"]], "ef_construction (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.ef_construction"]], "embed() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.embed"]], "embeddings (docarray.array.weaviate.documentarrayweaviate property)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.embeddings"]], "empty() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.empty"]], "evaluate() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.evaluate"]], "extend() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.extend"]], "find() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.find"]], "flat_search_cutoff (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.flat_search_cutoff"]], "flatten() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.flatten"]], "from_base64() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_base64"]], "from_bytes() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_bytes"]], "from_csv() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_csv"]], "from_dataframe() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_dataframe"]], "from_dict() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_dict"]], "from_files() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_files"]], "from_huggingface_datasets() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_huggingface_datasets"]], "from_json() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_json"]], "from_lines() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_lines"]], "from_list() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_list"]], "from_ndarray() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_ndarray"]], "from_ndjson() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_ndjson"]], "from_protobuf() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_protobuf"]], "from_pydantic_model() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_pydantic_model"]], "from_strawberry_type() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.from_strawberry_type"]], "get_json_schema() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.get_json_schema"]], "get_vocabulary() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.get_vocabulary"]], "host (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.host"]], "index() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.index"]], "insert() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.insert"]], "load() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.load"]], "load_binary() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.load_binary"]], "load_csv() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.load_csv"]], "load_json() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.load_json"]], "map() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.map"]], "map_batch() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.map_batch"]], "match() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.match"]], "max_connections (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.max_connections"]], "n_dim (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.n_dim"]], "name (docarray.array.weaviate.documentarrayweaviate property)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.name"]], "name (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.name"]], "plot_embeddings() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.plot_embeddings"]], "plot_image_sprites() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.plot_image_sprites"]], "pop() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.pop"]], "port (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.port"]], "post() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.post"]], "protocol (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.protocol"]], "pull() (docarray.array.weaviate.documentarrayweaviate class method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.pull"]], "push() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.push"]], "reduce() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.reduce"]], "reduce_all() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.reduce_all"]], "remove() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.remove"]], "reverse() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.reverse"]], "sample() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.sample"]], "save() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.save"]], "save_binary() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.save_binary"]], "save_csv() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.save_csv"]], "save_embeddings_csv() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.save_embeddings_csv"]], "save_gif() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.save_gif"]], "save_json() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.save_json"]], "serialize_config (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.serialize_config"]], "shuffle() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.shuffle"]], "skip (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.skip"]], "split_by_tag() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.split_by_tag"]], "summary() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.summary"]], "sync() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.sync"]], "tensors (docarray.array.weaviate.documentarrayweaviate property)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.tensors"]], "texts (docarray.array.weaviate.documentarrayweaviate property)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.texts"]], "timeout_config (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.timeout_config"]], "to_base64() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_base64"]], "to_bytes() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_bytes"]], "to_dataframe() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_dataframe"]], "to_dict() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_dict"]], "to_json() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_json"]], "to_list() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_list"]], "to_protobuf() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_protobuf"]], "to_pydantic_model() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_pydantic_model"]], "to_strawberry_type() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.to_strawberry_type"]], "traverse() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.traverse"]], "traverse_flat() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.traverse_flat"]], "traverse_flat_per_path() (docarray.array.weaviate.documentarrayweaviate method)": [[103, "docarray.array.weaviate.DocumentArrayWeaviate.traverse_flat_per_path"]], "vector_cache_max_objects (docarray.array.weaviate.weaviateconfig attribute)": [[103, "docarray.array.weaviate.WeaviateConfig.vector_cache_max_objects"]], "basedctype (class in docarray.base)": [[104, "docarray.base.BaseDCType"]], "clear() (docarray.base.basedctype method)": [[104, "docarray.base.BaseDCType.clear"]], "copy_from() (docarray.base.basedctype method)": [[104, "docarray.base.BaseDCType.copy_from"]], "docarray.base": [[104, "module-docarray.base"]], "nbytes (docarray.base.basedctype property)": [[104, "docarray.base.BaseDCType.nbytes"]], "non_empty_fields (docarray.base.basedctype property)": [[104, "docarray.base.BaseDCType.non_empty_fields"]], "pop() (docarray.base.basedctype method)": [[104, "docarray.base.BaseDCType.pop"]], "docarray.dataclasses": [[105, "module-docarray.dataclasses"]], "audio_getter() (in module docarray.dataclasses.getter)": [[106, "docarray.dataclasses.getter.audio_getter"]], "blob_getter() (in module docarray.dataclasses.getter)": [[106, "docarray.dataclasses.getter.blob_getter"]], "docarray.dataclasses.getter": [[106, "module-docarray.dataclasses.getter"]], "image_getter() (in module docarray.dataclasses.getter)": [[106, "docarray.dataclasses.getter.image_getter"]], "json_getter() (in module docarray.dataclasses.getter)": [[106, "docarray.dataclasses.getter.json_getter"]], "mesh_getter() (in module docarray.dataclasses.getter)": [[106, "docarray.dataclasses.getter.mesh_getter"]], "tabular_getter() (in module docarray.dataclasses.getter)": [[106, "docarray.dataclasses.getter.tabular_getter"]], "text_getter() (in module docarray.dataclasses.getter)": [[106, "docarray.dataclasses.getter.text_getter"]], "uri_getter() (in module docarray.dataclasses.getter)": [[106, "docarray.dataclasses.getter.uri_getter"]], "video_getter() (in module docarray.dataclasses.getter)": [[106, "docarray.dataclasses.getter.video_getter"]], "audio_setter() (in module docarray.dataclasses.setter)": [[107, "docarray.dataclasses.setter.audio_setter"]], "blob_setter() (in module docarray.dataclasses.setter)": [[107, "docarray.dataclasses.setter.blob_setter"]], "docarray.dataclasses.setter": [[107, "module-docarray.dataclasses.setter"]], "image_setter() (in module docarray.dataclasses.setter)": [[107, "docarray.dataclasses.setter.image_setter"]], "json_setter() (in module docarray.dataclasses.setter)": [[107, "docarray.dataclasses.setter.json_setter"]], "mesh_setter() (in module docarray.dataclasses.setter)": [[107, "docarray.dataclasses.setter.mesh_setter"]], "tabular_setter() (in module docarray.dataclasses.setter)": [[107, "docarray.dataclasses.setter.tabular_setter"]], "text_setter() (in module docarray.dataclasses.setter)": [[107, "docarray.dataclasses.setter.text_setter"]], "uri_setter() (in module docarray.dataclasses.setter)": [[107, "docarray.dataclasses.setter.uri_setter"]], "video_setter() (in module docarray.dataclasses.setter)": [[107, "docarray.dataclasses.setter.video_setter"]], "dataclass() (in module docarray.dataclasses.types)": [[108, "docarray.dataclasses.types.dataclass"]], "docarray.dataclasses.types": [[108, "module-docarray.dataclasses.types"]], "field() (in module docarray.dataclasses.types)": [[108, "docarray.dataclasses.types.field"]], "is_multimodal() (in module docarray.dataclasses.types)": [[108, "docarray.dataclasses.types.is_multimodal"]], "document (class in docarray.document)": [[109, "docarray.document.Document"]], "adjacency (docarray.document.document property)": [[109, "docarray.document.Document.adjacency"]], "blob (docarray.document.document property)": [[109, "docarray.document.Document.blob"]], "chunks (docarray.document.document property)": [[109, "docarray.document.Document.chunks"]], "clear() (docarray.document.document method)": [[109, "docarray.document.Document.clear"]], "content (docarray.document.document property)": [[109, "docarray.document.Document.content"]], "content_hash (docarray.document.document property)": [[109, "docarray.document.Document.content_hash"]], "content_type (docarray.document.document property)": [[109, "docarray.document.Document.content_type"]], "convert_blob_to_datauri() (docarray.document.document method)": [[109, "docarray.document.Document.convert_blob_to_datauri"]], "convert_blob_to_image_tensor() (docarray.document.document method)": [[109, "docarray.document.Document.convert_blob_to_image_tensor"]], "convert_blob_to_tensor() (docarray.document.document method)": [[109, "docarray.document.Document.convert_blob_to_tensor"]], "convert_content_to_datauri() (docarray.document.document method)": [[109, "docarray.document.Document.convert_content_to_datauri"]], "convert_image_tensor_to_blob() (docarray.document.document method)": [[109, "docarray.document.Document.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.document method)": [[109, "docarray.document.Document.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.document method)": [[109, "docarray.document.Document.convert_image_tensor_to_uri"]], "convert_tensor_to_blob() (docarray.document.document method)": [[109, "docarray.document.Document.convert_tensor_to_blob"]], "convert_tensor_to_text() (docarray.document.document method)": [[109, "docarray.document.Document.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.document method)": [[109, "docarray.document.Document.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.document method)": [[109, "docarray.document.Document.convert_text_to_tensor"]], "convert_uri_to_datauri() (docarray.document.document method)": [[109, "docarray.document.Document.convert_uri_to_datauri"]], "copy_from() (docarray.document.document method)": [[109, "docarray.document.Document.copy_from"]], "display() (docarray.document.document method)": [[109, "docarray.document.Document.display"]], "display_tensor() (docarray.document.document method)": [[109, "docarray.document.Document.display_tensor"]], "display_uri() (docarray.document.document method)": [[109, "docarray.document.Document.display_uri"]], "docarray.document": [[109, "module-docarray.document"]], "embed() (docarray.document.document method)": [[109, "docarray.document.Document.embed"]], "embed_feature_hashing() (docarray.document.document method)": [[109, "docarray.document.Document.embed_feature_hashing"]], "embedding (docarray.document.document property)": [[109, "docarray.document.Document.embedding"]], "evaluations (docarray.document.document property)": [[109, "docarray.document.Document.evaluations"]], "from_base64() (docarray.document.document class method)": [[109, "docarray.document.Document.from_base64"]], "from_bytes() (docarray.document.document class method)": [[109, "docarray.document.Document.from_bytes"]], "from_dict() (docarray.document.document class method)": [[109, "docarray.document.Document.from_dict"]], "from_json() (docarray.document.document class method)": [[109, "docarray.document.Document.from_json"]], "from_protobuf() (docarray.document.document class method)": [[109, "docarray.document.Document.from_protobuf"]], "from_pydantic_model() (docarray.document.document class method)": [[109, "docarray.document.Document.from_pydantic_model"]], "from_strawberry_type() (docarray.document.document class method)": [[109, "docarray.document.Document.from_strawberry_type"]], "generator_from_webcam() (docarray.document.document class method)": [[109, "docarray.document.Document.generator_from_webcam"]], "get_json_schema() (docarray.document.document class method)": [[109, "docarray.document.Document.get_json_schema"]], "get_multi_modal_attribute() (docarray.document.document method)": [[109, "docarray.document.Document.get_multi_modal_attribute"]], "get_vocabulary() (docarray.document.document method)": [[109, "docarray.document.Document.get_vocabulary"]], "granularity (docarray.document.document property)": [[109, "docarray.document.Document.granularity"]], "id (docarray.document.document property)": [[109, "docarray.document.Document.id"]], "is_multimodal (docarray.document.document property)": [[109, "docarray.document.Document.is_multimodal"]], "load_pil_image_to_datauri() (docarray.document.document method)": [[109, "docarray.document.Document.load_pil_image_to_datauri"]], "load_uri_to_audio_tensor() (docarray.document.document method)": [[109, "docarray.document.Document.load_uri_to_audio_tensor"]], "load_uri_to_blob() (docarray.document.document method)": [[109, "docarray.document.Document.load_uri_to_blob"]], "load_uri_to_image_tensor() (docarray.document.document method)": [[109, "docarray.document.Document.load_uri_to_image_tensor"]], "load_uri_to_point_cloud_tensor() (docarray.document.document method)": [[109, "docarray.document.Document.load_uri_to_point_cloud_tensor"]], "load_uri_to_text() (docarray.document.document method)": [[109, "docarray.document.Document.load_uri_to_text"]], "load_uri_to_video_tensor() (docarray.document.document method)": [[109, "docarray.document.Document.load_uri_to_video_tensor"]], "location (docarray.document.document property)": [[109, "docarray.document.Document.location"]], "match() (docarray.document.document method)": [[109, "docarray.document.Document.match"]], "matches (docarray.document.document property)": [[109, "docarray.document.Document.matches"]], "mime_type (docarray.document.document property)": [[109, "docarray.document.Document.mime_type"]], "modality (docarray.document.document property)": [[109, "docarray.document.Document.modality"]], "nbytes (docarray.document.document property)": [[109, "docarray.document.Document.nbytes"]], "non_empty_fields (docarray.document.document property)": [[109, "docarray.document.Document.non_empty_fields"]], "offset (docarray.document.document property)": [[109, "docarray.document.Document.offset"]], "parent_id (docarray.document.document property)": [[109, "docarray.document.Document.parent_id"]], "plot_matches_sprites() (docarray.document.document method)": [[109, "docarray.document.Document.plot_matches_sprites"]], "pop() (docarray.document.document method)": [[109, "docarray.document.Document.pop"]], "post() (docarray.document.document method)": [[109, "docarray.document.Document.post"]], "save_audio_tensor_to_file() (docarray.document.document method)": [[109, "docarray.document.Document.save_audio_tensor_to_file"]], "save_blob_to_file() (docarray.document.document method)": [[109, "docarray.document.Document.save_blob_to_file"]], "save_image_tensor_to_file() (docarray.document.document method)": [[109, "docarray.document.Document.save_image_tensor_to_file"]], "save_uri_to_file() (docarray.document.document method)": [[109, "docarray.document.Document.save_uri_to_file"]], "save_video_tensor_to_file() (docarray.document.document method)": [[109, "docarray.document.Document.save_video_tensor_to_file"]], "scores (docarray.document.document property)": [[109, "docarray.document.Document.scores"]], "set_image_tensor_channel_axis() (docarray.document.document method)": [[109, "docarray.document.Document.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.document method)": [[109, "docarray.document.Document.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.document method)": [[109, "docarray.document.Document.set_image_tensor_normalization"]], "set_image_tensor_resample() (docarray.document.document method)": [[109, "docarray.document.Document.set_image_tensor_resample"]], "set_image_tensor_shape() (docarray.document.document method)": [[109, "docarray.document.Document.set_image_tensor_shape"]], "set_multi_modal_attribute() (docarray.document.document method)": [[109, "docarray.document.Document.set_multi_modal_attribute"]], "summary() (docarray.document.document method)": [[109, "docarray.document.Document.summary"]], "tags (docarray.document.document property)": [[109, "docarray.document.Document.tags"]], "tensor (docarray.document.document property)": [[109, "docarray.document.Document.tensor"]], "text (docarray.document.document property)": [[109, "docarray.document.Document.text"]], "to_base64() (docarray.document.document method)": [[109, "docarray.document.Document.to_base64"]], "to_bytes() (docarray.document.document method)": [[109, "docarray.document.Document.to_bytes"]], "to_dict() (docarray.document.document method)": [[109, "docarray.document.Document.to_dict"]], "to_json() (docarray.document.document method)": [[109, "docarray.document.Document.to_json"]], "to_protobuf() (docarray.document.document method)": [[109, "docarray.document.Document.to_protobuf"]], "to_pydantic_model() (docarray.document.document method)": [[109, "docarray.document.Document.to_pydantic_model"]], "to_strawberry_type() (docarray.document.document method)": [[109, "docarray.document.Document.to_strawberry_type"]], "uri (docarray.document.document property)": [[109, "docarray.document.Document.uri"]], "weight (docarray.document.document property)": [[109, "docarray.document.Document.weight"]], "documentdata (class in docarray.document.data)": [[110, "docarray.document.data.DocumentData"]], "adjacency (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.adjacency"]], "blob (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.blob"]], "chunks (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.chunks"]], "content (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.content"]], "docarray.document.data": [[110, "module-docarray.document.data"]], "embedding (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.embedding"]], "evaluations (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.evaluations"]], "granularity (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.granularity"]], "id (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.id"]], "location (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.location"]], "matches (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.matches"]], "mime_type (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.mime_type"]], "modality (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.modality"]], "offset (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.offset"]], "parent_id (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.parent_id"]], "scores (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.scores"]], "tags (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.tags"]], "tensor (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.tensor"]], "text (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.text"]], "uri (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.uri"]], "weight (docarray.document.data.documentdata attribute)": [[110, "docarray.document.data.DocumentData.weight"]], "docarray.document.generators": [[111, "module-docarray.document.generators"]], "from_csv() (in module docarray.document.generators)": [[111, "docarray.document.generators.from_csv"]], "from_files() (in module docarray.document.generators)": [[111, "docarray.document.generators.from_files"]], "from_huggingface_datasets() (in module docarray.document.generators)": [[111, "docarray.document.generators.from_huggingface_datasets"]], "from_lines() (in module docarray.document.generators)": [[111, "docarray.document.generators.from_lines"]], "from_ndarray() (in module docarray.document.generators)": [[111, "docarray.document.generators.from_ndarray"]], "from_ndjson() (in module docarray.document.generators)": [[111, "docarray.document.generators.from_ndjson"]], "allmixins (class in docarray.document.mixins)": [[112, "docarray.document.mixins.AllMixins"]], "adjacency (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.adjacency"]], "blob (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.blob"]], "chunks (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.chunks"]], "content (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.content"]], "content_hash (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.content_hash"]], "content_type (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.content_type"]], "convert_blob_to_datauri() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.convert_blob_to_datauri"]], "convert_blob_to_image_tensor() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.convert_blob_to_image_tensor"]], "convert_blob_to_tensor() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.convert_blob_to_tensor"]], "convert_content_to_datauri() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.convert_content_to_datauri"]], "convert_image_tensor_to_blob() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.convert_image_tensor_to_uri"]], "convert_tensor_to_blob() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.convert_tensor_to_blob"]], "convert_tensor_to_text() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.convert_text_to_tensor"]], "convert_uri_to_datauri() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.convert_uri_to_datauri"]], "display() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.display"]], "display_tensor() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.display_tensor"]], "display_uri() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.display_uri"]], "docarray.document.mixins": [[112, "module-docarray.document.mixins"]], "embed() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.embed"]], "embed_feature_hashing() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.embed_feature_hashing"]], "embedding (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.embedding"]], "evaluations (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.evaluations"]], "from_base64() (docarray.document.mixins.allmixins class method)": [[112, "docarray.document.mixins.AllMixins.from_base64"]], "from_bytes() (docarray.document.mixins.allmixins class method)": [[112, "docarray.document.mixins.AllMixins.from_bytes"]], "from_dict() (docarray.document.mixins.allmixins class method)": [[112, "docarray.document.mixins.AllMixins.from_dict"]], "from_json() (docarray.document.mixins.allmixins class method)": [[112, "docarray.document.mixins.AllMixins.from_json"]], "from_protobuf() (docarray.document.mixins.allmixins class method)": [[112, "docarray.document.mixins.AllMixins.from_protobuf"]], "from_pydantic_model() (docarray.document.mixins.allmixins class method)": [[112, "docarray.document.mixins.AllMixins.from_pydantic_model"]], "from_strawberry_type() (docarray.document.mixins.allmixins class method)": [[112, "docarray.document.mixins.AllMixins.from_strawberry_type"]], "generator_from_webcam() (docarray.document.mixins.allmixins class method)": [[112, "docarray.document.mixins.AllMixins.generator_from_webcam"]], "get_json_schema() (docarray.document.mixins.allmixins class method)": [[112, "docarray.document.mixins.AllMixins.get_json_schema"]], "get_multi_modal_attribute() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.get_multi_modal_attribute"]], "get_vocabulary() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.get_vocabulary"]], "granularity (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.granularity"]], "id (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.id"]], "is_multimodal (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.is_multimodal"]], "load_pil_image_to_datauri() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.load_pil_image_to_datauri"]], "load_uri_to_audio_tensor() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.load_uri_to_audio_tensor"]], "load_uri_to_blob() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.load_uri_to_blob"]], "load_uri_to_image_tensor() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.load_uri_to_image_tensor"]], "load_uri_to_point_cloud_tensor() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.load_uri_to_point_cloud_tensor"]], "load_uri_to_text() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.load_uri_to_text"]], "load_uri_to_video_tensor() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.load_uri_to_video_tensor"]], "location (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.location"]], "match() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.match"]], "matches (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.matches"]], "mime_type (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.mime_type"]], "modality (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.modality"]], "offset (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.offset"]], "parent_id (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.parent_id"]], "plot_matches_sprites() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.plot_matches_sprites"]], "post() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.post"]], "save_audio_tensor_to_file() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.save_audio_tensor_to_file"]], "save_blob_to_file() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.save_blob_to_file"]], "save_image_tensor_to_file() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.save_image_tensor_to_file"]], "save_uri_to_file() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.save_uri_to_file"]], "save_video_tensor_to_file() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.save_video_tensor_to_file"]], "scores (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.scores"]], "set_image_tensor_channel_axis() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.set_image_tensor_normalization"]], "set_image_tensor_resample() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.set_image_tensor_resample"]], "set_image_tensor_shape() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.set_image_tensor_shape"]], "set_multi_modal_attribute() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.set_multi_modal_attribute"]], "summary() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.summary"]], "tags (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.tags"]], "tensor (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.tensor"]], "text (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.text"]], "to_base64() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.to_base64"]], "to_bytes() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.to_bytes"]], "to_dict() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.to_dict"]], "to_json() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.to_json"]], "to_protobuf() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.to_protobuf"]], "to_pydantic_model() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.to_pydantic_model"]], "to_strawberry_type() (docarray.document.mixins.allmixins method)": [[112, "docarray.document.mixins.AllMixins.to_strawberry_type"]], "uri (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.uri"]], "weight (docarray.document.mixins.allmixins property)": [[112, "docarray.document.mixins.AllMixins.weight"]], "getattributesmixin (class in docarray.document.mixins.attribute)": [[113, "docarray.document.mixins.attribute.GetAttributesMixin"]], "docarray.document.mixins.attribute": [[113, "module-docarray.document.mixins.attribute"]], "audiodatamixin (class in docarray.document.mixins.audio)": [[114, "docarray.document.mixins.audio.AudioDataMixin"]], "docarray.document.mixins.audio": [[114, "module-docarray.document.mixins.audio"]], "load_uri_to_audio_tensor() (docarray.document.mixins.audio.audiodatamixin method)": [[114, "docarray.document.mixins.audio.AudioDataMixin.load_uri_to_audio_tensor"]], "save_audio_tensor_to_file() (docarray.document.mixins.audio.audiodatamixin method)": [[114, "docarray.document.mixins.audio.AudioDataMixin.save_audio_tensor_to_file"]], "blobdatamixin (class in docarray.document.mixins.blob)": [[115, "docarray.document.mixins.blob.BlobDataMixin"]], "convert_blob_to_datauri() (docarray.document.mixins.blob.blobdatamixin method)": [[115, "docarray.document.mixins.blob.BlobDataMixin.convert_blob_to_datauri"]], "docarray.document.mixins.blob": [[115, "module-docarray.document.mixins.blob"]], "load_uri_to_blob() (docarray.document.mixins.blob.blobdatamixin method)": [[115, "docarray.document.mixins.blob.BlobDataMixin.load_uri_to_blob"]], "save_blob_to_file() (docarray.document.mixins.blob.blobdatamixin method)": [[115, "docarray.document.mixins.blob.BlobDataMixin.save_blob_to_file"]], "contentpropertymixin (class in docarray.document.mixins.content)": [[116, "docarray.document.mixins.content.ContentPropertyMixin"]], "content_hash (docarray.document.mixins.content.contentpropertymixin property)": [[116, "docarray.document.mixins.content.ContentPropertyMixin.content_hash"]], "convert_content_to_datauri() (docarray.document.mixins.content.contentpropertymixin method)": [[116, "docarray.document.mixins.content.ContentPropertyMixin.convert_content_to_datauri"]], "docarray.document.mixins.content": [[116, "module-docarray.document.mixins.content"]], "convertmixin (class in docarray.document.mixins.convert)": [[117, "docarray.document.mixins.convert.ConvertMixin"]], "convert_blob_to_tensor() (docarray.document.mixins.convert.convertmixin method)": [[117, "docarray.document.mixins.convert.ConvertMixin.convert_blob_to_tensor"]], "convert_tensor_to_blob() (docarray.document.mixins.convert.convertmixin method)": [[117, "docarray.document.mixins.convert.ConvertMixin.convert_tensor_to_blob"]], "convert_uri_to_datauri() (docarray.document.mixins.convert.convertmixin method)": [[117, "docarray.document.mixins.convert.ConvertMixin.convert_uri_to_datauri"]], "docarray.document.mixins.convert": [[117, "module-docarray.document.mixins.convert"]], "urifilemixin (class in docarray.document.mixins.dump)": [[118, "docarray.document.mixins.dump.UriFileMixin"]], "docarray.document.mixins.dump": [[118, "module-docarray.document.mixins.dump"]], "save_uri_to_file() (docarray.document.mixins.dump.urifilemixin method)": [[118, "docarray.document.mixins.dump.UriFileMixin.save_uri_to_file"]], "featurehashmixin (class in docarray.document.mixins.featurehash)": [[119, "docarray.document.mixins.featurehash.FeatureHashMixin"]], "docarray.document.mixins.featurehash": [[119, "module-docarray.document.mixins.featurehash"]], "embed_feature_hashing() (docarray.document.mixins.featurehash.featurehashmixin method)": [[119, "docarray.document.mixins.featurehash.FeatureHashMixin.embed_feature_hashing"]], "docarray.document.mixins.helper": [[120, "module-docarray.document.mixins.helper"]], "imagedatamixin (class in docarray.document.mixins.image)": [[121, "docarray.document.mixins.image.ImageDataMixin"]], "convert_blob_to_image_tensor() (docarray.document.mixins.image.imagedatamixin method)": [[121, "docarray.document.mixins.image.ImageDataMixin.convert_blob_to_image_tensor"]], "convert_image_tensor_to_blob() (docarray.document.mixins.image.imagedatamixin method)": [[121, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.mixins.image.imagedatamixin method)": [[121, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.mixins.image.imagedatamixin method)": [[121, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_uri"]], "docarray.document.mixins.image": [[121, "module-docarray.document.mixins.image"]], "load_pil_image_to_datauri() (docarray.document.mixins.image.imagedatamixin method)": [[121, "docarray.document.mixins.image.ImageDataMixin.load_pil_image_to_datauri"]], "load_uri_to_image_tensor() (docarray.document.mixins.image.imagedatamixin method)": [[121, "docarray.document.mixins.image.ImageDataMixin.load_uri_to_image_tensor"]], "save_image_tensor_to_file() (docarray.document.mixins.image.imagedatamixin method)": [[121, "docarray.document.mixins.image.ImageDataMixin.save_image_tensor_to_file"]], "set_image_tensor_channel_axis() (docarray.document.mixins.image.imagedatamixin method)": [[121, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.mixins.image.imagedatamixin method)": [[121, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.mixins.image.imagedatamixin method)": [[121, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_normalization"]], "set_image_tensor_resample() (docarray.document.mixins.image.imagedatamixin method)": [[121, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_resample"]], "set_image_tensor_shape() (docarray.document.mixins.image.imagedatamixin method)": [[121, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_shape"]], "meshdatamixin (class in docarray.document.mixins.mesh)": [[122, "docarray.document.mixins.mesh.MeshDataMixin"]], "docarray.document.mixins.mesh": [[122, "module-docarray.document.mixins.mesh"]], "load_uri_to_point_cloud_tensor() (docarray.document.mixins.mesh.meshdatamixin method)": [[122, "docarray.document.mixins.mesh.MeshDataMixin.load_uri_to_point_cloud_tensor"]], "multimodalmixin (class in docarray.document.mixins.multimodal)": [[123, "docarray.document.mixins.multimodal.MultiModalMixin"]], "docarray.document.mixins.multimodal": [[123, "module-docarray.document.mixins.multimodal"]], "get_multi_modal_attribute() (docarray.document.mixins.multimodal.multimodalmixin method)": [[123, "docarray.document.mixins.multimodal.MultiModalMixin.get_multi_modal_attribute"]], "is_multimodal (docarray.document.mixins.multimodal.multimodalmixin property)": [[123, "docarray.document.mixins.multimodal.MultiModalMixin.is_multimodal"]], "set_multi_modal_attribute() (docarray.document.mixins.multimodal.multimodalmixin method)": [[123, "docarray.document.mixins.multimodal.MultiModalMixin.set_multi_modal_attribute"]], "plotmixin (class in docarray.document.mixins.plot)": [[124, "docarray.document.mixins.plot.PlotMixin"]], "display() (docarray.document.mixins.plot.plotmixin method)": [[124, "docarray.document.mixins.plot.PlotMixin.display"]], "display_tensor() (docarray.document.mixins.plot.plotmixin method)": [[124, "docarray.document.mixins.plot.PlotMixin.display_tensor"]], "display_uri() (docarray.document.mixins.plot.plotmixin method)": [[124, "docarray.document.mixins.plot.PlotMixin.display_uri"]], "docarray.document.mixins.plot": [[124, "module-docarray.document.mixins.plot"]], "plot_matches_sprites() (docarray.document.mixins.plot.plotmixin method)": [[124, "docarray.document.mixins.plot.PlotMixin.plot_matches_sprites"]], "summary() (docarray.document.mixins.plot.plotmixin method)": [[124, "docarray.document.mixins.plot.PlotMixin.summary"]], "portingmixin (class in docarray.document.mixins.porting)": [[125, "docarray.document.mixins.porting.PortingMixin"]], "docarray.document.mixins.porting": [[125, "module-docarray.document.mixins.porting"]], "from_base64() (docarray.document.mixins.porting.portingmixin class method)": [[125, "docarray.document.mixins.porting.PortingMixin.from_base64"]], "from_bytes() (docarray.document.mixins.porting.portingmixin class method)": [[125, "docarray.document.mixins.porting.PortingMixin.from_bytes"]], "from_dict() (docarray.document.mixins.porting.portingmixin class method)": [[125, "docarray.document.mixins.porting.PortingMixin.from_dict"]], "from_json() (docarray.document.mixins.porting.portingmixin class method)": [[125, "docarray.document.mixins.porting.PortingMixin.from_json"]], "to_base64() (docarray.document.mixins.porting.portingmixin method)": [[125, "docarray.document.mixins.porting.PortingMixin.to_base64"]], "to_bytes() (docarray.document.mixins.porting.portingmixin method)": [[125, "docarray.document.mixins.porting.PortingMixin.to_bytes"]], "to_dict() (docarray.document.mixins.porting.portingmixin method)": [[125, "docarray.document.mixins.porting.PortingMixin.to_dict"]], "to_json() (docarray.document.mixins.porting.portingmixin method)": [[125, "docarray.document.mixins.porting.PortingMixin.to_json"]], "propertymixin (class in docarray.document.mixins.property)": [[126, "docarray.document.mixins.property.PropertyMixin"]], "adjacency (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.adjacency"]], "blob (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.blob"]], "chunks (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.chunks"]], "content (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.content"]], "content_type (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.content_type"]], "docarray.document.mixins.property": [[126, "module-docarray.document.mixins.property"]], "embedding (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.embedding"]], "evaluations (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.evaluations"]], "granularity (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.granularity"]], "id (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.id"]], "location (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.location"]], "matches (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.matches"]], "mime_type (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.mime_type"]], "modality (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.modality"]], "offset (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.offset"]], "parent_id (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.parent_id"]], "scores (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.scores"]], "tags (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.tags"]], "tensor (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.tensor"]], "text (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.text"]], "uri (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.uri"]], "weight (docarray.document.mixins.property.propertymixin property)": [[126, "docarray.document.mixins.property.PropertyMixin.weight"]], "protobufmixin (class in docarray.document.mixins.protobuf)": [[127, "docarray.document.mixins.protobuf.ProtobufMixin"]], "docarray.document.mixins.protobuf": [[127, "module-docarray.document.mixins.protobuf"]], "from_protobuf() (docarray.document.mixins.protobuf.protobufmixin class method)": [[127, "docarray.document.mixins.protobuf.ProtobufMixin.from_protobuf"]], "to_protobuf() (docarray.document.mixins.protobuf.protobufmixin method)": [[127, "docarray.document.mixins.protobuf.ProtobufMixin.to_protobuf"]], "pydanticmixin (class in docarray.document.mixins.pydantic)": [[128, "docarray.document.mixins.pydantic.PydanticMixin"]], "docarray.document.mixins.pydantic": [[128, "module-docarray.document.mixins.pydantic"]], "from_pydantic_model() (docarray.document.mixins.pydantic.pydanticmixin class method)": [[128, "docarray.document.mixins.pydantic.PydanticMixin.from_pydantic_model"]], "get_json_schema() (docarray.document.mixins.pydantic.pydanticmixin class method)": [[128, "docarray.document.mixins.pydantic.PydanticMixin.get_json_schema"]], "to_pydantic_model() (docarray.document.mixins.pydantic.pydanticmixin method)": [[128, "docarray.document.mixins.pydantic.PydanticMixin.to_pydantic_model"]], "colorboxembedding (class in docarray.document.mixins.rich_embedding)": [[129, "docarray.document.mixins.rich_embedding.ColorBoxEmbedding"]], "docarray.document.mixins.rich_embedding": [[129, "module-docarray.document.mixins.rich_embedding"]], "strawberrymixin (class in docarray.document.mixins.strawberry)": [[130, "docarray.document.mixins.strawberry.StrawberryMixin"]], "docarray.document.mixins.strawberry": [[130, "module-docarray.document.mixins.strawberry"]], "from_strawberry_type() (docarray.document.mixins.strawberry.strawberrymixin class method)": [[130, "docarray.document.mixins.strawberry.StrawberryMixin.from_strawberry_type"]], "to_strawberry_type() (docarray.document.mixins.strawberry.strawberrymixin method)": [[130, "docarray.document.mixins.strawberry.StrawberryMixin.to_strawberry_type"]], "singletonsugarmixin (class in docarray.document.mixins.sugar)": [[131, "docarray.document.mixins.sugar.SingletonSugarMixin"]], "docarray.document.mixins.sugar": [[131, "module-docarray.document.mixins.sugar"]], "embed() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[131, "docarray.document.mixins.sugar.SingletonSugarMixin.embed"]], "match() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[131, "docarray.document.mixins.sugar.SingletonSugarMixin.match"]], "post() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[131, "docarray.document.mixins.sugar.SingletonSugarMixin.post"]], "textdatamixin (class in docarray.document.mixins.text)": [[132, "docarray.document.mixins.text.TextDataMixin"]], "convert_tensor_to_text() (docarray.document.mixins.text.textdatamixin method)": [[132, "docarray.document.mixins.text.TextDataMixin.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.mixins.text.textdatamixin method)": [[132, "docarray.document.mixins.text.TextDataMixin.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.mixins.text.textdatamixin method)": [[132, "docarray.document.mixins.text.TextDataMixin.convert_text_to_tensor"]], "docarray.document.mixins.text": [[132, "module-docarray.document.mixins.text"]], "get_vocabulary() (docarray.document.mixins.text.textdatamixin method)": [[132, "docarray.document.mixins.text.TextDataMixin.get_vocabulary"]], "load_uri_to_text() (docarray.document.mixins.text.textdatamixin method)": [[132, "docarray.document.mixins.text.TextDataMixin.load_uri_to_text"]], "videodatamixin (class in docarray.document.mixins.video)": [[133, "docarray.document.mixins.video.VideoDataMixin"]], "docarray.document.mixins.video": [[133, "module-docarray.document.mixins.video"]], "generator_from_webcam() (docarray.document.mixins.video.videodatamixin class method)": [[133, "docarray.document.mixins.video.VideoDataMixin.generator_from_webcam"]], "load_uri_to_video_tensor() (docarray.document.mixins.video.videodatamixin method)": [[133, "docarray.document.mixins.video.VideoDataMixin.load_uri_to_video_tensor"]], "save_video_tensor_to_file() (docarray.document.mixins.video.videodatamixin method)": [[133, "docarray.document.mixins.video.VideoDataMixin.save_video_tensor_to_file"]], "pydanticdocument (class in docarray.document.pydantic_model)": [[134, "docarray.document.pydantic_model.PydanticDocument"]], "pydanticdocument.config (class in docarray.document.pydantic_model)": [[134, "docarray.document.pydantic_model.PydanticDocument.Config"]], "adjacency (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.adjacency"]], "blob (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.blob"]], "chunks (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.chunks"]], "construct() (docarray.document.pydantic_model.pydanticdocument class method)": [[134, "docarray.document.pydantic_model.PydanticDocument.construct"]], "copy() (docarray.document.pydantic_model.pydanticdocument method)": [[134, "docarray.document.pydantic_model.PydanticDocument.copy"]], "dict() (docarray.document.pydantic_model.pydanticdocument method)": [[134, "docarray.document.pydantic_model.PydanticDocument.dict"]], "docarray.document.pydantic_model": [[134, "module-docarray.document.pydantic_model"]], "embedding (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.embedding"]], "evaluations (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.evaluations"]], "from_orm() (docarray.document.pydantic_model.pydanticdocument class method)": [[134, "docarray.document.pydantic_model.PydanticDocument.from_orm"]], "granularity (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.granularity"]], "id (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.id"]], "json() (docarray.document.pydantic_model.pydanticdocument method)": [[134, "docarray.document.pydantic_model.PydanticDocument.json"]], "location (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.location"]], "matches (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.matches"]], "mime_type (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.mime_type"]], "modality (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.modality"]], "offset (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.offset"]], "parent_id (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.parent_id"]], "parse_file() (docarray.document.pydantic_model.pydanticdocument class method)": [[134, "docarray.document.pydantic_model.PydanticDocument.parse_file"]], "parse_obj() (docarray.document.pydantic_model.pydanticdocument class method)": [[134, "docarray.document.pydantic_model.PydanticDocument.parse_obj"]], "parse_raw() (docarray.document.pydantic_model.pydanticdocument class method)": [[134, "docarray.document.pydantic_model.PydanticDocument.parse_raw"]], "schema() (docarray.document.pydantic_model.pydanticdocument class method)": [[134, "docarray.document.pydantic_model.PydanticDocument.schema"]], "schema_json() (docarray.document.pydantic_model.pydanticdocument class method)": [[134, "docarray.document.pydantic_model.PydanticDocument.schema_json"]], "scores (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.scores"]], "smart_union (docarray.document.pydantic_model.pydanticdocument.config attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.Config.smart_union"]], "tags (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.tags"]], "tensor (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.tensor"]], "text (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.text"]], "update_forward_refs() (docarray.document.pydantic_model.pydanticdocument class method)": [[134, "docarray.document.pydantic_model.PydanticDocument.update_forward_refs"]], "uri (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.uri"]], "validate() (docarray.document.pydantic_model.pydanticdocument class method)": [[134, "docarray.document.pydantic_model.PydanticDocument.validate"]], "weight (docarray.document.pydantic_model.pydanticdocument attribute)": [[134, "docarray.document.pydantic_model.PydanticDocument.weight"]], "add_protocol_and_compress_to_file_path() (in module docarray.helper)": [[136, "docarray.helper.add_protocol_and_compress_to_file_path"]], "cached_property (class in docarray.helper)": [[136, "docarray.helper.cached_property"]], "compress_bytes() (in module docarray.helper)": [[136, "docarray.helper.compress_bytes"]], "dataclass_from_dict() (in module docarray.helper)": [[136, "docarray.helper.dataclass_from_dict"]], "decompress_bytes() (in module docarray.helper)": [[136, "docarray.helper.decompress_bytes"]], "deprecate_by() (in module docarray.helper)": [[136, "docarray.helper.deprecate_by"]], "docarray.helper": [[136, "module-docarray.helper"]], "download_mermaid_url() (in module docarray.helper)": [[136, "docarray.helper.download_mermaid_url"]], "dunder_get() (in module docarray.helper)": [[136, "docarray.helper.dunder_get"]], "filter_dict() (in module docarray.helper)": [[136, "docarray.helper.filter_dict"]], "get_ci_vendor() (in module docarray.helper)": [[136, "docarray.helper.get_ci_vendor"]], "get_compress_ctx() (in module docarray.helper)": [[136, "docarray.helper.get_compress_ctx"]], "get_full_version() (in module docarray.helper)": [[136, "docarray.helper.get_full_version"]], "get_request_header() (in module docarray.helper)": [[136, "docarray.helper.get_request_header"]], "protocol_and_compress_from_file_path() (in module docarray.helper)": [[136, "docarray.helper.protocol_and_compress_from_file_path"]], "random_identity() (in module docarray.helper)": [[136, "docarray.helper.random_identity"]], "random_port() (in module docarray.helper)": [[136, "docarray.helper.random_port"]], "random_uuid() (in module docarray.helper)": [[136, "docarray.helper.random_uuid"]], "reset_ports() (in module docarray.helper)": [[136, "docarray.helper.reset_ports"]], "typename() (in module docarray.helper)": [[136, "docarray.helper.typename"]], "docarray.math": [[137, "module-docarray.math"]], "cdist() (in module docarray.math.distance)": [[138, "docarray.math.distance.cdist"]], "docarray.math.distance": [[138, "module-docarray.math.distance"]], "pdist() (in module docarray.math.distance)": [[138, "docarray.math.distance.pdist"]], "cosine() (in module docarray.math.distance.numpy)": [[139, "docarray.math.distance.numpy.cosine"]], "docarray.math.distance.numpy": [[139, "module-docarray.math.distance.numpy"]], "euclidean() (in module docarray.math.distance.numpy)": [[139, "docarray.math.distance.numpy.euclidean"]], "sparse_cosine() (in module docarray.math.distance.numpy)": [[139, "docarray.math.distance.numpy.sparse_cosine"]], "sparse_euclidean() (in module docarray.math.distance.numpy)": [[139, "docarray.math.distance.numpy.sparse_euclidean"]], "sparse_sqeuclidean() (in module docarray.math.distance.numpy)": [[139, "docarray.math.distance.numpy.sparse_sqeuclidean"]], "sqeuclidean() (in module docarray.math.distance.numpy)": [[139, "docarray.math.distance.numpy.sqeuclidean"]], "cosine() (in module docarray.math.distance.tensorflow)": [[141, "docarray.math.distance.tensorflow.cosine"]], "docarray.math.distance.tensorflow": [[141, "module-docarray.math.distance.tensorflow"]], "euclidean() (in module docarray.math.distance.tensorflow)": [[141, "docarray.math.distance.tensorflow.euclidean"]], "sqeuclidean() (in module docarray.math.distance.tensorflow)": [[141, "docarray.math.distance.tensorflow.sqeuclidean"]], "cosine() (in module docarray.math.distance.torch)": [[142, "docarray.math.distance.torch.cosine"]], "docarray.math.distance.torch": [[142, "module-docarray.math.distance.torch"]], "euclidean() (in module docarray.math.distance.torch)": [[142, "docarray.math.distance.torch.euclidean"]], "sqeuclidean() (in module docarray.math.distance.torch)": [[142, "docarray.math.distance.torch.sqeuclidean"]], "average_precision() (in module docarray.math.evaluation)": [[143, "docarray.math.evaluation.average_precision"]], "dcg_at_k() (in module docarray.math.evaluation)": [[143, "docarray.math.evaluation.dcg_at_k"]], "docarray.math.evaluation": [[143, "module-docarray.math.evaluation"]], "f1_score_at_k() (in module docarray.math.evaluation)": [[143, "docarray.math.evaluation.f1_score_at_k"]], "hit_at_k() (in module docarray.math.evaluation)": [[143, "docarray.math.evaluation.hit_at_k"]], "ndcg_at_k() (in module docarray.math.evaluation)": [[143, "docarray.math.evaluation.ndcg_at_k"]], "precision_at_k() (in module docarray.math.evaluation)": [[143, "docarray.math.evaluation.precision_at_k"]], "r_precision() (in module docarray.math.evaluation)": [[143, "docarray.math.evaluation.r_precision"]], "recall_at_k() (in module docarray.math.evaluation)": [[143, "docarray.math.evaluation.recall_at_k"]], "reciprocal_rank() (in module docarray.math.evaluation)": [[143, "docarray.math.evaluation.reciprocal_rank"]], "docarray.math.helper": [[144, "module-docarray.math.helper"]], "minmax_normalize() (in module docarray.math.helper)": [[144, "docarray.math.helper.minmax_normalize"]], "top_k() (in module docarray.math.helper)": [[144, "docarray.math.helper.top_k"]], "update_rows_x_mat_best() (in module docarray.math.helper)": [[144, "docarray.math.helper.update_rows_x_mat_best"]], "check_arraylike_equality() (in module docarray.math.ndarray)": [[145, "docarray.math.ndarray.check_arraylike_equality"]], "detach_tensor_if_present() (in module docarray.math.ndarray)": [[145, "docarray.math.ndarray.detach_tensor_if_present"]], "docarray.math.ndarray": [[145, "module-docarray.math.ndarray"]], "get_array_rows() (in module docarray.math.ndarray)": [[145, "docarray.math.ndarray.get_array_rows"]], "get_array_type() (in module docarray.math.ndarray)": [[145, "docarray.math.ndarray.get_array_type"]], "ravel() (in module docarray.math.ndarray)": [[145, "docarray.math.ndarray.ravel"]], "to_list() (in module docarray.math.ndarray)": [[145, "docarray.math.ndarray.to_list"]], "to_numpy_array() (in module docarray.math.ndarray)": [[145, "docarray.math.ndarray.to_numpy_array"]], "unravel() (in module docarray.math.ndarray)": [[145, "docarray.math.ndarray.unravel"]], "docarray.proto": [[146, "module-docarray.proto"]], "docarray.proto.docarray_pb2": [[147, "module-docarray.proto.docarray_pb2"]], "docarray.proto.io": [[148, "module-docarray.proto.io"]], "flush_proto() (in module docarray.proto.io)": [[148, "docarray.proto.io.flush_proto"]], "parse_proto() (in module docarray.proto.io)": [[148, "docarray.proto.io.parse_proto"]], "docarray.proto.io.ndarray": [[149, "module-docarray.proto.io.ndarray"]], "flush_ndarray() (in module docarray.proto.io.ndarray)": [[149, "docarray.proto.io.ndarray.flush_ndarray"]], "read_ndarray() (in module docarray.proto.io.ndarray)": [[149, "docarray.proto.io.ndarray.read_ndarray"]], "docarray.proto.pb": [[150, "module-docarray.proto.pb"]], "docarray.proto.pb.docarray_pb2": [[151, "module-docarray.proto.pb.docarray_pb2"]], "docarray.proto.pb2": [[152, "module-docarray.proto.pb2"]], "docarray.proto.pb2.docarray_pb2": [[153, "module-docarray.proto.pb2.docarray_pb2"]], "namedscore (class in docarray.score)": [[154, "docarray.score.NamedScore"]], "clear() (docarray.score.namedscore method)": [[154, "docarray.score.NamedScore.clear"]], "copy_from() (docarray.score.namedscore method)": [[154, "docarray.score.NamedScore.copy_from"]], "description (docarray.score.namedscore property)": [[154, "docarray.score.NamedScore.description"]], "docarray.score": [[154, "module-docarray.score"]], "nbytes (docarray.score.namedscore property)": [[154, "docarray.score.NamedScore.nbytes"]], "non_empty_fields (docarray.score.namedscore property)": [[154, "docarray.score.NamedScore.non_empty_fields"]], "op_name (docarray.score.namedscore property)": [[154, "docarray.score.NamedScore.op_name"]], "pop() (docarray.score.namedscore method)": [[154, "docarray.score.NamedScore.pop"]], "ref_id (docarray.score.namedscore property)": [[154, "docarray.score.NamedScore.ref_id"]], "to_dict() (docarray.score.namedscore method)": [[154, "docarray.score.NamedScore.to_dict"]], "value (docarray.score.namedscore property)": [[154, "docarray.score.NamedScore.value"]], "namedscoredata (class in docarray.score.data)": [[155, "docarray.score.data.NamedScoreData"]], "description (docarray.score.data.namedscoredata attribute)": [[155, "docarray.score.data.NamedScoreData.description"]], "docarray.score.data": [[155, "module-docarray.score.data"]], "op_name (docarray.score.data.namedscoredata attribute)": [[155, "docarray.score.data.NamedScoreData.op_name"]], "ref_id (docarray.score.data.namedscoredata attribute)": [[155, "docarray.score.data.NamedScoreData.ref_id"]], "value (docarray.score.data.namedscoredata attribute)": [[155, "docarray.score.data.NamedScoreData.value"]], "allmixins (class in docarray.score.mixins)": [[156, "docarray.score.mixins.AllMixins"]], "description (docarray.score.mixins.allmixins property)": [[156, "docarray.score.mixins.AllMixins.description"]], "docarray.score.mixins": [[156, "module-docarray.score.mixins"]], "op_name (docarray.score.mixins.allmixins property)": [[156, "docarray.score.mixins.AllMixins.op_name"]], "ref_id (docarray.score.mixins.allmixins property)": [[156, "docarray.score.mixins.AllMixins.ref_id"]], "to_dict() (docarray.score.mixins.allmixins method)": [[156, "docarray.score.mixins.AllMixins.to_dict"]], "value (docarray.score.mixins.allmixins property)": [[156, "docarray.score.mixins.AllMixins.value"]], "propertymixin (class in docarray.score.mixins.property)": [[157, "docarray.score.mixins.property.PropertyMixin"]], "description (docarray.score.mixins.property.propertymixin property)": [[157, "docarray.score.mixins.property.PropertyMixin.description"]], "docarray.score.mixins.property": [[157, "module-docarray.score.mixins.property"]], "op_name (docarray.score.mixins.property.propertymixin property)": [[157, "docarray.score.mixins.property.PropertyMixin.op_name"]], "ref_id (docarray.score.mixins.property.propertymixin property)": [[157, "docarray.score.mixins.property.PropertyMixin.ref_id"]], "value (docarray.score.mixins.property.propertymixin property)": [[157, "docarray.score.mixins.property.PropertyMixin.value"]], "representmixin (class in docarray.score.mixins.representer)": [[158, "docarray.score.mixins.representer.RepresentMixin"]], "docarray.score.mixins.representer": [[158, "module-docarray.score.mixins.representer"]], "to_dict() (docarray.score.mixins.representer.representmixin method)": [[158, "docarray.score.mixins.representer.RepresentMixin.to_dict"]], "docarray.typing": [[159, "module-docarray.typing"]]}})