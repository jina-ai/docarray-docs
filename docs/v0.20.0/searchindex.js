Search.setIndex({"docnames": ["advanced/document-store/annlite", "advanced/document-store/benchmark", "advanced/document-store/elasticsearch", "advanced/document-store/extend", "advanced/document-store/index", "advanced/document-store/milvus", "advanced/document-store/qdrant", "advanced/document-store/redis", "advanced/document-store/sqlite", "advanced/document-store/weaviate", "advanced/graphql-support/index", "advanced/torch-support/index", "api", "api/docarray", "api/docarray.array", "api/docarray.array.annlite", "api/docarray.array.base", "api/docarray.array.chunk", "api/docarray.array.document", "api/docarray.array.elastic", "api/docarray.array.match", "api/docarray.array.memory", "api/docarray.array.milvus", "api/docarray.array.mixins", "api/docarray.array.mixins.content", "api/docarray.array.mixins.dataloader", "api/docarray.array.mixins.dataloader.helper", "api/docarray.array.mixins.delitem", "api/docarray.array.mixins.embed", "api/docarray.array.mixins.empty", "api/docarray.array.mixins.evaluation", "api/docarray.array.mixins.find", "api/docarray.array.mixins.getattr", "api/docarray.array.mixins.getitem", "api/docarray.array.mixins.group", "api/docarray.array.mixins.io", "api/docarray.array.mixins.io.binary", "api/docarray.array.mixins.io.common", "api/docarray.array.mixins.io.csv", "api/docarray.array.mixins.io.dataframe", "api/docarray.array.mixins.io.from_gen", "api/docarray.array.mixins.io.json", "api/docarray.array.mixins.io.pbar", "api/docarray.array.mixins.io.pushpull", "api/docarray.array.mixins.match", "api/docarray.array.mixins.parallel", "api/docarray.array.mixins.plot", "api/docarray.array.mixins.post", "api/docarray.array.mixins.pydantic", "api/docarray.array.mixins.reduce", "api/docarray.array.mixins.sample", "api/docarray.array.mixins.setitem", "api/docarray.array.mixins.strawberry", "api/docarray.array.mixins.text", "api/docarray.array.mixins.traverse", "api/docarray.array.qdrant", "api/docarray.array.queryset", "api/docarray.array.queryset.lookup", "api/docarray.array.queryset.parser", "api/docarray.array.redis", "api/docarray.array.sqlite", "api/docarray.array.storage", "api/docarray.array.storage.annlite", "api/docarray.array.storage.annlite.backend", "api/docarray.array.storage.annlite.find", "api/docarray.array.storage.annlite.getsetdel", "api/docarray.array.storage.annlite.helper", "api/docarray.array.storage.annlite.seqlike", "api/docarray.array.storage.base", "api/docarray.array.storage.base.backend", "api/docarray.array.storage.base.getsetdel", "api/docarray.array.storage.base.helper", "api/docarray.array.storage.base.seqlike", "api/docarray.array.storage.elastic", "api/docarray.array.storage.elastic.backend", "api/docarray.array.storage.elastic.find", "api/docarray.array.storage.elastic.getsetdel", "api/docarray.array.storage.elastic.seqlike", "api/docarray.array.storage.memory", "api/docarray.array.storage.memory.backend", "api/docarray.array.storage.memory.find", "api/docarray.array.storage.memory.getsetdel", "api/docarray.array.storage.memory.seqlike", "api/docarray.array.storage.milvus", "api/docarray.array.storage.milvus.backend", "api/docarray.array.storage.milvus.find", "api/docarray.array.storage.milvus.getsetdel", "api/docarray.array.storage.milvus.seqlike", "api/docarray.array.storage.qdrant", "api/docarray.array.storage.qdrant.backend", "api/docarray.array.storage.qdrant.find", "api/docarray.array.storage.qdrant.getsetdel", "api/docarray.array.storage.qdrant.helper", "api/docarray.array.storage.qdrant.seqlike", "api/docarray.array.storage.redis", "api/docarray.array.storage.redis.backend", "api/docarray.array.storage.redis.find", "api/docarray.array.storage.redis.getsetdel", "api/docarray.array.storage.redis.seqlike", "api/docarray.array.storage.registry", "api/docarray.array.storage.sqlite", "api/docarray.array.storage.sqlite.backend", "api/docarray.array.storage.sqlite.getsetdel", "api/docarray.array.storage.sqlite.helper", "api/docarray.array.storage.sqlite.seqlike", "api/docarray.array.storage.weaviate", "api/docarray.array.storage.weaviate.backend", "api/docarray.array.storage.weaviate.find", "api/docarray.array.storage.weaviate.getsetdel", "api/docarray.array.storage.weaviate.seqlike", "api/docarray.array.weaviate", "api/docarray.base", "api/docarray.dataclasses", "api/docarray.dataclasses.enums", "api/docarray.dataclasses.getter", "api/docarray.dataclasses.setter", "api/docarray.dataclasses.types", "api/docarray.document", "api/docarray.document.data", "api/docarray.document.generators", "api/docarray.document.mixins", "api/docarray.document.mixins.attribute", "api/docarray.document.mixins.audio", "api/docarray.document.mixins.blob", "api/docarray.document.mixins.content", "api/docarray.document.mixins.convert", "api/docarray.document.mixins.dump", "api/docarray.document.mixins.featurehash", "api/docarray.document.mixins.helper", "api/docarray.document.mixins.image", "api/docarray.document.mixins.mesh", "api/docarray.document.mixins.multimodal", "api/docarray.document.mixins.plot", "api/docarray.document.mixins.porting", "api/docarray.document.mixins.property", "api/docarray.document.mixins.protobuf", "api/docarray.document.mixins.pydantic", "api/docarray.document.mixins.rich_embedding", "api/docarray.document.mixins.strawberry", "api/docarray.document.mixins.sugar", "api/docarray.document.mixins.text", "api/docarray.document.mixins.video", "api/docarray.document.pydantic_model", "api/docarray.document.strawberry_type", "api/docarray.helper", "api/docarray.math", "api/docarray.math.distance", "api/docarray.math.distance.numpy", "api/docarray.math.distance.paddle", "api/docarray.math.distance.tensorflow", "api/docarray.math.distance.torch", "api/docarray.math.evaluation", "api/docarray.math.helper", "api/docarray.math.ndarray", "api/docarray.proto", "api/docarray.proto.docarray_pb2", "api/docarray.proto.io", "api/docarray.proto.io.ndarray", "api/docarray.proto.pb", "api/docarray.proto.pb.docarray_pb2", "api/docarray.proto.pb2", "api/docarray.proto.pb2.docarray_pb2", "api/docarray.score", "api/docarray.score.data", "api/docarray.score.mixins", "api/docarray.score.mixins.property", "api/docarray.score.mixins.representer", "api/docarray.typing", "api/modules", "changelog/index", "datatypes/audio/index", "datatypes/image/index", "datatypes/index", "datatypes/mesh/index", "datatypes/multimodal/index", "datatypes/tabular/index", "datatypes/text/index", "datatypes/video/index", "fundamentals/cloud-support/data", "fundamentals/cloud-support/index", "fundamentals/cloud-support/login", "fundamentals/dataclass/access", "fundamentals/dataclass/construct", "fundamentals/dataclass/example", "fundamentals/dataclass/index", "fundamentals/dataclass/new-type", "fundamentals/document/attribute", "fundamentals/document/construct", "fundamentals/document/embedding", "fundamentals/document/fluent-interface", "fundamentals/document/index", "fundamentals/document/nested", "fundamentals/document/serialization", "fundamentals/document/visualization", "fundamentals/documentarray/access-attributes", "fundamentals/documentarray/access-elements", "fundamentals/documentarray/construct", "fundamentals/documentarray/embedding", "fundamentals/documentarray/evaluation", "fundamentals/documentarray/find", "fundamentals/documentarray/index", "fundamentals/documentarray/matching", "fundamentals/documentarray/parallelization", "fundamentals/documentarray/post-external", "fundamentals/documentarray/serialization", "fundamentals/documentarray/subindex", "fundamentals/documentarray/visualization", "fundamentals/fastapi-support/index", "fundamentals/notebook-support/index", "get-started/install", "get-started/what-is", "index", "proto/docs", "proto/index"], "filenames": ["advanced/document-store/annlite.md", "advanced/document-store/benchmark.md", "advanced/document-store/elasticsearch.md", "advanced/document-store/extend.md", "advanced/document-store/index.md", "advanced/document-store/milvus.md", "advanced/document-store/qdrant.md", "advanced/document-store/redis.md", "advanced/document-store/sqlite.md", "advanced/document-store/weaviate.md", "advanced/graphql-support/index.md", "advanced/torch-support/index.md", "api.rst", "api/docarray.rst", "api/docarray.array.rst", "api/docarray.array.annlite.rst", "api/docarray.array.base.rst", "api/docarray.array.chunk.rst", "api/docarray.array.document.rst", "api/docarray.array.elastic.rst", "api/docarray.array.match.rst", "api/docarray.array.memory.rst", "api/docarray.array.milvus.rst", "api/docarray.array.mixins.rst", "api/docarray.array.mixins.content.rst", "api/docarray.array.mixins.dataloader.rst", "api/docarray.array.mixins.dataloader.helper.rst", "api/docarray.array.mixins.delitem.rst", "api/docarray.array.mixins.embed.rst", "api/docarray.array.mixins.empty.rst", "api/docarray.array.mixins.evaluation.rst", "api/docarray.array.mixins.find.rst", "api/docarray.array.mixins.getattr.rst", "api/docarray.array.mixins.getitem.rst", "api/docarray.array.mixins.group.rst", "api/docarray.array.mixins.io.rst", "api/docarray.array.mixins.io.binary.rst", "api/docarray.array.mixins.io.common.rst", "api/docarray.array.mixins.io.csv.rst", "api/docarray.array.mixins.io.dataframe.rst", "api/docarray.array.mixins.io.from_gen.rst", "api/docarray.array.mixins.io.json.rst", "api/docarray.array.mixins.io.pbar.rst", "api/docarray.array.mixins.io.pushpull.rst", "api/docarray.array.mixins.match.rst", "api/docarray.array.mixins.parallel.rst", "api/docarray.array.mixins.plot.rst", "api/docarray.array.mixins.post.rst", "api/docarray.array.mixins.pydantic.rst", "api/docarray.array.mixins.reduce.rst", "api/docarray.array.mixins.sample.rst", "api/docarray.array.mixins.setitem.rst", "api/docarray.array.mixins.strawberry.rst", "api/docarray.array.mixins.text.rst", "api/docarray.array.mixins.traverse.rst", "api/docarray.array.qdrant.rst", "api/docarray.array.queryset.rst", "api/docarray.array.queryset.lookup.rst", "api/docarray.array.queryset.parser.rst", "api/docarray.array.redis.rst", "api/docarray.array.sqlite.rst", "api/docarray.array.storage.rst", "api/docarray.array.storage.annlite.rst", "api/docarray.array.storage.annlite.backend.rst", "api/docarray.array.storage.annlite.find.rst", "api/docarray.array.storage.annlite.getsetdel.rst", "api/docarray.array.storage.annlite.helper.rst", "api/docarray.array.storage.annlite.seqlike.rst", "api/docarray.array.storage.base.rst", "api/docarray.array.storage.base.backend.rst", "api/docarray.array.storage.base.getsetdel.rst", "api/docarray.array.storage.base.helper.rst", "api/docarray.array.storage.base.seqlike.rst", "api/docarray.array.storage.elastic.rst", "api/docarray.array.storage.elastic.backend.rst", "api/docarray.array.storage.elastic.find.rst", "api/docarray.array.storage.elastic.getsetdel.rst", "api/docarray.array.storage.elastic.seqlike.rst", "api/docarray.array.storage.memory.rst", "api/docarray.array.storage.memory.backend.rst", "api/docarray.array.storage.memory.find.rst", "api/docarray.array.storage.memory.getsetdel.rst", "api/docarray.array.storage.memory.seqlike.rst", "api/docarray.array.storage.milvus.rst", "api/docarray.array.storage.milvus.backend.rst", "api/docarray.array.storage.milvus.find.rst", "api/docarray.array.storage.milvus.getsetdel.rst", "api/docarray.array.storage.milvus.seqlike.rst", "api/docarray.array.storage.qdrant.rst", "api/docarray.array.storage.qdrant.backend.rst", "api/docarray.array.storage.qdrant.find.rst", "api/docarray.array.storage.qdrant.getsetdel.rst", "api/docarray.array.storage.qdrant.helper.rst", "api/docarray.array.storage.qdrant.seqlike.rst", "api/docarray.array.storage.redis.rst", "api/docarray.array.storage.redis.backend.rst", "api/docarray.array.storage.redis.find.rst", "api/docarray.array.storage.redis.getsetdel.rst", "api/docarray.array.storage.redis.seqlike.rst", "api/docarray.array.storage.registry.rst", "api/docarray.array.storage.sqlite.rst", "api/docarray.array.storage.sqlite.backend.rst", "api/docarray.array.storage.sqlite.getsetdel.rst", "api/docarray.array.storage.sqlite.helper.rst", "api/docarray.array.storage.sqlite.seqlike.rst", "api/docarray.array.storage.weaviate.rst", "api/docarray.array.storage.weaviate.backend.rst", "api/docarray.array.storage.weaviate.find.rst", "api/docarray.array.storage.weaviate.getsetdel.rst", "api/docarray.array.storage.weaviate.seqlike.rst", "api/docarray.array.weaviate.rst", "api/docarray.base.rst", "api/docarray.dataclasses.rst", "api/docarray.dataclasses.enums.rst", "api/docarray.dataclasses.getter.rst", "api/docarray.dataclasses.setter.rst", "api/docarray.dataclasses.types.rst", "api/docarray.document.rst", "api/docarray.document.data.rst", "api/docarray.document.generators.rst", "api/docarray.document.mixins.rst", "api/docarray.document.mixins.attribute.rst", "api/docarray.document.mixins.audio.rst", "api/docarray.document.mixins.blob.rst", "api/docarray.document.mixins.content.rst", "api/docarray.document.mixins.convert.rst", "api/docarray.document.mixins.dump.rst", "api/docarray.document.mixins.featurehash.rst", "api/docarray.document.mixins.helper.rst", "api/docarray.document.mixins.image.rst", "api/docarray.document.mixins.mesh.rst", "api/docarray.document.mixins.multimodal.rst", "api/docarray.document.mixins.plot.rst", "api/docarray.document.mixins.porting.rst", "api/docarray.document.mixins.property.rst", "api/docarray.document.mixins.protobuf.rst", "api/docarray.document.mixins.pydantic.rst", "api/docarray.document.mixins.rich_embedding.rst", "api/docarray.document.mixins.strawberry.rst", "api/docarray.document.mixins.sugar.rst", "api/docarray.document.mixins.text.rst", "api/docarray.document.mixins.video.rst", "api/docarray.document.pydantic_model.rst", "api/docarray.document.strawberry_type.rst", "api/docarray.helper.rst", "api/docarray.math.rst", "api/docarray.math.distance.rst", "api/docarray.math.distance.numpy.rst", "api/docarray.math.distance.paddle.rst", "api/docarray.math.distance.tensorflow.rst", "api/docarray.math.distance.torch.rst", "api/docarray.math.evaluation.rst", "api/docarray.math.helper.rst", "api/docarray.math.ndarray.rst", "api/docarray.proto.rst", "api/docarray.proto.docarray_pb2.rst", "api/docarray.proto.io.rst", "api/docarray.proto.io.ndarray.rst", "api/docarray.proto.pb.rst", "api/docarray.proto.pb.docarray_pb2.rst", "api/docarray.proto.pb2.rst", "api/docarray.proto.pb2.docarray_pb2.rst", "api/docarray.score.rst", "api/docarray.score.data.rst", "api/docarray.score.mixins.rst", "api/docarray.score.mixins.property.rst", "api/docarray.score.mixins.representer.rst", "api/docarray.typing.rst", "api/modules.rst", "changelog/index.md", "datatypes/audio/index.md", "datatypes/image/index.md", "datatypes/index.md", "datatypes/mesh/index.md", "datatypes/multimodal/index.md", "datatypes/tabular/index.md", "datatypes/text/index.md", "datatypes/video/index.md", "fundamentals/cloud-support/data.md", "fundamentals/cloud-support/index.md", "fundamentals/cloud-support/login.md", "fundamentals/dataclass/access.md", "fundamentals/dataclass/construct.md", "fundamentals/dataclass/example.md", "fundamentals/dataclass/index.md", "fundamentals/dataclass/new-type.md", "fundamentals/document/attribute.md", "fundamentals/document/construct.md", "fundamentals/document/embedding.md", "fundamentals/document/fluent-interface.md", "fundamentals/document/index.md", "fundamentals/document/nested.md", "fundamentals/document/serialization.md", "fundamentals/document/visualization.md", "fundamentals/documentarray/access-attributes.md", "fundamentals/documentarray/access-elements.md", "fundamentals/documentarray/construct.md", "fundamentals/documentarray/embedding.md", "fundamentals/documentarray/evaluation.md", "fundamentals/documentarray/find.md", "fundamentals/documentarray/index.md", "fundamentals/documentarray/matching.md", "fundamentals/documentarray/parallelization.md", "fundamentals/documentarray/post-external.md", "fundamentals/documentarray/serialization.md", "fundamentals/documentarray/subindex.md", "fundamentals/documentarray/visualization.md", "fundamentals/fastapi-support/index.md", "fundamentals/notebook-support/index.md", "get-started/install.md", "get-started/what-is.md", "index.md", "proto/docs.md", "proto/index.md"], "titles": ["Annlite", "One Million Scale Benchmark", "Elasticsearch", "Add New Document Store", "Document Store", "Milvus", "Qdrant", "Redis", "SQLite", "Weaviate", "GraphQL", "PyTorch/Deep Learning Frameworks", "<span class=\"fab fa-python\"></span> Python API", "docarray package", "docarray.array package", "docarray.array.annlite module", "docarray.array.base module", "docarray.array.chunk module", "docarray.array.document module", "docarray.array.elastic module", "docarray.array.match module", "docarray.array.memory module", "docarray.array.milvus module", "docarray.array.mixins package", "docarray.array.mixins.content module", "docarray.array.mixins.dataloader package", "docarray.array.mixins.dataloader.helper module", "docarray.array.mixins.delitem module", "docarray.array.mixins.embed module", "docarray.array.mixins.empty module", "docarray.array.mixins.evaluation module", "docarray.array.mixins.find module", "docarray.array.mixins.getattr module", "docarray.array.mixins.getitem module", "docarray.array.mixins.group module", "docarray.array.mixins.io package", "docarray.array.mixins.io.binary module", "docarray.array.mixins.io.common module", "docarray.array.mixins.io.csv module", "docarray.array.mixins.io.dataframe module", "docarray.array.mixins.io.from_gen module", "docarray.array.mixins.io.json module", "docarray.array.mixins.io.pbar module", "docarray.array.mixins.io.pushpull module", "docarray.array.mixins.match module", "docarray.array.mixins.parallel module", "docarray.array.mixins.plot module", "docarray.array.mixins.post module", "docarray.array.mixins.pydantic module", "docarray.array.mixins.reduce module", "docarray.array.mixins.sample module", "docarray.array.mixins.setitem module", "docarray.array.mixins.strawberry module", "docarray.array.mixins.text module", "docarray.array.mixins.traverse module", "docarray.array.qdrant module", "docarray.array.queryset package", "docarray.array.queryset.lookup module", "docarray.array.queryset.parser module", "docarray.array.redis module", "docarray.array.sqlite module", "docarray.array.storage package", "docarray.array.storage.annlite package", "docarray.array.storage.annlite.backend module", "docarray.array.storage.annlite.find module", "docarray.array.storage.annlite.getsetdel module", "docarray.array.storage.annlite.helper module", "docarray.array.storage.annlite.seqlike module", "docarray.array.storage.base package", "docarray.array.storage.base.backend module", "docarray.array.storage.base.getsetdel module", "docarray.array.storage.base.helper module", "docarray.array.storage.base.seqlike module", "docarray.array.storage.elastic package", "docarray.array.storage.elastic.backend module", "docarray.array.storage.elastic.find module", "docarray.array.storage.elastic.getsetdel module", "docarray.array.storage.elastic.seqlike module", "docarray.array.storage.memory package", "docarray.array.storage.memory.backend module", "docarray.array.storage.memory.find module", "docarray.array.storage.memory.getsetdel module", "docarray.array.storage.memory.seqlike module", "docarray.array.storage.milvus package", "docarray.array.storage.milvus.backend module", "docarray.array.storage.milvus.find module", "docarray.array.storage.milvus.getsetdel module", "docarray.array.storage.milvus.seqlike module", "docarray.array.storage.qdrant package", "docarray.array.storage.qdrant.backend module", "docarray.array.storage.qdrant.find module", "docarray.array.storage.qdrant.getsetdel module", "docarray.array.storage.qdrant.helper module", "docarray.array.storage.qdrant.seqlike module", "docarray.array.storage.redis package", "docarray.array.storage.redis.backend module", "docarray.array.storage.redis.find module", "docarray.array.storage.redis.getsetdel module", "docarray.array.storage.redis.seqlike module", "docarray.array.storage.registry module", "docarray.array.storage.sqlite package", "docarray.array.storage.sqlite.backend module", "docarray.array.storage.sqlite.getsetdel module", "docarray.array.storage.sqlite.helper module", "docarray.array.storage.sqlite.seqlike module", "docarray.array.storage.weaviate package", "docarray.array.storage.weaviate.backend module", "docarray.array.storage.weaviate.find module", "docarray.array.storage.weaviate.getsetdel module", "docarray.array.storage.weaviate.seqlike module", "docarray.array.weaviate module", "docarray.base module", "docarray.dataclasses package", "docarray.dataclasses.enums module", "docarray.dataclasses.getter module", "docarray.dataclasses.setter module", "docarray.dataclasses.types module", "docarray.document package", "docarray.document.data module", "docarray.document.generators module", "docarray.document.mixins package", "docarray.document.mixins.attribute module", "docarray.document.mixins.audio module", "docarray.document.mixins.blob module", "docarray.document.mixins.content module", "docarray.document.mixins.convert module", "docarray.document.mixins.dump module", "docarray.document.mixins.featurehash module", "docarray.document.mixins.helper module", "docarray.document.mixins.image module", "docarray.document.mixins.mesh module", "docarray.document.mixins.multimodal module", "docarray.document.mixins.plot module", "docarray.document.mixins.porting module", "docarray.document.mixins.property module", "docarray.document.mixins.protobuf module", "docarray.document.mixins.pydantic module", "docarray.document.mixins.rich_embedding module", "docarray.document.mixins.strawberry module", "docarray.document.mixins.sugar module", "docarray.document.mixins.text module", "docarray.document.mixins.video module", "docarray.document.pydantic_model module", "docarray.document.strawberry_type module", "docarray.helper module", "docarray.math package", "docarray.math.distance package", "docarray.math.distance.numpy module", "docarray.math.distance.paddle module", "docarray.math.distance.tensorflow module", "docarray.math.distance.torch module", "docarray.math.evaluation module", "docarray.math.helper module", "docarray.math.ndarray module", "docarray.proto package", "docarray.proto.docarray_pb2 module", "docarray.proto.io package", "docarray.proto.io.ndarray module", "docarray.proto.pb package", "docarray.proto.pb.docarray_pb2 module", "docarray.proto.pb2 package", "docarray.proto.pb2.docarray_pb2 module", "docarray.score package", "docarray.score.data module", "docarray.score.mixins package", "docarray.score.mixins.property module", "docarray.score.mixins.representer module", "docarray.typing package", "docarray", "Changelog", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-unmute\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.563 2.069A.75.75 0 018 2.75v10.5a.75.75 0 01-1.238.57L3.472 11H1.75A1.75 1.75 0 010 9.25v-2.5C0 5.784.784 5 1.75 5h1.723l3.289-2.82a.75.75 0 01.801-.111zM6.5 4.38L4.238 6.319a.75.75 0 01-.488.181h-2a.25.25 0 00-.25.25v2.5c0 .138.112.25.25.25h2a.75.75 0 01.488.18L6.5 11.62V4.38zm6.096-2.038a.75.75 0 011.06 0 8 8 0 010 11.314.75.75 0 01-1.06-1.06 6.5 6.5 0 000-9.193.75.75 0 010-1.06v-.001zm-1.06 2.121a.75.75 0 10-1.061 1.061 3.5 3.5 0 010 4.95.75.75 0 101.06 1.06 5 5 0 000-7.07l.001-.001z\"></path></svg> Audio", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-image\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M1.75 2.5a.25.25 0 00-.25.25v10.5c0 .138.112.25.25.25h.94a.76.76 0 01.03-.03l6.077-6.078a1.75 1.75 0 012.412-.06L14.5 10.31V2.75a.25.25 0 00-.25-.25H1.75zm12.5 11H4.81l5.048-5.047a.25.25 0 01.344-.009l4.298 3.889v.917a.25.25 0 01-.25.25zm1.75-.25V2.75A1.75 1.75 0 0014.25 1H1.75A1.75 1.75 0 000 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0016 13.25zM5.5 6a.5.5 0 11-1 0 .5.5 0 011 0zM7 6a2 2 0 11-4 0 2 2 0 014 0z\"></path></svg> Image", "Multimodal Data", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-package\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M8.878.392a1.75 1.75 0 00-1.756 0l-5.25 3.045A1.75 1.75 0 001 4.951v6.098c0 .624.332 1.2.872 1.514l5.25 3.045a1.75 1.75 0 001.756 0l5.25-3.045c.54-.313.872-.89.872-1.514V4.951c0-.624-.332-1.2-.872-1.514L8.878.392zM7.875 1.69a.25.25 0 01.25 0l4.63 2.685L8 7.133 3.245 4.375l4.63-2.685zM2.5 5.677v5.372c0 .09.047.171.125.216l4.625 2.683V8.432L2.5 5.677zm6.25 8.271l4.625-2.683a.25.25 0 00.125-.216V5.677L8.75 8.432v5.516z\"></path></svg> 3D Mesh", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-stack\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.122.392a1.75 1.75 0 011.756 0l5.003 2.902c.83.481.83 1.68 0 2.162L8.878 8.358a1.75 1.75 0 01-1.756 0L2.119 5.456a1.25 1.25 0 010-2.162L7.122.392zM8.125 1.69a.25.25 0 00-.25 0l-4.63 2.685 4.63 2.685a.25.25 0 00.25 0l4.63-2.685-4.63-2.685zM1.601 7.789a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0L1.874 8.814A.75.75 0 011.6 7.789zm0 3.5a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0l-5.248-3.044a.75.75 0 01-.273-1.025z\"></path></svg> Multi-modal", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-table\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v3.585a.746.746 0 010 .83v8.085A1.75 1.75 0 0114.25 16H6.309a.748.748 0 01-1.118 0H1.75A1.75 1.75 0 010 14.25V6.165a.746.746 0 010-.83V1.75zM1.5 6.5v7.75c0 .138.112.25.25.25H5v-8H1.5zM5 5H1.5V1.75a.25.25 0 01.25-.25H5V5zm1.5 1.5v8h7.75a.25.25 0 00.25-.25V6.5h-8zm8-1.5h-8V1.5h7.75a.25.25 0 01.25.25V5z\"></path></svg> Table", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-typography\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M6.21 8.5L4.574 3.594 2.857 8.5H6.21zm.5 1.5l.829 2.487a.75.75 0 001.423-.474L5.735 2.332a1.216 1.216 0 00-2.302-.018l-3.39 9.688a.75.75 0 001.415.496L2.332 10H6.71zm3.13-4.358C10.53 4.374 11.87 4 13 4c1.5 0 3 .939 3 2.601v5.649a.75.75 0 01-1.448.275C13.995 12.82 13.3 13 12.5 13c-.77 0-1.514-.231-2.078-.709-.577-.488-.922-1.199-.922-2.041 0-.694.265-1.411.887-1.944C11 7.78 11.88 7.5 13 7.5h1.5v-.899c0-.54-.5-1.101-1.5-1.101-.869 0-1.528.282-1.84.858a.75.75 0 11-1.32-.716zM14.5 9H13c-.881 0-1.375.22-1.637.444-.253.217-.363.5-.363.806 0 .408.155.697.39.896.249.21.63.354 1.11.354.732 0 1.26-.209 1.588-.449.35-.257.412-.495.412-.551V9z\"></path></svg> Text", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-device-camera-video\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M16 3.75a.75.75 0 00-1.136-.643L11 5.425V4.75A1.75 1.75 0 009.25 3h-7.5A1.75 1.75 0 000 4.75v6.5C0 12.216.784 13 1.75 13h7.5A1.75 1.75 0 0011 11.25v-.675l3.864 2.318A.75.75 0 0016 12.25v-8.5zm-5 5.075l3.5 2.1v-5.85l-3.5 2.1v1.65zM9.5 6.75v-2a.25.25 0 00-.25-.25h-7.5a.25.25 0 00-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-4.5z\"></path></svg> Video", "Data Management", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-rocket\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M14.064 0a8.75 8.75 0 00-6.187 2.563l-.459.458c-.314.314-.616.641-.904.979H3.31a1.75 1.75 0 00-1.49.833L.11 7.607a.75.75 0 00.418 1.11l3.102.954c.037.051.079.1.124.145l2.429 2.428c.046.046.094.088.145.125l.954 3.102a.75.75 0 001.11.418l2.774-1.707a1.75 1.75 0 00.833-1.49V9.485c.338-.288.665-.59.979-.904l.458-.459A8.75 8.75 0 0016 1.936V1.75A1.75 1.75 0 0014.25 0h-.186zM10.5 10.625c-.088.06-.177.118-.266.175l-2.35 1.521.548 1.783 1.949-1.2a.25.25 0 00.119-.213v-2.066zM3.678 8.116L5.2 5.766c.058-.09.117-.178.176-.266H3.309a.25.25 0 00-.213.119l-1.2 1.95 1.782.547zm5.26-4.493A7.25 7.25 0 0114.063 1.5h.186a.25.25 0 01.25.25v.186a7.25 7.25 0 01-2.123 5.127l-.459.458a15.21 15.21 0 01-2.499 2.02l-2.317 1.5-2.143-2.143 1.5-2.317a15.25 15.25 0 012.02-2.5l.458-.458h.002zM12 5a1 1 0 11-2 0 1 1 0 012 0zm-8.44 9.56a1.5 1.5 0 10-2.12-2.12c-.734.73-1.047 2.332-1.15 3.003a.23.23 0 00.265.265c.671-.103 2.273-.416 3.005-1.148z\"></path></svg> Cloud Support", "Authentication", "Access Modality", "Construct", "Process Modality", "Dataclass", "Support New Modality", "Access Attributes", "Construct", "Embedding", "Fluent Interface", "Document", "Nested Structure", "Serialization", "Visualization", "Access Attributes", "Access Documents", "Construct", "Embed via Neural Network", "Evaluate Matches", "Query by Conditions", "DocumentArray", "Find Nearest Neighbours", "Parallelization", "Process via External Flow or Executor", "Serialization", "Search over Nested Structure", "Visualization", "FastAPI/Pydantic", "Jupyter Notebook/Colab", "Install", "What is DocArray?", "Welcome to DocArray!", "Protocol Documentation", "Protocol Documentation"], "terms": {"One": [0, 2, 3, 4, 5, 6, 7, 8, 9, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 169, 171, 175, 176, 177, 182, 184, 186, 187, 190, 192, 194, 195, 196, 199, 201, 202, 203, 204, 207, 210, 211], "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 30, 31, 34, 36, 37, 38, 41, 43, 44, 45, 46, 47, 55, 59, 60, 70, 73, 75, 94, 96, 110, 117, 119, 120, 129, 131, 135, 139, 140, 141, 144, 146, 149, 150, 151, 152, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 30, 31, 36, 37, 38, 41, 42, 43, 44, 45, 46, 49, 53, 54, 55, 57, 59, 60, 70, 73, 75, 94, 96, 110, 116, 117, 119, 120, 123, 125, 127, 129, 132, 133, 139, 140, 144, 151, 169, 170, 171, 174, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "document": [0, 1, 2, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 26, 28, 29, 30, 31, 34, 36, 38, 44, 45, 46, 47, 49, 50, 53, 54, 55, 57, 59, 60, 62, 67, 72, 73, 75, 77, 78, 82, 88, 91, 93, 94, 96, 98, 100, 104, 105, 109, 110, 111, 112, 113, 115, 116, 144, 151, 153, 156, 162, 168, 170, 171, 172, 173, 175, 183, 184, 185, 186, 189, 191, 192, 193, 194, 199, 200, 201, 202, 203, 204, 205, 206, 209, 210, 211], "store": [0, 1, 2, 6, 7, 8, 9, 11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 30, 34, 36, 38, 43, 44, 46, 55, 59, 60, 62, 67, 72, 73, 77, 88, 93, 94, 98, 105, 106, 109, 110, 117, 120, 125, 129, 130, 132, 141, 144, 169, 171, 173, 174, 175, 176, 177, 178, 181, 184, 185, 186, 189, 195, 198, 199, 200, 201, 204, 205, 206, 208, 210, 211], "documentarrai": [0, 1, 8, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 34, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 59, 60, 62, 67, 70, 72, 73, 75, 77, 78, 80, 82, 88, 93, 94, 96, 98, 100, 104, 105, 109, 110, 117, 118, 120, 131, 139, 140, 153, 171, 172, 174, 175, 176, 178, 179, 183, 184, 187, 189, 190, 191, 192, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 209, 210, 211], "It": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 28, 38, 46, 55, 57, 59, 60, 110, 169, 171, 173, 182, 183, 184, 187, 188, 192, 195, 198, 200, 202, 203, 204, 205, 209, 210, 211], "i": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 28, 30, 31, 34, 36, 37, 38, 41, 43, 44, 45, 46, 49, 50, 53, 54, 55, 57, 59, 60, 62, 67, 69, 70, 72, 73, 75, 77, 78, 82, 88, 93, 94, 96, 98, 100, 104, 105, 109, 110, 116, 117, 119, 120, 122, 123, 125, 126, 129, 132, 139, 140, 141, 142, 144, 146, 151, 152, 153, 169, 170, 171, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213], "when": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 31, 34, 36, 38, 44, 45, 46, 49, 54, 55, 59, 60, 73, 75, 94, 96, 110, 116, 117, 119, 120, 129, 130, 139, 152, 169, 171, 174, 176, 177, 182, 185, 186, 187, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 205, 207, 210, 212, 213], "one": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 30, 34, 44, 45, 47, 49, 54, 55, 59, 60, 66, 110, 117, 119, 120, 130, 139, 151, 171, 175, 176, 177, 181, 182, 184, 185, 186, 187, 189, 192, 194, 195, 196, 197, 198, 199, 201, 202, 204, 205, 206, 208, 209, 210], "want": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 17, 18, 19, 20, 21, 23, 43, 46, 49, 55, 59, 60, 70, 110, 117, 120, 129, 144, 169, 171, 174, 175, 176, 181, 184, 185, 186, 187, 188, 190, 192, 194, 195, 197, 198, 202, 203, 204, 207, 209], "have": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 24, 54, 55, 57, 59, 60, 110, 117, 120, 129, 151, 174, 176, 177, 178, 181, 182, 183, 184, 187, 188, 191, 192, 193, 194, 195, 197, 198, 199, 201, 202, 206, 207, 209, 210, 211, 212, 213], "faster": [0, 2, 4, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 24, 36, 37, 55, 59, 60, 110, 188, 192, 202], "retriev": [0, 1, 2, 3, 4, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 31, 43, 44, 55, 59, 60, 73, 75, 94, 96, 110, 151, 152, 198, 205], "embed": [0, 1, 2, 4, 6, 7, 9, 10, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 28, 30, 38, 44, 46, 55, 59, 60, 110, 117, 118, 120, 127, 134, 139, 142, 143, 172, 176, 181, 182, 183, 190, 192, 193, 197, 198, 199, 201, 204, 205, 207, 209, 210, 211, 212, 213], "e": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 119, 151, 171, 176, 184, 186, 187, 191, 192, 194, 195, 197, 198, 202, 203, 204, 210, 211], "match": [0, 2, 4, 5, 6, 7, 9, 10, 13, 14, 15, 17, 18, 19, 21, 23, 30, 31, 49, 54, 55, 57, 59, 60, 73, 75, 94, 96, 110, 117, 118, 119, 120, 129, 132, 134, 139, 142, 143, 172, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 204, 205, 207, 210, 211, 212, 213], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 36, 38, 43, 44, 45, 46, 49, 54, 55, 57, 59, 60, 62, 63, 66, 67, 72, 73, 74, 75, 77, 79, 88, 93, 94, 95, 96, 98, 101, 105, 106, 109, 110, 111, 116, 117, 119, 120, 124, 125, 127, 129, 131, 132, 139, 140, 141, 142, 144, 151, 162, 169, 171, 173, 174, 176, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "featur": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 117, 120, 127, 141, 169, 170, 172, 173, 174, 177, 181, 182, 184, 188, 189, 192, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211], "requir": [0, 2, 3, 4, 5, 6, 7, 9, 10, 15, 17, 18, 19, 20, 21, 23, 30, 39, 55, 57, 59, 60, 65, 81, 102, 110, 117, 120, 127, 141, 171, 173, 174, 177, 182, 190, 191, 192, 198, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213], "you": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 30, 31, 39, 43, 44, 45, 46, 49, 55, 59, 60, 70, 73, 75, 94, 96, 110, 117, 119, 120, 129, 140, 142, 151, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211], "instal": [0, 2, 5, 6, 7, 9, 10, 15, 39, 55, 110, 171, 173, 177, 192, 203, 204, 206, 207, 208], "via": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 41, 43, 45, 54, 55, 59, 60, 110, 171, 172, 173, 175, 177, 182, 184, 191, 192, 193, 194, 195, 201, 204, 207, 208, 209, 210, 211], "pip": [0, 2, 5, 6, 7, 9, 10, 15, 55, 110, 171, 173, 177, 192, 203, 204, 206, 207, 208, 209, 211], "docarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 208], "instanti": [0, 2, 5, 6, 7, 9, 19, 55, 59, 110, 172], "storag": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 31, 43, 55, 59, 60, 110, 176, 178, 205, 210], "like": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 15, 17, 18, 19, 20, 21, 23, 30, 36, 40, 43, 46, 55, 59, 60, 67, 72, 77, 82, 98, 104, 109, 110, 117, 120, 122, 127, 129, 130, 135, 141, 147, 171, 173, 174, 176, 177, 181, 182, 186, 188, 190, 192, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 210, 212, 213], "so": [0, 3, 4, 5, 6, 9, 15, 17, 18, 19, 20, 21, 23, 43, 55, 57, 59, 60, 110, 117, 120, 140, 171, 183, 184, 185, 192, 194, 195, 198, 201, 202, 210], "from": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 23, 26, 28, 30, 31, 34, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 49, 50, 53, 55, 57, 59, 60, 62, 67, 72, 73, 75, 77, 78, 82, 88, 93, 94, 96, 98, 100, 104, 105, 109, 110, 111, 116, 117, 119, 120, 123, 125, 129, 130, 132, 133, 136, 138, 139, 140, 141, 142, 144, 151, 152, 153, 162, 169, 170, 171, 172, 173, 174, 175, 176, 178, 180, 181, 183, 184, 185, 188, 189, 190, 193, 194, 195, 197, 198, 199, 201, 202, 203, 205, 206, 207, 209, 210, 211, 212, 213], "import": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 26, 28, 39, 45, 55, 59, 60, 110, 116, 117, 153, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211], "da": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 26, 38, 44, 45, 53, 55, 59, 60, 110, 144, 169, 171, 174, 175, 176, 178, 181, 183, 188, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 210], "n_dim": [0, 2, 4, 5, 6, 7, 9, 14, 15, 18, 19, 55, 59, 61, 62, 63, 73, 74, 88, 89, 91, 94, 95, 105, 106, 110, 117, 120, 127, 176, 205], "10": [0, 2, 3, 4, 5, 6, 7, 9, 11, 15, 17, 18, 19, 20, 21, 23, 26, 45, 46, 55, 59, 60, 105, 106, 110, 117, 120, 132, 176, 177, 178, 188, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 209], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 30, 31, 34, 37, 43, 45, 49, 50, 53, 55, 57, 59, 60, 62, 67, 70, 72, 73, 75, 77, 78, 82, 88, 93, 94, 96, 98, 100, 104, 105, 109, 110, 116, 117, 119, 120, 129, 132, 141, 144, 169, 171, 173, 176, 177, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213], "would": [0, 1, 2, 3, 4, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 24, 55, 59, 60, 110, 176, 184, 186, 190, 194, 196, 210], "same": [0, 1, 2, 3, 5, 6, 7, 8, 9, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 30, 31, 34, 43, 44, 45, 46, 49, 55, 59, 60, 73, 75, 94, 96, 110, 117, 120, 129, 139, 153, 174, 176, 177, 182, 184, 187, 190, 191, 192, 194, 195, 198, 200, 204, 207, 208, 212, 213], "ordinari": [0, 2, 6, 7, 9], "To": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 15, 17, 18, 19, 20, 21, 23, 26, 30, 36, 44, 45, 55, 59, 60, 110, 117, 120, 140, 169, 170, 173, 174, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 195, 196, 198, 199, 201, 202, 204, 205, 209, 213], "access": [0, 1, 2, 5, 6, 7, 8, 9, 15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110, 124, 172, 177, 178, 182, 184, 187, 189, 191, 199, 200, 205, 210], "formerli": [0, 2, 6, 8, 9], "persist": [0, 2, 3, 5, 6, 7, 8, 9, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110], "specifi": [0, 2, 5, 6, 7, 8, 9, 15, 17, 18, 19, 20, 21, 23, 26, 30, 31, 34, 36, 44, 46, 55, 59, 60, 73, 75, 94, 96, 110, 117, 119, 142, 144, 171, 182, 185, 187, 192, 195, 197, 198, 199, 201, 204, 205, 212, 213], "data_path": [0, 3, 4, 14, 15, 61, 62, 63, 66, 176, 205], "data": [0, 2, 3, 4, 5, 7, 9, 10, 11, 13, 15, 17, 18, 19, 20, 21, 23, 25, 36, 37, 38, 41, 48, 49, 55, 59, 60, 62, 67, 71, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 117, 119, 120, 122, 123, 125, 126, 129, 130, 132, 133, 136, 138, 140, 141, 142, 144, 152, 162, 173, 175, 176, 179, 181, 182, 184, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213], "summari": [0, 2, 5, 6, 7, 8, 9, 10, 13, 14, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 132, 171, 173, 174, 175, 176, 178, 181, 182, 185, 187, 188, 191, 193, 194, 195, 196, 198, 199, 203, 204, 205], "note": [0, 1, 3, 4, 15, 17, 18, 19, 20, 21, 23, 26, 30, 34, 37, 44, 55, 59, 60, 110, 117, 120, 127, 139, 141, 142, 144, 151, 169, 171, 177, 189, 191, 192, 195, 196, 197, 198, 201, 208, 209, 212, 213], "mandatori": [0, 5, 6, 7], "befor": [0, 1, 5, 6, 10, 15, 16, 17, 18, 19, 20, 21, 23, 26, 30, 34, 45, 55, 57, 59, 60, 110, 142, 169, 171, 174, 176, 181, 182, 183, 184, 202, 207, 209], "backend": [0, 1, 10, 15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 31, 44, 45, 55, 59, 60, 61, 62, 68, 70, 73, 75, 78, 83, 88, 94, 96, 100, 105, 110, 117, 120, 139, 192, 199], "other": [0, 1, 2, 3, 4, 6, 7, 8, 9, 15, 17, 18, 19, 20, 21, 23, 30, 31, 44, 49, 55, 57, 59, 60, 70, 73, 75, 94, 96, 110, 111, 117, 120, 139, 142, 151, 162, 171, 172, 174, 182, 186, 188, 190, 192, 198, 202, 204, 205, 210, 212, 213], "function": [0, 1, 2, 3, 4, 6, 7, 8, 9, 11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 33, 36, 37, 38, 39, 40, 44, 45, 46, 47, 50, 51, 53, 54, 55, 57, 59, 60, 62, 63, 65, 73, 74, 79, 80, 81, 95, 101, 102, 105, 106, 110, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 132, 136, 138, 140, 141, 142, 144, 151, 169, 171, 174, 176, 182, 185, 186, 189, 190, 197, 199, 201, 202, 210, 212, 213], "behav": [0, 2, 6, 7, 8, 9, 142, 194], "memori": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 23, 25, 26, 30, 36, 45, 55, 59, 60, 61, 62, 67, 72, 73, 77, 88, 93, 94, 98, 105, 109, 110, 174, 178, 187, 196, 197, 198, 200, 201, 204, 210, 211], "follow": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 31, 47, 55, 57, 59, 60, 70, 73, 75, 94, 96, 110, 117, 120, 132, 139, 169, 171, 173, 174, 181, 182, 183, 184, 187, 188, 189, 190, 192, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 211], "set": [0, 1, 2, 3, 4, 6, 7, 8, 15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 31, 34, 36, 38, 43, 44, 45, 46, 49, 50, 55, 57, 59, 60, 73, 75, 94, 96, 110, 116, 117, 119, 120, 121, 123, 125, 127, 129, 132, 135, 139, 140, 141, 142, 144, 153, 169, 182, 184, 185, 186, 187, 188, 190, 192, 194, 195, 196, 197, 198, 201, 202, 204, 205, 210], "name": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 17, 18, 19, 20, 21, 23, 26, 28, 30, 34, 38, 43, 46, 55, 57, 59, 60, 61, 62, 66, 105, 106, 110, 111, 117, 119, 120, 122, 141, 144, 162, 173, 175, 178, 181, 182, 184, 186, 194, 195, 197, 199, 203, 205, 212, 213], "descript": [0, 2, 5, 6, 7, 8, 9, 13, 42, 116, 162, 163, 164, 165, 174, 181, 182, 184, 190, 191, 199, 204, 212, 213], "default": [0, 2, 3, 4, 5, 6, 7, 8, 9, 15, 16, 17, 18, 19, 20, 21, 23, 26, 28, 30, 31, 34, 37, 38, 41, 43, 44, 45, 50, 55, 59, 60, 62, 67, 72, 73, 75, 77, 78, 82, 88, 93, 94, 96, 98, 100, 104, 105, 109, 110, 111, 116, 117, 119, 120, 125, 129, 139, 142, 144, 162, 182, 185, 192, 197, 198, 201, 202, 203, 204], "number": [0, 1, 4, 5, 6, 7, 8, 9, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 28, 29, 30, 31, 44, 45, 47, 50, 55, 59, 60, 62, 67, 69, 72, 73, 75, 77, 78, 82, 88, 93, 94, 96, 98, 100, 104, 105, 106, 109, 110, 111, 117, 119, 120, 125, 127, 130, 132, 139, 144, 151, 152, 153, 162, 171, 173, 181, 186, 198, 199, 210, 212, 213], "dimens": [0, 1, 2, 5, 6, 7, 15, 17, 18, 19, 20, 21, 23, 24, 55, 59, 60, 110, 117, 119, 120, 127, 152, 177, 212, 213], "alwai": [0, 1, 5, 6, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 46, 55, 59, 60, 110, 153, 172, 175, 181, 182, 183, 189, 190, 192, 195, 197, 201, 212, 213], "folder": [0, 15, 17, 18, 19, 20, 21, 23, 43, 46, 55, 59, 60, 110], "where": [0, 2, 4, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 34, 36, 43, 44, 46, 53, 55, 59, 60, 110, 117, 120, 139, 140, 151, 153, 176, 177, 181, 185, 194, 195, 198, 202, 204, 209, 210], "locat": [0, 4, 7, 13, 117, 118, 120, 134, 142, 143, 190, 192, 204, 212, 213], "A": [0, 1, 3, 4, 5, 9, 15, 17, 18, 19, 20, 21, 23, 26, 30, 31, 44, 45, 49, 50, 54, 55, 57, 58, 59, 60, 80, 110, 117, 144, 171, 173, 181, 182, 184, 186, 190, 195, 199, 201, 208, 212, 213], "random": [0, 1, 4, 5, 6, 8, 10, 11, 15, 17, 18, 19, 20, 21, 23, 46, 50, 55, 59, 60, 110, 144, 187, 188, 194, 197, 198, 201, 205, 206, 207, 210], "temp": [0, 8], "metric": [0, 1, 2, 4, 5, 6, 7, 9, 14, 15, 17, 18, 19, 20, 21, 23, 30, 31, 44, 55, 59, 60, 61, 62, 63, 73, 75, 94, 96, 110, 117, 120, 139, 146, 151, 176, 190, 201, 205, 212, 213], "distanc": [0, 1, 2, 3, 5, 6, 7, 9, 13, 14, 15, 17, 18, 19, 20, 21, 23, 30, 31, 44, 55, 59, 60, 61, 73, 74, 75, 88, 89, 90, 94, 95, 96, 105, 106, 110, 117, 120, 139, 145, 152, 173, 201], "dure": [0, 1, 3, 4, 5, 6, 9, 15, 17, 18, 19, 20, 21, 23, 43, 54, 55, 59, 60, 110, 117, 176, 187, 210], "cosin": [0, 2, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 30, 31, 44, 55, 59, 60, 62, 63, 73, 74, 75, 88, 89, 94, 95, 96, 110, 139, 145, 146, 147, 149, 150, 174, 176, 194, 201, 205], "dot": [0, 6, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 190], "euclidean": [0, 4, 6, 15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110, 145, 146, 147, 149, 150, 201], "ef_construct": [0, 1, 2, 6, 7, 9, 14, 15, 19, 55, 59, 61, 62, 63, 73, 74, 88, 89, 94, 95, 105, 106, 110, 205], "size": [0, 1, 2, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 29, 34, 37, 40, 41, 45, 46, 55, 59, 60, 62, 66, 110, 117, 119, 120, 129, 132, 171, 173, 174, 177, 181, 198, 199, 204], "dynam": [0, 1, 2, 5, 9, 190, 210, 212, 213], "list": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 30, 31, 34, 36, 40, 41, 43, 46, 48, 49, 50, 52, 54, 55, 59, 60, 62, 63, 66, 67, 72, 73, 74, 75, 77, 78, 82, 88, 89, 93, 94, 95, 96, 98, 100, 104, 105, 106, 109, 110, 117, 118, 119, 120, 134, 135, 142, 143, 144, 151, 153, 172, 182, 186, 188, 190, 191, 192, 194, 195, 198, 200, 201, 203, 207, 210, 211, 212, 213], "nearest": [0, 1, 2, 3, 4, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 30, 31, 44, 55, 59, 60, 73, 75, 94, 96, 110, 198, 199, 211], "neighbor": [0, 1, 2, 3, 5, 7, 9, 15, 17, 18, 19, 20, 21, 23, 30, 31, 55, 59, 60, 73, 75, 94, 96, 110, 117, 120, 129, 211], "construct": [0, 1, 2, 3, 5, 6, 9, 117, 142, 181, 183, 184, 190, 195, 198, 200], "none": [0, 2, 3, 5, 6, 7, 8, 9, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 30, 31, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 50, 54, 55, 59, 60, 62, 63, 66, 67, 71, 72, 73, 74, 75, 77, 78, 82, 88, 89, 93, 94, 95, 96, 98, 100, 101, 103, 104, 105, 106, 109, 110, 111, 116, 117, 118, 119, 120, 125, 129, 132, 133, 135, 139, 140, 141, 142, 143, 144, 151, 152, 153, 156, 157, 162, 163, 173, 174, 183, 186, 192, 196, 198, 204, 205, 207], "valu": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 13, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 30, 31, 34, 41, 44, 45, 46, 49, 53, 55, 57, 59, 60, 62, 67, 69, 72, 73, 75, 77, 78, 82, 88, 93, 94, 96, 98, 100, 104, 105, 109, 110, 111, 113, 115, 116, 117, 120, 129, 131, 133, 139, 140, 142, 144, 151, 152, 153, 157, 162, 163, 164, 165, 169, 174, 175, 176, 181, 182, 185, 186, 187, 190, 192, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 210], "packag": [0, 1, 141, 168, 170, 182, 188, 209, 210, 211], "ef_search": [0, 14, 15, 61, 62, 63, 205], "max_connect": [0, 1, 9, 14, 15, 61, 62, 63, 105, 106, 110, 205], "bi": [0, 1], "direct": [0, 1, 66], "link": [0, 1], "creat": [0, 1, 10, 15, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 30, 34, 36, 55, 57, 59, 60, 66, 69, 110, 116, 117, 119, 120, 141, 142, 144, 172, 173, 174, 176, 181, 182, 183, 186, 195, 198, 205, 210], "everi": [0, 1, 4, 5, 15, 17, 18, 19, 20, 21, 23, 26, 30, 45, 46, 49, 55, 59, 60, 110, 169, 187, 198, 202], "new": [0, 1, 4, 5, 9, 15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 66, 69, 110, 116, 117, 120, 129, 139, 142, 144, 169, 184, 195, 196, 205, 210], "element": [0, 1, 9, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 36, 37, 38, 41, 44, 45, 50, 55, 57, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 117, 120, 139, 151, 153, 171, 190, 192, 194, 195, 200, 201, 202, 204, 210, 212, 213], "n_compon": [0, 14, 15, 61, 62, 63], "output": [0, 4, 5, 7, 15, 17, 18, 19, 20, 21, 23, 25, 26, 38, 45, 46, 50, 55, 59, 60, 110, 117, 120, 127, 129, 132, 144, 169, 174, 176, 181, 192, 197, 207, 208, 209, 210], "pca": 0, "model": [0, 9, 15, 17, 18, 19, 20, 21, 23, 28, 30, 48, 52, 55, 59, 60, 110, 117, 120, 129, 136, 138, 139, 142, 172, 173, 176, 181, 183, 184, 188, 189, 192, 197, 204, 212, 213], "should": [0, 3, 4, 5, 9, 10, 15, 17, 18, 19, 20, 21, 23, 25, 26, 31, 42, 45, 55, 59, 60, 70, 110, 117, 119, 120, 127, 132, 140, 142, 169, 171, 178, 183, 184, 187, 188, 192, 198, 201, 202, 205, 209, 210, 211], "posit": [0, 1, 3, 4, 9, 15, 17, 19, 20, 21, 55, 59, 60, 62, 67, 71, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 151, 190, 212, 213], "less": [0, 1, 5, 6, 7, 9, 144, 169, 192, 199, 204], "than": [0, 1, 2, 3, 4, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 26, 34, 55, 59, 60, 110, 117, 120, 140, 144, 176, 186, 188, 195, 198, 199, 202, 204, 207, 212, 213], "": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 23, 28, 30, 31, 43, 49, 55, 57, 59, 60, 62, 67, 72, 73, 75, 77, 78, 82, 88, 93, 94, 96, 98, 100, 104, 105, 109, 110, 144, 170, 171, 173, 174, 176, 177, 180, 181, 183, 186, 188, 193, 194, 197, 198, 199, 201, 202, 204, 207, 208, 210], "list_lik": [0, 2, 3, 4, 5, 6, 7, 8, 9, 14, 15, 19, 55, 59, 60, 61, 62, 63, 71, 73, 74, 88, 89, 94, 95, 100, 101, 105, 106, 110], "control": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 169, 177, 192, 196], "order": [0, 2, 3, 4, 5, 6, 7, 8, 9, 15, 17, 18, 19, 20, 21, 23, 26, 34, 49, 55, 59, 60, 110, 116, 144, 151, 178, 195], "databas": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 60, 66, 144, 169, 176, 211], "disabl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 42], "break": [0, 2, 5, 6, 7, 8, 9, 169, 194], "improv": [0, 1, 2, 4, 5, 6, 7, 8, 9, 202, 208, 210], "perform": [0, 1, 2, 3, 5, 6, 7, 8, 9, 15, 17, 18, 19, 20, 21, 23, 31, 55, 59, 60, 73, 75, 94, 96, 110, 142, 144, 172, 190, 202, 209, 210, 212, 213], "true": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 17, 18, 19, 20, 21, 23, 30, 36, 38, 40, 42, 43, 44, 46, 55, 57, 59, 60, 62, 63, 66, 71, 73, 74, 88, 89, 94, 95, 100, 101, 105, 106, 110, 116, 117, 119, 120, 129, 131, 132, 141, 142, 144, 153, 178, 180, 181, 182, 187, 188, 192, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208], "root_id": [0, 2, 5, 6, 7, 8, 9, 14, 15, 19, 55, 59, 60, 61, 62, 63, 73, 74, 88, 89, 94, 95, 100, 101, 105, 106, 110], "boolean": [0, 1, 2, 5, 6, 7, 8, 9, 19, 73, 74, 199, 212, 213], "flag": [0, 2, 3, 5, 6, 7, 8, 9], "indic": [0, 1, 2, 4, 5, 6, 7, 8, 9, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 129, 132, 141, 152, 177, 181, 187, 212, 213], "whether": [0, 2, 5, 6, 7, 8, 9, 15, 17, 18, 19, 20, 21, 23, 31, 55, 57, 59, 60, 73, 75, 94, 96, 110, 117, 119, 120, 127, 172, 185, 190, 197, 208], "tag": [0, 1, 4, 5, 6, 8, 9, 13, 15, 17, 18, 19, 20, 21, 23, 26, 30, 31, 34, 38, 55, 57, 59, 60, 73, 75, 94, 96, 110, 117, 118, 120, 127, 134, 141, 142, 143, 173, 174, 175, 176, 177, 182, 184, 187, 190, 192, 194, 198, 199, 204, 205, 212, 213], "chunk": [0, 2, 5, 6, 7, 8, 9, 13, 14, 15, 18, 19, 20, 21, 23, 49, 54, 55, 59, 60, 110, 117, 118, 120, 129, 130, 134, 142, 143, 171, 172, 173, 174, 177, 181, 182, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 202, 204, 205, 206, 210, 212, 213], "level": [0, 1, 2, 3, 6, 7, 8, 9, 11, 15, 17, 18, 19, 20, 21, 23, 31, 49, 55, 59, 60, 73, 75, 94, 96, 110, 144, 170, 171, 172, 173, 174, 184, 190, 194, 195, 202, 204, 205, 210, 212, 213], "check": [0, 3, 4, 7, 9, 11, 15, 17, 18, 19, 20, 21, 23, 26, 34, 55, 57, 59, 60, 110, 153, 174, 186, 192, 195, 198, 204, 207], "sourc": [0, 3, 7, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 153, 156, 157, 162, 163, 164, 165, 166, 170, 173, 203], "code": [0, 1, 2, 4, 5, 6, 7, 9, 10, 12, 15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110, 117, 120, 124, 159, 161, 183, 184, 186, 196, 198, 202, 203, 204, 210, 211], "restrict": [0, 2, 5, 6, 7, 9, 57, 117, 120, 141, 170, 181, 195, 204, 207], "user": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 15, 18, 21, 55, 60, 110, 117, 169, 171, 178, 184, 188, 196, 199, 200, 201, 204, 207], "defin": [0, 2, 3, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 38, 54, 55, 59, 60, 110, 116, 119, 171, 173, 174, 176, 181, 184, 185, 186, 192, 196, 198, 199, 201, 207, 212, 213], "guidelin": [0, 2, 6, 9], "provid": [0, 2, 3, 4, 7, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 24, 27, 30, 31, 32, 33, 40, 44, 45, 49, 50, 51, 55, 57, 59, 60, 63, 70, 73, 74, 75, 76, 79, 80, 94, 95, 96, 97, 101, 106, 108, 110, 117, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 132, 136, 138, 139, 140, 141, 151, 171, 176, 182, 184, 189, 190, 192, 194, 195, 198, 202, 204, 210], "repositori": [0, 1, 183], "consid": [0, 1, 2, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 30, 31, 44, 53, 55, 59, 60, 73, 75, 94, 96, 110, 117, 119, 120, 127, 139, 151, 176, 182, 184, 195, 196, 198, 199, 200, 204], "certain": [0, 2, 4, 9, 15, 17, 18, 19, 20, 21, 23, 50, 55, 59, 60, 110, 171, 191, 195, 207], "price": [0, 2, 4, 5, 6, 7, 9, 15, 18], "all": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 23, 24, 30, 31, 36, 38, 43, 44, 46, 49, 53, 54, 55, 57, 59, 60, 73, 75, 94, 96, 110, 111, 117, 120, 125, 129, 135, 139, 140, 141, 142, 151, 153, 162, 169, 171, 174, 176, 178, 179, 181, 182, 184, 185, 186, 188, 189, 194, 195, 196, 198, 199, 200, 202, 206, 207, 208, 209, 210, 211], "lower": [0, 1, 2, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 192, 198], "equal": [0, 1, 2, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 24, 46, 55, 59, 60, 110, 198, 199], "some": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 111, 117, 162, 169, 170, 171, 172, 174, 176, 182, 184, 188, 191, 192, 194, 196, 198, 199, 201, 202, 203, 207, 208, 209, 210], "max_pric": [0, 2, 4, 5, 6, 7, 9, 15], "index": [0, 1, 2, 3, 5, 6, 9, 14, 15, 16, 17, 18, 19, 20, 21, 23, 27, 31, 33, 46, 51, 53, 55, 59, 60, 61, 62, 67, 68, 69, 71, 72, 73, 75, 77, 78, 82, 88, 93, 94, 96, 98, 100, 104, 105, 109, 110, 117, 120, 140, 144, 173, 176, 190, 205, 209, 210, 211, 212, 213], "numpi": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 28, 36, 38, 55, 59, 60, 110, 117, 119, 120, 125, 135, 145, 146, 151, 152, 153, 174, 176, 182, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 200, 201, 205, 206, 209, 210, 211], "np": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 24, 31, 40, 55, 59, 60, 110, 139, 146, 147, 149, 150, 153, 174, 176, 186, 188, 192, 193, 194, 197, 198, 201, 205, 206, 207, 210], "3": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 26, 45, 55, 59, 60, 110, 117, 153, 181, 182, 186, 187, 188, 192, 194, 195, 196, 198, 201, 202, 203, 206, 207, 209, 210, 211], "column": [0, 2, 4, 5, 6, 7, 9, 14, 15, 17, 18, 19, 20, 21, 23, 38, 42, 55, 59, 60, 61, 62, 63, 73, 74, 88, 89, 94, 95, 105, 106, 110, 175, 181, 182, 184, 205, 210], "float": [0, 2, 4, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 30, 31, 40, 42, 44, 46, 55, 59, 60, 62, 63, 73, 74, 75, 88, 89, 94, 95, 96, 105, 106, 110, 117, 118, 119, 120, 125, 129, 134, 139, 142, 143, 147, 149, 150, 151, 152, 153, 162, 163, 164, 165, 190, 212, 213], "extend": [0, 1, 2, 3, 4, 5, 6, 7, 9, 14, 15, 16, 17, 18, 19, 20, 21, 55, 59, 60, 61, 62, 67, 68, 71, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 176, 196, 198, 202, 205], "id": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 13, 15, 17, 18, 19, 20, 21, 23, 26, 30, 31, 34, 44, 46, 55, 59, 60, 66, 71, 73, 75, 94, 96, 105, 106, 110, 117, 118, 120, 129, 132, 134, 139, 142, 143, 144, 171, 173, 174, 175, 176, 177, 181, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 201, 203, 204, 205, 206, 207, 208, 211, 212, 213], "f": [0, 2, 4, 5, 6, 7, 9, 15, 18, 57, 173, 174, 177, 201, 202, 210], "r": [0, 2, 4, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 36, 40, 54, 55, 59, 60, 110, 119, 151, 176, 181, 195, 199, 203, 210], "rang": [0, 2, 4, 5, 6, 7, 9, 15, 16, 17, 18, 19, 20, 21, 23, 26, 30, 44, 45, 55, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 117, 120, 139, 152, 196, 198, 199, 203, 205, 210], "print": [0, 2, 4, 5, 6, 7, 9, 11, 15, 17, 18, 19, 20, 21, 23, 26, 45, 46, 55, 59, 60, 110, 117, 120, 132, 170, 171, 173, 174, 176, 177, 181, 182, 183, 185, 186, 187, 192, 194, 195, 196, 197, 198, 199, 201, 202, 204, 206, 207, 208, 211], "nindex": [0, 2, 5, 6, 7, 9], "n": [0, 1, 2, 5, 6, 7, 9, 146, 176, 210, 212, 213], "tags__pric": [0, 2, 5, 6, 7, 9], "t": [0, 2, 4, 5, 6, 7, 9, 10, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 29, 30, 36, 37, 38, 39, 40, 41, 43, 45, 48, 49, 52, 54, 55, 59, 60, 70, 110, 111, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 133, 135, 136, 138, 139, 140, 141, 162, 171, 176, 184, 187, 188, 192, 195, 198, 207, 210], "Then": [0, 2, 5, 6, 7, 9, 174, 178, 197, 200, 204, 207], "whose": [0, 2, 7, 9, 117, 120, 129, 199, 209], "appli": [0, 1, 2, 7, 9, 14, 15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 31, 37, 38, 45, 49, 54, 55, 57, 59, 60, 73, 75, 94, 96, 110, 117, 120, 129, 151, 169, 174, 176, 182, 184, 194, 198, 202, 207], "n_limit": [0, 2, 4, 5, 6, 7, 9, 15], "4": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 15, 153, 181, 188, 195, 196, 198, 201, 202], "lte": [0, 2, 4, 6, 15, 199], "result": [0, 2, 3, 4, 5, 6, 7, 10, 15, 17, 18, 19, 20, 21, 23, 26, 30, 31, 44, 45, 49, 55, 59, 60, 73, 75, 94, 96, 110, 117, 120, 127, 139, 181, 192, 194, 198, 201, 202, 204, 206, 210], "return": [0, 2, 3, 5, 7, 10, 11, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 62, 66, 67, 69, 72, 73, 75, 77, 78, 79, 82, 88, 89, 90, 91, 93, 94, 96, 98, 100, 103, 104, 105, 106, 109, 110, 111, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 146, 147, 149, 150, 151, 152, 153, 156, 157, 162, 164, 165, 174, 176, 185, 191, 194, 195, 198, 202, 205, 209, 210], "verifi": [0, 2, 7, 9], "most": [0, 1, 2, 3, 4, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 44, 49, 55, 59, 60, 110, 117, 120, 139, 169, 173, 174, 184, 186, 187, 192, 195, 204, 209, 211], "satisfi": [0, 2, 7, 9, 117, 120, 123, 125, 140, 182], "condit": [0, 1, 2, 7, 9, 57, 58], "0": [0, 1, 2, 4, 5, 6, 7, 9, 10, 15, 17, 18, 19, 20, 21, 23, 24, 29, 40, 44, 46, 47, 53, 55, 59, 60, 69, 100, 101, 110, 117, 119, 120, 125, 129, 130, 139, 140, 146, 151, 152, 153, 181, 182, 183, 186, 188, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 209, 210, 211], "1": [0, 1, 2, 4, 5, 6, 7, 9, 11, 15, 17, 18, 19, 20, 21, 23, 30, 44, 46, 47, 53, 54, 55, 59, 60, 66, 69, 110, 116, 117, 119, 120, 125, 129, 130, 132, 139, 140, 144, 151, 152, 153, 169, 178, 181, 182, 183, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213], "2": [0, 1, 2, 4, 5, 6, 7, 9, 11, 15, 17, 18, 19, 20, 21, 23, 48, 49, 53, 54, 55, 57, 59, 60, 110, 117, 120, 122, 136, 146, 147, 149, 150, 153, 181, 182, 186, 187, 188, 192, 194, 195, 196, 198, 199, 201, 202, 203, 204, 207, 210, 212, 213], "up": [0, 1, 2, 4, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 38, 55, 59, 60, 110, 202, 206, 209], "9": [0, 1, 2, 5, 6, 7, 9, 18, 21, 153, 198], "ha": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 15, 17, 18, 19, 20, 21, 23, 30, 37, 46, 55, 59, 60, 62, 67, 72, 73, 77, 88, 93, 94, 98, 105, 109, 110, 117, 120, 129, 132, 171, 173, 174, 175, 181, 182, 184, 188, 190, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 209], "we": [0, 1, 2, 3, 4, 6, 7, 9, 10, 11, 144, 171, 174, 176, 177, 182, 183, 184, 188, 192, 194, 195, 196, 198, 199, 200, 201, 202, 206, 207, 208, 209, 210], "ones": [0, 2, 4, 5, 6, 7, 9, 18, 172, 194, 195, 196, 204], "8": [0, 1, 2, 4, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 37, 38, 41, 55, 59, 60, 110, 117, 119, 120, 123, 125, 140, 153, 186, 199, 212, 213], "must": [0, 2, 3, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 31, 55, 59, 60, 70, 73, 75, 94, 96, 110, 192, 195, 202, 212, 213], "As": [0, 1, 2, 3, 4, 5, 6, 9, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 171, 176, 186, 192, 194, 196, 202, 209, 210], "an": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 31, 34, 36, 45, 46, 54, 55, 57, 59, 60, 73, 75, 94, 96, 105, 106, 110, 113, 116, 117, 119, 120, 122, 127, 129, 132, 140, 142, 169, 171, 173, 174, 176, 182, 183, 184, 185, 186, 189, 190, 192, 193, 194, 195, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213], "let": [0, 2, 3, 4, 7, 9, 10, 11, 146, 170, 171, 174, 176, 177, 182, 183, 184, 186, 188, 190, 194, 195, 197, 198, 199, 200, 201, 202, 207, 210], "encod": [0, 2, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 37, 38, 41, 55, 59, 60, 110, 117, 119, 120, 123, 125, 133, 140, 141, 142, 176, 183, 212, 213], "inform": [0, 2, 4, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 38, 43, 46, 55, 59, 60, 110, 144, 171, 178, 181, 182, 184, 186, 187, 188, 190, 192, 195, 196, 198, 207], "propos": [0, 2, 5, 6, 7, 9], "implement": [0, 1, 2, 4, 5, 6, 9, 10, 11, 15, 21, 28, 55, 60, 65, 67, 70, 72, 76, 77, 81, 82, 97, 98, 102, 104, 108, 109, 110, 169, 195, 198, 200, 202, 204, 207], "7": [0, 1, 2, 4, 5, 6, 7, 9, 153, 183, 196, 201, 209, 211, 212, 213], "np_queri": [0, 2, 4, 5, 6, 7, 9, 18], "nqueri": [0, 2, 5, 6, 7, 9], "limit": [0, 2, 3, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 30, 31, 37, 44, 55, 57, 59, 60, 73, 75, 94, 96, 110, 117, 120, 139, 141, 176, 194, 198, 201, 210], "nembed": [0, 2, 5, 6, 7, 9], "neighbour": [0, 1, 2, 4, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 30, 44, 55, 59, 60, 110, 191, 198, 199], "zip": [0, 2, 5, 6, 9, 119], "tembed": [0, 2, 5, 6, 7, 9], "6": [0, 1, 2, 4, 5, 6, 7, 9, 151, 153, 176, 188, 195, 198, 201, 210], "5": [0, 1, 2, 4, 5, 6, 7, 9, 151, 153, 183, 188, 195, 196, 198, 199, 201, 202, 203, 204, 206], "base": [1, 2, 3, 6, 7, 9, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 113, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 152, 162, 163, 164, 165, 166, 168, 169, 171, 174, 176, 177, 184, 186, 195, 198, 199, 201, 207], "sift1m": 1, "dataset": [1, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 117, 119, 120, 129, 171, 174, 198], "contain": [1, 2, 3, 4, 7, 9, 11, 15, 17, 18, 19, 20, 21, 23, 26, 29, 30, 31, 34, 38, 44, 49, 54, 55, 59, 60, 73, 75, 94, 96, 110, 117, 119, 120, 129, 132, 139, 144, 171, 174, 175, 176, 177, 182, 184, 186, 188, 192, 194, 195, 198, 200, 203, 206, 207, 209, 210, 212, 213], "object": [1, 2, 3, 4, 9, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 71, 73, 74, 75, 80, 88, 89, 90, 94, 95, 96, 100, 101, 105, 106, 107, 110, 111, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 153, 163, 165, 166, 169, 173, 178, 179, 182, 183, 184, 185, 186, 187, 189, 190, 192, 194, 198, 199, 200, 201, 204, 208, 210], "each": [1, 3, 4, 5, 6, 8, 9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 31, 34, 44, 45, 46, 47, 54, 55, 59, 60, 73, 75, 94, 96, 110, 117, 119, 120, 127, 129, 130, 139, 146, 147, 149, 150, 153, 171, 172, 173, 175, 176, 177, 181, 182, 184, 185, 186, 188, 190, 192, 195, 196, 198, 201, 202, 204, 205, 212, 213], "128": [1, 2, 5, 6, 7, 197, 205], "l2": [1, 5, 7, 9], "summar": [1, 181, 195, 204, 209], "below": [1, 4, 9, 182, 190, 191, 195, 198, 202, 203, 204, 208, 210], "usag": [1, 3, 4, 15, 17, 18, 19, 20, 21, 23, 26, 36, 45, 55, 59, 60, 110, 116, 144, 169, 187, 204], "client": [1, 2, 3, 5, 6, 7, 9, 10, 14, 15, 17, 18, 19, 20, 21, 23, 31, 55, 59, 60, 61, 73, 75, 88, 89, 90, 91, 93, 94, 96, 110, 183, 207], "version": [1, 2, 3, 5, 6, 7, 9, 70, 144, 169, 203, 204, 209, 211], "In": [1, 3, 4, 5, 9, 10, 15, 17, 18, 19, 20, 21, 23, 25, 26, 31, 36, 45, 55, 59, 60, 73, 75, 94, 96, 110, 117, 120, 140, 171, 173, 175, 177, 178, 181, 182, 183, 184, 186, 188, 190, 192, 194, 196, 198, 200, 201, 204, 207, 208, 209, 210, 211, 212, 213], "18": [1, 201], "sqlite": [1, 3, 4, 13, 14, 18, 61], "weaviat": [1, 4, 13, 14, 18, 61, 211], "16": [1, 7, 9, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 194, 202], "qdrant": [1, 4, 5, 13, 14, 61, 211], "annlit": [1, 4, 13, 14, 18, 61, 176, 205, 211], "anlit": 1, "13": 1, "elasticsearch": [1, 4, 18, 19, 211], "redi": [1, 4, 13, 14, 18, 61, 211], "focus": [1, 210], "add": [1, 9, 17, 18, 20, 142, 171, 174, 181, 191, 192, 195, 196, 198, 204, 205], "capabl": [1, 4], "applic": [1, 2, 7, 171, 176, 210], "read": [1, 2, 3, 5, 6, 7, 9, 10, 15, 17, 18, 19, 20, 21, 23, 38, 55, 59, 60, 110, 117, 119, 120, 123, 125, 169, 175, 179, 180, 181, 182, 184, 186, 187, 189, 192, 196, 204, 207, 210, 211], "exist": [1, 3, 5, 7, 15, 17, 18, 19, 20, 21, 23, 25, 26, 34, 43, 45, 46, 49, 55, 57, 59, 60, 110, 178, 183, 184, 191, 199, 203], "some_id": 1, "updat": [1, 2, 3, 4, 9, 68, 70, 71, 142, 152, 195, 205, 210], "delet": [1, 3, 4, 8, 9, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 194, 195, 198, 205], "del": [1, 194, 195], "find": [1, 2, 4, 7, 14, 15, 17, 18, 19, 20, 21, 23, 55, 57, 59, 60, 61, 62, 73, 78, 83, 88, 94, 105, 110, 152, 172, 176, 192, 196, 197, 199, 202, 205, 208, 209], "search": [1, 3, 9, 10, 15, 17, 18, 19, 20, 21, 23, 31, 44, 50, 55, 59, 60, 73, 75, 94, 95, 96, 110, 171, 172, 183, 184, 188, 190, 211, 212, 213], "filter": [1, 10, 15, 17, 18, 19, 20, 21, 23, 26, 31, 34, 44, 54, 55, 59, 60, 73, 75, 94, 96, 110, 119, 144, 192, 195, 204], "side": [1, 2, 4, 7, 15, 17, 18, 19, 20, 21, 23, 30, 31, 55, 59, 60, 73, 75, 94, 96, 110, 117, 120, 140, 190, 198, 207, 210], "possibl": [1, 4, 5, 6, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 187, 193, 198, 209], "describ": [1, 117, 120, 141, 146, 169, 173, 186, 187, 192, 198, 199, 201, 203, 204], "queri": [1, 3, 4, 5, 6, 10, 15, 17, 18, 19, 20, 21, 23, 30, 31, 44, 55, 58, 59, 60, 73, 75, 94, 96, 110, 117, 120, 132, 151, 174, 176, 205, 211], "vector": [1, 3, 15, 17, 18, 19, 20, 21, 23, 31, 55, 59, 60, 73, 75, 94, 96, 110, 174, 176, 188, 197, 211], "approxim": [1, 2, 3, 4, 5, 7, 15, 17, 18, 19, 20, 21, 23, 31, 55, 59, 60, 73, 75, 94, 96, 110], "abov": [1, 3, 4, 5, 9, 10, 57, 70, 174, 182, 184, 189, 198, 201, 203, 204, 210], "ar": [1, 3, 4, 5, 6, 7, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 24, 26, 30, 34, 36, 37, 44, 49, 54, 55, 57, 59, 60, 62, 67, 70, 72, 73, 77, 88, 93, 94, 98, 105, 109, 110, 111, 117, 119, 120, 127, 129, 140, 141, 142, 151, 153, 162, 169, 170, 171, 172, 173, 174, 175, 176, 180, 182, 183, 184, 186, 187, 192, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213], "often": [1, 3, 4, 9, 171, 175, 176, 188, 189, 190, 192, 202, 204, 210, 212, 213], "atom": 1, "oper": [1, 3, 4, 5, 9, 15, 17, 18, 19, 20, 21, 23, 24, 55, 59, 60, 70, 110, 209, 212, 213], "high": [1, 3, 9, 11, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 170, 183, 184, 210], "api": [1, 3, 5, 6, 9, 10, 117, 120, 141, 171, 176, 180, 183, 184, 186, 187, 192, 195, 197, 200, 202, 204, 207, 210, 211], "henc": [1, 171, 173, 175, 192, 202, 203, 210], "understand": [1, 4, 187, 207, 208, 210], "give": [1, 3, 4, 15, 17, 18, 19, 20, 21, 23, 37, 46, 55, 59, 60, 110, 116, 171, 187, 192, 194, 202, 207, 209], "good": [1, 9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 175, 210], "estim": [1, 204], "differ": [1, 3, 4, 7, 15, 17, 18, 19, 20, 21, 23, 44, 46, 54, 55, 59, 60, 110, 117, 120, 129, 130, 174, 176, 185, 187, 192, 194, 198, 199, 202, 204, 210], "own": [1, 117, 120, 129, 184, 198, 199, 202, 205, 209, 210], "hnsw": [1, 2, 5, 6, 7, 9, 59, 94, 95], "algorithm": [1, 7, 9, 15, 17, 18, 19, 20, 21, 23, 25, 36, 55, 59, 60, 110, 144, 171, 173, 184, 204], "paramet": [1, 2, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 29, 30, 31, 34, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 59, 60, 62, 66, 67, 72, 73, 75, 77, 78, 82, 88, 93, 94, 96, 98, 100, 104, 105, 109, 110, 111, 116, 117, 119, 120, 122, 123, 125, 126, 127, 129, 130, 132, 133, 135, 136, 138, 139, 140, 141, 142, 144, 146, 147, 149, 150, 151, 152, 153, 162, 177, 178, 180, 182, 192, 204, 205, 206, 212, 213], "build": [1, 2, 5, 6, 7, 9, 10, 29, 42, 117, 120, 133, 136, 138, 173, 176, 182, 188, 192, 194, 196, 204, 207, 210, 211], "time": [1, 2, 4, 6, 7, 11, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 144, 174, 176, 177, 184, 192, 201, 204, 210], "accuraci": [1, 2, 9], "higher": [1, 9, 198], "lead": [1, 9, 187], "longer": [1, 4, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 117, 120, 140, 176], "better": [1, 3, 4, 15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110, 171, 193, 195, 202, 204, 209], "qualiti": 1, "m": [1, 2, 5, 6, 7, 14, 15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 61, 73, 74, 88, 89, 94, 95, 110, 182, 194, 195, 198, 201, 209], "maximum": [1, 9, 15, 17, 18, 19, 20, 21, 23, 30, 31, 44, 55, 59, 60, 73, 75, 94, 96, 110, 117, 119, 120, 139, 140, 151, 181, 192, 204], "connect": [1, 4, 8, 9, 14, 55, 57, 60, 61, 100, 101, 105, 106, 110, 117, 120, 140, 203], "work": [1, 3, 4, 5, 15, 17, 18, 19, 20, 21, 23, 25, 26, 36, 45, 55, 59, 60, 110, 119, 144, 171, 172, 174, 182, 184, 186, 190, 192, 194, 195, 197, 198, 200, 201, 202, 204, 205, 207, 208, 210, 211], "intrins": [1, 205], "dimension": [1, 2, 5, 7, 117, 120, 127, 129, 146, 188, 210], "while": [1, 9, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 171, 182, 187, 198, 210], "low": [1, 9, 169, 183], "ef": [1, 9, 14, 61, 105, 106, 110], "more": [1, 2, 3, 4, 5, 6, 7, 9, 10, 15, 17, 18, 19, 20, 21, 23, 36, 43, 49, 55, 59, 60, 70, 110, 119, 169, 170, 174, 175, 176, 179, 180, 181, 182, 186, 187, 188, 192, 194, 195, 197, 198, 200, 202, 204, 206, 207, 210, 211, 212, 213], "slower": [1, 9, 15, 17, 18, 19, 20, 21, 23, 41, 55, 59, 60, 110], "interest": [1, 171, 195, 198, 205, 207], "singl": [1, 2, 3, 9, 11, 15, 17, 18, 19, 20, 21, 23, 26, 45, 46, 54, 55, 59, 60, 70, 110, 117, 120, 132, 171, 179, 182, 192, 201, 203, 207], "six": 1, "three": [1, 5, 171, 173, 176, 177, 186, 194, 201, 210], "measur": [1, 151], "evalu": [1, 4, 13, 14, 15, 17, 18, 19, 20, 21, 23, 28, 44, 55, 56, 57, 58, 59, 60, 110, 117, 118, 120, 134, 142, 143, 145, 190, 191, 192, 200, 204, 210, 211, 212, 213], "repeatedli": [1, 4, 173], "final": [1, 3, 9, 10, 15, 17, 18, 19, 20, 21, 23, 25, 49, 55, 57, 59, 60, 110, 170, 171, 174, 184, 199, 200, 207], "averag": [1, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 151, 198, 210], "report": 1, "now": [1, 3, 4, 9, 10, 11, 169, 171, 176, 183, 185, 194, 195, 196, 197, 198, 202, 204, 207, 209, 210], "elabor": 1, "our": [1, 4, 15, 18, 21, 55, 60, 110, 117, 174, 177, 181, 184, 188, 195, 197, 198, 202], "first": [1, 4, 9, 15, 16, 17, 18, 19, 20, 21, 23, 24, 43, 46, 49, 55, 57, 59, 60, 62, 67, 69, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 117, 120, 123, 141, 144, 151, 152, 153, 171, 174, 175, 176, 177, 181, 182, 184, 190, 192, 194, 195, 197, 198, 199, 202, 209, 210, 211], "statist": 1, "000": [1, 198, 210], "structur": [1, 3, 9, 15, 17, 18, 19, 20, 21, 23, 30, 37, 46, 55, 59, 60, 110, 117, 120, 132, 173, 174, 181, 182, 184, 185, 187, 190, 193, 198, 200, 208, 210, 211, 212, 213], "94ee6627ee7f582e5e28124e78c3d2f9": 1, "49841760378680844": 1, "703959752118305": 1, "6920759535687985": 1, "10248648858410625": 1, "k": [1, 15, 17, 18, 19, 20, 21, 23, 30, 50, 55, 59, 60, 110, 151, 152, 198, 201, 211], "do": [1, 2, 3, 4, 5, 7, 9, 11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 34, 43, 45, 49, 55, 57, 59, 60, 70, 110, 117, 120, 129, 171, 174, 175, 176, 177, 181, 182, 184, 185, 186, 188, 189, 190, 192, 194, 195, 197, 198, 201, 202, 204, 206, 207, 209, 211], "exhaust": [1, 9, 15, 17, 18, 19, 20, 21, 23, 31, 55, 59, 60, 73, 75, 94, 96, 110], "instead": [1, 4, 5, 9, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 119, 144, 171, 181, 182, 184, 185, 186, 188, 192, 194, 198, 202, 209, 210, 212, 213], "thei": [1, 3, 4, 9, 10, 15, 17, 18, 19, 20, 21, 23, 43, 49, 55, 59, 60, 70, 110, 116, 169, 173, 174, 177, 184, 186, 187, 191, 192, 194, 195, 198, 204, 207, 209], "slowest": 1, "were": 1, "conduct": [1, 171, 198, 202, 204, 210], "aw": 1, "ec2": 1, "t2": 1, "2xlarg": 1, "instanc": [1, 3, 9, 69, 116, 142], "intel": 1, "xeon": 1, "cpu": [1, 11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 30, 44, 45, 55, 59, 60, 110, 117, 120, 139, 146, 149, 150, 183, 195, 197, 201, 209, 211], "e5": 1, "2676": 1, "v3": [1, 5, 9], "40ghz": 1, "python": [1, 3, 4, 15, 17, 18, 19, 20, 21, 23, 36, 41, 55, 59, 60, 110, 117, 119, 120, 133, 141, 170, 180, 182, 184, 186, 188, 190, 192, 194, 195, 196, 199, 200, 202, 204, 210, 211, 212, 213], "server": [1, 2, 5, 6, 7, 9, 10, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 105, 106, 110, 207, 211], "pattern": [1, 4, 11, 40, 119, 174, 186, 196, 204, 207], "them": [1, 3, 11, 15, 17, 18, 19, 20, 21, 23, 25, 44, 49, 55, 59, 60, 110, 117, 120, 130, 139, 169, 171, 172, 175, 176, 177, 181, 182, 183, 184, 188, 190, 192, 194, 195, 198, 201, 205, 207, 208, 209, 210], "offici": [1, 2, 10], "docker": [1, 2, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 110, 117, 120, 139, 203, 213], "imag": [1, 2, 5, 6, 7, 9, 11, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 116, 117, 120, 130, 132, 144, 172, 174, 177, 181, 182, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 202, 205, 209, 210, 211, 212, 213], "node": [1, 2, 6, 57], "configur": [1, 2, 3, 5, 6, 9, 55, 110, 205, 208], "32": [1, 2, 7, 11, 15, 17, 18, 19, 20, 21, 23, 26, 34, 45, 55, 59, 60, 110, 183, 197, 202], "gb": 1, "ram": 1, "alloc": 1, "That": [1, 171, 182, 184, 186, 187, 189, 195, 200, 210], "onli": [1, 3, 6, 10, 11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 31, 36, 37, 43, 44, 45, 46, 55, 57, 59, 60, 73, 75, 94, 96, 110, 117, 119, 120, 129, 139, 141, 151, 169, 177, 181, 182, 184, 185, 186, 187, 192, 195, 196, 197, 198, 201, 202, 204, 207, 210], "replica": 1, "shard": 1, "did": [1, 4], "opt": [1, 209], "cluster": 1, "becaus": [1, 4, 9, 10, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 169, 171, 183, 198, 202, 207], "mainli": [1, 57, 70, 169, 207], "aim": [1, 3, 210], "assess": 1, "1m": 1, "37": 1, "11": [1, 199, 202], "17": [1, 7], "06": 1, "05": 1, "14": [1, 178, 199], "64": [1, 2, 6, 7, 11, 19, 55, 59, 73, 74, 88, 89, 94, 95, 117, 120, 129, 171, 189, 210], "873": 1, "42": 1, "40": 1, "114": 1, "30": [1, 5, 117, 120, 141, 199], "36": 1, "12": [1, 5, 7, 169, 195, 196, 203, 207], "93": 1, "01": [1, 183], "942": 1, "51": 1, "38": [1, 7], "43": 1, "15": [1, 10, 195, 199], "977": 1, "76": 1, "39": 1, "135": 1, "75": [1, 199], "35": [1, 201], "66": 1, "256": [1, 15, 17, 18, 19, 20, 21, 23, 28, 30, 55, 59, 60, 110, 117, 120, 127, 139, 174, 182, 188, 195, 201, 205, 206], "986": 1, "98": [1, 7], "111": 1, "897": 1, "134": 1, "94": 1, "34": [1, 5], "82": 1, "08": [1, 7], "960": 1, "53": 1, "148": 1, "67": 1, "24": 1, "46": 1, "988": 1, "136": 1, "90": [1, 198], "31": 1, "996": 1, "99": 1, "95": [1, 177], "905": 1, "200": [1, 5, 7, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 207], "29": 1, "965": 1, "54": [1, 178], "186": 1, "45": [1, 198, 199], "990": 1, "68": 1, "173": 1, "60": [1, 105, 106, 110, 177], "997": 1, "07": [1, 9, 147, 149, 150, 152, 174], "183": 1, "86": 1, "895": 1, "49": 1, "116": 1, "33": 1, "63": 1, "55": 1, "954": 1, "59": 1, "112": 1, "83": 1, "74": 1, "26": 1, "983": 1, "993": 1, "88": 1, "930": 1, "52": 1, "142": 1, "975": 1, "58": 1, "156": [1, 192], "41": 1, "81": 1, "147": 1, "19": 1, "87": 1, "998": 1, "144": [1, 202], "62": 1, "21": [1, 199], "946": 1, "196": 1, "20": [1, 5, 15, 17, 18, 19, 20, 21, 23, 30, 31, 44, 55, 59, 60, 73, 75, 94, 96, 110, 117, 120, 139], "984": 1, "211": 1, "65": 1, "194": 1, "97": [1, 201], "72": 1, "999": 1, "25": [1, 9, 199], "204": [1, 183], "22": [1, 199], "50": [1, 105, 106, 110, 195, 199], "403": 1, "70": 1, "448": 1, "396": 1, "453": 1, "71": [1, 7], "80": 1, "995": [1, 9], "09": [1, 178], "418": 1, "456": [1, 117, 120, 129], "00": 1, "03": [1, 5], "410": 1, "459": 1, "57": 1, "974": 1, "412": 1, "48": [1, 5, 7], "462": 1, "392": 1, "27": [1, 5, 7, 117, 120, 141], "460": 1, "56": [1, 212, 213], "79": 1, "379": 1, "69": 1, "461": 1, "96": 1, "381": 1, "85": [1, 199], "982": 1, "387": 1, "77": 1, "386": 1, "463": 1, "47": 1, "92": 1, "385": 1, "84": 1, "78": 1, "393": 1, "464": 1, "969": 1, "390": 1, "992": 1, "399": 1, "458": 1, "426": 1, "91": 1, "89": 1, "389": 1, "73": 1, "397": 1, "375": 1, "871": 1, "574": 1, "939": 1, "580": 1, "44": 1, "577": 1, "639": 1, "655": 1, "61": 1, "659": 1, "23": [1, 207], "818": 1, "906": 1, "787": 1, "04": 1, "782": 1, "784": 1, "780": 1, "1022": 1, "955": 1, "1001": 1, "981": 1, "929": 1, "675": 1, "673": 1, "1297": 1, "1383": 1, "1846": 1, "1926": 1, "1364": 1, "1966": 1, "889": 1, "508": 1, "947": 1, "449": 1, "980": 1, "434": 1, "504": [1, 182], "688": 1, "953": 1, "678": 1, "719": 1, "720": 1, "902": 1, "048": 1, "958": 1, "138": 1, "077": 1, "108": [1, 7], "945": 1, "02": [1, 183], "471": 1, "976": 1, "480": 1, "527": 1, "487": 1, "790": 1, "812": 1, "861": 1, "840": 1, "959": 1, "424": 1, "987": 1, "506": 1, "408": 1, "872": 1, "563": 1, "941": 1, "991": 1, "562": 1, "754": 1, "721": 1, "775": 1, "28": [1, 212, 213], "799": 1, "1091": 1, "1196": 1, "1232": 1, "1203": 1, "896": 1, "625": 1, "626": 1, "994": 1, "921": 1, "926": 1, "1315": 1, "1489": 1, "1511": 1, "1534": [1, 183], "421": 1, "convert": [1, 10, 15, 17, 18, 19, 20, 21, 23, 36, 41, 48, 52, 55, 59, 60, 62, 63, 68, 69, 73, 74, 88, 89, 94, 95, 105, 106, 110, 117, 120, 122, 123, 124, 127, 129, 130, 133, 135, 136, 138, 140, 141, 171, 172, 173, 175, 182, 183, 187, 204, 210], "per": [1, 5, 6, 9, 15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110, 117, 120, 141, 142, 151, 152, 181, 182, 198, 201], "second": [1, 4, 15, 17, 18, 19, 20, 21, 23, 49, 55, 57, 59, 60, 110, 117, 120, 141, 144, 152, 153, 174, 184, 194, 198, 202, 207], "dp": 1, "284": 1, "061": 1, "505": 1, "246": 1, "706": 1, "519": 1, "749": 1, "762": 1, "662": 1, "674": 1, "758": 1, "570": 1, "597": 1, "366": 1, "825": 1, "956": 1, "155": 1, "698": 1, "710": 1, "411": 1, "652": 1, "611": 1, "726": 1, "786": 1, "599": 1, "670": 1, "304": 1, "729": 1, "440": 1, "751": 1, "663": [1, 183], "695": 1, "681": 1, "648": 1, "594": 1, "540": 1, "730": 1, "483": 1, "445": 1, "671": 1, "585": 1, "003": 1, "629": 1, "725": 1, "863": 1, "915": 1, "572": 1, "747": 1, "723": 1, "657": 1, "017": 1, "882": 1, "632": 1, "500": [1, 2, 9], "394": 1, "553": 1, "703": 1, "800": 1, "465": 1, "660": 1, "914": 1, "985": 1, "672": 1, "646": 1, "092": 1, "809": 1, "618": [1, 171, 174], "874": 1, "531": 1, "734": 1, "129": 1, "040": 1, "740": 1, "886": 1, "286": 1, "227": 1, "267": 1, "532": 1, "244": 1, "308": 1, "557": 1, "253": 1, "197": 1, "189": 1, "501": 1, "248": 1, "191": 1, "176": [1, 177, 204], "636": 1, "250": [1, 177], "199": 1, "162": 1, "691": 1, "245": 1, "195": 1, "172": 1, "641": [1, 171, 174], "559": 1, "263": 1, "231": 1, "166": 1, "537": 1, "653": 1, "260": 1, "190": [1, 198], "161": 1, "633": 1, "554": 1, "168": [1, 15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 110, 117, 120, 139, 203], "157": 1, "680": 1, "521": 1, "174": 1, "561": 1, "159": 1, "153": 1, "616": 1, "543": 1, "221": 1, "547": 1, "254": 1, "177": 1, "643": 1, "541": 1, "187": 1, "535": 1, "182": 1, "178": 1, "666": [1, 192], "184": 1, "635": 1, "533": 1, "251": 1, "235": 1, "160": 1, "257": 1, "682": 1, "262": 1, "165": 1, "154": 1, "647": 1, "266": 1, "163": 1, "676": 1, "524": 1, "252": 1, "685": 1, "255": [1, 171, 174, 181, 186], "687": 1, "560": 1, "226": 1, "598": 1, "261": 1, "207": 1, "436": 1, "739": 1, "205": 1, "722": 1, "241": 1, "106": 1, "416": 1, "732": 1, "103": 1, "422": [1, 207], "277": 1, "104": 1, "405": 1, "525": 1, "222": 1, "217": 1, "427": 1, "516": 1, "380": 1, "236": 1, "139": 1, "220": 1, "218": 1, "208": 1, "206": 1, "430": 1, "271": 1, "388": 1, "402": 1, "382": 1, "179": 1, "425": 1, "275": 1, "378": 1, "435": 1, "282": 1, "384": 1, "198": 1, "978": 1, "233": 1, "258": 1, "141": 1, "064": 1, "279": 1, "185": 1, "414": 1, "364": 1, "280": 1, "126": 1, "019": 1, "370": 1, "203": 1, "485": [1, 117, 120, 129], "223": 1, "409": 1, "771": 1, "224": [1, 5, 117, 120, 129, 171, 174], "417": 1, "213": 1, "118": 1, "542": 1, "216": 1, "202": 1, "318": 1, "391": 1, "143": 1, "415": 1, "733": 1, "151": 1, "169": 1, "228": 1, "133": 1, "302": 1, "113": 1, "473": 1, "229": [1, 117, 120, 129], "878": 1, "928": 1, "137": 1, "122": 1, "081": 1, "053": 1, "149": 1, "265": 1, "175": 1, "131": 1, "702": 1, "664": [1, 192, 210], "125": 1, "130": 1, "600": 1, "776": 1, "001": 1, "595": 1, "018": 1, "058": 1, "431": 1, "795": 1, "778": 1, "094": 1, "499": 1, "579": 1, "621": 1, "325": 1, "099": 1, "338": 1, "961": 1, "432": 1, "420": 1, "290": 1, "804": 1, "567": 1, "943": 1, "368": 1, "587": 1, "916": 1, "080": 1, "313": 1, "836": 1, "971": 1, "429": 1, "811": 1, "273": 1, "357": 1, "493": 1, "831": 1, "951": 1, "225": [1, 117, 120, 129], "488": 1, "596": 1, "083": 1, "575": 1, "789": 1, "065": 1, "014": 1, "612": 1, "558": 1, "060": 1, "476": [1, 202], "490": 1, "049": 1, "948": 1, "085": 1, "970": 1, "327": 1, "326": [1, 202], "079": 1, "548": 1, "760": 1, "238": 1, "438": 1, "952": 1, "306": 1, "particular": [1, 4, 15, 17, 18, 19, 20, 21, 23, 38, 55, 57, 59, 60, 110, 119, 204], "chart": 1, "depict": [1, 190, 195, 210], "fraction": 1, "found": [1, 4, 9, 144, 182, 192, 204, 210], "over": [1, 4, 6, 11, 15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110, 119, 142, 169, 191, 192, 195, 198, 204, 210], "against": [1, 15, 17, 18, 19, 20, 21, 23, 30, 44, 55, 57, 59, 60, 110, 117, 120, 139, 188, 201], "smaller": [1, 15, 17, 18, 19, 20, 21, 23, 25, 26, 34, 36, 37, 44, 45, 55, 59, 60, 110, 192, 195, 207], "upper": [1, 3, 9, 15, 17, 18, 19, 20, 21, 23, 26, 45, 55, 59, 60, 110, 177], "right": [1, 4, 15, 17, 18, 19, 20, 21, 23, 30, 46, 55, 57, 59, 60, 110, 117, 120, 140, 184, 188, 198, 201, 202, 209], "fair": 1, "across": [1, 192, 204], "favour": 1, "benefit": [1, 4, 184], "wa": [1, 4, 9, 142, 174, 176, 186, 195, 204, 210], "imposs": 1, "its": [1, 3, 4, 5, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 117, 120, 124, 129, 132, 140, 169, 173, 174, 175, 187, 192, 196, 198, 202, 204, 206, 207, 208, 210], "definit": [1, 142, 171, 207], "vari": 1, "principl": [1, 186, 192], "cover": [1, 174, 210], "offer": [1, 60, 178, 180, 182, 195], "therefor": [1, 3, 7, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 70, 110, 198, 210], "try": [1, 4, 10, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 119, 142, 175, 192], "crud": [1, 5], "Not": [1, 5, 198, 199, 204], "just": [1, 3, 4, 9, 10, 144, 171, 182, 194, 195, 199, 208], "speed": [1, 2, 9, 15, 17, 18, 19, 20, 21, 23, 37, 55, 59, 60, 110, 202, 206, 210], "also": [1, 2, 3, 4, 5, 6, 7, 9, 10, 15, 17, 18, 19, 20, 21, 23, 44, 46, 49, 55, 59, 60, 110, 117, 151, 169, 171, 176, 177, 180, 182, 183, 184, 185, 186, 187, 190, 192, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 207, 208, 210], "show": [1, 5, 6, 9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 34, 36, 38, 43, 45, 46, 47, 55, 59, 60, 110, 117, 120, 132, 139, 141, 171, 178, 183, 187, 195, 196, 204], "trade": 1, "off": [1, 4, 8, 9, 60, 100, 101, 117, 120, 140], "between": [1, 3, 4, 9, 117, 119, 120, 125, 129, 146, 147, 149, 150, 173, 175, 182, 189, 192, 199, 204, 210, 212, 213], "tune": [1, 2], "your": [1, 3, 4, 5, 7, 10, 15, 17, 18, 19, 20, 21, 23, 25, 26, 38, 43, 45, 55, 59, 60, 110, 117, 119, 120, 129, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 184, 186, 187, 192, 197, 198, 200, 202, 203, 204, 207, 208, 209, 210, 211, 212, 213], "built": [1, 10, 15, 17, 18, 19, 20, 21, 23, 28, 30, 55, 59, 60, 110, 182, 185, 187, 202, 211], "top": [1, 3, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 132, 151, 152, 171, 173, 174, 190, 194, 195, 198, 201, 205, 212, 213], "furthermor": [1, 15, 17, 18, 19, 20, 21, 23, 31, 55, 59, 60, 73, 75, 94, 96, 110], "made": [1, 4, 169, 173, 182, 192, 210], "sure": [1, 2, 3, 4, 7, 9, 15, 17, 18, 19, 20, 21, 23, 44, 46, 55, 59, 60, 70, 110, 182, 202, 209, 211], "run": [1, 2, 4, 5, 6, 9, 10, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 201, 202, 207, 208, 209, 213], "seri": 1, "support": [1, 3, 4, 5, 6, 7, 9, 10, 15, 16, 17, 18, 19, 20, 21, 23, 30, 31, 44, 55, 59, 60, 62, 67, 70, 72, 73, 75, 77, 78, 82, 88, 93, 94, 96, 98, 100, 104, 105, 109, 110, 117, 120, 122, 125, 129, 130, 139, 140, 141, 144, 153, 171, 173, 176, 180, 182, 189, 192, 195, 197, 199, 202, 203, 204, 207, 209, 210, 211], "local": [1, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 186, 190, 203, 204, 209, 210, 211, 212, 213], "which": [1, 2, 3, 4, 5, 7, 8, 9, 11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 34, 36, 37, 38, 41, 43, 45, 55, 57, 59, 60, 70, 110, 117, 119, 120, 123, 126, 127, 129, 132, 141, 142, 144, 169, 171, 173, 174, 176, 177, 182, 183, 184, 186, 187, 188, 190, 192, 195, 198, 199, 202, 204, 206, 209, 210, 212, 213], "allow": [1, 3, 4, 5, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 43, 51, 55, 59, 60, 110, 121, 124, 142, 169, 174, 176, 182, 184, 186, 189, 192, 195, 200, 204, 210, 211], "similar": [1, 2, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110, 174, 176, 192, 194, 201, 202, 204, 210], "network": [1, 2, 5, 11, 18, 183, 192, 204, 210, 211], "overhead": [1, 5, 204], "resourc": [1, 179, 180, 186, 202], "those": [1, 2, 3, 4, 7, 15, 17, 18, 19, 20, 21, 23, 30, 38, 55, 59, 60, 70, 110, 144, 176, 184, 190, 192, 198, 200], "much": [1, 15, 17, 18, 19, 20, 21, 23, 37, 55, 59, 60, 110, 171, 176, 187, 188, 192, 195, 196, 207, 208, 209], "favor": [1, 169], "effici": [1, 4, 7, 9, 70, 117, 120, 123, 125, 140, 195, 200, 210, 211, 212, 213], "might": [1, 2, 4, 7, 9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 34, 45, 49, 55, 59, 60, 110, 174, 176, 198], "grpc": [1, 5, 6, 15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 110, 117, 120, 139, 183, 203], "http": [1, 2, 5, 6, 9, 10, 14, 15, 17, 18, 19, 20, 21, 23, 46, 47, 55, 57, 59, 60, 61, 73, 74, 88, 89, 105, 106, 110, 117, 119, 120, 139, 141, 151, 176, 181, 182, 186, 187, 190, 202, 203, 205, 209, 212, 213], "batch": [1, 2, 3, 6, 7, 9, 14, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 30, 34, 44, 45, 55, 59, 60, 70, 110, 117, 120, 139, 202], "re": [1, 9, 15, 17, 18, 19, 20, 21, 23, 49, 55, 59, 60, 110, 144, 169, 172, 176, 190, 195, 207, 209], "okai": [1, 195, 202], "long": [1, 9, 19, 59, 73, 74, 94, 95, 172, 202, 210, 212, 213], "jina": [1, 3, 15, 17, 18, 19, 20, 21, 23, 43, 47, 55, 59, 60, 110, 117, 119, 120, 140, 144, 174, 178, 179, 180, 181, 182, 183, 184, 187, 199, 202, 203, 204, 205, 209, 211, 212, 213], "open": [1, 3, 10, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 119, 120, 122, 141, 170, 173, 183], "constantli": 1, "accordingli": [1, 117, 120, 125, 129, 169], "If": [1, 2, 3, 4, 5, 7, 9, 10, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 30, 31, 34, 36, 44, 45, 46, 49, 50, 55, 57, 59, 60, 73, 75, 94, 96, 110, 117, 119, 120, 129, 132, 139, 144, 151, 169, 174, 175, 176, 181, 182, 186, 187, 188, 192, 193, 194, 195, 196, 197, 198, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211], "believ": 1, "miss": [1, 116, 209, 210, 211], "optim": [1, 4, 9, 197, 208, 210, 211], "g": [1, 2, 3, 4, 7, 9, 10, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 119, 184, 186, 191, 194, 195, 198, 203, 204, 210], "recent": [1, 4], "upstream": [1, 204], "avoid": [1, 3, 4, 11, 147, 149, 150, 152, 169, 174, 204], "unnecessari": [1, 204], "step": [1, 4, 11, 15, 17, 18, 19, 20, 21, 23, 49, 55, 59, 60, 70, 110, 171, 192, 204, 206, 208], "feel": [1, 4, 182], "free": [1, 57, 170, 173], "rais": [1, 4, 15, 16, 17, 18, 19, 20, 21, 23, 31, 55, 57, 59, 60, 62, 67, 69, 72, 73, 75, 77, 78, 82, 88, 93, 94, 96, 98, 100, 104, 105, 109, 110, 142, 187], "pr": [1, 151], "issu": [1, 5, 144, 174, 202], "contribut": [1, 3], "incomplet": 1, "ann": [1, 3, 5, 15, 17, 18, 19, 20, 21, 23, 31, 55, 59, 60, 73, 75, 94, 96, 110], "librari": [1, 57, 119, 144, 172, 192, 210, 211], "faiss": 1, "annoi": [1, 5, 207], "scann": 1, "fact": [1, 181, 182, 192], "itself": [1, 4, 5, 9, 15, 17, 18, 19, 20, 21, 23, 26, 28, 30, 36, 39, 45, 47, 55, 59, 60, 110, 117, 120, 122, 123, 124, 125, 126, 129, 130, 132, 133, 139, 140, 141, 169, 194, 196, 198, 201, 204, 207], "intern": [1, 15, 17, 18, 19, 20, 21, 23, 38, 55, 59, 60, 110, 117, 120, 123], "yet": [1, 174, 210], "integr": [1, 11, 169, 183, 192, 207, 210, 211], "introduc": [1, 3, 4, 5, 169, 187, 192, 194, 207], "although": [1, 207, 210], "real": [1, 151, 171, 184, 207, 208], "life": 1, "scenario": [1, 198], "live": [1, 4, 5, 210], "machin": [1, 55, 110, 173, 182, 188, 190, 204, 209], "potenti": [1, 202, 207], "multipl": [1, 5, 15, 17, 18, 19, 20, 21, 23, 26, 34, 46, 54, 55, 59, 60, 110, 117, 120, 130, 174, 176, 186, 191, 192, 194, 195, 198, 200, 204, 210], "parallel": [1, 2, 14, 15, 17, 18, 19, 20, 21, 23, 25, 26, 44, 55, 59, 60, 110, 117, 120, 139, 195, 200], "chose": 1, "keep": [1, 3, 9, 60, 70, 117, 120, 141, 184, 185, 187, 201], "both": [1, 7, 8, 15, 17, 18, 19, 20, 21, 23, 49, 55, 59, 60, 110, 169, 186, 191, 197, 198, 201, 207, 210], "process": [1, 9, 11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 45, 55, 59, 60, 110, 117, 120, 122, 123, 124, 125, 126, 129, 130, 140, 141, 170, 172, 174, 184, 185, 189, 195, 198, 204, 207, 209, 210, 211], "minim": [1, 6, 195], "end": [1, 9, 15, 16, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 117, 120, 140, 190, 212, 213], "call": [1, 2, 3, 4, 15, 17, 18, 19, 20, 21, 23, 30, 46, 55, 59, 60, 110, 177, 182, 185, 188, 192, 198, 203, 207], "underli": [1, 4], "influenc": 1, "neg": [1, 212, 213], "interfac": [1, 2, 3, 5, 6, 169, 170, 192, 196, 199, 200, 210], "spot": 1, "bottleneck": [1, 3], "thrill": 1, "know": [1, 4, 9, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 119, 184, 195, 200, 202, 204, 210], "about": [1, 2, 4, 5, 6, 7, 9, 10, 169, 178, 179, 180, 181, 182, 184, 185, 187, 192, 194, 195, 201, 204, 207, 210], "fix": [1, 117, 120, 127, 173, 204], "big": [1, 10, 11, 15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110, 116, 117, 120, 139, 176, 195, 200, 201, 207, 210], "impact": [1, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110], "mean": [1, 4, 9, 10, 11, 15, 17, 18, 19, 20, 21, 23, 30, 44, 55, 59, 60, 110, 117, 120, 125, 129, 151, 170, 177, 180, 182, 185, 186, 188, 189, 194, 198, 201, 203, 205, 207, 209], "even": [1, 3, 4, 9, 144, 181, 198, 208], "cannot": [1, 5, 142, 198], "easili": [1, 2, 3, 4, 11, 173, 175, 176, 177, 183, 184, 186, 196, 204, 207, 210], "compar": [1, 10, 15, 17, 18, 19, 20, 21, 23, 30, 36, 41, 46, 55, 59, 60, 110, 116, 173, 174, 182, 202], "research": 1, "showcas": [1, 4, 183], "what": [1, 2, 4, 7, 10, 171, 177, 186, 202, 207], "expect": [1, 3, 4, 9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 70, 110, 117, 120, 141, 169, 192, 194], "get": [1, 2, 3, 4, 7, 9, 10, 15, 17, 18, 19, 20, 21, 23, 24, 36, 42, 47, 53, 55, 59, 60, 110, 111, 116, 117, 120, 121, 124, 139, 140, 144, 153, 162, 171, 176, 186, 187, 190, 191, 192, 194, 195, 197, 199, 204, 207, 208], "without": [1, 3, 15, 17, 18, 19, 20, 21, 23, 28, 44, 50, 55, 57, 59, 60, 110, 153, 182, 183, 184, 194, 195, 198, 204], "hyper": 1, "practic": [1, 10, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 184, 186, 195, 202, 204], "strongli": [1, 207], "recommend": [1, 4, 10, 15, 16, 17, 18, 19, 20, 21, 55, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 117, 120, 129, 169, 180, 184, 187, 192, 204, 207, 210, 211], "achiev": [1, 207], "hope": [1, 202], "help": [1, 9, 27, 53, 119, 171, 184, 186, 187, 192, 207, 211], "select": [1, 10, 177, 182, 183, 194, 195, 199], "suit": [1, 173], "case": [1, 3, 4, 5, 7, 9, 15, 17, 18, 19, 20, 21, 23, 31, 36, 55, 59, 60, 70, 73, 75, 94, 96, 110, 144, 171, 174, 180, 181, 182, 186, 192, 198, 201, 204], "depend": [1, 4, 5, 9, 15, 17, 18, 19, 20, 21, 23, 31, 44, 49, 55, 59, 60, 73, 75, 94, 96, 110, 117, 120, 141, 171, 177, 192, 197, 199, 201, 202, 203, 204, 206, 207, 208, 211], "desir": [1, 4, 117, 120, 129, 205], "mai": [1, 4, 10, 11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 43, 45, 55, 59, 60, 110, 117, 119, 120, 123, 125, 140, 144, 171, 174, 176, 182, 185, 190, 192, 194, 195, 196, 198, 204, 206, 207, 208, 209, 210, 212, 213], "prefer": [1, 192], "here": [1, 2, 3, 4, 5, 6, 7, 9, 10, 144, 169, 170, 172, 174, 176, 177, 182, 184, 186, 192, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 207, 209, 210], "fewer": [1, 9], "enjoi": [1, 3, 9, 184, 209], "best": [1, 4, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 117, 120, 124, 152, 175, 192, 200, 204, 205], "reason": [1, 4, 9, 184, 192, 204, 207, 210], "sai": [1, 11, 185, 186, 192, 198, 201, 202, 204, 207], "larg": [1, 8, 9, 15, 17, 18, 19, 20, 21, 23, 30, 46, 55, 59, 60, 110, 117, 120, 127, 169, 172, 195, 197, 198, 201, 202, 210], "still": [1, 9, 169, 174, 182, 195, 202], "fit": [1, 3, 4, 8, 11, 57, 182, 192, 197, 198, 200, 201, 210], "great": [1, 182], "monolith": [1, 210], "save": [1, 4, 10, 14, 15, 17, 18, 19, 20, 21, 23, 35, 36, 37, 38, 39, 41, 46, 50, 55, 59, 60, 68, 71, 110, 117, 120, 122, 123, 126, 129, 141, 172, 173, 201, 202, 204], "lot": [1, 6, 15, 17, 18, 19, 20, 21, 23, 38, 55, 59, 60, 110, 202, 206], "unlik": [1, 188, 192], "unfortun": 1, "out": [1, 3, 10, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 34, 45, 55, 57, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 144, 174, 180, 184, 188, 192, 204, 211], "nativ": [1, 15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110, 170, 209], "nonetheless": [1, 192, 204], "togeth": [1, 9, 15, 17, 18, 19, 20, 21, 23, 24, 26, 34, 38, 55, 59, 60, 110, 119, 144, 171, 195, 196], "leverag": [1, 2, 3, 4, 10, 70, 176, 182, 183, 184, 185, 187, 192, 201, 202, 203, 207], "agnost": 1, "solut": [1, 4, 183, 184, 186], "ani": [1, 4, 5, 9, 15, 17, 18, 19, 20, 21, 23, 26, 30, 34, 55, 57, 59, 60, 73, 74, 94, 95, 110, 117, 118, 119, 120, 123, 125, 129, 133, 134, 140, 142, 144, 153, 169, 174, 181, 182, 186, 190, 194, 195, 198, 199, 203, 205, 207, 210, 212, 213], "cours": [1, 4, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 176, 194, 207], "includ": [1, 3, 5, 12, 57, 117, 119, 120, 129, 140, 142, 169, 173, 181, 192, 205, 207, 210, 211], "doe": [1, 4, 5, 7, 9, 10, 15, 17, 18, 19, 20, 21, 23, 30, 44, 55, 59, 60, 110, 117, 119, 120, 129, 139, 187, 192, 196, 197, 198, 199], "care": [1, 175, 182], "otherwis": [1, 3, 9, 10, 15, 17, 18, 19, 20, 21, 23, 31, 46, 55, 57, 59, 60, 73, 75, 94, 96, 110, 117, 120, 122, 129, 144, 182], "option": [1, 3, 7, 9, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 30, 31, 34, 36, 38, 40, 42, 43, 44, 45, 46, 47, 50, 54, 55, 59, 60, 62, 63, 67, 72, 73, 74, 75, 77, 78, 82, 88, 89, 93, 94, 95, 96, 98, 100, 101, 104, 105, 106, 109, 110, 116, 117, 118, 119, 120, 125, 129, 132, 133, 134, 135, 139, 140, 141, 142, 143, 144, 151, 152, 153, 162, 163, 164, 165, 180, 195, 203, 207, 208], "compos": [2, 5, 6, 7, 9, 57], "yml": [2, 5, 6, 7, 9], "co": [2, 119], "environ": [2, 5, 9, 144, 180, 208, 209, 211], "xpack": 2, "enabl": [2, 4, 7, 27, 33, 63, 74, 79, 95, 101, 106, 169, 207, 208, 209, 211], "fals": [2, 4, 6, 7, 9, 10, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 30, 31, 34, 36, 40, 43, 44, 45, 46, 47, 55, 57, 59, 60, 73, 74, 75, 88, 89, 94, 95, 96, 105, 106, 110, 111, 116, 117, 119, 120, 123, 125, 127, 129, 130, 132, 139, 140, 141, 142, 144, 152, 162, 175, 177, 181, 182, 187, 194, 195, 196, 198, 199, 203, 204, 205, 206], "discoveri": 2, "type": [2, 4, 5, 6, 7, 10, 11, 13, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 62, 63, 66, 67, 68, 69, 72, 73, 74, 75, 77, 78, 79, 82, 88, 89, 90, 91, 93, 94, 95, 96, 98, 100, 103, 104, 105, 106, 109, 110, 111, 112, 115, 117, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 146, 147, 149, 150, 151, 152, 153, 156, 157, 162, 164, 165, 168, 172, 175, 182, 183, 184, 186, 190, 192, 194, 195, 196, 198, 199, 200, 203, 204, 205, 206, 207, 210, 211], "port": [2, 5, 6, 7, 9, 14, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 61, 88, 89, 94, 95, 105, 106, 110, 117, 120, 144, 203], "9200": [2, 19, 73, 74], "u": [2, 5, 6, 7, 9, 117, 120, 123, 125, 140, 176, 202, 203, 209], "assum": [2, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 24, 36, 55, 59, 60, 110, 117, 120, 125, 129, 174, 192, 201, 202], "address": [2, 5, 6, 7, 9, 55, 110, 144, 187, 203], "localhost": [2, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 73, 74, 88, 89, 94, 95, 105, 106, 110, 203], "creation": [2, 5, 7, 204], "By": [2, 3, 4, 5, 7, 9, 15, 17, 18, 19, 20, 21, 23, 31, 37, 38, 41, 55, 59, 60, 73, 75, 94, 96, 110, 117, 119, 120, 129, 170, 184, 192, 197, 198, 201, 202], "layer": [2, 9, 197], "plain": [2, 117, 187, 192, 201, 204], "pass": [2, 3, 4, 6, 7, 8, 9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 38, 39, 45, 55, 57, 59, 60, 62, 67, 72, 73, 77, 88, 93, 94, 98, 105, 109, 110, 117, 119, 120, 123, 129, 133, 140, 142, 169, 177, 185, 192, 198, 204, 205, 210], "host": [2, 5, 6, 7, 9, 14, 15, 17, 18, 19, 20, 21, 23, 46, 47, 55, 59, 60, 61, 73, 74, 88, 89, 94, 95, 105, 106, 110, 117, 120, 139, 203], "api_id": 2, "ca_cert": 2, "insid": [2, 3, 4, 9, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 117, 120, 129, 178, 187, 192, 195, 196, 201, 202, 203], "es_config": [2, 14, 19, 61, 73, 74], "constructor": [2, 3, 4, 7, 17, 185, 187, 191, 192], "For": [2, 3, 4, 5, 6, 7, 9, 12, 15, 17, 18, 19, 20, 21, 23, 28, 30, 36, 44, 55, 59, 60, 110, 117, 171, 174, 175, 176, 177, 180, 181, 182, 184, 187, 188, 189, 191, 192, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 211], "exampl": [2, 7, 8, 15, 17, 18, 19, 20, 21, 23, 26, 36, 45, 54, 55, 59, 60, 70, 110, 116, 117, 120, 129, 144, 151, 153, 171, 172, 174, 175, 176, 177, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 207, 208, 209, 210], "prq7je_hj4i4auh": 2, "hq": 2, "hanxiao": [2, 171, 188], "http_ca": 2, "crt": 2, "certif": 2, "password": 2, "etc": [2, 3, 153, 169, 182, 184, 200, 205, 211], "index_nam": [2, 4, 7, 14, 19, 59, 61, 73, 74, 94, 95], "previous": [2, 5, 7, 9, 55, 60, 110, 169], "old_stuff": 2, "_": [2, 7, 15, 17, 18, 19, 20, 21, 23, 26, 45, 55, 59, 60, 110, 196, 205], "1000": [2, 5, 7, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 171, 173, 174, 195, 206], "da2": [2, 4, 7, 196, 201], "length": [2, 4, 5, 6, 7, 10, 15, 17, 18, 19, 20, 21, 23, 26, 30, 34, 55, 59, 60, 110, 117, 120, 140, 175, 176, 177, 178, 181, 185, 194, 195, 196, 197, 198, 199, 203, 204, 205, 206, 212, 213], "2000": 2, "homogen": [2, 4, 7, 10, 175, 181, 194, 195, 196, 198, 199, 203, 204, 205, 206], "common": [2, 4, 7, 10, 11, 23, 35, 174, 175, 181, 182, 186, 187, 190, 192, 194, 195, 196, 198, 199, 203, 204, 205, 206, 208, 209, 210, 211], "attribut": [2, 4, 7, 10, 11, 15, 17, 18, 19, 20, 21, 23, 24, 26, 30, 31, 32, 34, 46, 49, 53, 54, 55, 59, 60, 73, 75, 94, 96, 110, 117, 120, 127, 131, 140, 171, 173, 174, 175, 181, 182, 185, 188, 190, 191, 192, 195, 196, 198, 199, 200, 203, 204, 205, 206, 210, 212, 213], "uniqu": [2, 3, 4, 7, 10, 117, 120, 124, 175, 181, 187, 190, 194, 195, 196, 198, 199, 203, 204, 205, 206, 210, 212, 213], "empti": [2, 3, 4, 5, 6, 7, 10, 14, 15, 16, 17, 18, 19, 20, 21, 23, 26, 34, 46, 55, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 111, 117, 120, 132, 151, 162, 175, 181, 182, 186, 188, 192, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210], "ndarrai": [2, 3, 10, 11, 13, 15, 17, 18, 19, 20, 21, 23, 28, 30, 31, 36, 40, 44, 55, 59, 60, 73, 75, 94, 96, 110, 112, 113, 117, 119, 120, 125, 127, 129, 135, 139, 141, 145, 146, 147, 149, 150, 152, 154, 156, 169, 172, 173, 174, 181, 182, 186, 188, 189, 190, 192, 197, 198, 199, 200, 201, 205, 208, 210, 212, 213], "str": [2, 3, 4, 6, 7, 10, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 30, 31, 34, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 53, 54, 55, 59, 60, 62, 63, 66, 69, 73, 74, 75, 78, 79, 88, 89, 90, 91, 93, 94, 95, 96, 100, 101, 105, 106, 110, 111, 113, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 129, 132, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 146, 149, 150, 153, 162, 163, 164, 165, 175, 176, 181, 182, 185, 187, 194, 195, 196, 198, 199, 203, 204, 205, 206, 207, 212, 213], "14890289": 2, "3168339": 2, "03050802": 2, "06785086": 2, "94719299": 2, "32490566": 2, "how": [2, 3, 4, 5, 6, 9, 10, 15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110, 117, 120, 129, 171, 174, 182, 183, 184, 185, 186, 187, 190, 192, 195, 196, 198, 200, 202, 204, 207, 209, 210], "being": [2, 3, 4, 9, 117, 120, 141, 206], "sent": [2, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110], "ad": [2, 4, 5, 9, 10, 15, 17, 18, 19, 20, 21, 23, 30, 49, 55, 59, 60, 110, 184, 185, 196, 205], "addit": [2, 5, 6, 10, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 62, 67, 72, 73, 77, 88, 93, 94, 98, 105, 109, 110, 119, 181, 182, 198, 209, 211], "kwarg": [2, 3, 5, 15, 16, 17, 18, 19, 20, 21, 23, 26, 29, 30, 31, 36, 37, 38, 39, 40, 41, 43, 44, 47, 55, 57, 59, 60, 62, 67, 72, 73, 75, 77, 78, 82, 88, 93, 94, 96, 98, 100, 104, 105, 109, 110, 111, 117, 119, 120, 123, 129, 133, 139, 140, 141, 144, 151, 162, 192, 198], "method": [2, 3, 4, 5, 6, 7, 9, 14, 15, 17, 18, 19, 20, 21, 23, 30, 36, 49, 54, 55, 59, 60, 61, 67, 70, 72, 77, 82, 94, 95, 98, 104, 109, 110, 117, 119, 120, 133, 139, 144, 151, 170, 178, 180, 182, 184, 187, 191, 192, 198, 204, 207], "see": [2, 3, 4, 9, 10, 15, 18, 21, 55, 60, 110, 117, 144, 171, 174, 177, 180, 182, 184, 186, 187, 190, 193, 194, 195, 196, 198, 199, 200, 202, 205, 207, 208, 210], "detail": [2, 4, 12, 15, 18, 21, 55, 60, 110, 117, 119, 169, 171, 175, 182, 192, 197, 207, 210], "int": [2, 3, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 29, 30, 31, 34, 40, 44, 45, 46, 47, 50, 53, 55, 59, 60, 62, 63, 66, 67, 72, 73, 74, 75, 77, 78, 82, 88, 89, 91, 93, 94, 95, 96, 98, 100, 104, 105, 106, 109, 110, 111, 117, 118, 119, 120, 122, 124, 125, 127, 129, 130, 132, 134, 139, 140, 141, 142, 143, 144, 151, 152, 153, 162, 181, 182, 190, 195, 198, 199, 207, 212, 213], "l2_norm": 2, "thread_count": 2, "chunk_siz": 2, "max_chunk_byt": 2, "104857600": 2, "queue_siz": 2, "batch_siz": [2, 3, 5, 7, 11, 14, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 30, 34, 44, 45, 47, 55, 59, 60, 61, 73, 74, 94, 95, 105, 106, 110, 117, 120, 139, 195, 197, 201, 202], "overriden": 2, "pre": [2, 7, 15, 17, 18, 19, 20, 21, 23, 31, 44, 55, 59, 60, 73, 75, 94, 96, 110, 142, 183, 192, 198, 204, 209], "dsl": 2, "score": [2, 3, 5, 6, 7, 9, 13, 15, 17, 18, 19, 20, 21, 23, 30, 44, 55, 59, 60, 110, 117, 118, 120, 134, 142, 143, 151, 168, 174, 188, 190, 192, 194, 198, 201, 204, 212, 213], "dictionari": [2, 3, 5, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 30, 53, 55, 59, 60, 110, 117, 120, 140, 142, 198, 199, 205], "under": [2, 3, 4, 7, 9, 57, 151, 169, 176, 182, 184, 194, 204, 205, 209, 210], "kei": [2, 3, 6, 7, 9, 15, 17, 18, 19, 20, 21, 23, 28, 30, 53, 55, 57, 59, 60, 110, 116, 117, 120, 133, 140, 141, 144, 169, 172, 205, 212, 213], "addition": [2, 3, 15, 55, 110, 177, 208], "knn": 2, "num_candid": 2, "100": [2, 5, 6, 15, 17, 18, 19, 20, 21, 23, 26, 45, 55, 59, 60, 110, 117, 120, 132, 173, 195, 198, 199], "Such": [2, 4, 5, 6, 7, 9, 202, 203, 205], "need": [2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 17, 18, 19, 20, 21, 23, 30, 46, 55, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 169, 171, 175, 176, 178, 180, 182, 183, 184, 185, 186, 192, 195, 197, 198, 199, 200, 202, 204, 205, 207, 208, 209], "index_text": [2, 7, 14, 19, 59, 61, 73, 74, 94, 95], "sever": [2, 4, 7, 180], "pizza": 2, "person": [2, 57], "eat": 2, "restaur": 2, "pizza_doc": 2, "part": [2, 3, 5, 7, 10, 57, 176, 186, 192, 195], "mostli": [2, 7, 9], "split": [2, 7, 15, 17, 18, 19, 20, 21, 23, 26, 34, 55, 57, 59, 60, 110, 176], "group": [2, 7, 14, 15, 17, 18, 19, 20, 21, 23, 26, 38, 55, 59, 60, 110, 119, 190, 195], "item": [2, 3, 7, 15, 16, 17, 18, 19, 20, 21, 55, 57, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 117, 120, 125, 151, 171, 195, 207], "specif": [2, 3, 4, 5, 7, 9, 15, 17, 18, 19, 20, 21, 23, 31, 38, 55, 59, 60, 73, 75, 94, 96, 110, 119, 169, 174, 181, 182, 184, 185, 192, 198], "tag_indic": [2, 7, 14, 19, 59, 61, 73, 74, 94, 95], "food_typ": [2, 7], "italian": [2, 7], "spanish": [2, 7], "food": [2, 7], "cheap": [2, 7], "french": [2, 7], "expens": [2, 7, 9], "chines": [2, 7], "noddl": [2, 7], "quit": [2, 7, 177, 202, 207, 210], "results_cheap": [2, 7], "results_italian": [2, 7], "tags__food_typ": [2, 7], "don": [2, 7, 10, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 70, 110, 119, 176, 184, 187, 188, 195], "make": [2, 3, 4, 7, 9, 15, 17, 18, 19, 20, 21, 23, 43, 44, 46, 55, 59, 60, 70, 110, 117, 120, 129, 142, 182, 186, 187, 192, 196, 198, 200, 202, 205, 209, 211], "hostnam": [2, 5, 6, 9], "dict": [2, 3, 4, 7, 9, 15, 17, 18, 19, 20, 21, 23, 26, 30, 31, 34, 38, 40, 43, 44, 47, 53, 55, 58, 59, 60, 62, 63, 69, 73, 74, 75, 78, 79, 88, 89, 90, 91, 94, 95, 96, 100, 101, 105, 106, 110, 116, 117, 118, 119, 120, 133, 134, 140, 141, 142, 144, 175, 182, 187, 190, 195, 199, 204, 207, 210], "cloud_id": 2, "api_kei": [2, 6, 14, 55, 61, 88, 89], "class": [2, 3, 4, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 151, 162, 163, 164, 165, 166, 181, 183, 184, 185, 192, 194, 205, 207, 212, 213], "handl": [2, 3, 7, 70, 123, 170, 173, 184, 189, 192, 207], "refresh": 2, "plural": 2, "compli": 2, "seen": [3, 184], "previou": [3, 4, 15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110, 151, 171, 190, 204, 212, 213], "chapter": [3, 169, 182, 184, 187, 190, 192, 194, 195, 196, 199, 207, 208, 210], "sql": [3, 4, 66], "nosql": 3, "motiv": [3, 172, 210], "board": 3, "advanc": [3, 10, 27, 33, 51, 121, 170, 174, 191, 200, 209, 210, 211], "languag": [3, 5, 15, 17, 18, 19, 20, 21, 23, 31, 55, 59, 60, 73, 75, 94, 96, 110, 174, 176, 183, 186, 199, 204], "vendor": 3, "power": [3, 28, 65, 81, 102, 194, 200], "well": [3, 9, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 169, 174, 180, 184, 187, 190, 207, 208, 209], "design": [3, 117, 120, 123, 125, 140, 181, 182, 184, 188, 192, 198, 204], "maintain": [3, 186, 192], "plug": 3, "ai": [3, 117, 144, 174, 178, 179, 180, 181, 182, 183, 187, 202, 204, 205], "ecosystem": [3, 184, 192], "hub": [3, 119, 183, 184, 203], "clip": [3, 184, 190, 211, 212, 213], "servic": [3, 10, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 184, 207, 210, 211], "finetun": [3, 184, 210], "synergi": 3, "after": [3, 5, 9, 10, 15, 17, 18, 19, 20, 21, 23, 26, 28, 45, 55, 57, 59, 60, 110, 117, 120, 122, 123, 124, 125, 126, 129, 130, 139, 140, 141, 151, 171, 174, 181, 182, 197, 198, 204, 207], "extens": [3, 15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110, 144, 204, 210], "conveni": [3, 176, 180], "promis": [3, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110], "experi": [3, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 200, 208, 210, 211], "regular": [3, 4, 199, 212, 213], "extra": [3, 4, 15, 17, 18, 19, 20, 21, 23, 38, 39, 44, 55, 59, 60, 110, 117, 120, 133, 142, 169, 192, 208, 209, 211], "learn": [3, 4, 10, 171, 173, 181, 182, 183, 184, 187, 188, 190, 195, 200, 207, 210, 211], "walk": [3, 174], "through": [3, 4, 5, 174, 181, 184, 186, 195], "mydocstor": 3, "look": [3, 4, 117, 120, 129, 171, 174, 177, 182, 188, 197, 198, 202, 204, 207, 210], "config": [3, 7, 14, 15, 18, 55, 60, 61, 88, 93, 105, 106, 110, 117, 142, 176, 205], "start": [3, 4, 15, 16, 17, 18, 19, 20, 21, 23, 46, 54, 55, 59, 60, 62, 67, 69, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 117, 120, 125, 129, 178, 181, 190, 195, 212, 213], "go": [3, 4, 174, 192, 195, 204, 212, 213], "arrai": [3, 5, 13, 117, 119, 120, 125, 137, 140, 146, 147, 149, 150, 152, 153, 168, 177, 186, 187, 188, 192, 193, 194, 199, 201, 204, 207, 210, 212, 213], "sub": [3, 15, 17, 18, 19, 20, 21, 23, 46, 54, 55, 59, 60, 110, 119, 173, 176, 177, 181, 182, 184, 185, 186, 190, 191, 195, 212, 213], "four": [3, 173, 210, 212, 213], "file": [3, 8, 15, 17, 18, 19, 20, 21, 23, 36, 37, 38, 40, 41, 46, 55, 57, 59, 60, 110, 117, 119, 120, 122, 123, 126, 129, 130, 141, 144, 169, 171, 172, 173, 176, 182, 186, 189, 190, 192, 202, 204, 206, 212, 213], "readm": [3, 176], "md": 3, "These": [3, 9, 15, 17, 18, 19, 20, 21, 23, 30, 34, 39, 55, 59, 60, 70, 110, 187, 198, 200, 207, 212, 213], "consist": [3, 9, 15, 17, 18, 19, 20, 21, 23, 49, 55, 59, 60, 110, 117, 120, 132, 173, 174, 184, 190, 210, 211, 212, 213], "necessari": [3, 63, 74, 79, 95, 101, 106, 151, 182], "anoth": [3, 4, 15, 17, 18, 19, 20, 21, 23, 25, 26, 44, 45, 55, 59, 60, 110, 111, 117, 162, 181, 182, 186, 188, 189, 196, 201], "basegetsetdelmixin": [3, 61, 65, 68, 70, 76, 81, 91, 97, 102, 108], "getsetdelmixin": [3, 61, 62, 65, 73, 76, 78, 81, 88, 91, 94, 97, 100, 102, 105, 108], "def": [3, 4, 9, 11, 15, 17, 18, 19, 20, 21, 23, 26, 45, 55, 59, 60, 110, 116, 174, 176, 185, 198, 202, 207], "_get_doc_by_id": [3, 70], "self": [3, 15, 17, 18, 19, 20, 21, 23, 26, 30, 34, 44, 46, 55, 57, 59, 60, 110, 111, 117, 162, 202], "_id": [3, 71], "_del_doc_by_id": [3, 70], "_set_doc_by_id": [3, 70], "_load_offset2id": 3, "_save_offset2id": 3, "five": [3, 176, 210], "correspond": [3, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 132, 144, 173, 174, 175, 176, 181, 182, 185, 186, 190, 201, 206, 208, 212, 213], "logic": [3, 4, 49, 194, 199, 207], "string": [3, 5, 7, 9, 15, 17, 18, 19, 20, 21, 23, 31, 36, 38, 41, 44, 47, 54, 55, 59, 60, 73, 75, 94, 96, 105, 106, 110, 117, 119, 120, 122, 132, 133, 139, 141, 144, 146, 186, 187, 190, 192, 194, 195, 197, 199, 204, 207, 212, 213], "essenti": 3, "ensur": [3, 4, 181, 192], "offset2id": [3, 61, 66, 68, 70, 71], "map": [3, 4, 14, 15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 38, 45, 53, 55, 59, 60, 73, 74, 110, 116, 117, 119, 120, 140, 175, 182, 184, 185, 187, 190, 202, 212, 213], "behaviour": [3, 116], "inherit": [3, 17, 20, 139, 189, 205], "howev": [3, 4, 9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 151, 169, 182, 192, 195, 198, 202, 210], "adapt": 3, "_offset2id": 3, "member": [3, 9, 116], "variabl": [3, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 105, 106, 110, 144, 197, 204, 212, 213], "_list_lik": 3, "_get_offset2ids_meta": 3, "els": [3, 57, 144, 151, 183, 200], "mind": [3, 70, 184, 201], "upsert": 3, "remov": [3, 5, 14, 15, 16, 17, 18, 19, 20, 21, 55, 59, 60, 61, 62, 67, 68, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 144, 192, 194, 210], "old": [3, 144, 169, 176, 210], "recommened": 3, "_get_docs_by_id": [3, 70], "_del_docs_by_id": [3, 70], "_clear_storag": [3, 70], "_set_doc_value_pair": 3, "_set_doc_value_pairs_nest": 3, "_set_docs_by_id": [3, 70], "full": [3, 4, 7, 10, 12, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 169, 171, 173, 177, 182, 186, 192, 204, 206, 207, 209, 210, 211], "signatur": 3, "fine": [3, 169], "grain": [3, 169], "frequent": [3, 9, 117, 120, 123, 125, 140, 187, 190, 192, 204, 210], "fulli": [3, 9, 11, 15, 17, 18, 19, 20, 21, 23, 26, 30, 34, 55, 59, 60, 110, 117, 120, 129, 186, 195, 205], "gener": [3, 5, 6, 9, 13, 15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 34, 36, 40, 45, 46, 50, 55, 59, 60, 70, 110, 117, 120, 129, 132, 140, 141, 142, 144, 159, 161, 169, 172, 175, 177, 186, 196, 210, 212, 213], "slow": [3, 4, 11, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 70, 110, 206], "refer": [3, 5, 9, 12, 15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110, 173, 182, 192, 195, 196, 203, 204], "iter": [3, 5, 15, 16, 17, 18, 19, 20, 21, 23, 26, 40, 45, 54, 55, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 91, 93, 94, 98, 100, 104, 105, 109, 110, 119, 196, 202, 210], "union": [3, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 30, 31, 36, 37, 38, 40, 41, 44, 45, 55, 59, 60, 62, 63, 73, 74, 75, 88, 89, 94, 95, 96, 100, 101, 105, 106, 110, 117, 118, 119, 120, 122, 123, 126, 129, 133, 134, 139, 140, 141, 142, 146, 152], "type_check": 3, "basesequencelikemixin": [3, 61, 67, 68, 72, 77, 82, 93, 98, 104, 109], "sequencelikemixin": [3, 61, 62, 67, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109], "__eq__": 3, "__contains__": 3, "x": [3, 11, 15, 17, 18, 19, 20, 21, 23, 24, 55, 59, 60, 110, 116, 146, 152, 153, 169, 182, 185, 190, 192, 204, 210, 212, 213], "__repr__": 3, "__add__": 3, "__len__": 3, "insert": [3, 5, 9, 14, 15, 16, 17, 18, 19, 20, 21, 55, 59, 60, 61, 62, 67, 68, 71, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 205], "custom": [3, 6, 8, 15, 17, 18, 19, 20, 21, 23, 30, 44, 55, 59, 60, 110, 116, 181, 205], "_append": 3, "overrid": [3, 4, 5, 9, 15, 17, 18, 19, 20, 21, 23, 31, 43, 55, 59, 60, 70, 110, 116, 198], "last": [3, 4, 9, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 34, 45, 46, 55, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 117, 120, 129, 132, 152, 171, 175, 177, 184, 194, 195, 202], "_extend": 3, "append": [3, 4, 5, 14, 15, 16, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 61, 62, 67, 68, 71, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 177, 191, 193, 196, 198], "__iter__": 3, "reli": [3, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 191, 194, 202, 210], "come": [3, 4, 10, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 176, 181, 192, 195, 210, 212, 213], "standard": [3, 117, 120, 129, 182, 184], "mutablesequ": [3, 16, 72], "doc": [3, 4, 5, 7, 10, 15, 17, 18, 19, 20, 21, 23, 26, 34, 45, 54, 55, 57, 58, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 114, 116, 117, 119, 120, 141, 153, 156, 169, 171, 173, 174, 181, 182, 184, 185, 186, 190, 191, 197, 199, 202, 203, 204, 206, 207, 212, 213], "batch_of_doc": 3, "_config": 3, "_upload_batch": 3, "dataclass": [3, 4, 7, 13, 117, 120, 131, 168, 172, 176, 183, 185, 186, 187, 195, 205, 210], "basebackendmixin": [3, 61, 63, 68, 69, 74, 79, 89, 95, 101, 106], "documentarraysourcetyp": [3, 18], "mydocstoreconfig": 3, "config1": 3, "config2": 3, "config3": 3, "backendmixin": [3, 61, 62, 63, 73, 74, 78, 79, 88, 89, 94, 95, 100, 101, 105, 106], "_init_storag": 3, "_doc": [3, 18, 205], "super": [3, 186, 187, 211], "_ensure_unique_config": 3, "config_root": 3, "config_subindex": 3, "config_join": 3, "subindex_nam": 3, "identifi": [3, 175, 187, 190, 197, 212, 213], "expos": [3, 5, 10], "argument": [3, 5, 9, 15, 16, 17, 18, 19, 20, 21, 23, 30, 44, 55, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 117, 119, 120, 123, 129, 139, 140, 141, 142, 182, 185, 187, 192, 196, 198, 201, 204], "init_storag": 3, "pars": [3, 4, 58, 117, 120, 133, 142, 192], "either": [3, 4, 7, 9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 30, 44, 45, 54, 55, 59, 60, 110, 117, 120, 129, 132, 139, 141, 146, 149, 150, 178, 186, 199, 201, 203, 204, 208, 212, 213], "accept": [3, 181, 182, 185, 186, 198, 199], "bool": [3, 6, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 30, 31, 34, 36, 38, 40, 43, 44, 45, 46, 47, 54, 55, 57, 59, 60, 62, 63, 73, 74, 75, 88, 89, 94, 95, 96, 100, 101, 105, 106, 110, 116, 117, 119, 120, 123, 125, 127, 129, 130, 131, 132, 139, 140, 141, 142, 144, 152, 153, 212, 213], "further": [3, 9, 12, 15, 18, 21, 55, 60, 110, 117, 174, 176, 181, 190, 207], "outsid": [3, 117, 120, 129], "take": [3, 4, 11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 142, 171, 183, 198, 202, 207], "form": [3, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 117, 120, 123, 125, 140, 142, 181, 198, 199, 204], "appropri": 3, "veri": [3, 4, 9, 11, 15, 17, 18, 19, 20, 21, 23, 37, 55, 59, 60, 110, 169, 171, 176, 182, 188, 195, 196, 198, 202, 207, 210], "copi": [3, 18, 57, 111, 117, 142, 162, 181, 198, 201], "behavior": [3, 4, 5, 15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110, 169, 185, 187, 192, 196, 198], "subindex": [3, 4, 15, 17, 18, 19, 20, 21, 23, 31, 44, 55, 59, 60, 73, 75, 94, 96, 110, 172, 205], "root": [3, 15, 17, 18, 19, 20, 21, 23, 31, 49, 54, 55, 59, 60, 73, 75, 94, 96, 110, 182, 187, 194, 195, 198], "unless": [3, 182, 204], "field": [3, 6, 9, 10, 13, 15, 17, 18, 19, 20, 21, 23, 30, 31, 38, 46, 55, 57, 59, 60, 69, 73, 75, 94, 95, 96, 110, 111, 112, 116, 117, 119, 120, 127, 132, 140, 142, 153, 162, 175, 176, 183, 184, 185, 186, 187, 188, 190, 192, 194, 195, 198, 199, 204, 205, 206, 208, 212, 213], "explicitli": [3, 4, 144, 192], "usual": [3, 5, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 176, 185, 188], "tabl": [3, 4, 8, 15, 17, 18, 19, 20, 21, 23, 42, 43, 55, 59, 60, 66, 110, 172, 182, 195, 198, 204, 208], "table_nam": [3, 4, 8, 14, 60, 61, 100, 101, 103], "clash": 3, "actual": [3, 4, 28, 57, 70, 117, 120, 141, 174, 186, 198, 209, 212, 213], "parent": [3, 17, 172, 184, 190, 205, 207, 212, 213], "und": 3, "subindic": 3, "despit": 3, "within": [3, 7, 9, 15, 17, 18, 19, 20, 21, 23, 50, 55, 59, 60, 110, 173], "typevar": [3, 116, 185], "input": [3, 4, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 30, 31, 45, 55, 59, 60, 73, 75, 94, 96, 110, 117, 120, 129, 142, 144, 153, 173, 192, 194, 197, 198, 207, 210], "mydocumentstorearraytyp": 3, "findmixin": [3, 14, 23, 31, 61, 62, 64, 73, 75, 78, 80, 88, 90, 94, 96, 100, 105, 107], "_find_similar_vector": 3, "_find": [3, 31], "elasticarraytyp": 3, "given": [3, 9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 30, 31, 44, 45, 46, 55, 59, 60, 73, 75, 94, 96, 110, 117, 119, 120, 129, 132, 139, 176, 182, 184, 185, 186, 187, 197, 198, 199, 201, 204, 205], "closest": [3, 15, 17, 18, 19, 20, 21, 23, 31, 55, 59, 60, 73, 75, 94, 96, 110, 174, 176, 201], "abc": [3, 23, 62, 69, 70, 73, 78, 94, 100, 105], "__all__": 3, "storagemixin": [3, 15, 19, 21, 55, 59, 60, 61, 62, 73, 78, 88, 94, 100, 105, 110], "past": 3, "modul": [3, 9, 168, 182, 184, 198, 211], "content": [3, 15, 17, 18, 19, 20, 21, 43, 55, 59, 60, 110, 118, 119, 126, 134, 168, 187, 188, 189, 190, 196, 199], "documentarraymydocstor": 3, "__new__": [3, 19, 55, 59, 110], "cl": [3, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 116], "arg": [3, 15, 16, 17, 18, 19, 20, 21, 23, 26, 29, 36, 39, 40, 43, 55, 56, 57, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 117, 119, 120, 133, 139, 169], "almost": [3, 4, 184], "allmixin": [3, 14, 18, 23, 117, 120, 162, 164], "basedocumentarrai": [3, 13, 14, 16, 18], "documentarraylik": [3, 15, 17, 18, 19, 20, 21, 23, 30, 41, 55, 59, 60, 110], "elif": 3, "documentarrayinmemori": [3, 10, 13, 14, 17, 20, 21, 205], "done": [3, 11, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 186, 198, 202, 204, 207], "abl": [3, 10, 207], "welcom": 3, "back": [3, 4, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 45, 47, 55, 59, 60, 110, 117, 120, 139, 169, 171, 172, 182, 195, 204, 207, 209], "least": [3, 171, 195], "unit": [3, 183, 184, 186], "test_advance_index": 3, "test_sequ": 3, "test_construct": 3, "pleas": [3, 12, 15, 17, 18, 19, 20, 21, 23, 26, 36, 44, 45, 55, 59, 60, 70, 110, 117, 120, 129, 151, 169, 187, 192, 195, 198, 203, 204, 207, 208, 209], "overload": 3, "readi": [3, 183, 192, 202, 204, 210, 211], "commit": [3, 4, 62, 66], "extern": [4, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 169, 187], "switch": [4, 171, 192, 200, 201], "idiom": [4, 10, 184, 210, 211], "simpl": [4, 5, 9, 119, 170, 172, 182, 183, 184, 189, 191, 195, 197, 201, 202, 204, 210], "db": [4, 8, 9, 10, 15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "multimod": [4, 7, 116, 117, 120, 181, 182, 183, 184, 195, 205, 210, 211], "documentarraysqlit": [4, 13, 14, 60], "documentarraysqlite97c8c833586444a89272ff0ff4287edb": 4, "serialize_config": [4, 5, 6, 8, 9, 14, 15, 55, 60, 61, 62, 63, 88, 89, 90, 100, 101, 105, 106, 110, 205], "conn_config": [4, 8, 14, 60, 61, 100, 101], "journal_mod": [4, 8, 14, 60, 61, 100, 101], "synchron": [4, 8, 14, 60, 61, 100, 101], "modifi": [4, 15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 45, 47, 55, 57, 59, 60, 110, 117, 120, 139, 187, 189, 202], "statement": 4, "properli": 4, "unexpect": [4, 187], "yield": [4, 15, 17, 18, 19, 20, 21, 23, 25, 26, 34, 45, 54, 55, 59, 60, 110, 117, 119, 120, 141, 177, 192, 196, 202, 204], "inaccess": 4, "procedur": [4, 176, 202, 207], "ident": [4, 9, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 173, 187, 196, 198], "emb": [4, 5, 9, 11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 117, 120, 139, 172, 184, 186, 188, 189, 194, 201, 211], "plot_embed": [4, 14, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 197, 206, 208], "box": [4, 10, 184], "There": [4, 9, 11, 174, 182, 186, 202, 209, 210], "two": [4, 7, 9, 15, 17, 18, 19, 20, 21, 23, 30, 55, 57, 59, 60, 110, 117, 120, 129, 140, 153, 174, 177, 182, 184, 191, 194, 198, 199, 202, 208], "wai": [4, 7, 15, 17, 18, 19, 20, 21, 23, 49, 55, 59, 60, 110, 174, 177, 180, 182, 184, 187, 194, 195, 198, 200, 202, 205, 207, 208], "initi": [4, 9, 15, 17, 18, 19, 20, 21, 23, 50, 55, 59, 60, 105, 106, 110, 117, 187], "4477814032": 4, "alia": [4, 57, 69, 105, 106, 110], "choos": [4, 142, 201, 204], "style": [4, 42, 119, 173, 208], "Of": [4, 194, 207], "explicit": 4, "nest": [4, 9, 10, 15, 17, 18, 19, 20, 21, 23, 37, 54, 55, 59, 60, 110, 112, 113, 117, 120, 132, 144, 172, 175, 176, 182, 184, 186, 188, 190, 193, 198, 199, 200, 207, 208, 210, 211], "modal": [4, 13, 15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110, 117, 118, 120, 134, 142, 143, 172, 182, 186, 187, 190, 192, 195, 199, 204, 205, 210, 212, 213], "load": [4, 9, 14, 15, 17, 18, 19, 20, 21, 23, 25, 35, 36, 37, 38, 39, 41, 44, 55, 59, 60, 62, 66, 68, 71, 110, 117, 119, 120, 130, 139, 169, 172, 173, 174, 176, 183, 185, 192, 197, 202, 204, 210], "former": [4, 181, 192], "sqliteconfig": [4, 13, 14, 18, 60, 61, 100, 101], "cfg": 4, "test": [4, 5, 6, 7, 11, 116, 169, 181, 182, 185, 198, 202, 209, 211], "flexibl": [4, 181], "error": [4, 198, 207], "prone": 4, "placehold": 4, "prototyp": [4, 10, 208], "product": [4, 5, 10, 204, 208, 210], "unnecessarili": 4, "relev": [4, 5, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 151, 198, 212, 213], "milvu": [4, 13, 14, 18, 61], "choic": [4, 15, 17, 18, 19, 20, 21, 23, 26, 45, 55, 59, 60, 110], "scale": [4, 117, 120, 129, 210], "eas": 4, "setup": 4, "million": [4, 11, 117, 120, 129, 192, 201, 204], "benchmark": [4, 7, 201, 204, 210], "exact": [4, 21, 60, 198], "scan": [4, 14, 55, 61, 88, 91, 171, 196], "avail": [4, 9, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 70, 110, 144, 169, 202, 209], "explan": [4, 9, 203], "consider": [4, 9], "think": [4, 182, 195], "program": [4, 170, 202], "view": [4, 117, 120, 129, 171, 178], "sync": [4, 14, 15, 17, 19, 20, 21, 55, 59, 60, 61, 62, 65, 68, 70, 73, 76, 78, 81, 88, 91, 94, 97, 100, 102, 105, 108, 110], "da1": [4, 8, 60, 196, 201], "my_index": 4, "len": [4, 176, 182, 192, 198, 202, 204, 206, 207, 210], "execut": [4, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 62, 66, 110, 197, 198], "script": 4, "line": [4, 40, 119, 170, 171, 176, 182], "fresh": 4, "increment": 4, "seem": [4, 184, 210], "happen": [4, 202], "sinc": [4, 9, 117, 120, 129, 142, 144, 173, 174, 198, 206, 210], "scope": [4, 10, 190, 212, 213], "exit": [4, 5, 9, 117, 120, 141, 177], "destroi": 4, "But": [4, 171, 184, 186, 192, 194, 201], "had": [4, 176, 210], "occur": [4, 151], "correctli": [4, 11, 198, 208], "prove": 4, "yourself": [4, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 186, 202], "comment": 4, "third": 4, "explor": [4, 173], "predict": [4, 198], "manner": 4, "another_index": 4, "hurrai": 4, "problem": [4, 11, 171, 201, 202, 207], "point": [4, 5, 6, 117, 120, 129, 130, 132, 172, 179, 182, 186, 189, 198, 206, 208], "temp3": 4, "text": [4, 5, 6, 9, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 26, 31, 42, 45, 55, 57, 59, 60, 73, 74, 75, 88, 89, 94, 95, 96, 110, 116, 117, 118, 119, 120, 123, 125, 127, 134, 142, 143, 172, 174, 181, 182, 184, 186, 187, 188, 189, 190, 192, 194, 196, 197, 198, 199, 203, 204, 205, 207, 210, 211, 212, 213], "hello": [4, 15, 17, 18, 19, 20, 21, 23, 47, 55, 57, 59, 60, 110, 117, 120, 139, 170, 174, 175, 176, 182, 186, 187, 192, 194, 196, 203, 204, 205, 207, 210], "realli": [4, 182, 192], "date": 4, "sens": [4, 9, 117, 120, 129, 198], "speak": 4, "alreadi": [4, 15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110, 178, 195, 198, 200, 206, 209], "written": [4, 15, 17, 18, 19, 20, 21, 23, 28, 30, 55, 59, 60, 110, 117, 120, 139, 176, 203, 206], "snippet": [4, 10, 183, 184, 198, 204], "increas": [4, 144, 210], "simpli": [4, 9, 171, 173, 174, 176, 181, 182, 186, 189, 192, 194, 195, 197, 198, 200, 201, 204, 207], "put": [4, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 132, 171, 177, 181, 182, 184, 188, 210], "meta": [4, 184, 212, 213], "immedi": [4, 202], "costli": [4, 5], "consequ": 4, "block": [4, 11, 195, 198, 202, 210], "solv": [4, 5, 182, 184, 202], "refactor": [4, 169, 183, 210], "temp4": 4, "correct": [4, 192, 198, 204], "home": 4, "messag": [4, 15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110, 117, 120, 135, 187, 192, 196, 204], "write": [4, 175, 198, 201, 211], "row": [4, 5, 15, 17, 18, 19, 20, 21, 23, 24, 55, 59, 60, 110, 146, 147, 149, 150, 152, 153, 175, 182, 201, 210], "any_store_beyond_in_memori": 4, "d": [4, 5, 6, 11, 117, 120, 132, 140, 144, 172, 181, 182, 183, 186, 187, 188, 189, 191, 192, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 207, 210, 212, 213], "slice": [4, 15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110, 195], "NOT": [4, 57, 117, 120, 129], "chang": [4, 7, 15, 17, 18, 19, 20, 21, 23, 49, 55, 59, 60, 110, 142, 171, 178, 184, 185, 187, 192, 196, 198, 205, 210], "selector": [4, 169, 181, 182, 183, 195], "offset": [4, 13, 66, 117, 118, 120, 125, 134, 142, 143, 190, 192, 195, 204, 212, 213], "along": [4, 15, 17, 18, 19, 20, 21, 23, 24, 26, 31, 34, 55, 59, 60, 73, 75, 94, 96, 110], "concurr": 4, "besid": [4, 7, 175, 199, 210], "cost": 4, "d1": [4, 117, 186, 187, 188, 193, 196], "d2": [4, 117, 187, 188, 193], "d3": [4, 117, 187, 188, 193], "obvious": 4, "disk": [4, 9, 11, 15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110, 169, 200], "concern": 4, "overwhelm": 4, "affect": [4, 169], "On": [4, 9, 197, 208], "bright": 4, "modern": [4, 192, 207, 211], "highli": [4, 171, 184, 192, 204, 210], "moreov": [4, 204], "resolv": [4, 10, 175], "activ": [4, 188, 197, 210], "continu": [4, 182, 184, 194, 195, 204], "pymilvu": 5, "etcd": 5, "container_nam": 5, "quai": 5, "io": [5, 13, 14, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 154, 169, 170, 183, 184, 186, 192, 202, 209, 210, 211], "coreo": 5, "etcd_auto_compaction_mod": 5, "revis": [5, 210], "etcd_auto_compaction_retent": 5, "etcd_quota_backend_byt": 5, "4294967296": 5, "etcd_snapshot_count": 5, "50000": 5, "volum": 5, "docker_volume_directori": 5, "command": [5, 9, 59, 94, 95, 170], "advertis": 5, "url": [5, 10, 144, 190, 209, 212, 213], "127": [5, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "2379": 5, "listen": 5, "dir": 5, "minio": 5, "releas": [5, 169, 210], "2022": [5, 178, 204, 209], "17t06": 5, "49z": 5, "minio_access_kei": 5, "minioadmin": 5, "minio_secret_kei": 5, "minio_data": 5, "healthcheck": 5, "cmd": 5, "curl": [5, 209], "9000": 5, "health": 5, "interv": 5, "timeout": [5, 9, 117, 120, 123, 129, 140], "retri": 5, "standalon": 5, "milvusdb": 5, "v2": [5, 202], "etcd_endpoint": 5, "minio_address": 5, "var": [5, 9], "lib": [5, 9], "19530": 5, "9091": 5, "depends_on": 5, "guidanc": 5, "collection_nam": [5, 6, 14, 55, 61, 88, 89, 90, 91, 93], "6333": [5, 6, 55, 88, 89], "ip": [5, 7], "jaccard": [5, 15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110, 176], "tanimoto": 5, "ham": [5, 7, 15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "superstructur": 5, "substructur": 5, "inner": [5, 70, 181], "index_typ": 5, "flat": [5, 7, 9, 195], "variant": 5, "ivf": 5, "rhnsw": 5, "index_param": 5, "efconstruct": 5, "collection_config": 5, "serial": [5, 6, 8, 9, 15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110, 117, 120, 133, 144, 175, 200, 202, 207, 209, 210, 211], "consistency_level": 5, "session": 5, "strong": 5, "bound": [5, 9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 116, 177, 185, 202], "eventu": 5, "datbas": 5, "taken": 5, "download": [5, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 117, 120, 123, 144, 171, 178, 188, 204, 209], "wget": 5, "github": [5, 57], "com": [5, 57, 209], "o": [5, 11, 176, 184, 195], "launch": 5, "init": [5, 6, 116, 182, 204], "4917906896": [5, 6], "express": [5, 57, 182, 184, 186, 190, 194, 196, 199, 211], "ndocumentarrai": [5, 6, 204], "suppos": [5, 6, 174], "npoint": [5, 6], "main": [5, 174, 198, 207], "current": [5, 7, 15, 17, 18, 19, 20, 21, 23, 49, 55, 59, 60, 110, 117, 120, 129, 139, 153], "intial": 5, "rand": [5, 197, 205], "send": [5, 15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 110, 117, 120, 139, 183, 192, 202, 207], "abil": [5, 204], "param": [5, 9, 15, 17, 18, 19, 20, 21, 23, 43, 49, 55, 57, 59, 60, 110, 117, 120, 132, 144, 146, 147, 153], "mixin": [5, 13, 14, 80, 117, 162], "metric_typ": 5, "nprobe": 5, "entir": [5, 9, 174], "awar": [5, 169, 209], "especi": [5, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 174, 176, 198, 202, 208], "mitig": 5, "context": [5, 194, 210], "manag": [5, 179, 180, 204, 209], "whenev": [5, 6, 70], "onc": [5, 15, 17, 18, 19, 20, 21, 23, 30, 49, 54, 55, 59, 60, 110, 117, 120, 141, 176, 178, 188, 192, 195, 201, 205], "small": [5, 7, 9, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 117, 120, 127, 147, 149, 150, 152, 172, 176, 195, 204], "leav": [5, 15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110], "loaded_collect": 5, "drop": [5, 9, 62, 66, 187], "replac": [5, 15, 17, 18, 19, 20, 21, 23, 50, 55, 59, 60, 110, 182], "incur": 5, "signific": [5, 202], "penalti": 5, "bad": 5, "suitabl": [5, 173], "workaround": 5, "comput": [5, 9, 15, 17, 18, 19, 20, 21, 23, 28, 30, 44, 55, 59, 60, 110, 117, 120, 129, 139, 146, 149, 150, 176, 190, 195, 200, 201, 204, 207, 210, 212, 213], "why": [5, 184, 192, 208, 211], "base64": [5, 117, 120, 123, 125, 133, 140, 186, 211], "represent": [5, 17, 142, 162, 164, 169, 172, 184, 187, 188, 197, 204, 210, 212, 213], "varchar": 5, "impos": 5, "entri": [5, 117, 120, 140, 152, 179], "exce": [5, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110], "team": 5, "columm": 5, "could": [5, 10, 15, 17, 18, 19, 20, 21, 23, 38, 43, 55, 59, 60, 110, 119, 171, 174, 190, 202, 212, 213], "futur": 5, "v0": [6, 15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 110, 117, 120, 139, 203], "6334": [6, 55, 88, 89], "ulimit": 6, "collect": [6, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 132, 171, 184, 198], "nofil": 6, "soft": 6, "65535": 6, "hard": [6, 171], "grpc_port": [6, 14, 55, 61, 88, 89], "prefer_grpc": [6, 14, 55, 61, 88, 89], "gprc": 6, "authent": [6, 196], "cloud": [6, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 117, 120, 130, 132, 144, 172, 178, 180, 182, 189, 208, 209, 210, 211], "ssl": [6, 7], "protocol": [6, 9, 11, 14, 15, 17, 18, 19, 20, 21, 23, 25, 26, 36, 41, 55, 59, 60, 61, 105, 106, 110, 117, 120, 133, 144, 159, 161, 169, 192, 202, 203, 204, 210], "scroll_batch_s": [6, 14, 55, 61, 88, 89, 91], "scroll": 6, "larger": [6, 15, 17, 18, 19, 20, 21, 23, 41, 55, 59, 60, 110, 117, 120, 127], "accur": [6, 9, 174], "full_scan_threshold": [6, 14, 55, 61, 88, 89], "kilobyt": 6, "payload": 6, "edg": [6, 9], "graph": [6, 7, 9, 153], "space": [6, 146, 173, 195], "geo": [6, 7, 55, 59, 88, 89, 94, 95], "search_param": 6, "hnsw_ef": 6, "distance_metr": 6, "_similar": 6, "euclidean_similar": 6, "redislab": 7, "redisearch": 7, "6379": [7, 59, 94, 95], "previuosli": 7, "idx": [7, 71, 177], "documentarrayredi": [7, 13, 14, 59, 97], "update_schema": [7, 14, 59, 61, 94, 95], "redis_config": [7, 14, 59, 61, 94, 95], "ef_runtim": [7, 14, 59, 61, 94, 95], "block_siz": [7, 14, 59, 61, 94, 95], "1048576": 7, "initial_cap": [7, 14, 59, 61, 94, 95], "socket_timeout": 7, "redissearch": 7, "syntax": [7, 139, 169, 181, 182, 183, 189, 195, 203, 210], "color": [7, 11, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 129, 132, 171], "stock": 7, "blue": 7, "red": [7, 116, 195], "inf": 7, "192": [7, 15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 110, 117, 120, 139, 203], "integ": [7, 15, 16, 17, 18, 19, 20, 21, 55, 59, 60, 62, 67, 72, 73, 74, 77, 78, 82, 88, 89, 93, 94, 95, 98, 100, 104, 105, 109, 110, 117, 120, 140, 176, 195, 212, 213], "treat": [7, 117, 120, 122], "With": [7, 9, 15, 21, 55, 60, 110, 173, 174, 176, 196, 202], "geospati": 7, "max_dist": 7, "earth": 7, "coordin": [7, 190, 212, 213], "km": 7, "brute": [7, 9], "forc": [7, 9, 15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110, 117, 120, 135, 144], "robust": 7, "hierarch": 7, "navig": 7, "world": [7, 174, 175, 176, 182, 184, 186, 187, 192, 194, 196, 204, 205, 207, 211], "configuratoin": 7, "96046447754e": 7, "token1": 7, "token2": 7, "token3": 7, "token4": 7, "rank": [7, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 151, 198], "bm25": 7, "tfidf": 7, "docnorm": 7, "dismax": 7, "docscor": 7, "scorer": 7, "reconnect": 8, "mine": [8, 60], "filenam": [8, 15, 17, 18, 19, 20, 21, 23, 25, 36, 37, 38, 41, 55, 59, 60, 110, 117, 119, 120, 123, 126, 129, 144, 196, 204], "sqlite3": 8, "pragma": 8, "journal": [8, 174, 199], "mode": [8, 119, 144, 176], "video": [9, 117, 120, 172, 182, 186, 189, 190, 208, 209, 210, 211, 212, 213], "tutori": [9, 10], "guid": [9, 12, 15, 18, 21, 55, 60, 110, 117, 169], "8080": [9, 15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 105, 106, 110, 117, 120, 139], "scheme": [9, 190, 212, 213], "semitechnologi": 9, "restart": 9, "failur": 9, "query_defaults_limit": 9, "authentication_anonymous_access_en": 9, "persistence_data_path": 9, "default_vectorizer_modul": 9, "enable_modul": 9, "cluster_hostnam": 9, "node1": 9, "capit": 9, "1234": [9, 110, 197], "preses": 9, "squar": [9, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 147, 149, 150, 181], "chosen": [9, 144, 201], "becom": [9, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 195], "tradeoff": 9, "timeout_config": [9, 14, 61, 105, 106, 110], "request": [9, 15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 110, 117, 120, 139, 202, 204, 209, 211], "dynamic_ef_min": [9, 14, 61, 105, 106, 110], "act": 9, "boundari": 9, "enough": [9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 198, 210], "suggest": [9, 202], "never": [9, 192], "dynamic_ef_max": [9, 14, 61, 105, 106, 110], "cap": 9, "massiv": 9, "dynamic_ef_factor": [9, 14, 61, 105, 106, 110], "determin": [9, 15, 17, 18, 19, 20, 21, 23, 30, 54, 55, 59, 60, 110, 117, 120, 129, 141, 144, 151, 177, 182, 198], "factor": 9, "vector_cache_max_object": [9, 14, 61, 105, 106, 110], "held": 9, "2m": 9, "lookup": [9, 14, 56, 58], "magnitud": 9, "cach": [9, 144], "sparingli": 9, "flat_search_cutoff": [9, 14, 61, 105, 106, 110], "absolut": 9, "threshold": 9, "cutoff": 9, "bypass": 9, "40000": 9, "turn": [9, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110], "cleanup_interval_second": [9, 14, 61, 105, 106, 110], "async": [9, 207], "repair": 9, "prior": 9, "cleanup": 9, "mark": [9, 15, 17, 18, 19, 20, 21, 23, 31, 44, 55, 59, 60, 73, 75, 94, 96, 110, 117, 120, 139, 176], "reassign": 9, "datapoint": 9, "typic": [9, 57], "adjust": 9, "down": [9, 209], "clean": [9, 207], "skip": [9, 14, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 61, 105, 106, 110, 117, 120, 132], "situat": 9, "doesn": [9, 171], "meant": 9, "glue": 9, "duplic": [9, 142], "candid": 9, "worst": 9, "earli": [9, 195, 208], "met": 9, "normal": [9, 15, 17, 18, 19, 20, 21, 23, 30, 44, 55, 59, 60, 110, 117, 120, 129, 132, 139, 151, 152, 171, 189, 202], "immut": 9, "And": [9, 57, 176, 199, 207], "fast": [9, 10, 15, 18, 55, 110, 210, 211], "bert": 9, "transform": 9, "automodel": 9, "autotoken": 9, "token": [9, 15, 17, 18, 19, 20, 21, 23, 53, 55, 59, 60, 110, 144, 176, 180, 183, 204], "from_pretrain": 9, "uncas": 9, "collate_fn": [9, 15, 17, 18, 19, 20, 21, 23, 28, 30, 55, 59, 60, 110], "return_tensor": 9, "pt": 9, "truncat": 9, "pad": [9, 15, 17, 18, 19, 20, 21, 23, 53, 55, 59, 60, 110, 117, 120, 129, 140, 176, 195], "path": [9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 36, 46, 54, 55, 59, 60, 110, 117, 119, 120, 132, 142, 144, 182, 190, 194, 195, 196, 203, 205, 212, 213], "lessthanequ": 9, "valuenumb": 9, "lowerthanequ": 9, "valueint": 9, "upgrad": 9, "primit": [9, 112, 113, 182], "natur": [9, 169, 186, 194, 196], "highest": 9, "lowest": 9, "dummi": [9, 10], "word": [9, 15, 17, 18, 19, 20, 21, 23, 53, 55, 59, 60, 110, 117, 120, 140, 169, 176, 184, 195, 205, 210], "desc": 9, "asc": 9, "ascend": 9, "nearvector": 9, "combin": [9, 172, 190, 204], "sometim": [9, 117, 120, 123, 125, 140, 176], "query_param": 9, "bodi": [9, 173, 207], "familiar": [9, 174, 181, 184, 206, 210], "graphql": [9, 209, 211], "goe": 9, "36840257": 9, "13973749": 9, "28994447": 9, "_addit": 9, "said": [9, 202], "theoret": 9, "anyth": [9, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 200, 201], "weaviate_certainti": 9, "someth": [9, 188], "5762787e": 9, "attach": [9, 117, 120, 141, 206], "featureproject": 9, "classif": 9, "core": [9, 11, 202, 207, 209, 210], "page": [9, 171, 174, 178, 186], "text2vec": 9, "contextionari": 9, "respons": [9, 10, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 202, 211], "creationtimeunix": 9, "lastupdatetimeunix": 9, "tags__creationtimeunix": 9, "tags__lastupdatetimeunix": 9, "1656020204563": 9, "exactli": [10, 182, 198], "too": [10, 171, 195, 196, 198, 200, 201, 207, 210], "verbos": 10, "rest": [10, 192, 202, 204, 207, 210], "stabl": [10, 117, 120, 141], "app": [10, 207, 211], "endpoint": [10, 15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 110, 117, 120, 139, 203, 207], "schema": [10, 15, 17, 18, 19, 20, 21, 23, 48, 55, 59, 60, 62, 66, 105, 106, 110, 117, 120, 136, 142, 169, 185, 190, 192, 211], "strawberri": [10, 14, 15, 17, 18, 19, 20, 21, 23, 55, 59, 60, 110, 117, 120, 209, 211], "debug": [10, 144, 208], "articl": [10, 181, 182, 184, 209], "serv": [10, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 188], "introduct": [10, 169], "background": [10, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110], "stronli": 10, "confus": [10, 169], "matcharrai": [10, 13, 14, 15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110, 117, 120, 134, 194, 195, 198], "rememb": [10, 176, 181, 204], "fetch": [10, 186], "strawberry_typ": [10, 13, 117], "strawberrydocu": [10, 13, 15, 17, 18, 19, 20, 21, 23, 52, 55, 59, 60, 110, 117, 120, 138, 143], "lambda": [10, 116, 174, 176, 182, 183, 185, 198], "to_strawberry_typ": [10, 13, 14, 15, 17, 18, 19, 20, 21, 23, 52, 55, 59, 60, 110, 117, 120, 138], "notic": [10, 57, 199], "preprocess": [10, 11, 171, 183, 189, 202, 204], "toi": [10, 170, 175, 177], "py": [10, 119], "consol": [10, 204, 208], "8000": 10, "browser": [10, 180], "graphiql": 10, "playground": 10, "beyond": [10, 208], "decid": [10, 117, 120, 132], "perfect": [10, 183, 211], "short": [10, 169, 176], "wrap": [10, 70, 117, 120, 131, 144, 182, 187], "asgi": 10, "graphql_app": 10, "add_rout": 10, "add_websocket_rout": 10, "tensorflow": [11, 145, 146, 186, 188, 190, 194, 197, 201, 210, 211], "paddlepaddl": [11, 186, 188, 190, 194, 197, 210, 211], "tensor": [11, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 28, 30, 46, 55, 59, 60, 110, 117, 118, 120, 122, 125, 129, 130, 132, 134, 140, 141, 142, 143, 149, 150, 153, 169, 170, 171, 173, 174, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 197, 201, 202, 204, 208, 209, 210, 211, 212, 213], "spars": [11, 15, 17, 18, 19, 20, 21, 23, 30, 44, 55, 59, 60, 110, 117, 120, 127, 139, 146, 147, 153, 186, 188, 190, 194, 201, 209, 211, 212, 213], "dens": [11, 117, 120, 127, 153, 171, 186, 188, 190, 192, 194, 197, 201, 212, 213], "pickl": [11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 36, 45, 55, 59, 60, 110, 117, 120, 133, 169, 192], "protobuf": [11, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 36, 41, 55, 59, 60, 110, 111, 117, 119, 120, 133, 144, 162, 169, 187, 196, 202, 209, 210, 211, 212], "compress": [11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 36, 55, 59, 60, 110, 117, 120, 133, 144, 192, 202, 204, 209, 210, 211], "transit": [11, 210, 211], "preserv": [11, 15, 17, 18, 19, 20, 21, 23, 26, 34, 46, 55, 59, 60, 110, 117, 120, 122, 195], "paddl": [11, 15, 17, 18, 19, 20, 21, 23, 28, 30, 55, 59, 60, 110, 117, 120, 139, 145, 146, 197, 201], "torch": [11, 28, 145, 146, 153, 174, 181, 183, 188, 197, 201, 209, 210, 211], "to_spars": 11, "to_tensor": 11, "save_binari": [11, 14, 15, 17, 18, 19, 20, 21, 23, 35, 36, 41, 55, 59, 60, 110, 204], "gz": [11, 119], "again": [11, 198, 204, 207], "load_binari": [11, 14, 15, 17, 18, 19, 20, 21, 23, 35, 36, 55, 59, 60, 110, 169, 204], "engin": [11, 19, 55, 59, 110, 182, 192, 207, 210, 211], "gpu": [11, 195, 197, 203, 204, 210, 211], "intens": [11, 210], "stuff": 11, "mani": [11, 15, 17, 18, 19, 20, 21, 23, 49, 55, 59, 60, 110, 117, 120, 129, 171, 184, 204, 207, 208, 210], "pitfal": 11, "few": [11, 184], "util": [11, 15, 17, 18, 19, 20, 21, 23, 38, 55, 59, 60, 110], "drain": [11, 202], "dataload": [11, 14, 15, 17, 18, 19, 20, 21, 23, 55, 59, 60, 110], "figur": [11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 46, 55, 59, 60, 110, 183, 204, 210], "illustr": [11, 183, 191], "14gb": 11, "cpu_job": [11, 202], "sleep": [11, 202], "job": [11, 202], "gpu_job": [11, 202], "func": [11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 45, 55, 59, 60, 79, 110, 144, 202], "num_work": [11, 15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 44, 45, 55, 59, 60, 110, 117, 120, 139, 202], "donecpu": 11, "section": [12, 178, 182, 184, 187, 198, 200, 202, 204, 207, 209, 210], "codebas": [12, 183, 204, 210], "extract": [12, 117, 120, 129, 144, 170, 172], "docstr": 12, "queryset": [13, 14], "annliteconfig": [13, 14, 15, 18, 61, 62, 63], "documentarrayannlit": [13, 14, 15, 205], "chunkarrai": [13, 14, 15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110, 117, 120, 134, 171, 194, 195, 205], "elast": [13, 14, 61], "documentarrayelast": [13, 14, 19, 76], "elasticconfig": [13, 14, 18, 19, 61, 73, 74], "documentarrayqdr": [13, 14, 55], "qdrantconfig": [13, 14, 55, 61, 88, 89], "redisconfig": [13, 14, 18, 59, 61, 94, 95], "documentarrayweavi": [13, 14, 105, 106, 108, 110], "weaviateconfig": [13, 14, 18, 61, 105, 106, 110], "enum": [13, 112], "documentmetadata": [13, 112, 113], "attributetyp": [13, 112, 113], "imagetyp": [13, 112, 113], "getter": [13, 24, 32, 112, 116, 183, 185, 186], "image_gett": [13, 112, 114, 116], "text_gett": [13, 112, 114, 116], "uri_gett": [13, 112, 114], "audio_gett": [13, 112, 114], "video_gett": [13, 112, 114], "mesh_gett": [13, 112, 114], "tabular_gett": [13, 112, 114], "blob_gett": [13, 112, 114], "json_gett": [13, 112, 114], "setter": [13, 24, 112, 116, 183, 185, 186], "image_sett": [13, 112, 115, 116], "text_sett": [13, 112, 115, 116], "uri_sett": [13, 112, 115], "audio_sett": [13, 112, 115], "video_sett": [13, 112, 115], "mesh_sett": [13, 112, 115], "blob_sett": [13, 112, 115], "json_sett": [13, 112, 115], "tabular_sett": [13, 112, 115], "is_multimod": [13, 112, 116, 117, 120, 131, 182], "documentdata": [13, 117, 118], "from_ndarrai": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 40, 55, 59, 60, 110, 117, 119], "from_fil": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 40, 55, 59, 60, 110, 117, 119, 171, 196, 202, 206], "from_csv": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 40, 55, 59, 60, 110, 117, 119, 175], "from_huggingface_dataset": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 40, 55, 59, 60, 110, 117, 119], "from_ndjson": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 40, 55, 59, 60, 110, 117, 119], "from_lin": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 40, 55, 59, 60, 110, 117, 119], "pydantic_model": [13, 117, 207], "pydanticdocu": [13, 15, 17, 18, 19, 20, 21, 23, 48, 55, 59, 60, 110, 117, 120, 136, 142, 207], "strawberrydocumentinput": [13, 117, 143], "adjac": [13, 14, 15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110, 117, 118, 120, 134, 142, 143, 187, 188, 190, 191, 192, 193, 195, 198, 204, 212, 213], "blob": [13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 55, 59, 60, 110, 117, 118, 120, 125, 129, 134, 142, 143, 169, 182, 185, 186, 187, 188, 189, 190, 192, 194, 204, 212, 213], "clear": [13, 14, 15, 16, 17, 18, 19, 20, 21, 55, 59, 60, 61, 62, 66, 67, 68, 71, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 111, 117, 162, 186, 191], "content_hash": [13, 117, 120, 124], "content_typ": [13, 117, 120, 134, 142, 186], "convert_blob_to_datauri": [13, 117, 120, 123, 189], "convert_blob_to_image_tensor": [13, 117, 120, 129, 189], "convert_blob_to_tensor": [13, 117, 120, 125, 189], "convert_content_to_datauri": [13, 117, 120, 124, 189], "convert_image_tensor_to_blob": [13, 117, 120, 129, 189], "convert_image_tensor_to_sliding_window": [13, 117, 120, 129, 171, 189], "convert_image_tensor_to_uri": [13, 117, 120, 129, 189], "convert_tensor_to_blob": [13, 117, 120, 125, 189], "convert_tensor_to_text": [13, 117, 120, 140, 176, 189], "convert_text_to_datauri": [13, 117, 120, 140, 189], "convert_text_to_tensor": [13, 117, 120, 140, 176, 189], "convert_uri_to_datauri": [13, 117, 120, 125, 186, 189], "copy_from": [13, 111, 117, 162, 187], "displai": [13, 117, 120, 132, 172, 173, 193], "display_point_cloud_tensor": [13, 117, 120, 132], "display_rgbd_tensor": [13, 117, 120, 132], "display_tensor": [13, 117, 120, 132], "display_uri": [13, 117, 120, 132], "display_vertices_and_fac": [13, 117, 120, 132], "embed_feature_hash": [13, 18, 21, 117, 120, 127, 174, 176, 189], "from_base64": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 36, 55, 59, 60, 110, 117, 120, 133, 189, 192, 204], "from_byt": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 36, 55, 59, 60, 110, 117, 120, 133, 169, 189, 192, 204], "from_dict": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 39, 41, 55, 59, 60, 110, 117, 120, 133, 169, 189, 192], "from_json": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 41, 55, 59, 60, 110, 117, 120, 133, 169, 189, 192, 204, 207], "from_protobuf": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 36, 55, 59, 60, 110, 117, 120, 135, 189, 192, 204], "from_pydantic_model": [13, 14, 15, 17, 18, 19, 20, 21, 23, 48, 55, 59, 60, 110, 117, 120, 136, 189, 204, 207], "from_strawberry_typ": [13, 14, 15, 17, 18, 19, 20, 21, 23, 52, 55, 59, 60, 110, 117, 120, 138, 189], "generator_from_webcam": [13, 117, 120, 141, 177], "get_json_schema": [13, 14, 15, 17, 18, 19, 20, 21, 23, 48, 55, 59, 60, 110, 117, 120, 136, 207], "get_multi_modal_attribut": [13, 117, 120, 131], "get_vocabulari": [13, 14, 15, 17, 18, 19, 20, 21, 23, 53, 55, 59, 60, 110, 117, 120, 140, 176], "granular": [13, 14, 15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110, 117, 118, 120, 134, 142, 143, 171, 173, 174, 176, 181, 182, 185, 187, 190, 191, 192, 193, 195, 204, 212, 213], "load_pil_image_to_datauri": [13, 117, 120, 129], "load_uri_to_audio_tensor": [13, 117, 120, 122, 170, 189], "load_uri_to_blob": [13, 116, 117, 120, 123, 185, 189], "load_uri_to_image_tensor": [13, 117, 120, 129, 171, 186, 188, 189, 202, 205], "load_uri_to_point_cloud_tensor": [13, 117, 120, 130, 173, 189], "load_uri_to_text": [13, 117, 120, 140, 176, 186, 189], "load_uri_to_vertices_and_fac": [13, 117, 120, 130, 173], "load_uri_to_video_tensor": [13, 117, 120, 141, 177, 189], "load_uris_to_rgbd_tensor": [13, 117, 120, 130, 173], "load_vertices_and_faces_to_point_cloud": [13, 117, 120, 130], "mime_typ": [13, 117, 118, 120, 134, 142, 143, 171, 174, 176, 181, 182, 185, 186, 187, 190, 192, 194, 196, 203, 204, 212, 213], "nbyte": [13, 111, 117, 162], "non_empty_field": [13, 111, 117, 162, 186], "parent_id": [13, 117, 118, 120, 134, 142, 143, 171, 173, 174, 176, 181, 182, 185, 187, 190, 191, 192, 193, 195, 204, 205, 212, 213], "plot_matches_sprit": [13, 117, 120, 132, 206], "pop": [13, 14, 15, 16, 17, 18, 19, 20, 21, 55, 59, 60, 61, 62, 67, 68, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 111, 117, 162, 186], "post": [13, 14, 15, 17, 18, 19, 20, 21, 23, 55, 59, 60, 110, 117, 120, 139, 181, 184, 202, 203, 207], "save_audio_tensor_to_fil": [13, 117, 120, 122, 170, 189], "save_blob_to_fil": [13, 117, 120, 123, 189], "save_image_tensor_to_fil": [13, 117, 120, 129, 171, 177, 189], "save_uri_to_fil": [13, 117, 120, 126, 189], "save_video_tensor_to_fil": [13, 117, 120, 141, 177, 189], "set_image_tensor_channel_axi": [13, 117, 120, 129, 171, 174, 188, 189, 202], "set_image_tensor_inv_norm": [13, 117, 120, 129, 189], "set_image_tensor_norm": [13, 117, 120, 129, 171, 174, 188, 189, 202], "set_image_tensor_resampl": [13, 117, 120, 129], "set_image_tensor_shap": [13, 117, 120, 129, 171, 174, 189], "set_multi_modal_attribut": [13, 117, 120, 131], "to_base64": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 36, 55, 59, 60, 110, 117, 120, 133, 192, 204], "to_byt": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 36, 55, 59, 60, 110, 117, 120, 133, 169, 192, 204], "to_dict": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 41, 55, 59, 60, 110, 117, 120, 133, 162, 164, 166, 169, 192, 199, 204], "to_json": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 41, 55, 59, 60, 110, 117, 120, 133, 169, 192, 204, 207], "to_protobuf": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 36, 55, 59, 60, 110, 117, 120, 135, 192, 204], "to_pydantic_model": [13, 14, 15, 17, 18, 19, 20, 21, 23, 48, 55, 59, 60, 110, 117, 120, 136, 204, 207], "uri": [13, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 112, 113, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 129, 130, 132, 134, 140, 141, 142, 143, 170, 171, 173, 174, 176, 177, 181, 182, 183, 184, 185, 187, 188, 189, 190, 192, 193, 196, 202, 203, 204, 205, 208, 212, 213], "weight": [13, 117, 118, 120, 134, 142, 143, 151, 190, 192, 199, 204, 212, 213], "math": [13, 168, 202], "r_precis": [13, 145, 151, 198], "precision_at_k": [13, 145, 151, 198], "hit_at_k": [13, 145, 151, 198], "average_precis": [13, 145, 151, 198], "reciprocal_rank": [13, 145, 151, 198], "recall_at_k": [13, 145, 151, 198], "f1_score_at_k": [13, 145, 151, 198], "dcg_at_k": [13, 145, 151, 198], "ndcg_at_k": [13, 145, 151, 198], "helper": [13, 23, 24, 25, 28, 29, 32, 33, 34, 37, 38, 40, 45, 46, 47, 51, 61, 62, 68, 88, 100, 117, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 132, 136, 138, 140, 141, 145, 168, 176, 189], "minmax_norm": [13, 145, 152], "top_k": [13, 117, 120, 132, 145, 152, 206], "update_rows_x_mat_best": [13, 145, 152], "unravel": [13, 145, 153, 194], "ravel": [13, 145, 153], "get_array_typ": [13, 145, 153], "to_numpy_arrai": [13, 145, 153], "to_list": [13, 14, 15, 17, 18, 19, 20, 21, 23, 35, 41, 55, 59, 60, 110, 145, 153, 192, 204, 210], "get_array_row": [13, 145, 153], "check_arraylike_equ": [13, 145, 153], "detach_tensor_if_pres": [13, 145, 153], "proto": [13, 142, 168], "pb": [13, 154], "pb2": [13, 154], "docarray_pb2": [13, 154, 158, 160, 192], "namedscoredata": [13, 162, 163], "namedscor": [13, 117, 118, 120, 134, 162, 174, 190], "op_nam": [13, 162, 163, 164, 165, 212, 213], "ref_id": [13, 162, 163, 164, 165, 176, 212, 213], "basedctyp": [13, 111, 117, 162, 168], "typenam": [13, 144, 168], "deprecate_bi": [13, 144, 168], "dunder_get": [13, 144, 168], "random_ident": [13, 144, 168], "random_uuid": [13, 144, 168], "download_mermaid_url": [13, 144, 168], "get_full_vers": [13, 144, 168], "get_ci_vendor": [13, 144, 168], "reset_port": [13, 144, 168], "random_port": [13, 144, 168], "cached_properti": [13, 144, 168], "compress_byt": [13, 144, 168], "decompress_byt": [13, 144, 168], "get_compress_ctx": [13, 144, 168], "dataclass_from_dict": [13, 144, 168], "protocol_and_compress_from_file_path": [13, 144, 168], "add_protocol_and_compress_to_file_path": [13, 144, 168], "filter_dict": [13, 144, 168], "check_root_id": [13, 144, 168], "login": [13, 15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 144, 168], "logout": [13, 144, 168], "contentpropertymixin": [14, 23, 24, 117, 120, 124], "delitem": [14, 23, 65, 81, 102], "delitemmixin": [14, 23, 27], "embedmixin": [14, 23, 28], "get_framework": [14, 23, 28], "emptymixin": [14, 23, 29], "evaluationmixin": [14, 23, 30], "getattr": [14, 23], "getattributemixin": [14, 23, 32], "getitem": [14, 23, 65, 81, 102], "getitemmixin": [14, 23, 33], "groupmixin": [14, 23, 26, 34], "matchmixin": [14, 23, 44], "parallelmixin": [14, 23, 26, 45], "plot": [14, 15, 17, 18, 19, 20, 21, 23, 55, 59, 60, 110, 117, 120, 195, 208], "plotmixin": [14, 23, 46, 117, 120, 132], "postmixin": [14, 23, 47], "pydant": [14, 15, 17, 18, 19, 20, 21, 23, 52, 55, 59, 60, 110, 117, 120, 133, 192, 204], "pydanticmixin": [14, 23, 48, 117, 120, 136], "reduc": [14, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 198], "reducemixin": [14, 23, 49], "sampl": [14, 15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 117, 119, 120, 122, 130, 173, 182], "samplemixin": [14, 23, 50], "setitem": [14, 23, 65, 81, 102], "setitemmixin": [14, 23, 51], "strawberrymixin": [14, 23, 52, 117, 120, 138], "texttoolsmixin": [14, 23, 53], "travers": [14, 15, 17, 18, 19, 20, 21, 23, 26, 34, 55, 59, 60, 110, 191, 195, 210], "traversemixin": [14, 23, 54], "apply_batch": [14, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 202], "batch_id": [14, 15, 17, 18, 19, 20, 21, 23, 25, 26, 34, 55, 59, 60, 110], "cloud_delet": [14, 15, 17, 18, 19, 20, 21, 23, 35, 43, 55, 59, 60, 110, 178], "cloud_list": [14, 15, 17, 18, 19, 20, 21, 23, 35, 43, 55, 59, 60, 110, 178], "cloud_pul": [14, 15, 17, 18, 19, 20, 21, 23, 35, 43, 55, 59, 60, 110], "cloud_push": [14, 15, 17, 18, 19, 20, 21, 23, 35, 43, 55, 59, 60, 110], "embed_and_evalu": [14, 15, 17, 18, 19, 20, 21, 23, 28, 30, 44, 55, 59, 60, 110, 198], "flatten": [14, 15, 17, 18, 19, 20, 21, 23, 38, 54, 55, 59, 60, 110, 175, 194], "from_datafram": [14, 15, 17, 18, 19, 20, 21, 23, 35, 39, 55, 59, 60, 110, 204], "from_list": [14, 15, 17, 18, 19, 20, 21, 23, 35, 41, 55, 59, 60, 110, 204], "load_csv": [14, 15, 17, 18, 19, 20, 21, 23, 35, 38, 55, 59, 60, 110], "load_json": [14, 15, 17, 18, 19, 20, 21, 23, 35, 41, 55, 59, 60, 110], "map_batch": [14, 15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 195], "plot_image_sprit": [14, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 171, 177, 206], "pull": [14, 15, 17, 18, 19, 20, 21, 23, 35, 43, 55, 59, 60, 110, 179, 204, 209, 211], "push": [14, 15, 17, 18, 19, 20, 21, 23, 35, 43, 55, 59, 60, 110, 179, 202, 204, 209, 211], "reduce_al": [14, 15, 17, 18, 19, 20, 21, 23, 49, 55, 59, 60, 110], "save_csv": [14, 15, 17, 18, 19, 20, 21, 23, 35, 38, 55, 59, 60, 110, 175], "save_embeddings_csv": [14, 15, 17, 18, 19, 20, 21, 23, 35, 38, 55, 59, 60, 110], "save_gif": [14, 15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "save_json": [14, 15, 17, 18, 19, 20, 21, 23, 35, 36, 41, 55, 59, 60, 110], "shuffl": [14, 15, 17, 18, 19, 20, 21, 23, 26, 34, 40, 45, 50, 55, 59, 60, 110, 119, 198], "split_by_tag": [14, 15, 17, 18, 19, 20, 21, 23, 25, 26, 34, 55, 59, 60, 110, 195], "to_datafram": [14, 15, 17, 18, 19, 20, 21, 23, 35, 39, 55, 59, 60, 110, 204], "traverse_flat": [14, 15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110], "traverse_flat_per_path": [14, 15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110], "lookuptreeelem": [14, 56, 57], "lookupnod": [14, 56, 57], "lookupleaf": [14, 56, 57], "q": [14, 56, 57, 117, 176, 188, 192, 201, 204], "lookupyerror": [14, 56, 57], "dunder_partit": [14, 56, 57], "iff": [14, 56, 57], "iff_not_non": [14, 56, 57], "guard_typ": [14, 56, 57], "guard_str": [14, 56, 57], "guard_list": [14, 56, 57], "guard_q": [14, 56, 57], "guard_it": [14, 56, 57], "parser": [14, 56, 117, 120, 133], "querypars": [14, 56, 58], "registri": [14, 61], "type_map": [14, 15, 17, 19, 20, 21, 55, 59, 60, 61, 62, 63, 68, 69, 73, 74, 78, 79, 88, 89, 94, 95, 100, 101, 105, 106, 110], "count": [14, 15, 16, 17, 18, 19, 20, 21, 55, 59, 60, 61, 62, 67, 68, 69, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 117, 120, 125, 198], "revers": [14, 15, 16, 17, 18, 19, 20, 21, 55, 59, 60, 61, 62, 67, 68, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 170], "reference_doc": [14, 17, 20], "max_es_returned_doc": [14, 19, 61, 73, 76], "collection_name_meta": [14, 55, 61, 88], "serialization_config": [14, 55, 61, 88, 91], "schema_vers": [14, 60, 61, 100, 101, 103], "dynamic_batch": [14, 61, 105, 106, 110], "factori": [15, 19, 55, 59, 60, 62, 63, 73, 74, 88, 89, 94, 95, 100, 101, 105, 106, 110, 118], "tupl": [15, 17, 18, 19, 20, 21, 23, 30, 44, 46, 53, 55, 59, 60, 62, 63, 69, 73, 74, 88, 89, 94, 95, 105, 106, 110, 111, 117, 120, 127, 129, 139, 140, 141, 144, 152, 153, 162, 186, 188, 190, 194, 196], "typemap": [15, 17, 19, 20, 21, 55, 59, 60, 61, 62, 63, 68, 69, 73, 74, 78, 79, 88, 89, 94, 95, 100, 101, 105, 106, 110], "_safe_cast_int": [15, 19, 62, 63, 73, 74, 105, 106, 110], "modif": [15, 17, 18, 19, 20, 21, 23, 26, 45, 55, 59, 60, 110, 117, 120, 139, 202, 205], "thread": [15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 117, 120, 141, 210], "multi": [15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 54, 55, 59, 60, 110, 171, 172, 181, 187, 188, 190, 202, 207, 210, 212, 213], "yourselv": [15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110], "wish": [15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110], "place": [15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 45, 49, 55, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 117, 120, 123, 171, 184, 189, 202], "regardless": [15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 153, 195, 202], "multiprocess": [15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 117, 120, 141], "origin": [15, 17, 18, 19, 20, 21, 23, 25, 26, 28, 34, 45, 55, 57, 59, 60, 110, 117, 120, 129, 144, 176, 183, 185, 189, 190, 195, 196, 198, 212, 213], "share": [15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110, 184, 198, 204, 210], "worker": [15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 44, 45, 55, 59, 60, 110, 117, 120, 139], "system": [15, 17, 18, 19, 20, 21, 23, 25, 26, 38, 44, 45, 55, 59, 60, 110, 117, 119, 120, 139, 210, 212, 213], "pool": [15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110], "ignor": [15, 17, 18, 19, 20, 21, 23, 25, 26, 31, 45, 49, 55, 59, 60, 73, 75, 94, 96, 110, 182, 202, 203], "close": [15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 62, 66, 110, 198, 210], "show_progress": [15, 17, 18, 19, 20, 21, 23, 25, 26, 34, 43, 45, 46, 47, 55, 59, 60, 110, 117, 120, 139, 178, 203, 204], "progress": [15, 17, 18, 19, 20, 21, 23, 26, 34, 36, 43, 45, 46, 55, 59, 60, 110], "bar": [15, 17, 18, 19, 20, 21, 23, 26, 34, 36, 43, 45, 46, 55, 59, 60, 110, 117, 187], "mini": [15, 17, 18, 19, 20, 21, 23, 26, 28, 30, 45, 55, 59, 60, 110], "cake": [15, 17, 18, 19, 20, 21, 23, 26, 45, 55, 59, 60, 110], "lie": [15, 17, 18, 19, 20, 21, 23, 26, 45, 55, 59, 60, 110], "THE": [15, 17, 18, 19, 20, 21, 23, 26, 45, 55, 57, 59, 60, 110, 174], "except": [15, 17, 18, 19, 20, 21, 23, 25, 26, 34, 45, 55, 57, 59, 60, 110, 201], "divid": [15, 17, 18, 19, 20, 21, 23, 26, 34, 45, 55, 59, 60, 110], "minibatch": [15, 17, 18, 19, 20, 21, 23, 26, 34, 45, 55, 59, 60, 110, 202], "until": [15, 17, 18, 19, 20, 21, 23, 26, 34, 55, 59, 60, 110, 202], "traversal_path": [15, 17, 18, 19, 20, 21, 23, 26, 34, 54, 55, 59, 60, 110], "properti": [15, 17, 18, 19, 20, 21, 23, 24, 30, 49, 55, 59, 60, 66, 69, 88, 89, 90, 91, 93, 105, 106, 110, 111, 117, 120, 124, 131, 144, 162, 164, 182, 189, 207], "byte": [15, 17, 18, 19, 20, 21, 23, 24, 36, 55, 59, 60, 94, 95, 110, 111, 117, 118, 120, 122, 125, 133, 134, 144, 162, 182, 187, 190, 196, 210, 211, 212, 213], "static": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 210], "show_tabl": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 178], "classmethod": [15, 17, 18, 19, 20, 21, 23, 25, 29, 36, 37, 38, 39, 40, 41, 43, 48, 52, 55, 59, 60, 110, 117, 120, 133, 135, 136, 138, 141, 142], "local_cach": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 204], "upload": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 202, 204], "public": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 178], "brand": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110], "later": [15, 17, 18, 19, 20, 21, 23, 25, 26, 43, 45, 49, 55, 59, 60, 70, 110, 176, 185, 198], "kinda": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110], "clipboard": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110], "everyon": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110], "anyon": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 186], "surviv": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110], "complic": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 172, 184, 211], "lifetim": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 204], "atm": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110], "dai": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 210], "week": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110, 204], "temporari": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110], "transmiss": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110], "creator": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110], "icon": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110], "emoji": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110], "fff": [15, 17, 18, 19, 20, 21, 23, 43, 55, 59, 60, 110], "sequenc": [15, 16, 17, 18, 19, 20, 21, 23, 24, 38, 55, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 117, 120, 123, 125, 129, 140, 196, 212, 213], "documentcontenttyp": [15, 17, 18, 19, 20, 21, 23, 24, 55, 59, 60, 110, 117, 118, 120, 134], "arraytyp": [15, 17, 18, 19, 20, 21, 23, 24, 30, 31, 44, 55, 59, 60, 73, 75, 94, 96, 110, 117, 118, 120, 134, 139, 146, 147, 153, 157], "occurr": [15, 16, 17, 18, 19, 20, 21, 55, 59, 60, 62, 67, 69, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110], "callabl": [15, 17, 18, 19, 20, 21, 23, 25, 26, 30, 31, 44, 45, 54, 55, 59, 60, 73, 75, 79, 94, 96, 110, 116, 139, 201], "perhap": [15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110], "threadpool": [15, 17, 18, 19, 20, 21, 23, 25, 26, 45, 55, 59, 60, 110], "progressbar": [15, 17, 18, 19, 20, 21, 23, 25, 46, 47, 55, 59, 60, 110, 117, 120, 139, 208], "embed_model": [15, 17, 18, 19, 20, 21, 23, 28, 30, 55, 59, 60, 110, 117, 120, 139, 149, 150], "devic": [15, 17, 18, 19, 20, 21, 23, 28, 30, 44, 55, 59, 60, 110, 117, 120, 139, 146, 149, 150, 183, 197, 201], "to_numpi": [15, 17, 18, 19, 20, 21, 23, 28, 55, 59, 60, 110, 197], "fill": [15, 17, 18, 19, 20, 21, 23, 28, 30, 40, 55, 59, 60, 110, 117, 119, 120, 139, 182, 185, 187, 191, 196, 197, 202], "inplac": [15, 17, 18, 19, 20, 21, 23, 28, 55, 59, 60, 110, 117, 120, 122, 123, 124, 125, 129, 132, 139, 140, 195, 202], "directli": [15, 17, 18, 19, 20, 21, 23, 24, 28, 30, 44, 46, 55, 59, 60, 110, 119, 171, 174, 181, 186, 187, 192, 193, 195, 196, 201, 205], "anydnn": [15, 17, 18, 19, 20, 21, 23, 28, 30, 55, 59, 60, 110, 139], "kera": [15, 17, 18, 19, 20, 21, 23, 28, 30, 55, 59, 60, 110, 117, 120, 139, 197], "pytorch": [15, 17, 18, 19, 20, 21, 23, 28, 30, 55, 59, 60, 110, 117, 120, 139, 171, 186, 188, 190, 194, 197, 201, 209], "cuda": [15, 17, 18, 19, 20, 21, 23, 28, 30, 44, 55, 59, 60, 110, 117, 120, 139, 146, 149, 150, 183, 197, 201], "framework": [15, 17, 18, 19, 20, 21, 23, 28, 55, 59, 60, 110, 153, 171, 192, 197, 201, 207, 210], "format": [15, 17, 18, 19, 20, 21, 23, 28, 31, 37, 38, 55, 59, 60, 73, 75, 94, 96, 110, 119, 173, 192, 197, 198, 207, 210], "collatefntyp": [15, 17, 18, 19, 20, 21, 23, 28, 30, 55, 59, 60, 110], "index_data": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 198], "ground_truth": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 198], "metric_nam": [15, 17, 18, 19, 20, 21, 23, 30, 31, 44, 55, 59, 60, 73, 75, 94, 96, 110, 117, 120, 139, 198], "strict": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110], "label_tag": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110], "label": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 144, 182, 212, 213], "embed_func": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 198], "exclude_self": [15, 17, 18, 19, 20, 21, 23, 30, 31, 44, 55, 59, 60, 73, 75, 94, 96, 110, 117, 120, 139, 176, 198], "use_scipi": [15, 17, 18, 19, 20, 21, 23, 30, 44, 55, 59, 60, 110, 117, 120, 139, 176, 201], "match_batch_s": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 198], "100000": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110], "query_sample_s": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 198], "thu": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110], "consumpt": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 204, 210], "evlauat": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110], "basi": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110], "deriv": [15, 17, 18, 19, 20, 21, 23, 30, 53, 55, 57, 59, 60, 65, 70, 81, 102, 110, 117, 120, 140], "left": [15, 17, 18, 19, 20, 21, 23, 30, 42, 44, 49, 55, 59, 60, 66, 110, 117, 120, 132, 139, 171, 184, 188, 190, 198, 201, 212, 213], "align": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 198], "semant": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 169, 201], "prevent": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 206], "irrelev": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110], "accident": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110], "altern": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 198, 209, 211], "respect": [15, 17, 18, 19, 20, 21, 23, 30, 36, 55, 59, 60, 110, 142, 174, 186, 198, 209], "collat": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110], "b": [15, 17, 18, 19, 20, 21, 23, 30, 44, 55, 59, 60, 110, 117, 120, 139, 142, 144, 176, 177, 182, 183, 185, 187, 192, 195, 201, 202, 204], "min": [15, 17, 18, 19, 20, 21, 23, 30, 44, 55, 59, 60, 110, 117, 120, 139, 152, 210], "max": [15, 17, 18, 19, 20, 21, 23, 30, 44, 55, 59, 60, 110, 117, 120, 139, 152, 204, 210], "rescal": [15, 17, 18, 19, 20, 21, 23, 30, 44, 55, 59, 60, 110, 117, 120, 139], "hand": [15, 17, 18, 19, 20, 21, 23, 30, 44, 55, 59, 60, 110, 117, 120, 139, 140, 188, 192, 198, 201], "scipi": [15, 17, 18, 19, 20, 21, 23, 30, 44, 55, 59, 60, 110, 117, 120, 127, 139, 146, 147, 153, 186, 188, 190, 194, 201, 209, 211], "matrix": [15, 17, 18, 19, 20, 21, 23, 30, 44, 55, 59, 60, 110, 117, 120, 127, 139, 146, 152, 186, 188, 190, 194, 210], "keyword": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 88, 89, 110, 117, 119, 120, 123, 129, 140, 141, 142, 187, 198, 205], "infeas": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110], "parma": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110], "stack": [15, 17, 18, 19, 20, 21, 23, 24, 55, 59, 60, 110], "hash_fn": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 198], "num_relevant_documents_per_label": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 198], "ground": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110], "truth": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110], "annot": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 116, 181, 184, 211], "hash": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 116, 117, 120, 124, 127, 172, 182, 189, 198], "recal": [15, 17, 18, 19, 20, 21, 23, 30, 55, 59, 60, 110, 151, 196, 198], "total": [15, 17, 18, 19, 20, 21, 23, 30, 42, 55, 59, 60, 110, 111, 117, 162, 202], "only_id": [15, 17, 18, 19, 20, 21, 23, 31, 44, 55, 59, 60, 73, 75, 94, 96, 110, 117, 120, 139, 201], "return_root": [15, 17, 18, 19, 20, 21, 23, 31, 55, 59, 60, 73, 75, 94, 96, 110, 205], "latter": [15, 17, 18, 19, 20, 21, 23, 31, 55, 59, 60, 73, 75, 94, 96, 110, 181], "notimplementederror": [15, 17, 18, 19, 20, 21, 23, 31, 55, 59, 60, 73, 75, 94, 96, 110], "effect": [15, 17, 18, 19, 20, 21, 23, 44, 54, 55, 59, 60, 62, 67, 72, 73, 77, 88, 93, 94, 98, 105, 109, 110, 117, 120, 129, 139, 184, 187, 199], "_show_progress": [15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110], "noqa": [15, 17, 18, 19, 20, 21, 23, 40, 55, 59, 60, 110], "dar101": [15, 17, 18, 19, 20, 21, 23, 40, 55, 59, 60, 110], "dar102": [15, 17, 18, 19, 20, 21, 23, 40, 55, 59, 60, 110], "dar201": [15, 17, 18, 19, 20, 21, 23, 40, 55, 59, 60, 110], "df": [15, 17, 18, 19, 20, 21, 23, 39, 55, 59, 60, 110, 204], "panda": [15, 17, 18, 19, 20, 21, 23, 39, 55, 59, 60, 110, 175, 200, 204, 210], "datafram": [15, 17, 18, 19, 20, 21, 23, 35, 55, 59, 60, 110, 175, 196, 200, 210, 211], "jsonschema": [15, 17, 18, 19, 20, 21, 23, 41, 55, 59, 60, 110, 117, 120, 133, 169, 192], "pb_msg": [15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110, 117, 120, 135, 156, 157], "basemodel": [15, 17, 18, 19, 20, 21, 23, 48, 55, 59, 60, 110, 117, 120, 136, 142, 207], "repres": [15, 17, 18, 19, 20, 21, 23, 38, 48, 50, 52, 54, 55, 57, 59, 60, 110, 117, 119, 120, 124, 131, 136, 138, 144, 152, 153, 169, 172, 173, 174, 175, 176, 177, 182, 184, 186, 190, 194, 195, 198, 205, 210, 211, 212, 213], "indent": [15, 17, 18, 19, 20, 21, 23, 48, 55, 59, 60, 110, 117, 120, 136], "json": [15, 17, 18, 19, 20, 21, 23, 35, 37, 38, 40, 48, 55, 59, 60, 110, 117, 119, 120, 133, 136, 142, 174, 182, 184, 187, 196, 210, 211], "min_freq": [15, 17, 18, 19, 20, 21, 23, 53, 55, 59, 60, 110], "text_attr": [15, 17, 18, 19, 20, 21, 23, 53, 55, 59, 60, 110, 117, 120, 140], "vocabulari": [15, 17, 18, 19, 20, 21, 23, 53, 55, 59, 60, 110, 117, 120, 140, 176], "textual": [15, 17, 18, 19, 20, 21, 23, 53, 55, 59, 60, 110, 117, 120, 140, 174, 176], "minimum": [15, 17, 18, 19, 20, 21, 23, 46, 53, 55, 59, 60, 110, 117, 120, 132], "frequenc": [15, 17, 18, 19, 20, 21, 23, 53, 55, 59, 60, 110, 117, 120, 122, 140], "reserv": [15, 17, 18, 19, 20, 21, 23, 53, 55, 59, 60, 110, 117, 120, 140, 176], "unknown": [15, 17, 18, 19, 20, 21, 23, 53, 55, 59, 60, 110, 117, 120, 140, 176, 192], "stop": [15, 16, 17, 18, 19, 20, 21, 55, 59, 60, 62, 67, 69, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 211], "valueerror": [15, 16, 17, 18, 19, 20, 21, 28, 55, 59, 60, 62, 67, 69, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110, 198], "present": [15, 16, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 62, 67, 69, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110], "file_format": [15, 17, 18, 19, 20, 21, 23, 37, 55, 59, 60, 110], "binari": [15, 17, 18, 19, 20, 21, 23, 35, 37, 38, 55, 59, 60, 110, 117, 119, 120, 123, 125, 133, 140, 151, 169, 186, 189, 190, 192, 196, 198, 212, 213], "utf": [15, 17, 18, 19, 20, 21, 23, 37, 38, 41, 55, 59, 60, 110, 117, 119, 120, 123, 125, 140, 212, 213], "csv": [15, 17, 18, 19, 20, 21, 23, 35, 37, 40, 55, 59, 60, 110, 119, 172, 182, 196, 211], "textio": [15, 17, 18, 19, 20, 21, 23, 37, 38, 40, 41, 55, 59, 60, 110, 119], "binaryio": [15, 17, 18, 19, 20, 21, 23, 36, 37, 55, 59, 60, 110, 117, 120, 122, 123, 126, 129, 141], "human": [15, 17, 18, 19, 20, 21, 23, 36, 37, 41, 55, 59, 60, 110], "readabl": [15, 17, 18, 19, 20, 21, 23, 36, 37, 41, 55, 59, 60, 110, 187, 195], "compat": [15, 17, 18, 19, 20, 21, 23, 37, 55, 59, 60, 110, 169, 192], "complex": [15, 17, 18, 19, 20, 21, 23, 37, 55, 59, 60, 110, 174], "restor": [15, 17, 18, 19, 20, 21, 23, 37, 55, 59, 60, 110], "stream": [15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110, 169, 170, 177, 210, 211], "rtype": [15, 17, 18, 19, 20, 21, 23, 36, 49, 55, 59, 60, 110, 146, 147, 153], "file_nam": [15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110], "interpol": [15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110], "my_docarrai": [15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110, 204], "lz4": [15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110, 192, 204, 209, 211], "field_resolv": [15, 17, 18, 19, 20, 21, 23, 38, 40, 55, 59, 60, 110, 111, 117, 119, 162, 175, 187], "darrai": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110, 117, 120, 139], "purpos": [15, 17, 18, 19, 20, 21, 23, 44, 55, 57, 59, 60, 110, 184, 186, 199, 210], "sqeuclidean": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110, 145, 146, 147, 149, 150, 201], "braycurti": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "canberra": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "chebyshev": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "cityblock": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "correl": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "dice": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "jensenshannon": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "kulsinski": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "mahalanobi": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "minkowski": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "rogerstanimoto": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "russellrao": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "seuclidean": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "sokalmichen": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "sokalsneath": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "wminkowski": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "yule": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110], "invert": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110, 199], "significantli": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110, 117, 120, 139, 198], "speedup": [15, 17, 18, 19, 20, 21, 23, 44, 55, 59, 60, 110, 117, 120, 139, 202, 210], "titl": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 141, 176, 183, 207], "mydocumentarrai": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "image_sprit": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 206, 208], "min_image_s": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "channel_axi": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 129, 132, 171, 174, 206], "start_serv": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "image_sourc": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "exclude_fields_meta": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 206], "interact": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 132, 144, 173, 180, 206, 208], "visual": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 132, 173, 177, 186, 197, 200, 204, 208, 209, 210, 211], "projector": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 209, 211], "bind": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 207], "frontend": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "axi": [15, 17, 18, 19, 20, 21, 23, 24, 40, 46, 55, 59, 60, 110, 117, 119, 120, 129, 132, 171, 202], "channel": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 129, 132, 171, 202], "info": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 129, 132], "fallback": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "exclud": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 142, 192], "metadata": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 116, 174, 190, 206], "tsv": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 206], "canvas_s": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 132], "512": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 205], "min_siz": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 132], "skip_empti": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 132], "show_index": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "fig_siz": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "keep_aspect_ratio": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "sprite": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 132, 172, 177, 209, 211], "ui": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 132], "canva": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 132], "who": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 182, 204, 210], "corner": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "aspect": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "ratio": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 129], "indexerror": [15, 16, 17, 18, 19, 20, 21, 55, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110], "remot": [15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 110, 117, 120, 139, 186, 190, 200, 203, 212, 213], "flow": [15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 110, 117, 119, 120, 139, 211], "sandbox": [15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 110, 117, 120, 139, 203], "123": [15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 110, 117, 120, 139], "w": [15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 110, 117, 120, 129, 139, 173, 176, 199], "jinahub": [15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 110, 117, 120, 139, 203], "latest": [15, 17, 18, 19, 20, 21, 23, 47, 55, 59, 60, 110, 117, 120, 139, 203, 209, 211], "merg": [15, 17, 18, 19, 20, 21, 23, 49, 55, 57, 59, 60, 110, 117, 120, 130], "prioriti": [15, 17, 18, 19, 20, 21, 23, 49, 55, 59, 60, 110, 210], "reduct": [15, 17, 18, 19, 20, 21, 23, 49, 55, 59, 60, 110], "sequenti": [15, 17, 18, 19, 20, 21, 23, 49, 55, 59, 60, 110, 197, 202], "belong": [15, 17, 18, 19, 20, 21, 23, 49, 55, 59, 60, 110, 190, 212, 213], "kept": [15, 17, 18, 19, 20, 21, 23, 49, 55, 59, 60, 110], "non": [15, 17, 18, 19, 20, 21, 23, 49, 55, 59, 60, 110, 111, 117, 120, 123, 125, 129, 132, 140, 162, 180, 187, 192, 195, 198, 202, 204, 208], "sort": [15, 17, 18, 19, 20, 21, 23, 49, 55, 59, 60, 110, 144], "IN": [15, 16, 17, 18, 19, 20, 21, 55, 57, 59, 60, 62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109, 110], "seed": [15, 17, 18, 19, 20, 21, 23, 50, 55, 59, 60, 110, 198], "state": [15, 17, 18, 19, 20, 21, 23, 50, 55, 59, 60, 110, 186], "produc": [15, 17, 18, 19, 20, 21, 23, 50, 55, 59, 60, 110], "flatten_tag": [15, 17, 18, 19, 20, 21, 23, 38, 55, 59, 60, 110, 175], "exclude_field": [15, 17, 18, 19, 20, 21, 23, 38, 55, 59, 60, 110], "dialect": [15, 17, 18, 19, 20, 21, 23, 38, 40, 55, 59, 60, 110, 119], "excel": [15, 17, 18, 19, 20, 21, 23, 38, 40, 55, 59, 60, 110, 119], "with_head": [15, 17, 18, 19, 20, 21, 23, 38, 55, 59, 60, 110], "tag__fieldnam": [15, 17, 18, 19, 20, 21, 23, 38, 55, 59, 60, 110], "separ": [15, 17, 18, 19, 20, 21, 23, 38, 54, 55, 59, 60, 110, 119, 173, 175, 181, 184, 192, 195, 198], "wont": [15, 17, 18, 19, 20, 21, 23, 38, 55, 59, 60, 110], "predefin": [15, 17, 18, 19, 20, 21, 23, 38, 55, 59, 60, 110, 119, 190, 199], "savetxt": [15, 17, 18, 19, 20, 21, 23, 38, 55, 59, 60, 110], "durat": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "size_ratio": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "inline_displai": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "gif": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "frame": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 141, 172], "millisecond": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "jupyt": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 187, 204, 211], "notebook": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 144, 173, 180, 187, 193, 199, 211], "atribut": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110], "randomli": [15, 17, 18, 19, 20, 21, 23, 50, 55, 59, 60, 110, 144], "accord": [15, 17, 18, 19, 20, 21, 23, 26, 34, 55, 59, 60, 110, 117, 120, 124, 146, 195, 201], "meth": [15, 17, 18, 19, 20, 21, 23, 46, 55, 59, 60, 110, 117, 120, 123, 129, 140], "newli": [15, 17, 18, 19, 20, 21, 23, 24, 55, 59, 60, 110], "shape": [15, 17, 18, 19, 20, 21, 23, 24, 55, 59, 60, 110, 117, 120, 129, 141, 146, 170, 171, 173, 174, 177, 182, 192, 194, 212, 213], "dtype": [15, 17, 18, 19, 20, 21, 23, 24, 55, 59, 60, 110, 117, 120, 125, 140, 170, 174, 182, 188, 192, 212, 213], "_file_ctx": [15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110], "export": [15, 17, 18, 19, 20, 21, 23, 39, 55, 59, 60, 110, 192, 197], "ndarray_typ": [15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110, 117, 120, 135, 156, 157, 192], "documentarrayproto": [15, 17, 18, 19, 20, 21, 23, 36, 55, 59, 60, 110, 204], "filter_fn": [15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110], "traversablesequ": [15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110], "comma": [15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110, 181, 195], "c": [15, 17, 18, 19, 20, 21, 23, 54, 55, 57, 59, 60, 110, 117, 120, 129, 176, 177, 183, 194, 195, 205, 209, 211, 212, 213], "child": [15, 17, 18, 19, 20, 21, 23, 54, 55, 57, 59, 60, 110], "cc": [15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110, 195, 205], "mm": [15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110], "cm": [15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110, 195, 199], "reach": [15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110, 169], "fly": [15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110, 184], "traverse_flattened_per_path": [15, 17, 18, 19, 20, 21, 23, 54, 55, 59, 60, 110], "abstract": [16, 18, 70, 89, 90, 91, 93], "subset": [17, 20], "doc_view": 17, "safeguard": 17, "legit": 17, "subindex_config": [18, 174, 176, 205], "milvusconfig": 18, "barrel": [18, 21], "roll": [18, 21], "scores__jaccard__valu": [18, 21], "neural": [18, 174, 183], "executor": [18, 171, 183, 184], "10000": [19, 73, 76], "doubl": [19, 57, 59, 73, 74, 94, 95, 144, 194, 212, 213], "documentarrayload": [23, 25, 26], "dataloadermixin": [23, 25], "lazyrequestread": [23, 35, 36], "binaryiomixin": [23, 35, 36], "commoniomixin": [23, 35, 37], "csviomixin": [23, 35, 38], "dataframeiomixin": [23, 35, 39], "from_gen": [23, 35], "fromgeneratormixin": [23, 35, 40], "jsoniomixin": [23, 35, 41], "pbar": [23, 35], "qpscolumn": [23, 35, 42], "get_pbar": [23, 35, 42], "get_progressbar": [23, 35, 42], "pushpul": [23, 35], "pushpullmixin": [23, 35, 43], "plugin": [23, 120], "__delitem__": [27, 70, 76, 97, 108], "dnn_model": 28, "dnn": [28, 188, 197], "solid": 28, "__module__": 28, "idea": [28, 183, 207, 210], "tell": [28, 182], "subclass": [31, 70], "bulk": [32, 188, 192, 194], "__getitem__": [33, 70, 76, 97, 108], "render": [35, 42, 193, 210], "get_table_column": [35, 42], "max_refresh": [35, 42], "dam": [38, 53], "recurs": [40, 119, 190, 191, 212, 213], "sampling_r": [40, 119], "read_mod": [40, 119, 196], "to_dataturi": [40, 119], "exclude_regex": [40, 119], "dataset_path": [40, 119], "filter_field": [40, 119], "datasets_kwarg": [40, 119], "fp": [40, 117, 119, 120, 141, 177], "filepath": [40, 119], "line_format": [40, 119], "text_format": 42, "justifi": 42, "markup": 42, "highlight": [42, 117, 120, 141, 210], "table_column": 42, "textcolumn": 42, "task": [42, 174, 204, 210], "transmit": 43, "children": [49, 57], "__setitem__": [51, 70, 76, 97, 108], "nlp": [53, 210], "qdrantclient": [55, 88, 89, 90, 91, 93], "add_child": [56, 57], "with_traceback": [56, 57], "naiquevin": 57, "lookupi": 57, "mit": 57, "licens": 57, "copyright": 57, "2013": 57, "vineet": 57, "naik": 57, "naikvin": 57, "gmail": 57, "permiss": 57, "herebi": 57, "grant": 57, "charg": 57, "obtain": [57, 198], "softwar": [57, 173, 177], "associ": [57, 205], "deal": [57, 195], "publish": 57, "distribut": [57, 144], "sublicens": 57, "sell": 57, "permit": 57, "whom": 57, "furnish": 57, "subject": [57, 210], "shall": [57, 182, 184, 202], "substanti": 57, "portion": 57, "AS": 57, "warranti": 57, "OF": 57, "kind": [57, 117, 186, 210], "OR": [57, 199], "impli": 57, "BUT": 57, "TO": 57, "merchant": 57, "FOR": 57, "AND": [57, 199], "noninfring": 57, "NO": 57, "event": [57, 117, 120, 141], "author": [57, 174, 184], "holder": 57, "BE": 57, "liabl": 57, "claim": 57, "damag": 57, "liabil": 57, "action": [57, 199, 205], "contract": 57, "tort": 57, "aris": 57, "WITH": [57, 174], "val": 57, "pair": [57, 183, 198], "variou": [57, 207], "hold": [57, 187], "text__exact": 57, "text_exact": 57, "tags__nam": 57, "tree": 57, "op": 57, "negat": 57, "eg": [57, 144], "language__neq": 57, "rubi": [57, 212, 213], "framework__startswith": 57, "language__exact": 57, "php": [57, 212, 213], "leaf": 57, "tb": 57, "__traceback__": 57, "dunderkei": [57, 144], "everyth": [57, 184, 192, 204, 210], "underscor": [57, 144], "a__b__c": 57, "a__b": [57, 144], "precond": 57, "shortcut": 57, "partial": [57, 202], "commonli": 57, "precondit": 57, "mix": [57, 144, 198, 200, 210, 211], "classinfo": 57, "textfield": [59, 94, 95], "numericfield": [59, 94, 95], "geofield": [59, 94, 95], "wal": [60, 100, 101], "simplest": [60, 171], "getsetdel": [61, 62, 68, 73, 78, 83, 88, 94, 100, 105], "offsetmap": [61, 62, 66], "seqlik": [61, 62, 68, 73, 78, 83, 88, 94, 100, 105], "needs_id2offset_rebuild": [61, 78, 79], "initialize_t": [61, 100, 103], "create_t": [62, 66], "extend_doc_id": [62, 66], "get_id_by_offset": [62, 66], "get_ids_by_offset": [62, 66], "get_offsets_by_id": [62, 66], "get_offset_by_id": [62, 66], "get_all_id": [62, 66], "del_at_offset": [62, 66], "insert_at_offset": [62, 66], "set_at_offset": [62, 66], "shift_offset": [62, 66], "drop_tabl": [62, 66], "dump": [62, 66, 117, 120, 133, 142, 171, 177, 189], "execute_mani": [62, 66], "kwd": [62, 67, 72, 73, 77, 78, 82, 88, 93, 94, 98, 100, 104, 105, 109], "in_memori": 66, "doc_id": 66, "shift_from": 66, "shift_step": 66, "data_fil": 66, "get_id": [68, 71], "delete_by_id": [68, 71], "delete_by_offset": [68, 71], "update_id": [68, 71], "9223372036854775807": 69, "_set_doc": 70, "_del_doc": 70, "_del_all_doc": 70, "wrapper": 70, "likewis": 70, "data_id": 71, "_ids_map": 71, "concret": [76, 97, 108], "container_type_nam": 103, "cur": 103, "_class_nam": [105, 106, 110], "_obj": [111, 117, 162], "unknown_fields_handl": [111, 117, 162, 187], "catch": [111, 117, 162, 187], "overwrit": [111, 117, 144, 162], "emtpi": [111, 117, 162], "consum": [111, 117, 162, 201, 202], "multi_modal_schema": [112, 113], "image_typ": [112, 113], "image_uri": [112, 113], "audio_typ": [112, 113], "video_typ": [112, 113], "mesh_typ": [112, 113], "json_typ": [112, 113], "blob_typ": [112, 113], "iterable_primit": [112, 113], "iterable_docu": [112, 113], "iterable_nest": [112, 113], "pil": [112, 113, 183], "enumer": [113, 177, 202], "_source_field": [116, 185], "default_factori": [116, 182], "repr": [116, 182], "myimag": [116, 185], "my_sett": [116, 185], "my_gett": [116, 185], "mmdoc": [116, 181, 182, 183, 185], "banner": [116, 181, 182, 183, 184, 185, 195], "jpeg": [116, 117, 120, 129, 171, 181, 182, 185, 192, 196], "eq": [116, 199], "unsafe_hash": 116, "frozen": 116, "type_var_map": [116, 185], "_field": 116, "appl": [116, 171, 174, 186, 189, 192, 205], "png": [116, 117, 120, 129, 171, 174, 177, 183, 184, 186, 189, 194, 196, 205], "__bound__": 116, "covari": 116, "__covariant__": 116, "contravari": 116, "__contravariant__": 116, "_types_registri": 116, "collid": 116, "obj": [116, 117, 120, 130, 133, 142, 144, 173], "getattributesmixin": [117, 120, 121], "audio": [117, 120, 172, 182, 184, 186, 189, 190, 208, 210, 211, 212, 213], "audiodatamixin": [117, 120, 122], "blobdatamixin": [117, 120, 123], "convertmixin": [117, 120, 125], "urifilemixin": [117, 120, 126], "featurehash": [117, 120], "featurehashmixin": [117, 120, 127], "imagedatamixin": [117, 120, 129], "mesh": [117, 120, 132, 172, 182, 186, 189, 190, 209, 211], "meshdatamixin": [117, 120, 130], "multimodalmixin": [117, 120, 131], "portingmixin": [117, 120, 133], "propertymixin": [117, 120, 134, 162, 164, 165], "protobufmixin": [117, 120, 135], "rich_embed": [117, 120], "colorboxembed": [117, 120, 137], "sugar": [117, 120, 203], "singletonsugarmixin": [117, 120, 139], "textdatamixin": [117, 120, 140], "videodatamixin": [117, 120, 141], "smart_union": [117, 142], "from_orm": [117, 142], "parse_fil": [117, 142], "parse_obj": [117, 142], "parse_raw": [117, 142], "schema_json": [117, 142], "update_forward_ref": [117, 142], "valid": [117, 119, 120, 133, 142, 182, 192, 198, 202, 204, 205, 210, 211], "structvaluetyp": 117, "basic": [117, 182, 183, 184, 190, 208, 209, 210, 211], "3d": [117, 120, 130, 172, 186, 189, 190, 208, 209, 211], "d4": [117, 187, 188], "foo": [117, 187, 202, 203], "d0": [117, 187, 188, 193], "torchvis": [117, 174, 181, 188, 197, 209], "usr": [117, 209], "jpg": [117, 144, 171, 173, 181, 188, 192, 194, 196, 202, 206], "resnet50": [117, 174, 181, 188, 197], "pretrain": [117, 120, 129, 174, 181, 188, 197], "organ": [117, 190], "charset": [117, 120, 123, 125, 140], "charact": [117, 120, 123, 125, 140, 176, 198], "regist": [117, 120, 123, 125, 140], "iana": [117, 120, 123, 125, 140], "arbitrari": [117, 120, 123, 125, 127, 140, 184, 204, 212, 213], "octet": [117, 120, 123, 125, 140], "rule": [117, 120, 123, 125, 140, 192, 202], "7bit": [117, 120, 123, 125, 140], "bit": [117, 120, 123, 125, 140, 171, 194, 195, 212, 213], "ascii": [117, 120, 123, 125, 140, 212, 213], "width": [117, 120, 122, 129, 132, 190, 191, 212, 213], "height": [117, 120, 129], "_valid_": [117, 120, 125, 129], "buffer": [117, 120, 125, 159, 161, 169, 171, 186, 192, 212, 213], "effort": [117, 120, 124, 192], "image_format": [117, 120, 129], "window_shap": [117, 120, 129, 171], "stride": [117, 120, 129, 171], "as_chunk": [117, 120, 129, 130, 171], "slide": [117, 120, 129, 171], "window": [117, 120, 129, 141, 171, 209, 211], "h": [117, 120, 129, 173, 199], "target_s": [117, 120, 129], "denot": [117, 120, 129, 181], "vertic": [117, 120, 129, 130, 132, 172, 191, 208], "horizont": [117, 120, 129, 191], "patch": [117, 120, 129], "area": [117, 120, 129, 151], "zero": [117, 119, 120, 129, 147, 149, 150, 152, 176, 196, 212, 213], "vocab": [117, 120, 140, 176], "delimit": [117, 120, 140], "max_length": [117, 120, 140, 176], "int64": [117, 120, 140, 212, 213], "1d": [117, 120, 140, 152], "build_vocab": [117, 120, 140], "cut": [117, 120, 140, 171], "begin": [117, 120, 140, 181, 198, 210], "shorter": [117, 120, 140], "datauri": [117, 119, 120, 125, 129], "from_": [117, 120, 132], "rgb": [117, 120, 129, 130, 132, 172, 208], "depth": [117, 120, 130, 132, 173, 190, 191, 195, 207, 208, 212, 213], "face": [117, 119, 120, 130, 132, 172, 208], "max_valu": [117, 120, 127], "1000000": [117, 120, 127], "trick": [117, 120, 127], "caus": [117, 120, 127], "collis": [117, 120, 127], "overal": [117, 120, 127, 174, 177], "csr_matrix": [117, 120, 127, 146, 153, 201], "bytearrai": [117, 120, 133], "height_width": [117, 120, 141], "show_window": [117, 120, 141], "window_titl": [117, 120, 141], "webcam": [117, 120, 141, 172], "exit_kei": [117, 120, 141], "exit_ev": [117, 120, 141], "opencv": [117, 120, 141], "hardwar": [117, 120, 141, 177], "camera": [117, 120, 141], "preview": [117, 120, 141], "guarante": [117, 120, 141, 182, 210], "press": [117, 120, 141, 177], "asyncio": [117, 120, 141], "counter": [117, 120, 140], "text_field": [117, 120, 140], "pillow": [117, 120, 129, 171, 209, 211], "header": [117, 120, 129, 202], "pilimag": [117, 120, 129], "_uri_to_blob": [117, 120, 123, 129, 140], "geometri": [117, 120, 130], "attr": [117, 120, 140], "only_keyfram": [117, 120, 141, 177], "keyfram": [117, 120, 141, 177], "av": [117, 120, 141, 177, 209, 211], "pyav": [117, 120, 141], "org": [117, 120, 141, 151, 176, 186, 209], "_global": [117, 120, 141], "html": [117, 119, 120, 141, 176, 186], "inv_norm": [117, 120, 132, 206], "1920": [117, 120, 132], "invers": [117, 120, 129, 132], "float32": [117, 120, 129, 132, 170, 174, 182, 188, 197, 201, 212, 213], "uint8": [117, 120, 129, 132, 182, 204], "sample_r": [117, 120, 122], "44100": [117, 120, 122], "sample_width": [117, 120, 122], "wav": [117, 120, 122, 172, 182], "mono": [117, 120, 122], "stereo": [117, 120, 122], "frame_r": [117, 120, 141], "codec": [117, 120, 141], "h264": [117, 120, 141], "mp4": [117, 120, 141, 177], "decod": [117, 120, 141, 176], "original_channel_axi": [117, 120, 129, 174], "new_channel_axi": [117, 120, 129, 174], "move": [117, 120, 129, 184], "img_mean": [117, 120, 129], "406": [117, 120, 129], "img_std": [117, 120, 129], "deviat": [117, 120, 129], "std": [117, 120, 129, 201], "train": [117, 120, 129, 183, 210], "scratch": [117, 120, 129], "calcul": [117, 120, 129, 151, 198], "imagenet": [117, 120, 129], "mean_r": [117, 120, 129], "mean_g": [117, 120, 129], "mean_b": [117, 120, 129], "std_r": [117, 120, 129], "std_g": [117, 120, 129], "std_b": [117, 120, 129], "grai": [117, 120, 129], "black": [117, 120, 129, 181], "white": [117, 120, 129, 181, 182], "mnist": [117, 120, 129], "stddev": [117, 120, 129], "greyscal": [117, 120, 129], "resampl": [117, 120, 129], "dumper": [117, 120, 133], "documentproto": [117, 120, 135, 156, 192, 204], "_reference_doc": 118, "_metadata": [118, 174, 181, 212, 213], "beforehand": 119, "shell": 119, "wildcard": 119, "directori": 119, "subdirectori": 119, "rate": 119, "rb": 119, "plan": 119, "index_fil": 119, "search_fil": 119, "handler": 119, "auto": [119, 193, 201], "hug": 119, "huggingfac": 119, "load_dataset": 119, "package_refer": 119, "loading_method": 119, "file_extens": [120, 130], "univers": [124, 189], "convers": [125, 181, 189], "glb": [130, 173], "ply": [130, 173], "_propertymixin": 134, "sugari": [139, 189], "_namedscor": 142, "validationerror": 142, "_fields_set": 142, "__dict__": 142, "__fields_set__": 142, "trust": 142, "deep": [142, 171, 173, 184, 187, 188, 194, 195, 210, 211], "abstractsetintstr": 142, "mappingintstrani": 142, "preced": 142, "dictstrani": 142, "by_alia": 142, "skip_default": 142, "exclude_unset": 142, "exclude_default": 142, "exclude_non": [142, 192, 199], "models_as_dict": 142, "dumps_kwarg": 142, "suppli": [142, 212, 213], "unicod": [142, 212, 213], "utf8": 142, "allow_pickl": 142, "ref_templ": 142, "localn": 142, "forwardref": 142, "globaln": 142, "_basestrawberrydocumentinterfac": 143, "_namescoreitem": 143, "scalarwrapp": 143, "0x7fc7c4b4fc10": 143, "0x7fc7c4b4fc90": 143, "0x7fc7c4b4fb90": 143, "_namescoreiteminput": 143, "target": [144, 152], "new_fn": 144, "removed_at": 144, "deprec": 144, "old_fn_nam": 144, "_dict": 144, "fieldnam": 144, "dunderscor": 144, "referenc": 144, "referrenc": 144, "struct": [144, 212, 213], "use_uuid1": 144, "uuid": [144, 187], "mac": [144, 209, 211], "uuid1": [144, 187], "afford": 144, "closer": 144, "uuid4": 144, "relat": [144, 174, 190, 203, 209, 210, 211], "lost": [144, 202], "mermaid_url": 144, "suffix": 144, "svg": 144, "decor": [144, 184], "wb": 144, "klass": 144, "dikt": 144, "file_path": 144, "default_protocol": 144, "default_compress": 144, "docarray_fashion_mnist": 144, "gzip": [144, 192, 202, 204], "bin": [144, 204, 209], "account": 144, "enviro": 144, "infer": [144, 177], "log": [144, 178, 179, 180], "hubbl": [144, 202], "sparse_cosin": [145, 146, 147], "sparse_sqeuclidean": [145, 146, 147], "sparse_euclidean": [145, 146, 147], "pdist": [145, 146], "cdist": [145, 146], "x_mat": [146, 147, 149, 150, 152], "pairwis": 146, "observ": [146, 175, 177, 209], "coo_matrix": [146, 188, 194], "ndim": [146, 147, 149, 150, 153, 212, 213], "y_mat": [146, 147, 149, 150], "y": [146, 153, 190, 212, 213], "n_x": 146, "n_y": 146, "dist": 146, "j": [146, 210], "ep": [147, 149, 150, 152], "1e": [147, 149, 150, 152], "jitter": [147, 149, 150, 152], "divd": [147, 149, 150, 152], "binary_relev": [151, 198], "precis": [151, 198, 202], "fist": 151, "nonzero": [151, 212, 213], "wrong": 151, "en": 151, "wikipedia": 151, "wiki": 151, "evaluation_measures_": 151, "information_retriev": 151, "percentag": 151, "hit": [151, 171], "curv": 151, "reciproc": [151, 198], "max_rel": 151, "been": [151, 205, 207, 210], "harmon": 151, "f1": [151, 187], "discount": 151, "cumul": 151, "gain": 151, "dcg": 151, "www": [151, 176, 186], "stanford": 151, "edu": 151, "cs276": 151, "handout": 151, "evaluationnew": 151, "pdf": [151, 186], "6309": 151, "4307": 151, "ndcg": 151, "t_rang": 152, "x_rang": 152, "2d": 152, "descend": 152, "largest": 152, "biggest": [152, 210], "x_mat_best": 152, "x_inds_best": 152, "x_ind": 152, "raise_error_if_not_arrai": 153, "tf": [153, 188, 197], "num_row": 153, "sp": [153, 188, 201], "detach": 153, "read_ndarrai": [154, 156, 157], "flush_ndarrai": [154, 156, 157], "parse_proto": [154, 156], "flush_proto": [154, 156], "representmixin": [162, 164, 166], "_reference_n": 163, "subpackag": 168, "submodul": 168, "project": [169, 170, 186], "bump": 169, "minor": [169, 199], "autom": 169, "bug": 169, "track": 169, "explain": [169, 180, 182], "rational": [169, 181, 184], "behind": [169, 181, 184], "involv": [169, 174, 176], "Its": [169, 192, 210], "intention": 169, "undocu": 169, "backward": 169, "concept": [169, 210], "major": [169, 210], "wire": [169, 192, 210, 211], "migrat": 169, "ed": [169, 192], "unschema": [169, 192], "stick": 169, "archiv": 169, "acknowledg": 169, "caffe": 169, "unifi": [169, 210, 211], "terminologi": 169, "fluent": 169, "remark": [169, 204], "30833": 170, "olleh": 170, "ffmpeg": 170, "multimedia": 170, "pydub": 170, "manipul": [170, 210], "easi": [170, 175, 176, 182, 184, 187, 194, 195, 210, 211], "librosa": 170, "music": 170, "analysi": 170, "pyaudioanalysi": 170, "signal": 170, "matplotlib": [171, 209, 211], "tiff": 171, "muti_page_tiff_fil": 171, "7f907d786d6c11ec840a1e008a366d49": [171, 173, 191], "7aa4c0ba66cf6c300b7f07fdcbc2fdc8": 171, "bc94a3e3ca60352f2e4c9ab1b1bb9c22": 171, "36fe0d1daf4442ad6461c619f8bb25b7": 171, "resiz": [171, 189], "downsampl": 171, "upsampl": 171, "meet": 171, "chain": [171, 189], "feed": 171, "resnet": 171, "2489083": 171, "proc": 171, "yep": 171, "uneat": 171, "quick": [171, 186], "img": 171, "nice": [171, 176, 207], "overview": [171, 187], "rich": [171, 195, 204, 210], "salienc": 171, "krusti": 171, "burger": 171, "yellow": 171, "schoolbu": 171, "intent": 171, "guess": [171, 190, 202, 212, 213], "breakdown": 171, "simpler": 171, "approach": 171, "datatyp": 171, "792": 171, "180": 171, "7585b8aa": 171, "3826": 171, "11ec": [171, 175], "bc1a": 171, "1e008a366d48": [171, 175], "h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0": 171, "simpson": 171, "hmm": 171, "whole": [171, 202, 204, 207], "overlap": [171, 195, 204], "oversampl": 171, "segment": 172, "tool": 172, "trimesh": [173, 209, 211], "polygon": 173, "profession": 173, "commerci": 173, "uniti": 173, "blender": 173, "googl": [173, 187, 204, 208, 210, 211, 212, 213], "colab": [173, 187, 193, 204, 210, 211], "n_point": 173, "triangular": 173, "surfac": 173, "triangl": 173, "n_face": 173, "vertex": 173, "mesh_man": 173, "7f907ab26d6c11ec840a1e008a366d49": [173, 191], "7f907c106d6c11ec840a1e008a366d49": [173, 191], "assign": [173, 182, 186, 188, 194], "ifram": 173, "srcdoc": 173, "threej": 173, "viewer": 173, "500px": 173, "border": 173, "uniformli": 173, "easier": [173, 186, 192], "30000": 173, "plane": 173, "pixel": [173, 182], "concaten": [173, 174, 196], "due": [173, 210], "rgb_000": 173, "depth_000": 173, "jointli": [174, 184], "comfort": 174, "cleanli": 174, "individu": [174, 198], "stand": 174, "relationship": [174, 184], "domain": [174, 182, 184, 210], "newspap": [174, 184], "main_text": 174, "cast": [174, 188, 192], "automat": [174, 186, 187, 192, 194, 198, 205, 208], "7f03e397da8725aa8a2aed4a0d64f263": 174, "627c3b052b86e908b10475a4649ce49b": 174, "79e75c074aa444341baac18549930450": 174, "6861a1e3d77c3560a630dee34ba5ac7f": 174, "daili": 174, "cab4e047bc84ffb6b8b0597ff4ee0e9f": 174, "ea686d21029e4687df83a6ee31af98b2": 174, "139a5f16ab176b5c9d5088b1f2792973": 174, "f1e7527757c7dc6006fa8fa36e7b788f": 174, "2a13aee3a2ac8eadc07f43bc2dd83583": 174, "b6bcfa7000a25bd84ddcd35813c99b4c": 174, "71018fd73c13187309590e82b5255416": 174, "b6bcfa7000a25bd84ddcd35813c99b4": 174, "b335f748006204dd27bb5fa9a99a572f": 174, "7769657ae7c25227920b5ae35a2a3c31": 174, "29f1835bac77e435f00976c5cf4e97cb": 174, "bc8adb52bad51ccff3d6e7834a4b536a": 174, "29f1835bac77e435f00976c5cf4e97c": 174, "c602af33ed3f2d693a5633e53b87e19c": 174, "1ee83d2c391f078736732bb34a021587": 174, "c8fe3b8fd101bea6a4820a53d2993bdf": 174, "img_model": 174, "combine_embed": 174, "sophist": 174, "1512": 174, "tackl": [174, 184], "downstream": 174, "query_pag": 174, "pear": 174, "cou": 174, "closest_match_img": 174, "closest_match_pag": 174, "5922ee1ad0dbfe707301b573f98c5939": 174, "e6266f88f6ebcb3417358440934bcf81": 174, "defaultdict": [174, 198], "1920929e": 174, "29a0e323e2e9befcc42e9823b111f90f": 174, "175e386b1aa248f9387db46341b73e05": 174, "similarli": 174, "a0f33de91bb7d53811c7cb3015cdf1b8": 174, "float64": [174, 188, 212, 213], "01911603045476573": 174, "b9c9206422e27c8a0f1b4a4e745901ec": 174, "97cbca49aeaf0ea1f609b161dc9ec934": 174, "9183813fc38f291f353b76d4125506d6": 174, "freeli": 175, "tabular": [175, 182, 186], "usernam": [175, 204], "booker12": 175, "9012": 175, "rachel": 175, "booker": 175, "grey07": 175, "2070": 175, "laura": 175, "grei": 175, "johnson81": 175, "4081": 175, "craig": 175, "johnson": 175, "jenkins46": 175, "9346": 175, "mari": 175, "jenkin": 175, "smith79": 175, "5079": 175, "jami": 175, "smith": 175, "attempt": 175, "fail": 175, "manual": [175, 187, 188, 205], "tmp": [175, 205], "thing": [175, 177, 192, 202, 207], "english": 175, "german": 175, "hallo": 175, "welt": 175, "tag__english": 175, "tag__german": 175, "029388a4": 175, "3830": 175, "b6b2": 175, "0293968c": 175, "418de220": 175, "aad8": 175, "418dec52": 175, "inlin": [176, 186], "w3": 176, "histori": 176, "19921103": 176, "hypertext": 176, "3c128f326fbf11ec90821e008a366d49": 176, "\u0928\u092e\u0938": 176, "\u0924": 176, "\u0926": 176, "\u0928": 176, "\u092f": 176, "\u4f60\u597d\u4e16\u754c": 176, "\u3053\u3093\u306b\u3061\u306f\u4e16\u754c": 176, "\u043f\u0440\u0438\u0432\u0435\u0442": 176, "\u043c\u0438\u0440": 176, "thousand": [176, 204], "finer": 176, "5a12d7a86fbf11ec99a21e008a366d49": 176, "5a12e2346fbf11ec99a21e008a366d49": 176, "5a12e2f26fbf11ec99a21e008a366d49": 176, "5a12e3886fbf11ec99a21e008a366d49": 176, "5a12e41e6fbf11ec99a21e008a366d49": 176, "5a12e4966fbf11ec99a21e008a366d49": 176, "goodby": 176, "symbol": 176, "phrase": 176, "sentenc": [176, 184], "bonu": 176, "term": 176, "she": 176, "enter": [176, 207], "room": 176, "pride": [176, 186], "prejudic": [176, 186], "gutenberg": [176, 186], "1342": [176, 186], "txt": [176, 186], "strip": 176, "scores__jaccard": 176, "staircas": 176, "breakfast": 176, "congratul": [176, 209], "air": 176, "ungraci": 176, "mr": 176, "bennet": 176, "alon": 176, "f47f7448709811ec960a1e008a366d49": 176, "6666666666666666": 176, "7142857142857143": 176, "imagin": [176, 207], "lyric": 176, "song": 176, "choru": 176, "song1_titl": 176, "macdoug": 176, "farm": 176, "song1": 176, "he": 176, "dog": [176, 183, 184], "bow": 176, "wow": 176, "everywher": 176, "song2_titl": 176, "od": 176, "die": 176, "freud": 176, "song2": 176, "sch\u00f6ner": 176, "g\u00f6tterfunken": 176, "tochter": 176, "au": 176, "elisium": 176, "wir": 176, "betreten": 176, "feuertrunken": 176, "himmlisch": 176, "dein": 176, "heiligthum": 176, "zauber": 176, "binden": 176, "wieder": 176, "der": 176, "schwerd": 176, "getheilt": 176, "bettler": 176, "werden": 176, "f\u00fcrstenbr\u00fcder": 176, "wo": 176, "sanfter": 176, "fl\u00fcgel": 176, "weilt": 176, "doc1": [176, 184, 204], "song_titl": 176, "doc2": [176, 184, 204], "bag": 176, "descriptor": 176, "build_token": 176, "token_pattern": 176, "compil": 176, "findal": 176, "bow_feature_vector": 176, "prepar": [176, 199], "n_featur": 176, "da_backend": 176, "annlite_data": 176, "death": 176, "find_song_name_from_song_snippet": 176, "similar_item": 176, "most_similar_doc": 176, "Will": 176, "320": 177, "dim": [177, 212, 213], "got": [177, 204, 207], "176x320": 177, "framer": 177, "around": [177, 202], "25fp": 177, "mov": 177, "redund": 177, "keyframe_indic": 177, "scene": 177, "first_scen": 177, "60fp": 177, "esc": 177, "head": [178, 209], "appear": 178, "visibl": 178, "ve": [178, 210], "successfulli": [178, 209], "my_da": 178, "15t07": 178, "256z": 178, "portal": 179, "prompt": 180, "cli": [180, 197], "blog": 181, "paragraph": [181, 205], "eaccc9c573c07f13b7ee8aa04a83c9eb": 181, "140540453339296": 181, "banner_tensor": 181, "transpos": 181, "unsqueez": [181, 183], "outer": 181, "innerdoc": 181, "outerdoc": 181, "feature_imag": [181, 182], "websit": [181, 182], "94de1bef2fc8010ff4fe86791a671c44": 181, "field1": [181, 199], "field2": 181, "nois": [181, 182, 198], "bracket": [181, 199], "nonetyp": [181, 198], "front": 181, "deepli": 181, "nested_field1": 181, "bannerdoc": [181, 182], "columnarticl": [181, 182], "c1": [181, 195], "c2": 181, "unawar": 182, "mymultimodaldoc": 182, "avatar": 182, "Be": 182, "conflict": 182, "f3b193bbe8403c3ce1599b82f941f68a": 182, "18c7ca1c829fe819250faa4914bc45c1": 182, "1ee7fadddc23fc72365b2069f82d4bb4": 182, "is_dataclass": 182, "mmdoc1": 182, "mmdoc2": 182, "sequel": [182, 201], "soundfx": 182, "90c744c5155c2356d27f8c91955f70f7": 182, "c9d71990088fb0d8db3c83a6bd35650d": 182, "22e27708288e70813673711c86f834e": 182, "05ad36dfb0c520027b18c582d205c176": 182, "63248": 182, "unannot": 182, "17c77b443471f9d752cbcc360174b65f": 182, "some_field": 182, "other_field": 182, "15725d705b6c8d7e99908d380d614fa5": 182, "48a84621d51d94383b86db89e64022a3": 182, "1cb5cc74f1f986876a0c4c87201b9a28": 182, "instruct": 182, "complet": [182, 196, 198, 210], "52d9dcca4bc30cd0ef3b82917459cd32": 182, "04edacf582c5aa7b0bcfcf3d3e0a57bf": 182, "f5e9f105162e26d1d42ef7e2d363095a": 182, "d7d0b506f690890113e6a601ef80f8c6": 182, "75a3df4c26498d338589d2b2c20e156": 182, "cb1df29a384a6d39aa81e5af93316c4d": 182, "65cce8eb564f9ce136ff693b8ecb8f53": 182, "4dc4497d608b4f96094711e90cfb8078": 182, "f7b3aaefeab73af18f8372a594405b46": 182, "encourag": 182, "m_r": 182, "assert": [182, 185], "mutabl": 182, "builtin": 182, "scientist": [182, 200, 207, 208, 210, 211], "intuit": [182, 184, 187, 207, 210, 211], "straightforward": [182, 184], "aka": [182, 184], "far": [183, 184, 195], "nutshel": [183, 184, 200, 207], "develop": [183, 209, 210, 211], "openai": 183, "contrast": 183, "varieti": 183, "is_avail": 183, "vit": 183, "diagram": 183, "cat": [183, 184], "no_grad": 183, "image_featur": 183, "encode_imag": 183, "text_featur": 183, "encode_text": 183, "3285e": 183, "6554e": 183, "3394e": 183, "5605e": 183, "2397e": 183, "0547": 183, "0061": 183, "0495": 183, "6638": 183, "1281": 183, "4950": 183, "1447": 183, "0225": 183, "2909": 183, "4472": 183, "3420": 183, "1798": 183, "1981": 183, "2040": 183, "1533": 183, "4514": 183, "5664": 183, "0596": 183, "m1": [183, 185, 209], "m2": [183, 185, 209], "m3": 183, "latenc": [183, 204], "scalabl": [183, 210], "microservic": [183, 192, 204, 210], "extrem": [183, 191, 210], "touch": 183, "v": [183, 201, 210, 211, 213], "clip_client": 183, "demo": 183, "ca": 183, "51000": 183, "3137": 183, "1458": 183, "303": 183, "8877": 183, "2546": 183, "11365": 183, "05466": 183, "005997": 183, "0498": 183, "1274": 183, "4944": 183, "1442": 183, "02275": 183, "291": 183, "4468": 183, "3416": 183, "1985": 183, "4507": 183, "0598": 183, "wparticl": 184, "headlin": 184, "flight": 184, "pet": 184, "pick": 184, "seat": 184, "anim": 184, "calm": 184, "nathan": 184, "diller": 184, "travel": 184, "destin": [184, 195], "hood": [184, 205], "beauti": 184, "spend": 184, "mixtur": 184, "card": 184, "washington": 184, "sound": [184, 195], "bbc": 184, "transfer": [184, 204, 207, 210, 211], "doc0": 184, "Or": 184, "redesign": [184, 210], "implicit": 184, "answer": [184, 202], "trivial": 184, "plai": [184, 208], "eleg": 184, "translat": 185, "bde1ab74306c2f63188069879e3945ac": 185, "cd594a6870a8921d7a9c6b0ec764251d": 185, "xff": 185, "xd8": 185, "xe0": 185, "x00": [185, 192, 204], "x10jfif": 185, "x01": [185, 192, 204], "x0": 185, "56810": 185, "recov": 185, "invok": 185, "im": 185, "unset": 186, "among": 186, "spmatrix": [186, 188, 190], "intermedi": [186, 192, 204, 210], "mutual": 186, "exclus": 186, "7623808c6d6211ec9cf21e008a366d49": 186, "reset": 186, "grab": 186, "b4d675466d6211ecae8d1e008a366d49": 186, "2808eeb86d6311ecaddb1e008a366d49": 186, "ebook": 186, "jane": 186, "austen": 186, "anywher": 186, "wor": 186, "ivborw0kggoaaaansuheugaaaaua": 186, "aaafcayaaacnbyblaaaaheleqvqi12p4": 186, "w38giaxdibke0dhxgljnbaao": 186, "9txl0y4ohwaaaabjru5erkjggg": 186, "load_uri_to_": 186, "5dd542406d3f11eca3241e008a366d49": 187, "hex": 187, "though": [187, 198, 201], "forget": [187, 210], "autocomplet": [187, 211], "a14effee6d3e11ec8bde1e008a366d49": 187, "a14f00986d3e11ec8bde1e008a366d49": 187, "a14f01a66d3e11ec8bde1e008a366d49": 187, "a14f023c6d3e11ec8bde1e008a366d49": 187, "comfortab": 187, "idiomat": 187, "prettifi": 187, "caught": 187, "f957e84a6d4311ecbea21e008a366d49": 187, "silent": 187, "attributeerror": 187, "4479829968": 187, "piec": 188, "d5": 188, "from_dens": 188, "assig": 188, "stai": [188, 210], "smarter": 188, "loop": [188, 192, 194, 201, 202], "00003": 188, "ten": [188, 198], "63a39fa86d6911eca6fa1e008a366d49": 188, "63a39aee6d6911eca6fa1e008a366d49": 188, "63a399d66d6911eca6fa1e008a366d49": 188, "63a39b346d6911eca6fa1e008a366d49": 188, "63a3999a6d6911eca6fa1e008a366d49": 188, "63a39a626d6911eca6fa1e008a366d49": 188, "63a397ba6d6911eca6fa1e008a366d49": 188, "63a39a1c6d6911eca6fa1e008a366d49": 188, "63a39ab26d6911eca6fa1e008a366d49": 188, "63a399046d6911eca6fa1e008a366d49": 188, "63a399546d6911eca6fa1e008a366d49": 188, "apple1": 189, "equival": 189, "hexdigest": [190, 212, 213], "raw": [190, 209, 212, 213], "cross": [190, 210, 212, 213], "mime": [190, 212, 213], "crop": [190, 212, 213], "timestamp": [190, 199, 212, 213], "comprehens": [190, 210, 211], "categor": 190, "pictur": [190, 191], "comprehend": 190, "scienc": [190, 211], "commun": [190, 198, 211], "7f907c606d6c11ec840a1e008a366d49": 191, "7f907cba6d6c11ec840a1e008a366d49": 191, "crucial": [191, 192, 204], "fortun": [191, 209], "thank": [191, 194], "shown": [191, 198, 208], "wherea": [191, 192, 210], "receiv": [192, 198, 207], "compact": [192, 194, 204], "reader": [192, 195], "wonder": 192, "aren": 192, "decis": [192, 210], "sake": [192, 195], "clariti": [192, 195], "webservic": [192, 204, 207], "fastapi": [192, 204, 206, 209, 211], "d_as_json": 192, "641032d677b311ecb67a1e008a366d49": 192, "null": [192, 204], "db66bc2e77b311eca5f51e008a366d49": 192, "mimetyp": 192, "aqaaaaaaaaacaaaaaaaaaamaaaaaaaaa": 192, "i8": 192, "clsname": 192, "appreci": [192, 210], "uppercas": 192, "cdbc4f7a77b411ec96ad1e008a366d49": 192, "ey": 192, "handcraft": 192, "smoothli": 192, "encount": 192, "thumb": 192, "friend": [192, 204, 207, 210], "upset": 192, "ever": [192, 207, 210], "probabl": [192, 194, 195], "d_byte": 192, "d_r": 192, "x80": [192, 204], "x03cdocarrai": [192, 204], "ndocument": [192, 204], "nq": [192, 204], "x81q": [192, 204], "x02x": 192, "x05": [192, 204], "x00_dataq": [192, 204], "ndocumentdata": 192, "x04": [192, 204], "x06": 192, "x0e": 192, "x00_reference_docq": 192, "x07h": 192, "x01x": 192, "x02": [192, 204], "x00idq": 192, "x08x": 192, "x005d29a9f26d5911ec88d51e008a366d49q": 192, "tx": 192, "x00parent_": 192, "3644c0fa6d5a11ecbb081e008a366d49": 192, "110": [192, 198], "spooki": 192, "deseri": [192, 204], "protcol": [192, 204], "ganjzg9jyxjyyxkuzg9jdw1lbnqkrg9jdw1lbnqkcqapgxebfxecwauaaabfzgf0yxedy2rvy2fycmf5lmrvy3vtzw50lmrhdgekrg9jdw1lbnreyxrhcneekyfxbx1xbihydgaaaf9yzwzlcmvuy2vfzg9jcqdoavgcaaaaawrxcfggaaaazmzjnty3odg3mzaymtfly2e4njmxztawogeznjzkndlxcvgjaaaacgfyzw50x2lkcqpowasaaabncmfudwxhcml0exeltlgjaaaaywrqywnlbmn5cqxowayaaabidwzmzxjxdu5ybaaaagjsb2jxdk5ycqaaag1pbwvfdhlwzxepwaoaaab0zxh0l3bsywlucrbybaaaahrlehrxevgfaaaaagvsbg9xelghaaaay29udgvudhettlggaaaad2vpz2h0crrowamaaab1cmlxfu5ybaaaahrhz3nxfk5ybgaaag9mznnldhextlgiaaaabg9jyxrpb25xge5ycqaaagvtymvkzgluz3ezxxeakesbswjla2vycaaaag1vzgfsaxr5crtowasaaabldmfsdwf0aw9uc3ectlggaaaac2nvcmvzcr1owayaaabjahvua3nxhk5ybwaaag1hdgnozxnxh051ynnilg": 192, "d_as_dict": 192, "5596c84c77b711ecafed1e008a366d49": 192, "d_proto": 192, "d66463b46d6a11ecbf891e008a366d49": 192, "e4b215106d6a11ecb28b1e008a366d49": 192, "hundr": 192, "ineffici": [192, 212, 213], "tast": 194, "talk": 194, "element_selector": 194, "attribute_selector": 194, "scores__cosine__valu": 194, "8d41ce5c6f0d11eca2181e008a366d49": 194, "8d41cfa66f0d11eca2181e008a366d49": 194, "8d41cff66f0d11eca2181e008a366d49": 194, "db60ab8a6f0d11ec99511e008a366d49": 194, "db60abda6f0d11ec99511e008a366d49": 194, "db60c12e6f0d11ec99511e008a366d49": 194, "db60c1886f0d11ec99511e008a366d49": 194, "db60c4266f0d11ec99511e008a366d49": 194, "db60c46c6f0d11ec99511e008a366d49": 194, "285db6586f0e11ec99401e008a366d49": 194, "285db6b26f0e11ec99401e008a366d49": 194, "285dbff46f0e11ec99401e008a366d49": 194, "285dc0586f0e11ec99401e008a366d49": 194, "285db3606f0e11ec99401e008a366d49": 194, "285dcc746f0e11ec99401e008a366d49": 194, "285dccce6f0e11ec99401e008a366d49": 194, "285dce0e6f0e11ec99401e008a366d49": 194, "285dce5e6f0e11ec99401e008a366d49": 194, "285db4fa6f0e11ec99401e008a366d49": 194, "285dcf946f0e11ec99401e008a366d49": 194, "285dcfda6f0e11ec99401e008a366d49": 194, "285dd1066f0e11ec99401e008a366d49": 194, "285dd16a6f0e11ec99401e008a366d49": 194, "285db55e6f0e11ec99401e008a366d49": 194, "shot": [194, 204], "095cd76a6f0f11ec82211e008a366d49": 194, "095cd8d26f0f11ec82211e008a366d49": 194, "095cd92c6f0f11ec82211e008a366d49": 194, "coo": 194, "matric": 194, "sp_emb": 194, "key1": 194, "tags__key1": 194, "5164d792709a11ec9ae71e008a366d49": 194, "5164d986709a11ec9ae71e008a366d49": 194, "5164d922709a11ec9ae71e008a366d49": 194, "006942970007385196": 194, "48303283924326845": 194, "3859268166910603": 194, "220446049250313e": 194, "quickli": [194, 196, 204], "my": [195, 198], "favorit": [195, 210], "ask": 195, "coin": 195, "exploit": 195, "routin": [195, 210], "a04633546e6211ec8ad31e008a366d49": 195, "af7923406e6211ecbc811e008a366d49": 195, "ellipsi": 195, "3m": 195, "excit": [195, 200], "834f14666e6511ec8e331e008a366d49": 195, "834f32846e6511ec8e331e008a366d49": 195, "4883468432": 195, "7e27fa246e6611ec9a441e008a366d49": 195, "7e27fb826e6611ec9a441e008a366d49": 195, "99851c7a6e6611ecba351e008a366d49": 195, "4874066256": 195, "No": [195, 200, 204, 209, 210, 211], "worri": 195, "techniqu": [195, 202], "4513619088": 195, "remain": [195, 200], "path1": 195, "path2": 195, "path3": 195, "rout": 195, "mc": 195, "assigend": 195, "2f94c1426ee511ecbb491e008a366d49": 195, "2f94cd9a6ee511ecbb491e008a366d49": 195, "2f94cdfe6ee511ecbb491e008a366d49": 195, "2f94c4086ee511ecbb491e008a366d49": 195, "2f94c46c6ee511ecbb491e008a366d49": 195, "circl": 195, "intend": 195, "4912623312": 195, "4905929552": 195, "4913359824": 195, "deeper": 195, "ye": [195, 202], "liter": 195, "anymor": 195, "b_da": 195, "4887691536": 195, "4887691600": 195, "4887691408": 195, "232": 195, "categori": 195, "rv": 195, "4869273936": 195, "4876081680": 195, "4876735056": 195, "spoiler": 195, "alert": 195, "4453362704": 196, "4446140816": 196, "4866772176": 196, "da3": 196, "5024988176": 196, "4525853328": 196, "4452802192": 196, "afterward": [196, 198, 204], "surpris": 196, "mention": [196, 207], "glob": 196, "da_jpg": 196, "da_png": 196, "da_al": 196, "astyp": [197, 201], "mlp": 197, "onnx": [197, 210, 211], "nn": [197, 211], "linear": 197, "in_featur": 197, "out_featur": 197, "relu": 197, "preliminari": 197, "do_constant_fold": 197, "constant": [197, 204, 210], "fold": 197, "input_nam": 197, "output_nam": 197, "dynamic_ax": 197, "ax": 197, "inferencesess": 197, "onnxruntim": 197, "0506": 197, "0015": 197, "1154": 197, "1630": 197, "2376": 197, "0576": 197, "4109": 197, "0052": 197, "0027": 197, "0800": 197, "0928": 197, "1326": 197, "2256": 197, "1649": 197, "0435": 197, "2312": 197, "0068": 197, "0991": 197, "0767": 197, "0501": 197, "1393": 197, "0965": 197, "2062": 197, "my_text_model": 197, "demonstr": [198, 208], "da_origin": 198, "da_predict": 198, "da_groundtruth": 198, "therebi": 198, "cell": [198, 208], "noisi": 198, "recogn": 198, "p_da": 198, "g_da": 198, "42dc84b26fab11ecbc181e008a366d49": 198, "42dc98086fab11ecbc181e008a366d49": 198, "badli": 198, "example_da": 198, "8166666666666667": 198, "fulfil": 198, "knowledg": 198, "nine": 198, "judgement": 198, "count_relev": 198, "sum": 198, "inspir": 198, "47368421052631576": 198, "constuct": 198, "example_queri": 198, "example_index": 198, "embedding_funct": 198, "index_da": 198, "7583333333333333": 198, "100_000": [198, 210], "footprint": 198, "ajust": 198, "emb_func": 198, "1_000": [198, 201], "13649999999999998": 198, "14245": 198, "mongodb": 199, "next": [199, 202], "uom": 199, "paper": 199, "planner": 199, "postcard": 199, "operator1": 199, "value1": 199, "dunder": 199, "tags__timestamp": 199, "substitut": 199, "curli": 199, "ne": 199, "gt": 199, "greater": [199, 212, 213], "gte": 199, "lt": 199, "nin": 199, "regex": 199, "pprint": 199, "pretti": [199, 206, 208, 211], "92aee5d665d0c4dd34db10d83642ad": 199, "1a9d2139b02bc1c7842ecda94b347889": 199, "tags__h": 199, "4045a9659875fd1299e482d710753de3": 199, "cf7691c445220b94b88ff116911bad24": 199, "tags__w": 199, "44c6a4b18eaa005c6dbe15a28a32ebc": 199, "join": [199, 202], "claus": 199, "22985b71b6d483c31cbe507ed4d02bd1": 199, "a071faf19feac5809642e3afcd3a5878": 199, "411ecc70a71a3f00fc3259bf08c239d1": 199, "greatli": [200, 210, 211], "acceler": [200, 210, 211], "accpet": 201, "one_million_doc": 201, "rh": 201, "lh": 201, "20000000298023224": 201, "5620499849319458": 201, "6763054132461548": 201, "allevi": 201, "oom": 201, "1_000_000": 201, "768": 201, "dev": [201, 209, 211], "inter": 202, "wise": 202, "naiv": 202, "popular": 202, "charm": 202, "6000": 202, "6016": 202, "tip": 202, "peopl": [202, 210], "told": 202, "whatev": 202, "pipelin": 202, "1024": 202, "question": 202, "jump": 202, "whiteboard": 202, "anywai": 202, "awai": [202, 210], "rather": 202, "wait": 202, "btw": 202, "immedid": 202, "cv": 202, "inevit": 202, "domin": 202, "shed": 202, "light": 202, "mindset": 202, "gen": 202, "_head": 202, "_get_chunk": 202, "_batch": 202, "_to_stream_byt": 202, "num_doc_in_chunk": 202, "_tail": 202, "rpc": 202, "artifact": 202, "12345": 203, "hi": 203, "alex": 203, "laptop": [203, 204], "coquitts7": 203, "wide": [203, 204], "netloc": 203, "websocket": 203, "jinhub": 203, "55566": 203, "8081": 203, "porcess": 203, "anytim": [204, 211], "a677577877b611eca3811e008a366d49": 204, "a67758f477b611eca3811e008a366d49": 204, "da_r": 204, "x03": 204, "cdocarrai": 204, "fastest": 204, "portabl": [204, 210], "insecur": 204, "2gb": 204, "bz2": 204, "lzma": 204, "zlib": 204, "jan": 204, "interpret": 204, "argu": 204, "realist": 204, "unreal": 204, "rel": 204, "doc1_byt": 204, "doc2_byt": 204, "uint64": [204, 212, 213], "uint32": [204, 212, 213], "amount": 204, "dock_byt": 204, "dock": 204, "repeat": [204, 207, 212, 213], "da_rec": 204, "simplifi": [204, 211], "da_gener": 204, "xxxl": 204, "nut": 204, "d_str": 204, "bcjngebawhuaaad": 204, "iw": 204, "uqdpl9udnsfvomzb8m7skigrkntiyotqynzmwmzexzwnim2i1mwuwmdhhmzy2zdq5mgaep2findiahd9imtgyab0vnwuyab0fytiahh9myaadp2mzyzyahd9jodayab0fzdiaht9kmtzkaabqnjzkndkaaaaa": 204, "2571b8b66e4d11ec9f271e008a366d49": 204, "2571ba466e4d11ec9f271e008a366d49": 204, "ae55782a6e4d11ec803c1e008a366d49": 204, "ae557a146e4d11ec803c1e008a366d49": 204, "43cb93b26e4e11ec8b731e008a366d49": 204, "43cb95746e4e11ec8b731e008a366d49": 204, "heavylift": 204, "myda123": 204, "analyz": 204, "colleagu": 204, "4gb": 204, "unchang": 204, "subindci": 205, "sublevel": 205, "searchabl": 205, "fledg": 205, "mydocu": 205, "_imag": 205, "tmp_w1yqmpc": 205, "tmp_iar4ofr": 205, "documentarri": 205, "top_image_match": 205, "top_level_match": 205, "_root_id_": 205, "your_root_id": 205, "visualis": 206, "pydanticdocumentarrai": 207, "won": 207, "happi": 207, "difficult": 207, "isinst": 207, "web": [207, 211], "fundament": [207, 210], "openapi": [207, 211], "ref": 207, "ll": 207, "hint": [207, 211], "create_item": 207, "create_arrai": 207, "starlett": 207, "testclient": 207, "loc": 207, "msg": 207, "type_error": 207, "reject": 207, "meaningless": 207, "response_model": 207, "idonli": 207, "get_item_no_embed": 207, "065a5548756211ecaa8d1e008a366d49": 207, "declar": 207, "idandmatch": 207, "get_match": 207, "get_match_id_onli": 207, "unlimit": 207, "ef82e4f4756411ecb2c01e008a366d49": 207, "ef82e6d4756411ecb2c01e008a366d49": 207, "ef82e760756411ecb2c01e008a366d49": 207, "ef82e7ec756411ecb2c01e008a366d49": 207, "didn": 207, "degre": 207, "idmatch": 207, "response_model_exclude_non": 207, "3da6383e756511ecb7cb1e008a366d49": 207, "3da63a14756511ecb7cb1e008a366d49": 207, "3da6392e756511ecb7cb1e008a366d49": 207, "3da63b72756511ecb7cb1e008a366d49": 207, "3da639ce756511ecb7cb1e008a366d49": 207, "3da63a5a756511ecb7cb1e008a366d49": 207, "3da63ae6756511ecb7cb1e008a366d49": 207, "3da63aa0756511ecb7cb1e008a366d49": 207, "3da63b2c756511ecb7cb1e008a366d49": 207, "3da63988756511ecb7cb1e008a366d49": 207, "stage": 208, "richer": 208, "broken": 208, "emul": 208, "termin": 208, "linux": [209, 211], "conda": [209, 211], "forg": [209, 211], "seral": [209, 211], "uvicorn": [209, 211], "demand": [209, 211], "reproduc": [209, 211], "__version__": [209, 211], "maco": 209, "chip": 209, "rosetta": 209, "unam": 209, "arm64": 209, "brew": 209, "confirm": 209, "reinstal": 209, "destruct": 209, "proceed": 209, "bash": 209, "fssl": 209, "githubusercont": 209, "sh": 209, "platform": 209, "python3": 209, "aug": 209, "libexec": 209, "pypi": 209, "mp": 209, "torchaudio": 209, "whl": 209, "nightli": 209, "unstructur": [210, 211], "media": 210, "toolkit": 210, "jupyterlab": 210, "happili": 210, "maxim": 210, "de": 210, "filetyp": 210, "haven": 210, "unfair": 210, "dedic": 210, "vision": 210, "coupl": 210, "soon": 210, "hf": 210, "temporarili": 210, "resid": 210, "oppos": 210, "physic": 210, "occasion": 210, "precompil": 210, "contigu": 210, "particl": 210, "crunch": 210, "awkward": 210, "ak": 210, "toytim": 210, "timecontext": 210, "ak_arrai": 210, "from_it": 210, "004": 210, "031": 210, "known": 210, "ago": 210, "me": 210, "perspect": 210, "numer": 210, "stori": 210, "thrown": 210, "boost": 210, "usabl": 210, "independ": 210, "comparison": [210, 211], "100k": 210, "repetit": 210, "realiz": 210, "deliber": 210, "constraint": 210, "trigger": 210, "door": 211, "foundat": 211, "dall": 211, "discoart": 211, "powerhous": 211, "mainstream": 211, "versatil": 211, "reliabl": 211, "pycharm": 211, "quantiz": [212, 213], "cls_name": [212, 213], "java": [212, 213], "int32": [212, 213], "sint32": [212, 213], "bignum": [212, 213], "fixnum": [212, 213], "sint64": [212, 213], "uint": [212, 213], "ulong": [212, 213], "sign": [212, 213], "fixed32": [212, 213], "fixed64": [212, 213], "eight": [212, 213], "sfixed32": [212, 213], "sfixed64": [212, 213], "trueclass": [212, 213], "falseclass": [212, 213], "bytestr": [212, 213], "8bit": [212, 213], "cd": 213, "pwd": 213, "jinaai": 213, "protogen": 213}, "objects": {"": [[13, 0, 0, "-", "docarray"]], "docarray": [[14, 0, 0, "-", "array"], [111, 0, 0, "-", "base"], [112, 0, 0, "-", "dataclasses"], [117, 0, 0, "-", "document"], [144, 0, 0, "-", "helper"], [145, 0, 0, "-", "math"], [154, 0, 0, "-", "proto"], [162, 0, 0, "-", "score"], [167, 0, 0, "-", "typing"]], "docarray.array": [[15, 0, 0, "-", "annlite"], [16, 0, 0, "-", "base"], [17, 0, 0, "-", "chunk"], [18, 0, 0, "-", "document"], [19, 0, 0, "-", "elastic"], [20, 0, 0, "-", "match"], [21, 0, 0, "-", "memory"], [23, 0, 0, "-", "mixins"], [55, 0, 0, "-", "qdrant"], [56, 0, 0, "-", "queryset"], [59, 0, 0, "-", "redis"], [60, 0, 0, "-", "sqlite"], [61, 0, 0, "-", "storage"], [110, 0, 0, "-", "weaviate"]], "docarray.array.annlite": [[15, 1, 1, "", "AnnliteConfig"], [15, 1, 1, "", "DocumentArrayAnnlite"]], "docarray.array.annlite.AnnliteConfig": [[15, 2, 1, "", "columns"], [15, 2, 1, "", "data_path"], [15, 2, 1, "", "ef_construction"], [15, 2, 1, "", "ef_search"], [15, 2, 1, "", "list_like"], [15, 2, 1, "", "max_connection"], [15, 2, 1, "", "metric"], [15, 2, 1, "", "n_components"], [15, 2, 1, "", "n_dim"], [15, 2, 1, "", "root_id"], [15, 2, 1, "", "serialize_config"]], "docarray.array.annlite.DocumentArrayAnnlite": [[15, 2, 1, "", "TYPE_MAP"], [15, 3, 1, "", "append"], [15, 3, 1, "", "apply"], [15, 3, 1, "", "apply_batch"], [15, 3, 1, "", "batch"], [15, 3, 1, "", "batch_ids"], [15, 4, 1, "", "blobs"], [15, 3, 1, "", "clear"], [15, 3, 1, "", "cloud_delete"], [15, 3, 1, "", "cloud_list"], [15, 3, 1, "", "cloud_pull"], [15, 3, 1, "", "cloud_push"], [15, 4, 1, "", "contents"], [15, 3, 1, "", "count"], [15, 3, 1, "", "dataloader"], [15, 3, 1, "", "embed"], [15, 3, 1, "", "embed_and_evaluate"], [15, 4, 1, "", "embeddings"], [15, 3, 1, "", "empty"], [15, 3, 1, "", "evaluate"], [15, 3, 1, "", "extend"], [15, 3, 1, "", "find"], [15, 3, 1, "", "flatten"], [15, 3, 1, "", "from_base64"], [15, 3, 1, "", "from_bytes"], [15, 3, 1, "", "from_csv"], [15, 3, 1, "", "from_dataframe"], [15, 3, 1, "", "from_dict"], [15, 3, 1, "", "from_files"], [15, 3, 1, "", "from_huggingface_datasets"], [15, 3, 1, "", "from_json"], [15, 3, 1, "", "from_lines"], [15, 3, 1, "", "from_list"], [15, 3, 1, "", "from_ndarray"], [15, 3, 1, "", "from_ndjson"], [15, 3, 1, "", "from_protobuf"], [15, 3, 1, "", "from_pydantic_model"], [15, 3, 1, "", "from_strawberry_type"], [15, 3, 1, "", "get_json_schema"], [15, 3, 1, "", "get_vocabulary"], [15, 3, 1, "", "index"], [15, 3, 1, "", "insert"], [15, 3, 1, "", "load"], [15, 3, 1, "", "load_binary"], [15, 3, 1, "", "load_csv"], [15, 3, 1, "", "load_json"], [15, 3, 1, "", "map"], [15, 3, 1, "", "map_batch"], [15, 3, 1, "", "match"], [15, 3, 1, "", "plot_embeddings"], [15, 3, 1, "", "plot_image_sprites"], [15, 3, 1, "", "pop"], [15, 3, 1, "", "post"], [15, 3, 1, "", "pull"], [15, 3, 1, "", "push"], [15, 3, 1, "", "reduce"], [15, 3, 1, "", "reduce_all"], [15, 3, 1, "", "remove"], [15, 3, 1, "", "reverse"], [15, 3, 1, "", "sample"], [15, 3, 1, "", "save"], [15, 3, 1, "", "save_binary"], [15, 3, 1, "", "save_csv"], [15, 3, 1, "", "save_embeddings_csv"], [15, 3, 1, "", "save_gif"], [15, 3, 1, "", "save_json"], [15, 3, 1, "", "shuffle"], [15, 3, 1, "", "split_by_tag"], [15, 3, 1, "", "summary"], [15, 3, 1, "", "sync"], [15, 4, 1, "", "tensors"], [15, 4, 1, "", "texts"], [15, 3, 1, "", "to_base64"], [15, 3, 1, "", "to_bytes"], [15, 3, 1, "", "to_dataframe"], [15, 3, 1, "", "to_dict"], [15, 3, 1, "", "to_json"], [15, 3, 1, "", "to_list"], [15, 3, 1, "", "to_protobuf"], [15, 3, 1, "", "to_pydantic_model"], [15, 3, 1, "", "to_strawberry_type"], [15, 3, 1, "", "traverse"], [15, 3, 1, "", "traverse_flat"], [15, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.base": [[16, 1, 1, "", "BaseDocumentArray"]], "docarray.array.base.BaseDocumentArray": [[16, 3, 1, "", "append"], [16, 3, 1, "", "clear"], [16, 3, 1, "", "count"], [16, 3, 1, "", "extend"], [16, 3, 1, "", "index"], [16, 3, 1, "", "insert"], [16, 3, 1, "", "pop"], [16, 3, 1, "", "remove"], [16, 3, 1, "", "reverse"]], "docarray.array.chunk": [[17, 1, 1, "", "ChunkArray"]], "docarray.array.chunk.ChunkArray": [[17, 2, 1, "", "TYPE_MAP"], [17, 4, 1, "", "adjacency"], [17, 3, 1, "", "append"], [17, 3, 1, "", "apply"], [17, 3, 1, "", "apply_batch"], [17, 3, 1, "", "batch"], [17, 3, 1, "", "batch_ids"], [17, 4, 1, "", "blobs"], [17, 3, 1, "", "clear"], [17, 3, 1, "", "cloud_delete"], [17, 3, 1, "", "cloud_list"], [17, 3, 1, "", "cloud_pull"], [17, 3, 1, "", "cloud_push"], [17, 4, 1, "", "contents"], [17, 3, 1, "", "count"], [17, 3, 1, "", "dataloader"], [17, 3, 1, "", "embed"], [17, 3, 1, "", "embed_and_evaluate"], [17, 4, 1, "", "embeddings"], [17, 3, 1, "", "empty"], [17, 3, 1, "", "evaluate"], [17, 3, 1, "", "extend"], [17, 3, 1, "", "find"], [17, 3, 1, "", "flatten"], [17, 3, 1, "", "from_base64"], [17, 3, 1, "", "from_bytes"], [17, 3, 1, "", "from_csv"], [17, 3, 1, "", "from_dataframe"], [17, 3, 1, "", "from_dict"], [17, 3, 1, "", "from_files"], [17, 3, 1, "", "from_huggingface_datasets"], [17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_lines"], [17, 3, 1, "", "from_list"], [17, 3, 1, "", "from_ndarray"], [17, 3, 1, "", "from_ndjson"], [17, 3, 1, "", "from_protobuf"], [17, 3, 1, "", "from_pydantic_model"], [17, 3, 1, "", "from_strawberry_type"], [17, 3, 1, "", "get_json_schema"], [17, 3, 1, "", "get_vocabulary"], [17, 4, 1, "", "granularity"], [17, 3, 1, "", "index"], [17, 3, 1, "", "insert"], [17, 3, 1, "", "load"], [17, 3, 1, "", "load_binary"], [17, 3, 1, "", "load_csv"], [17, 3, 1, "", "load_json"], [17, 3, 1, "", "map"], [17, 3, 1, "", "map_batch"], [17, 3, 1, "", "match"], [17, 3, 1, "", "plot_embeddings"], [17, 3, 1, "", "plot_image_sprites"], [17, 3, 1, "", "pop"], [17, 3, 1, "", "post"], [17, 3, 1, "", "pull"], [17, 3, 1, "", "push"], [17, 3, 1, "", "reduce"], [17, 3, 1, "", "reduce_all"], [17, 4, 1, "", "reference_doc"], [17, 3, 1, "", "remove"], [17, 3, 1, "", "reverse"], [17, 3, 1, "", "sample"], [17, 3, 1, "", "save"], [17, 3, 1, "", "save_binary"], [17, 3, 1, "", "save_csv"], [17, 3, 1, "", "save_embeddings_csv"], [17, 3, 1, "", "save_gif"], [17, 3, 1, "", "save_json"], [17, 3, 1, "", "shuffle"], [17, 3, 1, "", "split_by_tag"], [17, 3, 1, "", "summary"], [17, 3, 1, "", "sync"], [17, 4, 1, "", "tensors"], [17, 4, 1, "", "texts"], [17, 3, 1, "", "to_base64"], [17, 3, 1, "", "to_bytes"], [17, 3, 1, "", "to_dataframe"], [17, 3, 1, "", "to_dict"], [17, 3, 1, "", "to_json"], [17, 3, 1, "", "to_list"], [17, 3, 1, "", "to_protobuf"], [17, 3, 1, "", "to_pydantic_model"], [17, 3, 1, "", "to_strawberry_type"], [17, 3, 1, "", "traverse"], [17, 3, 1, "", "traverse_flat"], [17, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.document": [[18, 1, 1, "", "DocumentArray"]], "docarray.array.document.DocumentArray": [[18, 3, 1, "", "append"], [18, 3, 1, "", "apply"], [18, 3, 1, "", "apply_batch"], [18, 3, 1, "", "batch"], [18, 3, 1, "", "batch_ids"], [18, 4, 1, "", "blobs"], [18, 3, 1, "", "clear"], [18, 3, 1, "", "cloud_delete"], [18, 3, 1, "", "cloud_list"], [18, 3, 1, "", "cloud_pull"], [18, 3, 1, "", "cloud_push"], [18, 4, 1, "", "contents"], [18, 3, 1, "", "count"], [18, 3, 1, "", "dataloader"], [18, 3, 1, "", "embed"], [18, 3, 1, "", "embed_and_evaluate"], [18, 4, 1, "", "embeddings"], [18, 3, 1, "", "empty"], [18, 3, 1, "", "evaluate"], [18, 3, 1, "", "extend"], [18, 3, 1, "", "find"], [18, 3, 1, "", "flatten"], [18, 3, 1, "", "from_base64"], [18, 3, 1, "", "from_bytes"], [18, 3, 1, "", "from_csv"], [18, 3, 1, "", "from_dataframe"], [18, 3, 1, "", "from_dict"], [18, 3, 1, "", "from_files"], [18, 3, 1, "", "from_huggingface_datasets"], [18, 3, 1, "", "from_json"], [18, 3, 1, "", "from_lines"], [18, 3, 1, "", "from_list"], [18, 3, 1, "", "from_ndarray"], [18, 3, 1, "", "from_ndjson"], [18, 3, 1, "", "from_protobuf"], [18, 3, 1, "", "from_pydantic_model"], [18, 3, 1, "", "from_strawberry_type"], [18, 3, 1, "", "get_json_schema"], [18, 3, 1, "", "get_vocabulary"], [18, 3, 1, "", "index"], [18, 3, 1, "", "insert"], [18, 3, 1, "", "load"], [18, 3, 1, "", "load_binary"], [18, 3, 1, "", "load_csv"], [18, 3, 1, "", "load_json"], [18, 3, 1, "", "map"], [18, 3, 1, "", "map_batch"], [18, 3, 1, "", "match"], [18, 3, 1, "", "plot_embeddings"], [18, 3, 1, "", "plot_image_sprites"], [18, 3, 1, "", "pop"], [18, 3, 1, "", "post"], [18, 3, 1, "", "pull"], [18, 3, 1, "", "push"], [18, 3, 1, "", "reduce"], [18, 3, 1, "", "reduce_all"], [18, 3, 1, "", "remove"], [18, 3, 1, "", "reverse"], [18, 3, 1, "", "sample"], [18, 3, 1, "", "save"], [18, 3, 1, "", "save_binary"], [18, 3, 1, "", "save_csv"], [18, 3, 1, "", "save_embeddings_csv"], [18, 3, 1, "", "save_gif"], [18, 3, 1, "", "save_json"], [18, 3, 1, "", "shuffle"], [18, 3, 1, "", "split_by_tag"], [18, 3, 1, "", "summary"], [18, 4, 1, "", "tensors"], [18, 4, 1, "", "texts"], [18, 3, 1, "", "to_base64"], [18, 3, 1, "", "to_bytes"], [18, 3, 1, "", "to_dataframe"], [18, 3, 1, "", "to_dict"], [18, 3, 1, "", "to_json"], [18, 3, 1, "", "to_list"], [18, 3, 1, "", "to_protobuf"], [18, 3, 1, "", "to_pydantic_model"], [18, 3, 1, "", "to_strawberry_type"], [18, 3, 1, "", "traverse"], [18, 3, 1, "", "traverse_flat"], [18, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.elastic": [[19, 1, 1, "", "DocumentArrayElastic"], [19, 1, 1, "", "ElasticConfig"]], "docarray.array.elastic.DocumentArrayElastic": [[19, 2, 1, "", "MAX_ES_RETURNED_DOCS"], [19, 2, 1, "", "TYPE_MAP"], [19, 3, 1, "", "append"], [19, 3, 1, "", "apply"], [19, 3, 1, "", "apply_batch"], [19, 3, 1, "", "batch"], [19, 3, 1, "", "batch_ids"], [19, 4, 1, "", "blobs"], [19, 3, 1, "", "clear"], [19, 3, 1, "", "cloud_delete"], [19, 3, 1, "", "cloud_list"], [19, 3, 1, "", "cloud_pull"], [19, 3, 1, "", "cloud_push"], [19, 4, 1, "", "contents"], [19, 3, 1, "", "count"], [19, 3, 1, "", "dataloader"], [19, 3, 1, "", "embed"], [19, 3, 1, "", "embed_and_evaluate"], [19, 4, 1, "", "embeddings"], [19, 3, 1, "", "empty"], [19, 3, 1, "", "evaluate"], [19, 3, 1, "", "extend"], [19, 3, 1, "", "find"], [19, 3, 1, "", "flatten"], [19, 3, 1, "", "from_base64"], [19, 3, 1, "", "from_bytes"], [19, 3, 1, "", "from_csv"], [19, 3, 1, "", "from_dataframe"], [19, 3, 1, "", "from_dict"], [19, 3, 1, "", "from_files"], [19, 3, 1, "", "from_huggingface_datasets"], [19, 3, 1, "", "from_json"], [19, 3, 1, "", "from_lines"], [19, 3, 1, "", "from_list"], [19, 3, 1, "", "from_ndarray"], [19, 3, 1, "", "from_ndjson"], [19, 3, 1, "", "from_protobuf"], [19, 3, 1, "", "from_pydantic_model"], [19, 3, 1, "", "from_strawberry_type"], [19, 3, 1, "", "get_json_schema"], [19, 3, 1, "", "get_vocabulary"], [19, 3, 1, "", "index"], [19, 3, 1, "", "insert"], [19, 3, 1, "", "load"], [19, 3, 1, "", "load_binary"], [19, 3, 1, "", "load_csv"], [19, 3, 1, "", "load_json"], [19, 3, 1, "", "map"], [19, 3, 1, "", "map_batch"], [19, 3, 1, "", "match"], [19, 3, 1, "", "plot_embeddings"], [19, 3, 1, "", "plot_image_sprites"], [19, 3, 1, "", "pop"], [19, 3, 1, "", "post"], [19, 3, 1, "", "pull"], [19, 3, 1, "", "push"], [19, 3, 1, "", "reduce"], [19, 3, 1, "", "reduce_all"], [19, 3, 1, "", "remove"], [19, 3, 1, "", "reverse"], [19, 3, 1, "", "sample"], [19, 3, 1, "", "save"], [19, 3, 1, "", "save_binary"], [19, 3, 1, "", "save_csv"], [19, 3, 1, "", "save_embeddings_csv"], [19, 3, 1, "", "save_gif"], [19, 3, 1, "", "save_json"], [19, 3, 1, "", "shuffle"], [19, 3, 1, "", "split_by_tag"], [19, 3, 1, "", "summary"], [19, 3, 1, "", "sync"], [19, 4, 1, "", "tensors"], [19, 4, 1, "", "texts"], [19, 3, 1, "", "to_base64"], [19, 3, 1, "", "to_bytes"], [19, 3, 1, "", "to_dataframe"], [19, 3, 1, "", "to_dict"], [19, 3, 1, "", "to_json"], [19, 3, 1, "", "to_list"], [19, 3, 1, "", "to_protobuf"], [19, 3, 1, "", "to_pydantic_model"], [19, 3, 1, "", "to_strawberry_type"], [19, 3, 1, "", "traverse"], [19, 3, 1, "", "traverse_flat"], [19, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.elastic.ElasticConfig": [[19, 2, 1, "", "batch_size"], [19, 2, 1, "", "columns"], [19, 2, 1, "", "distance"], [19, 2, 1, "", "ef_construction"], [19, 2, 1, "", "es_config"], [19, 2, 1, "", "hosts"], [19, 2, 1, "", "index_name"], [19, 2, 1, "", "index_text"], [19, 2, 1, "", "list_like"], [19, 2, 1, "", "m"], [19, 2, 1, "", "n_dim"], [19, 2, 1, "", "root_id"], [19, 2, 1, "", "tag_indices"]], "docarray.array.match": [[20, 1, 1, "", "MatchArray"]], "docarray.array.match.MatchArray": [[20, 2, 1, "", "TYPE_MAP"], [20, 4, 1, "", "adjacency"], [20, 3, 1, "", "append"], [20, 3, 1, "", "apply"], [20, 3, 1, "", "apply_batch"], [20, 3, 1, "", "batch"], [20, 3, 1, "", "batch_ids"], [20, 4, 1, "", "blobs"], [20, 3, 1, "", "clear"], [20, 3, 1, "", "cloud_delete"], [20, 3, 1, "", "cloud_list"], [20, 3, 1, "", "cloud_pull"], [20, 3, 1, "", "cloud_push"], [20, 4, 1, "", "contents"], [20, 3, 1, "", "count"], [20, 3, 1, "", "dataloader"], [20, 3, 1, "", "embed"], [20, 3, 1, "", "embed_and_evaluate"], [20, 4, 1, "", "embeddings"], [20, 3, 1, "", "empty"], [20, 3, 1, "", "evaluate"], [20, 3, 1, "", "extend"], [20, 3, 1, "", "find"], [20, 3, 1, "", "flatten"], [20, 3, 1, "", "from_base64"], [20, 3, 1, "", "from_bytes"], [20, 3, 1, "", "from_csv"], [20, 3, 1, "", "from_dataframe"], [20, 3, 1, "", "from_dict"], [20, 3, 1, "", "from_files"], [20, 3, 1, "", "from_huggingface_datasets"], [20, 3, 1, "", "from_json"], [20, 3, 1, "", "from_lines"], [20, 3, 1, "", "from_list"], [20, 3, 1, "", "from_ndarray"], [20, 3, 1, "", "from_ndjson"], [20, 3, 1, "", "from_protobuf"], [20, 3, 1, "", "from_pydantic_model"], [20, 3, 1, "", "from_strawberry_type"], [20, 3, 1, "", "get_json_schema"], [20, 3, 1, "", "get_vocabulary"], [20, 4, 1, "", "granularity"], [20, 3, 1, "", "index"], [20, 3, 1, "", "insert"], [20, 3, 1, "", "load"], [20, 3, 1, "", "load_binary"], [20, 3, 1, "", "load_csv"], [20, 3, 1, "", "load_json"], [20, 3, 1, "", "map"], [20, 3, 1, "", "map_batch"], [20, 3, 1, "", "match"], [20, 3, 1, "", "plot_embeddings"], [20, 3, 1, "", "plot_image_sprites"], [20, 3, 1, "", "pop"], [20, 3, 1, "", "post"], [20, 3, 1, "", "pull"], [20, 3, 1, "", "push"], [20, 3, 1, "", "reduce"], [20, 3, 1, "", "reduce_all"], [20, 4, 1, "", "reference_doc"], [20, 3, 1, "", "remove"], [20, 3, 1, "", "reverse"], [20, 3, 1, "", "sample"], [20, 3, 1, "", "save"], [20, 3, 1, "", "save_binary"], [20, 3, 1, "", "save_csv"], [20, 3, 1, "", "save_embeddings_csv"], [20, 3, 1, "", "save_gif"], [20, 3, 1, "", "save_json"], [20, 3, 1, "", "shuffle"], [20, 3, 1, "", "split_by_tag"], [20, 3, 1, "", "summary"], [20, 3, 1, "", "sync"], [20, 4, 1, "", "tensors"], [20, 4, 1, "", "texts"], [20, 3, 1, "", "to_base64"], [20, 3, 1, "", "to_bytes"], [20, 3, 1, "", "to_dataframe"], [20, 3, 1, "", "to_dict"], [20, 3, 1, "", "to_json"], [20, 3, 1, "", "to_list"], [20, 3, 1, "", "to_protobuf"], [20, 3, 1, "", "to_pydantic_model"], [20, 3, 1, "", "to_strawberry_type"], [20, 3, 1, "", "traverse"], [20, 3, 1, "", "traverse_flat"], [20, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.memory": [[21, 1, 1, "", "DocumentArrayInMemory"]], "docarray.array.memory.DocumentArrayInMemory": [[21, 2, 1, "", "TYPE_MAP"], [21, 3, 1, "", "append"], [21, 3, 1, "", "apply"], [21, 3, 1, "", "apply_batch"], [21, 3, 1, "", "batch"], [21, 3, 1, "", "batch_ids"], [21, 4, 1, "", "blobs"], [21, 3, 1, "", "clear"], [21, 3, 1, "", "cloud_delete"], [21, 3, 1, "", "cloud_list"], [21, 3, 1, "", "cloud_pull"], [21, 3, 1, "", "cloud_push"], [21, 4, 1, "", "contents"], [21, 3, 1, "", "count"], [21, 3, 1, "", "dataloader"], [21, 3, 1, "", "embed"], [21, 3, 1, "", "embed_and_evaluate"], [21, 4, 1, "", "embeddings"], [21, 3, 1, "", "empty"], [21, 3, 1, "", "evaluate"], [21, 3, 1, "", "extend"], [21, 3, 1, "", "find"], [21, 3, 1, "", "flatten"], [21, 3, 1, "", "from_base64"], [21, 3, 1, "", "from_bytes"], [21, 3, 1, "", "from_csv"], [21, 3, 1, "", "from_dataframe"], [21, 3, 1, "", "from_dict"], [21, 3, 1, "", "from_files"], [21, 3, 1, "", "from_huggingface_datasets"], [21, 3, 1, "", "from_json"], [21, 3, 1, "", "from_lines"], [21, 3, 1, "", "from_list"], [21, 3, 1, "", "from_ndarray"], [21, 3, 1, "", "from_ndjson"], [21, 3, 1, "", "from_protobuf"], [21, 3, 1, "", "from_pydantic_model"], [21, 3, 1, "", "from_strawberry_type"], [21, 3, 1, "", "get_json_schema"], [21, 3, 1, "", "get_vocabulary"], [21, 3, 1, "", "index"], [21, 3, 1, "", "insert"], [21, 3, 1, "", "load"], [21, 3, 1, "", "load_binary"], [21, 3, 1, "", "load_csv"], [21, 3, 1, "", "load_json"], [21, 3, 1, "", "map"], [21, 3, 1, "", "map_batch"], [21, 3, 1, "", "match"], [21, 3, 1, "", "plot_embeddings"], [21, 3, 1, "", "plot_image_sprites"], [21, 3, 1, "", "pop"], [21, 3, 1, "", "post"], [21, 3, 1, "", "pull"], [21, 3, 1, "", "push"], [21, 3, 1, "", "reduce"], [21, 3, 1, "", "reduce_all"], [21, 3, 1, "", "remove"], [21, 3, 1, "", "reverse"], [21, 3, 1, "", "sample"], [21, 3, 1, "", "save"], [21, 3, 1, "", "save_binary"], [21, 3, 1, "", "save_csv"], [21, 3, 1, "", "save_embeddings_csv"], [21, 3, 1, "", "save_gif"], [21, 3, 1, "", "save_json"], [21, 3, 1, "", "shuffle"], [21, 3, 1, "", "split_by_tag"], [21, 3, 1, "", "summary"], [21, 3, 1, "", "sync"], [21, 4, 1, "", "tensors"], [21, 4, 1, "", "texts"], [21, 3, 1, "", "to_base64"], [21, 3, 1, "", "to_bytes"], [21, 3, 1, "", "to_dataframe"], [21, 3, 1, "", "to_dict"], [21, 3, 1, "", "to_json"], [21, 3, 1, "", "to_list"], [21, 3, 1, "", "to_protobuf"], [21, 3, 1, "", "to_pydantic_model"], [21, 3, 1, "", "to_strawberry_type"], [21, 3, 1, "", "traverse"], [21, 3, 1, "", "traverse_flat"], [21, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.mixins": [[23, 1, 1, "", "AllMixins"], [24, 0, 0, "-", "content"], [25, 0, 0, "-", "dataloader"], [27, 0, 0, "-", "delitem"], [28, 0, 0, "-", "embed"], [29, 0, 0, "-", "empty"], [30, 0, 0, "-", "evaluation"], [31, 0, 0, "-", "find"], [32, 0, 0, "-", "getattr"], [33, 0, 0, "-", "getitem"], [34, 0, 0, "-", "group"], [35, 0, 0, "-", "io"], [44, 0, 0, "-", "match"], [45, 0, 0, "-", "parallel"], [46, 0, 0, "-", "plot"], [47, 0, 0, "-", "post"], [48, 0, 0, "-", "pydantic"], [49, 0, 0, "-", "reduce"], [50, 0, 0, "-", "sample"], [51, 0, 0, "-", "setitem"], [52, 0, 0, "-", "strawberry"], [53, 0, 0, "-", "text"], [54, 0, 0, "-", "traverse"]], "docarray.array.mixins.AllMixins": [[23, 3, 1, "", "apply"], [23, 3, 1, "", "apply_batch"], [23, 3, 1, "", "batch"], [23, 3, 1, "", "batch_ids"], [23, 4, 1, "", "blobs"], [23, 3, 1, "", "cloud_delete"], [23, 3, 1, "", "cloud_list"], [23, 3, 1, "", "cloud_pull"], [23, 3, 1, "", "cloud_push"], [23, 4, 1, "", "contents"], [23, 3, 1, "", "dataloader"], [23, 3, 1, "", "embed"], [23, 3, 1, "", "embed_and_evaluate"], [23, 4, 1, "", "embeddings"], [23, 3, 1, "", "empty"], [23, 3, 1, "", "evaluate"], [23, 3, 1, "", "find"], [23, 3, 1, "", "flatten"], [23, 3, 1, "", "from_base64"], [23, 3, 1, "", "from_bytes"], [23, 3, 1, "", "from_csv"], [23, 3, 1, "", "from_dataframe"], [23, 3, 1, "", "from_dict"], [23, 3, 1, "", "from_files"], [23, 3, 1, "", "from_huggingface_datasets"], [23, 3, 1, "", "from_json"], [23, 3, 1, "", "from_lines"], [23, 3, 1, "", "from_list"], [23, 3, 1, "", "from_ndarray"], [23, 3, 1, "", "from_ndjson"], [23, 3, 1, "", "from_protobuf"], [23, 3, 1, "", "from_pydantic_model"], [23, 3, 1, "", "from_strawberry_type"], [23, 3, 1, "", "get_json_schema"], [23, 3, 1, "", "get_vocabulary"], [23, 3, 1, "", "load"], [23, 3, 1, "", "load_binary"], [23, 3, 1, "", "load_csv"], [23, 3, 1, "", "load_json"], [23, 3, 1, "", "map"], [23, 3, 1, "", "map_batch"], [23, 3, 1, "", "match"], [23, 3, 1, "", "plot_embeddings"], [23, 3, 1, "", "plot_image_sprites"], [23, 3, 1, "", "post"], [23, 3, 1, "", "pull"], [23, 3, 1, "", "push"], [23, 3, 1, "", "reduce"], [23, 3, 1, "", "reduce_all"], [23, 3, 1, "", "sample"], [23, 3, 1, "", "save"], [23, 3, 1, "", "save_binary"], [23, 3, 1, "", "save_csv"], [23, 3, 1, "", "save_embeddings_csv"], [23, 3, 1, "", "save_gif"], [23, 3, 1, "", "save_json"], [23, 3, 1, "", "shuffle"], [23, 3, 1, "", "split_by_tag"], [23, 3, 1, "", "summary"], [23, 4, 1, "", "tensors"], [23, 4, 1, "", "texts"], [23, 3, 1, "", "to_base64"], [23, 3, 1, "", "to_bytes"], [23, 3, 1, "", "to_dataframe"], [23, 3, 1, "", "to_dict"], [23, 3, 1, "", "to_json"], [23, 3, 1, "", "to_list"], [23, 3, 1, "", "to_protobuf"], [23, 3, 1, "", "to_pydantic_model"], [23, 3, 1, "", "to_strawberry_type"], [23, 3, 1, "", "traverse"], [23, 3, 1, "", "traverse_flat"], [23, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.mixins.content": [[24, 1, 1, "", "ContentPropertyMixin"]], "docarray.array.mixins.content.ContentPropertyMixin": [[24, 4, 1, "", "blobs"], [24, 4, 1, "", "contents"], [24, 4, 1, "", "embeddings"], [24, 4, 1, "", "tensors"], [24, 4, 1, "", "texts"]], "docarray.array.mixins.dataloader": [[25, 1, 1, "", "DataLoaderMixin"], [26, 0, 0, "-", "helper"]], "docarray.array.mixins.dataloader.DataLoaderMixin": [[25, 3, 1, "", "dataloader"]], "docarray.array.mixins.dataloader.helper": [[26, 1, 1, "", "DocumentArrayLoader"]], "docarray.array.mixins.dataloader.helper.DocumentArrayLoader": [[26, 3, 1, "", "apply"], [26, 3, 1, "", "apply_batch"], [26, 3, 1, "", "batch"], [26, 3, 1, "", "batch_ids"], [26, 3, 1, "", "map"], [26, 3, 1, "", "map_batch"], [26, 3, 1, "", "split_by_tag"]], "docarray.array.mixins.delitem": [[27, 1, 1, "", "DelItemMixin"]], "docarray.array.mixins.embed": [[28, 1, 1, "", "EmbedMixin"], [28, 5, 1, "", "get_framework"]], "docarray.array.mixins.embed.EmbedMixin": [[28, 3, 1, "", "embed"]], "docarray.array.mixins.empty": [[29, 1, 1, "", "EmptyMixin"]], "docarray.array.mixins.empty.EmptyMixin": [[29, 3, 1, "", "empty"]], "docarray.array.mixins.evaluation": [[30, 1, 1, "", "EvaluationMixin"]], "docarray.array.mixins.evaluation.EvaluationMixin": [[30, 3, 1, "", "embed_and_evaluate"], [30, 3, 1, "", "evaluate"]], "docarray.array.mixins.find": [[31, 1, 1, "", "FindMixin"]], "docarray.array.mixins.find.FindMixin": [[31, 3, 1, "", "find"]], "docarray.array.mixins.getattr": [[32, 1, 1, "", "GetAttributeMixin"]], "docarray.array.mixins.getitem": [[33, 1, 1, "", "GetItemMixin"]], "docarray.array.mixins.group": [[34, 1, 1, "", "GroupMixin"]], "docarray.array.mixins.group.GroupMixin": [[34, 3, 1, "", "batch"], [34, 3, 1, "", "batch_ids"], [34, 3, 1, "", "split_by_tag"]], "docarray.array.mixins.io": [[36, 0, 0, "-", "binary"], [37, 0, 0, "-", "common"], [38, 0, 0, "-", "csv"], [39, 0, 0, "-", "dataframe"], [40, 0, 0, "-", "from_gen"], [41, 0, 0, "-", "json"], [42, 0, 0, "-", "pbar"], [43, 0, 0, "-", "pushpull"]], "docarray.array.mixins.io.binary": [[36, 1, 1, "", "BinaryIOMixin"], [36, 1, 1, "", "LazyRequestReader"]], "docarray.array.mixins.io.binary.BinaryIOMixin": [[36, 3, 1, "", "from_base64"], [36, 3, 1, "", "from_bytes"], [36, 3, 1, "", "from_protobuf"], [36, 3, 1, "", "load_binary"], [36, 3, 1, "", "save_binary"], [36, 3, 1, "", "to_base64"], [36, 3, 1, "", "to_bytes"], [36, 3, 1, "", "to_protobuf"]], "docarray.array.mixins.io.common": [[37, 1, 1, "", "CommonIOMixin"]], "docarray.array.mixins.io.common.CommonIOMixin": [[37, 3, 1, "", "load"], [37, 3, 1, "", "save"]], "docarray.array.mixins.io.csv": [[38, 1, 1, "", "CsvIOMixin"]], "docarray.array.mixins.io.csv.CsvIOMixin": [[38, 3, 1, "", "load_csv"], [38, 3, 1, "", "save_csv"], [38, 3, 1, "", "save_embeddings_csv"]], "docarray.array.mixins.io.dataframe": [[39, 1, 1, "", "DataframeIOMixin"]], "docarray.array.mixins.io.dataframe.DataframeIOMixin": [[39, 3, 1, "", "from_dataframe"], [39, 3, 1, "", "to_dataframe"]], "docarray.array.mixins.io.from_gen": [[40, 1, 1, "", "FromGeneratorMixin"]], "docarray.array.mixins.io.from_gen.FromGeneratorMixin": [[40, 3, 1, "", "from_csv"], [40, 3, 1, "", "from_files"], [40, 3, 1, "", "from_huggingface_datasets"], [40, 3, 1, "", "from_lines"], [40, 3, 1, "", "from_ndarray"], [40, 3, 1, "", "from_ndjson"]], "docarray.array.mixins.io.json": [[41, 1, 1, "", "JsonIOMixin"]], "docarray.array.mixins.io.json.JsonIOMixin": [[41, 3, 1, "", "from_dict"], [41, 3, 1, "", "from_json"], [41, 3, 1, "", "from_list"], [41, 3, 1, "", "load_json"], [41, 3, 1, "", "save_json"], [41, 3, 1, "", "to_dict"], [41, 3, 1, "", "to_json"], [41, 3, 1, "", "to_list"]], "docarray.array.mixins.io.pbar": [[42, 1, 1, "", "QPSColumn"], [42, 5, 1, "", "get_pbar"], [42, 5, 1, "", "get_progressbar"]], "docarray.array.mixins.io.pbar.QPSColumn": [[42, 3, 1, "", "get_table_column"], [42, 2, 1, "", "max_refresh"], [42, 3, 1, "", "render"]], "docarray.array.mixins.io.pushpull": [[43, 1, 1, "", "PushPullMixin"]], "docarray.array.mixins.io.pushpull.PushPullMixin": [[43, 3, 1, "", "cloud_delete"], [43, 3, 1, "", "cloud_list"], [43, 3, 1, "", "cloud_pull"], [43, 3, 1, "", "cloud_push"], [43, 3, 1, "", "pull"], [43, 3, 1, "", "push"]], "docarray.array.mixins.match": [[44, 1, 1, "", "MatchMixin"]], "docarray.array.mixins.match.MatchMixin": [[44, 3, 1, "", "match"]], "docarray.array.mixins.parallel": [[45, 1, 1, "", "ParallelMixin"]], "docarray.array.mixins.parallel.ParallelMixin": [[45, 3, 1, "", "apply"], [45, 3, 1, "", "apply_batch"], [45, 3, 1, "", "map"], [45, 3, 1, "", "map_batch"]], "docarray.array.mixins.plot": [[46, 1, 1, "", "PlotMixin"]], "docarray.array.mixins.plot.PlotMixin": [[46, 3, 1, "", "plot_embeddings"], [46, 3, 1, "", "plot_image_sprites"], [46, 3, 1, "", "save_gif"], [46, 3, 1, "", "summary"]], "docarray.array.mixins.post": [[47, 1, 1, "", "PostMixin"]], "docarray.array.mixins.post.PostMixin": [[47, 3, 1, "", "post"]], "docarray.array.mixins.pydantic": [[48, 1, 1, "", "PydanticMixin"]], "docarray.array.mixins.pydantic.PydanticMixin": [[48, 3, 1, "", "from_pydantic_model"], [48, 3, 1, "", "get_json_schema"], [48, 3, 1, "", "to_pydantic_model"]], "docarray.array.mixins.reduce": [[49, 1, 1, "", "ReduceMixin"]], "docarray.array.mixins.reduce.ReduceMixin": [[49, 3, 1, "", "reduce"], [49, 3, 1, "", "reduce_all"]], "docarray.array.mixins.sample": [[50, 1, 1, "", "SampleMixin"]], "docarray.array.mixins.sample.SampleMixin": [[50, 3, 1, "", "sample"], [50, 3, 1, "", "shuffle"]], "docarray.array.mixins.setitem": [[51, 1, 1, "", "SetItemMixin"]], "docarray.array.mixins.strawberry": [[52, 1, 1, "", "StrawberryMixin"]], "docarray.array.mixins.strawberry.StrawberryMixin": [[52, 3, 1, "", "from_strawberry_type"], [52, 3, 1, "", "to_strawberry_type"]], "docarray.array.mixins.text": [[53, 1, 1, "", "TextToolsMixin"]], "docarray.array.mixins.text.TextToolsMixin": [[53, 3, 1, "", "get_vocabulary"]], "docarray.array.mixins.traverse": [[54, 1, 1, "", "TraverseMixin"]], "docarray.array.mixins.traverse.TraverseMixin": [[54, 3, 1, "", "flatten"], [54, 3, 1, "", "traverse"], [54, 3, 1, "", "traverse_flat"], [54, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.qdrant": [[55, 1, 1, "", "DocumentArrayQdrant"], [55, 1, 1, "", "QdrantConfig"]], "docarray.array.qdrant.DocumentArrayQdrant": [[55, 2, 1, "", "TYPE_MAP"], [55, 3, 1, "", "append"], [55, 3, 1, "", "apply"], [55, 3, 1, "", "apply_batch"], [55, 3, 1, "", "batch"], [55, 3, 1, "", "batch_ids"], [55, 4, 1, "", "blobs"], [55, 3, 1, "", "clear"], [55, 4, 1, "", "client"], [55, 3, 1, "", "cloud_delete"], [55, 3, 1, "", "cloud_list"], [55, 3, 1, "", "cloud_pull"], [55, 3, 1, "", "cloud_push"], [55, 4, 1, "", "collection_name"], [55, 4, 1, "", "collection_name_meta"], [55, 4, 1, "", "config"], [55, 4, 1, "", "contents"], [55, 3, 1, "", "count"], [55, 3, 1, "", "dataloader"], [55, 4, 1, "", "distance"], [55, 3, 1, "", "embed"], [55, 3, 1, "", "embed_and_evaluate"], [55, 4, 1, "", "embeddings"], [55, 3, 1, "", "empty"], [55, 3, 1, "", "evaluate"], [55, 3, 1, "", "extend"], [55, 3, 1, "", "find"], [55, 3, 1, "", "flatten"], [55, 3, 1, "", "from_base64"], [55, 3, 1, "", "from_bytes"], [55, 3, 1, "", "from_csv"], [55, 3, 1, "", "from_dataframe"], [55, 3, 1, "", "from_dict"], [55, 3, 1, "", "from_files"], [55, 3, 1, "", "from_huggingface_datasets"], [55, 3, 1, "", "from_json"], [55, 3, 1, "", "from_lines"], [55, 3, 1, "", "from_list"], [55, 3, 1, "", "from_ndarray"], [55, 3, 1, "", "from_ndjson"], [55, 3, 1, "", "from_protobuf"], [55, 3, 1, "", "from_pydantic_model"], [55, 3, 1, "", "from_strawberry_type"], [55, 3, 1, "", "get_json_schema"], [55, 3, 1, "", "get_vocabulary"], [55, 3, 1, "", "index"], [55, 3, 1, "", "insert"], [55, 3, 1, "", "load"], [55, 3, 1, "", "load_binary"], [55, 3, 1, "", "load_csv"], [55, 3, 1, "", "load_json"], [55, 3, 1, "", "map"], [55, 3, 1, "", "map_batch"], [55, 3, 1, "", "match"], [55, 4, 1, "", "n_dim"], [55, 3, 1, "", "plot_embeddings"], [55, 3, 1, "", "plot_image_sprites"], [55, 3, 1, "", "pop"], [55, 3, 1, "", "post"], [55, 3, 1, "", "pull"], [55, 3, 1, "", "push"], [55, 3, 1, "", "reduce"], [55, 3, 1, "", "reduce_all"], [55, 3, 1, "", "remove"], [55, 3, 1, "", "reverse"], [55, 3, 1, "", "sample"], [55, 3, 1, "", "save"], [55, 3, 1, "", "save_binary"], [55, 3, 1, "", "save_csv"], [55, 3, 1, "", "save_embeddings_csv"], [55, 3, 1, "", "save_gif"], [55, 3, 1, "", "save_json"], [55, 3, 1, "", "scan"], [55, 4, 1, "", "scroll_batch_size"], [55, 4, 1, "", "serialization_config"], [55, 4, 1, "", "serialize_config"], [55, 3, 1, "", "shuffle"], [55, 3, 1, "", "split_by_tag"], [55, 3, 1, "", "summary"], [55, 3, 1, "", "sync"], [55, 4, 1, "", "tensors"], [55, 4, 1, "", "texts"], [55, 3, 1, "", "to_base64"], [55, 3, 1, "", "to_bytes"], [55, 3, 1, "", "to_dataframe"], [55, 3, 1, "", "to_dict"], [55, 3, 1, "", "to_json"], [55, 3, 1, "", "to_list"], [55, 3, 1, "", "to_protobuf"], [55, 3, 1, "", "to_pydantic_model"], [55, 3, 1, "", "to_strawberry_type"], [55, 3, 1, "", "traverse"], [55, 3, 1, "", "traverse_flat"], [55, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.qdrant.QdrantConfig": [[55, 2, 1, "", "api_key"], [55, 2, 1, "", "collection_name"], [55, 2, 1, "", "columns"], [55, 2, 1, "", "distance"], [55, 2, 1, "", "ef_construct"], [55, 2, 1, "", "full_scan_threshold"], [55, 2, 1, "", "grpc_port"], [55, 2, 1, "", "host"], [55, 2, 1, "", "https"], [55, 2, 1, "", "list_like"], [55, 2, 1, "", "m"], [55, 2, 1, "", "n_dim"], [55, 2, 1, "", "port"], [55, 2, 1, "", "prefer_grpc"], [55, 2, 1, "", "root_id"], [55, 2, 1, "", "scroll_batch_size"], [55, 2, 1, "", "serialize_config"]], "docarray.array.queryset": [[57, 0, 0, "-", "lookup"], [58, 0, 0, "-", "parser"]], "docarray.array.queryset.lookup": [[57, 1, 1, "", "LookupLeaf"], [57, 1, 1, "", "LookupNode"], [57, 1, 1, "", "LookupTreeElem"], [57, 6, 1, "", "LookupyError"], [57, 2, 1, "", "Q"], [57, 5, 1, "", "dunder_partition"], [57, 5, 1, "", "guard_Q"], [57, 5, 1, "", "guard_iter"], [57, 5, 1, "", "guard_list"], [57, 5, 1, "", "guard_str"], [57, 5, 1, "", "guard_type"], [57, 5, 1, "", "iff"], [57, 5, 1, "", "iff_not_none"], [57, 5, 1, "", "lookup"]], "docarray.array.queryset.lookup.LookupLeaf": [[57, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupNode": [[57, 3, 1, "", "add_child"], [57, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupTreeElem": [[57, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupyError": [[57, 2, 1, "", "args"], [57, 3, 1, "", "with_traceback"]], "docarray.array.queryset.parser": [[58, 1, 1, "", "QueryParser"]], "docarray.array.queryset.parser.QueryParser": [[58, 3, 1, "", "evaluate"]], "docarray.array.redis": [[59, 1, 1, "", "DocumentArrayRedis"], [59, 1, 1, "", "RedisConfig"]], "docarray.array.redis.DocumentArrayRedis": [[59, 2, 1, "", "TYPE_MAP"], [59, 3, 1, "", "append"], [59, 3, 1, "", "apply"], [59, 3, 1, "", "apply_batch"], [59, 3, 1, "", "batch"], [59, 3, 1, "", "batch_ids"], [59, 4, 1, "", "blobs"], [59, 3, 1, "", "clear"], [59, 3, 1, "", "cloud_delete"], [59, 3, 1, "", "cloud_list"], [59, 3, 1, "", "cloud_pull"], [59, 3, 1, "", "cloud_push"], [59, 4, 1, "", "contents"], [59, 3, 1, "", "count"], [59, 3, 1, "", "dataloader"], [59, 3, 1, "", "embed"], [59, 3, 1, "", "embed_and_evaluate"], [59, 4, 1, "", "embeddings"], [59, 3, 1, "", "empty"], [59, 3, 1, "", "evaluate"], [59, 3, 1, "", "extend"], [59, 3, 1, "", "find"], [59, 3, 1, "", "flatten"], [59, 3, 1, "", "from_base64"], [59, 3, 1, "", "from_bytes"], [59, 3, 1, "", "from_csv"], [59, 3, 1, "", "from_dataframe"], [59, 3, 1, "", "from_dict"], [59, 3, 1, "", "from_files"], [59, 3, 1, "", "from_huggingface_datasets"], [59, 3, 1, "", "from_json"], [59, 3, 1, "", "from_lines"], [59, 3, 1, "", "from_list"], [59, 3, 1, "", "from_ndarray"], [59, 3, 1, "", "from_ndjson"], [59, 3, 1, "", "from_protobuf"], [59, 3, 1, "", "from_pydantic_model"], [59, 3, 1, "", "from_strawberry_type"], [59, 3, 1, "", "get_json_schema"], [59, 3, 1, "", "get_vocabulary"], [59, 3, 1, "", "index"], [59, 3, 1, "", "insert"], [59, 3, 1, "", "load"], [59, 3, 1, "", "load_binary"], [59, 3, 1, "", "load_csv"], [59, 3, 1, "", "load_json"], [59, 3, 1, "", "map"], [59, 3, 1, "", "map_batch"], [59, 3, 1, "", "match"], [59, 3, 1, "", "plot_embeddings"], [59, 3, 1, "", "plot_image_sprites"], [59, 3, 1, "", "pop"], [59, 3, 1, "", "post"], [59, 3, 1, "", "pull"], [59, 3, 1, "", "push"], [59, 3, 1, "", "reduce"], [59, 3, 1, "", "reduce_all"], [59, 3, 1, "", "remove"], [59, 3, 1, "", "reverse"], [59, 3, 1, "", "sample"], [59, 3, 1, "", "save"], [59, 3, 1, "", "save_binary"], [59, 3, 1, "", "save_csv"], [59, 3, 1, "", "save_embeddings_csv"], [59, 3, 1, "", "save_gif"], [59, 3, 1, "", "save_json"], [59, 3, 1, "", "shuffle"], [59, 3, 1, "", "split_by_tag"], [59, 3, 1, "", "summary"], [59, 3, 1, "", "sync"], [59, 4, 1, "", "tensors"], [59, 4, 1, "", "texts"], [59, 3, 1, "", "to_base64"], [59, 3, 1, "", "to_bytes"], [59, 3, 1, "", "to_dataframe"], [59, 3, 1, "", "to_dict"], [59, 3, 1, "", "to_json"], [59, 3, 1, "", "to_list"], [59, 3, 1, "", "to_protobuf"], [59, 3, 1, "", "to_pydantic_model"], [59, 3, 1, "", "to_strawberry_type"], [59, 3, 1, "", "traverse"], [59, 3, 1, "", "traverse_flat"], [59, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.redis.RedisConfig": [[59, 2, 1, "", "batch_size"], [59, 2, 1, "", "block_size"], [59, 2, 1, "", "columns"], [59, 2, 1, "", "distance"], [59, 2, 1, "", "ef_construction"], [59, 2, 1, "", "ef_runtime"], [59, 2, 1, "", "host"], [59, 2, 1, "", "index_name"], [59, 2, 1, "", "index_text"], [59, 2, 1, "", "initial_cap"], [59, 2, 1, "", "list_like"], [59, 2, 1, "", "m"], [59, 2, 1, "", "method"], [59, 2, 1, "", "n_dim"], [59, 2, 1, "", "port"], [59, 2, 1, "", "redis_config"], [59, 2, 1, "", "root_id"], [59, 2, 1, "", "tag_indices"], [59, 2, 1, "", "update_schema"]], "docarray.array.sqlite": [[60, 1, 1, "", "DocumentArraySqlite"], [60, 1, 1, "", "SqliteConfig"]], "docarray.array.sqlite.DocumentArraySqlite": [[60, 2, 1, "", "TYPE_MAP"], [60, 3, 1, "", "append"], [60, 3, 1, "", "apply"], [60, 3, 1, "", "apply_batch"], [60, 3, 1, "", "batch"], [60, 3, 1, "", "batch_ids"], [60, 4, 1, "", "blobs"], [60, 3, 1, "", "clear"], [60, 3, 1, "", "cloud_delete"], [60, 3, 1, "", "cloud_list"], [60, 3, 1, "", "cloud_pull"], [60, 3, 1, "", "cloud_push"], [60, 4, 1, "", "contents"], [60, 3, 1, "", "count"], [60, 3, 1, "", "dataloader"], [60, 3, 1, "", "embed"], [60, 3, 1, "", "embed_and_evaluate"], [60, 4, 1, "", "embeddings"], [60, 3, 1, "", "empty"], [60, 3, 1, "", "evaluate"], [60, 3, 1, "", "extend"], [60, 3, 1, "", "find"], [60, 3, 1, "", "flatten"], [60, 3, 1, "", "from_base64"], [60, 3, 1, "", "from_bytes"], [60, 3, 1, "", "from_csv"], [60, 3, 1, "", "from_dataframe"], [60, 3, 1, "", "from_dict"], [60, 3, 1, "", "from_files"], [60, 3, 1, "", "from_huggingface_datasets"], [60, 3, 1, "", "from_json"], [60, 3, 1, "", "from_lines"], [60, 3, 1, "", "from_list"], [60, 3, 1, "", "from_ndarray"], [60, 3, 1, "", "from_ndjson"], [60, 3, 1, "", "from_protobuf"], [60, 3, 1, "", "from_pydantic_model"], [60, 3, 1, "", "from_strawberry_type"], [60, 3, 1, "", "get_json_schema"], [60, 3, 1, "", "get_vocabulary"], [60, 3, 1, "", "index"], [60, 3, 1, "", "insert"], [60, 3, 1, "", "load"], [60, 3, 1, "", "load_binary"], [60, 3, 1, "", "load_csv"], [60, 3, 1, "", "load_json"], [60, 3, 1, "", "map"], [60, 3, 1, "", "map_batch"], [60, 3, 1, "", "match"], [60, 3, 1, "", "plot_embeddings"], [60, 3, 1, "", "plot_image_sprites"], [60, 3, 1, "", "pop"], [60, 3, 1, "", "post"], [60, 3, 1, "", "pull"], [60, 3, 1, "", "push"], [60, 3, 1, "", "reduce"], [60, 3, 1, "", "reduce_all"], [60, 3, 1, "", "remove"], [60, 3, 1, "", "reverse"], [60, 3, 1, "", "sample"], [60, 3, 1, "", "save"], [60, 3, 1, "", "save_binary"], [60, 3, 1, "", "save_csv"], [60, 3, 1, "", "save_embeddings_csv"], [60, 3, 1, "", "save_gif"], [60, 3, 1, "", "save_json"], [60, 2, 1, "", "schema_version"], [60, 3, 1, "", "shuffle"], [60, 3, 1, "", "split_by_tag"], [60, 3, 1, "", "summary"], [60, 3, 1, "", "sync"], [60, 4, 1, "", "tensors"], [60, 4, 1, "", "texts"], [60, 3, 1, "", "to_base64"], [60, 3, 1, "", "to_bytes"], [60, 3, 1, "", "to_dataframe"], [60, 3, 1, "", "to_dict"], [60, 3, 1, "", "to_json"], [60, 3, 1, "", "to_list"], [60, 3, 1, "", "to_protobuf"], [60, 3, 1, "", "to_pydantic_model"], [60, 3, 1, "", "to_strawberry_type"], [60, 3, 1, "", "traverse"], [60, 3, 1, "", "traverse_flat"], [60, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.sqlite.SqliteConfig": [[60, 2, 1, "", "conn_config"], [60, 2, 1, "", "connection"], [60, 2, 1, "", "journal_mode"], [60, 2, 1, "", "list_like"], [60, 2, 1, "", "root_id"], [60, 2, 1, "", "serialize_config"], [60, 2, 1, "", "synchronous"], [60, 2, 1, "", "table_name"]], "docarray.array.storage": [[62, 0, 0, "-", "annlite"], [68, 0, 0, "-", "base"], [73, 0, 0, "-", "elastic"], [78, 0, 0, "-", "memory"], [88, 0, 0, "-", "qdrant"], [94, 0, 0, "-", "redis"], [99, 0, 0, "-", "registry"], [100, 0, 0, "-", "sqlite"], [105, 0, 0, "-", "weaviate"]], "docarray.array.storage.annlite": [[62, 1, 1, "", "AnnliteConfig"], [62, 1, 1, "", "StorageMixins"], [63, 0, 0, "-", "backend"], [64, 0, 0, "-", "find"], [65, 0, 0, "-", "getsetdel"], [66, 0, 0, "-", "helper"], [67, 0, 0, "-", "seqlike"]], "docarray.array.storage.annlite.AnnliteConfig": [[62, 2, 1, "", "columns"], [62, 2, 1, "", "data_path"], [62, 2, 1, "", "ef_construction"], [62, 2, 1, "", "ef_search"], [62, 2, 1, "", "list_like"], [62, 2, 1, "", "max_connection"], [62, 2, 1, "", "metric"], [62, 2, 1, "", "n_components"], [62, 2, 1, "", "n_dim"], [62, 2, 1, "", "root_id"], [62, 2, 1, "", "serialize_config"]], "docarray.array.storage.annlite.StorageMixins": [[62, 2, 1, "", "TYPE_MAP"], [62, 3, 1, "", "append"], [62, 3, 1, "", "clear"], [62, 3, 1, "", "count"], [62, 3, 1, "", "extend"], [62, 3, 1, "", "index"], [62, 3, 1, "", "insert"], [62, 3, 1, "", "pop"], [62, 3, 1, "", "remove"], [62, 3, 1, "", "reverse"], [62, 3, 1, "", "sync"]], "docarray.array.storage.annlite.backend": [[63, 1, 1, "", "AnnliteConfig"], [63, 1, 1, "", "BackendMixin"]], "docarray.array.storage.annlite.backend.AnnliteConfig": [[63, 2, 1, "", "columns"], [63, 2, 1, "", "data_path"], [63, 2, 1, "", "ef_construction"], [63, 2, 1, "", "ef_search"], [63, 2, 1, "", "list_like"], [63, 2, 1, "", "max_connection"], [63, 2, 1, "", "metric"], [63, 2, 1, "", "n_components"], [63, 2, 1, "", "n_dim"], [63, 2, 1, "", "root_id"], [63, 2, 1, "", "serialize_config"]], "docarray.array.storage.annlite.backend.BackendMixin": [[63, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.annlite.find": [[64, 1, 1, "", "FindMixin"]], "docarray.array.storage.annlite.getsetdel": [[65, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.annlite.getsetdel.GetSetDelMixin": [[65, 3, 1, "", "sync"]], "docarray.array.storage.annlite.helper": [[66, 1, 1, "", "OffsetMapping"]], "docarray.array.storage.annlite.helper.OffsetMapping": [[66, 3, 1, "", "clear"], [66, 3, 1, "", "close"], [66, 3, 1, "", "commit"], [66, 3, 1, "", "create_table"], [66, 3, 1, "", "del_at_offset"], [66, 3, 1, "", "del_at_offsets"], [66, 3, 1, "", "drop"], [66, 3, 1, "", "drop_table"], [66, 3, 1, "", "dump"], [66, 3, 1, "", "execute"], [66, 3, 1, "", "execute_many"], [66, 3, 1, "", "extend_doc_ids"], [66, 3, 1, "", "get_all_ids"], [66, 3, 1, "", "get_id_by_offset"], [66, 3, 1, "", "get_ids_by_offsets"], [66, 3, 1, "", "get_offset_by_id"], [66, 3, 1, "", "get_offsets_by_ids"], [66, 3, 1, "", "insert_at_offset"], [66, 3, 1, "", "load"], [66, 4, 1, "", "name"], [66, 4, 1, "", "schema"], [66, 3, 1, "", "set_at_offset"], [66, 3, 1, "", "shift_offset"], [66, 4, 1, "", "size"]], "docarray.array.storage.annlite.seqlike": [[67, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.annlite.seqlike.SequenceLikeMixin": [[67, 3, 1, "", "append"], [67, 3, 1, "", "clear"], [67, 3, 1, "", "count"], [67, 3, 1, "", "extend"], [67, 3, 1, "", "index"], [67, 3, 1, "", "insert"], [67, 3, 1, "", "pop"], [67, 3, 1, "", "remove"], [67, 3, 1, "", "reverse"]], "docarray.array.storage.base": [[69, 0, 0, "-", "backend"], [70, 0, 0, "-", "getsetdel"], [71, 0, 0, "-", "helper"], [72, 0, 0, "-", "seqlike"]], "docarray.array.storage.base.backend": [[69, 1, 1, "", "BaseBackendMixin"], [69, 1, 1, "", "TypeMap"]], "docarray.array.storage.base.backend.BaseBackendMixin": [[69, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.base.backend.TypeMap": [[69, 4, 1, "", "converter"], [69, 3, 1, "", "count"], [69, 3, 1, "", "index"], [69, 4, 1, "", "type"]], "docarray.array.storage.base.getsetdel": [[70, 1, 1, "", "BaseGetSetDelMixin"]], "docarray.array.storage.base.getsetdel.BaseGetSetDelMixin": [[70, 3, 1, "", "sync"]], "docarray.array.storage.base.helper": [[71, 1, 1, "", "Offset2ID"]], "docarray.array.storage.base.helper.Offset2ID": [[71, 3, 1, "", "append"], [71, 3, 1, "", "clear"], [71, 3, 1, "", "delete_by_id"], [71, 3, 1, "", "delete_by_ids"], [71, 3, 1, "", "delete_by_offset"], [71, 3, 1, "", "extend"], [71, 3, 1, "", "get_id"], [71, 3, 1, "", "index"], [71, 3, 1, "", "insert"], [71, 3, 1, "", "load"], [71, 3, 1, "", "save"], [71, 3, 1, "", "update"], [71, 3, 1, "", "update_ids"]], "docarray.array.storage.base.seqlike": [[72, 1, 1, "", "BaseSequenceLikeMixin"]], "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin": [[72, 3, 1, "", "append"], [72, 3, 1, "", "clear"], [72, 3, 1, "", "count"], [72, 3, 1, "", "extend"], [72, 3, 1, "", "index"], [72, 3, 1, "", "insert"], [72, 3, 1, "", "pop"], [72, 3, 1, "", "remove"], [72, 3, 1, "", "reverse"]], "docarray.array.storage.elastic": [[73, 1, 1, "", "ElasticConfig"], [73, 1, 1, "", "StorageMixins"], [74, 0, 0, "-", "backend"], [75, 0, 0, "-", "find"], [76, 0, 0, "-", "getsetdel"], [77, 0, 0, "-", "seqlike"]], "docarray.array.storage.elastic.ElasticConfig": [[73, 2, 1, "", "batch_size"], [73, 2, 1, "", "columns"], [73, 2, 1, "", "distance"], [73, 2, 1, "", "ef_construction"], [73, 2, 1, "", "es_config"], [73, 2, 1, "", "hosts"], [73, 2, 1, "", "index_name"], [73, 2, 1, "", "index_text"], [73, 2, 1, "", "list_like"], [73, 2, 1, "", "m"], [73, 2, 1, "", "n_dim"], [73, 2, 1, "", "root_id"], [73, 2, 1, "", "tag_indices"]], "docarray.array.storage.elastic.StorageMixins": [[73, 2, 1, "", "MAX_ES_RETURNED_DOCS"], [73, 2, 1, "", "TYPE_MAP"], [73, 3, 1, "", "append"], [73, 3, 1, "", "clear"], [73, 3, 1, "", "count"], [73, 3, 1, "", "extend"], [73, 3, 1, "", "find"], [73, 3, 1, "", "index"], [73, 3, 1, "", "insert"], [73, 3, 1, "", "pop"], [73, 3, 1, "", "remove"], [73, 3, 1, "", "reverse"], [73, 3, 1, "", "sync"]], "docarray.array.storage.elastic.backend": [[74, 1, 1, "", "BackendMixin"], [74, 1, 1, "", "ElasticConfig"]], "docarray.array.storage.elastic.backend.BackendMixin": [[74, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.elastic.backend.ElasticConfig": [[74, 2, 1, "", "batch_size"], [74, 2, 1, "", "columns"], [74, 2, 1, "", "distance"], [74, 2, 1, "", "ef_construction"], [74, 2, 1, "", "es_config"], [74, 2, 1, "", "hosts"], [74, 2, 1, "", "index_name"], [74, 2, 1, "", "index_text"], [74, 2, 1, "", "list_like"], [74, 2, 1, "", "m"], [74, 2, 1, "", "n_dim"], [74, 2, 1, "", "root_id"], [74, 2, 1, "", "tag_indices"]], "docarray.array.storage.elastic.find": [[75, 1, 1, "", "FindMixin"]], "docarray.array.storage.elastic.find.FindMixin": [[75, 3, 1, "", "find"]], "docarray.array.storage.elastic.getsetdel": [[76, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.elastic.getsetdel.GetSetDelMixin": [[76, 2, 1, "", "MAX_ES_RETURNED_DOCS"], [76, 3, 1, "", "sync"]], "docarray.array.storage.elastic.seqlike": [[77, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.elastic.seqlike.SequenceLikeMixin": [[77, 3, 1, "", "append"], [77, 3, 1, "", "clear"], [77, 3, 1, "", "count"], [77, 3, 1, "", "extend"], [77, 3, 1, "", "index"], [77, 3, 1, "", "insert"], [77, 3, 1, "", "pop"], [77, 3, 1, "", "remove"], [77, 3, 1, "", "reverse"]], "docarray.array.storage.memory": [[78, 1, 1, "", "StorageMixins"], [79, 0, 0, "-", "backend"], [80, 0, 0, "-", "find"], [81, 0, 0, "-", "getsetdel"], [82, 0, 0, "-", "seqlike"]], "docarray.array.storage.memory.StorageMixins": [[78, 2, 1, "", "TYPE_MAP"], [78, 3, 1, "", "append"], [78, 3, 1, "", "clear"], [78, 3, 1, "", "count"], [78, 3, 1, "", "extend"], [78, 3, 1, "", "index"], [78, 3, 1, "", "insert"], [78, 3, 1, "", "pop"], [78, 3, 1, "", "remove"], [78, 3, 1, "", "reverse"], [78, 3, 1, "", "sync"]], "docarray.array.storage.memory.backend": [[79, 1, 1, "", "BackendMixin"], [79, 5, 1, "", "needs_id2offset_rebuild"]], "docarray.array.storage.memory.backend.BackendMixin": [[79, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.memory.find": [[80, 1, 1, "", "FindMixin"]], "docarray.array.storage.memory.getsetdel": [[81, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.memory.getsetdel.GetSetDelMixin": [[81, 3, 1, "", "sync"]], "docarray.array.storage.memory.seqlike": [[82, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.memory.seqlike.SequenceLikeMixin": [[82, 3, 1, "", "append"], [82, 3, 1, "", "clear"], [82, 3, 1, "", "count"], [82, 3, 1, "", "extend"], [82, 3, 1, "", "index"], [82, 3, 1, "", "insert"], [82, 3, 1, "", "pop"], [82, 3, 1, "", "remove"], [82, 3, 1, "", "reverse"]], "docarray.array.storage.qdrant": [[88, 1, 1, "", "QdrantConfig"], [88, 1, 1, "", "StorageMixins"], [89, 0, 0, "-", "backend"], [90, 0, 0, "-", "find"], [91, 0, 0, "-", "getsetdel"], [92, 0, 0, "-", "helper"], [93, 0, 0, "-", "seqlike"]], "docarray.array.storage.qdrant.QdrantConfig": [[88, 2, 1, "", "api_key"], [88, 2, 1, "", "collection_name"], [88, 2, 1, "", "columns"], [88, 2, 1, "", "distance"], [88, 2, 1, "", "ef_construct"], [88, 2, 1, "", "full_scan_threshold"], [88, 2, 1, "", "grpc_port"], [88, 2, 1, "", "host"], [88, 2, 1, "", "https"], [88, 2, 1, "", "list_like"], [88, 2, 1, "", "m"], [88, 2, 1, "", "n_dim"], [88, 2, 1, "", "port"], [88, 2, 1, "", "prefer_grpc"], [88, 2, 1, "", "root_id"], [88, 2, 1, "", "scroll_batch_size"], [88, 2, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.StorageMixins": [[88, 2, 1, "", "TYPE_MAP"], [88, 3, 1, "", "append"], [88, 3, 1, "", "clear"], [88, 4, 1, "", "client"], [88, 4, 1, "", "collection_name"], [88, 4, 1, "", "collection_name_meta"], [88, 4, 1, "", "config"], [88, 3, 1, "", "count"], [88, 4, 1, "", "distance"], [88, 3, 1, "", "extend"], [88, 3, 1, "", "index"], [88, 3, 1, "", "insert"], [88, 4, 1, "", "n_dim"], [88, 3, 1, "", "pop"], [88, 3, 1, "", "remove"], [88, 3, 1, "", "reverse"], [88, 3, 1, "", "scan"], [88, 4, 1, "", "scroll_batch_size"], [88, 4, 1, "", "serialization_config"], [88, 4, 1, "", "serialize_config"], [88, 3, 1, "", "sync"]], "docarray.array.storage.qdrant.backend": [[89, 1, 1, "", "BackendMixin"], [89, 1, 1, "", "QdrantConfig"]], "docarray.array.storage.qdrant.backend.BackendMixin": [[89, 2, 1, "", "TYPE_MAP"], [89, 4, 1, "", "client"], [89, 4, 1, "", "collection_name"], [89, 4, 1, "", "distance"]], "docarray.array.storage.qdrant.backend.QdrantConfig": [[89, 2, 1, "", "api_key"], [89, 2, 1, "", "collection_name"], [89, 2, 1, "", "columns"], [89, 2, 1, "", "distance"], [89, 2, 1, "", "ef_construct"], [89, 2, 1, "", "full_scan_threshold"], [89, 2, 1, "", "grpc_port"], [89, 2, 1, "", "host"], [89, 2, 1, "", "https"], [89, 2, 1, "", "list_like"], [89, 2, 1, "", "m"], [89, 2, 1, "", "n_dim"], [89, 2, 1, "", "port"], [89, 2, 1, "", "prefer_grpc"], [89, 2, 1, "", "root_id"], [89, 2, 1, "", "scroll_batch_size"], [89, 2, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.find": [[90, 1, 1, "", "FindMixin"]], "docarray.array.storage.qdrant.find.FindMixin": [[90, 4, 1, "", "client"], [90, 4, 1, "", "collection_name"], [90, 4, 1, "", "distance"], [90, 4, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.getsetdel": [[91, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin": [[91, 4, 1, "", "client"], [91, 4, 1, "", "collection_name"], [91, 4, 1, "", "n_dim"], [91, 3, 1, "", "scan"], [91, 4, 1, "", "scroll_batch_size"], [91, 4, 1, "", "serialization_config"], [91, 3, 1, "", "sync"]], "docarray.array.storage.qdrant.seqlike": [[93, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin": [[93, 3, 1, "", "append"], [93, 3, 1, "", "clear"], [93, 4, 1, "", "client"], [93, 4, 1, "", "collection_name"], [93, 4, 1, "", "config"], [93, 3, 1, "", "count"], [93, 3, 1, "", "extend"], [93, 3, 1, "", "index"], [93, 3, 1, "", "insert"], [93, 3, 1, "", "pop"], [93, 3, 1, "", "remove"], [93, 3, 1, "", "reverse"]], "docarray.array.storage.redis": [[94, 1, 1, "", "RedisConfig"], [94, 1, 1, "", "StorageMixins"], [95, 0, 0, "-", "backend"], [96, 0, 0, "-", "find"], [97, 0, 0, "-", "getsetdel"], [98, 0, 0, "-", "seqlike"]], "docarray.array.storage.redis.RedisConfig": [[94, 2, 1, "", "batch_size"], [94, 2, 1, "", "block_size"], [94, 2, 1, "", "columns"], [94, 2, 1, "", "distance"], [94, 2, 1, "", "ef_construction"], [94, 2, 1, "", "ef_runtime"], [94, 2, 1, "", "host"], [94, 2, 1, "", "index_name"], [94, 2, 1, "", "index_text"], [94, 2, 1, "", "initial_cap"], [94, 2, 1, "", "list_like"], [94, 2, 1, "", "m"], [94, 2, 1, "", "method"], [94, 2, 1, "", "n_dim"], [94, 2, 1, "", "port"], [94, 2, 1, "", "redis_config"], [94, 2, 1, "", "root_id"], [94, 2, 1, "", "tag_indices"], [94, 2, 1, "", "update_schema"]], "docarray.array.storage.redis.StorageMixins": [[94, 2, 1, "", "TYPE_MAP"], [94, 3, 1, "", "append"], [94, 3, 1, "", "clear"], [94, 3, 1, "", "count"], [94, 3, 1, "", "extend"], [94, 3, 1, "", "find"], [94, 3, 1, "", "index"], [94, 3, 1, "", "insert"], [94, 3, 1, "", "pop"], [94, 3, 1, "", "remove"], [94, 3, 1, "", "reverse"], [94, 3, 1, "", "sync"]], "docarray.array.storage.redis.backend": [[95, 1, 1, "", "BackendMixin"], [95, 1, 1, "", "RedisConfig"]], "docarray.array.storage.redis.backend.BackendMixin": [[95, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.redis.backend.RedisConfig": [[95, 2, 1, "", "batch_size"], [95, 2, 1, "", "block_size"], [95, 2, 1, "", "columns"], [95, 2, 1, "", "distance"], [95, 2, 1, "", "ef_construction"], [95, 2, 1, "", "ef_runtime"], [95, 2, 1, "", "host"], [95, 2, 1, "", "index_name"], [95, 2, 1, "", "index_text"], [95, 2, 1, "", "initial_cap"], [95, 2, 1, "", "list_like"], [95, 2, 1, "", "m"], [95, 2, 1, "", "method"], [95, 2, 1, "", "n_dim"], [95, 2, 1, "", "port"], [95, 2, 1, "", "redis_config"], [95, 2, 1, "", "root_id"], [95, 2, 1, "", "tag_indices"], [95, 2, 1, "", "update_schema"]], "docarray.array.storage.redis.find": [[96, 1, 1, "", "FindMixin"]], "docarray.array.storage.redis.find.FindMixin": [[96, 3, 1, "", "find"]], "docarray.array.storage.redis.getsetdel": [[97, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.redis.getsetdel.GetSetDelMixin": [[97, 3, 1, "", "sync"]], "docarray.array.storage.redis.seqlike": [[98, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.redis.seqlike.SequenceLikeMixin": [[98, 3, 1, "", "append"], [98, 3, 1, "", "clear"], [98, 3, 1, "", "count"], [98, 3, 1, "", "extend"], [98, 3, 1, "", "index"], [98, 3, 1, "", "insert"], [98, 3, 1, "", "pop"], [98, 3, 1, "", "remove"], [98, 3, 1, "", "reverse"]], "docarray.array.storage.sqlite": [[100, 1, 1, "", "SqliteConfig"], [100, 1, 1, "", "StorageMixins"], [101, 0, 0, "-", "backend"], [102, 0, 0, "-", "getsetdel"], [103, 0, 0, "-", "helper"], [104, 0, 0, "-", "seqlike"]], "docarray.array.storage.sqlite.SqliteConfig": [[100, 2, 1, "", "conn_config"], [100, 2, 1, "", "connection"], [100, 2, 1, "", "journal_mode"], [100, 2, 1, "", "list_like"], [100, 2, 1, "", "root_id"], [100, 2, 1, "", "serialize_config"], [100, 2, 1, "", "synchronous"], [100, 2, 1, "", "table_name"]], "docarray.array.storage.sqlite.StorageMixins": [[100, 2, 1, "", "TYPE_MAP"], [100, 3, 1, "", "append"], [100, 3, 1, "", "clear"], [100, 3, 1, "", "count"], [100, 3, 1, "", "extend"], [100, 3, 1, "", "index"], [100, 3, 1, "", "insert"], [100, 3, 1, "", "pop"], [100, 3, 1, "", "remove"], [100, 3, 1, "", "reverse"], [100, 2, 1, "", "schema_version"], [100, 3, 1, "", "sync"]], "docarray.array.storage.sqlite.backend": [[101, 1, 1, "", "BackendMixin"], [101, 1, 1, "", "SqliteConfig"]], "docarray.array.storage.sqlite.backend.BackendMixin": [[101, 2, 1, "", "TYPE_MAP"], [101, 2, 1, "", "schema_version"]], "docarray.array.storage.sqlite.backend.SqliteConfig": [[101, 2, 1, "", "conn_config"], [101, 2, 1, "", "connection"], [101, 2, 1, "", "journal_mode"], [101, 2, 1, "", "list_like"], [101, 2, 1, "", "root_id"], [101, 2, 1, "", "serialize_config"], [101, 2, 1, "", "synchronous"], [101, 2, 1, "", "table_name"]], "docarray.array.storage.sqlite.getsetdel": [[102, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.sqlite.getsetdel.GetSetDelMixin": [[102, 3, 1, "", "sync"]], "docarray.array.storage.sqlite.helper": [[103, 5, 1, "", "initialize_table"]], "docarray.array.storage.sqlite.seqlike": [[104, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin": [[104, 3, 1, "", "append"], [104, 3, 1, "", "clear"], [104, 3, 1, "", "count"], [104, 3, 1, "", "extend"], [104, 3, 1, "", "index"], [104, 3, 1, "", "insert"], [104, 3, 1, "", "pop"], [104, 3, 1, "", "remove"], [104, 3, 1, "", "reverse"]], "docarray.array.storage.weaviate": [[105, 1, 1, "", "StorageMixins"], [105, 1, 1, "", "WeaviateConfig"], [106, 0, 0, "-", "backend"], [107, 0, 0, "-", "find"], [108, 0, 0, "-", "getsetdel"], [109, 0, 0, "-", "seqlike"]], "docarray.array.storage.weaviate.StorageMixins": [[105, 2, 1, "", "TYPE_MAP"], [105, 3, 1, "", "append"], [105, 3, 1, "", "clear"], [105, 3, 1, "", "count"], [105, 3, 1, "", "extend"], [105, 3, 1, "", "index"], [105, 3, 1, "", "insert"], [105, 4, 1, "", "name"], [105, 3, 1, "", "pop"], [105, 3, 1, "", "remove"], [105, 3, 1, "", "reverse"], [105, 3, 1, "", "sync"]], "docarray.array.storage.weaviate.WeaviateConfig": [[105, 2, 1, "", "batch_size"], [105, 2, 1, "", "cleanup_interval_seconds"], [105, 2, 1, "", "columns"], [105, 2, 1, "", "distance"], [105, 2, 1, "", "dynamic_batching"], [105, 2, 1, "", "dynamic_ef_factor"], [105, 2, 1, "", "dynamic_ef_max"], [105, 2, 1, "", "dynamic_ef_min"], [105, 2, 1, "", "ef"], [105, 2, 1, "", "ef_construction"], [105, 2, 1, "", "flat_search_cutoff"], [105, 2, 1, "", "host"], [105, 2, 1, "", "list_like"], [105, 2, 1, "", "max_connections"], [105, 2, 1, "", "n_dim"], [105, 2, 1, "", "name"], [105, 2, 1, "", "port"], [105, 2, 1, "", "protocol"], [105, 2, 1, "", "root_id"], [105, 2, 1, "", "serialize_config"], [105, 2, 1, "", "skip"], [105, 2, 1, "", "timeout_config"], [105, 2, 1, "", "vector_cache_max_objects"]], "docarray.array.storage.weaviate.backend": [[106, 1, 1, "", "BackendMixin"], [106, 1, 1, "", "WeaviateConfig"]], "docarray.array.storage.weaviate.backend.BackendMixin": [[106, 2, 1, "", "TYPE_MAP"], [106, 4, 1, "", "name"]], "docarray.array.storage.weaviate.backend.WeaviateConfig": [[106, 2, 1, "", "batch_size"], [106, 2, 1, "", "cleanup_interval_seconds"], [106, 2, 1, "", "columns"], [106, 2, 1, "", "distance"], [106, 2, 1, "", "dynamic_batching"], [106, 2, 1, "", "dynamic_ef_factor"], [106, 2, 1, "", "dynamic_ef_max"], [106, 2, 1, "", "dynamic_ef_min"], [106, 2, 1, "", "ef"], [106, 2, 1, "", "ef_construction"], [106, 2, 1, "", "flat_search_cutoff"], [106, 2, 1, "", "host"], [106, 2, 1, "", "list_like"], [106, 2, 1, "", "max_connections"], [106, 2, 1, "", "n_dim"], [106, 2, 1, "", "name"], [106, 2, 1, "", "port"], [106, 2, 1, "", "protocol"], [106, 2, 1, "", "root_id"], [106, 2, 1, "", "serialize_config"], [106, 2, 1, "", "skip"], [106, 2, 1, "", "timeout_config"], [106, 2, 1, "", "vector_cache_max_objects"]], "docarray.array.storage.weaviate.find": [[107, 1, 1, "", "FindMixin"]], "docarray.array.storage.weaviate.getsetdel": [[108, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.weaviate.getsetdel.GetSetDelMixin": [[108, 3, 1, "", "sync"]], "docarray.array.storage.weaviate.seqlike": [[109, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin": [[109, 3, 1, "", "append"], [109, 3, 1, "", "clear"], [109, 3, 1, "", "count"], [109, 3, 1, "", "extend"], [109, 3, 1, "", "index"], [109, 3, 1, "", "insert"], [109, 3, 1, "", "pop"], [109, 3, 1, "", "remove"], [109, 3, 1, "", "reverse"]], "docarray.array.weaviate": [[110, 1, 1, "", "DocumentArrayWeaviate"], [110, 1, 1, "", "WeaviateConfig"]], "docarray.array.weaviate.DocumentArrayWeaviate": [[110, 2, 1, "", "TYPE_MAP"], [110, 3, 1, "", "append"], [110, 3, 1, "", "apply"], [110, 3, 1, "", "apply_batch"], [110, 3, 1, "", "batch"], [110, 3, 1, "", "batch_ids"], [110, 4, 1, "", "blobs"], [110, 3, 1, "", "clear"], [110, 3, 1, "", "cloud_delete"], [110, 3, 1, "", "cloud_list"], [110, 3, 1, "", "cloud_pull"], [110, 3, 1, "", "cloud_push"], [110, 4, 1, "", "contents"], [110, 3, 1, "", "count"], [110, 3, 1, "", "dataloader"], [110, 3, 1, "", "embed"], [110, 3, 1, "", "embed_and_evaluate"], [110, 4, 1, "", "embeddings"], [110, 3, 1, "", "empty"], [110, 3, 1, "", "evaluate"], [110, 3, 1, "", "extend"], [110, 3, 1, "", "find"], [110, 3, 1, "", "flatten"], [110, 3, 1, "", "from_base64"], [110, 3, 1, "", "from_bytes"], [110, 3, 1, "", "from_csv"], [110, 3, 1, "", "from_dataframe"], [110, 3, 1, "", "from_dict"], [110, 3, 1, "", "from_files"], [110, 3, 1, "", "from_huggingface_datasets"], [110, 3, 1, "", "from_json"], [110, 3, 1, "", "from_lines"], [110, 3, 1, "", "from_list"], [110, 3, 1, "", "from_ndarray"], [110, 3, 1, "", "from_ndjson"], [110, 3, 1, "", "from_protobuf"], [110, 3, 1, "", "from_pydantic_model"], [110, 3, 1, "", "from_strawberry_type"], [110, 3, 1, "", "get_json_schema"], [110, 3, 1, "", "get_vocabulary"], [110, 3, 1, "", "index"], [110, 3, 1, "", "insert"], [110, 3, 1, "", "load"], [110, 3, 1, "", "load_binary"], [110, 3, 1, "", "load_csv"], [110, 3, 1, "", "load_json"], [110, 3, 1, "", "map"], [110, 3, 1, "", "map_batch"], [110, 3, 1, "", "match"], [110, 4, 1, "", "name"], [110, 3, 1, "", "plot_embeddings"], [110, 3, 1, "", "plot_image_sprites"], [110, 3, 1, "", "pop"], [110, 3, 1, "", "post"], [110, 3, 1, "", "pull"], [110, 3, 1, "", "push"], [110, 3, 1, "", "reduce"], [110, 3, 1, "", "reduce_all"], [110, 3, 1, "", "remove"], [110, 3, 1, "", "reverse"], [110, 3, 1, "", "sample"], [110, 3, 1, "", "save"], [110, 3, 1, "", "save_binary"], [110, 3, 1, "", "save_csv"], [110, 3, 1, "", "save_embeddings_csv"], [110, 3, 1, "", "save_gif"], [110, 3, 1, "", "save_json"], [110, 3, 1, "", "shuffle"], [110, 3, 1, "", "split_by_tag"], [110, 3, 1, "", "summary"], [110, 3, 1, "", "sync"], [110, 4, 1, "", "tensors"], [110, 4, 1, "", "texts"], [110, 3, 1, "", "to_base64"], [110, 3, 1, "", "to_bytes"], [110, 3, 1, "", "to_dataframe"], [110, 3, 1, "", "to_dict"], [110, 3, 1, "", "to_json"], [110, 3, 1, "", "to_list"], [110, 3, 1, "", "to_protobuf"], [110, 3, 1, "", "to_pydantic_model"], [110, 3, 1, "", "to_strawberry_type"], [110, 3, 1, "", "traverse"], [110, 3, 1, "", "traverse_flat"], [110, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.weaviate.WeaviateConfig": [[110, 2, 1, "", "batch_size"], [110, 2, 1, "", "cleanup_interval_seconds"], [110, 2, 1, "", "columns"], [110, 2, 1, "", "distance"], [110, 2, 1, "", "dynamic_batching"], [110, 2, 1, "", "dynamic_ef_factor"], [110, 2, 1, "", "dynamic_ef_max"], [110, 2, 1, "", "dynamic_ef_min"], [110, 2, 1, "", "ef"], [110, 2, 1, "", "ef_construction"], [110, 2, 1, "", "flat_search_cutoff"], [110, 2, 1, "", "host"], [110, 2, 1, "", "list_like"], [110, 2, 1, "", "max_connections"], [110, 2, 1, "", "n_dim"], [110, 2, 1, "", "name"], [110, 2, 1, "", "port"], [110, 2, 1, "", "protocol"], [110, 2, 1, "", "root_id"], [110, 2, 1, "", "serialize_config"], [110, 2, 1, "", "skip"], [110, 2, 1, "", "timeout_config"], [110, 2, 1, "", "vector_cache_max_objects"]], "docarray.base": [[111, 1, 1, "", "BaseDCType"]], "docarray.base.BaseDCType": [[111, 3, 1, "", "clear"], [111, 3, 1, "", "copy_from"], [111, 4, 1, "", "nbytes"], [111, 4, 1, "", "non_empty_fields"], [111, 3, 1, "", "pop"]], "docarray.dataclasses": [[113, 0, 0, "-", "enums"], [114, 0, 0, "-", "getter"], [115, 0, 0, "-", "setter"], [116, 0, 0, "-", "types"]], "docarray.dataclasses.enums": [[113, 1, 1, "", "AttributeType"], [113, 1, 1, "", "DocumentMetadata"], [113, 1, 1, "", "ImageType"]], "docarray.dataclasses.enums.AttributeType": [[113, 2, 1, "", "DOCUMENT"], [113, 2, 1, "", "ITERABLE_DOCUMENT"], [113, 2, 1, "", "ITERABLE_NESTED"], [113, 2, 1, "", "ITERABLE_PRIMITIVE"], [113, 2, 1, "", "NESTED"], [113, 2, 1, "", "PRIMITIVE"]], "docarray.dataclasses.enums.DocumentMetadata": [[113, 2, 1, "", "AUDIO_TYPE"], [113, 2, 1, "", "BLOB_TYPE"], [113, 2, 1, "", "IMAGE_TYPE"], [113, 2, 1, "", "IMAGE_URI"], [113, 2, 1, "", "JSON_TYPE"], [113, 2, 1, "", "MESH_TYPE"], [113, 2, 1, "", "MULTI_MODAL_SCHEMA"], [113, 2, 1, "", "VIDEO_TYPE"]], "docarray.dataclasses.enums.ImageType": [[113, 2, 1, "", "NDARRAY"], [113, 2, 1, "", "PIL"], [113, 2, 1, "", "URI"]], "docarray.dataclasses.getter": [[114, 5, 1, "", "audio_getter"], [114, 5, 1, "", "blob_getter"], [114, 5, 1, "", "image_getter"], [114, 5, 1, "", "json_getter"], [114, 5, 1, "", "mesh_getter"], [114, 5, 1, "", "tabular_getter"], [114, 5, 1, "", "text_getter"], [114, 5, 1, "", "uri_getter"], [114, 5, 1, "", "video_getter"]], "docarray.dataclasses.setter": [[115, 5, 1, "", "audio_setter"], [115, 5, 1, "", "blob_setter"], [115, 5, 1, "", "image_setter"], [115, 5, 1, "", "json_setter"], [115, 5, 1, "", "mesh_setter"], [115, 5, 1, "", "tabular_setter"], [115, 5, 1, "", "text_setter"], [115, 5, 1, "", "uri_setter"], [115, 5, 1, "", "video_setter"]], "docarray.dataclasses.types": [[116, 5, 1, "", "dataclass"], [116, 5, 1, "", "field"], [116, 5, 1, "", "is_multimodal"]], "docarray.document": [[117, 1, 1, "", "Document"], [118, 0, 0, "-", "data"], [119, 0, 0, "-", "generators"], [120, 0, 0, "-", "mixins"], [142, 0, 0, "-", "pydantic_model"], [143, 0, 0, "-", "strawberry_type"]], "docarray.document.Document": [[117, 4, 1, "", "adjacency"], [117, 4, 1, "", "blob"], [117, 4, 1, "", "chunks"], [117, 3, 1, "", "clear"], [117, 4, 1, "", "content"], [117, 4, 1, "", "content_hash"], [117, 4, 1, "", "content_type"], [117, 3, 1, "", "convert_blob_to_datauri"], [117, 3, 1, "", "convert_blob_to_image_tensor"], [117, 3, 1, "", "convert_blob_to_tensor"], [117, 3, 1, "", "convert_content_to_datauri"], [117, 3, 1, "", "convert_image_tensor_to_blob"], [117, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [117, 3, 1, "", "convert_image_tensor_to_uri"], [117, 3, 1, "", "convert_tensor_to_blob"], [117, 3, 1, "", "convert_tensor_to_text"], [117, 3, 1, "", "convert_text_to_datauri"], [117, 3, 1, "", "convert_text_to_tensor"], [117, 3, 1, "", "convert_uri_to_datauri"], [117, 3, 1, "", "copy_from"], [117, 3, 1, "", "display"], [117, 3, 1, "", "display_point_cloud_tensor"], [117, 3, 1, "", "display_rgbd_tensor"], [117, 3, 1, "", "display_tensor"], [117, 3, 1, "", "display_uri"], [117, 3, 1, "", "display_vertices_and_faces"], [117, 3, 1, "", "embed"], [117, 3, 1, "", "embed_feature_hashing"], [117, 4, 1, "", "embedding"], [117, 4, 1, "", "evaluations"], [117, 3, 1, "", "from_base64"], [117, 3, 1, "", "from_bytes"], [117, 3, 1, "", "from_dict"], [117, 3, 1, "", "from_json"], [117, 3, 1, "", "from_protobuf"], [117, 3, 1, "", "from_pydantic_model"], [117, 3, 1, "", "from_strawberry_type"], [117, 3, 1, "", "generator_from_webcam"], [117, 3, 1, "", "get_json_schema"], [117, 3, 1, "", "get_multi_modal_attribute"], [117, 3, 1, "", "get_vocabulary"], [117, 4, 1, "", "granularity"], [117, 4, 1, "", "id"], [117, 4, 1, "", "is_multimodal"], [117, 3, 1, "", "load_pil_image_to_datauri"], [117, 3, 1, "", "load_uri_to_audio_tensor"], [117, 3, 1, "", "load_uri_to_blob"], [117, 3, 1, "", "load_uri_to_image_tensor"], [117, 3, 1, "", "load_uri_to_point_cloud_tensor"], [117, 3, 1, "", "load_uri_to_text"], [117, 3, 1, "", "load_uri_to_vertices_and_faces"], [117, 3, 1, "", "load_uri_to_video_tensor"], [117, 3, 1, "", "load_uris_to_rgbd_tensor"], [117, 3, 1, "", "load_vertices_and_faces_to_point_cloud"], [117, 4, 1, "", "location"], [117, 3, 1, "", "match"], [117, 4, 1, "", "matches"], [117, 4, 1, "", "mime_type"], [117, 4, 1, "", "modality"], [117, 4, 1, "", "nbytes"], [117, 4, 1, "", "non_empty_fields"], [117, 4, 1, "", "offset"], [117, 4, 1, "", "parent_id"], [117, 3, 1, "", "plot_matches_sprites"], [117, 3, 1, "", "pop"], [117, 3, 1, "", "post"], [117, 3, 1, "", "save_audio_tensor_to_file"], [117, 3, 1, "", "save_blob_to_file"], [117, 3, 1, "", "save_image_tensor_to_file"], [117, 3, 1, "", "save_uri_to_file"], [117, 3, 1, "", "save_video_tensor_to_file"], [117, 4, 1, "", "scores"], [117, 3, 1, "", "set_image_tensor_channel_axis"], [117, 3, 1, "", "set_image_tensor_inv_normalization"], [117, 3, 1, "", "set_image_tensor_normalization"], [117, 3, 1, "", "set_image_tensor_resample"], [117, 3, 1, "", "set_image_tensor_shape"], [117, 3, 1, "", "set_multi_modal_attribute"], [117, 3, 1, "", "summary"], [117, 4, 1, "", "tags"], [117, 4, 1, "", "tensor"], [117, 4, 1, "", "text"], [117, 3, 1, "", "to_base64"], [117, 3, 1, "", "to_bytes"], [117, 3, 1, "", "to_dict"], [117, 3, 1, "", "to_json"], [117, 3, 1, "", "to_protobuf"], [117, 3, 1, "", "to_pydantic_model"], [117, 3, 1, "", "to_strawberry_type"], [117, 4, 1, "", "uri"], [117, 4, 1, "", "weight"]], "docarray.document.data": [[118, 1, 1, "", "DocumentData"]], "docarray.document.data.DocumentData": [[118, 2, 1, "", "adjacency"], [118, 2, 1, "", "blob"], [118, 2, 1, "", "chunks"], [118, 2, 1, "", "content"], [118, 2, 1, "", "embedding"], [118, 2, 1, "", "evaluations"], [118, 2, 1, "", "granularity"], [118, 2, 1, "", "id"], [118, 2, 1, "", "location"], [118, 2, 1, "", "matches"], [118, 2, 1, "", "mime_type"], [118, 2, 1, "", "modality"], [118, 2, 1, "", "offset"], [118, 2, 1, "", "parent_id"], [118, 2, 1, "", "scores"], [118, 2, 1, "", "tags"], [118, 2, 1, "", "tensor"], [118, 2, 1, "", "text"], [118, 2, 1, "", "uri"], [118, 2, 1, "", "weight"]], "docarray.document.generators": [[119, 5, 1, "", "from_csv"], [119, 5, 1, "", "from_files"], [119, 5, 1, "", "from_huggingface_datasets"], [119, 5, 1, "", "from_lines"], [119, 5, 1, "", "from_ndarray"], [119, 5, 1, "", "from_ndjson"]], "docarray.document.mixins": [[120, 1, 1, "", "AllMixins"], [121, 0, 0, "-", "attribute"], [122, 0, 0, "-", "audio"], [123, 0, 0, "-", "blob"], [124, 0, 0, "-", "content"], [125, 0, 0, "-", "convert"], [126, 0, 0, "-", "dump"], [127, 0, 0, "-", "featurehash"], [128, 0, 0, "-", "helper"], [129, 0, 0, "-", "image"], [130, 0, 0, "-", "mesh"], [131, 0, 0, "-", "multimodal"], [132, 0, 0, "-", "plot"], [133, 0, 0, "-", "porting"], [134, 0, 0, "-", "property"], [135, 0, 0, "-", "protobuf"], [136, 0, 0, "-", "pydantic"], [137, 0, 0, "-", "rich_embedding"], [138, 0, 0, "-", "strawberry"], [139, 0, 0, "-", "sugar"], [140, 0, 0, "-", "text"], [141, 0, 0, "-", "video"]], "docarray.document.mixins.AllMixins": [[120, 4, 1, "", "adjacency"], [120, 4, 1, "", "blob"], [120, 4, 1, "", "chunks"], [120, 4, 1, "", "content"], [120, 4, 1, "", "content_hash"], [120, 4, 1, "", "content_type"], [120, 3, 1, "", "convert_blob_to_datauri"], [120, 3, 1, "", "convert_blob_to_image_tensor"], [120, 3, 1, "", "convert_blob_to_tensor"], [120, 3, 1, "", "convert_content_to_datauri"], [120, 3, 1, "", "convert_image_tensor_to_blob"], [120, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [120, 3, 1, "", "convert_image_tensor_to_uri"], [120, 3, 1, "", "convert_tensor_to_blob"], [120, 3, 1, "", "convert_tensor_to_text"], [120, 3, 1, "", "convert_text_to_datauri"], [120, 3, 1, "", "convert_text_to_tensor"], [120, 3, 1, "", "convert_uri_to_datauri"], [120, 3, 1, "", "display"], [120, 3, 1, "", "display_point_cloud_tensor"], [120, 3, 1, "", "display_rgbd_tensor"], [120, 3, 1, "", "display_tensor"], [120, 3, 1, "", "display_uri"], [120, 3, 1, "", "display_vertices_and_faces"], [120, 3, 1, "", "embed"], [120, 3, 1, "", "embed_feature_hashing"], [120, 4, 1, "", "embedding"], [120, 4, 1, "", "evaluations"], [120, 3, 1, "", "from_base64"], [120, 3, 1, "", "from_bytes"], [120, 3, 1, "", "from_dict"], [120, 3, 1, "", "from_json"], [120, 3, 1, "", "from_protobuf"], [120, 3, 1, "", "from_pydantic_model"], [120, 3, 1, "", "from_strawberry_type"], [120, 3, 1, "", "generator_from_webcam"], [120, 3, 1, "", "get_json_schema"], [120, 3, 1, "", "get_multi_modal_attribute"], [120, 3, 1, "", "get_vocabulary"], [120, 4, 1, "", "granularity"], [120, 4, 1, "", "id"], [120, 4, 1, "", "is_multimodal"], [120, 3, 1, "", "load_pil_image_to_datauri"], [120, 3, 1, "", "load_uri_to_audio_tensor"], [120, 3, 1, "", "load_uri_to_blob"], [120, 3, 1, "", "load_uri_to_image_tensor"], [120, 3, 1, "", "load_uri_to_point_cloud_tensor"], [120, 3, 1, "", "load_uri_to_text"], [120, 3, 1, "", "load_uri_to_vertices_and_faces"], [120, 3, 1, "", "load_uri_to_video_tensor"], [120, 3, 1, "", "load_uris_to_rgbd_tensor"], [120, 3, 1, "", "load_vertices_and_faces_to_point_cloud"], [120, 4, 1, "", "location"], [120, 3, 1, "", "match"], [120, 4, 1, "", "matches"], [120, 4, 1, "", "mime_type"], [120, 4, 1, "", "modality"], [120, 4, 1, "", "offset"], [120, 4, 1, "", "parent_id"], [120, 3, 1, "", "plot_matches_sprites"], [120, 3, 1, "", "post"], [120, 3, 1, "", "save_audio_tensor_to_file"], [120, 3, 1, "", "save_blob_to_file"], [120, 3, 1, "", "save_image_tensor_to_file"], [120, 3, 1, "", "save_uri_to_file"], [120, 3, 1, "", "save_video_tensor_to_file"], [120, 4, 1, "", "scores"], [120, 3, 1, "", "set_image_tensor_channel_axis"], [120, 3, 1, "", "set_image_tensor_inv_normalization"], [120, 3, 1, "", "set_image_tensor_normalization"], [120, 3, 1, "", "set_image_tensor_resample"], [120, 3, 1, "", "set_image_tensor_shape"], [120, 3, 1, "", "set_multi_modal_attribute"], [120, 3, 1, "", "summary"], [120, 4, 1, "", "tags"], [120, 4, 1, "", "tensor"], [120, 4, 1, "", "text"], [120, 3, 1, "", "to_base64"], [120, 3, 1, "", "to_bytes"], [120, 3, 1, "", "to_dict"], [120, 3, 1, "", "to_json"], [120, 3, 1, "", "to_protobuf"], [120, 3, 1, "", "to_pydantic_model"], [120, 3, 1, "", "to_strawberry_type"], [120, 4, 1, "", "uri"], [120, 4, 1, "", "weight"]], "docarray.document.mixins.attribute": [[121, 1, 1, "", "GetAttributesMixin"]], "docarray.document.mixins.audio": [[122, 1, 1, "", "AudioDataMixin"]], "docarray.document.mixins.audio.AudioDataMixin": [[122, 3, 1, "", "load_uri_to_audio_tensor"], [122, 3, 1, "", "save_audio_tensor_to_file"]], "docarray.document.mixins.blob": [[123, 1, 1, "", "BlobDataMixin"]], "docarray.document.mixins.blob.BlobDataMixin": [[123, 3, 1, "", "convert_blob_to_datauri"], [123, 3, 1, "", "load_uri_to_blob"], [123, 3, 1, "", "save_blob_to_file"]], "docarray.document.mixins.content": [[124, 1, 1, "", "ContentPropertyMixin"]], "docarray.document.mixins.content.ContentPropertyMixin": [[124, 4, 1, "", "content_hash"], [124, 3, 1, "", "convert_content_to_datauri"]], "docarray.document.mixins.convert": [[125, 1, 1, "", "ConvertMixin"]], "docarray.document.mixins.convert.ConvertMixin": [[125, 3, 1, "", "convert_blob_to_tensor"], [125, 3, 1, "", "convert_tensor_to_blob"], [125, 3, 1, "", "convert_uri_to_datauri"]], "docarray.document.mixins.dump": [[126, 1, 1, "", "UriFileMixin"]], "docarray.document.mixins.dump.UriFileMixin": [[126, 3, 1, "", "save_uri_to_file"]], "docarray.document.mixins.featurehash": [[127, 1, 1, "", "FeatureHashMixin"]], "docarray.document.mixins.featurehash.FeatureHashMixin": [[127, 3, 1, "", "embed_feature_hashing"]], "docarray.document.mixins.image": [[129, 1, 1, "", "ImageDataMixin"]], "docarray.document.mixins.image.ImageDataMixin": [[129, 3, 1, "", "convert_blob_to_image_tensor"], [129, 3, 1, "", "convert_image_tensor_to_blob"], [129, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [129, 3, 1, "", "convert_image_tensor_to_uri"], [129, 3, 1, "", "load_pil_image_to_datauri"], [129, 3, 1, "", "load_uri_to_image_tensor"], [129, 3, 1, "", "save_image_tensor_to_file"], [129, 3, 1, "", "set_image_tensor_channel_axis"], [129, 3, 1, "", "set_image_tensor_inv_normalization"], [129, 3, 1, "", "set_image_tensor_normalization"], [129, 3, 1, "", "set_image_tensor_resample"], [129, 3, 1, "", "set_image_tensor_shape"]], "docarray.document.mixins.mesh": [[130, 1, 1, "", "Mesh"], [130, 1, 1, "", "MeshDataMixin"]], "docarray.document.mixins.mesh.Mesh": [[130, 2, 1, "", "FACES"], [130, 2, 1, "", "FILE_EXTENSIONS"], [130, 2, 1, "", "VERTICES"]], "docarray.document.mixins.mesh.MeshDataMixin": [[130, 3, 1, "", "load_uri_to_point_cloud_tensor"], [130, 3, 1, "", "load_uri_to_vertices_and_faces"], [130, 3, 1, "", "load_uris_to_rgbd_tensor"], [130, 3, 1, "", "load_vertices_and_faces_to_point_cloud"]], "docarray.document.mixins.multimodal": [[131, 1, 1, "", "MultiModalMixin"]], "docarray.document.mixins.multimodal.MultiModalMixin": [[131, 3, 1, "", "get_multi_modal_attribute"], [131, 4, 1, "", "is_multimodal"], [131, 3, 1, "", "set_multi_modal_attribute"]], "docarray.document.mixins.plot": [[132, 1, 1, "", "PlotMixin"]], "docarray.document.mixins.plot.PlotMixin": [[132, 3, 1, "", "display"], [132, 3, 1, "", "display_point_cloud_tensor"], [132, 3, 1, "", "display_rgbd_tensor"], [132, 3, 1, "", "display_tensor"], [132, 3, 1, "", "display_uri"], [132, 3, 1, "", "display_vertices_and_faces"], [132, 3, 1, "", "plot_matches_sprites"], [132, 3, 1, "", "summary"]], "docarray.document.mixins.porting": [[133, 1, 1, "", "PortingMixin"]], "docarray.document.mixins.porting.PortingMixin": [[133, 3, 1, "", "from_base64"], [133, 3, 1, "", "from_bytes"], [133, 3, 1, "", "from_dict"], [133, 3, 1, "", "from_json"], [133, 3, 1, "", "to_base64"], [133, 3, 1, "", "to_bytes"], [133, 3, 1, "", "to_dict"], [133, 3, 1, "", "to_json"]], "docarray.document.mixins.property": [[134, 1, 1, "", "PropertyMixin"]], "docarray.document.mixins.property.PropertyMixin": [[134, 4, 1, "", "adjacency"], [134, 4, 1, "", "blob"], [134, 4, 1, "", "chunks"], [134, 4, 1, "", "content"], [134, 4, 1, "", "content_type"], [134, 4, 1, "", "embedding"], [134, 4, 1, "", "evaluations"], [134, 4, 1, "", "granularity"], [134, 4, 1, "", "id"], [134, 4, 1, "", "location"], [134, 4, 1, "", "matches"], [134, 4, 1, "", "mime_type"], [134, 4, 1, "", "modality"], [134, 4, 1, "", "offset"], [134, 4, 1, "", "parent_id"], [134, 4, 1, "", "scores"], [134, 4, 1, "", "tags"], [134, 4, 1, "", "tensor"], [134, 4, 1, "", "text"], [134, 4, 1, "", "uri"], [134, 4, 1, "", "weight"]], "docarray.document.mixins.protobuf": [[135, 1, 1, "", "ProtobufMixin"]], "docarray.document.mixins.protobuf.ProtobufMixin": [[135, 3, 1, "", "from_protobuf"], [135, 3, 1, "", "to_protobuf"]], "docarray.document.mixins.pydantic": [[136, 1, 1, "", "PydanticMixin"]], "docarray.document.mixins.pydantic.PydanticMixin": [[136, 3, 1, "", "from_pydantic_model"], [136, 3, 1, "", "get_json_schema"], [136, 3, 1, "", "to_pydantic_model"]], "docarray.document.mixins.rich_embedding": [[137, 1, 1, "", "ColorBoxEmbedding"]], "docarray.document.mixins.strawberry": [[138, 1, 1, "", "StrawberryMixin"]], "docarray.document.mixins.strawberry.StrawberryMixin": [[138, 3, 1, "", "from_strawberry_type"], [138, 3, 1, "", "to_strawberry_type"]], "docarray.document.mixins.sugar": [[139, 1, 1, "", "SingletonSugarMixin"]], "docarray.document.mixins.sugar.SingletonSugarMixin": [[139, 3, 1, "", "embed"], [139, 3, 1, "", "match"], [139, 3, 1, "", "post"]], "docarray.document.mixins.text": [[140, 1, 1, "", "TextDataMixin"]], "docarray.document.mixins.text.TextDataMixin": [[140, 3, 1, "", "convert_tensor_to_text"], [140, 3, 1, "", "convert_text_to_datauri"], [140, 3, 1, "", "convert_text_to_tensor"], [140, 3, 1, "", "get_vocabulary"], [140, 3, 1, "", "load_uri_to_text"]], "docarray.document.mixins.video": [[141, 1, 1, "", "VideoDataMixin"]], "docarray.document.mixins.video.VideoDataMixin": [[141, 3, 1, "", "generator_from_webcam"], [141, 3, 1, "", "load_uri_to_video_tensor"], [141, 3, 1, "", "save_video_tensor_to_file"]], "docarray.document.pydantic_model": [[142, 1, 1, "", "PydanticDocument"]], "docarray.document.pydantic_model.PydanticDocument": [[142, 1, 1, "", "Config"], [142, 2, 1, "", "adjacency"], [142, 2, 1, "", "blob"], [142, 2, 1, "", "chunks"], [142, 3, 1, "", "construct"], [142, 3, 1, "", "copy"], [142, 3, 1, "", "dict"], [142, 2, 1, "", "embedding"], [142, 2, 1, "", "evaluations"], [142, 3, 1, "", "from_orm"], [142, 2, 1, "", "granularity"], [142, 2, 1, "", "id"], [142, 3, 1, "", "json"], [142, 2, 1, "", "location"], [142, 2, 1, "", "matches"], [142, 2, 1, "", "mime_type"], [142, 2, 1, "", "modality"], [142, 2, 1, "", "offset"], [142, 2, 1, "", "parent_id"], [142, 3, 1, "", "parse_file"], [142, 3, 1, "", "parse_obj"], [142, 3, 1, "", "parse_raw"], [142, 3, 1, "", "schema"], [142, 3, 1, "", "schema_json"], [142, 2, 1, "", "scores"], [142, 2, 1, "", "tags"], [142, 2, 1, "", "tensor"], [142, 2, 1, "", "text"], [142, 3, 1, "", "update_forward_refs"], [142, 2, 1, "", "uri"], [142, 3, 1, "", "validate"], [142, 2, 1, "", "weight"]], "docarray.document.pydantic_model.PydanticDocument.Config": [[142, 2, 1, "", "smart_union"]], "docarray.document.strawberry_type": [[143, 1, 1, "", "StrawberryDocument"], [143, 1, 1, "", "StrawberryDocumentInput"]], "docarray.document.strawberry_type.StrawberryDocument": [[143, 2, 1, "", "adjacency"], [143, 2, 1, "", "blob"], [143, 2, 1, "", "chunks"], [143, 2, 1, "", "embedding"], [143, 2, 1, "", "evaluations"], [143, 2, 1, "", "granularity"], [143, 2, 1, "", "id"], [143, 2, 1, "", "location"], [143, 2, 1, "", "matches"], [143, 2, 1, "", "mime_type"], [143, 2, 1, "", "modality"], [143, 2, 1, "", "offset"], [143, 2, 1, "", "parent_id"], [143, 2, 1, "", "scores"], [143, 2, 1, "", "tags"], [143, 2, 1, "", "tensor"], [143, 2, 1, "", "text"], [143, 2, 1, "", "uri"], [143, 2, 1, "", "weight"]], "docarray.document.strawberry_type.StrawberryDocumentInput": [[143, 2, 1, "", "adjacency"], [143, 2, 1, "", "blob"], [143, 2, 1, "", "chunks"], [143, 2, 1, "", "embedding"], [143, 2, 1, "", "evaluations"], [143, 2, 1, "", "granularity"], [143, 2, 1, "", "id"], [143, 2, 1, "", "location"], [143, 2, 1, "", "matches"], [143, 2, 1, "", "mime_type"], [143, 2, 1, "", "modality"], [143, 2, 1, "", "offset"], [143, 2, 1, "", "parent_id"], [143, 2, 1, "", "scores"], [143, 2, 1, "", "tags"], [143, 2, 1, "", "tensor"], [143, 2, 1, "", "text"], [143, 2, 1, "", "uri"], [143, 2, 1, "", "weight"]], "docarray.helper": [[144, 5, 1, "", "add_protocol_and_compress_to_file_path"], [144, 1, 1, "", "cached_property"], [144, 5, 1, "", "check_root_id"], [144, 5, 1, "", "compress_bytes"], [144, 5, 1, "", "dataclass_from_dict"], [144, 5, 1, "", "decompress_bytes"], [144, 5, 1, "", "deprecate_by"], [144, 5, 1, "", "download_mermaid_url"], [144, 5, 1, "", "dunder_get"], [144, 5, 1, "", "filter_dict"], [144, 5, 1, "", "get_ci_vendor"], [144, 5, 1, "", "get_compress_ctx"], [144, 5, 1, "", "get_full_version"], [144, 5, 1, "", "login"], [144, 5, 1, "", "logout"], [144, 5, 1, "", "protocol_and_compress_from_file_path"], [144, 5, 1, "", "random_identity"], [144, 5, 1, "", "random_port"], [144, 5, 1, "", "random_uuid"], [144, 5, 1, "", "reset_ports"], [144, 5, 1, "", "typename"]], "docarray.math": [[146, 0, 0, "-", "distance"], [151, 0, 0, "-", "evaluation"], [152, 0, 0, "-", "helper"], [153, 0, 0, "-", "ndarray"]], "docarray.math.distance": [[146, 5, 1, "", "cdist"], [147, 0, 0, "-", "numpy"], [146, 5, 1, "", "pdist"], [149, 0, 0, "-", "tensorflow"], [150, 0, 0, "-", "torch"]], "docarray.math.distance.numpy": [[147, 5, 1, "", "cosine"], [147, 5, 1, "", "euclidean"], [147, 5, 1, "", "sparse_cosine"], [147, 5, 1, "", "sparse_euclidean"], [147, 5, 1, "", "sparse_sqeuclidean"], [147, 5, 1, "", "sqeuclidean"]], "docarray.math.distance.tensorflow": [[149, 5, 1, "", "cosine"], [149, 5, 1, "", "euclidean"], [149, 5, 1, "", "sqeuclidean"]], "docarray.math.distance.torch": [[150, 5, 1, "", "cosine"], [150, 5, 1, "", "euclidean"], [150, 5, 1, "", "sqeuclidean"]], "docarray.math.evaluation": [[151, 5, 1, "", "average_precision"], [151, 5, 1, "", "dcg_at_k"], [151, 5, 1, "", "f1_score_at_k"], [151, 5, 1, "", "hit_at_k"], [151, 5, 1, "", "ndcg_at_k"], [151, 5, 1, "", "precision_at_k"], [151, 5, 1, "", "r_precision"], [151, 5, 1, "", "recall_at_k"], [151, 5, 1, "", "reciprocal_rank"]], "docarray.math.helper": [[152, 5, 1, "", "minmax_normalize"], [152, 5, 1, "", "top_k"], [152, 5, 1, "", "update_rows_x_mat_best"]], "docarray.math.ndarray": [[153, 5, 1, "", "check_arraylike_equality"], [153, 5, 1, "", "detach_tensor_if_present"], [153, 5, 1, "", "get_array_rows"], [153, 5, 1, "", "get_array_type"], [153, 5, 1, "", "ravel"], [153, 5, 1, "", "to_list"], [153, 5, 1, "", "to_numpy_array"], [153, 5, 1, "", "unravel"]], "docarray.proto": [[155, 0, 0, "-", "docarray_pb2"], [156, 0, 0, "-", "io"], [158, 0, 0, "-", "pb"], [160, 0, 0, "-", "pb2"]], "docarray.proto.io": [[156, 5, 1, "", "flush_proto"], [157, 0, 0, "-", "ndarray"], [156, 5, 1, "", "parse_proto"]], "docarray.proto.io.ndarray": [[157, 5, 1, "", "flush_ndarray"], [157, 5, 1, "", "read_ndarray"]], "docarray.proto.pb": [[159, 0, 0, "-", "docarray_pb2"]], "docarray.proto.pb2": [[161, 0, 0, "-", "docarray_pb2"]], "docarray.score": [[162, 1, 1, "", "NamedScore"], [163, 0, 0, "-", "data"], [164, 0, 0, "-", "mixins"]], "docarray.score.NamedScore": [[162, 3, 1, "", "clear"], [162, 3, 1, "", "copy_from"], [162, 4, 1, "", "description"], [162, 4, 1, "", "nbytes"], [162, 4, 1, "", "non_empty_fields"], [162, 4, 1, "", "op_name"], [162, 3, 1, "", "pop"], [162, 4, 1, "", "ref_id"], [162, 3, 1, "", "to_dict"], [162, 4, 1, "", "value"]], "docarray.score.data": [[163, 1, 1, "", "NamedScoreData"]], "docarray.score.data.NamedScoreData": [[163, 2, 1, "", "description"], [163, 2, 1, "", "op_name"], [163, 2, 1, "", "ref_id"], [163, 2, 1, "", "value"]], "docarray.score.mixins": [[164, 1, 1, "", "AllMixins"], [165, 0, 0, "-", "property"], [166, 0, 0, "-", "representer"]], "docarray.score.mixins.AllMixins": [[164, 4, 1, "", "description"], [164, 4, 1, "", "op_name"], [164, 4, 1, "", "ref_id"], [164, 3, 1, "", "to_dict"], [164, 4, 1, "", "value"]], "docarray.score.mixins.property": [[165, 1, 1, "", "PropertyMixin"]], "docarray.score.mixins.property.PropertyMixin": [[165, 4, 1, "", "description"], [165, 4, 1, "", "op_name"], [165, 4, 1, "", "ref_id"], [165, 4, 1, "", "value"]], "docarray.score.mixins.representer": [[166, 1, 1, "", "RepresentMixin"]], "docarray.score.mixins.representer.RepresentMixin": [[166, 3, 1, "", "to_dict"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:function", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"annlit": [0, 15, 62, 63, 64, 65, 66, 67], "usag": [0, 2, 5, 6, 7, 8, 9], "config": [0, 2, 4, 5, 6, 8, 9, 182], "vector": [0, 2, 4, 5, 6, 7, 9], "search": [0, 2, 4, 5, 6, 7, 174, 176, 205], "filter": [0, 2, 4, 5, 6, 7, 9, 199], "exampl": [0, 4, 5, 6, 9, 10, 170, 201], "find": [0, 3, 5, 6, 9, 31, 64, 75, 80, 85, 90, 96, 107, 174, 188, 201], "onli": [0, 5, 9], "queri": [0, 2, 7, 9, 198, 199, 201], "One": 1, "million": 1, "scale": 1, "benchmark": 1, "methodologi": 1, "core": 1, "task": 1, "parametr": 1, "combin": [1, 174, 199], "experi": 1, "setup": 1, "latenc": 1, "result": [1, 9, 207], "qp": 1, "recal": 1, "10": [1, 169, 170, 171, 179], "v": 1, "rational": 1, "design": [1, 210], "known": [1, 4, 5], "limit": [1, 4, 5, 207], "conclus": 1, "elasticsearch": 2, "start": [2, 5, 6, 7, 9], "elast": [2, 19, 73, 74, 75, 76, 77], "servic": [2, 5, 6, 7, 9, 183], "creat": [2, 3, 4, 5, 6, 7, 9, 177, 178, 185], "documentarrai": [2, 3, 4, 5, 6, 7, 9, 12, 169, 181, 188, 196, 200, 207, 208], "backend": [2, 3, 4, 5, 6, 7, 9, 63, 69, 74, 79, 84, 89, 95, 101, 106, 169, 202], "secur": 2, "connect": 2, "bulk": 2, "request": [2, 3], "custom": [2, 198], "note": [2, 6, 7, 9, 205, 206], "text": [2, 7, 53, 140, 176, 183], "field": [2, 5, 7, 169, 181, 182, 207], "tag": [2, 7, 195], "add": [3, 169], "new": [3, 185], "document": [3, 4, 5, 12, 18, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 169, 174, 176, 177, 181, 182, 187, 188, 190, 195, 196, 198, 207, 208, 212, 213], "store": [3, 4, 5, 12], "step": 3, "1": [3, 170, 171, 173, 174, 175, 176, 177, 179], "folder": 3, "2": [3, 169, 170, 171, 173, 174, 176, 177, 179], "implement": 3, "getsetdel": [3, 65, 70, 76, 81, 86, 91, 97, 102, 108], "py": 3, "3": [3, 169, 170, 171, 173, 174, 176, 177, 179], "seqlik": [3, 67, 72, 77, 82, 87, 93, 98, 104, 109], "4": [3, 169, 170, 171, 173, 174, 176, 177, 179], "5": [3, 169, 170, 171, 173, 174, 175, 176, 177, 179], "6": [3, 170, 171, 174, 175, 177, 179], "summar": 3, "everyth": 3, "__init__": 3, "7": [3, 170, 173, 174, 176, 177, 179], "subclass": 3, "from": [3, 177, 182, 186, 187, 192, 196, 204], "8": [3, 170, 173, 174, 176, 177, 179], "entrypoint": 3, "On": [3, 188, 209], "pull": [3, 178], "test": 3, "type": [3, 116, 167, 174, 181, 185, 201, 212, 213], "hint": [3, 4], "construct": [4, 182, 187, 196, 205], "subindic": [4, 174, 205], "without": 4, "specifi": 4, "index": [4, 7, 195], "featur": [4, 176], "summari": [4, 206], "persist": 4, "mutat": 4, "context": 4, "manag": [4, 178], "multipl": [4, 181, 188, 196, 199], "refer": 4, "same": 4, "storag": [4, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 169], "out": 4, "arrai": [4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 196, 198], "modif": 4, "perform": [4, 174], "issu": 4, "caus": 4, "list": [4, 169, 174, 178, 181, 196, 204], "like": [4, 196], "structur": [4, 191, 195, 205], "element": [4, 196], "access": [4, 174, 181, 186, 194, 195], "i": [4, 184, 201, 210], "slower": 4, "milvu": [5, 22, 83, 84, 85, 86, 87], "minim": 5, "advanc": [5, 182], "option": 5, "set": [5, 9], "consist": 5, "level": [5, 169, 176, 181], "batch": [5, 11, 195, 198], "size": 5, "pass": 5, "paramet": [5, 198], "collect": 5, "load": [5, 11, 170, 171, 175, 177, 186], "larg": [5, 171, 204], "tensor": 5, "outsid": 5, "embed": [5, 174, 188, 194, 206, 208], "qdrant": [6, 55, 88, 89, 90, 91, 92, 93], "minimum": [6, 9], "redi": [7, 59, 94, 95, 96, 97, 98], "configur": 7, "updat": [7, 178], "schema": [7, 207], "sqlite": [8, 60, 100, 101, 102, 103, 104], "weaviat": [9, 105, 106, 107, 108, 109, 110], "sort": 9, "certainti": 9, "includ": 9, "addit": 9, "properti": [9, 134, 165], "return": [9, 181, 201, 207], "graphql": 10, "basic": [10, 195], "integr": 10, "fastapi": [10, 207], "pytorch": 11, "deep": [11, 196], "learn": 11, "framework": 11, "map": 11, "one": 11, "shot": 11, "python": [12, 178, 209], "api": [12, 169, 178], "docarrai": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 207, 209, 210, 211, 212, 213], "dataclass": [12, 112, 113, 114, 115, 116, 169, 174, 181, 182, 184], "packag": [13, 14, 23, 25, 35, 56, 61, 62, 68, 73, 78, 83, 88, 94, 100, 105, 112, 117, 120, 145, 146, 154, 156, 158, 160, 162, 164, 167, 173], "subpackag": [13, 14, 23, 61, 117, 145, 154, 162], "submodul": [13, 14, 23, 25, 35, 56, 61, 62, 68, 73, 78, 83, 88, 94, 100, 105, 112, 117, 120, 145, 146, 154, 156, 158, 160, 162, 164], "modul": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], "content": [13, 14, 23, 24, 25, 35, 56, 61, 62, 68, 73, 78, 83, 88, 94, 100, 105, 112, 117, 120, 124, 145, 146, 154, 156, 158, 160, 162, 164, 167, 169, 186, 194, 208, 212, 213], "base": [16, 68, 69, 70, 71, 72, 111], "chunk": [17, 176], "match": [20, 44, 176, 198, 201, 206], "memori": [21, 78, 79, 80, 81, 82], "mixin": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 164, 165, 166], "dataload": [25, 26], "helper": [26, 66, 71, 92, 103, 128, 144, 152, 195], "delitem": 27, "emb": [28, 174, 183, 197, 198], "empti": [29, 187, 196], "evalu": [30, 151, 198], "getattr": 32, "getitem": 33, "group": 34, "io": [35, 36, 37, 38, 39, 40, 41, 42, 43, 156, 157], "binari": [36, 204], "common": 37, "csv": [38, 175], "datafram": [39, 204], "from_gen": 40, "json": [41, 169, 192, 204, 207], "pbar": 42, "pushpul": 43, "parallel": [45, 202], "plot": [46, 132, 206], "post": 47, "pydant": [48, 136, 189, 207], "reduc": 49, "sampl": [50, 195, 198], "setitem": 51, "strawberri": [52, 138, 189], "travers": 54, "queryset": [56, 57, 58], "lookup": 57, "parser": 58, "registri": 99, "enum": 113, "getter": 114, "setter": 115, "data": [118, 163, 170, 171, 172, 174, 177, 178, 186], "gener": [119, 174], "attribut": [121, 186, 187, 194], "audio": [122, 170], "blob": 123, "convert": [125, 176, 186, 189, 207], "dump": 126, "featurehash": [127, 189], "imag": [129, 171, 173, 183, 206, 208], "mesh": [130, 173], "multimod": [131, 172], "port": [133, 189], "protobuf": [135, 189, 192, 204, 213], "rich_embed": 137, "sugar": 139, "video": [141, 177], "pydantic_model": 142, "strawberry_typ": 143, "math": [145, 146, 147, 148, 149, 150, 151, 152, 153], "distanc": [146, 147, 148, 149, 150], "numpi": 147, "paddl": 148, "tensorflow": 149, "torch": 150, "ndarrai": [153, 157, 176, 194], "proto": [154, 155, 156, 157, 158, 159, 160, 161, 212, 213], "docarray_pb2": [155, 159, 161], "pb": [158, 159], "pb2": [160, 161], "score": [162, 163, 164, 165, 166], "represent": [166, 173], "changelog": 169, "0": [169, 170, 171, 173, 174, 175, 176, 177, 179], "11": [169, 170, 171, 176, 177, 179], "chang": 169, "documentarrayinmemori": 169, "": [169, 182, 184, 187, 190, 191, 192, 195, 196, 200], "contain": 169, "high": 169, "serial": [169, 192, 204], "format": [169, 204], "default": 169, "dict": [169, 192], "strategi": 169, "name": [169, 198], "svg": [170, 171, 173, 174, 175, 176, 177, 179], "version": [170, 171, 173, 174, 175, 176, 177, 179], "width": [170, 171, 173, 174, 175, 176, 177, 179], "0em": [170, 171, 173, 174, 175, 176, 177, 179], "height": [170, 171, 173, 174, 175, 176, 177, 179], "class": [170, 171, 173, 174, 175, 176, 177, 179, 182], "sd": [170, 171, 173, 174, 175, 176, 177, 179], "octicon": [170, 171, 173, 174, 175, 176, 177, 179], "unmut": 170, "viewbox": [170, 171, 173, 174, 175, 176, 177, 179], "16": [170, 171, 173, 174, 175, 176, 177, 179], "aria": [170, 171, 173, 174, 175, 176, 177, 179], "hidden": [170, 171, 173, 174, 175, 176, 177, 179], "true": [170, 171, 173, 174, 175, 176, 177, 179], "path": [170, 171, 173, 174, 175, 176, 177, 179], "fill": [170, 171, 173, 174, 175, 176, 177, 179, 188], "rule": [170, 171, 173, 174, 175, 176, 177, 179, 187], "evenodd": [170, 171, 173, 174, 175, 176, 177, 179], "d": [170, 171, 173, 174, 175, 176, 177, 179], "m7": [170, 174], "563": 170, "069a": 170, "75": [170, 171, 173, 174, 175, 176, 177, 179], "018": 170, "75v10": [170, 171], "5a": [170, 171, 174, 177], "01": [170, 171, 173, 174, 175, 176, 179], "238": 170, "57l3": 170, "472": 170, "11h1": 170, "75a1": [170, 171, 175, 177, 179], "010": [170, 174, 175], "9": [170, 176, 179], "25v": [170, 177, 179], "5c0": [170, 171, 177], "784": [170, 171, 175, 177], "5h1": [170, 175, 176], "723l3": 170, "289": 170, "82a": 170, "801": 170, "111zm6": 170, "38l4": 170, "319a": 170, "488": [170, 176], "181h": 170, "2a": [170, 177, 179], "25": [170, 171, 173, 174, 175, 177, 179], "00": [170, 171, 173, 174, 175, 176, 177, 179], "25v2": [170, 171], "138": [170, 171, 175, 177], "112": [170, 171, 175, 177], "25h2a": 170, "18l6": 170, "62v4": 170, "38zm6": 170, "096": 170, "038a": 170, "011": [170, 171, 174], "06": [170, 179], "314": [170, 179], "000": [170, 171, 177], "193": 170, "06v": 170, "001zm": 170, "121a": 170, "061": 170, "95": [170, 179], "101": [170, 176], "07l": 170, "001": [170, 173, 176, 179], "001z": 170, "wav": 170, "file": [170, 175, 177, 196], "save": [170, 175, 177], "other": [170, 195], "tool": 170, "librari": 170, "m1": 171, "25v10": 171, "25h": [171, 177], "94a": 171, "76": 171, "03": 171, "03l6": 171, "077": 171, "078a1": 171, "012": [171, 179], "412": [171, 176], "06l14": 171, "31v2": 171, "75a": [171, 175, 177], "25h1": 171, "75zm12": 171, "11h4": 171, "81l5": 171, "048": 171, "047a": 171, "344": 171, "009l4": 171, "298": 171, "889v": 171, "917a": 171, "25zm1": 171, "0014": [171, 179], "1h1": 171, "14": [171, 175], "216": [171, 175, 176, 177], "15": [171, 179], "15h12": 171, "5a1": [171, 177, 179], "0016": [171, 177, 179], "13": [171, 176, 177], "25zm5": 171, "6a": 171, "0zm7": 171, "6a2": 171, "014": 171, "0z": 171, "simpl": [171, 176], "process": [171, 183, 202, 203], "displai": [171, 208], "sprite": [171, 206, 208], "segment": [171, 176], "complic": 171, "small": 171, "ones": 171, "m8": 173, "878": [173, 174], "392a1": [173, 174], "756": [173, 174], "0l": [173, 174], "045a1": 173, "951v6": 173, "098c0": 173, "624": 173, "332": [173, 176, 179], "872": 173, "514l5": 173, "0l5": [173, 174], "045c": 173, "54": [173, 176], "313": 173, "89": 173, "514v4": 173, "951c0": 173, "514l8": 173, "392zm7": 173, "875": 173, "69a": [173, 174], "0l4": [173, 174], "63": [173, 174, 176], "685l8": 173, "133": 173, "245": 173, "375l4": 173, "685zm2": 173, "677v5": 173, "372c0": 173, "09": [173, 179], "047": [173, 179], "171": 173, "125": [173, 174], "216l4": 173, "625": 173, "683v8": 173, "432l2": 173, "677zm6": 173, "271l4": 173, "683a": 173, "216v5": 173, "677l8": 173, "432v5": 173, "516z": 173, "3d": 173, "vertic": 173, "face": [173, 210], "point": 173, "cloud": [173, 179, 204], "rgb": 173, "stack": 174, "122": 174, "003": 174, "902c": 174, "83": 174, "481": 174, "68": 174, "162l8": 174, "358a1": 174, "0l2": 174, "119": [174, 179], "456a1": 174, "162l7": 174, "392zm8": 174, "685": 174, "685a": 174, "685zm1": 174, "601": 174, "789a": 174, "025": 174, "273l5": 174, "249": [174, 176], "044a": 174, "752": 174, "298l": 174, "248": 174, "044a1": 174, "0l1": 174, "874": 174, "814a": 174, "789zm0": 174, "273": [174, 179], "025z": 174, "multi": [174, 176, 184], "modal": [174, 176, 181, 183, 184, 185], "model": [174, 207], "your": 174, "instanti": 174, "nest": [174, 181, 187, 191, 194, 195, 205], "each": 174, "parent": 174, "tabl": [175, 206, 212, 213], "m0": 175, "75c0": 175, "0h12": 175, "5c15": 175, "75v3": 175, "585a": 175, "746": 175, "83v8": 175, "085a1": 175, "0114": [175, 179], "16h6": 175, "309a": [175, 179], "748": 175, "118": [175, 179], "0h1": 175, "25v6": [175, 177], "165a": 175, "83v1": 175, "75zm1": 175, "5v7": 175, "25h5v": 175, "8h1": 175, "5zm5": 175, "5v1": 175, "25h5v5zm1": 175, "5v8h7": 175, "5h": [175, 179], "8zm8": 175, "8v1": 175, "5h7": 175, "25v5z": 175, "typographi": 176, "m6": 176, "21": [176, 179], "5l4": 176, "574": 176, "594": 176, "857": 176, "5h6": 176, "21zm": 176, "5l": [176, 179], "829": 176, "487a": 176, "423": 176, "474l5": 176, "735": 176, "332a1": 176, "302": 176, "018l": 176, "39": 176, "688a": 176, "415": 176, "496l2": 176, "10h6": 176, "71zm3": 176, "358c10": 176, "53": 176, "374": 176, "87": 176, "4c1": 176, "939": 176, "601v5": 176, "649a": 176, "448": 176, "275c13": 176, "995": 176, "12": [176, 177, 179], "82": 176, "13c": 176, "77": 176, "514": 176, "231": 176, "078": 176, "709": 176, "577": 176, "922": 176, "199": 176, "041": 176, "694": 176, "265": [176, 179], "411": 176, "887": 176, "944c11": 176, "78": 176, "88": 176, "5v": 176, "899c0": 176, "869": 176, "528": 176, "282": 176, "84": 176, "858a": 176, "32": 176, "716zm14": 176, "9h13c": 176, "881": 176, "375": 176, "22": 176, "637": 176, "444": 176, "253": 176, "217": 176, "363": 176, "806": 176, "408": 176, "155": 176, "697": 176, "896": 176, "354": 176, "732": 176, "26": [176, 179], "209": 176, "588": 176, "449": 176, "35": [176, 179], "257": 176, "495": 176, "551v9z": 176, "long": 176, "back": 176, "via": [176, 183, 188, 197, 198, 203], "hash": 176, "subindex": 176, "devic": [177, 209], "camera": 177, "m16": 177, "136": 177, "643l11": 177, "425v4": 177, "009": 177, "3h": 177, "75v6": 177, "13h7": 177, "0011": 177, "675l3": 177, "864": 177, "318a": 177, "5zm": 177, "075l3": 177, "1v": 177, "85l": 177, "1v1": 177, "65zm9": 177, "75v": 177, "25h7": 177, "5z": 177, "kei": 177, "frame": 177, "extract": 177, "webcam": 177, "web": 178, "consol": 178, "push": 178, "read": [178, 203], "delet": 178, "rocket": 179, "m14": 179, "064": 179, "0a8": 179, "187": 179, "563l": 179, "459": 179, "458c": 179, "616": 179, "641": 179, "904": 179, "979h3": 179, "31a1": 179, "49": 179, "833l": 179, "607a": 179, "418": 179, "11l3": 179, "102": 179, "954c": 179, "037": 179, "051": 179, "079": 179, "124": 179, "145l2": 179, "429": 179, "428c": 179, "046": 179, "094": 179, "088": 179, "145": 179, "125l": 179, "954": 179, "102a": 179, "418l2": 179, "774": 179, "707a1": 179, "833": 179, "49v9": 179, "485c": 179, "338": 179, "288": 179, "665": 179, "59": 179, "979": 179, "904l": 179, "458": 179, "459a8": 179, "936v1": 179, "0h": 179, "186zm10": 179, "625c": 179, "177": 179, "266": 179, "175l": 179, "521": 179, "548": 179, "783": 179, "949": 179, "213v": 179, "066zm3": 179, "678": 179, "116l5": 179, "766c": 179, "058": 179, "117": 179, "178": 179, "176": 179, "266h3": 179, "213": 179, "119l": 179, "782": 179, "547zm5": 179, "493a7": 179, "063": 179, "186a": 179, "186a7": 179, "123": 179, "127l": 179, "458a15": 179, "499": 179, "02l": 179, "317": 179, "143": 179, "317a15": 179, "02": 179, "458h": 179, "002zm12": 179, "0zm": 179, "44": 179, "56a1": 179, "12c": 179, "734": 179, "73": 179, "003a": 179, "23": 179, "265c": 179, "671": 179, "103": 179, "416": 179, "005": 179, "148z": 179, "support": [179, 185, 201], "authent": 180, "login": 180, "logout": 180, "select": 181, "slice": 181, "object": [181, 196, 207], "decor": 182, "annot": 182, "behavior": 182, "us": [182, 188, 202], "what": [182, 184, 187, 190, 191, 192, 195, 196, 200, 201, 210], "next": [182, 184, 187, 190, 191, 192, 195, 196, 200], "clip": 183, "understand": 184, "problem": 184, "challeng": 184, "overrid": 185, "exist": 185, "uri": 186, "an": [187, 196], "unknown": 187, "handl": 187, "resolv": 187, "copi": [187, 196], "anoth": 187, "neural": [188, 197], "network": [188, 197, 202], "nearest": [188, 201], "neighbour": [188, 201], "fluent": 189, "interfac": 189, "method": 189, "blobdata": 189, "imagedata": 189, "contentproperti": 189, "textdata": 189, "singletonsugar": 189, "audiodata": 189, "meshdata": 189, "videodata": 189, "urifil": 189, "arbitrari": 192, "byte": [192, 204], "base64": [192, 204], "visual": [193, 206], "selector": 194, "auto": 194, "ravel": 194, "dunder": 194, "syntax": [194, 199], "sugari": 194, "id": 195, "boolean": 195, "mask": 195, "flatten": 195, "handi": 195, "shuffl": 195, "split": 195, "singl": 196, "local": 196, "against": 198, "ground": 198, "truth": 198, "identifi": 198, "label": 198, "metric": 198, "function": 198, "The": 198, "max_rel": 198, "onc": 198, "wise": 198, "condit": 199, "oper": 199, "differ": 201, "between": [201, 207], "which": 201, "side": 201, "gpu": [201, 202], "when": 202, "choos": 202, "thread": 202, "map_batch": 202, "overlap": 202, "cpu": 202, "comput": 202, "why": 202, "129": 202, "128": 202, "time": 202, "extern": 203, "flow": 203, "executor": 203, "accept": 203, "scheme": 203, "more": 203, "wire": 204, "pickl": 204, "disk": 204, "stream": 204, "over": 205, "modifi": 205, "through": 205, "projector": 206, "valid": 207, "incom": 207, "respons": 207, "recurs": 207, "jupyt": 208, "notebook": 208, "colab": 208, "rich": 208, "pycharm": 208, "user": [208, 210], "instal": [209, 211], "appl": 209, "silicon": 209, "check": 209, "termin": 209, "homebrew": 209, "depend": 209, "wheel": 209, "compar": 210, "altern": 210, "hug": 210, "dataset": 210, "To": 210, "awkwardarrai": 210, "zarr": 210, "jina": 210, "welcom": 211, "protocol": [212, 213], "densendarrayproto": [212, 213], "documentarrayproto": [212, 213], "documentproto": [212, 213], "evaluationsentri": [212, 213], "scoresentri": [212, 213], "namedscoreproto": [212, 213], "ndarrayproto": [212, 213], "sparsendarrayproto": [212, 213], "scalar": [212, 213], "valu": [212, 213], "rebuild": 213}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Annlite": [[0, "annlite"]], "Usage": [[0, "usage"], [2, "usage"], [5, "usage"], [6, "usage"], [7, "usage"], [8, "usage"], [9, "usage"]], "Config": [[0, "config"], [2, "config"], [5, "config"], [6, "config"], [8, "config"], [9, "config"]], "Vector search with filter": [[0, "vector-search-with-filter"], [5, "vector-search-with-filter"], [6, "vector-search-with-filter"]], "Example of .find with a filter only": [[0, "example-of-find-with-a-filter-only"], [9, "example-of-find-with-a-filter-only"]], "Example of .find with query vector and filter": [[0, "example-of-find-with-query-vector-and-filter"], [9, "example-of-find-with-query-vector-and-filter"]], "One Million Scale Benchmark": [[1, "one-million-scale-benchmark"]], "Methodology": [[1, "methodology"]], "Core tasks": [[1, "core-tasks"]], "Parametric combinations": [[1, "parametric-combinations"]], "Experiment setup": [[1, "experiment-setup"]], "Latency result": [[1, "latency-result"]], "QPS result": [[1, "qps-result"]], "Recall@10 vs QPS": [[1, "recall-10-vs-qps"]], "Rationale on experiment design": [[1, "rationale-on-experiment-design"]], "Known limitations": [[1, "known-limitations"], [4, "known-limitations"]], "Conclusions": [[1, "conclusions"]], "Elasticsearch": [[2, "elasticsearch"]], "Start Elastic service": [[2, "start-elastic-service"]], "Create DocumentArray with Elasticsearch backend": [[2, "create-documentarray-with-elasticsearch-backend"]], "Secure connection": [[2, "secure-connection"]], "Bulk request customization": [[2, "bulk-request-customization"]], "Note": [[2, null], [2, null], [2, null], [6, null], [7, null], [7, null], [9, null], [205, null], [206, null]], "Vector search with filter query": [[2, "vector-search-with-filter-query"], [7, "vector-search-with-filter-query"]], "Search by filter query": [[2, "search-by-filter-query"], [7, "search-by-filter-query"]], "Search by .text field": [[2, "search-by-text-field"], [7, "search-by-text-field"]], "Search by .tags field": [[2, "search-by-tags-field"], [7, "search-by-tags-field"]], "Add New Document Store": [[3, "add-new-document-store"]], "Step 1: create the folder": [[3, "step-1-create-the-folder"]], "Step 2: implement getsetdel.py": [[3, "step-2-implement-getsetdel-py"]], "Step 3: implement seqlike.py": [[3, "step-3-implement-seqlike-py"]], "Step 4: implement backend.py": [[3, "step-4-implement-backend-py"]], "Step 5: implement find.py": [[3, "step-5-implement-find-py"]], "Step 6: summarize everything in __init__.py.": [[3, "step-6-summarize-everything-in-init-py"]], "Step 7: subclass from DocumentArray": [[3, "step-7-subclass-from-documentarray"]], "Step 8: add entrypoint to DocumentArray": [[3, "step-8-add-entrypoint-to-documentarray"]], "On pull request: add tests and type-hint": [[3, "on-pull-request-add-tests-and-type-hint"]], "Document Store": [[4, "document-store"]], "Construct": [[4, "construct"], [182, "construct"], [187, "construct"], [196, "construct"]], "Subindices": [[4, null], [174, null]], "Construct with config": [[4, "construct-with-config"]], "Creating DocumentArrays without specifying index": [[4, null]], "Feature summary": [[4, "feature-summary"]], "Vector search example": [[4, "vector-search-example"]], "Vector search with filter example": [[4, "vector-search-with-filter-example"]], "Filter example": [[4, "filter-example"]], "Persistence, mutations and context manager": [[4, "persistence-mutations-and-context-manager"]], "Multiple references to the same storage backend": [[4, "multiple-references-to-the-same-storage-backend"]], "Out-of-array modification": [[4, "out-of-array-modification"]], "Performance issue caused by list-like structure": [[4, "performance-issue-caused-by-list-like-structure"]], "Hint": [[4, null]], "Elements access is slower": [[4, "elements-access-is-slower"]], "Milvus": [[5, "milvus"]], "Start Milvus service": [[5, "start-milvus-service"]], "Create DocumentArray with Milvus backend": [[5, "create-documentarray-with-milvus-backend"]], "Minimal example": [[5, "minimal-example"]], "Example of .find with filtered vector search": [[5, "example-of-find-with-filtered-vector-search"]], "Example of .find with only a filter": [[5, "example-of-find-with-only-a-filter"]], "Advanced options": [[5, "advanced-options"]], "Setting a consistency level": [[5, "setting-a-consistency-level"]], "Setting a batch size": [[5, "setting-a-batch-size"]], "Passing search parameters": [[5, "passing-search-parameters"]], "Known limitations of the Milvus Document Store": [[5, "known-limitations-of-the-milvus-document-store"]], "Collection loading": [[5, "collection-loading"]], "Storing large tensors outside of embedding field": [[5, "storing-large-tensors-outside-of-embedding-field"]], "Qdrant": [[6, "qdrant"]], "Start Qdrant service": [[6, "start-qdrant-service"]], "Create DocumentArray with Qdrant backend": [[6, "create-documentarray-with-qdrant-backend"]], "Minimum example": [[6, "minimum-example"], [9, "minimum-example"]], "Example of .find with a filter": [[6, "example-of-find-with-a-filter"]], "Example of .filter with a filter": [[6, "example-of-filter-with-a-filter"]], "Redis": [[7, "redis"]], "Start Redis service": [[7, "start-redis-service"]], "Create DocumentArray with Redis backend": [[7, "create-documentarray-with-redis-backend"]], "Configuration": [[7, "configuration"]], "Update Vector Search Indexing Schema": [[7, "update-vector-search-indexing-schema"]], "SQLite": [[8, "sqlite"]], "Weaviate": [[9, "weaviate"]], "Start Weaviate service": [[9, "start-weaviate-service"]], "Create DocumentArray with Weaviate backend": [[9, "create-documentarray-with-weaviate-backend"]], "Filtering": [[9, "filtering"]], "Sorting": [[9, "sorting"]], "Example of .find with vector and sort": [[9, "example-of-find-with-vector-and-sort"]], "Set minimum certainty on query results": [[9, "set-minimum-certainty-on-query-results"]], "Include additional properties in the return": [[9, "include-additional-properties-in-the-return"]], "GraphQL": [[10, "graphql"]], "Basic example": [[10, "basic-example"]], "Integrate with FastAPI": [[10, "integrate-with-fastapi"]], "PyTorch/Deep Learning Frameworks": [[11, "pytorch-deep-learning-frameworks"]], "Load, map, batch in one-shot": [[11, "load-map-batch-in-one-shot"]], " Python API": [[12, "python-api"]], "docarray - Document and DocumentArray": [[12, "docarray-document-and-documentarray"]], "docarray.dataclasses - Dataclass": [[12, "docarray-dataclasses-dataclass"]], "docarray.array - Document stores": [[12, "docarray-array-document-stores"]], "docarray package": [[13, "docarray-package"]], "Subpackages": [[13, "subpackages"], [14, "subpackages"], [23, "subpackages"], [61, "subpackages"], [117, "subpackages"], [145, "subpackages"], [154, "subpackages"], [162, "subpackages"]], "Submodules": [[13, "submodules"], [14, "submodules"], [23, "submodules"], [25, "submodules"], [35, "submodules"], [56, "submodules"], [61, "submodules"], [62, "submodules"], [68, "submodules"], [73, "submodules"], [78, "submodules"], [83, "submodules"], [88, "submodules"], [94, "submodules"], [100, "submodules"], [105, "submodules"], [112, "submodules"], [117, "submodules"], [120, "submodules"], [145, "submodules"], [146, "submodules"], [154, "submodules"], [156, "submodules"], [158, "submodules"], [160, "submodules"], [162, "submodules"], [164, "submodules"]], "Module contents": [[13, "module-docarray"], [14, "module-docarray.array"], [23, "module-docarray.array.mixins"], [25, "module-docarray.array.mixins.dataloader"], [35, "module-docarray.array.mixins.io"], [56, "module-docarray.array.queryset"], [61, "module-docarray.array.storage"], [62, "module-docarray.array.storage.annlite"], [68, "module-docarray.array.storage.base"], [73, "module-docarray.array.storage.elastic"], [78, "module-docarray.array.storage.memory"], [83, "module-contents"], [88, "module-docarray.array.storage.qdrant"], [94, "module-docarray.array.storage.redis"], [100, "module-docarray.array.storage.sqlite"], [105, "module-docarray.array.storage.weaviate"], [112, "module-docarray.dataclasses"], [117, "module-docarray.document"], [120, "module-docarray.document.mixins"], [145, "module-docarray.math"], [146, "module-docarray.math.distance"], [154, "module-docarray.proto"], [156, "module-docarray.proto.io"], [158, "module-docarray.proto.pb"], [160, "module-docarray.proto.pb2"], [162, "module-docarray.score"], [164, "module-docarray.score.mixins"], [167, "module-docarray.typing"]], "docarray.array package": [[14, "docarray-array-package"]], "docarray.array.annlite module": [[15, "module-docarray.array.annlite"]], "docarray.array.base module": [[16, "module-docarray.array.base"]], "docarray.array.chunk module": [[17, "module-docarray.array.chunk"]], "docarray.array.document module": [[18, "module-docarray.array.document"]], "docarray.array.elastic module": [[19, "module-docarray.array.elastic"]], "docarray.array.match module": [[20, "module-docarray.array.match"]], "docarray.array.memory module": [[21, "module-docarray.array.memory"]], "docarray.array.milvus module": [[22, "docarray-array-milvus-module"]], "docarray.array.mixins package": [[23, "docarray-array-mixins-package"]], "docarray.array.mixins.content module": [[24, "module-docarray.array.mixins.content"]], "docarray.array.mixins.dataloader package": [[25, "docarray-array-mixins-dataloader-package"]], "docarray.array.mixins.dataloader.helper module": [[26, "module-docarray.array.mixins.dataloader.helper"]], "docarray.array.mixins.delitem module": [[27, "module-docarray.array.mixins.delitem"]], "docarray.array.mixins.embed module": [[28, "module-docarray.array.mixins.embed"]], "docarray.array.mixins.empty module": [[29, "module-docarray.array.mixins.empty"]], "docarray.array.mixins.evaluation module": [[30, "module-docarray.array.mixins.evaluation"]], "docarray.array.mixins.find module": [[31, "module-docarray.array.mixins.find"]], "docarray.array.mixins.getattr module": [[32, "module-docarray.array.mixins.getattr"]], "docarray.array.mixins.getitem module": [[33, "module-docarray.array.mixins.getitem"]], "docarray.array.mixins.group module": [[34, "module-docarray.array.mixins.group"]], "docarray.array.mixins.io package": [[35, "docarray-array-mixins-io-package"]], "docarray.array.mixins.io.binary module": [[36, "module-docarray.array.mixins.io.binary"]], "docarray.array.mixins.io.common module": [[37, "module-docarray.array.mixins.io.common"]], "docarray.array.mixins.io.csv module": [[38, "module-docarray.array.mixins.io.csv"]], "docarray.array.mixins.io.dataframe module": [[39, "module-docarray.array.mixins.io.dataframe"]], "docarray.array.mixins.io.from_gen module": [[40, "module-docarray.array.mixins.io.from_gen"]], "docarray.array.mixins.io.json module": [[41, "module-docarray.array.mixins.io.json"]], "docarray.array.mixins.io.pbar module": [[42, "module-docarray.array.mixins.io.pbar"]], "docarray.array.mixins.io.pushpull module": [[43, "module-docarray.array.mixins.io.pushpull"]], "docarray.array.mixins.match module": [[44, "module-docarray.array.mixins.match"]], "docarray.array.mixins.parallel module": [[45, "module-docarray.array.mixins.parallel"]], "docarray.array.mixins.plot module": [[46, "module-docarray.array.mixins.plot"]], "docarray.array.mixins.post module": [[47, "module-docarray.array.mixins.post"]], "docarray.array.mixins.pydantic module": [[48, "module-docarray.array.mixins.pydantic"]], "docarray.array.mixins.reduce module": [[49, "module-docarray.array.mixins.reduce"]], "docarray.array.mixins.sample module": [[50, "module-docarray.array.mixins.sample"]], "docarray.array.mixins.setitem module": [[51, "module-docarray.array.mixins.setitem"]], "docarray.array.mixins.strawberry module": [[52, "module-docarray.array.mixins.strawberry"]], "docarray.array.mixins.text module": [[53, "module-docarray.array.mixins.text"]], "docarray.array.mixins.traverse module": [[54, "module-docarray.array.mixins.traverse"]], "docarray.array.qdrant module": [[55, "module-docarray.array.qdrant"]], "docarray.array.queryset package": [[56, "docarray-array-queryset-package"]], "docarray.array.queryset.lookup module": [[57, "module-docarray.array.queryset.lookup"]], "docarray.array.queryset.parser module": [[58, "module-docarray.array.queryset.parser"]], "docarray.array.redis module": [[59, "module-docarray.array.redis"]], "docarray.array.sqlite module": [[60, "module-docarray.array.sqlite"]], "docarray.array.storage package": [[61, "docarray-array-storage-package"]], "docarray.array.storage.annlite package": [[62, "docarray-array-storage-annlite-package"]], "docarray.array.storage.annlite.backend module": [[63, "module-docarray.array.storage.annlite.backend"]], "docarray.array.storage.annlite.find module": [[64, "module-docarray.array.storage.annlite.find"]], "docarray.array.storage.annlite.getsetdel module": [[65, "module-docarray.array.storage.annlite.getsetdel"]], "docarray.array.storage.annlite.helper module": [[66, "module-docarray.array.storage.annlite.helper"]], "docarray.array.storage.annlite.seqlike module": [[67, "module-docarray.array.storage.annlite.seqlike"]], "docarray.array.storage.base package": [[68, "docarray-array-storage-base-package"]], "docarray.array.storage.base.backend module": [[69, "module-docarray.array.storage.base.backend"]], "docarray.array.storage.base.getsetdel module": [[70, "module-docarray.array.storage.base.getsetdel"]], "docarray.array.storage.base.helper module": [[71, "module-docarray.array.storage.base.helper"]], "docarray.array.storage.base.seqlike module": [[72, "module-docarray.array.storage.base.seqlike"]], "docarray.array.storage.elastic package": [[73, "docarray-array-storage-elastic-package"]], "docarray.array.storage.elastic.backend module": [[74, "module-docarray.array.storage.elastic.backend"]], "docarray.array.storage.elastic.find module": [[75, "module-docarray.array.storage.elastic.find"]], "docarray.array.storage.elastic.getsetdel module": [[76, "module-docarray.array.storage.elastic.getsetdel"]], "docarray.array.storage.elastic.seqlike module": [[77, "module-docarray.array.storage.elastic.seqlike"]], "docarray.array.storage.memory package": [[78, "docarray-array-storage-memory-package"]], "docarray.array.storage.memory.backend module": [[79, "module-docarray.array.storage.memory.backend"]], "docarray.array.storage.memory.find module": [[80, "module-docarray.array.storage.memory.find"]], "docarray.array.storage.memory.getsetdel module": [[81, "module-docarray.array.storage.memory.getsetdel"]], "docarray.array.storage.memory.seqlike module": [[82, "module-docarray.array.storage.memory.seqlike"]], "docarray.array.storage.milvus package": [[83, "docarray-array-storage-milvus-package"]], "docarray.array.storage.milvus.backend module": [[84, "docarray-array-storage-milvus-backend-module"]], "docarray.array.storage.milvus.find module": [[85, "docarray-array-storage-milvus-find-module"]], "docarray.array.storage.milvus.getsetdel module": [[86, "docarray-array-storage-milvus-getsetdel-module"]], "docarray.array.storage.milvus.seqlike module": [[87, "docarray-array-storage-milvus-seqlike-module"]], "docarray.array.storage.qdrant package": [[88, "docarray-array-storage-qdrant-package"]], "docarray.array.storage.qdrant.backend module": [[89, "module-docarray.array.storage.qdrant.backend"]], "docarray.array.storage.qdrant.find module": [[90, "module-docarray.array.storage.qdrant.find"]], "docarray.array.storage.qdrant.getsetdel module": [[91, "module-docarray.array.storage.qdrant.getsetdel"]], "docarray.array.storage.qdrant.helper module": [[92, "module-docarray.array.storage.qdrant.helper"]], "docarray.array.storage.qdrant.seqlike module": [[93, "module-docarray.array.storage.qdrant.seqlike"]], "docarray.array.storage.redis package": [[94, "docarray-array-storage-redis-package"]], "docarray.array.storage.redis.backend module": [[95, "module-docarray.array.storage.redis.backend"]], "docarray.array.storage.redis.find module": [[96, "module-docarray.array.storage.redis.find"]], "docarray.array.storage.redis.getsetdel module": [[97, "module-docarray.array.storage.redis.getsetdel"]], "docarray.array.storage.redis.seqlike module": [[98, "module-docarray.array.storage.redis.seqlike"]], "docarray.array.storage.registry module": [[99, "module-docarray.array.storage.registry"]], "docarray.array.storage.sqlite package": [[100, "docarray-array-storage-sqlite-package"]], "docarray.array.storage.sqlite.backend module": [[101, "module-docarray.array.storage.sqlite.backend"]], "docarray.array.storage.sqlite.getsetdel module": [[102, "module-docarray.array.storage.sqlite.getsetdel"]], "docarray.array.storage.sqlite.helper module": [[103, "module-docarray.array.storage.sqlite.helper"]], "docarray.array.storage.sqlite.seqlike module": [[104, "module-docarray.array.storage.sqlite.seqlike"]], "docarray.array.storage.weaviate package": [[105, "docarray-array-storage-weaviate-package"]], "docarray.array.storage.weaviate.backend module": [[106, "module-docarray.array.storage.weaviate.backend"]], "docarray.array.storage.weaviate.find module": [[107, "module-docarray.array.storage.weaviate.find"]], "docarray.array.storage.weaviate.getsetdel module": [[108, "module-docarray.array.storage.weaviate.getsetdel"]], "docarray.array.storage.weaviate.seqlike module": [[109, "module-docarray.array.storage.weaviate.seqlike"]], "docarray.array.weaviate module": [[110, "module-docarray.array.weaviate"]], "docarray.base module": [[111, "module-docarray.base"]], "docarray.dataclasses package": [[112, "docarray-dataclasses-package"]], "docarray.dataclasses.enums module": [[113, "module-docarray.dataclasses.enums"]], "docarray.dataclasses.getter module": [[114, "module-docarray.dataclasses.getter"]], "docarray.dataclasses.setter module": [[115, "module-docarray.dataclasses.setter"]], "docarray.dataclasses.types module": [[116, "module-docarray.dataclasses.types"]], "docarray.document package": [[117, "docarray-document-package"]], "docarray.document.data module": [[118, "module-docarray.document.data"]], "docarray.document.generators module": [[119, "module-docarray.document.generators"]], "docarray.document.mixins package": [[120, "docarray-document-mixins-package"]], "docarray.document.mixins.attribute module": [[121, "module-docarray.document.mixins.attribute"]], "docarray.document.mixins.audio module": [[122, "module-docarray.document.mixins.audio"]], "docarray.document.mixins.blob module": [[123, "module-docarray.document.mixins.blob"]], "docarray.document.mixins.content module": [[124, "module-docarray.document.mixins.content"]], "docarray.document.mixins.convert module": [[125, "module-docarray.document.mixins.convert"]], "docarray.document.mixins.dump module": [[126, "module-docarray.document.mixins.dump"]], "docarray.document.mixins.featurehash module": [[127, "module-docarray.document.mixins.featurehash"]], "docarray.document.mixins.helper module": [[128, "module-docarray.document.mixins.helper"]], "docarray.document.mixins.image module": [[129, "module-docarray.document.mixins.image"]], "docarray.document.mixins.mesh module": [[130, "module-docarray.document.mixins.mesh"]], "docarray.document.mixins.multimodal module": [[131, "module-docarray.document.mixins.multimodal"]], "docarray.document.mixins.plot module": [[132, "module-docarray.document.mixins.plot"]], "docarray.document.mixins.porting module": [[133, "module-docarray.document.mixins.porting"]], "docarray.document.mixins.property module": [[134, "module-docarray.document.mixins.property"]], "docarray.document.mixins.protobuf module": [[135, "module-docarray.document.mixins.protobuf"]], "docarray.document.mixins.pydantic module": [[136, "module-docarray.document.mixins.pydantic"]], "docarray.document.mixins.rich_embedding module": [[137, "module-docarray.document.mixins.rich_embedding"]], "docarray.document.mixins.strawberry module": [[138, "module-docarray.document.mixins.strawberry"]], "docarray.document.mixins.sugar module": [[139, "module-docarray.document.mixins.sugar"]], "docarray.document.mixins.text module": [[140, "module-docarray.document.mixins.text"]], "docarray.document.mixins.video module": [[141, "module-docarray.document.mixins.video"]], "docarray.document.pydantic_model module": [[142, "module-docarray.document.pydantic_model"]], "docarray.document.strawberry_type module": [[143, "module-docarray.document.strawberry_type"]], "docarray.helper module": [[144, "module-docarray.helper"]], "docarray.math package": [[145, "docarray-math-package"]], "docarray.math.distance package": [[146, "docarray-math-distance-package"]], "docarray.math.distance.numpy module": [[147, "module-docarray.math.distance.numpy"]], "docarray.math.distance.paddle module": [[148, "docarray-math-distance-paddle-module"]], "docarray.math.distance.tensorflow module": [[149, "module-docarray.math.distance.tensorflow"]], "docarray.math.distance.torch module": [[150, "module-docarray.math.distance.torch"]], "docarray.math.evaluation module": [[151, "module-docarray.math.evaluation"]], "docarray.math.helper module": [[152, "module-docarray.math.helper"]], "docarray.math.ndarray module": [[153, "module-docarray.math.ndarray"]], "docarray.proto package": [[154, "docarray-proto-package"]], "docarray.proto.docarray_pb2 module": [[155, "module-docarray.proto.docarray_pb2"]], "docarray.proto.io package": [[156, "docarray-proto-io-package"]], "docarray.proto.io.ndarray module": [[157, "module-docarray.proto.io.ndarray"]], "docarray.proto.pb package": [[158, "docarray-proto-pb-package"]], "docarray.proto.pb.docarray_pb2 module": [[159, "module-docarray.proto.pb.docarray_pb2"]], "docarray.proto.pb2 package": [[160, "docarray-proto-pb2-package"]], "docarray.proto.pb2.docarray_pb2 module": [[161, "module-docarray.proto.pb2.docarray_pb2"]], "docarray.score package": [[162, "docarray-score-package"]], "docarray.score.data module": [[163, "module-docarray.score.data"]], "docarray.score.mixins package": [[164, "docarray-score-mixins-package"]], "docarray.score.mixins.property module": [[165, "module-docarray.score.mixins.property"]], "docarray.score.mixins.representer module": [[166, "module-docarray.score.mixins.representer"]], "docarray.typing package": [[167, "docarray-typing-package"]], "docarray": [[168, "docarray"]], "Changelog": [[169, "changelog"]], "0.11.0: change DocumentArrayInMemory\u2019s container to list": [[169, "change-documentarrayinmemory-s-container-to-list"]], "0.10.0: add high-level dataclass API to Document": [[169, "add-high-level-dataclass-api-to-document"]], "0.5.0: add storage backend to DocumentArray": [[169, "add-storage-backend-to-documentarray"]], "0.4.0: change on the DocumentArray serialization format": [[169, "change-on-the-documentarray-serialization-format"]], "0.3.0: change on the default JSON/dict serialization strategy": [[169, "change-on-the-default-json-dict-serialization-strategy"]], "0.2.0: change on the content field name": [[169, "change-on-the-content-field-name"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-unmute\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.563 2.069A.75.75 0 018 2.75v10.5a.75.75 0 01-1.238.57L3.472 11H1.75A1.75 1.75 0 010 9.25v-2.5C0 5.784.784 5 1.75 5h1.723l3.289-2.82a.75.75 0 01.801-.111zM6.5 4.38L4.238 6.319a.75.75 0 01-.488.181h-2a.25.25 0 00-.25.25v2.5c0 .138.112.25.25.25h2a.75.75 0 01.488.18L6.5 11.62V4.38zm6.096-2.038a.75.75 0 011.06 0 8 8 0 010 11.314.75.75 0 01-1.06-1.06 6.5 6.5 0 000-9.193.75.75 0 010-1.06v-.001zm-1.06 2.121a.75.75 0 10-1.061 1.061 3.5 3.5 0 010 4.95.75.75 0 101.06 1.06 5 5 0 000-7.07l.001-.001z\"></path></svg> Audio": [[170, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-unmute-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m7-563-2-069a-75-75-0-018-2-75v10-5a-75-75-0-01-1-238-57l3-472-11h1-75a1-75-1-75-0-010-9-25v-2-5c0-5-784-784-5-1-75-5h1-723l3-289-2-82a-75-75-0-01-801-111zm6-5-4-38l4-238-6-319a-75-75-0-01-488-181h-2a-25-25-0-00-25-25v2-5c0-138-112-25-25-25h2a-75-75-0-01-488-18l6-5-11-62v4-38zm6-096-2-038a-75-75-0-011-06-0-8-8-0-010-11-314-75-75-0-01-1-06-1-06-6-5-6-5-0-000-9-193-75-75-0-010-1-06v-001zm-1-06-2-121a-75-75-0-10-1-061-1-061-3-5-3-5-0-010-4-95-75-75-0-101-06-1-06-5-5-0-000-7-07l-001-001z-path-svg-audio"]], "Load .wav file": [[170, "load-wav-file"]], "Save as .wav file": [[170, "save-as-wav-file"]], "Example": [[170, "example"], [201, "example"]], "Other tools & libraries for audio data": [[170, "other-tools-libraries-for-audio-data"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-image\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M1.75 2.5a.25.25 0 00-.25.25v10.5c0 .138.112.25.25.25h.94a.76.76 0 01.03-.03l6.077-6.078a1.75 1.75 0 012.412-.06L14.5 10.31V2.75a.25.25 0 00-.25-.25H1.75zm12.5 11H4.81l5.048-5.047a.25.25 0 01.344-.009l4.298 3.889v.917a.25.25 0 01-.25.25zm1.75-.25V2.75A1.75 1.75 0 0014.25 1H1.75A1.75 1.75 0 000 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0016 13.25zM5.5 6a.5.5 0 11-1 0 .5.5 0 011 0zM7 6a2 2 0 11-4 0 2 2 0 014 0z\"></path></svg> Image": [[171, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-image-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m1-75-2-5a-25-25-0-00-25-25v10-5c0-138-112-25-25-25h-94a-76-76-0-01-03-03l6-077-6-078a1-75-1-75-0-012-412-06l14-5-10-31v2-75a-25-25-0-00-25-25h1-75zm12-5-11h4-81l5-048-5-047a-25-25-0-01-344-009l4-298-3-889v-917a-25-25-0-01-25-25zm1-75-25v2-75a1-75-1-75-0-0014-25-1h1-75a1-75-1-75-0-000-2-75v10-5c0-14-216-784-15-1-75-15h12-5a1-75-1-75-0-0016-13-25zm5-5-6a-5-5-0-11-1-0-5-5-0-011-0zm7-6a2-2-0-11-4-0-2-2-0-014-0z-path-svg-image"]], "Load image data": [[171, "load-image-data"]], "Simple image processing": [[171, "simple-image-processing"]], "Display image sprite": [[171, "display-image-sprite"], [208, "display-image-sprite"]], "Segment large complicated image into small ones": [[171, "segment-large-complicated-image-into-small-ones"]], "Multimodal Data": [[172, "multimodal-data"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-package\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M8.878.392a1.75 1.75 0 00-1.756 0l-5.25 3.045A1.75 1.75 0 001 4.951v6.098c0 .624.332 1.2.872 1.514l5.25 3.045a1.75 1.75 0 001.756 0l5.25-3.045c.54-.313.872-.89.872-1.514V4.951c0-.624-.332-1.2-.872-1.514L8.878.392zM7.875 1.69a.25.25 0 01.25 0l4.63 2.685L8 7.133 3.245 4.375l4.63-2.685zM2.5 5.677v5.372c0 .09.047.171.125.216l4.625 2.683V8.432L2.5 5.677zm6.25 8.271l4.625-2.683a.25.25 0 00.125-.216V5.677L8.75 8.432v5.516z\"></path></svg> 3D Mesh": [[173, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-package-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m8-878-392a1-75-1-75-0-00-1-756-0l-5-25-3-045a1-75-1-75-0-001-4-951v6-098c0-624-332-1-2-872-1-514l5-25-3-045a1-75-1-75-0-001-756-0l5-25-3-045c-54-313-872-89-872-1-514v4-951c0-624-332-1-2-872-1-514l8-878-392zm7-875-1-69a-25-25-0-01-25-0l4-63-2-685l8-7-133-3-245-4-375l4-63-2-685zm2-5-5-677v5-372c0-09-047-171-125-216l4-625-2-683v8-432l2-5-5-677zm6-25-8-271l4-625-2-683a-25-25-0-00-125-216v5-677l8-75-8-432v5-516z-path-svg-3d-mesh"]], "Vertices and faces representation": [[173, "vertices-and-faces-representation"]], "Point cloud representation": [[173, "point-cloud-representation"]], "RGB-D image representation": [[173, "rgb-d-image-representation"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-stack\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.122.392a1.75 1.75 0 011.756 0l5.003 2.902c.83.481.83 1.68 0 2.162L8.878 8.358a1.75 1.75 0 01-1.756 0L2.119 5.456a1.25 1.25 0 010-2.162L7.122.392zM8.125 1.69a.25.25 0 00-.25 0l-4.63 2.685 4.63 2.685a.25.25 0 00.25 0l4.63-2.685-4.63-2.685zM1.601 7.789a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0L1.874 8.814A.75.75 0 011.6 7.789zm0 3.5a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0l-5.248-3.044a.75.75 0 01-.273-1.025z\"></path></svg> Multi-modal": [[174, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-stack-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m7-122-392a1-75-1-75-0-011-756-0l5-003-2-902c-83-481-83-1-68-0-2-162l8-878-8-358a1-75-1-75-0-01-1-756-0l2-119-5-456a1-25-1-25-0-010-2-162l7-122-392zm8-125-1-69a-25-25-0-00-25-0l-4-63-2-685-4-63-2-685a-25-25-0-00-25-0l4-63-2-685-4-63-2-685zm1-601-7-789a-75-75-0-011-025-273l5-249-3-044a-25-25-0-00-25-0l5-249-3-044a-75-75-0-01-752-1-298l-5-248-3-044a1-75-1-75-0-01-1-756-0l1-874-8-814a-75-75-0-011-6-7-789zm0-3-5a-75-75-0-011-025-273l5-249-3-044a-25-25-0-00-25-0l5-249-3-044a-75-75-0-01-752-1-298l-5-248-3-044a1-75-1-75-0-01-1-756-0l-5-248-3-044a-75-75-0-01-273-1-025z-path-svg-multi-modal"]], "Model your data": [[174, "model-your-data"]], "Instantiate a Document": [[174, "instantiate-a-document"]], "Nested dataclasses and list types": [[174, "nested-dataclasses-and-list-types"]], "Access the data": [[174, "access-the-data"]], "Generate embeddings": [[174, "generate-embeddings"]], "Embed each modality": [[174, "embed-each-modality"]], "Embed parent Document": [[174, "embed-parent-document"]], "Perform search": [[174, "perform-search"]], "Find Document by modality embedding": [[174, "find-document-by-modality-embedding"]], "Find Document by combined embedding": [[174, "find-document-by-combined-embedding"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-table\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v3.585a.746.746 0 010 .83v8.085A1.75 1.75 0 0114.25 16H6.309a.748.748 0 01-1.118 0H1.75A1.75 1.75 0 010 14.25V6.165a.746.746 0 010-.83V1.75zM1.5 6.5v7.75c0 .138.112.25.25.25H5v-8H1.5zM5 5H1.5V1.75a.25.25 0 01.25-.25H5V5zm1.5 1.5v8h7.75a.25.25 0 00.25-.25V6.5h-8zm8-1.5h-8V1.5h7.75a.25.25 0 01.25.25V5z\"></path></svg> Table": [[175, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-table-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m0-1-75c0-784-784-0-1-75-0h12-5c15-216-0-16-784-16-1-75v3-585a-746-746-0-010-83v8-085a1-75-1-75-0-0114-25-16h6-309a-748-748-0-01-1-118-0h1-75a1-75-1-75-0-010-14-25v6-165a-746-746-0-010-83v1-75zm1-5-6-5v7-75c0-138-112-25-25-25h5v-8h1-5zm5-5h1-5v1-75a-25-25-0-01-25-25h5v5zm1-5-1-5v8h7-75a-25-25-0-00-25-25v6-5h-8zm8-1-5h-8v1-5h7-75a-25-25-0-01-25-25v5z-path-svg-table"]], "Load CSV table": [[175, "load-csv-table"]], "Save as CSV file": [[175, "save-as-csv-file"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-typography\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M6.21 8.5L4.574 3.594 2.857 8.5H6.21zm.5 1.5l.829 2.487a.75.75 0 001.423-.474L5.735 2.332a1.216 1.216 0 00-2.302-.018l-3.39 9.688a.75.75 0 001.415.496L2.332 10H6.71zm3.13-4.358C10.53 4.374 11.87 4 13 4c1.5 0 3 .939 3 2.601v5.649a.75.75 0 01-1.448.275C13.995 12.82 13.3 13 12.5 13c-.77 0-1.514-.231-2.078-.709-.577-.488-.922-1.199-.922-2.041 0-.694.265-1.411.887-1.944C11 7.78 11.88 7.5 13 7.5h1.5v-.899c0-.54-.5-1.101-1.5-1.101-.869 0-1.528.282-1.84.858a.75.75 0 11-1.32-.716zM14.5 9H13c-.881 0-1.375.22-1.637.444-.253.217-.363.5-.363.806 0 .408.155.697.39.896.249.21.63.354 1.11.354.732 0 1.26-.209 1.588-.449.35-.257.412-.495.412-.551V9z\"></path></svg> Text": [[176, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-typography-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m6-21-8-5l4-574-3-594-2-857-8-5h6-21zm-5-1-5l-829-2-487a-75-75-0-001-423-474l5-735-2-332a1-216-1-216-0-00-2-302-018l-3-39-9-688a-75-75-0-001-415-496l2-332-10h6-71zm3-13-4-358c10-53-4-374-11-87-4-13-4c1-5-0-3-939-3-2-601v5-649a-75-75-0-01-1-448-275c13-995-12-82-13-3-13-12-5-13c-77-0-1-514-231-2-078-709-577-488-922-1-199-922-2-041-0-694-265-1-411-887-1-944c11-7-78-11-88-7-5-13-7-5h1-5v-899c0-54-5-1-101-1-5-1-101-869-0-1-528-282-1-84-858a-75-75-0-11-1-32-716zm14-5-9h13c-881-0-1-375-22-1-637-444-253-217-363-5-363-806-0-408-155-697-39-896-249-21-63-354-1-11-354-732-0-1-26-209-1-588-449-35-257-412-495-412-551v9z-path-svg-text"]], "Segment long documents": [[176, "segment-long-documents"]], "Convert text into ndarray": [[176, "convert-text-into-ndarray"]], "Convert ndarray back to text": [[176, "convert-ndarray-back-to-text"]], "Simple text matching via feature hashing": [[176, "simple-text-matching-via-feature-hashing"]], "Searching at chunk level with subindex": [[176, "searching-at-chunk-level-with-subindex"]], "Multi-modal Documents": [[176, null]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-device-camera-video\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M16 3.75a.75.75 0 00-1.136-.643L11 5.425V4.75A1.75 1.75 0 009.25 3h-7.5A1.75 1.75 0 000 4.75v6.5C0 12.216.784 13 1.75 13h7.5A1.75 1.75 0 0011 11.25v-.675l3.864 2.318A.75.75 0 0016 12.25v-8.5zm-5 5.075l3.5 2.1v-5.85l-3.5 2.1v1.65zM9.5 6.75v-2a.25.25 0 00-.25-.25h-7.5a.25.25 0 00-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-4.5z\"></path></svg> Video": [[177, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-device-camera-video-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m16-3-75a-75-75-0-00-1-136-643l11-5-425v4-75a1-75-1-75-0-009-25-3h-7-5a1-75-1-75-0-000-4-75v6-5c0-12-216-784-13-1-75-13h7-5a1-75-1-75-0-0011-11-25v-675l3-864-2-318a-75-75-0-0016-12-25v-8-5zm-5-5-075l3-5-2-1v-5-85l-3-5-2-1v1-65zm9-5-6-75v-2a-25-25-0-00-25-25h-7-5a-25-25-0-00-25-25v6-5c0-138-112-25-25-25h7-5a-25-25-0-00-25-25v-4-5z-path-svg-video"]], "Load video data": [[177, "load-video-data"]], "Key frame extraction": [[177, "key-frame-extraction"]], "Save as video file": [[177, "save-as-video-file"]], "Create Document from webcam": [[177, "create-document-from-webcam"]], "Data Management": [[178, "data-management"]], "Web Console": [[178, "web-console"]], "Python API": [[178, "python-api"]], "Push (create/update):": [[178, "push-create-update"]], "Pull (Read):": [[178, "pull-read"]], "List": [[178, "list"]], "Delete": [[178, "delete"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-rocket\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M14.064 0a8.75 8.75 0 00-6.187 2.563l-.459.458c-.314.314-.616.641-.904.979H3.31a1.75 1.75 0 00-1.49.833L.11 7.607a.75.75 0 00.418 1.11l3.102.954c.037.051.079.1.124.145l2.429 2.428c.046.046.094.088.145.125l.954 3.102a.75.75 0 001.11.418l2.774-1.707a1.75 1.75 0 00.833-1.49V9.485c.338-.288.665-.59.979-.904l.458-.459A8.75 8.75 0 0016 1.936V1.75A1.75 1.75 0 0014.25 0h-.186zM10.5 10.625c-.088.06-.177.118-.266.175l-2.35 1.521.548 1.783 1.949-1.2a.25.25 0 00.119-.213v-2.066zM3.678 8.116L5.2 5.766c.058-.09.117-.178.176-.266H3.309a.25.25 0 00-.213.119l-1.2 1.95 1.782.547zm5.26-4.493A7.25 7.25 0 0114.063 1.5h.186a.25.25 0 01.25.25v.186a7.25 7.25 0 01-2.123 5.127l-.459.458a15.21 15.21 0 01-2.499 2.02l-2.317 1.5-2.143-2.143 1.5-2.317a15.25 15.25 0 012.02-2.5l.458-.458h.002zM12 5a1 1 0 11-2 0 1 1 0 012 0zm-8.44 9.56a1.5 1.5 0 10-2.12-2.12c-.734.73-1.047 2.332-1.15 3.003a.23.23 0 00.265.265c.671-.103 2.273-.416 3.005-1.148z\"></path></svg> Cloud Support": [[179, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-rocket-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m14-064-0a8-75-8-75-0-00-6-187-2-563l-459-458c-314-314-616-641-904-979h3-31a1-75-1-75-0-00-1-49-833l-11-7-607a-75-75-0-00-418-1-11l3-102-954c-037-051-079-1-124-145l2-429-2-428c-046-046-094-088-145-125l-954-3-102a-75-75-0-001-11-418l2-774-1-707a1-75-1-75-0-00-833-1-49v9-485c-338-288-665-59-979-904l-458-459a8-75-8-75-0-0016-1-936v1-75a1-75-1-75-0-0014-25-0h-186zm10-5-10-625c-088-06-177-118-266-175l-2-35-1-521-548-1-783-1-949-1-2a-25-25-0-00-119-213v-2-066zm3-678-8-116l5-2-5-766c-058-09-117-178-176-266h3-309a-25-25-0-00-213-119l-1-2-1-95-1-782-547zm5-26-4-493a7-25-7-25-0-0114-063-1-5h-186a-25-25-0-01-25-25v-186a7-25-7-25-0-01-2-123-5-127l-459-458a15-21-15-21-0-01-2-499-2-02l-2-317-1-5-2-143-2-143-1-5-2-317a15-25-15-25-0-012-02-2-5l-458-458h-002zm12-5a1-1-0-11-2-0-1-1-0-012-0zm-8-44-9-56a1-5-1-5-0-10-2-12-2-12c-734-73-1-047-2-332-1-15-3-003a-23-23-0-00-265-265c-671-103-2-273-416-3-005-1-148z-path-svg-cloud-support"]], "Authentication": [[180, "authentication"]], "Login": [[180, "id1"]], "Logout": [[180, "logout"]], "Access Modality": [[181, "access-modality"]], "Return types": [[181, null]], "Document level access": [[181, "document-level-access"]], "Select nested fields": [[181, "select-nested-fields"], [181, "id1"]], "DocumentArray level access": [[181, "documentarray-level-access"]], "Select multiple fields": [[181, "select-multiple-fields"]], "Slice dataclass objects": [[181, "slice-dataclass-objects"]], "Slice List[Type] fields": [[181, "slice-list-type-fields"]], "Dataclass decorator": [[182, "dataclass-decorator"]], "Annotate class fields": [[182, "annotate-class-fields"]], "Behavior of field annotation": [[182, "behavior-of-field-annotation"]], "Construct from/to Document": [[182, "construct-from-to-document"]], "Use field() for advanced configs": [[182, "use-field-for-advanced-configs"]], "What\u2019s next?": [[182, "what-s-next"], [187, "what-s-next"], [190, "what-s-next"], [191, "what-s-next"], [192, "what-s-next"], [195, "what-s-next"], [196, "what-s-next"], [200, "what-s-next"]], "Process Modality": [[183, "process-modality"]], "Embed image and text via CLIP": [[183, "embed-image-and-text-via-clip"]], "Embed via CLIP-as-service": [[183, "embed-via-clip-as-service"]], "Dataclass": [[184, "dataclass"]], "What is multi-modality?": [[184, "what-is-multi-modality"]], "Understanding the problem": [[184, "understanding-the-problem"]], "Understanding the challenges": [[184, "understanding-the-challenges"]], "What\u2019s next": [[184, "what-s-next"]], "Support New Modality": [[185, "support-new-modality"]], "Create new types": [[185, "create-new-types"]], "Override existing types": [[185, "override-existing-types"]], "Access Attributes": [[186, "access-attributes"], [194, "access-attributes"]], "Content attributes": [[186, "content-attributes"]], "Load content from URI": [[186, "load-content-from-uri"]], "Convert content to data URI": [[186, null]], "Construct an empty Document": [[187, "construct-an-empty-document"]], "Construct with attributes": [[187, "construct-with-attributes"]], "Nested Document": [[187, "nested-document"]], "Unknown attributes handling": [[187, "unknown-attributes-handling"]], "Resolve unknown attributes with rules": [[187, "resolve-unknown-attributes-with-rules"]], "Copy from another Document": [[187, "copy-from-another-document"]], "Embedding": [[188, "embedding"]], "Fill embedding via neural network": [[188, "fill-embedding-via-neural-network"]], "On multiple Documents use DocumentArray": [[188, null], [188, null]], "Find nearest-neighbours": [[188, "find-nearest-neighbours"]], "Fluent Interface": [[189, "fluent-interface"]], "Methods": [[189, "methods"]], "BlobData": [[189, "blobdata"]], "ImageData": [[189, "imagedata"]], "Convert": [[189, "convert"]], "ContentProperty": [[189, "contentproperty"]], "TextData": [[189, "textdata"]], "SingletonSugar": [[189, "singletonsugar"]], "FeatureHash": [[189, "featurehash"]], "Porting": [[189, "porting"]], "Protobuf": [[189, "protobuf"]], "Pydantic": [[189, "pydantic"]], "Strawberry": [[189, "strawberry"]], "AudioData": [[189, "audiodata"]], "MeshData": [[189, "meshdata"]], "VideoData": [[189, "videodata"]], "UriFile": [[189, "urifile"]], "Document": [[190, "document"]], "Nested Structure": [[191, "nested-structure"]], "Serialization": [[192, "serialization"], [204, "serialization"]], "From/to JSON": [[192, "from-to-json"], [204, "from-to-json"]], "From/to arbitrary JSON": [[192, "from-to-arbitrary-json"]], "From/to bytes": [[192, "from-to-bytes"], [204, "from-to-bytes"]], "From/to base64": [[192, "from-to-base64"], [204, "from-to-base64"]], "From/to dict": [[192, "from-to-dict"]], "From/to Protobuf": [[192, "from-to-protobuf"], [204, "from-to-protobuf"]], "Visualization": [[193, "visualization"], [206, "visualization"]], "Attribute selector": [[194, "attribute-selector"]], "Auto-ravel on NdArray": [[194, "auto-ravel-on-ndarray"]], "Dunder syntax for nested attributes": [[194, "dunder-syntax-for-nested-attributes"]], "Content and embedding sugary attributes": [[194, "content-and-embedding-sugary-attributes"]], "Access Documents": [[195, "access-documents"]], "Basic indexing": [[195, "basic-indexing"]], "Index by Document id": [[195, "index-by-document-id"]], "Index by boolean mask": [[195, "index-by-boolean-mask"]], "Index by nested structure": [[195, "index-by-nested-structure"]], "Index by flatten": [[195, "index-by-flatten"]], "Other Handy Helpers": [[195, "other-handy-helpers"]], "Batching": [[195, "batching"]], "Sampling": [[195, "sampling"]], "Shuffling": [[195, "shuffling"]], "Splitting by .tags": [[195, "splitting-by-tags"]], "Construct an empty array": [[196, "construct-an-empty-array"]], "Construct with empty Documents": [[196, "construct-with-empty-documents"]], "Construct from list-like objects": [[196, "construct-from-list-like-objects"]], "Construct from multiple DocumentArray": [[196, "construct-from-multiple-documentarray"]], "Construct from a single Document": [[196, "construct-from-a-single-document"]], "Deep copy on elements": [[196, "deep-copy-on-elements"]], "Construct from local files": [[196, "construct-from-local-files"]], "Embed via Neural Network": [[197, "embed-via-neural-network"]], "Evaluate Matches": [[198, "evaluate-matches"]], "Evaluation against a ground truth array": [[198, "evaluation-against-a-ground-truth-array"]], "Document identifier": [[198, "document-identifier"]], "Evaluation via labels": [[198, "evaluation-via-labels"]], "Metric functions": [[198, "metric-functions"]], "The max_rel parameter": [[198, "the-max-rel-parameter"]], "Custom metrics": [[198, "custom-metrics"]], "Custom names": [[198, "custom-names"]], "Embed, match & evaluate at once": [[198, "embed-match-evaluate-at-once"]], "Batch-wise matching": [[198, "batch-wise-matching"]], "Sampling Queries": [[198, "sampling-queries"]], "Query by Conditions": [[199, "query-by-conditions"]], "filter query syntax": [[199, null]], "Filter with query operators": [[199, "filter-with-query-operators"]], "Combine multiple conditions": [[199, "combine-multiple-conditions"]], "DocumentArray": [[200, "documentarray"]], "Find Nearest Neighbours": [[201, "find-nearest-neighbours"]], "Difference between find and match": [[201, "difference-between-find-and-match"]], "Which side is the query at?": [[201, "which-side-is-the-query-at"]], "What is the type of the query?": [[201, "what-is-the-type-of-the-query"]], "What is the return?": [[201, "what-is-the-return"]], "GPU support": [[201, "gpu-support"]], "Parallelization": [[202, "parallelization"]], "When to choose process or thread backend?": [[202, null]], "Use map_batch() to overlap CPU & GPU computation": [[202, "use-map-batch-to-overlap-cpu-gpu-computation"]], "Why 129s? Why not 128s": [[202, null]], "Use map_batch() to overlap CPU and network time": [[202, "use-map-batch-to-overlap-cpu-and-network-time"]], "Process via External Flow or Executor": [[203, "process-via-external-flow-or-executor"]], "Accept schemes": [[203, "accept-schemes"]], "Read more": [[203, "read-more"]], "Wire format of pickle and protobuf": [[204, "wire-format-of-pickle-and-protobuf"]], "From/to disk": [[204, "from-to-disk"]], "Stream large binary serialization from disk": [[204, "stream-large-binary-serialization-from-disk"]], "From/to list": [[204, "from-to-list"]], "From/to dataframe": [[204, "from-to-dataframe"]], "From/to cloud": [[204, "from-to-cloud"]], "Search over Nested Structure": [[205, "search-over-nested-structure"]], "Construct subindices": [[205, "construct-subindices"]], "Modify subindices": [[205, "modify-subindices"]], "Search through subindices": [[205, "search-through-subindices"]], "Summary in table": [[206, "summary-in-table"]], "Image sprites": [[206, "image-sprites"]], "Plot Matches": [[206, "plot-matches"]], "Embedding projector": [[206, "embedding-projector"]], "FastAPI/Pydantic": [[207, "fastapi-pydantic"]], "JSON Schema": [[207, "json-schema"]], "Validate incoming Document and DocumentArray objects": [[207, "validate-incoming-document-and-documentarray-objects"]], "Convert between pydantic model and DocArray objects": [[207, "convert-between-pydantic-model-and-docarray-objects"]], "Limit returned fields by response model": [[207, "limit-returned-fields-by-response-model"]], "Limit returned results recursively": [[207, "limit-returned-results-recursively"]], "Jupyter Notebook/Colab": [[208, "jupyter-notebook-colab"]], "Display Document": [[208, "display-document"]], "Display rich content": [[208, "display-rich-content"]], "Display DocumentArray": [[208, "display-documentarray"]], "Display embeddings": [[208, "display-embeddings"]], "PyCharm users": [[208, "pycharm-users"]], "Install": [[209, "install"], [211, "install"]], "On Apple Silicon": [[209, "on-apple-silicon"]], "Check terminal and device": [[209, "check-terminal-and-device"]], "Install Homebrew": [[209, "install-homebrew"]], "Install Python": [[209, "install-python"]], "Install dependencies wheels": [[209, "install-dependencies-wheels"]], "Install DocArray": [[209, "install-docarray"]], "What is DocArray?": [[210, "what-is-docarray"]], "Design": [[210, "design"]], "Comparing to Alternatives": [[210, "comparing-to-alternatives"]], "Hugging Face Datasets": [[210, "hugging-face-datasets"]], "To AwkwardArray": [[210, "to-awkwardarray"]], "To Zarr": [[210, "to-zarr"]], "To Jina Users": [[210, "to-jina-users"]], "Welcome to DocArray!": [[211, "welcome-to-docarray"]], "Protocol Documentation": [[212, "protocol-documentation"], [213, "protocol-documentation"]], "Table of Contents": [[212, "table-of-contents"], [213, "table-of-contents"]], "docarray.proto": [[212, "docarray-proto"], [213, "docarray-proto"]], "DenseNdArrayProto": [[212, "densendarrayproto"], [213, "densendarrayproto"]], "DocumentArrayProto": [[212, "documentarrayproto"], [213, "documentarrayproto"]], "DocumentProto": [[212, "documentproto"], [213, "documentproto"]], "DocumentProto.EvaluationsEntry": [[212, "documentproto-evaluationsentry"], [213, "documentproto-evaluationsentry"]], "DocumentProto.ScoresEntry": [[212, "documentproto-scoresentry"], [213, "documentproto-scoresentry"]], "NamedScoreProto": [[212, "namedscoreproto"], [213, "namedscoreproto"]], "NdArrayProto": [[212, "ndarrayproto"], [213, "ndarrayproto"]], "SparseNdArrayProto": [[212, "sparsendarrayproto"], [213, "sparsendarrayproto"]], "Scalar Value Types": [[212, "scalar-value-types"], [213, "scalar-value-types"]], "Rebuild Protobuf": [[213, "rebuild-protobuf"]]}, "indexentries": {"docarray": [[13, "module-docarray"]], "module": [[13, "module-docarray"], [14, "module-docarray.array"], [15, "module-docarray.array.annlite"], [16, "module-docarray.array.base"], [17, "module-docarray.array.chunk"], [18, "module-docarray.array.document"], [19, "module-docarray.array.elastic"], [20, "module-docarray.array.match"], [21, "module-docarray.array.memory"], [23, "module-docarray.array.mixins"], [24, "module-docarray.array.mixins.content"], [25, "module-docarray.array.mixins.dataloader"], [26, "module-docarray.array.mixins.dataloader.helper"], [27, "module-docarray.array.mixins.delitem"], [28, "module-docarray.array.mixins.embed"], [29, "module-docarray.array.mixins.empty"], [30, "module-docarray.array.mixins.evaluation"], [31, "module-docarray.array.mixins.find"], [32, "module-docarray.array.mixins.getattr"], [33, "module-docarray.array.mixins.getitem"], [34, "module-docarray.array.mixins.group"], [35, "module-docarray.array.mixins.io"], [36, "module-docarray.array.mixins.io.binary"], [37, "module-docarray.array.mixins.io.common"], [38, "module-docarray.array.mixins.io.csv"], [39, "module-docarray.array.mixins.io.dataframe"], [40, "module-docarray.array.mixins.io.from_gen"], [41, "module-docarray.array.mixins.io.json"], [42, "module-docarray.array.mixins.io.pbar"], [43, "module-docarray.array.mixins.io.pushpull"], [44, "module-docarray.array.mixins.match"], [45, "module-docarray.array.mixins.parallel"], [46, "module-docarray.array.mixins.plot"], [47, "module-docarray.array.mixins.post"], [48, "module-docarray.array.mixins.pydantic"], [49, "module-docarray.array.mixins.reduce"], [50, "module-docarray.array.mixins.sample"], [51, "module-docarray.array.mixins.setitem"], [52, "module-docarray.array.mixins.strawberry"], [53, "module-docarray.array.mixins.text"], [54, "module-docarray.array.mixins.traverse"], [55, "module-docarray.array.qdrant"], [56, "module-docarray.array.queryset"], [57, "module-docarray.array.queryset.lookup"], [58, "module-docarray.array.queryset.parser"], [59, "module-docarray.array.redis"], [60, "module-docarray.array.sqlite"], [61, "module-docarray.array.storage"], [62, "module-docarray.array.storage.annlite"], [63, "module-docarray.array.storage.annlite.backend"], [64, "module-docarray.array.storage.annlite.find"], [65, "module-docarray.array.storage.annlite.getsetdel"], [66, "module-docarray.array.storage.annlite.helper"], [67, "module-docarray.array.storage.annlite.seqlike"], [68, "module-docarray.array.storage.base"], [69, "module-docarray.array.storage.base.backend"], [70, "module-docarray.array.storage.base.getsetdel"], [71, "module-docarray.array.storage.base.helper"], [72, "module-docarray.array.storage.base.seqlike"], [73, "module-docarray.array.storage.elastic"], [74, "module-docarray.array.storage.elastic.backend"], [75, "module-docarray.array.storage.elastic.find"], [76, "module-docarray.array.storage.elastic.getsetdel"], [77, "module-docarray.array.storage.elastic.seqlike"], [78, "module-docarray.array.storage.memory"], [79, "module-docarray.array.storage.memory.backend"], [80, "module-docarray.array.storage.memory.find"], [81, "module-docarray.array.storage.memory.getsetdel"], [82, "module-docarray.array.storage.memory.seqlike"], [88, "module-docarray.array.storage.qdrant"], [89, "module-docarray.array.storage.qdrant.backend"], [90, "module-docarray.array.storage.qdrant.find"], [91, "module-docarray.array.storage.qdrant.getsetdel"], [92, "module-docarray.array.storage.qdrant.helper"], [93, "module-docarray.array.storage.qdrant.seqlike"], [94, "module-docarray.array.storage.redis"], [95, "module-docarray.array.storage.redis.backend"], [96, "module-docarray.array.storage.redis.find"], [97, "module-docarray.array.storage.redis.getsetdel"], [98, "module-docarray.array.storage.redis.seqlike"], [99, "module-docarray.array.storage.registry"], [100, "module-docarray.array.storage.sqlite"], [101, "module-docarray.array.storage.sqlite.backend"], [102, "module-docarray.array.storage.sqlite.getsetdel"], [103, "module-docarray.array.storage.sqlite.helper"], [104, "module-docarray.array.storage.sqlite.seqlike"], [105, "module-docarray.array.storage.weaviate"], [106, "module-docarray.array.storage.weaviate.backend"], [107, "module-docarray.array.storage.weaviate.find"], [108, "module-docarray.array.storage.weaviate.getsetdel"], [109, "module-docarray.array.storage.weaviate.seqlike"], [110, "module-docarray.array.weaviate"], [111, "module-docarray.base"], [112, "module-docarray.dataclasses"], [113, "module-docarray.dataclasses.enums"], [114, "module-docarray.dataclasses.getter"], [115, "module-docarray.dataclasses.setter"], [116, "module-docarray.dataclasses.types"], [117, "module-docarray.document"], [118, "module-docarray.document.data"], [119, "module-docarray.document.generators"], [120, "module-docarray.document.mixins"], [121, "module-docarray.document.mixins.attribute"], [122, "module-docarray.document.mixins.audio"], [123, "module-docarray.document.mixins.blob"], [124, "module-docarray.document.mixins.content"], [125, "module-docarray.document.mixins.convert"], [126, "module-docarray.document.mixins.dump"], [127, "module-docarray.document.mixins.featurehash"], [128, "module-docarray.document.mixins.helper"], [129, "module-docarray.document.mixins.image"], [130, "module-docarray.document.mixins.mesh"], [131, "module-docarray.document.mixins.multimodal"], [132, "module-docarray.document.mixins.plot"], [133, "module-docarray.document.mixins.porting"], [134, "module-docarray.document.mixins.property"], [135, "module-docarray.document.mixins.protobuf"], [136, "module-docarray.document.mixins.pydantic"], [137, "module-docarray.document.mixins.rich_embedding"], [138, "module-docarray.document.mixins.strawberry"], [139, "module-docarray.document.mixins.sugar"], [140, "module-docarray.document.mixins.text"], [141, "module-docarray.document.mixins.video"], [142, "module-docarray.document.pydantic_model"], [143, "module-docarray.document.strawberry_type"], [144, "module-docarray.helper"], [145, "module-docarray.math"], [146, "module-docarray.math.distance"], [147, "module-docarray.math.distance.numpy"], [149, "module-docarray.math.distance.tensorflow"], [150, "module-docarray.math.distance.torch"], [151, "module-docarray.math.evaluation"], [152, "module-docarray.math.helper"], [153, "module-docarray.math.ndarray"], [154, "module-docarray.proto"], [155, "module-docarray.proto.docarray_pb2"], [156, "module-docarray.proto.io"], [157, "module-docarray.proto.io.ndarray"], [158, "module-docarray.proto.pb"], [159, "module-docarray.proto.pb.docarray_pb2"], [160, "module-docarray.proto.pb2"], [161, "module-docarray.proto.pb2.docarray_pb2"], [162, "module-docarray.score"], [163, "module-docarray.score.data"], [164, "module-docarray.score.mixins"], [165, "module-docarray.score.mixins.property"], [166, "module-docarray.score.mixins.representer"], [167, "module-docarray.typing"]], "docarray.array": [[14, "module-docarray.array"]], "annliteconfig (class in docarray.array.annlite)": [[15, "docarray.array.annlite.AnnliteConfig"]], "documentarrayannlite (class in docarray.array.annlite)": [[15, "docarray.array.annlite.DocumentArrayAnnlite"]], "type_map (docarray.array.annlite.documentarrayannlite attribute)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.TYPE_MAP"]], "append() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.append"]], "apply() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.apply"]], "apply_batch() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.apply_batch"]], "batch() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.batch"]], "batch_ids() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.batch_ids"]], "blobs (docarray.array.annlite.documentarrayannlite property)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.blobs"]], "clear() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.clear"]], "cloud_delete() (docarray.array.annlite.documentarrayannlite static method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.cloud_delete"]], "cloud_list() (docarray.array.annlite.documentarrayannlite static method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.cloud_list"]], "cloud_pull() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.cloud_pull"]], "cloud_push() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.cloud_push"]], "columns (docarray.array.annlite.annliteconfig attribute)": [[15, "docarray.array.annlite.AnnliteConfig.columns"]], "contents (docarray.array.annlite.documentarrayannlite property)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.contents"]], "count() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.count"]], "data_path (docarray.array.annlite.annliteconfig attribute)": [[15, "docarray.array.annlite.AnnliteConfig.data_path"]], "dataloader() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.dataloader"]], "docarray.array.annlite": [[15, "module-docarray.array.annlite"]], "ef_construction (docarray.array.annlite.annliteconfig attribute)": [[15, "docarray.array.annlite.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.annlite.annliteconfig attribute)": [[15, "docarray.array.annlite.AnnliteConfig.ef_search"]], "embed() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.embed"]], "embed_and_evaluate() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.embed_and_evaluate"]], "embeddings (docarray.array.annlite.documentarrayannlite property)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.embeddings"]], "empty() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.empty"]], "evaluate() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.evaluate"]], "extend() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.extend"]], "find() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.find"]], "flatten() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.flatten"]], "from_base64() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.from_base64"]], "from_bytes() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.from_bytes"]], "from_csv() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.from_csv"]], "from_dataframe() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.from_dataframe"]], "from_dict() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.from_dict"]], "from_files() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.from_files"]], "from_huggingface_datasets() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.from_huggingface_datasets"]], "from_json() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.from_json"]], "from_lines() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.from_lines"]], "from_list() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.from_list"]], "from_ndarray() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.from_ndarray"]], "from_ndjson() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.from_ndjson"]], "from_protobuf() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.from_protobuf"]], "from_pydantic_model() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.from_pydantic_model"]], "from_strawberry_type() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.from_strawberry_type"]], "get_json_schema() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.get_json_schema"]], "get_vocabulary() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.get_vocabulary"]], "index() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.index"]], "insert() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.insert"]], "list_like (docarray.array.annlite.annliteconfig attribute)": [[15, "docarray.array.annlite.AnnliteConfig.list_like"]], "load() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.load"]], "load_binary() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.load_binary"]], "load_csv() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.load_csv"]], "load_json() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.load_json"]], "map() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.map"]], "map_batch() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.map_batch"]], "match() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.match"]], "max_connection (docarray.array.annlite.annliteconfig attribute)": [[15, "docarray.array.annlite.AnnliteConfig.max_connection"]], "metric (docarray.array.annlite.annliteconfig attribute)": [[15, "docarray.array.annlite.AnnliteConfig.metric"]], "n_components (docarray.array.annlite.annliteconfig attribute)": [[15, "docarray.array.annlite.AnnliteConfig.n_components"]], "n_dim (docarray.array.annlite.annliteconfig attribute)": [[15, "docarray.array.annlite.AnnliteConfig.n_dim"]], "plot_embeddings() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.plot_embeddings"]], "plot_image_sprites() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.plot_image_sprites"]], "pop() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.pop"]], "post() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.post"]], "pull() (docarray.array.annlite.documentarrayannlite class method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.pull"]], "push() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.push"]], "reduce() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.reduce"]], "reduce_all() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.reduce_all"]], "remove() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.remove"]], "reverse() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.reverse"]], "root_id (docarray.array.annlite.annliteconfig attribute)": [[15, "docarray.array.annlite.AnnliteConfig.root_id"]], "sample() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.sample"]], "save() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.save"]], "save_binary() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.save_binary"]], "save_csv() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.save_csv"]], "save_embeddings_csv() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.save_embeddings_csv"]], "save_gif() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.save_gif"]], "save_json() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.save_json"]], "serialize_config (docarray.array.annlite.annliteconfig attribute)": [[15, "docarray.array.annlite.AnnliteConfig.serialize_config"]], "shuffle() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.shuffle"]], "split_by_tag() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.split_by_tag"]], "summary() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.summary"]], "sync() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.sync"]], "tensors (docarray.array.annlite.documentarrayannlite property)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.tensors"]], "texts (docarray.array.annlite.documentarrayannlite property)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.texts"]], "to_base64() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.to_base64"]], "to_bytes() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.to_bytes"]], "to_dataframe() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.to_dataframe"]], "to_dict() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.to_dict"]], "to_json() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.to_json"]], "to_list() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.to_list"]], "to_protobuf() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.to_protobuf"]], "to_pydantic_model() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.to_pydantic_model"]], "to_strawberry_type() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.to_strawberry_type"]], "traverse() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.traverse"]], "traverse_flat() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.traverse_flat"]], "traverse_flat_per_path() (docarray.array.annlite.documentarrayannlite method)": [[15, "docarray.array.annlite.DocumentArrayAnnlite.traverse_flat_per_path"]], "basedocumentarray (class in docarray.array.base)": [[16, "docarray.array.base.BaseDocumentArray"]], "append() (docarray.array.base.basedocumentarray method)": [[16, "docarray.array.base.BaseDocumentArray.append"]], "clear() (docarray.array.base.basedocumentarray method)": [[16, "docarray.array.base.BaseDocumentArray.clear"]], "count() (docarray.array.base.basedocumentarray method)": [[16, "docarray.array.base.BaseDocumentArray.count"]], "docarray.array.base": [[16, "module-docarray.array.base"]], "extend() (docarray.array.base.basedocumentarray method)": [[16, "docarray.array.base.BaseDocumentArray.extend"]], "index() (docarray.array.base.basedocumentarray method)": [[16, "docarray.array.base.BaseDocumentArray.index"]], "insert() (docarray.array.base.basedocumentarray method)": [[16, "docarray.array.base.BaseDocumentArray.insert"]], "pop() (docarray.array.base.basedocumentarray method)": [[16, "docarray.array.base.BaseDocumentArray.pop"]], "remove() (docarray.array.base.basedocumentarray method)": [[16, "docarray.array.base.BaseDocumentArray.remove"]], "reverse() (docarray.array.base.basedocumentarray method)": [[16, "docarray.array.base.BaseDocumentArray.reverse"]], "chunkarray (class in docarray.array.chunk)": [[17, "docarray.array.chunk.ChunkArray"]], "type_map (docarray.array.chunk.chunkarray attribute)": [[17, "docarray.array.chunk.ChunkArray.TYPE_MAP"]], "adjacency (docarray.array.chunk.chunkarray property)": [[17, "docarray.array.chunk.ChunkArray.adjacency"]], "append() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.append"]], "apply() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.apply"]], "apply_batch() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.apply_batch"]], "batch() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.batch"]], "batch_ids() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.batch_ids"]], "blobs (docarray.array.chunk.chunkarray property)": [[17, "docarray.array.chunk.ChunkArray.blobs"]], "clear() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.clear"]], "cloud_delete() (docarray.array.chunk.chunkarray static method)": [[17, "docarray.array.chunk.ChunkArray.cloud_delete"]], "cloud_list() (docarray.array.chunk.chunkarray static method)": [[17, "docarray.array.chunk.ChunkArray.cloud_list"]], "cloud_pull() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.cloud_pull"]], "cloud_push() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.cloud_push"]], "contents (docarray.array.chunk.chunkarray property)": [[17, "docarray.array.chunk.ChunkArray.contents"]], "count() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.count"]], "dataloader() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.dataloader"]], "docarray.array.chunk": [[17, "module-docarray.array.chunk"]], "embed() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.embed"]], "embed_and_evaluate() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.embed_and_evaluate"]], "embeddings (docarray.array.chunk.chunkarray property)": [[17, "docarray.array.chunk.ChunkArray.embeddings"]], "empty() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.empty"]], "evaluate() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.evaluate"]], "extend() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.extend"]], "find() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.find"]], "flatten() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.flatten"]], "from_base64() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.from_base64"]], "from_bytes() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.from_bytes"]], "from_csv() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.from_csv"]], "from_dataframe() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.from_dataframe"]], "from_dict() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.from_dict"]], "from_files() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.from_files"]], "from_huggingface_datasets() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.from_huggingface_datasets"]], "from_json() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.from_json"]], "from_lines() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.from_lines"]], "from_list() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.from_list"]], "from_ndarray() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.from_ndarray"]], "from_ndjson() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.from_ndjson"]], "from_protobuf() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.from_protobuf"]], "from_pydantic_model() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.from_strawberry_type"]], "get_json_schema() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.get_json_schema"]], "get_vocabulary() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.get_vocabulary"]], "granularity (docarray.array.chunk.chunkarray property)": [[17, "docarray.array.chunk.ChunkArray.granularity"]], "index() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.index"]], "insert() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.insert"]], "load() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.load"]], "load_binary() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.load_binary"]], "load_csv() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.load_csv"]], "load_json() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.load_json"]], "map() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.map"]], "map_batch() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.map_batch"]], "match() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.match"]], "plot_embeddings() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.plot_image_sprites"]], "pop() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.pop"]], "post() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.post"]], "pull() (docarray.array.chunk.chunkarray class method)": [[17, "docarray.array.chunk.ChunkArray.pull"]], "push() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.push"]], "reduce() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.reduce"]], "reduce_all() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.reduce_all"]], "reference_doc (docarray.array.chunk.chunkarray property)": [[17, "docarray.array.chunk.ChunkArray.reference_doc"]], "remove() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.remove"]], "reverse() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.reverse"]], "sample() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.sample"]], "save() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.save"]], "save_binary() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.save_binary"]], "save_csv() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.save_csv"]], "save_embeddings_csv() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.save_embeddings_csv"]], "save_gif() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.save_gif"]], "save_json() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.save_json"]], "shuffle() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.shuffle"]], "split_by_tag() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.split_by_tag"]], "summary() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.summary"]], "sync() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.sync"]], "tensors (docarray.array.chunk.chunkarray property)": [[17, "docarray.array.chunk.ChunkArray.tensors"]], "texts (docarray.array.chunk.chunkarray property)": [[17, "docarray.array.chunk.ChunkArray.texts"]], "to_base64() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.to_base64"]], "to_bytes() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.to_bytes"]], "to_dataframe() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.to_dataframe"]], "to_dict() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.to_dict"]], "to_json() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.to_json"]], "to_list() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.to_list"]], "to_protobuf() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.to_protobuf"]], "to_pydantic_model() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.to_strawberry_type"]], "traverse() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.traverse"]], "traverse_flat() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.chunk.chunkarray method)": [[17, "docarray.array.chunk.ChunkArray.traverse_flat_per_path"]], "documentarray (class in docarray.array.document)": [[18, "docarray.array.document.DocumentArray"]], "append() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.append"]], "apply() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.apply"]], "apply_batch() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.apply_batch"]], "batch() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.batch"]], "batch_ids() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.batch_ids"]], "blobs (docarray.array.document.documentarray property)": [[18, "docarray.array.document.DocumentArray.blobs"]], "clear() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.clear"]], "cloud_delete() (docarray.array.document.documentarray static method)": [[18, "docarray.array.document.DocumentArray.cloud_delete"]], "cloud_list() (docarray.array.document.documentarray static method)": [[18, "docarray.array.document.DocumentArray.cloud_list"]], "cloud_pull() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.cloud_pull"]], "cloud_push() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.cloud_push"]], "contents (docarray.array.document.documentarray property)": [[18, "docarray.array.document.DocumentArray.contents"]], "count() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.count"]], "dataloader() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.dataloader"]], "docarray.array.document": [[18, "module-docarray.array.document"]], "embed() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.embed"]], "embed_and_evaluate() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.embed_and_evaluate"]], "embeddings (docarray.array.document.documentarray property)": [[18, "docarray.array.document.DocumentArray.embeddings"]], "empty() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.empty"]], "evaluate() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.evaluate"]], "extend() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.extend"]], "find() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.find"]], "flatten() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.flatten"]], "from_base64() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.from_base64"]], "from_bytes() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.from_bytes"]], "from_csv() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.from_csv"]], "from_dataframe() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.from_dataframe"]], "from_dict() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.from_dict"]], "from_files() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.from_files"]], "from_huggingface_datasets() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.from_huggingface_datasets"]], "from_json() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.from_json"]], "from_lines() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.from_lines"]], "from_list() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.from_list"]], "from_ndarray() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.from_ndarray"]], "from_ndjson() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.from_ndjson"]], "from_protobuf() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.from_protobuf"]], "from_pydantic_model() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.from_strawberry_type"]], "get_json_schema() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.get_json_schema"]], "get_vocabulary() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.get_vocabulary"]], "index() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.index"]], "insert() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.insert"]], "load() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.load"]], "load_binary() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.load_binary"]], "load_csv() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.load_csv"]], "load_json() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.load_json"]], "map() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.map"]], "map_batch() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.map_batch"]], "match() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.match"]], "plot_embeddings() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.plot_image_sprites"]], "pop() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.pop"]], "post() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.post"]], "pull() (docarray.array.document.documentarray class method)": [[18, "docarray.array.document.DocumentArray.pull"]], "push() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.push"]], "reduce() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.reduce"]], "reduce_all() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.reduce_all"]], "remove() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.remove"]], "reverse() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.reverse"]], "sample() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.sample"]], "save() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.save"]], "save_binary() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.save_binary"]], "save_csv() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.save_csv"]], "save_embeddings_csv() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.save_embeddings_csv"]], "save_gif() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.save_gif"]], "save_json() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.save_json"]], "shuffle() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.shuffle"]], "split_by_tag() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.split_by_tag"]], "summary() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.summary"]], "tensors (docarray.array.document.documentarray property)": [[18, "docarray.array.document.DocumentArray.tensors"]], "texts (docarray.array.document.documentarray property)": [[18, "docarray.array.document.DocumentArray.texts"]], "to_base64() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.to_base64"]], "to_bytes() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.to_bytes"]], "to_dataframe() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.to_dataframe"]], "to_dict() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.to_dict"]], "to_json() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.to_json"]], "to_list() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.to_list"]], "to_protobuf() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.to_protobuf"]], "to_pydantic_model() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.to_strawberry_type"]], "traverse() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.traverse"]], "traverse_flat() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.document.documentarray method)": [[18, "docarray.array.document.DocumentArray.traverse_flat_per_path"]], "documentarrayelastic (class in docarray.array.elastic)": [[19, "docarray.array.elastic.DocumentArrayElastic"]], "elasticconfig (class in docarray.array.elastic)": [[19, "docarray.array.elastic.ElasticConfig"]], "max_es_returned_docs (docarray.array.elastic.documentarrayelastic attribute)": [[19, "docarray.array.elastic.DocumentArrayElastic.MAX_ES_RETURNED_DOCS"]], "type_map (docarray.array.elastic.documentarrayelastic attribute)": [[19, "docarray.array.elastic.DocumentArrayElastic.TYPE_MAP"]], "append() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.append"]], "apply() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.apply"]], "apply_batch() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.apply_batch"]], "batch() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.batch"]], "batch_ids() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.batch_ids"]], "batch_size (docarray.array.elastic.elasticconfig attribute)": [[19, "docarray.array.elastic.ElasticConfig.batch_size"]], "blobs (docarray.array.elastic.documentarrayelastic property)": [[19, "docarray.array.elastic.DocumentArrayElastic.blobs"]], "clear() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.clear"]], "cloud_delete() (docarray.array.elastic.documentarrayelastic static method)": [[19, "docarray.array.elastic.DocumentArrayElastic.cloud_delete"]], "cloud_list() (docarray.array.elastic.documentarrayelastic static method)": [[19, "docarray.array.elastic.DocumentArrayElastic.cloud_list"]], "cloud_pull() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.cloud_pull"]], "cloud_push() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.cloud_push"]], "columns (docarray.array.elastic.elasticconfig attribute)": [[19, "docarray.array.elastic.ElasticConfig.columns"]], "contents (docarray.array.elastic.documentarrayelastic property)": [[19, "docarray.array.elastic.DocumentArrayElastic.contents"]], "count() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.count"]], "dataloader() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.dataloader"]], "distance (docarray.array.elastic.elasticconfig attribute)": [[19, "docarray.array.elastic.ElasticConfig.distance"]], "docarray.array.elastic": [[19, "module-docarray.array.elastic"]], "ef_construction (docarray.array.elastic.elasticconfig attribute)": [[19, "docarray.array.elastic.ElasticConfig.ef_construction"]], "embed() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.embed"]], "embed_and_evaluate() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.embed_and_evaluate"]], "embeddings (docarray.array.elastic.documentarrayelastic property)": [[19, "docarray.array.elastic.DocumentArrayElastic.embeddings"]], "empty() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.empty"]], "es_config (docarray.array.elastic.elasticconfig attribute)": [[19, "docarray.array.elastic.ElasticConfig.es_config"]], "evaluate() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.evaluate"]], "extend() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.extend"]], "find() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.find"]], "flatten() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.flatten"]], "from_base64() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.from_base64"]], "from_bytes() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.from_bytes"]], "from_csv() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.from_csv"]], "from_dataframe() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.from_dataframe"]], "from_dict() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.from_dict"]], "from_files() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.from_files"]], "from_huggingface_datasets() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.from_huggingface_datasets"]], "from_json() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.from_json"]], "from_lines() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.from_lines"]], "from_list() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.from_list"]], "from_ndarray() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.from_ndarray"]], "from_ndjson() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.from_ndjson"]], "from_protobuf() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.from_protobuf"]], "from_pydantic_model() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.from_pydantic_model"]], "from_strawberry_type() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.from_strawberry_type"]], "get_json_schema() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.get_json_schema"]], "get_vocabulary() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.get_vocabulary"]], "hosts (docarray.array.elastic.elasticconfig attribute)": [[19, "docarray.array.elastic.ElasticConfig.hosts"]], "index() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.index"]], "index_name (docarray.array.elastic.elasticconfig attribute)": [[19, "docarray.array.elastic.ElasticConfig.index_name"]], "index_text (docarray.array.elastic.elasticconfig attribute)": [[19, "docarray.array.elastic.ElasticConfig.index_text"]], "insert() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.insert"]], "list_like (docarray.array.elastic.elasticconfig attribute)": [[19, "docarray.array.elastic.ElasticConfig.list_like"]], "load() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.load"]], "load_binary() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.load_binary"]], "load_csv() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.load_csv"]], "load_json() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.load_json"]], "m (docarray.array.elastic.elasticconfig attribute)": [[19, "docarray.array.elastic.ElasticConfig.m"]], "map() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.map"]], "map_batch() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.map_batch"]], "match() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.match"]], "n_dim (docarray.array.elastic.elasticconfig attribute)": [[19, "docarray.array.elastic.ElasticConfig.n_dim"]], "plot_embeddings() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.plot_embeddings"]], "plot_image_sprites() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.plot_image_sprites"]], "pop() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.pop"]], "post() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.post"]], "pull() (docarray.array.elastic.documentarrayelastic class method)": [[19, "docarray.array.elastic.DocumentArrayElastic.pull"]], "push() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.push"]], "reduce() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.reduce"]], "reduce_all() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.reduce_all"]], "remove() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.remove"]], "reverse() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.reverse"]], "root_id (docarray.array.elastic.elasticconfig attribute)": [[19, "docarray.array.elastic.ElasticConfig.root_id"]], "sample() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.sample"]], "save() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.save"]], "save_binary() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.save_binary"]], "save_csv() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.save_csv"]], "save_embeddings_csv() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.save_embeddings_csv"]], "save_gif() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.save_gif"]], "save_json() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.save_json"]], "shuffle() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.shuffle"]], "split_by_tag() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.split_by_tag"]], "summary() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.summary"]], "sync() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.sync"]], "tag_indices (docarray.array.elastic.elasticconfig attribute)": [[19, "docarray.array.elastic.ElasticConfig.tag_indices"]], "tensors (docarray.array.elastic.documentarrayelastic property)": [[19, "docarray.array.elastic.DocumentArrayElastic.tensors"]], "texts (docarray.array.elastic.documentarrayelastic property)": [[19, "docarray.array.elastic.DocumentArrayElastic.texts"]], "to_base64() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.to_base64"]], "to_bytes() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.to_bytes"]], "to_dataframe() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.to_dataframe"]], "to_dict() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.to_dict"]], "to_json() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.to_json"]], "to_list() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.to_list"]], "to_protobuf() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.to_protobuf"]], "to_pydantic_model() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.to_pydantic_model"]], "to_strawberry_type() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.to_strawberry_type"]], "traverse() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.traverse"]], "traverse_flat() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.traverse_flat"]], "traverse_flat_per_path() (docarray.array.elastic.documentarrayelastic method)": [[19, "docarray.array.elastic.DocumentArrayElastic.traverse_flat_per_path"]], "matcharray (class in docarray.array.match)": [[20, "docarray.array.match.MatchArray"]], "type_map (docarray.array.match.matcharray attribute)": [[20, "docarray.array.match.MatchArray.TYPE_MAP"]], "adjacency (docarray.array.match.matcharray property)": [[20, "docarray.array.match.MatchArray.adjacency"]], "append() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.append"]], "apply() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.apply"]], "apply_batch() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.apply_batch"]], "batch() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.batch"]], "batch_ids() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.batch_ids"]], "blobs (docarray.array.match.matcharray property)": [[20, "docarray.array.match.MatchArray.blobs"]], "clear() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.clear"]], "cloud_delete() (docarray.array.match.matcharray static method)": [[20, "docarray.array.match.MatchArray.cloud_delete"]], "cloud_list() (docarray.array.match.matcharray static method)": [[20, "docarray.array.match.MatchArray.cloud_list"]], "cloud_pull() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.cloud_pull"]], "cloud_push() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.cloud_push"]], "contents (docarray.array.match.matcharray property)": [[20, "docarray.array.match.MatchArray.contents"]], "count() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.count"]], "dataloader() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.dataloader"]], "docarray.array.match": [[20, "module-docarray.array.match"]], "embed() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.embed"]], "embed_and_evaluate() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.embed_and_evaluate"]], "embeddings (docarray.array.match.matcharray property)": [[20, "docarray.array.match.MatchArray.embeddings"]], "empty() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.empty"]], "evaluate() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.evaluate"]], "extend() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.extend"]], "find() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.find"]], "flatten() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.flatten"]], "from_base64() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.from_base64"]], "from_bytes() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.from_bytes"]], "from_csv() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.from_csv"]], "from_dataframe() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.from_dataframe"]], "from_dict() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.from_dict"]], "from_files() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.from_files"]], "from_huggingface_datasets() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.from_huggingface_datasets"]], "from_json() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.from_json"]], "from_lines() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.from_lines"]], "from_list() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.from_list"]], "from_ndarray() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.from_ndarray"]], "from_ndjson() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.from_ndjson"]], "from_protobuf() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.from_protobuf"]], "from_pydantic_model() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.from_strawberry_type"]], "get_json_schema() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.get_json_schema"]], "get_vocabulary() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.get_vocabulary"]], "granularity (docarray.array.match.matcharray property)": [[20, "docarray.array.match.MatchArray.granularity"]], "index() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.index"]], "insert() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.insert"]], "load() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.load"]], "load_binary() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.load_binary"]], "load_csv() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.load_csv"]], "load_json() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.load_json"]], "map() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.map"]], "map_batch() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.map_batch"]], "match() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.match"]], "plot_embeddings() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.plot_image_sprites"]], "pop() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.pop"]], "post() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.post"]], "pull() (docarray.array.match.matcharray class method)": [[20, "docarray.array.match.MatchArray.pull"]], "push() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.push"]], "reduce() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.reduce"]], "reduce_all() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.reduce_all"]], "reference_doc (docarray.array.match.matcharray property)": [[20, "docarray.array.match.MatchArray.reference_doc"]], "remove() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.remove"]], "reverse() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.reverse"]], "sample() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.sample"]], "save() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.save"]], "save_binary() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.save_binary"]], "save_csv() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.save_csv"]], "save_embeddings_csv() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.save_embeddings_csv"]], "save_gif() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.save_gif"]], "save_json() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.save_json"]], "shuffle() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.shuffle"]], "split_by_tag() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.split_by_tag"]], "summary() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.summary"]], "sync() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.sync"]], "tensors (docarray.array.match.matcharray property)": [[20, "docarray.array.match.MatchArray.tensors"]], "texts (docarray.array.match.matcharray property)": [[20, "docarray.array.match.MatchArray.texts"]], "to_base64() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.to_base64"]], "to_bytes() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.to_bytes"]], "to_dataframe() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.to_dataframe"]], "to_dict() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.to_dict"]], "to_json() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.to_json"]], "to_list() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.to_list"]], "to_protobuf() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.to_protobuf"]], "to_pydantic_model() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.to_strawberry_type"]], "traverse() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.traverse"]], "traverse_flat() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.match.matcharray method)": [[20, "docarray.array.match.MatchArray.traverse_flat_per_path"]], "documentarrayinmemory (class in docarray.array.memory)": [[21, "docarray.array.memory.DocumentArrayInMemory"]], "type_map (docarray.array.memory.documentarrayinmemory attribute)": [[21, "docarray.array.memory.DocumentArrayInMemory.TYPE_MAP"]], "append() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.append"]], "apply() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.apply"]], "apply_batch() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.apply_batch"]], "batch() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.batch"]], "batch_ids() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.batch_ids"]], "blobs (docarray.array.memory.documentarrayinmemory property)": [[21, "docarray.array.memory.DocumentArrayInMemory.blobs"]], "clear() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.clear"]], "cloud_delete() (docarray.array.memory.documentarrayinmemory static method)": [[21, "docarray.array.memory.DocumentArrayInMemory.cloud_delete"]], "cloud_list() (docarray.array.memory.documentarrayinmemory static method)": [[21, "docarray.array.memory.DocumentArrayInMemory.cloud_list"]], "cloud_pull() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.cloud_pull"]], "cloud_push() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.cloud_push"]], "contents (docarray.array.memory.documentarrayinmemory property)": [[21, "docarray.array.memory.DocumentArrayInMemory.contents"]], "count() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.count"]], "dataloader() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.dataloader"]], "docarray.array.memory": [[21, "module-docarray.array.memory"]], "embed() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.embed"]], "embed_and_evaluate() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.embed_and_evaluate"]], "embeddings (docarray.array.memory.documentarrayinmemory property)": [[21, "docarray.array.memory.DocumentArrayInMemory.embeddings"]], "empty() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.empty"]], "evaluate() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.evaluate"]], "extend() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.extend"]], "find() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.find"]], "flatten() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.flatten"]], "from_base64() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.from_base64"]], "from_bytes() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.from_bytes"]], "from_csv() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.from_csv"]], "from_dataframe() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.from_dataframe"]], "from_dict() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.from_dict"]], "from_files() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.from_files"]], "from_huggingface_datasets() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.from_huggingface_datasets"]], "from_json() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.from_json"]], "from_lines() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.from_lines"]], "from_list() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.from_list"]], "from_ndarray() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.from_ndarray"]], "from_ndjson() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.from_ndjson"]], "from_protobuf() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.from_protobuf"]], "from_pydantic_model() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.from_pydantic_model"]], "from_strawberry_type() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.from_strawberry_type"]], "get_json_schema() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.get_json_schema"]], "get_vocabulary() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.get_vocabulary"]], "index() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.index"]], "insert() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.insert"]], "load() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.load"]], "load_binary() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.load_binary"]], "load_csv() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.load_csv"]], "load_json() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.load_json"]], "map() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.map"]], "map_batch() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.map_batch"]], "match() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.match"]], "plot_embeddings() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.plot_embeddings"]], "plot_image_sprites() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.plot_image_sprites"]], "pop() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.pop"]], "post() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.post"]], "pull() (docarray.array.memory.documentarrayinmemory class method)": [[21, "docarray.array.memory.DocumentArrayInMemory.pull"]], "push() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.push"]], "reduce() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.reduce"]], "reduce_all() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.reduce_all"]], "remove() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.remove"]], "reverse() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.reverse"]], "sample() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.sample"]], "save() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.save"]], "save_binary() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.save_binary"]], "save_csv() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.save_csv"]], "save_embeddings_csv() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.save_embeddings_csv"]], "save_gif() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.save_gif"]], "save_json() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.save_json"]], "shuffle() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.shuffle"]], "split_by_tag() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.split_by_tag"]], "summary() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.summary"]], "sync() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.sync"]], "tensors (docarray.array.memory.documentarrayinmemory property)": [[21, "docarray.array.memory.DocumentArrayInMemory.tensors"]], "texts (docarray.array.memory.documentarrayinmemory property)": [[21, "docarray.array.memory.DocumentArrayInMemory.texts"]], "to_base64() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.to_base64"]], "to_bytes() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.to_bytes"]], "to_dataframe() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.to_dataframe"]], "to_dict() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.to_dict"]], "to_json() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.to_json"]], "to_list() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.to_list"]], "to_protobuf() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.to_protobuf"]], "to_pydantic_model() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.to_pydantic_model"]], "to_strawberry_type() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.to_strawberry_type"]], "traverse() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.traverse"]], "traverse_flat() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.traverse_flat"]], "traverse_flat_per_path() (docarray.array.memory.documentarrayinmemory method)": [[21, "docarray.array.memory.DocumentArrayInMemory.traverse_flat_per_path"]], "allmixins (class in docarray.array.mixins)": [[23, "docarray.array.mixins.AllMixins"]], "apply() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.apply"]], "apply_batch() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.apply_batch"]], "batch() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.batch"]], "batch_ids() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.batch_ids"]], "blobs (docarray.array.mixins.allmixins property)": [[23, "docarray.array.mixins.AllMixins.blobs"]], "cloud_delete() (docarray.array.mixins.allmixins static method)": [[23, "docarray.array.mixins.AllMixins.cloud_delete"]], "cloud_list() (docarray.array.mixins.allmixins static method)": [[23, "docarray.array.mixins.AllMixins.cloud_list"]], "cloud_pull() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.cloud_pull"]], "cloud_push() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.cloud_push"]], "contents (docarray.array.mixins.allmixins property)": [[23, "docarray.array.mixins.AllMixins.contents"]], "dataloader() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.dataloader"]], "docarray.array.mixins": [[23, "module-docarray.array.mixins"]], "embed() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.embed"]], "embed_and_evaluate() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.embed_and_evaluate"]], "embeddings (docarray.array.mixins.allmixins property)": [[23, "docarray.array.mixins.AllMixins.embeddings"]], "empty() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.empty"]], "evaluate() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.evaluate"]], "find() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.find"]], "flatten() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.flatten"]], "from_base64() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.from_base64"]], "from_bytes() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.from_bytes"]], "from_csv() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.from_csv"]], "from_dataframe() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.from_dataframe"]], "from_dict() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.from_dict"]], "from_files() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.from_files"]], "from_huggingface_datasets() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.from_huggingface_datasets"]], "from_json() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.from_json"]], "from_lines() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.from_lines"]], "from_list() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.from_list"]], "from_ndarray() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.from_ndarray"]], "from_ndjson() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.from_ndjson"]], "from_protobuf() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.from_protobuf"]], "from_pydantic_model() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.from_pydantic_model"]], "from_strawberry_type() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.from_strawberry_type"]], "get_json_schema() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.get_json_schema"]], "get_vocabulary() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.get_vocabulary"]], "load() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.load"]], "load_binary() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.load_binary"]], "load_csv() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.load_csv"]], "load_json() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.load_json"]], "map() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.map"]], "map_batch() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.map_batch"]], "match() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.match"]], "plot_embeddings() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.plot_embeddings"]], "plot_image_sprites() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.plot_image_sprites"]], "post() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.post"]], "pull() (docarray.array.mixins.allmixins class method)": [[23, "docarray.array.mixins.AllMixins.pull"]], "push() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.push"]], "reduce() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.reduce"]], "reduce_all() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.reduce_all"]], "sample() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.sample"]], "save() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.save"]], "save_binary() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.save_binary"]], "save_csv() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.save_csv"]], "save_embeddings_csv() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.save_embeddings_csv"]], "save_gif() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.save_gif"]], "save_json() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.save_json"]], "shuffle() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.shuffle"]], "split_by_tag() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.split_by_tag"]], "summary() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.summary"]], "tensors (docarray.array.mixins.allmixins property)": [[23, "docarray.array.mixins.AllMixins.tensors"]], "texts (docarray.array.mixins.allmixins property)": [[23, "docarray.array.mixins.AllMixins.texts"]], "to_base64() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.to_base64"]], "to_bytes() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.to_bytes"]], "to_dataframe() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.to_dataframe"]], "to_dict() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.to_dict"]], "to_json() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.to_json"]], "to_list() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.to_list"]], "to_protobuf() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.to_protobuf"]], "to_pydantic_model() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.to_pydantic_model"]], "to_strawberry_type() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.to_strawberry_type"]], "traverse() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.traverse"]], "traverse_flat() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.traverse_flat"]], "traverse_flat_per_path() (docarray.array.mixins.allmixins method)": [[23, "docarray.array.mixins.AllMixins.traverse_flat_per_path"]], "contentpropertymixin (class in docarray.array.mixins.content)": [[24, "docarray.array.mixins.content.ContentPropertyMixin"]], "blobs (docarray.array.mixins.content.contentpropertymixin property)": [[24, "docarray.array.mixins.content.ContentPropertyMixin.blobs"]], "contents (docarray.array.mixins.content.contentpropertymixin property)": [[24, "docarray.array.mixins.content.ContentPropertyMixin.contents"]], "docarray.array.mixins.content": [[24, "module-docarray.array.mixins.content"]], "embeddings (docarray.array.mixins.content.contentpropertymixin property)": [[24, "docarray.array.mixins.content.ContentPropertyMixin.embeddings"]], "tensors (docarray.array.mixins.content.contentpropertymixin property)": [[24, "docarray.array.mixins.content.ContentPropertyMixin.tensors"]], "texts (docarray.array.mixins.content.contentpropertymixin property)": [[24, "docarray.array.mixins.content.ContentPropertyMixin.texts"]], "dataloadermixin (class in docarray.array.mixins.dataloader)": [[25, "docarray.array.mixins.dataloader.DataLoaderMixin"]], "dataloader() (docarray.array.mixins.dataloader.dataloadermixin class method)": [[25, "docarray.array.mixins.dataloader.DataLoaderMixin.dataloader"]], "docarray.array.mixins.dataloader": [[25, "module-docarray.array.mixins.dataloader"]], "documentarrayloader (class in docarray.array.mixins.dataloader.helper)": [[26, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader"]], "apply() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[26, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.apply"]], "apply_batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[26, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.apply_batch"]], "batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[26, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.batch"]], "batch_ids() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[26, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.batch_ids"]], "docarray.array.mixins.dataloader.helper": [[26, "module-docarray.array.mixins.dataloader.helper"]], "map() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[26, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.map"]], "map_batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[26, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.map_batch"]], "split_by_tag() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[26, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.split_by_tag"]], "delitemmixin (class in docarray.array.mixins.delitem)": [[27, "docarray.array.mixins.delitem.DelItemMixin"]], "docarray.array.mixins.delitem": [[27, "module-docarray.array.mixins.delitem"]], "embedmixin (class in docarray.array.mixins.embed)": [[28, "docarray.array.mixins.embed.EmbedMixin"]], "docarray.array.mixins.embed": [[28, "module-docarray.array.mixins.embed"]], "embed() (docarray.array.mixins.embed.embedmixin method)": [[28, "docarray.array.mixins.embed.EmbedMixin.embed"]], "get_framework() (in module docarray.array.mixins.embed)": [[28, "docarray.array.mixins.embed.get_framework"]], "emptymixin (class in docarray.array.mixins.empty)": [[29, "docarray.array.mixins.empty.EmptyMixin"]], "docarray.array.mixins.empty": [[29, "module-docarray.array.mixins.empty"]], "empty() (docarray.array.mixins.empty.emptymixin class method)": [[29, "docarray.array.mixins.empty.EmptyMixin.empty"]], "evaluationmixin (class in docarray.array.mixins.evaluation)": [[30, "docarray.array.mixins.evaluation.EvaluationMixin"]], "docarray.array.mixins.evaluation": [[30, "module-docarray.array.mixins.evaluation"]], "embed_and_evaluate() (docarray.array.mixins.evaluation.evaluationmixin method)": [[30, "docarray.array.mixins.evaluation.EvaluationMixin.embed_and_evaluate"]], "evaluate() (docarray.array.mixins.evaluation.evaluationmixin method)": [[30, "docarray.array.mixins.evaluation.EvaluationMixin.evaluate"]], "findmixin (class in docarray.array.mixins.find)": [[31, "docarray.array.mixins.find.FindMixin"]], "docarray.array.mixins.find": [[31, "module-docarray.array.mixins.find"]], "find() (docarray.array.mixins.find.findmixin method)": [[31, "docarray.array.mixins.find.FindMixin.find"]], "getattributemixin (class in docarray.array.mixins.getattr)": [[32, "docarray.array.mixins.getattr.GetAttributeMixin"]], "docarray.array.mixins.getattr": [[32, "module-docarray.array.mixins.getattr"]], "getitemmixin (class in docarray.array.mixins.getitem)": [[33, "docarray.array.mixins.getitem.GetItemMixin"]], "docarray.array.mixins.getitem": [[33, "module-docarray.array.mixins.getitem"]], "groupmixin (class in docarray.array.mixins.group)": [[34, "docarray.array.mixins.group.GroupMixin"]], "batch() (docarray.array.mixins.group.groupmixin method)": [[34, "docarray.array.mixins.group.GroupMixin.batch"]], "batch_ids() (docarray.array.mixins.group.groupmixin method)": [[34, "docarray.array.mixins.group.GroupMixin.batch_ids"]], "docarray.array.mixins.group": [[34, "module-docarray.array.mixins.group"]], "split_by_tag() (docarray.array.mixins.group.groupmixin method)": [[34, "docarray.array.mixins.group.GroupMixin.split_by_tag"]], "docarray.array.mixins.io": [[35, "module-docarray.array.mixins.io"]], "binaryiomixin (class in docarray.array.mixins.io.binary)": [[36, "docarray.array.mixins.io.binary.BinaryIOMixin"]], "lazyrequestreader (class in docarray.array.mixins.io.binary)": [[36, "docarray.array.mixins.io.binary.LazyRequestReader"]], "docarray.array.mixins.io.binary": [[36, "module-docarray.array.mixins.io.binary"]], "from_base64() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[36, "docarray.array.mixins.io.binary.BinaryIOMixin.from_base64"]], "from_bytes() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[36, "docarray.array.mixins.io.binary.BinaryIOMixin.from_bytes"]], "from_protobuf() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[36, "docarray.array.mixins.io.binary.BinaryIOMixin.from_protobuf"]], "load_binary() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[36, "docarray.array.mixins.io.binary.BinaryIOMixin.load_binary"]], "save_binary() (docarray.array.mixins.io.binary.binaryiomixin method)": [[36, "docarray.array.mixins.io.binary.BinaryIOMixin.save_binary"]], "to_base64() (docarray.array.mixins.io.binary.binaryiomixin method)": [[36, "docarray.array.mixins.io.binary.BinaryIOMixin.to_base64"]], "to_bytes() (docarray.array.mixins.io.binary.binaryiomixin method)": [[36, "docarray.array.mixins.io.binary.BinaryIOMixin.to_bytes"]], "to_protobuf() (docarray.array.mixins.io.binary.binaryiomixin method)": [[36, "docarray.array.mixins.io.binary.BinaryIOMixin.to_protobuf"]], "commoniomixin (class in docarray.array.mixins.io.common)": [[37, "docarray.array.mixins.io.common.CommonIOMixin"]], "docarray.array.mixins.io.common": [[37, "module-docarray.array.mixins.io.common"]], "load() (docarray.array.mixins.io.common.commoniomixin class method)": [[37, "docarray.array.mixins.io.common.CommonIOMixin.load"]], "save() (docarray.array.mixins.io.common.commoniomixin method)": [[37, "docarray.array.mixins.io.common.CommonIOMixin.save"]], "csviomixin (class in docarray.array.mixins.io.csv)": [[38, "docarray.array.mixins.io.csv.CsvIOMixin"]], "docarray.array.mixins.io.csv": [[38, "module-docarray.array.mixins.io.csv"]], "load_csv() (docarray.array.mixins.io.csv.csviomixin class method)": [[38, "docarray.array.mixins.io.csv.CsvIOMixin.load_csv"]], "save_csv() (docarray.array.mixins.io.csv.csviomixin method)": [[38, "docarray.array.mixins.io.csv.CsvIOMixin.save_csv"]], "save_embeddings_csv() (docarray.array.mixins.io.csv.csviomixin method)": [[38, "docarray.array.mixins.io.csv.CsvIOMixin.save_embeddings_csv"]], "dataframeiomixin (class in docarray.array.mixins.io.dataframe)": [[39, "docarray.array.mixins.io.dataframe.DataframeIOMixin"]], "docarray.array.mixins.io.dataframe": [[39, "module-docarray.array.mixins.io.dataframe"]], "from_dataframe() (docarray.array.mixins.io.dataframe.dataframeiomixin class method)": [[39, "docarray.array.mixins.io.dataframe.DataframeIOMixin.from_dataframe"]], "to_dataframe() (docarray.array.mixins.io.dataframe.dataframeiomixin method)": [[39, "docarray.array.mixins.io.dataframe.DataframeIOMixin.to_dataframe"]], "fromgeneratormixin (class in docarray.array.mixins.io.from_gen)": [[40, "docarray.array.mixins.io.from_gen.FromGeneratorMixin"]], "docarray.array.mixins.io.from_gen": [[40, "module-docarray.array.mixins.io.from_gen"]], "from_csv() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[40, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_csv"]], "from_files() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[40, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_files"]], "from_huggingface_datasets() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[40, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_huggingface_datasets"]], "from_lines() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[40, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_lines"]], "from_ndarray() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[40, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_ndarray"]], "from_ndjson() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[40, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_ndjson"]], "jsoniomixin (class in docarray.array.mixins.io.json)": [[41, "docarray.array.mixins.io.json.JsonIOMixin"]], "docarray.array.mixins.io.json": [[41, "module-docarray.array.mixins.io.json"]], "from_dict() (docarray.array.mixins.io.json.jsoniomixin class method)": [[41, "docarray.array.mixins.io.json.JsonIOMixin.from_dict"]], "from_json() (docarray.array.mixins.io.json.jsoniomixin class method)": [[41, "docarray.array.mixins.io.json.JsonIOMixin.from_json"]], "from_list() (docarray.array.mixins.io.json.jsoniomixin class method)": [[41, "docarray.array.mixins.io.json.JsonIOMixin.from_list"]], "load_json() (docarray.array.mixins.io.json.jsoniomixin class method)": [[41, "docarray.array.mixins.io.json.JsonIOMixin.load_json"]], "save_json() (docarray.array.mixins.io.json.jsoniomixin method)": [[41, "docarray.array.mixins.io.json.JsonIOMixin.save_json"]], "to_dict() (docarray.array.mixins.io.json.jsoniomixin method)": [[41, "docarray.array.mixins.io.json.JsonIOMixin.to_dict"]], "to_json() (docarray.array.mixins.io.json.jsoniomixin method)": [[41, "docarray.array.mixins.io.json.JsonIOMixin.to_json"]], "to_list() (docarray.array.mixins.io.json.jsoniomixin method)": [[41, "docarray.array.mixins.io.json.JsonIOMixin.to_list"]], "qpscolumn (class in docarray.array.mixins.io.pbar)": [[42, "docarray.array.mixins.io.pbar.QPSColumn"]], "docarray.array.mixins.io.pbar": [[42, "module-docarray.array.mixins.io.pbar"]], "get_pbar() (in module docarray.array.mixins.io.pbar)": [[42, "docarray.array.mixins.io.pbar.get_pbar"]], "get_progressbar() (in module docarray.array.mixins.io.pbar)": [[42, "docarray.array.mixins.io.pbar.get_progressbar"]], "get_table_column() (docarray.array.mixins.io.pbar.qpscolumn method)": [[42, "docarray.array.mixins.io.pbar.QPSColumn.get_table_column"]], "max_refresh (docarray.array.mixins.io.pbar.qpscolumn attribute)": [[42, "docarray.array.mixins.io.pbar.QPSColumn.max_refresh"]], "render() (docarray.array.mixins.io.pbar.qpscolumn method)": [[42, "docarray.array.mixins.io.pbar.QPSColumn.render"]], "pushpullmixin (class in docarray.array.mixins.io.pushpull)": [[43, "docarray.array.mixins.io.pushpull.PushPullMixin"]], "cloud_delete() (docarray.array.mixins.io.pushpull.pushpullmixin static method)": [[43, "docarray.array.mixins.io.pushpull.PushPullMixin.cloud_delete"]], "cloud_list() (docarray.array.mixins.io.pushpull.pushpullmixin static method)": [[43, "docarray.array.mixins.io.pushpull.PushPullMixin.cloud_list"]], "cloud_pull() (docarray.array.mixins.io.pushpull.pushpullmixin class method)": [[43, "docarray.array.mixins.io.pushpull.PushPullMixin.cloud_pull"]], "cloud_push() (docarray.array.mixins.io.pushpull.pushpullmixin method)": [[43, "docarray.array.mixins.io.pushpull.PushPullMixin.cloud_push"]], "docarray.array.mixins.io.pushpull": [[43, "module-docarray.array.mixins.io.pushpull"]], "pull() (docarray.array.mixins.io.pushpull.pushpullmixin class method)": [[43, "docarray.array.mixins.io.pushpull.PushPullMixin.pull"]], "push() (docarray.array.mixins.io.pushpull.pushpullmixin method)": [[43, "docarray.array.mixins.io.pushpull.PushPullMixin.push"]], "matchmixin (class in docarray.array.mixins.match)": [[44, "docarray.array.mixins.match.MatchMixin"]], "docarray.array.mixins.match": [[44, "module-docarray.array.mixins.match"]], "match() (docarray.array.mixins.match.matchmixin method)": [[44, "docarray.array.mixins.match.MatchMixin.match"]], "parallelmixin (class in docarray.array.mixins.parallel)": [[45, "docarray.array.mixins.parallel.ParallelMixin"]], "apply() (docarray.array.mixins.parallel.parallelmixin method)": [[45, "docarray.array.mixins.parallel.ParallelMixin.apply"]], "apply_batch() (docarray.array.mixins.parallel.parallelmixin method)": [[45, "docarray.array.mixins.parallel.ParallelMixin.apply_batch"]], "docarray.array.mixins.parallel": [[45, "module-docarray.array.mixins.parallel"]], "map() (docarray.array.mixins.parallel.parallelmixin method)": [[45, "docarray.array.mixins.parallel.ParallelMixin.map"]], "map_batch() (docarray.array.mixins.parallel.parallelmixin method)": [[45, "docarray.array.mixins.parallel.ParallelMixin.map_batch"]], "plotmixin (class in docarray.array.mixins.plot)": [[46, "docarray.array.mixins.plot.PlotMixin"]], "docarray.array.mixins.plot": [[46, "module-docarray.array.mixins.plot"]], "plot_embeddings() (docarray.array.mixins.plot.plotmixin method)": [[46, "docarray.array.mixins.plot.PlotMixin.plot_embeddings"]], "plot_image_sprites() (docarray.array.mixins.plot.plotmixin method)": [[46, "docarray.array.mixins.plot.PlotMixin.plot_image_sprites"]], "save_gif() (docarray.array.mixins.plot.plotmixin method)": [[46, "docarray.array.mixins.plot.PlotMixin.save_gif"]], "summary() (docarray.array.mixins.plot.plotmixin method)": [[46, "docarray.array.mixins.plot.PlotMixin.summary"]], "postmixin (class in docarray.array.mixins.post)": [[47, "docarray.array.mixins.post.PostMixin"]], "docarray.array.mixins.post": [[47, "module-docarray.array.mixins.post"]], "post() (docarray.array.mixins.post.postmixin method)": [[47, "docarray.array.mixins.post.PostMixin.post"]], "pydanticmixin (class in docarray.array.mixins.pydantic)": [[48, "docarray.array.mixins.pydantic.PydanticMixin"]], "docarray.array.mixins.pydantic": [[48, "module-docarray.array.mixins.pydantic"]], "from_pydantic_model() (docarray.array.mixins.pydantic.pydanticmixin class method)": [[48, "docarray.array.mixins.pydantic.PydanticMixin.from_pydantic_model"]], "get_json_schema() (docarray.array.mixins.pydantic.pydanticmixin class method)": [[48, "docarray.array.mixins.pydantic.PydanticMixin.get_json_schema"]], "to_pydantic_model() (docarray.array.mixins.pydantic.pydanticmixin method)": [[48, "docarray.array.mixins.pydantic.PydanticMixin.to_pydantic_model"]], "reducemixin (class in docarray.array.mixins.reduce)": [[49, "docarray.array.mixins.reduce.ReduceMixin"]], "docarray.array.mixins.reduce": [[49, "module-docarray.array.mixins.reduce"]], "reduce() (docarray.array.mixins.reduce.reducemixin method)": [[49, "docarray.array.mixins.reduce.ReduceMixin.reduce"]], "reduce_all() (docarray.array.mixins.reduce.reducemixin method)": [[49, "docarray.array.mixins.reduce.ReduceMixin.reduce_all"]], "samplemixin (class in docarray.array.mixins.sample)": [[50, "docarray.array.mixins.sample.SampleMixin"]], "docarray.array.mixins.sample": [[50, "module-docarray.array.mixins.sample"]], "sample() (docarray.array.mixins.sample.samplemixin method)": [[50, "docarray.array.mixins.sample.SampleMixin.sample"]], "shuffle() (docarray.array.mixins.sample.samplemixin method)": [[50, "docarray.array.mixins.sample.SampleMixin.shuffle"]], "setitemmixin (class in docarray.array.mixins.setitem)": [[51, "docarray.array.mixins.setitem.SetItemMixin"]], "docarray.array.mixins.setitem": [[51, "module-docarray.array.mixins.setitem"]], "strawberrymixin (class in docarray.array.mixins.strawberry)": [[52, "docarray.array.mixins.strawberry.StrawberryMixin"]], "docarray.array.mixins.strawberry": [[52, "module-docarray.array.mixins.strawberry"]], "from_strawberry_type() (docarray.array.mixins.strawberry.strawberrymixin class method)": [[52, "docarray.array.mixins.strawberry.StrawberryMixin.from_strawberry_type"]], "to_strawberry_type() (docarray.array.mixins.strawberry.strawberrymixin method)": [[52, "docarray.array.mixins.strawberry.StrawberryMixin.to_strawberry_type"]], "texttoolsmixin (class in docarray.array.mixins.text)": [[53, "docarray.array.mixins.text.TextToolsMixin"]], "docarray.array.mixins.text": [[53, "module-docarray.array.mixins.text"]], "get_vocabulary() (docarray.array.mixins.text.texttoolsmixin method)": [[53, "docarray.array.mixins.text.TextToolsMixin.get_vocabulary"]], "traversemixin (class in docarray.array.mixins.traverse)": [[54, "docarray.array.mixins.traverse.TraverseMixin"]], "docarray.array.mixins.traverse": [[54, "module-docarray.array.mixins.traverse"]], "flatten() (docarray.array.mixins.traverse.traversemixin method)": [[54, "docarray.array.mixins.traverse.TraverseMixin.flatten"]], "traverse() (docarray.array.mixins.traverse.traversemixin method)": [[54, "docarray.array.mixins.traverse.TraverseMixin.traverse"]], "traverse_flat() (docarray.array.mixins.traverse.traversemixin method)": [[54, "docarray.array.mixins.traverse.TraverseMixin.traverse_flat"]], "traverse_flat_per_path() (docarray.array.mixins.traverse.traversemixin method)": [[54, "docarray.array.mixins.traverse.TraverseMixin.traverse_flat_per_path"]], "documentarrayqdrant (class in docarray.array.qdrant)": [[55, "docarray.array.qdrant.DocumentArrayQdrant"]], "qdrantconfig (class in docarray.array.qdrant)": [[55, "docarray.array.qdrant.QdrantConfig"]], "type_map (docarray.array.qdrant.documentarrayqdrant attribute)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.TYPE_MAP"]], "api_key (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.api_key"]], "append() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.append"]], "apply() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.apply"]], "apply_batch() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.apply_batch"]], "batch() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.batch"]], "batch_ids() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.batch_ids"]], "blobs (docarray.array.qdrant.documentarrayqdrant property)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.blobs"]], "clear() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.clear"]], "client (docarray.array.qdrant.documentarrayqdrant property)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.client"]], "cloud_delete() (docarray.array.qdrant.documentarrayqdrant static method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.cloud_delete"]], "cloud_list() (docarray.array.qdrant.documentarrayqdrant static method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.cloud_list"]], "cloud_pull() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.cloud_pull"]], "cloud_push() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.cloud_push"]], "collection_name (docarray.array.qdrant.documentarrayqdrant property)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.collection_name"]], "collection_name (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.collection_name"]], "collection_name_meta (docarray.array.qdrant.documentarrayqdrant property)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.collection_name_meta"]], "columns (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.columns"]], "config (docarray.array.qdrant.documentarrayqdrant property)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.config"]], "contents (docarray.array.qdrant.documentarrayqdrant property)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.contents"]], "count() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.count"]], "dataloader() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.dataloader"]], "distance (docarray.array.qdrant.documentarrayqdrant property)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.distance"]], "distance (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.distance"]], "docarray.array.qdrant": [[55, "module-docarray.array.qdrant"]], "ef_construct (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.ef_construct"]], "embed() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.embed"]], "embed_and_evaluate() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.embed_and_evaluate"]], "embeddings (docarray.array.qdrant.documentarrayqdrant property)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.embeddings"]], "empty() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.empty"]], "evaluate() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.evaluate"]], "extend() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.extend"]], "find() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.find"]], "flatten() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.flatten"]], "from_base64() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.from_base64"]], "from_bytes() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.from_bytes"]], "from_csv() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.from_csv"]], "from_dataframe() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.from_dataframe"]], "from_dict() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.from_dict"]], "from_files() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.from_files"]], "from_huggingface_datasets() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.from_huggingface_datasets"]], "from_json() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.from_json"]], "from_lines() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.from_lines"]], "from_list() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.from_list"]], "from_ndarray() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.from_ndarray"]], "from_ndjson() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.from_ndjson"]], "from_protobuf() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.from_protobuf"]], "from_pydantic_model() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.from_pydantic_model"]], "from_strawberry_type() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.from_strawberry_type"]], "full_scan_threshold (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.full_scan_threshold"]], "get_json_schema() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.get_json_schema"]], "get_vocabulary() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.get_vocabulary"]], "grpc_port (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.grpc_port"]], "host (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.host"]], "https (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.https"]], "index() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.index"]], "insert() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.insert"]], "list_like (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.list_like"]], "load() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.load"]], "load_binary() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.load_binary"]], "load_csv() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.load_csv"]], "load_json() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.load_json"]], "m (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.m"]], "map() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.map"]], "map_batch() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.map_batch"]], "match() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.match"]], "n_dim (docarray.array.qdrant.documentarrayqdrant property)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.n_dim"]], "n_dim (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.n_dim"]], "plot_embeddings() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.plot_embeddings"]], "plot_image_sprites() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.plot_image_sprites"]], "pop() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.pop"]], "port (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.port"]], "post() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.post"]], "prefer_grpc (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.prefer_grpc"]], "pull() (docarray.array.qdrant.documentarrayqdrant class method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.pull"]], "push() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.push"]], "reduce() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.reduce"]], "reduce_all() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.reduce_all"]], "remove() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.remove"]], "reverse() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.reverse"]], "root_id (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.root_id"]], "sample() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.sample"]], "save() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.save"]], "save_binary() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.save_binary"]], "save_csv() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.save_csv"]], "save_embeddings_csv() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.save_embeddings_csv"]], "save_gif() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.save_gif"]], "save_json() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.save_json"]], "scan() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.scan"]], "scroll_batch_size (docarray.array.qdrant.documentarrayqdrant property)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.scroll_batch_size"]], "scroll_batch_size (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.scroll_batch_size"]], "serialization_config (docarray.array.qdrant.documentarrayqdrant property)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.serialization_config"]], "serialize_config (docarray.array.qdrant.documentarrayqdrant property)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.serialize_config"]], "serialize_config (docarray.array.qdrant.qdrantconfig attribute)": [[55, "docarray.array.qdrant.QdrantConfig.serialize_config"]], "shuffle() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.shuffle"]], "split_by_tag() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.split_by_tag"]], "summary() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.summary"]], "sync() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.sync"]], "tensors (docarray.array.qdrant.documentarrayqdrant property)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.tensors"]], "texts (docarray.array.qdrant.documentarrayqdrant property)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.texts"]], "to_base64() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.to_base64"]], "to_bytes() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.to_bytes"]], "to_dataframe() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.to_dataframe"]], "to_dict() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.to_dict"]], "to_json() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.to_json"]], "to_list() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.to_list"]], "to_protobuf() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.to_protobuf"]], "to_pydantic_model() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.to_pydantic_model"]], "to_strawberry_type() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.to_strawberry_type"]], "traverse() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.traverse"]], "traverse_flat() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.traverse_flat"]], "traverse_flat_per_path() (docarray.array.qdrant.documentarrayqdrant method)": [[55, "docarray.array.qdrant.DocumentArrayQdrant.traverse_flat_per_path"]], "docarray.array.queryset": [[56, "module-docarray.array.queryset"]], "lookupleaf (class in docarray.array.queryset.lookup)": [[57, "docarray.array.queryset.lookup.LookupLeaf"]], "lookupnode (class in docarray.array.queryset.lookup)": [[57, "docarray.array.queryset.lookup.LookupNode"]], "lookuptreeelem (class in docarray.array.queryset.lookup)": [[57, "docarray.array.queryset.lookup.LookupTreeElem"]], "lookupyerror": [[57, "docarray.array.queryset.lookup.LookupyError"]], "q (in module docarray.array.queryset.lookup)": [[57, "docarray.array.queryset.lookup.Q"]], "add_child() (docarray.array.queryset.lookup.lookupnode method)": [[57, "docarray.array.queryset.lookup.LookupNode.add_child"]], "args (docarray.array.queryset.lookup.lookupyerror attribute)": [[57, "docarray.array.queryset.lookup.LookupyError.args"]], "docarray.array.queryset.lookup": [[57, "module-docarray.array.queryset.lookup"]], "dunder_partition() (in module docarray.array.queryset.lookup)": [[57, "docarray.array.queryset.lookup.dunder_partition"]], "evaluate() (docarray.array.queryset.lookup.lookupleaf method)": [[57, "docarray.array.queryset.lookup.LookupLeaf.evaluate"]], "evaluate() (docarray.array.queryset.lookup.lookupnode method)": [[57, "docarray.array.queryset.lookup.LookupNode.evaluate"]], "evaluate() (docarray.array.queryset.lookup.lookuptreeelem method)": [[57, "docarray.array.queryset.lookup.LookupTreeElem.evaluate"]], "guard_q() (in module docarray.array.queryset.lookup)": [[57, "docarray.array.queryset.lookup.guard_Q"]], "guard_iter() (in module docarray.array.queryset.lookup)": [[57, "docarray.array.queryset.lookup.guard_iter"]], "guard_list() (in module docarray.array.queryset.lookup)": [[57, "docarray.array.queryset.lookup.guard_list"]], "guard_str() (in module docarray.array.queryset.lookup)": [[57, "docarray.array.queryset.lookup.guard_str"]], "guard_type() (in module docarray.array.queryset.lookup)": [[57, "docarray.array.queryset.lookup.guard_type"]], "iff() (in module docarray.array.queryset.lookup)": [[57, "docarray.array.queryset.lookup.iff"]], "iff_not_none() (in module docarray.array.queryset.lookup)": [[57, "docarray.array.queryset.lookup.iff_not_none"]], "lookup() (in module docarray.array.queryset.lookup)": [[57, "docarray.array.queryset.lookup.lookup"]], "with_traceback() (docarray.array.queryset.lookup.lookupyerror method)": [[57, "docarray.array.queryset.lookup.LookupyError.with_traceback"]], "queryparser (class in docarray.array.queryset.parser)": [[58, "docarray.array.queryset.parser.QueryParser"]], "docarray.array.queryset.parser": [[58, "module-docarray.array.queryset.parser"]], "evaluate() (docarray.array.queryset.parser.queryparser method)": [[58, "docarray.array.queryset.parser.QueryParser.evaluate"]], "documentarrayredis (class in docarray.array.redis)": [[59, "docarray.array.redis.DocumentArrayRedis"]], "redisconfig (class in docarray.array.redis)": [[59, "docarray.array.redis.RedisConfig"]], "type_map (docarray.array.redis.documentarrayredis attribute)": [[59, "docarray.array.redis.DocumentArrayRedis.TYPE_MAP"]], "append() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.append"]], "apply() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.apply"]], "apply_batch() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.apply_batch"]], "batch() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.batch"]], "batch_ids() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.batch_ids"]], "batch_size (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.batch_size"]], "blobs (docarray.array.redis.documentarrayredis property)": [[59, "docarray.array.redis.DocumentArrayRedis.blobs"]], "block_size (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.block_size"]], "clear() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.clear"]], "cloud_delete() (docarray.array.redis.documentarrayredis static method)": [[59, "docarray.array.redis.DocumentArrayRedis.cloud_delete"]], "cloud_list() (docarray.array.redis.documentarrayredis static method)": [[59, "docarray.array.redis.DocumentArrayRedis.cloud_list"]], "cloud_pull() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.cloud_pull"]], "cloud_push() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.cloud_push"]], "columns (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.columns"]], "contents (docarray.array.redis.documentarrayredis property)": [[59, "docarray.array.redis.DocumentArrayRedis.contents"]], "count() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.count"]], "dataloader() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.dataloader"]], "distance (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.distance"]], "docarray.array.redis": [[59, "module-docarray.array.redis"]], "ef_construction (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.ef_construction"]], "ef_runtime (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.ef_runtime"]], "embed() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.embed"]], "embed_and_evaluate() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.embed_and_evaluate"]], "embeddings (docarray.array.redis.documentarrayredis property)": [[59, "docarray.array.redis.DocumentArrayRedis.embeddings"]], "empty() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.empty"]], "evaluate() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.evaluate"]], "extend() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.extend"]], "find() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.find"]], "flatten() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.flatten"]], "from_base64() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.from_base64"]], "from_bytes() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.from_bytes"]], "from_csv() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.from_csv"]], "from_dataframe() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.from_dataframe"]], "from_dict() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.from_dict"]], "from_files() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.from_files"]], "from_huggingface_datasets() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.from_huggingface_datasets"]], "from_json() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.from_json"]], "from_lines() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.from_lines"]], "from_list() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.from_list"]], "from_ndarray() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.from_ndarray"]], "from_ndjson() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.from_ndjson"]], "from_protobuf() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.from_protobuf"]], "from_pydantic_model() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.from_pydantic_model"]], "from_strawberry_type() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.from_strawberry_type"]], "get_json_schema() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.get_json_schema"]], "get_vocabulary() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.get_vocabulary"]], "host (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.host"]], "index() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.index"]], "index_name (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.index_name"]], "index_text (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.index_text"]], "initial_cap (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.initial_cap"]], "insert() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.insert"]], "list_like (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.list_like"]], "load() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.load"]], "load_binary() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.load_binary"]], "load_csv() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.load_csv"]], "load_json() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.load_json"]], "m (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.m"]], "map() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.map"]], "map_batch() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.map_batch"]], "match() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.match"]], "method (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.method"]], "n_dim (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.n_dim"]], "plot_embeddings() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.plot_embeddings"]], "plot_image_sprites() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.plot_image_sprites"]], "pop() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.pop"]], "port (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.port"]], "post() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.post"]], "pull() (docarray.array.redis.documentarrayredis class method)": [[59, "docarray.array.redis.DocumentArrayRedis.pull"]], "push() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.push"]], "redis_config (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.redis_config"]], "reduce() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.reduce"]], "reduce_all() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.reduce_all"]], "remove() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.remove"]], "reverse() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.reverse"]], "root_id (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.root_id"]], "sample() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.sample"]], "save() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.save"]], "save_binary() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.save_binary"]], "save_csv() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.save_csv"]], "save_embeddings_csv() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.save_embeddings_csv"]], "save_gif() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.save_gif"]], "save_json() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.save_json"]], "shuffle() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.shuffle"]], "split_by_tag() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.split_by_tag"]], "summary() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.summary"]], "sync() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.sync"]], "tag_indices (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.tag_indices"]], "tensors (docarray.array.redis.documentarrayredis property)": [[59, "docarray.array.redis.DocumentArrayRedis.tensors"]], "texts (docarray.array.redis.documentarrayredis property)": [[59, "docarray.array.redis.DocumentArrayRedis.texts"]], "to_base64() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.to_base64"]], "to_bytes() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.to_bytes"]], "to_dataframe() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.to_dataframe"]], "to_dict() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.to_dict"]], "to_json() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.to_json"]], "to_list() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.to_list"]], "to_protobuf() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.to_protobuf"]], "to_pydantic_model() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.to_pydantic_model"]], "to_strawberry_type() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.to_strawberry_type"]], "traverse() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.traverse"]], "traverse_flat() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.traverse_flat"]], "traverse_flat_per_path() (docarray.array.redis.documentarrayredis method)": [[59, "docarray.array.redis.DocumentArrayRedis.traverse_flat_per_path"]], "update_schema (docarray.array.redis.redisconfig attribute)": [[59, "docarray.array.redis.RedisConfig.update_schema"]], "documentarraysqlite (class in docarray.array.sqlite)": [[60, "docarray.array.sqlite.DocumentArraySqlite"]], "sqliteconfig (class in docarray.array.sqlite)": [[60, "docarray.array.sqlite.SqliteConfig"]], "type_map (docarray.array.sqlite.documentarraysqlite attribute)": [[60, "docarray.array.sqlite.DocumentArraySqlite.TYPE_MAP"]], "append() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.append"]], "apply() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.apply"]], "apply_batch() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.apply_batch"]], "batch() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.batch"]], "batch_ids() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.batch_ids"]], "blobs (docarray.array.sqlite.documentarraysqlite property)": [[60, "docarray.array.sqlite.DocumentArraySqlite.blobs"]], "clear() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.clear"]], "cloud_delete() (docarray.array.sqlite.documentarraysqlite static method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.cloud_delete"]], "cloud_list() (docarray.array.sqlite.documentarraysqlite static method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.cloud_list"]], "cloud_pull() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.cloud_pull"]], "cloud_push() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.cloud_push"]], "conn_config (docarray.array.sqlite.sqliteconfig attribute)": [[60, "docarray.array.sqlite.SqliteConfig.conn_config"]], "connection (docarray.array.sqlite.sqliteconfig attribute)": [[60, "docarray.array.sqlite.SqliteConfig.connection"]], "contents (docarray.array.sqlite.documentarraysqlite property)": [[60, "docarray.array.sqlite.DocumentArraySqlite.contents"]], "count() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.count"]], "dataloader() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.dataloader"]], "docarray.array.sqlite": [[60, "module-docarray.array.sqlite"]], "embed() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.embed"]], "embed_and_evaluate() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.embed_and_evaluate"]], "embeddings (docarray.array.sqlite.documentarraysqlite property)": [[60, "docarray.array.sqlite.DocumentArraySqlite.embeddings"]], "empty() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.empty"]], "evaluate() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.evaluate"]], "extend() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.extend"]], "find() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.find"]], "flatten() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.flatten"]], "from_base64() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.from_base64"]], "from_bytes() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.from_bytes"]], "from_csv() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.from_csv"]], "from_dataframe() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.from_dataframe"]], "from_dict() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.from_dict"]], "from_files() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.from_files"]], "from_huggingface_datasets() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.from_huggingface_datasets"]], "from_json() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.from_json"]], "from_lines() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.from_lines"]], "from_list() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.from_list"]], "from_ndarray() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.from_ndarray"]], "from_ndjson() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.from_ndjson"]], "from_protobuf() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.from_protobuf"]], "from_pydantic_model() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.from_pydantic_model"]], "from_strawberry_type() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.from_strawberry_type"]], "get_json_schema() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.get_json_schema"]], "get_vocabulary() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.get_vocabulary"]], "index() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.index"]], "insert() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.insert"]], "journal_mode (docarray.array.sqlite.sqliteconfig attribute)": [[60, "docarray.array.sqlite.SqliteConfig.journal_mode"]], "list_like (docarray.array.sqlite.sqliteconfig attribute)": [[60, "docarray.array.sqlite.SqliteConfig.list_like"]], "load() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.load"]], "load_binary() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.load_binary"]], "load_csv() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.load_csv"]], "load_json() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.load_json"]], "map() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.map"]], "map_batch() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.map_batch"]], "match() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.match"]], "plot_embeddings() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.plot_embeddings"]], "plot_image_sprites() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.plot_image_sprites"]], "pop() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.pop"]], "post() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.post"]], "pull() (docarray.array.sqlite.documentarraysqlite class method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.pull"]], "push() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.push"]], "reduce() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.reduce"]], "reduce_all() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.reduce_all"]], "remove() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.remove"]], "reverse() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.reverse"]], "root_id (docarray.array.sqlite.sqliteconfig attribute)": [[60, "docarray.array.sqlite.SqliteConfig.root_id"]], "sample() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.sample"]], "save() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.save"]], "save_binary() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.save_binary"]], "save_csv() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.save_csv"]], "save_embeddings_csv() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.save_embeddings_csv"]], "save_gif() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.save_gif"]], "save_json() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.save_json"]], "schema_version (docarray.array.sqlite.documentarraysqlite attribute)": [[60, "docarray.array.sqlite.DocumentArraySqlite.schema_version"]], "serialize_config (docarray.array.sqlite.sqliteconfig attribute)": [[60, "docarray.array.sqlite.SqliteConfig.serialize_config"]], "shuffle() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.shuffle"]], "split_by_tag() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.split_by_tag"]], "summary() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.summary"]], "sync() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.sync"]], "synchronous (docarray.array.sqlite.sqliteconfig attribute)": [[60, "docarray.array.sqlite.SqliteConfig.synchronous"]], "table_name (docarray.array.sqlite.sqliteconfig attribute)": [[60, "docarray.array.sqlite.SqliteConfig.table_name"]], "tensors (docarray.array.sqlite.documentarraysqlite property)": [[60, "docarray.array.sqlite.DocumentArraySqlite.tensors"]], "texts (docarray.array.sqlite.documentarraysqlite property)": [[60, "docarray.array.sqlite.DocumentArraySqlite.texts"]], "to_base64() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.to_base64"]], "to_bytes() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.to_bytes"]], "to_dataframe() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.to_dataframe"]], "to_dict() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.to_dict"]], "to_json() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.to_json"]], "to_list() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.to_list"]], "to_protobuf() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.to_protobuf"]], "to_pydantic_model() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.to_pydantic_model"]], "to_strawberry_type() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.to_strawberry_type"]], "traverse() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.traverse"]], "traverse_flat() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.traverse_flat"]], "traverse_flat_per_path() (docarray.array.sqlite.documentarraysqlite method)": [[60, "docarray.array.sqlite.DocumentArraySqlite.traverse_flat_per_path"]], "docarray.array.storage": [[61, "module-docarray.array.storage"]], "annliteconfig (class in docarray.array.storage.annlite)": [[62, "docarray.array.storage.annlite.AnnliteConfig"]], "storagemixins (class in docarray.array.storage.annlite)": [[62, "docarray.array.storage.annlite.StorageMixins"]], "type_map (docarray.array.storage.annlite.storagemixins attribute)": [[62, "docarray.array.storage.annlite.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.annlite.storagemixins method)": [[62, "docarray.array.storage.annlite.StorageMixins.append"]], "clear() (docarray.array.storage.annlite.storagemixins method)": [[62, "docarray.array.storage.annlite.StorageMixins.clear"]], "columns (docarray.array.storage.annlite.annliteconfig attribute)": [[62, "docarray.array.storage.annlite.AnnliteConfig.columns"]], "count() (docarray.array.storage.annlite.storagemixins method)": [[62, "docarray.array.storage.annlite.StorageMixins.count"]], "data_path (docarray.array.storage.annlite.annliteconfig attribute)": [[62, "docarray.array.storage.annlite.AnnliteConfig.data_path"]], "docarray.array.storage.annlite": [[62, "module-docarray.array.storage.annlite"]], "ef_construction (docarray.array.storage.annlite.annliteconfig attribute)": [[62, "docarray.array.storage.annlite.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.storage.annlite.annliteconfig attribute)": [[62, "docarray.array.storage.annlite.AnnliteConfig.ef_search"]], "extend() (docarray.array.storage.annlite.storagemixins method)": [[62, "docarray.array.storage.annlite.StorageMixins.extend"]], "index() (docarray.array.storage.annlite.storagemixins method)": [[62, "docarray.array.storage.annlite.StorageMixins.index"]], "insert() (docarray.array.storage.annlite.storagemixins method)": [[62, "docarray.array.storage.annlite.StorageMixins.insert"]], "list_like (docarray.array.storage.annlite.annliteconfig attribute)": [[62, "docarray.array.storage.annlite.AnnliteConfig.list_like"]], "max_connection (docarray.array.storage.annlite.annliteconfig attribute)": [[62, "docarray.array.storage.annlite.AnnliteConfig.max_connection"]], "metric (docarray.array.storage.annlite.annliteconfig attribute)": [[62, "docarray.array.storage.annlite.AnnliteConfig.metric"]], "n_components (docarray.array.storage.annlite.annliteconfig attribute)": [[62, "docarray.array.storage.annlite.AnnliteConfig.n_components"]], "n_dim (docarray.array.storage.annlite.annliteconfig attribute)": [[62, "docarray.array.storage.annlite.AnnliteConfig.n_dim"]], "pop() (docarray.array.storage.annlite.storagemixins method)": [[62, "docarray.array.storage.annlite.StorageMixins.pop"]], "remove() (docarray.array.storage.annlite.storagemixins method)": [[62, "docarray.array.storage.annlite.StorageMixins.remove"]], "reverse() (docarray.array.storage.annlite.storagemixins method)": [[62, "docarray.array.storage.annlite.StorageMixins.reverse"]], "root_id (docarray.array.storage.annlite.annliteconfig attribute)": [[62, "docarray.array.storage.annlite.AnnliteConfig.root_id"]], "serialize_config (docarray.array.storage.annlite.annliteconfig attribute)": [[62, "docarray.array.storage.annlite.AnnliteConfig.serialize_config"]], "sync() (docarray.array.storage.annlite.storagemixins method)": [[62, "docarray.array.storage.annlite.StorageMixins.sync"]], "annliteconfig (class in docarray.array.storage.annlite.backend)": [[63, "docarray.array.storage.annlite.backend.AnnliteConfig"]], "backendmixin (class in docarray.array.storage.annlite.backend)": [[63, "docarray.array.storage.annlite.backend.BackendMixin"]], "type_map (docarray.array.storage.annlite.backend.backendmixin attribute)": [[63, "docarray.array.storage.annlite.backend.BackendMixin.TYPE_MAP"]], "columns (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[63, "docarray.array.storage.annlite.backend.AnnliteConfig.columns"]], "data_path (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[63, "docarray.array.storage.annlite.backend.AnnliteConfig.data_path"]], "docarray.array.storage.annlite.backend": [[63, "module-docarray.array.storage.annlite.backend"]], "ef_construction (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[63, "docarray.array.storage.annlite.backend.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[63, "docarray.array.storage.annlite.backend.AnnliteConfig.ef_search"]], "list_like (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[63, "docarray.array.storage.annlite.backend.AnnliteConfig.list_like"]], "max_connection (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[63, "docarray.array.storage.annlite.backend.AnnliteConfig.max_connection"]], "metric (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[63, "docarray.array.storage.annlite.backend.AnnliteConfig.metric"]], "n_components (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[63, "docarray.array.storage.annlite.backend.AnnliteConfig.n_components"]], "n_dim (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[63, "docarray.array.storage.annlite.backend.AnnliteConfig.n_dim"]], "root_id (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[63, "docarray.array.storage.annlite.backend.AnnliteConfig.root_id"]], "serialize_config (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[63, "docarray.array.storage.annlite.backend.AnnliteConfig.serialize_config"]], "findmixin (class in docarray.array.storage.annlite.find)": [[64, "docarray.array.storage.annlite.find.FindMixin"]], "docarray.array.storage.annlite.find": [[64, "module-docarray.array.storage.annlite.find"]], "getsetdelmixin (class in docarray.array.storage.annlite.getsetdel)": [[65, "docarray.array.storage.annlite.getsetdel.GetSetDelMixin"]], "docarray.array.storage.annlite.getsetdel": [[65, "module-docarray.array.storage.annlite.getsetdel"]], "sync() (docarray.array.storage.annlite.getsetdel.getsetdelmixin method)": [[65, "docarray.array.storage.annlite.getsetdel.GetSetDelMixin.sync"]], "offsetmapping (class in docarray.array.storage.annlite.helper)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping"]], "clear() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.clear"]], "close() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.close"]], "commit() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.commit"]], "create_table() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.create_table"]], "del_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.del_at_offset"]], "del_at_offsets() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.del_at_offsets"]], "docarray.array.storage.annlite.helper": [[66, "module-docarray.array.storage.annlite.helper"]], "drop() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.drop"]], "drop_table() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.drop_table"]], "dump() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.dump"]], "execute() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.execute"]], "execute_many() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.execute_many"]], "extend_doc_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.extend_doc_ids"]], "get_all_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.get_all_ids"]], "get_id_by_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.get_id_by_offset"]], "get_ids_by_offsets() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.get_ids_by_offsets"]], "get_offset_by_id() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.get_offset_by_id"]], "get_offsets_by_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.get_offsets_by_ids"]], "insert_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.insert_at_offset"]], "load() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.load"]], "name (docarray.array.storage.annlite.helper.offsetmapping property)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.name"]], "schema (docarray.array.storage.annlite.helper.offsetmapping property)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.schema"]], "set_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.set_at_offset"]], "shift_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.shift_offset"]], "size (docarray.array.storage.annlite.helper.offsetmapping property)": [[66, "docarray.array.storage.annlite.helper.OffsetMapping.size"]], "sequencelikemixin (class in docarray.array.storage.annlite.seqlike)": [[67, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[67, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[67, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[67, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.annlite.seqlike": [[67, "module-docarray.array.storage.annlite.seqlike"]], "extend() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[67, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[67, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[67, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[67, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[67, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[67, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.reverse"]], "docarray.array.storage.base": [[68, "module-docarray.array.storage.base"]], "basebackendmixin (class in docarray.array.storage.base.backend)": [[69, "docarray.array.storage.base.backend.BaseBackendMixin"]], "type_map (docarray.array.storage.base.backend.basebackendmixin attribute)": [[69, "docarray.array.storage.base.backend.BaseBackendMixin.TYPE_MAP"]], "typemap (class in docarray.array.storage.base.backend)": [[69, "docarray.array.storage.base.backend.TypeMap"]], "converter (docarray.array.storage.base.backend.typemap property)": [[69, "docarray.array.storage.base.backend.TypeMap.converter"]], "count() (docarray.array.storage.base.backend.typemap method)": [[69, "docarray.array.storage.base.backend.TypeMap.count"]], "docarray.array.storage.base.backend": [[69, "module-docarray.array.storage.base.backend"]], "index() (docarray.array.storage.base.backend.typemap method)": [[69, "docarray.array.storage.base.backend.TypeMap.index"]], "type (docarray.array.storage.base.backend.typemap property)": [[69, "docarray.array.storage.base.backend.TypeMap.type"]], "basegetsetdelmixin (class in docarray.array.storage.base.getsetdel)": [[70, "docarray.array.storage.base.getsetdel.BaseGetSetDelMixin"]], "docarray.array.storage.base.getsetdel": [[70, "module-docarray.array.storage.base.getsetdel"]], "sync() (docarray.array.storage.base.getsetdel.basegetsetdelmixin method)": [[70, "docarray.array.storage.base.getsetdel.BaseGetSetDelMixin.sync"]], "offset2id (class in docarray.array.storage.base.helper)": [[71, "docarray.array.storage.base.helper.Offset2ID"]], "append() (docarray.array.storage.base.helper.offset2id method)": [[71, "docarray.array.storage.base.helper.Offset2ID.append"]], "clear() (docarray.array.storage.base.helper.offset2id method)": [[71, "docarray.array.storage.base.helper.Offset2ID.clear"]], "delete_by_id() (docarray.array.storage.base.helper.offset2id method)": [[71, "docarray.array.storage.base.helper.Offset2ID.delete_by_id"]], "delete_by_ids() (docarray.array.storage.base.helper.offset2id method)": [[71, "docarray.array.storage.base.helper.Offset2ID.delete_by_ids"]], "delete_by_offset() (docarray.array.storage.base.helper.offset2id method)": [[71, "docarray.array.storage.base.helper.Offset2ID.delete_by_offset"]], "docarray.array.storage.base.helper": [[71, "module-docarray.array.storage.base.helper"]], "extend() (docarray.array.storage.base.helper.offset2id method)": [[71, "docarray.array.storage.base.helper.Offset2ID.extend"]], "get_id() (docarray.array.storage.base.helper.offset2id method)": [[71, "docarray.array.storage.base.helper.Offset2ID.get_id"]], "index() (docarray.array.storage.base.helper.offset2id method)": [[71, "docarray.array.storage.base.helper.Offset2ID.index"]], "insert() (docarray.array.storage.base.helper.offset2id method)": [[71, "docarray.array.storage.base.helper.Offset2ID.insert"]], "load() (docarray.array.storage.base.helper.offset2id method)": [[71, "docarray.array.storage.base.helper.Offset2ID.load"]], "save() (docarray.array.storage.base.helper.offset2id method)": [[71, "docarray.array.storage.base.helper.Offset2ID.save"]], "update() (docarray.array.storage.base.helper.offset2id method)": [[71, "docarray.array.storage.base.helper.Offset2ID.update"]], "update_ids() (docarray.array.storage.base.helper.offset2id method)": [[71, "docarray.array.storage.base.helper.Offset2ID.update_ids"]], "basesequencelikemixin (class in docarray.array.storage.base.seqlike)": [[72, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin"]], "append() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[72, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.append"]], "clear() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[72, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.clear"]], "count() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[72, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.count"]], "docarray.array.storage.base.seqlike": [[72, "module-docarray.array.storage.base.seqlike"]], "extend() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[72, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.extend"]], "index() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[72, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.index"]], "insert() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[72, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.insert"]], "pop() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[72, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.pop"]], "remove() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[72, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[72, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.reverse"]], "elasticconfig (class in docarray.array.storage.elastic)": [[73, "docarray.array.storage.elastic.ElasticConfig"]], "max_es_returned_docs (docarray.array.storage.elastic.storagemixins attribute)": [[73, "docarray.array.storage.elastic.StorageMixins.MAX_ES_RETURNED_DOCS"]], "storagemixins (class in docarray.array.storage.elastic)": [[73, "docarray.array.storage.elastic.StorageMixins"]], "type_map (docarray.array.storage.elastic.storagemixins attribute)": [[73, "docarray.array.storage.elastic.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.elastic.storagemixins method)": [[73, "docarray.array.storage.elastic.StorageMixins.append"]], "batch_size (docarray.array.storage.elastic.elasticconfig attribute)": [[73, "docarray.array.storage.elastic.ElasticConfig.batch_size"]], "clear() (docarray.array.storage.elastic.storagemixins method)": [[73, "docarray.array.storage.elastic.StorageMixins.clear"]], "columns (docarray.array.storage.elastic.elasticconfig attribute)": [[73, "docarray.array.storage.elastic.ElasticConfig.columns"]], "count() (docarray.array.storage.elastic.storagemixins method)": [[73, "docarray.array.storage.elastic.StorageMixins.count"]], "distance (docarray.array.storage.elastic.elasticconfig attribute)": [[73, "docarray.array.storage.elastic.ElasticConfig.distance"]], "docarray.array.storage.elastic": [[73, "module-docarray.array.storage.elastic"]], "ef_construction (docarray.array.storage.elastic.elasticconfig attribute)": [[73, "docarray.array.storage.elastic.ElasticConfig.ef_construction"]], "es_config (docarray.array.storage.elastic.elasticconfig attribute)": [[73, "docarray.array.storage.elastic.ElasticConfig.es_config"]], "extend() (docarray.array.storage.elastic.storagemixins method)": [[73, "docarray.array.storage.elastic.StorageMixins.extend"]], "find() (docarray.array.storage.elastic.storagemixins method)": [[73, "docarray.array.storage.elastic.StorageMixins.find"]], "hosts (docarray.array.storage.elastic.elasticconfig attribute)": [[73, "docarray.array.storage.elastic.ElasticConfig.hosts"]], "index() (docarray.array.storage.elastic.storagemixins method)": [[73, "docarray.array.storage.elastic.StorageMixins.index"]], "index_name (docarray.array.storage.elastic.elasticconfig attribute)": [[73, "docarray.array.storage.elastic.ElasticConfig.index_name"]], "index_text (docarray.array.storage.elastic.elasticconfig attribute)": [[73, "docarray.array.storage.elastic.ElasticConfig.index_text"]], "insert() (docarray.array.storage.elastic.storagemixins method)": [[73, "docarray.array.storage.elastic.StorageMixins.insert"]], "list_like (docarray.array.storage.elastic.elasticconfig attribute)": [[73, "docarray.array.storage.elastic.ElasticConfig.list_like"]], "m (docarray.array.storage.elastic.elasticconfig attribute)": [[73, "docarray.array.storage.elastic.ElasticConfig.m"]], "n_dim (docarray.array.storage.elastic.elasticconfig attribute)": [[73, "docarray.array.storage.elastic.ElasticConfig.n_dim"]], "pop() (docarray.array.storage.elastic.storagemixins method)": [[73, "docarray.array.storage.elastic.StorageMixins.pop"]], "remove() (docarray.array.storage.elastic.storagemixins method)": [[73, "docarray.array.storage.elastic.StorageMixins.remove"]], "reverse() (docarray.array.storage.elastic.storagemixins method)": [[73, "docarray.array.storage.elastic.StorageMixins.reverse"]], "root_id (docarray.array.storage.elastic.elasticconfig attribute)": [[73, "docarray.array.storage.elastic.ElasticConfig.root_id"]], "sync() (docarray.array.storage.elastic.storagemixins method)": [[73, "docarray.array.storage.elastic.StorageMixins.sync"]], "tag_indices (docarray.array.storage.elastic.elasticconfig attribute)": [[73, "docarray.array.storage.elastic.ElasticConfig.tag_indices"]], "backendmixin (class in docarray.array.storage.elastic.backend)": [[74, "docarray.array.storage.elastic.backend.BackendMixin"]], "elasticconfig (class in docarray.array.storage.elastic.backend)": [[74, "docarray.array.storage.elastic.backend.ElasticConfig"]], "type_map (docarray.array.storage.elastic.backend.backendmixin attribute)": [[74, "docarray.array.storage.elastic.backend.BackendMixin.TYPE_MAP"]], "batch_size (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[74, "docarray.array.storage.elastic.backend.ElasticConfig.batch_size"]], "columns (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[74, "docarray.array.storage.elastic.backend.ElasticConfig.columns"]], "distance (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[74, "docarray.array.storage.elastic.backend.ElasticConfig.distance"]], "docarray.array.storage.elastic.backend": [[74, "module-docarray.array.storage.elastic.backend"]], "ef_construction (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[74, "docarray.array.storage.elastic.backend.ElasticConfig.ef_construction"]], "es_config (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[74, "docarray.array.storage.elastic.backend.ElasticConfig.es_config"]], "hosts (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[74, "docarray.array.storage.elastic.backend.ElasticConfig.hosts"]], "index_name (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[74, "docarray.array.storage.elastic.backend.ElasticConfig.index_name"]], "index_text (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[74, "docarray.array.storage.elastic.backend.ElasticConfig.index_text"]], "list_like (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[74, "docarray.array.storage.elastic.backend.ElasticConfig.list_like"]], "m (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[74, "docarray.array.storage.elastic.backend.ElasticConfig.m"]], "n_dim (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[74, "docarray.array.storage.elastic.backend.ElasticConfig.n_dim"]], "root_id (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[74, "docarray.array.storage.elastic.backend.ElasticConfig.root_id"]], "tag_indices (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[74, "docarray.array.storage.elastic.backend.ElasticConfig.tag_indices"]], "findmixin (class in docarray.array.storage.elastic.find)": [[75, "docarray.array.storage.elastic.find.FindMixin"]], "docarray.array.storage.elastic.find": [[75, "module-docarray.array.storage.elastic.find"]], "find() (docarray.array.storage.elastic.find.findmixin method)": [[75, "docarray.array.storage.elastic.find.FindMixin.find"]], "getsetdelmixin (class in docarray.array.storage.elastic.getsetdel)": [[76, "docarray.array.storage.elastic.getsetdel.GetSetDelMixin"]], "max_es_returned_docs (docarray.array.storage.elastic.getsetdel.getsetdelmixin attribute)": [[76, "docarray.array.storage.elastic.getsetdel.GetSetDelMixin.MAX_ES_RETURNED_DOCS"]], "docarray.array.storage.elastic.getsetdel": [[76, "module-docarray.array.storage.elastic.getsetdel"]], "sync() (docarray.array.storage.elastic.getsetdel.getsetdelmixin method)": [[76, "docarray.array.storage.elastic.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.elastic.seqlike)": [[77, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[77, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[77, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[77, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.elastic.seqlike": [[77, "module-docarray.array.storage.elastic.seqlike"]], "extend() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[77, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[77, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[77, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[77, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[77, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[77, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.reverse"]], "storagemixins (class in docarray.array.storage.memory)": [[78, "docarray.array.storage.memory.StorageMixins"]], "type_map (docarray.array.storage.memory.storagemixins attribute)": [[78, "docarray.array.storage.memory.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.memory.storagemixins method)": [[78, "docarray.array.storage.memory.StorageMixins.append"]], "clear() (docarray.array.storage.memory.storagemixins method)": [[78, "docarray.array.storage.memory.StorageMixins.clear"]], "count() (docarray.array.storage.memory.storagemixins method)": [[78, "docarray.array.storage.memory.StorageMixins.count"]], "docarray.array.storage.memory": [[78, "module-docarray.array.storage.memory"]], "extend() (docarray.array.storage.memory.storagemixins method)": [[78, "docarray.array.storage.memory.StorageMixins.extend"]], "index() (docarray.array.storage.memory.storagemixins method)": [[78, "docarray.array.storage.memory.StorageMixins.index"]], "insert() (docarray.array.storage.memory.storagemixins method)": [[78, "docarray.array.storage.memory.StorageMixins.insert"]], "pop() (docarray.array.storage.memory.storagemixins method)": [[78, "docarray.array.storage.memory.StorageMixins.pop"]], "remove() (docarray.array.storage.memory.storagemixins method)": [[78, "docarray.array.storage.memory.StorageMixins.remove"]], "reverse() (docarray.array.storage.memory.storagemixins method)": [[78, "docarray.array.storage.memory.StorageMixins.reverse"]], "sync() (docarray.array.storage.memory.storagemixins method)": [[78, "docarray.array.storage.memory.StorageMixins.sync"]], "backendmixin (class in docarray.array.storage.memory.backend)": [[79, "docarray.array.storage.memory.backend.BackendMixin"]], "type_map (docarray.array.storage.memory.backend.backendmixin attribute)": [[79, "docarray.array.storage.memory.backend.BackendMixin.TYPE_MAP"]], "docarray.array.storage.memory.backend": [[79, "module-docarray.array.storage.memory.backend"]], "needs_id2offset_rebuild() (in module docarray.array.storage.memory.backend)": [[79, "docarray.array.storage.memory.backend.needs_id2offset_rebuild"]], "findmixin (class in docarray.array.storage.memory.find)": [[80, "docarray.array.storage.memory.find.FindMixin"]], "docarray.array.storage.memory.find": [[80, "module-docarray.array.storage.memory.find"]], "getsetdelmixin (class in docarray.array.storage.memory.getsetdel)": [[81, "docarray.array.storage.memory.getsetdel.GetSetDelMixin"]], "docarray.array.storage.memory.getsetdel": [[81, "module-docarray.array.storage.memory.getsetdel"]], "sync() (docarray.array.storage.memory.getsetdel.getsetdelmixin method)": [[81, "docarray.array.storage.memory.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.memory.seqlike)": [[82, "docarray.array.storage.memory.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[82, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[82, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[82, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.memory.seqlike": [[82, "module-docarray.array.storage.memory.seqlike"]], "extend() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[82, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[82, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[82, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[82, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[82, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[82, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.reverse"]], "qdrantconfig (class in docarray.array.storage.qdrant)": [[88, "docarray.array.storage.qdrant.QdrantConfig"]], "storagemixins (class in docarray.array.storage.qdrant)": [[88, "docarray.array.storage.qdrant.StorageMixins"]], "type_map (docarray.array.storage.qdrant.storagemixins attribute)": [[88, "docarray.array.storage.qdrant.StorageMixins.TYPE_MAP"]], "api_key (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.api_key"]], "append() (docarray.array.storage.qdrant.storagemixins method)": [[88, "docarray.array.storage.qdrant.StorageMixins.append"]], "clear() (docarray.array.storage.qdrant.storagemixins method)": [[88, "docarray.array.storage.qdrant.StorageMixins.clear"]], "client (docarray.array.storage.qdrant.storagemixins property)": [[88, "docarray.array.storage.qdrant.StorageMixins.client"]], "collection_name (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.collection_name"]], "collection_name (docarray.array.storage.qdrant.storagemixins property)": [[88, "docarray.array.storage.qdrant.StorageMixins.collection_name"]], "collection_name_meta (docarray.array.storage.qdrant.storagemixins property)": [[88, "docarray.array.storage.qdrant.StorageMixins.collection_name_meta"]], "columns (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.columns"]], "config (docarray.array.storage.qdrant.storagemixins property)": [[88, "docarray.array.storage.qdrant.StorageMixins.config"]], "count() (docarray.array.storage.qdrant.storagemixins method)": [[88, "docarray.array.storage.qdrant.StorageMixins.count"]], "distance (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.distance"]], "distance (docarray.array.storage.qdrant.storagemixins property)": [[88, "docarray.array.storage.qdrant.StorageMixins.distance"]], "docarray.array.storage.qdrant": [[88, "module-docarray.array.storage.qdrant"]], "ef_construct (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.ef_construct"]], "extend() (docarray.array.storage.qdrant.storagemixins method)": [[88, "docarray.array.storage.qdrant.StorageMixins.extend"]], "full_scan_threshold (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.full_scan_threshold"]], "grpc_port (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.grpc_port"]], "host (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.host"]], "https (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.https"]], "index() (docarray.array.storage.qdrant.storagemixins method)": [[88, "docarray.array.storage.qdrant.StorageMixins.index"]], "insert() (docarray.array.storage.qdrant.storagemixins method)": [[88, "docarray.array.storage.qdrant.StorageMixins.insert"]], "list_like (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.list_like"]], "m (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.m"]], "n_dim (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.n_dim"]], "n_dim (docarray.array.storage.qdrant.storagemixins property)": [[88, "docarray.array.storage.qdrant.StorageMixins.n_dim"]], "pop() (docarray.array.storage.qdrant.storagemixins method)": [[88, "docarray.array.storage.qdrant.StorageMixins.pop"]], "port (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.port"]], "prefer_grpc (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.prefer_grpc"]], "remove() (docarray.array.storage.qdrant.storagemixins method)": [[88, "docarray.array.storage.qdrant.StorageMixins.remove"]], "reverse() (docarray.array.storage.qdrant.storagemixins method)": [[88, "docarray.array.storage.qdrant.StorageMixins.reverse"]], "root_id (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.root_id"]], "scan() (docarray.array.storage.qdrant.storagemixins method)": [[88, "docarray.array.storage.qdrant.StorageMixins.scan"]], "scroll_batch_size (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.scroll_batch_size"]], "scroll_batch_size (docarray.array.storage.qdrant.storagemixins property)": [[88, "docarray.array.storage.qdrant.StorageMixins.scroll_batch_size"]], "serialization_config (docarray.array.storage.qdrant.storagemixins property)": [[88, "docarray.array.storage.qdrant.StorageMixins.serialization_config"]], "serialize_config (docarray.array.storage.qdrant.qdrantconfig attribute)": [[88, "docarray.array.storage.qdrant.QdrantConfig.serialize_config"]], "serialize_config (docarray.array.storage.qdrant.storagemixins property)": [[88, "docarray.array.storage.qdrant.StorageMixins.serialize_config"]], "sync() (docarray.array.storage.qdrant.storagemixins method)": [[88, "docarray.array.storage.qdrant.StorageMixins.sync"]], "backendmixin (class in docarray.array.storage.qdrant.backend)": [[89, "docarray.array.storage.qdrant.backend.BackendMixin"]], "qdrantconfig (class in docarray.array.storage.qdrant.backend)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig"]], "type_map (docarray.array.storage.qdrant.backend.backendmixin attribute)": [[89, "docarray.array.storage.qdrant.backend.BackendMixin.TYPE_MAP"]], "api_key (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.api_key"]], "client (docarray.array.storage.qdrant.backend.backendmixin property)": [[89, "docarray.array.storage.qdrant.backend.BackendMixin.client"]], "collection_name (docarray.array.storage.qdrant.backend.backendmixin property)": [[89, "docarray.array.storage.qdrant.backend.BackendMixin.collection_name"]], "collection_name (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.collection_name"]], "columns (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.columns"]], "distance (docarray.array.storage.qdrant.backend.backendmixin property)": [[89, "docarray.array.storage.qdrant.backend.BackendMixin.distance"]], "distance (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.distance"]], "docarray.array.storage.qdrant.backend": [[89, "module-docarray.array.storage.qdrant.backend"]], "ef_construct (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.ef_construct"]], "full_scan_threshold (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.full_scan_threshold"]], "grpc_port (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.grpc_port"]], "host (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.host"]], "https (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.https"]], "list_like (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.list_like"]], "m (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.m"]], "n_dim (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.n_dim"]], "port (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.port"]], "prefer_grpc (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.prefer_grpc"]], "root_id (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.root_id"]], "scroll_batch_size (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.scroll_batch_size"]], "serialize_config (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[89, "docarray.array.storage.qdrant.backend.QdrantConfig.serialize_config"]], "findmixin (class in docarray.array.storage.qdrant.find)": [[90, "docarray.array.storage.qdrant.find.FindMixin"]], "client (docarray.array.storage.qdrant.find.findmixin property)": [[90, "docarray.array.storage.qdrant.find.FindMixin.client"]], "collection_name (docarray.array.storage.qdrant.find.findmixin property)": [[90, "docarray.array.storage.qdrant.find.FindMixin.collection_name"]], "distance (docarray.array.storage.qdrant.find.findmixin property)": [[90, "docarray.array.storage.qdrant.find.FindMixin.distance"]], "docarray.array.storage.qdrant.find": [[90, "module-docarray.array.storage.qdrant.find"]], "serialize_config (docarray.array.storage.qdrant.find.findmixin property)": [[90, "docarray.array.storage.qdrant.find.FindMixin.serialize_config"]], "getsetdelmixin (class in docarray.array.storage.qdrant.getsetdel)": [[91, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin"]], "client (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[91, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.client"]], "collection_name (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[91, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.collection_name"]], "docarray.array.storage.qdrant.getsetdel": [[91, "module-docarray.array.storage.qdrant.getsetdel"]], "n_dim (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[91, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.n_dim"]], "scan() (docarray.array.storage.qdrant.getsetdel.getsetdelmixin method)": [[91, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.scan"]], "scroll_batch_size (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[91, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.scroll_batch_size"]], "serialization_config (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[91, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.serialization_config"]], "sync() (docarray.array.storage.qdrant.getsetdel.getsetdelmixin method)": [[91, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.sync"]], "docarray.array.storage.qdrant.helper": [[92, "module-docarray.array.storage.qdrant.helper"]], "sequencelikemixin (class in docarray.array.storage.qdrant.seqlike)": [[93, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[93, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[93, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.clear"]], "client (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[93, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.client"]], "collection_name (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[93, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.collection_name"]], "config (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[93, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.config"]], "count() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[93, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.qdrant.seqlike": [[93, "module-docarray.array.storage.qdrant.seqlike"]], "extend() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[93, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[93, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[93, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[93, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[93, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[93, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.reverse"]], "redisconfig (class in docarray.array.storage.redis)": [[94, "docarray.array.storage.redis.RedisConfig"]], "storagemixins (class in docarray.array.storage.redis)": [[94, "docarray.array.storage.redis.StorageMixins"]], "type_map (docarray.array.storage.redis.storagemixins attribute)": [[94, "docarray.array.storage.redis.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.redis.storagemixins method)": [[94, "docarray.array.storage.redis.StorageMixins.append"]], "batch_size (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.batch_size"]], "block_size (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.block_size"]], "clear() (docarray.array.storage.redis.storagemixins method)": [[94, "docarray.array.storage.redis.StorageMixins.clear"]], "columns (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.columns"]], "count() (docarray.array.storage.redis.storagemixins method)": [[94, "docarray.array.storage.redis.StorageMixins.count"]], "distance (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.distance"]], "docarray.array.storage.redis": [[94, "module-docarray.array.storage.redis"]], "ef_construction (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.ef_construction"]], "ef_runtime (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.ef_runtime"]], "extend() (docarray.array.storage.redis.storagemixins method)": [[94, "docarray.array.storage.redis.StorageMixins.extend"]], "find() (docarray.array.storage.redis.storagemixins method)": [[94, "docarray.array.storage.redis.StorageMixins.find"]], "host (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.host"]], "index() (docarray.array.storage.redis.storagemixins method)": [[94, "docarray.array.storage.redis.StorageMixins.index"]], "index_name (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.index_name"]], "index_text (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.index_text"]], "initial_cap (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.initial_cap"]], "insert() (docarray.array.storage.redis.storagemixins method)": [[94, "docarray.array.storage.redis.StorageMixins.insert"]], "list_like (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.list_like"]], "m (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.m"]], "method (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.method"]], "n_dim (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.n_dim"]], "pop() (docarray.array.storage.redis.storagemixins method)": [[94, "docarray.array.storage.redis.StorageMixins.pop"]], "port (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.port"]], "redis_config (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.redis_config"]], "remove() (docarray.array.storage.redis.storagemixins method)": [[94, "docarray.array.storage.redis.StorageMixins.remove"]], "reverse() (docarray.array.storage.redis.storagemixins method)": [[94, "docarray.array.storage.redis.StorageMixins.reverse"]], "root_id (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.root_id"]], "sync() (docarray.array.storage.redis.storagemixins method)": [[94, "docarray.array.storage.redis.StorageMixins.sync"]], "tag_indices (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.tag_indices"]], "update_schema (docarray.array.storage.redis.redisconfig attribute)": [[94, "docarray.array.storage.redis.RedisConfig.update_schema"]], "backendmixin (class in docarray.array.storage.redis.backend)": [[95, "docarray.array.storage.redis.backend.BackendMixin"]], "redisconfig (class in docarray.array.storage.redis.backend)": [[95, "docarray.array.storage.redis.backend.RedisConfig"]], "type_map (docarray.array.storage.redis.backend.backendmixin attribute)": [[95, "docarray.array.storage.redis.backend.BackendMixin.TYPE_MAP"]], "batch_size (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.batch_size"]], "block_size (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.block_size"]], "columns (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.columns"]], "distance (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.distance"]], "docarray.array.storage.redis.backend": [[95, "module-docarray.array.storage.redis.backend"]], "ef_construction (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.ef_construction"]], "ef_runtime (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.ef_runtime"]], "host (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.host"]], "index_name (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.index_name"]], "index_text (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.index_text"]], "initial_cap (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.initial_cap"]], "list_like (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.list_like"]], "m (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.m"]], "method (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.method"]], "n_dim (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.n_dim"]], "port (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.port"]], "redis_config (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.redis_config"]], "root_id (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.root_id"]], "tag_indices (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.tag_indices"]], "update_schema (docarray.array.storage.redis.backend.redisconfig attribute)": [[95, "docarray.array.storage.redis.backend.RedisConfig.update_schema"]], "findmixin (class in docarray.array.storage.redis.find)": [[96, "docarray.array.storage.redis.find.FindMixin"]], "docarray.array.storage.redis.find": [[96, "module-docarray.array.storage.redis.find"]], "find() (docarray.array.storage.redis.find.findmixin method)": [[96, "docarray.array.storage.redis.find.FindMixin.find"]], "getsetdelmixin (class in docarray.array.storage.redis.getsetdel)": [[97, "docarray.array.storage.redis.getsetdel.GetSetDelMixin"]], "docarray.array.storage.redis.getsetdel": [[97, "module-docarray.array.storage.redis.getsetdel"]], "sync() (docarray.array.storage.redis.getsetdel.getsetdelmixin method)": [[97, "docarray.array.storage.redis.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.redis.seqlike)": [[98, "docarray.array.storage.redis.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[98, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[98, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[98, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.redis.seqlike": [[98, "module-docarray.array.storage.redis.seqlike"]], "extend() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[98, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[98, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[98, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[98, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[98, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[98, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.reverse"]], "docarray.array.storage.registry": [[99, "module-docarray.array.storage.registry"]], "sqliteconfig (class in docarray.array.storage.sqlite)": [[100, "docarray.array.storage.sqlite.SqliteConfig"]], "storagemixins (class in docarray.array.storage.sqlite)": [[100, "docarray.array.storage.sqlite.StorageMixins"]], "type_map (docarray.array.storage.sqlite.storagemixins attribute)": [[100, "docarray.array.storage.sqlite.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.sqlite.storagemixins method)": [[100, "docarray.array.storage.sqlite.StorageMixins.append"]], "clear() (docarray.array.storage.sqlite.storagemixins method)": [[100, "docarray.array.storage.sqlite.StorageMixins.clear"]], "conn_config (docarray.array.storage.sqlite.sqliteconfig attribute)": [[100, "docarray.array.storage.sqlite.SqliteConfig.conn_config"]], "connection (docarray.array.storage.sqlite.sqliteconfig attribute)": [[100, "docarray.array.storage.sqlite.SqliteConfig.connection"]], "count() (docarray.array.storage.sqlite.storagemixins method)": [[100, "docarray.array.storage.sqlite.StorageMixins.count"]], "docarray.array.storage.sqlite": [[100, "module-docarray.array.storage.sqlite"]], "extend() (docarray.array.storage.sqlite.storagemixins method)": [[100, "docarray.array.storage.sqlite.StorageMixins.extend"]], "index() (docarray.array.storage.sqlite.storagemixins method)": [[100, "docarray.array.storage.sqlite.StorageMixins.index"]], "insert() (docarray.array.storage.sqlite.storagemixins method)": [[100, "docarray.array.storage.sqlite.StorageMixins.insert"]], "journal_mode (docarray.array.storage.sqlite.sqliteconfig attribute)": [[100, "docarray.array.storage.sqlite.SqliteConfig.journal_mode"]], "list_like (docarray.array.storage.sqlite.sqliteconfig attribute)": [[100, "docarray.array.storage.sqlite.SqliteConfig.list_like"]], "pop() (docarray.array.storage.sqlite.storagemixins method)": [[100, "docarray.array.storage.sqlite.StorageMixins.pop"]], "remove() (docarray.array.storage.sqlite.storagemixins method)": [[100, "docarray.array.storage.sqlite.StorageMixins.remove"]], "reverse() (docarray.array.storage.sqlite.storagemixins method)": [[100, "docarray.array.storage.sqlite.StorageMixins.reverse"]], "root_id (docarray.array.storage.sqlite.sqliteconfig attribute)": [[100, "docarray.array.storage.sqlite.SqliteConfig.root_id"]], "schema_version (docarray.array.storage.sqlite.storagemixins attribute)": [[100, "docarray.array.storage.sqlite.StorageMixins.schema_version"]], "serialize_config (docarray.array.storage.sqlite.sqliteconfig attribute)": [[100, "docarray.array.storage.sqlite.SqliteConfig.serialize_config"]], "sync() (docarray.array.storage.sqlite.storagemixins method)": [[100, "docarray.array.storage.sqlite.StorageMixins.sync"]], "synchronous (docarray.array.storage.sqlite.sqliteconfig attribute)": [[100, "docarray.array.storage.sqlite.SqliteConfig.synchronous"]], "table_name (docarray.array.storage.sqlite.sqliteconfig attribute)": [[100, "docarray.array.storage.sqlite.SqliteConfig.table_name"]], "backendmixin (class in docarray.array.storage.sqlite.backend)": [[101, "docarray.array.storage.sqlite.backend.BackendMixin"]], "sqliteconfig (class in docarray.array.storage.sqlite.backend)": [[101, "docarray.array.storage.sqlite.backend.SqliteConfig"]], "type_map (docarray.array.storage.sqlite.backend.backendmixin attribute)": [[101, "docarray.array.storage.sqlite.backend.BackendMixin.TYPE_MAP"]], "conn_config (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[101, "docarray.array.storage.sqlite.backend.SqliteConfig.conn_config"]], "connection (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[101, "docarray.array.storage.sqlite.backend.SqliteConfig.connection"]], "docarray.array.storage.sqlite.backend": [[101, "module-docarray.array.storage.sqlite.backend"]], "journal_mode (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[101, "docarray.array.storage.sqlite.backend.SqliteConfig.journal_mode"]], "list_like (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[101, "docarray.array.storage.sqlite.backend.SqliteConfig.list_like"]], "root_id (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[101, "docarray.array.storage.sqlite.backend.SqliteConfig.root_id"]], "schema_version (docarray.array.storage.sqlite.backend.backendmixin attribute)": [[101, "docarray.array.storage.sqlite.backend.BackendMixin.schema_version"]], "serialize_config (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[101, "docarray.array.storage.sqlite.backend.SqliteConfig.serialize_config"]], "synchronous (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[101, "docarray.array.storage.sqlite.backend.SqliteConfig.synchronous"]], "table_name (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[101, "docarray.array.storage.sqlite.backend.SqliteConfig.table_name"]], "getsetdelmixin (class in docarray.array.storage.sqlite.getsetdel)": [[102, "docarray.array.storage.sqlite.getsetdel.GetSetDelMixin"]], "docarray.array.storage.sqlite.getsetdel": [[102, "module-docarray.array.storage.sqlite.getsetdel"]], "sync() (docarray.array.storage.sqlite.getsetdel.getsetdelmixin method)": [[102, "docarray.array.storage.sqlite.getsetdel.GetSetDelMixin.sync"]], "docarray.array.storage.sqlite.helper": [[103, "module-docarray.array.storage.sqlite.helper"]], "initialize_table() (in module docarray.array.storage.sqlite.helper)": [[103, "docarray.array.storage.sqlite.helper.initialize_table"]], "sequencelikemixin (class in docarray.array.storage.sqlite.seqlike)": [[104, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[104, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[104, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[104, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.sqlite.seqlike": [[104, "module-docarray.array.storage.sqlite.seqlike"]], "extend() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[104, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[104, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[104, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[104, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[104, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[104, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.reverse"]], "storagemixins (class in docarray.array.storage.weaviate)": [[105, "docarray.array.storage.weaviate.StorageMixins"]], "type_map (docarray.array.storage.weaviate.storagemixins attribute)": [[105, "docarray.array.storage.weaviate.StorageMixins.TYPE_MAP"]], "weaviateconfig (class in docarray.array.storage.weaviate)": [[105, "docarray.array.storage.weaviate.WeaviateConfig"]], "append() (docarray.array.storage.weaviate.storagemixins method)": [[105, "docarray.array.storage.weaviate.StorageMixins.append"]], "batch_size (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.batch_size"]], "cleanup_interval_seconds (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.cleanup_interval_seconds"]], "clear() (docarray.array.storage.weaviate.storagemixins method)": [[105, "docarray.array.storage.weaviate.StorageMixins.clear"]], "columns (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.columns"]], "count() (docarray.array.storage.weaviate.storagemixins method)": [[105, "docarray.array.storage.weaviate.StorageMixins.count"]], "distance (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.distance"]], "docarray.array.storage.weaviate": [[105, "module-docarray.array.storage.weaviate"]], "dynamic_batching (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_batching"]], "dynamic_ef_factor (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.ef"]], "ef_construction (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.ef_construction"]], "extend() (docarray.array.storage.weaviate.storagemixins method)": [[105, "docarray.array.storage.weaviate.StorageMixins.extend"]], "flat_search_cutoff (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.flat_search_cutoff"]], "host (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.host"]], "index() (docarray.array.storage.weaviate.storagemixins method)": [[105, "docarray.array.storage.weaviate.StorageMixins.index"]], "insert() (docarray.array.storage.weaviate.storagemixins method)": [[105, "docarray.array.storage.weaviate.StorageMixins.insert"]], "list_like (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.list_like"]], "max_connections (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.max_connections"]], "n_dim (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.n_dim"]], "name (docarray.array.storage.weaviate.storagemixins property)": [[105, "docarray.array.storage.weaviate.StorageMixins.name"]], "name (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.name"]], "pop() (docarray.array.storage.weaviate.storagemixins method)": [[105, "docarray.array.storage.weaviate.StorageMixins.pop"]], "port (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.port"]], "protocol (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.protocol"]], "remove() (docarray.array.storage.weaviate.storagemixins method)": [[105, "docarray.array.storage.weaviate.StorageMixins.remove"]], "reverse() (docarray.array.storage.weaviate.storagemixins method)": [[105, "docarray.array.storage.weaviate.StorageMixins.reverse"]], "root_id (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.root_id"]], "serialize_config (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.serialize_config"]], "skip (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.skip"]], "sync() (docarray.array.storage.weaviate.storagemixins method)": [[105, "docarray.array.storage.weaviate.StorageMixins.sync"]], "timeout_config (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.timeout_config"]], "vector_cache_max_objects (docarray.array.storage.weaviate.weaviateconfig attribute)": [[105, "docarray.array.storage.weaviate.WeaviateConfig.vector_cache_max_objects"]], "backendmixin (class in docarray.array.storage.weaviate.backend)": [[106, "docarray.array.storage.weaviate.backend.BackendMixin"]], "type_map (docarray.array.storage.weaviate.backend.backendmixin attribute)": [[106, "docarray.array.storage.weaviate.backend.BackendMixin.TYPE_MAP"]], "weaviateconfig (class in docarray.array.storage.weaviate.backend)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig"]], "batch_size (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.batch_size"]], "cleanup_interval_seconds (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.cleanup_interval_seconds"]], "columns (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.columns"]], "distance (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.distance"]], "docarray.array.storage.weaviate.backend": [[106, "module-docarray.array.storage.weaviate.backend"]], "dynamic_batching (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_batching"]], "dynamic_ef_factor (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.ef"]], "ef_construction (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.ef_construction"]], "flat_search_cutoff (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.flat_search_cutoff"]], "host (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.host"]], "list_like (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.list_like"]], "max_connections (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.max_connections"]], "n_dim (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.n_dim"]], "name (docarray.array.storage.weaviate.backend.backendmixin property)": [[106, "docarray.array.storage.weaviate.backend.BackendMixin.name"]], "name (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.name"]], "port (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.port"]], "protocol (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.protocol"]], "root_id (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.root_id"]], "serialize_config (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.serialize_config"]], "skip (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.skip"]], "timeout_config (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.timeout_config"]], "vector_cache_max_objects (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[106, "docarray.array.storage.weaviate.backend.WeaviateConfig.vector_cache_max_objects"]], "findmixin (class in docarray.array.storage.weaviate.find)": [[107, "docarray.array.storage.weaviate.find.FindMixin"]], "docarray.array.storage.weaviate.find": [[107, "module-docarray.array.storage.weaviate.find"]], "getsetdelmixin (class in docarray.array.storage.weaviate.getsetdel)": [[108, "docarray.array.storage.weaviate.getsetdel.GetSetDelMixin"]], "docarray.array.storage.weaviate.getsetdel": [[108, "module-docarray.array.storage.weaviate.getsetdel"]], "sync() (docarray.array.storage.weaviate.getsetdel.getsetdelmixin method)": [[108, "docarray.array.storage.weaviate.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.weaviate.seqlike)": [[109, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[109, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[109, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[109, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.weaviate.seqlike": [[109, "module-docarray.array.storage.weaviate.seqlike"]], "extend() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[109, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[109, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[109, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[109, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[109, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[109, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.reverse"]], "documentarrayweaviate (class in docarray.array.weaviate)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate"]], "type_map (docarray.array.weaviate.documentarrayweaviate attribute)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.TYPE_MAP"]], "weaviateconfig (class in docarray.array.weaviate)": [[110, "docarray.array.weaviate.WeaviateConfig"]], "append() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.append"]], "apply() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.apply"]], "apply_batch() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.apply_batch"]], "batch() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.batch"]], "batch_ids() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.batch_ids"]], "batch_size (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.batch_size"]], "blobs (docarray.array.weaviate.documentarrayweaviate property)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.blobs"]], "cleanup_interval_seconds (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.cleanup_interval_seconds"]], "clear() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.clear"]], "cloud_delete() (docarray.array.weaviate.documentarrayweaviate static method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.cloud_delete"]], "cloud_list() (docarray.array.weaviate.documentarrayweaviate static method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.cloud_list"]], "cloud_pull() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.cloud_pull"]], "cloud_push() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.cloud_push"]], "columns (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.columns"]], "contents (docarray.array.weaviate.documentarrayweaviate property)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.contents"]], "count() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.count"]], "dataloader() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.dataloader"]], "distance (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.distance"]], "docarray.array.weaviate": [[110, "module-docarray.array.weaviate"]], "dynamic_batching (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.dynamic_batching"]], "dynamic_ef_factor (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.ef"]], "ef_construction (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.ef_construction"]], "embed() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.embed"]], "embed_and_evaluate() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.embed_and_evaluate"]], "embeddings (docarray.array.weaviate.documentarrayweaviate property)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.embeddings"]], "empty() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.empty"]], "evaluate() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.evaluate"]], "extend() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.extend"]], "find() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.find"]], "flat_search_cutoff (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.flat_search_cutoff"]], "flatten() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.flatten"]], "from_base64() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.from_base64"]], "from_bytes() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.from_bytes"]], "from_csv() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.from_csv"]], "from_dataframe() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.from_dataframe"]], "from_dict() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.from_dict"]], "from_files() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.from_files"]], "from_huggingface_datasets() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.from_huggingface_datasets"]], "from_json() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.from_json"]], "from_lines() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.from_lines"]], "from_list() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.from_list"]], "from_ndarray() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.from_ndarray"]], "from_ndjson() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.from_ndjson"]], "from_protobuf() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.from_protobuf"]], "from_pydantic_model() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.from_pydantic_model"]], "from_strawberry_type() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.from_strawberry_type"]], "get_json_schema() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.get_json_schema"]], "get_vocabulary() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.get_vocabulary"]], "host (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.host"]], "index() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.index"]], "insert() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.insert"]], "list_like (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.list_like"]], "load() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.load"]], "load_binary() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.load_binary"]], "load_csv() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.load_csv"]], "load_json() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.load_json"]], "map() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.map"]], "map_batch() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.map_batch"]], "match() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.match"]], "max_connections (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.max_connections"]], "n_dim (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.n_dim"]], "name (docarray.array.weaviate.documentarrayweaviate property)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.name"]], "name (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.name"]], "plot_embeddings() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.plot_embeddings"]], "plot_image_sprites() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.plot_image_sprites"]], "pop() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.pop"]], "port (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.port"]], "post() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.post"]], "protocol (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.protocol"]], "pull() (docarray.array.weaviate.documentarrayweaviate class method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.pull"]], "push() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.push"]], "reduce() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.reduce"]], "reduce_all() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.reduce_all"]], "remove() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.remove"]], "reverse() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.reverse"]], "root_id (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.root_id"]], "sample() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.sample"]], "save() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.save"]], "save_binary() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.save_binary"]], "save_csv() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.save_csv"]], "save_embeddings_csv() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.save_embeddings_csv"]], "save_gif() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.save_gif"]], "save_json() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.save_json"]], "serialize_config (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.serialize_config"]], "shuffle() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.shuffle"]], "skip (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.skip"]], "split_by_tag() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.split_by_tag"]], "summary() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.summary"]], "sync() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.sync"]], "tensors (docarray.array.weaviate.documentarrayweaviate property)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.tensors"]], "texts (docarray.array.weaviate.documentarrayweaviate property)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.texts"]], "timeout_config (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.timeout_config"]], "to_base64() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.to_base64"]], "to_bytes() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.to_bytes"]], "to_dataframe() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.to_dataframe"]], "to_dict() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.to_dict"]], "to_json() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.to_json"]], "to_list() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.to_list"]], "to_protobuf() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.to_protobuf"]], "to_pydantic_model() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.to_pydantic_model"]], "to_strawberry_type() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.to_strawberry_type"]], "traverse() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.traverse"]], "traverse_flat() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.traverse_flat"]], "traverse_flat_per_path() (docarray.array.weaviate.documentarrayweaviate method)": [[110, "docarray.array.weaviate.DocumentArrayWeaviate.traverse_flat_per_path"]], "vector_cache_max_objects (docarray.array.weaviate.weaviateconfig attribute)": [[110, "docarray.array.weaviate.WeaviateConfig.vector_cache_max_objects"]], "basedctype (class in docarray.base)": [[111, "docarray.base.BaseDCType"]], "clear() (docarray.base.basedctype method)": [[111, "docarray.base.BaseDCType.clear"]], "copy_from() (docarray.base.basedctype method)": [[111, "docarray.base.BaseDCType.copy_from"]], "docarray.base": [[111, "module-docarray.base"]], "nbytes (docarray.base.basedctype property)": [[111, "docarray.base.BaseDCType.nbytes"]], "non_empty_fields (docarray.base.basedctype property)": [[111, "docarray.base.BaseDCType.non_empty_fields"]], "pop() (docarray.base.basedctype method)": [[111, "docarray.base.BaseDCType.pop"]], "docarray.dataclasses": [[112, "module-docarray.dataclasses"]], "audio_type (docarray.dataclasses.enums.documentmetadata attribute)": [[113, "docarray.dataclasses.enums.DocumentMetadata.AUDIO_TYPE"]], "attributetype (class in docarray.dataclasses.enums)": [[113, "docarray.dataclasses.enums.AttributeType"]], "blob_type (docarray.dataclasses.enums.documentmetadata attribute)": [[113, "docarray.dataclasses.enums.DocumentMetadata.BLOB_TYPE"]], "document (docarray.dataclasses.enums.attributetype attribute)": [[113, "docarray.dataclasses.enums.AttributeType.DOCUMENT"]], "documentmetadata (class in docarray.dataclasses.enums)": [[113, "docarray.dataclasses.enums.DocumentMetadata"]], "image_type (docarray.dataclasses.enums.documentmetadata attribute)": [[113, "docarray.dataclasses.enums.DocumentMetadata.IMAGE_TYPE"]], "image_uri (docarray.dataclasses.enums.documentmetadata attribute)": [[113, "docarray.dataclasses.enums.DocumentMetadata.IMAGE_URI"]], "iterable_document (docarray.dataclasses.enums.attributetype attribute)": [[113, "docarray.dataclasses.enums.AttributeType.ITERABLE_DOCUMENT"]], "iterable_nested (docarray.dataclasses.enums.attributetype attribute)": [[113, "docarray.dataclasses.enums.AttributeType.ITERABLE_NESTED"]], "iterable_primitive (docarray.dataclasses.enums.attributetype attribute)": [[113, "docarray.dataclasses.enums.AttributeType.ITERABLE_PRIMITIVE"]], "imagetype (class in docarray.dataclasses.enums)": [[113, "docarray.dataclasses.enums.ImageType"]], "json_type (docarray.dataclasses.enums.documentmetadata attribute)": [[113, "docarray.dataclasses.enums.DocumentMetadata.JSON_TYPE"]], "mesh_type (docarray.dataclasses.enums.documentmetadata attribute)": [[113, "docarray.dataclasses.enums.DocumentMetadata.MESH_TYPE"]], "multi_modal_schema (docarray.dataclasses.enums.documentmetadata attribute)": [[113, "docarray.dataclasses.enums.DocumentMetadata.MULTI_MODAL_SCHEMA"]], "ndarray (docarray.dataclasses.enums.imagetype attribute)": [[113, "docarray.dataclasses.enums.ImageType.NDARRAY"]], "nested (docarray.dataclasses.enums.attributetype attribute)": [[113, "docarray.dataclasses.enums.AttributeType.NESTED"]], "pil (docarray.dataclasses.enums.imagetype attribute)": [[113, "docarray.dataclasses.enums.ImageType.PIL"]], "primitive (docarray.dataclasses.enums.attributetype attribute)": [[113, "docarray.dataclasses.enums.AttributeType.PRIMITIVE"]], "uri (docarray.dataclasses.enums.imagetype attribute)": [[113, "docarray.dataclasses.enums.ImageType.URI"]], "video_type (docarray.dataclasses.enums.documentmetadata attribute)": [[113, "docarray.dataclasses.enums.DocumentMetadata.VIDEO_TYPE"]], "docarray.dataclasses.enums": [[113, "module-docarray.dataclasses.enums"]], "audio_getter() (in module docarray.dataclasses.getter)": [[114, "docarray.dataclasses.getter.audio_getter"]], "blob_getter() (in module docarray.dataclasses.getter)": [[114, "docarray.dataclasses.getter.blob_getter"]], "docarray.dataclasses.getter": [[114, "module-docarray.dataclasses.getter"]], "image_getter() (in module docarray.dataclasses.getter)": [[114, "docarray.dataclasses.getter.image_getter"]], "json_getter() (in module docarray.dataclasses.getter)": [[114, "docarray.dataclasses.getter.json_getter"]], "mesh_getter() (in module docarray.dataclasses.getter)": [[114, "docarray.dataclasses.getter.mesh_getter"]], "tabular_getter() (in module docarray.dataclasses.getter)": [[114, "docarray.dataclasses.getter.tabular_getter"]], "text_getter() (in module docarray.dataclasses.getter)": [[114, "docarray.dataclasses.getter.text_getter"]], "uri_getter() (in module docarray.dataclasses.getter)": [[114, "docarray.dataclasses.getter.uri_getter"]], "video_getter() (in module docarray.dataclasses.getter)": [[114, "docarray.dataclasses.getter.video_getter"]], "audio_setter() (in module docarray.dataclasses.setter)": [[115, "docarray.dataclasses.setter.audio_setter"]], "blob_setter() (in module docarray.dataclasses.setter)": [[115, "docarray.dataclasses.setter.blob_setter"]], "docarray.dataclasses.setter": [[115, "module-docarray.dataclasses.setter"]], "image_setter() (in module docarray.dataclasses.setter)": [[115, "docarray.dataclasses.setter.image_setter"]], "json_setter() (in module docarray.dataclasses.setter)": [[115, "docarray.dataclasses.setter.json_setter"]], "mesh_setter() (in module docarray.dataclasses.setter)": [[115, "docarray.dataclasses.setter.mesh_setter"]], "tabular_setter() (in module docarray.dataclasses.setter)": [[115, "docarray.dataclasses.setter.tabular_setter"]], "text_setter() (in module docarray.dataclasses.setter)": [[115, "docarray.dataclasses.setter.text_setter"]], "uri_setter() (in module docarray.dataclasses.setter)": [[115, "docarray.dataclasses.setter.uri_setter"]], "video_setter() (in module docarray.dataclasses.setter)": [[115, "docarray.dataclasses.setter.video_setter"]], "dataclass() (in module docarray.dataclasses.types)": [[116, "docarray.dataclasses.types.dataclass"]], "docarray.dataclasses.types": [[116, "module-docarray.dataclasses.types"]], "field() (in module docarray.dataclasses.types)": [[116, "docarray.dataclasses.types.field"]], "is_multimodal() (in module docarray.dataclasses.types)": [[116, "docarray.dataclasses.types.is_multimodal"]], "document (class in docarray.document)": [[117, "docarray.document.Document"]], "adjacency (docarray.document.document property)": [[117, "docarray.document.Document.adjacency"]], "blob (docarray.document.document property)": [[117, "docarray.document.Document.blob"]], "chunks (docarray.document.document property)": [[117, "docarray.document.Document.chunks"]], "clear() (docarray.document.document method)": [[117, "docarray.document.Document.clear"]], "content (docarray.document.document property)": [[117, "docarray.document.Document.content"]], "content_hash (docarray.document.document property)": [[117, "docarray.document.Document.content_hash"]], "content_type (docarray.document.document property)": [[117, "docarray.document.Document.content_type"]], "convert_blob_to_datauri() (docarray.document.document method)": [[117, "docarray.document.Document.convert_blob_to_datauri"]], "convert_blob_to_image_tensor() (docarray.document.document method)": [[117, "docarray.document.Document.convert_blob_to_image_tensor"]], "convert_blob_to_tensor() (docarray.document.document method)": [[117, "docarray.document.Document.convert_blob_to_tensor"]], "convert_content_to_datauri() (docarray.document.document method)": [[117, "docarray.document.Document.convert_content_to_datauri"]], "convert_image_tensor_to_blob() (docarray.document.document method)": [[117, "docarray.document.Document.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.document method)": [[117, "docarray.document.Document.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.document method)": [[117, "docarray.document.Document.convert_image_tensor_to_uri"]], "convert_tensor_to_blob() (docarray.document.document method)": [[117, "docarray.document.Document.convert_tensor_to_blob"]], "convert_tensor_to_text() (docarray.document.document method)": [[117, "docarray.document.Document.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.document method)": [[117, "docarray.document.Document.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.document method)": [[117, "docarray.document.Document.convert_text_to_tensor"]], "convert_uri_to_datauri() (docarray.document.document method)": [[117, "docarray.document.Document.convert_uri_to_datauri"]], "copy_from() (docarray.document.document method)": [[117, "docarray.document.Document.copy_from"]], "display() (docarray.document.document method)": [[117, "docarray.document.Document.display"]], "display_point_cloud_tensor() (docarray.document.document method)": [[117, "docarray.document.Document.display_point_cloud_tensor"]], "display_rgbd_tensor() (docarray.document.document method)": [[117, "docarray.document.Document.display_rgbd_tensor"]], "display_tensor() (docarray.document.document method)": [[117, "docarray.document.Document.display_tensor"]], "display_uri() (docarray.document.document method)": [[117, "docarray.document.Document.display_uri"]], "display_vertices_and_faces() (docarray.document.document method)": [[117, "docarray.document.Document.display_vertices_and_faces"]], "docarray.document": [[117, "module-docarray.document"]], "embed() (docarray.document.document method)": [[117, "docarray.document.Document.embed"]], "embed_feature_hashing() (docarray.document.document method)": [[117, "docarray.document.Document.embed_feature_hashing"]], "embedding (docarray.document.document property)": [[117, "docarray.document.Document.embedding"]], "evaluations (docarray.document.document property)": [[117, "docarray.document.Document.evaluations"]], "from_base64() (docarray.document.document class method)": [[117, "docarray.document.Document.from_base64"]], "from_bytes() (docarray.document.document class method)": [[117, "docarray.document.Document.from_bytes"]], "from_dict() (docarray.document.document class method)": [[117, "docarray.document.Document.from_dict"]], "from_json() (docarray.document.document class method)": [[117, "docarray.document.Document.from_json"]], "from_protobuf() (docarray.document.document class method)": [[117, "docarray.document.Document.from_protobuf"]], "from_pydantic_model() (docarray.document.document class method)": [[117, "docarray.document.Document.from_pydantic_model"]], "from_strawberry_type() (docarray.document.document class method)": [[117, "docarray.document.Document.from_strawberry_type"]], "generator_from_webcam() (docarray.document.document class method)": [[117, "docarray.document.Document.generator_from_webcam"]], "get_json_schema() (docarray.document.document class method)": [[117, "docarray.document.Document.get_json_schema"]], "get_multi_modal_attribute() (docarray.document.document method)": [[117, "docarray.document.Document.get_multi_modal_attribute"]], "get_vocabulary() (docarray.document.document method)": [[117, "docarray.document.Document.get_vocabulary"]], "granularity (docarray.document.document property)": [[117, "docarray.document.Document.granularity"]], "id (docarray.document.document property)": [[117, "docarray.document.Document.id"]], "is_multimodal (docarray.document.document property)": [[117, "docarray.document.Document.is_multimodal"]], "load_pil_image_to_datauri() (docarray.document.document method)": [[117, "docarray.document.Document.load_pil_image_to_datauri"]], "load_uri_to_audio_tensor() (docarray.document.document method)": [[117, "docarray.document.Document.load_uri_to_audio_tensor"]], "load_uri_to_blob() (docarray.document.document method)": [[117, "docarray.document.Document.load_uri_to_blob"]], "load_uri_to_image_tensor() (docarray.document.document method)": [[117, "docarray.document.Document.load_uri_to_image_tensor"]], "load_uri_to_point_cloud_tensor() (docarray.document.document method)": [[117, "docarray.document.Document.load_uri_to_point_cloud_tensor"]], "load_uri_to_text() (docarray.document.document method)": [[117, "docarray.document.Document.load_uri_to_text"]], "load_uri_to_vertices_and_faces() (docarray.document.document method)": [[117, "docarray.document.Document.load_uri_to_vertices_and_faces"]], "load_uri_to_video_tensor() (docarray.document.document method)": [[117, "docarray.document.Document.load_uri_to_video_tensor"]], "load_uris_to_rgbd_tensor() (docarray.document.document method)": [[117, "docarray.document.Document.load_uris_to_rgbd_tensor"]], "load_vertices_and_faces_to_point_cloud() (docarray.document.document method)": [[117, "docarray.document.Document.load_vertices_and_faces_to_point_cloud"]], "location (docarray.document.document property)": [[117, "docarray.document.Document.location"]], "match() (docarray.document.document method)": [[117, "docarray.document.Document.match"]], "matches (docarray.document.document property)": [[117, "docarray.document.Document.matches"]], "mime_type (docarray.document.document property)": [[117, "docarray.document.Document.mime_type"]], "modality (docarray.document.document property)": [[117, "docarray.document.Document.modality"]], "nbytes (docarray.document.document property)": [[117, "docarray.document.Document.nbytes"]], "non_empty_fields (docarray.document.document property)": [[117, "docarray.document.Document.non_empty_fields"]], "offset (docarray.document.document property)": [[117, "docarray.document.Document.offset"]], "parent_id (docarray.document.document property)": [[117, "docarray.document.Document.parent_id"]], "plot_matches_sprites() (docarray.document.document method)": [[117, "docarray.document.Document.plot_matches_sprites"]], "pop() (docarray.document.document method)": [[117, "docarray.document.Document.pop"]], "post() (docarray.document.document method)": [[117, "docarray.document.Document.post"]], "save_audio_tensor_to_file() (docarray.document.document method)": [[117, "docarray.document.Document.save_audio_tensor_to_file"]], "save_blob_to_file() (docarray.document.document method)": [[117, "docarray.document.Document.save_blob_to_file"]], "save_image_tensor_to_file() (docarray.document.document method)": [[117, "docarray.document.Document.save_image_tensor_to_file"]], "save_uri_to_file() (docarray.document.document method)": [[117, "docarray.document.Document.save_uri_to_file"]], "save_video_tensor_to_file() (docarray.document.document method)": [[117, "docarray.document.Document.save_video_tensor_to_file"]], "scores (docarray.document.document property)": [[117, "docarray.document.Document.scores"]], "set_image_tensor_channel_axis() (docarray.document.document method)": [[117, "docarray.document.Document.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.document method)": [[117, "docarray.document.Document.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.document method)": [[117, "docarray.document.Document.set_image_tensor_normalization"]], "set_image_tensor_resample() (docarray.document.document method)": [[117, "docarray.document.Document.set_image_tensor_resample"]], "set_image_tensor_shape() (docarray.document.document method)": [[117, "docarray.document.Document.set_image_tensor_shape"]], "set_multi_modal_attribute() (docarray.document.document method)": [[117, "docarray.document.Document.set_multi_modal_attribute"]], "summary() (docarray.document.document method)": [[117, "docarray.document.Document.summary"]], "tags (docarray.document.document property)": [[117, "docarray.document.Document.tags"]], "tensor (docarray.document.document property)": [[117, "docarray.document.Document.tensor"]], "text (docarray.document.document property)": [[117, "docarray.document.Document.text"]], "to_base64() (docarray.document.document method)": [[117, "docarray.document.Document.to_base64"]], "to_bytes() (docarray.document.document method)": [[117, "docarray.document.Document.to_bytes"]], "to_dict() (docarray.document.document method)": [[117, "docarray.document.Document.to_dict"]], "to_json() (docarray.document.document method)": [[117, "docarray.document.Document.to_json"]], "to_protobuf() (docarray.document.document method)": [[117, "docarray.document.Document.to_protobuf"]], "to_pydantic_model() (docarray.document.document method)": [[117, "docarray.document.Document.to_pydantic_model"]], "to_strawberry_type() (docarray.document.document method)": [[117, "docarray.document.Document.to_strawberry_type"]], "uri (docarray.document.document property)": [[117, "docarray.document.Document.uri"]], "weight (docarray.document.document property)": [[117, "docarray.document.Document.weight"]], "documentdata (class in docarray.document.data)": [[118, "docarray.document.data.DocumentData"]], "adjacency (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.adjacency"]], "blob (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.blob"]], "chunks (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.chunks"]], "content (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.content"]], "docarray.document.data": [[118, "module-docarray.document.data"]], "embedding (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.embedding"]], "evaluations (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.evaluations"]], "granularity (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.granularity"]], "id (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.id"]], "location (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.location"]], "matches (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.matches"]], "mime_type (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.mime_type"]], "modality (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.modality"]], "offset (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.offset"]], "parent_id (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.parent_id"]], "scores (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.scores"]], "tags (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.tags"]], "tensor (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.tensor"]], "text (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.text"]], "uri (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.uri"]], "weight (docarray.document.data.documentdata attribute)": [[118, "docarray.document.data.DocumentData.weight"]], "docarray.document.generators": [[119, "module-docarray.document.generators"]], "from_csv() (in module docarray.document.generators)": [[119, "docarray.document.generators.from_csv"]], "from_files() (in module docarray.document.generators)": [[119, "docarray.document.generators.from_files"]], "from_huggingface_datasets() (in module docarray.document.generators)": [[119, "docarray.document.generators.from_huggingface_datasets"]], "from_lines() (in module docarray.document.generators)": [[119, "docarray.document.generators.from_lines"]], "from_ndarray() (in module docarray.document.generators)": [[119, "docarray.document.generators.from_ndarray"]], "from_ndjson() (in module docarray.document.generators)": [[119, "docarray.document.generators.from_ndjson"]], "allmixins (class in docarray.document.mixins)": [[120, "docarray.document.mixins.AllMixins"]], "adjacency (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.adjacency"]], "blob (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.blob"]], "chunks (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.chunks"]], "content (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.content"]], "content_hash (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.content_hash"]], "content_type (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.content_type"]], "convert_blob_to_datauri() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.convert_blob_to_datauri"]], "convert_blob_to_image_tensor() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.convert_blob_to_image_tensor"]], "convert_blob_to_tensor() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.convert_blob_to_tensor"]], "convert_content_to_datauri() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.convert_content_to_datauri"]], "convert_image_tensor_to_blob() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.convert_image_tensor_to_uri"]], "convert_tensor_to_blob() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.convert_tensor_to_blob"]], "convert_tensor_to_text() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.convert_text_to_tensor"]], "convert_uri_to_datauri() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.convert_uri_to_datauri"]], "display() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.display"]], "display_point_cloud_tensor() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.display_point_cloud_tensor"]], "display_rgbd_tensor() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.display_rgbd_tensor"]], "display_tensor() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.display_tensor"]], "display_uri() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.display_uri"]], "display_vertices_and_faces() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.display_vertices_and_faces"]], "docarray.document.mixins": [[120, "module-docarray.document.mixins"]], "embed() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.embed"]], "embed_feature_hashing() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.embed_feature_hashing"]], "embedding (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.embedding"]], "evaluations (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.evaluations"]], "from_base64() (docarray.document.mixins.allmixins class method)": [[120, "docarray.document.mixins.AllMixins.from_base64"]], "from_bytes() (docarray.document.mixins.allmixins class method)": [[120, "docarray.document.mixins.AllMixins.from_bytes"]], "from_dict() (docarray.document.mixins.allmixins class method)": [[120, "docarray.document.mixins.AllMixins.from_dict"]], "from_json() (docarray.document.mixins.allmixins class method)": [[120, "docarray.document.mixins.AllMixins.from_json"]], "from_protobuf() (docarray.document.mixins.allmixins class method)": [[120, "docarray.document.mixins.AllMixins.from_protobuf"]], "from_pydantic_model() (docarray.document.mixins.allmixins class method)": [[120, "docarray.document.mixins.AllMixins.from_pydantic_model"]], "from_strawberry_type() (docarray.document.mixins.allmixins class method)": [[120, "docarray.document.mixins.AllMixins.from_strawberry_type"]], "generator_from_webcam() (docarray.document.mixins.allmixins class method)": [[120, "docarray.document.mixins.AllMixins.generator_from_webcam"]], "get_json_schema() (docarray.document.mixins.allmixins class method)": [[120, "docarray.document.mixins.AllMixins.get_json_schema"]], "get_multi_modal_attribute() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.get_multi_modal_attribute"]], "get_vocabulary() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.get_vocabulary"]], "granularity (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.granularity"]], "id (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.id"]], "is_multimodal (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.is_multimodal"]], "load_pil_image_to_datauri() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.load_pil_image_to_datauri"]], "load_uri_to_audio_tensor() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.load_uri_to_audio_tensor"]], "load_uri_to_blob() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.load_uri_to_blob"]], "load_uri_to_image_tensor() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.load_uri_to_image_tensor"]], "load_uri_to_point_cloud_tensor() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.load_uri_to_point_cloud_tensor"]], "load_uri_to_text() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.load_uri_to_text"]], "load_uri_to_vertices_and_faces() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.load_uri_to_vertices_and_faces"]], "load_uri_to_video_tensor() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.load_uri_to_video_tensor"]], "load_uris_to_rgbd_tensor() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.load_uris_to_rgbd_tensor"]], "load_vertices_and_faces_to_point_cloud() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.load_vertices_and_faces_to_point_cloud"]], "location (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.location"]], "match() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.match"]], "matches (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.matches"]], "mime_type (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.mime_type"]], "modality (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.modality"]], "offset (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.offset"]], "parent_id (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.parent_id"]], "plot_matches_sprites() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.plot_matches_sprites"]], "post() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.post"]], "save_audio_tensor_to_file() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.save_audio_tensor_to_file"]], "save_blob_to_file() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.save_blob_to_file"]], "save_image_tensor_to_file() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.save_image_tensor_to_file"]], "save_uri_to_file() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.save_uri_to_file"]], "save_video_tensor_to_file() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.save_video_tensor_to_file"]], "scores (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.scores"]], "set_image_tensor_channel_axis() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.set_image_tensor_normalization"]], "set_image_tensor_resample() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.set_image_tensor_resample"]], "set_image_tensor_shape() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.set_image_tensor_shape"]], "set_multi_modal_attribute() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.set_multi_modal_attribute"]], "summary() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.summary"]], "tags (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.tags"]], "tensor (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.tensor"]], "text (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.text"]], "to_base64() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.to_base64"]], "to_bytes() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.to_bytes"]], "to_dict() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.to_dict"]], "to_json() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.to_json"]], "to_protobuf() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.to_protobuf"]], "to_pydantic_model() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.to_pydantic_model"]], "to_strawberry_type() (docarray.document.mixins.allmixins method)": [[120, "docarray.document.mixins.AllMixins.to_strawberry_type"]], "uri (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.uri"]], "weight (docarray.document.mixins.allmixins property)": [[120, "docarray.document.mixins.AllMixins.weight"]], "getattributesmixin (class in docarray.document.mixins.attribute)": [[121, "docarray.document.mixins.attribute.GetAttributesMixin"]], "docarray.document.mixins.attribute": [[121, "module-docarray.document.mixins.attribute"]], "audiodatamixin (class in docarray.document.mixins.audio)": [[122, "docarray.document.mixins.audio.AudioDataMixin"]], "docarray.document.mixins.audio": [[122, "module-docarray.document.mixins.audio"]], "load_uri_to_audio_tensor() (docarray.document.mixins.audio.audiodatamixin method)": [[122, "docarray.document.mixins.audio.AudioDataMixin.load_uri_to_audio_tensor"]], "save_audio_tensor_to_file() (docarray.document.mixins.audio.audiodatamixin method)": [[122, "docarray.document.mixins.audio.AudioDataMixin.save_audio_tensor_to_file"]], "blobdatamixin (class in docarray.document.mixins.blob)": [[123, "docarray.document.mixins.blob.BlobDataMixin"]], "convert_blob_to_datauri() (docarray.document.mixins.blob.blobdatamixin method)": [[123, "docarray.document.mixins.blob.BlobDataMixin.convert_blob_to_datauri"]], "docarray.document.mixins.blob": [[123, "module-docarray.document.mixins.blob"]], "load_uri_to_blob() (docarray.document.mixins.blob.blobdatamixin method)": [[123, "docarray.document.mixins.blob.BlobDataMixin.load_uri_to_blob"]], "save_blob_to_file() (docarray.document.mixins.blob.blobdatamixin method)": [[123, "docarray.document.mixins.blob.BlobDataMixin.save_blob_to_file"]], "contentpropertymixin (class in docarray.document.mixins.content)": [[124, "docarray.document.mixins.content.ContentPropertyMixin"]], "content_hash (docarray.document.mixins.content.contentpropertymixin property)": [[124, "docarray.document.mixins.content.ContentPropertyMixin.content_hash"]], "convert_content_to_datauri() (docarray.document.mixins.content.contentpropertymixin method)": [[124, "docarray.document.mixins.content.ContentPropertyMixin.convert_content_to_datauri"]], "docarray.document.mixins.content": [[124, "module-docarray.document.mixins.content"]], "convertmixin (class in docarray.document.mixins.convert)": [[125, "docarray.document.mixins.convert.ConvertMixin"]], "convert_blob_to_tensor() (docarray.document.mixins.convert.convertmixin method)": [[125, "docarray.document.mixins.convert.ConvertMixin.convert_blob_to_tensor"]], "convert_tensor_to_blob() (docarray.document.mixins.convert.convertmixin method)": [[125, "docarray.document.mixins.convert.ConvertMixin.convert_tensor_to_blob"]], "convert_uri_to_datauri() (docarray.document.mixins.convert.convertmixin method)": [[125, "docarray.document.mixins.convert.ConvertMixin.convert_uri_to_datauri"]], "docarray.document.mixins.convert": [[125, "module-docarray.document.mixins.convert"]], "urifilemixin (class in docarray.document.mixins.dump)": [[126, "docarray.document.mixins.dump.UriFileMixin"]], "docarray.document.mixins.dump": [[126, "module-docarray.document.mixins.dump"]], "save_uri_to_file() (docarray.document.mixins.dump.urifilemixin method)": [[126, "docarray.document.mixins.dump.UriFileMixin.save_uri_to_file"]], "featurehashmixin (class in docarray.document.mixins.featurehash)": [[127, "docarray.document.mixins.featurehash.FeatureHashMixin"]], "docarray.document.mixins.featurehash": [[127, "module-docarray.document.mixins.featurehash"]], "embed_feature_hashing() (docarray.document.mixins.featurehash.featurehashmixin method)": [[127, "docarray.document.mixins.featurehash.FeatureHashMixin.embed_feature_hashing"]], "docarray.document.mixins.helper": [[128, "module-docarray.document.mixins.helper"]], "imagedatamixin (class in docarray.document.mixins.image)": [[129, "docarray.document.mixins.image.ImageDataMixin"]], "convert_blob_to_image_tensor() (docarray.document.mixins.image.imagedatamixin method)": [[129, "docarray.document.mixins.image.ImageDataMixin.convert_blob_to_image_tensor"]], "convert_image_tensor_to_blob() (docarray.document.mixins.image.imagedatamixin method)": [[129, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.mixins.image.imagedatamixin method)": [[129, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.mixins.image.imagedatamixin method)": [[129, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_uri"]], "docarray.document.mixins.image": [[129, "module-docarray.document.mixins.image"]], "load_pil_image_to_datauri() (docarray.document.mixins.image.imagedatamixin method)": [[129, "docarray.document.mixins.image.ImageDataMixin.load_pil_image_to_datauri"]], "load_uri_to_image_tensor() (docarray.document.mixins.image.imagedatamixin method)": [[129, "docarray.document.mixins.image.ImageDataMixin.load_uri_to_image_tensor"]], "save_image_tensor_to_file() (docarray.document.mixins.image.imagedatamixin method)": [[129, "docarray.document.mixins.image.ImageDataMixin.save_image_tensor_to_file"]], "set_image_tensor_channel_axis() (docarray.document.mixins.image.imagedatamixin method)": [[129, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.mixins.image.imagedatamixin method)": [[129, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.mixins.image.imagedatamixin method)": [[129, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_normalization"]], "set_image_tensor_resample() (docarray.document.mixins.image.imagedatamixin method)": [[129, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_resample"]], "set_image_tensor_shape() (docarray.document.mixins.image.imagedatamixin method)": [[129, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_shape"]], "faces (docarray.document.mixins.mesh.mesh attribute)": [[130, "docarray.document.mixins.mesh.Mesh.FACES"]], "file_extensions (docarray.document.mixins.mesh.mesh attribute)": [[130, "docarray.document.mixins.mesh.Mesh.FILE_EXTENSIONS"]], "mesh (class in docarray.document.mixins.mesh)": [[130, "docarray.document.mixins.mesh.Mesh"]], "meshdatamixin (class in docarray.document.mixins.mesh)": [[130, "docarray.document.mixins.mesh.MeshDataMixin"]], "vertices (docarray.document.mixins.mesh.mesh attribute)": [[130, "docarray.document.mixins.mesh.Mesh.VERTICES"]], "docarray.document.mixins.mesh": [[130, "module-docarray.document.mixins.mesh"]], "load_uri_to_point_cloud_tensor() (docarray.document.mixins.mesh.meshdatamixin method)": [[130, "docarray.document.mixins.mesh.MeshDataMixin.load_uri_to_point_cloud_tensor"]], "load_uri_to_vertices_and_faces() (docarray.document.mixins.mesh.meshdatamixin method)": [[130, "docarray.document.mixins.mesh.MeshDataMixin.load_uri_to_vertices_and_faces"]], "load_uris_to_rgbd_tensor() (docarray.document.mixins.mesh.meshdatamixin method)": [[130, "docarray.document.mixins.mesh.MeshDataMixin.load_uris_to_rgbd_tensor"]], "load_vertices_and_faces_to_point_cloud() (docarray.document.mixins.mesh.meshdatamixin method)": [[130, "docarray.document.mixins.mesh.MeshDataMixin.load_vertices_and_faces_to_point_cloud"]], "multimodalmixin (class in docarray.document.mixins.multimodal)": [[131, "docarray.document.mixins.multimodal.MultiModalMixin"]], "docarray.document.mixins.multimodal": [[131, "module-docarray.document.mixins.multimodal"]], "get_multi_modal_attribute() (docarray.document.mixins.multimodal.multimodalmixin method)": [[131, "docarray.document.mixins.multimodal.MultiModalMixin.get_multi_modal_attribute"]], "is_multimodal (docarray.document.mixins.multimodal.multimodalmixin property)": [[131, "docarray.document.mixins.multimodal.MultiModalMixin.is_multimodal"]], "set_multi_modal_attribute() (docarray.document.mixins.multimodal.multimodalmixin method)": [[131, "docarray.document.mixins.multimodal.MultiModalMixin.set_multi_modal_attribute"]], "plotmixin (class in docarray.document.mixins.plot)": [[132, "docarray.document.mixins.plot.PlotMixin"]], "display() (docarray.document.mixins.plot.plotmixin method)": [[132, "docarray.document.mixins.plot.PlotMixin.display"]], "display_point_cloud_tensor() (docarray.document.mixins.plot.plotmixin method)": [[132, "docarray.document.mixins.plot.PlotMixin.display_point_cloud_tensor"]], "display_rgbd_tensor() (docarray.document.mixins.plot.plotmixin method)": [[132, "docarray.document.mixins.plot.PlotMixin.display_rgbd_tensor"]], "display_tensor() (docarray.document.mixins.plot.plotmixin method)": [[132, "docarray.document.mixins.plot.PlotMixin.display_tensor"]], "display_uri() (docarray.document.mixins.plot.plotmixin method)": [[132, "docarray.document.mixins.plot.PlotMixin.display_uri"]], "display_vertices_and_faces() (docarray.document.mixins.plot.plotmixin method)": [[132, "docarray.document.mixins.plot.PlotMixin.display_vertices_and_faces"]], "docarray.document.mixins.plot": [[132, "module-docarray.document.mixins.plot"]], "plot_matches_sprites() (docarray.document.mixins.plot.plotmixin method)": [[132, "docarray.document.mixins.plot.PlotMixin.plot_matches_sprites"]], "summary() (docarray.document.mixins.plot.plotmixin method)": [[132, "docarray.document.mixins.plot.PlotMixin.summary"]], "portingmixin (class in docarray.document.mixins.porting)": [[133, "docarray.document.mixins.porting.PortingMixin"]], "docarray.document.mixins.porting": [[133, "module-docarray.document.mixins.porting"]], "from_base64() (docarray.document.mixins.porting.portingmixin class method)": [[133, "docarray.document.mixins.porting.PortingMixin.from_base64"]], "from_bytes() (docarray.document.mixins.porting.portingmixin class method)": [[133, "docarray.document.mixins.porting.PortingMixin.from_bytes"]], "from_dict() (docarray.document.mixins.porting.portingmixin class method)": [[133, "docarray.document.mixins.porting.PortingMixin.from_dict"]], "from_json() (docarray.document.mixins.porting.portingmixin class method)": [[133, "docarray.document.mixins.porting.PortingMixin.from_json"]], "to_base64() (docarray.document.mixins.porting.portingmixin method)": [[133, "docarray.document.mixins.porting.PortingMixin.to_base64"]], "to_bytes() (docarray.document.mixins.porting.portingmixin method)": [[133, "docarray.document.mixins.porting.PortingMixin.to_bytes"]], "to_dict() (docarray.document.mixins.porting.portingmixin method)": [[133, "docarray.document.mixins.porting.PortingMixin.to_dict"]], "to_json() (docarray.document.mixins.porting.portingmixin method)": [[133, "docarray.document.mixins.porting.PortingMixin.to_json"]], "propertymixin (class in docarray.document.mixins.property)": [[134, "docarray.document.mixins.property.PropertyMixin"]], "adjacency (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.adjacency"]], "blob (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.blob"]], "chunks (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.chunks"]], "content (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.content"]], "content_type (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.content_type"]], "docarray.document.mixins.property": [[134, "module-docarray.document.mixins.property"]], "embedding (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.embedding"]], "evaluations (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.evaluations"]], "granularity (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.granularity"]], "id (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.id"]], "location (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.location"]], "matches (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.matches"]], "mime_type (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.mime_type"]], "modality (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.modality"]], "offset (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.offset"]], "parent_id (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.parent_id"]], "scores (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.scores"]], "tags (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.tags"]], "tensor (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.tensor"]], "text (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.text"]], "uri (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.uri"]], "weight (docarray.document.mixins.property.propertymixin property)": [[134, "docarray.document.mixins.property.PropertyMixin.weight"]], "protobufmixin (class in docarray.document.mixins.protobuf)": [[135, "docarray.document.mixins.protobuf.ProtobufMixin"]], "docarray.document.mixins.protobuf": [[135, "module-docarray.document.mixins.protobuf"]], "from_protobuf() (docarray.document.mixins.protobuf.protobufmixin class method)": [[135, "docarray.document.mixins.protobuf.ProtobufMixin.from_protobuf"]], "to_protobuf() (docarray.document.mixins.protobuf.protobufmixin method)": [[135, "docarray.document.mixins.protobuf.ProtobufMixin.to_protobuf"]], "pydanticmixin (class in docarray.document.mixins.pydantic)": [[136, "docarray.document.mixins.pydantic.PydanticMixin"]], "docarray.document.mixins.pydantic": [[136, "module-docarray.document.mixins.pydantic"]], "from_pydantic_model() (docarray.document.mixins.pydantic.pydanticmixin class method)": [[136, "docarray.document.mixins.pydantic.PydanticMixin.from_pydantic_model"]], "get_json_schema() (docarray.document.mixins.pydantic.pydanticmixin class method)": [[136, "docarray.document.mixins.pydantic.PydanticMixin.get_json_schema"]], "to_pydantic_model() (docarray.document.mixins.pydantic.pydanticmixin method)": [[136, "docarray.document.mixins.pydantic.PydanticMixin.to_pydantic_model"]], "colorboxembedding (class in docarray.document.mixins.rich_embedding)": [[137, "docarray.document.mixins.rich_embedding.ColorBoxEmbedding"]], "docarray.document.mixins.rich_embedding": [[137, "module-docarray.document.mixins.rich_embedding"]], "strawberrymixin (class in docarray.document.mixins.strawberry)": [[138, "docarray.document.mixins.strawberry.StrawberryMixin"]], "docarray.document.mixins.strawberry": [[138, "module-docarray.document.mixins.strawberry"]], "from_strawberry_type() (docarray.document.mixins.strawberry.strawberrymixin class method)": [[138, "docarray.document.mixins.strawberry.StrawberryMixin.from_strawberry_type"]], "to_strawberry_type() (docarray.document.mixins.strawberry.strawberrymixin method)": [[138, "docarray.document.mixins.strawberry.StrawberryMixin.to_strawberry_type"]], "singletonsugarmixin (class in docarray.document.mixins.sugar)": [[139, "docarray.document.mixins.sugar.SingletonSugarMixin"]], "docarray.document.mixins.sugar": [[139, "module-docarray.document.mixins.sugar"]], "embed() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[139, "docarray.document.mixins.sugar.SingletonSugarMixin.embed"]], "match() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[139, "docarray.document.mixins.sugar.SingletonSugarMixin.match"]], "post() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[139, "docarray.document.mixins.sugar.SingletonSugarMixin.post"]], "textdatamixin (class in docarray.document.mixins.text)": [[140, "docarray.document.mixins.text.TextDataMixin"]], "convert_tensor_to_text() (docarray.document.mixins.text.textdatamixin method)": [[140, "docarray.document.mixins.text.TextDataMixin.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.mixins.text.textdatamixin method)": [[140, "docarray.document.mixins.text.TextDataMixin.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.mixins.text.textdatamixin method)": [[140, "docarray.document.mixins.text.TextDataMixin.convert_text_to_tensor"]], "docarray.document.mixins.text": [[140, "module-docarray.document.mixins.text"]], "get_vocabulary() (docarray.document.mixins.text.textdatamixin method)": [[140, "docarray.document.mixins.text.TextDataMixin.get_vocabulary"]], "load_uri_to_text() (docarray.document.mixins.text.textdatamixin method)": [[140, "docarray.document.mixins.text.TextDataMixin.load_uri_to_text"]], "videodatamixin (class in docarray.document.mixins.video)": [[141, "docarray.document.mixins.video.VideoDataMixin"]], "docarray.document.mixins.video": [[141, "module-docarray.document.mixins.video"]], "generator_from_webcam() (docarray.document.mixins.video.videodatamixin class method)": [[141, "docarray.document.mixins.video.VideoDataMixin.generator_from_webcam"]], "load_uri_to_video_tensor() (docarray.document.mixins.video.videodatamixin method)": [[141, "docarray.document.mixins.video.VideoDataMixin.load_uri_to_video_tensor"]], "save_video_tensor_to_file() (docarray.document.mixins.video.videodatamixin method)": [[141, "docarray.document.mixins.video.VideoDataMixin.save_video_tensor_to_file"]], "pydanticdocument (class in docarray.document.pydantic_model)": [[142, "docarray.document.pydantic_model.PydanticDocument"]], "pydanticdocument.config (class in docarray.document.pydantic_model)": [[142, "docarray.document.pydantic_model.PydanticDocument.Config"]], "adjacency (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.adjacency"]], "blob (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.blob"]], "chunks (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.chunks"]], "construct() (docarray.document.pydantic_model.pydanticdocument class method)": [[142, "docarray.document.pydantic_model.PydanticDocument.construct"]], "copy() (docarray.document.pydantic_model.pydanticdocument method)": [[142, "docarray.document.pydantic_model.PydanticDocument.copy"]], "dict() (docarray.document.pydantic_model.pydanticdocument method)": [[142, "docarray.document.pydantic_model.PydanticDocument.dict"]], "docarray.document.pydantic_model": [[142, "module-docarray.document.pydantic_model"]], "embedding (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.embedding"]], "evaluations (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.evaluations"]], "from_orm() (docarray.document.pydantic_model.pydanticdocument class method)": [[142, "docarray.document.pydantic_model.PydanticDocument.from_orm"]], "granularity (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.granularity"]], "id (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.id"]], "json() (docarray.document.pydantic_model.pydanticdocument method)": [[142, "docarray.document.pydantic_model.PydanticDocument.json"]], "location (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.location"]], "matches (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.matches"]], "mime_type (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.mime_type"]], "modality (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.modality"]], "offset (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.offset"]], "parent_id (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.parent_id"]], "parse_file() (docarray.document.pydantic_model.pydanticdocument class method)": [[142, "docarray.document.pydantic_model.PydanticDocument.parse_file"]], "parse_obj() (docarray.document.pydantic_model.pydanticdocument class method)": [[142, "docarray.document.pydantic_model.PydanticDocument.parse_obj"]], "parse_raw() (docarray.document.pydantic_model.pydanticdocument class method)": [[142, "docarray.document.pydantic_model.PydanticDocument.parse_raw"]], "schema() (docarray.document.pydantic_model.pydanticdocument class method)": [[142, "docarray.document.pydantic_model.PydanticDocument.schema"]], "schema_json() (docarray.document.pydantic_model.pydanticdocument class method)": [[142, "docarray.document.pydantic_model.PydanticDocument.schema_json"]], "scores (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.scores"]], "smart_union (docarray.document.pydantic_model.pydanticdocument.config attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.Config.smart_union"]], "tags (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.tags"]], "tensor (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.tensor"]], "text (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.text"]], "update_forward_refs() (docarray.document.pydantic_model.pydanticdocument class method)": [[142, "docarray.document.pydantic_model.PydanticDocument.update_forward_refs"]], "uri (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.uri"]], "validate() (docarray.document.pydantic_model.pydanticdocument class method)": [[142, "docarray.document.pydantic_model.PydanticDocument.validate"]], "weight (docarray.document.pydantic_model.pydanticdocument attribute)": [[142, "docarray.document.pydantic_model.PydanticDocument.weight"]], "strawberrydocument (class in docarray.document.strawberry_type)": [[143, "docarray.document.strawberry_type.StrawberryDocument"]], "strawberrydocumentinput (class in docarray.document.strawberry_type)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput"]], "adjacency (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.adjacency"]], "adjacency (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.adjacency"]], "blob (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.blob"]], "blob (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.blob"]], "chunks (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.chunks"]], "chunks (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.chunks"]], "docarray.document.strawberry_type": [[143, "module-docarray.document.strawberry_type"]], "embedding (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.embedding"]], "embedding (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.embedding"]], "evaluations (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.evaluations"]], "evaluations (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.evaluations"]], "granularity (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.granularity"]], "granularity (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.granularity"]], "id (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.id"]], "id (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.id"]], "location (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.location"]], "location (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.location"]], "matches (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.matches"]], "matches (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.matches"]], "mime_type (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.mime_type"]], "mime_type (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.mime_type"]], "modality (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.modality"]], "modality (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.modality"]], "offset (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.offset"]], "offset (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.offset"]], "parent_id (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.parent_id"]], "parent_id (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.parent_id"]], "scores (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.scores"]], "scores (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.scores"]], "tags (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.tags"]], "tags (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.tags"]], "tensor (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.tensor"]], "tensor (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.tensor"]], "text (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.text"]], "text (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.text"]], "uri (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.uri"]], "uri (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.uri"]], "weight (docarray.document.strawberry_type.strawberrydocument attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocument.weight"]], "weight (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[143, "docarray.document.strawberry_type.StrawberryDocumentInput.weight"]], "add_protocol_and_compress_to_file_path() (in module docarray.helper)": [[144, "docarray.helper.add_protocol_and_compress_to_file_path"]], "cached_property (class in docarray.helper)": [[144, "docarray.helper.cached_property"]], "check_root_id() (in module docarray.helper)": [[144, "docarray.helper.check_root_id"]], "compress_bytes() (in module docarray.helper)": [[144, "docarray.helper.compress_bytes"]], "dataclass_from_dict() (in module docarray.helper)": [[144, "docarray.helper.dataclass_from_dict"]], "decompress_bytes() (in module docarray.helper)": [[144, "docarray.helper.decompress_bytes"]], "deprecate_by() (in module docarray.helper)": [[144, "docarray.helper.deprecate_by"]], "docarray.helper": [[144, "module-docarray.helper"]], "download_mermaid_url() (in module docarray.helper)": [[144, "docarray.helper.download_mermaid_url"]], "dunder_get() (in module docarray.helper)": [[144, "docarray.helper.dunder_get"]], "filter_dict() (in module docarray.helper)": [[144, "docarray.helper.filter_dict"]], "get_ci_vendor() (in module docarray.helper)": [[144, "docarray.helper.get_ci_vendor"]], "get_compress_ctx() (in module docarray.helper)": [[144, "docarray.helper.get_compress_ctx"]], "get_full_version() (in module docarray.helper)": [[144, "docarray.helper.get_full_version"]], "login() (in module docarray.helper)": [[144, "docarray.helper.login"]], "logout() (in module docarray.helper)": [[144, "docarray.helper.logout"]], "protocol_and_compress_from_file_path() (in module docarray.helper)": [[144, "docarray.helper.protocol_and_compress_from_file_path"]], "random_identity() (in module docarray.helper)": [[144, "docarray.helper.random_identity"]], "random_port() (in module docarray.helper)": [[144, "docarray.helper.random_port"]], "random_uuid() (in module docarray.helper)": [[144, "docarray.helper.random_uuid"]], "reset_ports() (in module docarray.helper)": [[144, "docarray.helper.reset_ports"]], "typename() (in module docarray.helper)": [[144, "docarray.helper.typename"]], "docarray.math": [[145, "module-docarray.math"]], "cdist() (in module docarray.math.distance)": [[146, "docarray.math.distance.cdist"]], "docarray.math.distance": [[146, "module-docarray.math.distance"]], "pdist() (in module docarray.math.distance)": [[146, "docarray.math.distance.pdist"]], "cosine() (in module docarray.math.distance.numpy)": [[147, "docarray.math.distance.numpy.cosine"]], "docarray.math.distance.numpy": [[147, "module-docarray.math.distance.numpy"]], "euclidean() (in module docarray.math.distance.numpy)": [[147, "docarray.math.distance.numpy.euclidean"]], "sparse_cosine() (in module docarray.math.distance.numpy)": [[147, "docarray.math.distance.numpy.sparse_cosine"]], "sparse_euclidean() (in module docarray.math.distance.numpy)": [[147, "docarray.math.distance.numpy.sparse_euclidean"]], "sparse_sqeuclidean() (in module docarray.math.distance.numpy)": [[147, "docarray.math.distance.numpy.sparse_sqeuclidean"]], "sqeuclidean() (in module docarray.math.distance.numpy)": [[147, "docarray.math.distance.numpy.sqeuclidean"]], "cosine() (in module docarray.math.distance.tensorflow)": [[149, "docarray.math.distance.tensorflow.cosine"]], "docarray.math.distance.tensorflow": [[149, "module-docarray.math.distance.tensorflow"]], "euclidean() (in module docarray.math.distance.tensorflow)": [[149, "docarray.math.distance.tensorflow.euclidean"]], "sqeuclidean() (in module docarray.math.distance.tensorflow)": [[149, "docarray.math.distance.tensorflow.sqeuclidean"]], "cosine() (in module docarray.math.distance.torch)": [[150, "docarray.math.distance.torch.cosine"]], "docarray.math.distance.torch": [[150, "module-docarray.math.distance.torch"]], "euclidean() (in module docarray.math.distance.torch)": [[150, "docarray.math.distance.torch.euclidean"]], "sqeuclidean() (in module docarray.math.distance.torch)": [[150, "docarray.math.distance.torch.sqeuclidean"]], "average_precision() (in module docarray.math.evaluation)": [[151, "docarray.math.evaluation.average_precision"]], "dcg_at_k() (in module docarray.math.evaluation)": [[151, "docarray.math.evaluation.dcg_at_k"]], "docarray.math.evaluation": [[151, "module-docarray.math.evaluation"]], "f1_score_at_k() (in module docarray.math.evaluation)": [[151, "docarray.math.evaluation.f1_score_at_k"]], "hit_at_k() (in module docarray.math.evaluation)": [[151, "docarray.math.evaluation.hit_at_k"]], "ndcg_at_k() (in module docarray.math.evaluation)": [[151, "docarray.math.evaluation.ndcg_at_k"]], "precision_at_k() (in module docarray.math.evaluation)": [[151, "docarray.math.evaluation.precision_at_k"]], "r_precision() (in module docarray.math.evaluation)": [[151, "docarray.math.evaluation.r_precision"]], "recall_at_k() (in module docarray.math.evaluation)": [[151, "docarray.math.evaluation.recall_at_k"]], "reciprocal_rank() (in module docarray.math.evaluation)": [[151, "docarray.math.evaluation.reciprocal_rank"]], "docarray.math.helper": [[152, "module-docarray.math.helper"]], "minmax_normalize() (in module docarray.math.helper)": [[152, "docarray.math.helper.minmax_normalize"]], "top_k() (in module docarray.math.helper)": [[152, "docarray.math.helper.top_k"]], "update_rows_x_mat_best() (in module docarray.math.helper)": [[152, "docarray.math.helper.update_rows_x_mat_best"]], "check_arraylike_equality() (in module docarray.math.ndarray)": [[153, "docarray.math.ndarray.check_arraylike_equality"]], "detach_tensor_if_present() (in module docarray.math.ndarray)": [[153, "docarray.math.ndarray.detach_tensor_if_present"]], "docarray.math.ndarray": [[153, "module-docarray.math.ndarray"]], "get_array_rows() (in module docarray.math.ndarray)": [[153, "docarray.math.ndarray.get_array_rows"]], "get_array_type() (in module docarray.math.ndarray)": [[153, "docarray.math.ndarray.get_array_type"]], "ravel() (in module docarray.math.ndarray)": [[153, "docarray.math.ndarray.ravel"]], "to_list() (in module docarray.math.ndarray)": [[153, "docarray.math.ndarray.to_list"]], "to_numpy_array() (in module docarray.math.ndarray)": [[153, "docarray.math.ndarray.to_numpy_array"]], "unravel() (in module docarray.math.ndarray)": [[153, "docarray.math.ndarray.unravel"]], "docarray.proto": [[154, "module-docarray.proto"]], "docarray.proto.docarray_pb2": [[155, "module-docarray.proto.docarray_pb2"]], "docarray.proto.io": [[156, "module-docarray.proto.io"]], "flush_proto() (in module docarray.proto.io)": [[156, "docarray.proto.io.flush_proto"]], "parse_proto() (in module docarray.proto.io)": [[156, "docarray.proto.io.parse_proto"]], "docarray.proto.io.ndarray": [[157, "module-docarray.proto.io.ndarray"]], "flush_ndarray() (in module docarray.proto.io.ndarray)": [[157, "docarray.proto.io.ndarray.flush_ndarray"]], "read_ndarray() (in module docarray.proto.io.ndarray)": [[157, "docarray.proto.io.ndarray.read_ndarray"]], "docarray.proto.pb": [[158, "module-docarray.proto.pb"]], "docarray.proto.pb.docarray_pb2": [[159, "module-docarray.proto.pb.docarray_pb2"]], "docarray.proto.pb2": [[160, "module-docarray.proto.pb2"]], "docarray.proto.pb2.docarray_pb2": [[161, "module-docarray.proto.pb2.docarray_pb2"]], "namedscore (class in docarray.score)": [[162, "docarray.score.NamedScore"]], "clear() (docarray.score.namedscore method)": [[162, "docarray.score.NamedScore.clear"]], "copy_from() (docarray.score.namedscore method)": [[162, "docarray.score.NamedScore.copy_from"]], "description (docarray.score.namedscore property)": [[162, "docarray.score.NamedScore.description"]], "docarray.score": [[162, "module-docarray.score"]], "nbytes (docarray.score.namedscore property)": [[162, "docarray.score.NamedScore.nbytes"]], "non_empty_fields (docarray.score.namedscore property)": [[162, "docarray.score.NamedScore.non_empty_fields"]], "op_name (docarray.score.namedscore property)": [[162, "docarray.score.NamedScore.op_name"]], "pop() (docarray.score.namedscore method)": [[162, "docarray.score.NamedScore.pop"]], "ref_id (docarray.score.namedscore property)": [[162, "docarray.score.NamedScore.ref_id"]], "to_dict() (docarray.score.namedscore method)": [[162, "docarray.score.NamedScore.to_dict"]], "value (docarray.score.namedscore property)": [[162, "docarray.score.NamedScore.value"]], "namedscoredata (class in docarray.score.data)": [[163, "docarray.score.data.NamedScoreData"]], "description (docarray.score.data.namedscoredata attribute)": [[163, "docarray.score.data.NamedScoreData.description"]], "docarray.score.data": [[163, "module-docarray.score.data"]], "op_name (docarray.score.data.namedscoredata attribute)": [[163, "docarray.score.data.NamedScoreData.op_name"]], "ref_id (docarray.score.data.namedscoredata attribute)": [[163, "docarray.score.data.NamedScoreData.ref_id"]], "value (docarray.score.data.namedscoredata attribute)": [[163, "docarray.score.data.NamedScoreData.value"]], "allmixins (class in docarray.score.mixins)": [[164, "docarray.score.mixins.AllMixins"]], "description (docarray.score.mixins.allmixins property)": [[164, "docarray.score.mixins.AllMixins.description"]], "docarray.score.mixins": [[164, "module-docarray.score.mixins"]], "op_name (docarray.score.mixins.allmixins property)": [[164, "docarray.score.mixins.AllMixins.op_name"]], "ref_id (docarray.score.mixins.allmixins property)": [[164, "docarray.score.mixins.AllMixins.ref_id"]], "to_dict() (docarray.score.mixins.allmixins method)": [[164, "docarray.score.mixins.AllMixins.to_dict"]], "value (docarray.score.mixins.allmixins property)": [[164, "docarray.score.mixins.AllMixins.value"]], "propertymixin (class in docarray.score.mixins.property)": [[165, "docarray.score.mixins.property.PropertyMixin"]], "description (docarray.score.mixins.property.propertymixin property)": [[165, "docarray.score.mixins.property.PropertyMixin.description"]], "docarray.score.mixins.property": [[165, "module-docarray.score.mixins.property"]], "op_name (docarray.score.mixins.property.propertymixin property)": [[165, "docarray.score.mixins.property.PropertyMixin.op_name"]], "ref_id (docarray.score.mixins.property.propertymixin property)": [[165, "docarray.score.mixins.property.PropertyMixin.ref_id"]], "value (docarray.score.mixins.property.propertymixin property)": [[165, "docarray.score.mixins.property.PropertyMixin.value"]], "representmixin (class in docarray.score.mixins.representer)": [[166, "docarray.score.mixins.representer.RepresentMixin"]], "docarray.score.mixins.representer": [[166, "module-docarray.score.mixins.representer"]], "to_dict() (docarray.score.mixins.representer.representmixin method)": [[166, "docarray.score.mixins.representer.RepresentMixin.to_dict"]], "docarray.typing": [[167, "module-docarray.typing"]]}})