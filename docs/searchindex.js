Search.setIndex({"docnames": ["advanced/document-store/annlite", "advanced/document-store/benchmark", "advanced/document-store/elasticsearch", "advanced/document-store/extend", "advanced/document-store/index", "advanced/document-store/milvus", "advanced/document-store/opensearch", "advanced/document-store/qdrant", "advanced/document-store/redis", "advanced/document-store/sqlite", "advanced/document-store/weaviate", "advanced/graphql-support/index", "advanced/torch-support/index", "api", "api/docarray", "api/docarray.array", "api/docarray.array.annlite", "api/docarray.array.base", "api/docarray.array.chunk", "api/docarray.array.document", "api/docarray.array.elastic", "api/docarray.array.match", "api/docarray.array.memory", "api/docarray.array.milvus", "api/docarray.array.mixins", "api/docarray.array.mixins.content", "api/docarray.array.mixins.dataloader", "api/docarray.array.mixins.dataloader.helper", "api/docarray.array.mixins.delitem", "api/docarray.array.mixins.embed", "api/docarray.array.mixins.empty", "api/docarray.array.mixins.evaluation", "api/docarray.array.mixins.find", "api/docarray.array.mixins.getattr", "api/docarray.array.mixins.getitem", "api/docarray.array.mixins.group", "api/docarray.array.mixins.io", "api/docarray.array.mixins.io.binary", "api/docarray.array.mixins.io.common", "api/docarray.array.mixins.io.csv", "api/docarray.array.mixins.io.dataframe", "api/docarray.array.mixins.io.from_gen", "api/docarray.array.mixins.io.json", "api/docarray.array.mixins.io.pbar", "api/docarray.array.mixins.io.pushpull", "api/docarray.array.mixins.match", "api/docarray.array.mixins.parallel", "api/docarray.array.mixins.plot", "api/docarray.array.mixins.post", "api/docarray.array.mixins.pydantic", "api/docarray.array.mixins.reduce", "api/docarray.array.mixins.sample", "api/docarray.array.mixins.setitem", "api/docarray.array.mixins.strawberry", "api/docarray.array.mixins.text", "api/docarray.array.mixins.traverse", "api/docarray.array.opensearch", "api/docarray.array.qdrant", "api/docarray.array.queryset", "api/docarray.array.queryset.lookup", "api/docarray.array.queryset.parser", "api/docarray.array.redis", "api/docarray.array.sqlite", "api/docarray.array.storage", "api/docarray.array.storage.annlite", "api/docarray.array.storage.annlite.backend", "api/docarray.array.storage.annlite.find", "api/docarray.array.storage.annlite.getsetdel", "api/docarray.array.storage.annlite.helper", "api/docarray.array.storage.annlite.seqlike", "api/docarray.array.storage.base", "api/docarray.array.storage.base.backend", "api/docarray.array.storage.base.getsetdel", "api/docarray.array.storage.base.helper", "api/docarray.array.storage.base.seqlike", "api/docarray.array.storage.elastic", "api/docarray.array.storage.elastic.backend", "api/docarray.array.storage.elastic.find", "api/docarray.array.storage.elastic.getsetdel", "api/docarray.array.storage.elastic.seqlike", "api/docarray.array.storage.memory", "api/docarray.array.storage.memory.backend", "api/docarray.array.storage.memory.find", "api/docarray.array.storage.memory.getsetdel", "api/docarray.array.storage.memory.seqlike", "api/docarray.array.storage.milvus", "api/docarray.array.storage.milvus.backend", "api/docarray.array.storage.milvus.find", "api/docarray.array.storage.milvus.getsetdel", "api/docarray.array.storage.milvus.seqlike", "api/docarray.array.storage.opensearch", "api/docarray.array.storage.opensearch.backend", "api/docarray.array.storage.opensearch.find", "api/docarray.array.storage.opensearch.getsetdel", "api/docarray.array.storage.opensearch.seqlike", "api/docarray.array.storage.qdrant", "api/docarray.array.storage.qdrant.backend", "api/docarray.array.storage.qdrant.find", "api/docarray.array.storage.qdrant.getsetdel", "api/docarray.array.storage.qdrant.helper", "api/docarray.array.storage.qdrant.seqlike", "api/docarray.array.storage.redis", "api/docarray.array.storage.redis.backend", "api/docarray.array.storage.redis.find", "api/docarray.array.storage.redis.getsetdel", "api/docarray.array.storage.redis.seqlike", "api/docarray.array.storage.registry", "api/docarray.array.storage.sqlite", "api/docarray.array.storage.sqlite.backend", "api/docarray.array.storage.sqlite.getsetdel", "api/docarray.array.storage.sqlite.helper", "api/docarray.array.storage.sqlite.seqlike", "api/docarray.array.storage.weaviate", "api/docarray.array.storage.weaviate.backend", "api/docarray.array.storage.weaviate.find", "api/docarray.array.storage.weaviate.getsetdel", "api/docarray.array.storage.weaviate.seqlike", "api/docarray.array.weaviate", "api/docarray.base", "api/docarray.dataclasses", "api/docarray.dataclasses.enums", "api/docarray.dataclasses.getter", "api/docarray.dataclasses.setter", "api/docarray.dataclasses.types", "api/docarray.document", "api/docarray.document.data", "api/docarray.document.generators", "api/docarray.document.mixins", "api/docarray.document.mixins.attribute", "api/docarray.document.mixins.audio", "api/docarray.document.mixins.blob", "api/docarray.document.mixins.content", "api/docarray.document.mixins.convert", "api/docarray.document.mixins.dump", "api/docarray.document.mixins.featurehash", "api/docarray.document.mixins.helper", "api/docarray.document.mixins.image", "api/docarray.document.mixins.mesh", "api/docarray.document.mixins.multimodal", "api/docarray.document.mixins.plot", "api/docarray.document.mixins.porting", "api/docarray.document.mixins.property", "api/docarray.document.mixins.protobuf", "api/docarray.document.mixins.pydantic", "api/docarray.document.mixins.rich_embedding", "api/docarray.document.mixins.strawberry", "api/docarray.document.mixins.sugar", "api/docarray.document.mixins.text", "api/docarray.document.mixins.video", "api/docarray.document.pydantic_model", "api/docarray.document.strawberry_type", "api/docarray.helper", "api/docarray.math", "api/docarray.math.distance", "api/docarray.math.distance.numpy", "api/docarray.math.distance.paddle", "api/docarray.math.distance.tensorflow", "api/docarray.math.distance.torch", "api/docarray.math.evaluation", "api/docarray.math.helper", "api/docarray.math.ndarray", "api/docarray.proto", "api/docarray.proto.docarray_pb2", "api/docarray.proto.io", "api/docarray.proto.io.ndarray", "api/docarray.proto.pb", "api/docarray.proto.pb.docarray_pb2", "api/docarray.proto.pb2", "api/docarray.proto.pb2.docarray_pb2", "api/docarray.score", "api/docarray.score.data", "api/docarray.score.mixins", "api/docarray.score.mixins.property", "api/docarray.score.mixins.representer", "api/docarray.typing", "api/modules", "changelog/index", "datatypes/audio/index", "datatypes/image/index", "datatypes/index", "datatypes/mesh/index", "datatypes/multimodal/index", "datatypes/tabular/index", "datatypes/text/index", "datatypes/video/index", "fundamentals/cloud-support/data-management", "fundamentals/cloud-support/index", "fundamentals/cloud-support/login", "fundamentals/dataclass/access", "fundamentals/dataclass/construct", "fundamentals/dataclass/example", "fundamentals/dataclass/index", "fundamentals/dataclass/new-type", "fundamentals/document/attribute", "fundamentals/document/construct", "fundamentals/document/embedding", "fundamentals/document/fluent-interface", "fundamentals/document/index", "fundamentals/document/nested", "fundamentals/document/serialization", "fundamentals/document/visualization", "fundamentals/documentarray/access-attributes", "fundamentals/documentarray/access-elements", "fundamentals/documentarray/construct", "fundamentals/documentarray/embedding", "fundamentals/documentarray/evaluation", "fundamentals/documentarray/find", "fundamentals/documentarray/index", "fundamentals/documentarray/matching", "fundamentals/documentarray/parallelization", "fundamentals/documentarray/post-external", "fundamentals/documentarray/serialization", "fundamentals/documentarray/subindex", "fundamentals/documentarray/visualization", "fundamentals/fastapi-support/index", "fundamentals/notebook-support/index", "get-started/install", "get-started/what-is", "index", "proto/docs", "proto/index"], "filenames": ["advanced/document-store/annlite.md", "advanced/document-store/benchmark.md", "advanced/document-store/elasticsearch.md", "advanced/document-store/extend.md", "advanced/document-store/index.md", "advanced/document-store/milvus.md", "advanced/document-store/opensearch.md", "advanced/document-store/qdrant.md", "advanced/document-store/redis.md", "advanced/document-store/sqlite.md", "advanced/document-store/weaviate.md", "advanced/graphql-support/index.md", "advanced/torch-support/index.md", "api.rst", "api/docarray.rst", "api/docarray.array.rst", "api/docarray.array.annlite.rst", "api/docarray.array.base.rst", "api/docarray.array.chunk.rst", "api/docarray.array.document.rst", "api/docarray.array.elastic.rst", "api/docarray.array.match.rst", "api/docarray.array.memory.rst", "api/docarray.array.milvus.rst", "api/docarray.array.mixins.rst", "api/docarray.array.mixins.content.rst", "api/docarray.array.mixins.dataloader.rst", "api/docarray.array.mixins.dataloader.helper.rst", "api/docarray.array.mixins.delitem.rst", "api/docarray.array.mixins.embed.rst", "api/docarray.array.mixins.empty.rst", "api/docarray.array.mixins.evaluation.rst", "api/docarray.array.mixins.find.rst", "api/docarray.array.mixins.getattr.rst", "api/docarray.array.mixins.getitem.rst", "api/docarray.array.mixins.group.rst", "api/docarray.array.mixins.io.rst", "api/docarray.array.mixins.io.binary.rst", "api/docarray.array.mixins.io.common.rst", "api/docarray.array.mixins.io.csv.rst", "api/docarray.array.mixins.io.dataframe.rst", "api/docarray.array.mixins.io.from_gen.rst", "api/docarray.array.mixins.io.json.rst", "api/docarray.array.mixins.io.pbar.rst", "api/docarray.array.mixins.io.pushpull.rst", "api/docarray.array.mixins.match.rst", "api/docarray.array.mixins.parallel.rst", "api/docarray.array.mixins.plot.rst", "api/docarray.array.mixins.post.rst", "api/docarray.array.mixins.pydantic.rst", "api/docarray.array.mixins.reduce.rst", "api/docarray.array.mixins.sample.rst", "api/docarray.array.mixins.setitem.rst", "api/docarray.array.mixins.strawberry.rst", "api/docarray.array.mixins.text.rst", "api/docarray.array.mixins.traverse.rst", "api/docarray.array.opensearch.rst", "api/docarray.array.qdrant.rst", "api/docarray.array.queryset.rst", "api/docarray.array.queryset.lookup.rst", "api/docarray.array.queryset.parser.rst", "api/docarray.array.redis.rst", "api/docarray.array.sqlite.rst", "api/docarray.array.storage.rst", "api/docarray.array.storage.annlite.rst", "api/docarray.array.storage.annlite.backend.rst", "api/docarray.array.storage.annlite.find.rst", "api/docarray.array.storage.annlite.getsetdel.rst", "api/docarray.array.storage.annlite.helper.rst", "api/docarray.array.storage.annlite.seqlike.rst", "api/docarray.array.storage.base.rst", "api/docarray.array.storage.base.backend.rst", "api/docarray.array.storage.base.getsetdel.rst", "api/docarray.array.storage.base.helper.rst", "api/docarray.array.storage.base.seqlike.rst", "api/docarray.array.storage.elastic.rst", "api/docarray.array.storage.elastic.backend.rst", "api/docarray.array.storage.elastic.find.rst", "api/docarray.array.storage.elastic.getsetdel.rst", "api/docarray.array.storage.elastic.seqlike.rst", "api/docarray.array.storage.memory.rst", "api/docarray.array.storage.memory.backend.rst", "api/docarray.array.storage.memory.find.rst", "api/docarray.array.storage.memory.getsetdel.rst", "api/docarray.array.storage.memory.seqlike.rst", "api/docarray.array.storage.milvus.rst", "api/docarray.array.storage.milvus.backend.rst", "api/docarray.array.storage.milvus.find.rst", "api/docarray.array.storage.milvus.getsetdel.rst", "api/docarray.array.storage.milvus.seqlike.rst", "api/docarray.array.storage.opensearch.rst", "api/docarray.array.storage.opensearch.backend.rst", "api/docarray.array.storage.opensearch.find.rst", "api/docarray.array.storage.opensearch.getsetdel.rst", "api/docarray.array.storage.opensearch.seqlike.rst", "api/docarray.array.storage.qdrant.rst", "api/docarray.array.storage.qdrant.backend.rst", "api/docarray.array.storage.qdrant.find.rst", "api/docarray.array.storage.qdrant.getsetdel.rst", "api/docarray.array.storage.qdrant.helper.rst", "api/docarray.array.storage.qdrant.seqlike.rst", "api/docarray.array.storage.redis.rst", "api/docarray.array.storage.redis.backend.rst", "api/docarray.array.storage.redis.find.rst", "api/docarray.array.storage.redis.getsetdel.rst", "api/docarray.array.storage.redis.seqlike.rst", "api/docarray.array.storage.registry.rst", "api/docarray.array.storage.sqlite.rst", "api/docarray.array.storage.sqlite.backend.rst", "api/docarray.array.storage.sqlite.getsetdel.rst", "api/docarray.array.storage.sqlite.helper.rst", "api/docarray.array.storage.sqlite.seqlike.rst", "api/docarray.array.storage.weaviate.rst", "api/docarray.array.storage.weaviate.backend.rst", "api/docarray.array.storage.weaviate.find.rst", "api/docarray.array.storage.weaviate.getsetdel.rst", "api/docarray.array.storage.weaviate.seqlike.rst", "api/docarray.array.weaviate.rst", "api/docarray.base.rst", "api/docarray.dataclasses.rst", "api/docarray.dataclasses.enums.rst", "api/docarray.dataclasses.getter.rst", "api/docarray.dataclasses.setter.rst", "api/docarray.dataclasses.types.rst", "api/docarray.document.rst", "api/docarray.document.data.rst", "api/docarray.document.generators.rst", "api/docarray.document.mixins.rst", "api/docarray.document.mixins.attribute.rst", "api/docarray.document.mixins.audio.rst", "api/docarray.document.mixins.blob.rst", "api/docarray.document.mixins.content.rst", "api/docarray.document.mixins.convert.rst", "api/docarray.document.mixins.dump.rst", "api/docarray.document.mixins.featurehash.rst", "api/docarray.document.mixins.helper.rst", "api/docarray.document.mixins.image.rst", "api/docarray.document.mixins.mesh.rst", "api/docarray.document.mixins.multimodal.rst", "api/docarray.document.mixins.plot.rst", "api/docarray.document.mixins.porting.rst", "api/docarray.document.mixins.property.rst", "api/docarray.document.mixins.protobuf.rst", "api/docarray.document.mixins.pydantic.rst", "api/docarray.document.mixins.rich_embedding.rst", "api/docarray.document.mixins.strawberry.rst", "api/docarray.document.mixins.sugar.rst", "api/docarray.document.mixins.text.rst", "api/docarray.document.mixins.video.rst", "api/docarray.document.pydantic_model.rst", "api/docarray.document.strawberry_type.rst", "api/docarray.helper.rst", "api/docarray.math.rst", "api/docarray.math.distance.rst", "api/docarray.math.distance.numpy.rst", "api/docarray.math.distance.paddle.rst", "api/docarray.math.distance.tensorflow.rst", "api/docarray.math.distance.torch.rst", "api/docarray.math.evaluation.rst", "api/docarray.math.helper.rst", "api/docarray.math.ndarray.rst", "api/docarray.proto.rst", "api/docarray.proto.docarray_pb2.rst", "api/docarray.proto.io.rst", "api/docarray.proto.io.ndarray.rst", "api/docarray.proto.pb.rst", "api/docarray.proto.pb.docarray_pb2.rst", "api/docarray.proto.pb2.rst", "api/docarray.proto.pb2.docarray_pb2.rst", "api/docarray.score.rst", "api/docarray.score.data.rst", "api/docarray.score.mixins.rst", "api/docarray.score.mixins.property.rst", "api/docarray.score.mixins.representer.rst", "api/docarray.typing.rst", "api/modules.rst", "changelog/index.md", "datatypes/audio/index.md", "datatypes/image/index.md", "datatypes/index.md", "datatypes/mesh/index.md", "datatypes/multimodal/index.md", "datatypes/tabular/index.md", "datatypes/text/index.md", "datatypes/video/index.md", "fundamentals/cloud-support/data-management.md", "fundamentals/cloud-support/index.md", "fundamentals/cloud-support/login.md", "fundamentals/dataclass/access.md", "fundamentals/dataclass/construct.md", "fundamentals/dataclass/example.md", "fundamentals/dataclass/index.md", "fundamentals/dataclass/new-type.md", "fundamentals/document/attribute.md", "fundamentals/document/construct.md", "fundamentals/document/embedding.md", "fundamentals/document/fluent-interface.md", "fundamentals/document/index.md", "fundamentals/document/nested.md", "fundamentals/document/serialization.md", "fundamentals/document/visualization.md", "fundamentals/documentarray/access-attributes.md", "fundamentals/documentarray/access-elements.md", "fundamentals/documentarray/construct.md", "fundamentals/documentarray/embedding.md", "fundamentals/documentarray/evaluation.md", "fundamentals/documentarray/find.md", "fundamentals/documentarray/index.md", "fundamentals/documentarray/matching.md", "fundamentals/documentarray/parallelization.md", "fundamentals/documentarray/post-external.md", "fundamentals/documentarray/serialization.md", "fundamentals/documentarray/subindex.md", "fundamentals/documentarray/visualization.md", "fundamentals/fastapi-support/index.md", "fundamentals/notebook-support/index.md", "get-started/install.md", "get-started/what-is.md", "index.md", "proto/docs.md", "proto/index.md"], "titles": ["Annlite", "One Million Scale Benchmark", "Elasticsearch", "Add New Document Store", "Document Store", "Milvus", "Opensearch", "Qdrant", "Redis", "SQLite", "Weaviate", "GraphQL", "PyTorch/Deep Learning Frameworks", "<span class=\"fab fa-python\"></span> Python API", "docarray package", "docarray.array package", "docarray.array.annlite module", "docarray.array.base module", "docarray.array.chunk module", "docarray.array.document module", "docarray.array.elastic module", "docarray.array.match module", "docarray.array.memory module", "docarray.array.milvus module", "docarray.array.mixins package", "docarray.array.mixins.content module", "docarray.array.mixins.dataloader package", "docarray.array.mixins.dataloader.helper module", "docarray.array.mixins.delitem module", "docarray.array.mixins.embed module", "docarray.array.mixins.empty module", "docarray.array.mixins.evaluation module", "docarray.array.mixins.find module", "docarray.array.mixins.getattr module", "docarray.array.mixins.getitem module", "docarray.array.mixins.group module", "docarray.array.mixins.io package", "docarray.array.mixins.io.binary module", "docarray.array.mixins.io.common module", "docarray.array.mixins.io.csv module", "docarray.array.mixins.io.dataframe module", "docarray.array.mixins.io.from_gen module", "docarray.array.mixins.io.json module", "docarray.array.mixins.io.pbar module", "docarray.array.mixins.io.pushpull module", "docarray.array.mixins.match module", "docarray.array.mixins.parallel module", "docarray.array.mixins.plot module", "docarray.array.mixins.post module", "docarray.array.mixins.pydantic module", "docarray.array.mixins.reduce module", "docarray.array.mixins.sample module", "docarray.array.mixins.setitem module", "docarray.array.mixins.strawberry module", "docarray.array.mixins.text module", "docarray.array.mixins.traverse module", "docarray.array.opensearch module", "docarray.array.qdrant module", "docarray.array.queryset package", "docarray.array.queryset.lookup module", "docarray.array.queryset.parser module", "docarray.array.redis module", "docarray.array.sqlite module", "docarray.array.storage package", "docarray.array.storage.annlite package", "docarray.array.storage.annlite.backend module", "docarray.array.storage.annlite.find module", "docarray.array.storage.annlite.getsetdel module", "docarray.array.storage.annlite.helper module", "docarray.array.storage.annlite.seqlike module", "docarray.array.storage.base package", "docarray.array.storage.base.backend module", "docarray.array.storage.base.getsetdel module", "docarray.array.storage.base.helper module", "docarray.array.storage.base.seqlike module", "docarray.array.storage.elastic package", "docarray.array.storage.elastic.backend module", "docarray.array.storage.elastic.find module", "docarray.array.storage.elastic.getsetdel module", "docarray.array.storage.elastic.seqlike module", "docarray.array.storage.memory package", "docarray.array.storage.memory.backend module", "docarray.array.storage.memory.find module", "docarray.array.storage.memory.getsetdel module", "docarray.array.storage.memory.seqlike module", "docarray.array.storage.milvus package", "docarray.array.storage.milvus.backend module", "docarray.array.storage.milvus.find module", "docarray.array.storage.milvus.getsetdel module", "docarray.array.storage.milvus.seqlike module", "docarray.array.storage.opensearch package", "docarray.array.storage.opensearch.backend module", "docarray.array.storage.opensearch.find module", "docarray.array.storage.opensearch.getsetdel module", "docarray.array.storage.opensearch.seqlike module", "docarray.array.storage.qdrant package", "docarray.array.storage.qdrant.backend module", "docarray.array.storage.qdrant.find module", "docarray.array.storage.qdrant.getsetdel module", "docarray.array.storage.qdrant.helper module", "docarray.array.storage.qdrant.seqlike module", "docarray.array.storage.redis package", "docarray.array.storage.redis.backend module", "docarray.array.storage.redis.find module", "docarray.array.storage.redis.getsetdel module", "docarray.array.storage.redis.seqlike module", "docarray.array.storage.registry module", "docarray.array.storage.sqlite package", "docarray.array.storage.sqlite.backend module", "docarray.array.storage.sqlite.getsetdel module", "docarray.array.storage.sqlite.helper module", "docarray.array.storage.sqlite.seqlike module", "docarray.array.storage.weaviate package", "docarray.array.storage.weaviate.backend module", "docarray.array.storage.weaviate.find module", "docarray.array.storage.weaviate.getsetdel module", "docarray.array.storage.weaviate.seqlike module", "docarray.array.weaviate module", "docarray.base module", "docarray.dataclasses package", "docarray.dataclasses.enums module", "docarray.dataclasses.getter module", "docarray.dataclasses.setter module", "docarray.dataclasses.types module", "docarray.document package", "docarray.document.data module", "docarray.document.generators module", "docarray.document.mixins package", "docarray.document.mixins.attribute module", "docarray.document.mixins.audio module", "docarray.document.mixins.blob module", "docarray.document.mixins.content module", "docarray.document.mixins.convert module", "docarray.document.mixins.dump module", "docarray.document.mixins.featurehash module", "docarray.document.mixins.helper module", "docarray.document.mixins.image module", "docarray.document.mixins.mesh module", "docarray.document.mixins.multimodal module", "docarray.document.mixins.plot module", "docarray.document.mixins.porting module", "docarray.document.mixins.property module", "docarray.document.mixins.protobuf module", "docarray.document.mixins.pydantic module", "docarray.document.mixins.rich_embedding module", "docarray.document.mixins.strawberry module", "docarray.document.mixins.sugar module", "docarray.document.mixins.text module", "docarray.document.mixins.video module", "docarray.document.pydantic_model module", "docarray.document.strawberry_type module", "docarray.helper module", "docarray.math package", "docarray.math.distance package", "docarray.math.distance.numpy module", "docarray.math.distance.paddle module", "docarray.math.distance.tensorflow module", "docarray.math.distance.torch module", "docarray.math.evaluation module", "docarray.math.helper module", "docarray.math.ndarray module", "docarray.proto package", "docarray.proto.docarray_pb2 module", "docarray.proto.io package", "docarray.proto.io.ndarray module", "docarray.proto.pb package", "docarray.proto.pb.docarray_pb2 module", "docarray.proto.pb2 package", "docarray.proto.pb2.docarray_pb2 module", "docarray.score package", "docarray.score.data module", "docarray.score.mixins package", "docarray.score.mixins.property module", "docarray.score.mixins.representer module", "docarray.typing package", "docarray", "Changelog", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-unmute\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.563 2.069A.75.75 0 018 2.75v10.5a.75.75 0 01-1.238.57L3.472 11H1.75A1.75 1.75 0 010 9.25v-2.5C0 5.784.784 5 1.75 5h1.723l3.289-2.82a.75.75 0 01.801-.111zM6.5 4.38L4.238 6.319a.75.75 0 01-.488.181h-2a.25.25 0 00-.25.25v2.5c0 .138.112.25.25.25h2a.75.75 0 01.488.18L6.5 11.62V4.38zm6.096-2.038a.75.75 0 011.06 0 8 8 0 010 11.314.75.75 0 01-1.06-1.06 6.5 6.5 0 000-9.193.75.75 0 010-1.06v-.001zm-1.06 2.121a.75.75 0 10-1.061 1.061 3.5 3.5 0 010 4.95.75.75 0 101.06 1.06 5 5 0 000-7.07l.001-.001z\"></path></svg> Audio", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-image\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M1.75 2.5a.25.25 0 00-.25.25v10.5c0 .138.112.25.25.25h.94a.76.76 0 01.03-.03l6.077-6.078a1.75 1.75 0 012.412-.06L14.5 10.31V2.75a.25.25 0 00-.25-.25H1.75zm12.5 11H4.81l5.048-5.047a.25.25 0 01.344-.009l4.298 3.889v.917a.25.25 0 01-.25.25zm1.75-.25V2.75A1.75 1.75 0 0014.25 1H1.75A1.75 1.75 0 000 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0016 13.25zM5.5 6a.5.5 0 11-1 0 .5.5 0 011 0zM7 6a2 2 0 11-4 0 2 2 0 014 0z\"></path></svg> Image", "Data Types", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-package\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M8.878.392a1.75 1.75 0 00-1.756 0l-5.25 3.045A1.75 1.75 0 001 4.951v6.098c0 .624.332 1.2.872 1.514l5.25 3.045a1.75 1.75 0 001.756 0l5.25-3.045c.54-.313.872-.89.872-1.514V4.951c0-.624-.332-1.2-.872-1.514L8.878.392zM7.875 1.69a.25.25 0 01.25 0l4.63 2.685L8 7.133 3.245 4.375l4.63-2.685zM2.5 5.677v5.372c0 .09.047.171.125.216l4.625 2.683V8.432L2.5 5.677zm6.25 8.271l4.625-2.683a.25.25 0 00.125-.216V5.677L8.75 8.432v5.516z\"></path></svg> 3D Mesh", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-stack\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.122.392a1.75 1.75 0 011.756 0l5.003 2.902c.83.481.83 1.68 0 2.162L8.878 8.358a1.75 1.75 0 01-1.756 0L2.119 5.456a1.25 1.25 0 010-2.162L7.122.392zM8.125 1.69a.25.25 0 00-.25 0l-4.63 2.685 4.63 2.685a.25.25 0 00.25 0l4.63-2.685-4.63-2.685zM1.601 7.789a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0L1.874 8.814A.75.75 0 011.6 7.789zm0 3.5a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0l-5.248-3.044a.75.75 0 01-.273-1.025z\"></path></svg> Multi-modal", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-table\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v3.585a.746.746 0 010 .83v8.085A1.75 1.75 0 0114.25 16H6.309a.748.748 0 01-1.118 0H1.75A1.75 1.75 0 010 14.25V6.165a.746.746 0 010-.83V1.75zM1.5 6.5v7.75c0 .138.112.25.25.25H5v-8H1.5zM5 5H1.5V1.75a.25.25 0 01.25-.25H5V5zm1.5 1.5v8h7.75a.25.25 0 00.25-.25V6.5h-8zm8-1.5h-8V1.5h7.75a.25.25 0 01.25.25V5z\"></path></svg> Table", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-typography\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M6.21 8.5L4.574 3.594 2.857 8.5H6.21zm.5 1.5l.829 2.487a.75.75 0 001.423-.474L5.735 2.332a1.216 1.216 0 00-2.302-.018l-3.39 9.688a.75.75 0 001.415.496L2.332 10H6.71zm3.13-4.358C10.53 4.374 11.87 4 13 4c1.5 0 3 .939 3 2.601v5.649a.75.75 0 01-1.448.275C13.995 12.82 13.3 13 12.5 13c-.77 0-1.514-.231-2.078-.709-.577-.488-.922-1.199-.922-2.041 0-.694.265-1.411.887-1.944C11 7.78 11.88 7.5 13 7.5h1.5v-.899c0-.54-.5-1.101-1.5-1.101-.869 0-1.528.282-1.84.858a.75.75 0 11-1.32-.716zM14.5 9H13c-.881 0-1.375.22-1.637.444-.253.217-.363.5-.363.806 0 .408.155.697.39.896.249.21.63.354 1.11.354.732 0 1.26-.209 1.588-.449.35-.257.412-.495.412-.551V9z\"></path></svg> Text", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-device-camera-video\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M16 3.75a.75.75 0 00-1.136-.643L11 5.425V4.75A1.75 1.75 0 009.25 3h-7.5A1.75 1.75 0 000 4.75v6.5C0 12.216.784 13 1.75 13h7.5A1.75 1.75 0 0011 11.25v-.675l3.864 2.318A.75.75 0 0016 12.25v-8.5zm-5 5.075l3.5 2.1v-5.85l-3.5 2.1v1.65zM9.5 6.75v-2a.25.25 0 00-.25-.25h-7.5a.25.25 0 00-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-4.5z\"></path></svg> Video", "Data Management", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-rocket\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M14.064 0a8.75 8.75 0 00-6.187 2.563l-.459.458c-.314.314-.616.641-.904.979H3.31a1.75 1.75 0 00-1.49.833L.11 7.607a.75.75 0 00.418 1.11l3.102.954c.037.051.079.1.124.145l2.429 2.428c.046.046.094.088.145.125l.954 3.102a.75.75 0 001.11.418l2.774-1.707a1.75 1.75 0 00.833-1.49V9.485c.338-.288.665-.59.979-.904l.458-.459A8.75 8.75 0 0016 1.936V1.75A1.75 1.75 0 0014.25 0h-.186zM10.5 10.625c-.088.06-.177.118-.266.175l-2.35 1.521.548 1.783 1.949-1.2a.25.25 0 00.119-.213v-2.066zM3.678 8.116L5.2 5.766c.058-.09.117-.178.176-.266H3.309a.25.25 0 00-.213.119l-1.2 1.95 1.782.547zm5.26-4.493A7.25 7.25 0 0114.063 1.5h.186a.25.25 0 01.25.25v.186a7.25 7.25 0 01-2.123 5.127l-.459.458a15.21 15.21 0 01-2.499 2.02l-2.317 1.5-2.143-2.143 1.5-2.317a15.25 15.25 0 012.02-2.5l.458-.458h.002zM12 5a1 1 0 11-2 0 1 1 0 012 0zm-8.44 9.56a1.5 1.5 0 10-2.12-2.12c-.734.73-1.047 2.332-1.15 3.003a.23.23 0 00.265.265c.671-.103 2.273-.416 3.005-1.148z\"></path></svg> Cloud Support", "Authentication", "Access Modality", "Construct", "Process Modality", "Dataclass", "Support New Modality", "Access Attributes", "Construct", "Embedding", "Fluent Interface", "Document", "Nested Structure", "Serialization", "Visualization", "Access Attributes", "Access Documents", "Construct", "Embed via Neural Network", "Evaluate Matches", "Query by Conditions", "DocumentArray", "Find Nearest Neighbors", "Parallelization", "Process via External Flow or Executor", "Serialization", "Search over Nested Structure", "Visualization", "FastAPI/Pydantic", "Jupyter Notebook/Colab", "Install", "What is DocArray?", "Welcome to DocArray!", "Protocol Documentation", "Protocol Documentation"], "terms": {"you": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 31, 32, 40, 44, 45, 46, 47, 50, 56, 57, 61, 62, 72, 75, 77, 90, 92, 101, 103, 117, 124, 126, 127, 136, 147, 149, 158, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 31, 32, 35, 37, 38, 39, 42, 44, 45, 46, 47, 48, 56, 57, 61, 62, 72, 75, 77, 90, 92, 101, 103, 117, 124, 126, 127, 136, 138, 142, 146, 147, 148, 151, 153, 156, 157, 158, 159, 176, 177, 178, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 31, 32, 37, 38, 39, 42, 43, 44, 45, 46, 47, 50, 54, 55, 56, 57, 59, 61, 62, 72, 75, 77, 90, 92, 101, 103, 117, 123, 124, 126, 127, 130, 132, 134, 136, 139, 140, 146, 147, 151, 158, 176, 177, 178, 181, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220], "document": [0, 1, 2, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 27, 29, 30, 31, 32, 35, 37, 39, 45, 46, 47, 48, 50, 51, 54, 55, 56, 57, 59, 61, 62, 64, 69, 74, 75, 77, 79, 80, 84, 90, 92, 94, 95, 98, 100, 101, 103, 105, 107, 111, 112, 116, 117, 118, 119, 120, 122, 123, 151, 158, 160, 163, 169, 175, 177, 178, 179, 180, 182, 190, 191, 192, 193, 196, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218], "store": [0, 1, 2, 6, 7, 8, 9, 10, 12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 31, 35, 37, 39, 44, 45, 47, 56, 57, 61, 62, 64, 69, 74, 75, 79, 90, 94, 95, 100, 101, 105, 112, 113, 116, 117, 124, 127, 132, 136, 137, 139, 148, 151, 176, 178, 180, 181, 182, 183, 184, 185, 188, 191, 192, 193, 196, 202, 205, 206, 207, 208, 211, 212, 213, 215, 217, 218], "documentarrai": [0, 1, 9, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 35, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 56, 57, 61, 62, 64, 69, 72, 74, 75, 77, 79, 80, 82, 84, 90, 92, 94, 95, 100, 101, 103, 105, 107, 111, 112, 116, 117, 124, 125, 127, 138, 146, 147, 160, 178, 179, 181, 182, 183, 185, 186, 190, 191, 194, 196, 197, 198, 199, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 216, 217, 218], "It": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 29, 39, 47, 56, 57, 59, 61, 62, 117, 176, 178, 180, 189, 190, 191, 194, 195, 199, 201, 202, 205, 207, 209, 211, 212, 216, 217, 218], "": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 24, 29, 31, 32, 44, 50, 56, 57, 59, 61, 62, 64, 69, 74, 75, 77, 79, 80, 84, 90, 92, 94, 95, 100, 101, 103, 105, 107, 111, 112, 116, 117, 151, 177, 178, 180, 181, 183, 184, 187, 188, 190, 193, 195, 200, 201, 204, 205, 206, 209, 210, 211, 214, 215, 217], "suitabl": [0, 2, 5, 7, 8, 9, 10, 180], "faster": [0, 2, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 25, 37, 38, 56, 57, 61, 62, 117, 195, 199, 209], "retriev": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 32, 44, 45, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 158, 159, 205, 212], "embed": [0, 1, 2, 4, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 29, 31, 39, 45, 47, 56, 57, 61, 62, 117, 124, 125, 127, 134, 141, 146, 149, 150, 179, 183, 188, 189, 190, 197, 199, 200, 204, 205, 206, 208, 211, 212, 214, 216, 217, 218, 219, 220], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 29, 31, 32, 35, 37, 38, 39, 42, 44, 45, 46, 47, 50, 51, 54, 55, 56, 57, 59, 61, 62, 64, 69, 71, 72, 74, 75, 77, 79, 80, 84, 90, 92, 94, 95, 100, 101, 103, 105, 107, 111, 112, 116, 117, 123, 124, 126, 127, 129, 130, 132, 133, 136, 139, 146, 147, 148, 149, 151, 153, 158, 159, 160, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220], "e": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 126, 158, 178, 183, 191, 193, 194, 198, 199, 202, 204, 205, 209, 210, 211, 217, 218], "match": [0, 2, 4, 5, 6, 7, 8, 10, 11, 14, 15, 16, 18, 19, 20, 22, 24, 31, 32, 50, 55, 56, 57, 59, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 125, 126, 127, 136, 139, 141, 146, 149, 150, 179, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 211, 212, 214, 217, 218, 219, 220], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 37, 39, 44, 45, 46, 47, 50, 55, 56, 57, 59, 61, 62, 64, 65, 68, 69, 74, 75, 76, 77, 79, 81, 90, 92, 94, 95, 100, 101, 102, 103, 105, 108, 112, 113, 116, 117, 118, 123, 124, 126, 127, 131, 132, 134, 136, 138, 139, 146, 147, 148, 149, 151, 158, 169, 176, 178, 180, 181, 183, 184, 185, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220], "featur": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 124, 127, 134, 148, 176, 177, 179, 180, 181, 184, 188, 189, 191, 195, 196, 199, 207, 210, 211, 213, 214, 215, 216, 217, 218], "requir": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 16, 18, 19, 20, 21, 22, 24, 31, 40, 56, 57, 59, 61, 62, 67, 83, 109, 117, 124, 127, 134, 148, 178, 180, 181, 184, 189, 197, 198, 199, 205, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220], "instal": [0, 2, 5, 6, 7, 8, 10, 11, 16, 40, 57, 117, 178, 180, 184, 199, 210, 211, 213, 214, 215], "via": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 42, 44, 46, 55, 56, 57, 61, 62, 117, 178, 180, 182, 184, 189, 190, 191, 198, 201, 202, 208, 211, 214, 215, 216, 217, 218], "pip": [0, 2, 5, 6, 7, 8, 10, 11, 16, 57, 117, 178, 180, 184, 199, 210, 211, 213, 214, 215, 216, 218], "docarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 215], "instanti": [0, 2, 5, 6, 7, 8, 10, 20, 56, 57, 61, 117, 179], "storag": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 32, 44, 56, 57, 61, 62, 117, 183, 185, 212, 217], "like": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 16, 18, 19, 20, 21, 22, 24, 31, 37, 41, 44, 47, 56, 57, 61, 62, 69, 74, 79, 84, 94, 105, 111, 116, 117, 124, 127, 129, 134, 136, 137, 142, 148, 154, 178, 180, 181, 183, 184, 188, 189, 191, 193, 194, 195, 197, 199, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 219, 220], "so": [0, 3, 4, 5, 7, 10, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 59, 61, 62, 117, 124, 127, 147, 178, 189, 190, 191, 192, 199, 201, 202, 205, 208, 209, 217], "from": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 27, 29, 31, 32, 35, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 50, 51, 54, 56, 57, 59, 61, 62, 64, 69, 74, 75, 77, 79, 80, 84, 90, 92, 94, 95, 100, 101, 103, 105, 107, 111, 112, 116, 117, 118, 123, 124, 126, 127, 130, 132, 136, 137, 139, 140, 143, 145, 146, 147, 148, 149, 151, 158, 159, 160, 169, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 195, 196, 197, 200, 201, 202, 204, 205, 206, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220], "import": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 27, 29, 40, 46, 56, 57, 61, 62, 117, 123, 124, 160, 176, 177, 178, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218], "da": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 27, 39, 45, 46, 54, 56, 57, 61, 62, 117, 151, 176, 178, 181, 182, 183, 185, 188, 190, 195, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 217], "n_dim": [0, 2, 4, 5, 6, 7, 8, 10, 15, 16, 19, 20, 56, 57, 61, 63, 64, 65, 75, 76, 90, 91, 95, 96, 98, 101, 102, 112, 113, 117, 124, 127, 134, 183, 212], "10": [0, 2, 3, 4, 5, 6, 7, 8, 10, 12, 16, 18, 19, 20, 21, 22, 24, 27, 46, 47, 56, 57, 61, 62, 112, 113, 117, 124, 127, 139, 183, 184, 185, 195, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 216], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 31, 32, 35, 38, 44, 46, 50, 51, 54, 56, 57, 59, 61, 62, 64, 69, 72, 74, 75, 77, 79, 80, 84, 90, 92, 94, 95, 100, 101, 103, 105, 107, 111, 112, 116, 117, 123, 124, 126, 127, 136, 139, 148, 151, 176, 178, 180, 183, 184, 187, 188, 189, 191, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220], "would": [0, 1, 2, 3, 4, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 25, 56, 57, 61, 62, 117, 183, 191, 193, 197, 202, 203, 217], "same": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 31, 32, 35, 44, 45, 46, 47, 50, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 136, 146, 160, 181, 183, 184, 189, 191, 194, 197, 198, 199, 201, 202, 205, 207, 211, 214, 215, 219, 220], "ordinari": [0, 2, 6, 7, 8, 10], "To": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 16, 18, 19, 20, 21, 22, 24, 27, 31, 37, 45, 46, 56, 57, 61, 62, 117, 124, 127, 147, 176, 177, 180, 181, 183, 187, 188, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 202, 203, 205, 206, 208, 209, 211, 212, 216, 220], "access": [0, 1, 2, 5, 6, 7, 8, 9, 10, 16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117, 131, 179, 184, 185, 189, 191, 194, 196, 198, 206, 207, 212, 217], "formerli": [0, 2, 6, 7, 9, 10], "persist": [0, 2, 3, 5, 6, 7, 8, 9, 10, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "specifi": [0, 2, 5, 6, 7, 8, 9, 10, 16, 18, 19, 20, 21, 22, 24, 27, 31, 32, 35, 37, 45, 47, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 126, 149, 151, 178, 189, 192, 194, 199, 202, 204, 205, 206, 208, 211, 212, 219, 220], "data_path": [0, 3, 4, 15, 16, 63, 64, 65, 68, 183, 212], "data": [0, 2, 3, 4, 5, 6, 8, 10, 11, 12, 14, 16, 18, 19, 20, 21, 22, 24, 26, 37, 38, 39, 42, 49, 50, 56, 57, 61, 62, 64, 69, 73, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 124, 126, 127, 129, 130, 132, 133, 136, 137, 139, 140, 143, 145, 147, 148, 149, 151, 159, 169, 180, 182, 183, 186, 188, 189, 191, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220], "summari": [0, 2, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 139, 178, 180, 181, 182, 183, 185, 188, 189, 192, 194, 195, 198, 200, 201, 202, 203, 205, 206, 210, 211, 212], "note": [0, 1, 3, 4, 16, 18, 19, 20, 21, 22, 24, 27, 31, 35, 38, 45, 56, 57, 61, 62, 117, 124, 127, 134, 146, 148, 149, 151, 158, 176, 178, 184, 196, 198, 199, 202, 203, 204, 205, 208, 215, 216, 219, 220], "mandatori": [0, 5, 8], "befor": [0, 1, 5, 7, 11, 16, 17, 18, 19, 20, 21, 22, 24, 27, 31, 35, 46, 56, 57, 59, 61, 62, 117, 149, 176, 178, 181, 183, 188, 189, 190, 191, 209, 214, 216], "backend": [0, 1, 4, 11, 16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 32, 45, 46, 56, 57, 61, 62, 63, 64, 70, 72, 75, 77, 80, 85, 90, 92, 95, 101, 103, 107, 112, 117, 124, 127, 146, 199], "other": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 16, 18, 19, 20, 21, 22, 24, 31, 32, 45, 50, 56, 57, 59, 61, 62, 72, 75, 77, 90, 92, 101, 103, 117, 118, 124, 127, 146, 149, 158, 169, 178, 179, 181, 189, 193, 195, 197, 198, 199, 205, 209, 211, 212, 217, 219, 220], "function": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 34, 37, 38, 39, 40, 41, 45, 46, 47, 48, 51, 52, 54, 55, 56, 57, 59, 61, 62, 64, 65, 67, 75, 76, 81, 82, 83, 90, 91, 102, 108, 109, 112, 113, 117, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 143, 145, 147, 148, 149, 151, 158, 176, 178, 181, 183, 189, 192, 193, 196, 197, 204, 206, 209, 217, 219, 220], "behav": [0, 2, 6, 7, 8, 9, 10, 149, 201], "memori": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24, 26, 27, 31, 37, 46, 56, 57, 61, 62, 63, 64, 69, 74, 75, 79, 90, 94, 95, 100, 101, 105, 112, 116, 117, 181, 185, 194, 203, 204, 205, 207, 208, 211, 217, 218], "follow": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 32, 48, 56, 57, 59, 61, 62, 72, 75, 77, 90, 92, 101, 103, 117, 124, 127, 139, 146, 176, 178, 180, 181, 188, 191, 194, 196, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 214, 215, 216, 218], "set": [0, 1, 2, 3, 6, 7, 8, 9, 16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 32, 35, 37, 39, 44, 45, 46, 47, 50, 51, 56, 57, 59, 61, 62, 75, 77, 90, 92, 101, 103, 117, 123, 124, 126, 127, 128, 130, 132, 134, 136, 139, 142, 146, 147, 148, 149, 151, 160, 176, 189, 191, 192, 193, 194, 195, 197, 199, 201, 202, 203, 204, 205, 208, 209, 211, 212, 213, 217], "name": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 16, 18, 19, 20, 21, 22, 24, 27, 29, 31, 35, 39, 44, 47, 56, 57, 59, 61, 62, 63, 64, 68, 112, 113, 117, 118, 124, 126, 127, 129, 148, 151, 169, 180, 182, 185, 188, 189, 191, 193, 201, 202, 204, 206, 210, 212, 219, 220], "descript": [0, 2, 5, 6, 7, 8, 9, 10, 14, 43, 123, 169, 170, 171, 172, 181, 188, 189, 191, 197, 198, 206, 211, 219, 220], "default": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 18, 19, 20, 21, 22, 24, 27, 29, 31, 32, 35, 38, 39, 42, 44, 45, 46, 51, 56, 57, 61, 62, 64, 69, 74, 75, 77, 79, 80, 84, 90, 92, 94, 95, 100, 101, 103, 105, 107, 111, 112, 116, 117, 118, 123, 124, 126, 127, 132, 136, 146, 149, 151, 169, 189, 192, 199, 204, 205, 206, 208, 209, 210, 211], "number": [0, 1, 5, 7, 8, 9, 10, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 45, 46, 48, 51, 56, 57, 61, 62, 64, 69, 71, 74, 75, 77, 79, 80, 84, 90, 92, 94, 95, 100, 101, 103, 105, 107, 111, 112, 113, 116, 117, 118, 124, 126, 127, 132, 134, 137, 139, 146, 151, 158, 159, 160, 169, 178, 180, 188, 193, 205, 206, 211, 217, 219, 220], "dimens": [0, 1, 2, 5, 6, 7, 8, 16, 18, 19, 20, 21, 22, 24, 25, 56, 57, 61, 62, 117, 124, 126, 127, 134, 159, 184, 219, 220], "alwai": [0, 1, 5, 7, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 47, 56, 57, 61, 62, 117, 160, 182, 188, 189, 190, 196, 197, 199, 202, 204, 208, 219, 220], "folder": [0, 16, 18, 19, 20, 21, 22, 24, 44, 47, 56, 57, 61, 62, 117], "where": [0, 2, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 35, 37, 44, 45, 47, 54, 56, 57, 61, 62, 117, 124, 127, 146, 147, 158, 160, 183, 184, 188, 192, 201, 202, 205, 209, 211, 216, 217], "locat": [0, 4, 8, 14, 124, 125, 127, 141, 149, 150, 197, 199, 211, 219, 220], "A": [0, 1, 3, 4, 5, 10, 16, 18, 19, 20, 21, 22, 24, 27, 31, 32, 45, 46, 50, 51, 55, 56, 57, 59, 60, 61, 62, 82, 117, 124, 151, 178, 180, 188, 189, 191, 193, 197, 201, 202, 205, 206, 207, 208, 215, 219, 220], "random": [0, 1, 4, 5, 7, 9, 11, 12, 16, 18, 19, 20, 21, 22, 24, 47, 51, 56, 57, 61, 62, 117, 151, 180, 194, 195, 201, 204, 205, 208, 212, 213, 214, 217], "temp": [0, 9], "metric": [0, 1, 2, 4, 5, 6, 7, 8, 10, 15, 16, 18, 19, 20, 21, 22, 24, 31, 32, 45, 56, 57, 61, 62, 63, 64, 65, 75, 77, 90, 92, 101, 103, 117, 124, 127, 146, 153, 158, 183, 197, 208, 212, 219, 220], "distanc": [0, 1, 2, 3, 5, 6, 7, 8, 10, 14, 15, 16, 18, 19, 20, 21, 22, 24, 31, 32, 45, 56, 57, 61, 62, 63, 75, 76, 77, 90, 91, 92, 95, 96, 97, 101, 102, 103, 112, 113, 117, 124, 127, 146, 152, 159, 180, 208], "dure": [0, 1, 3, 4, 5, 7, 10, 16, 18, 19, 20, 21, 22, 24, 44, 55, 56, 57, 61, 62, 117, 124, 183, 194, 217], "cosin": [0, 2, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 31, 32, 45, 56, 57, 61, 62, 64, 65, 75, 76, 77, 90, 92, 95, 96, 101, 102, 103, 117, 146, 152, 153, 154, 156, 157, 181, 183, 201, 208, 212], "dot": [0, 7, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 197, 202], "euclidean": [0, 4, 7, 16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117, 152, 153, 154, 156, 157, 208], "ef_construct": [0, 1, 2, 6, 7, 8, 10, 15, 16, 20, 56, 57, 61, 63, 64, 65, 75, 76, 90, 91, 95, 96, 101, 102, 112, 113, 117, 212], "size": [0, 1, 2, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 30, 35, 38, 41, 42, 46, 47, 56, 57, 61, 62, 64, 68, 117, 124, 126, 127, 136, 139, 178, 180, 181, 184, 205, 206, 211], "dynam": [0, 1, 2, 5, 6, 10, 197, 217, 219, 220], "list": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 31, 32, 35, 37, 41, 42, 44, 47, 49, 50, 51, 53, 55, 56, 57, 61, 62, 64, 65, 68, 69, 74, 75, 76, 77, 79, 80, 84, 90, 91, 92, 94, 95, 96, 100, 101, 102, 103, 105, 107, 111, 112, 113, 116, 117, 124, 125, 126, 127, 141, 142, 149, 150, 151, 158, 160, 179, 189, 193, 195, 197, 198, 199, 201, 202, 205, 207, 208, 214, 217, 218, 219, 220], "nearest": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 31, 32, 45, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 205, 206, 218], "neighbor": [0, 1, 2, 3, 4, 5, 6, 8, 10, 16, 18, 19, 20, 21, 22, 24, 31, 32, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 136, 198, 205, 206, 218], "construct": [0, 1, 2, 3, 5, 6, 7, 10, 124, 149, 188, 190, 191, 197, 202, 205, 207], "none": [0, 2, 3, 5, 6, 7, 8, 9, 10, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 31, 32, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 55, 56, 57, 61, 62, 64, 65, 68, 69, 73, 74, 75, 76, 77, 79, 80, 84, 90, 91, 92, 94, 95, 96, 100, 101, 102, 103, 105, 107, 108, 110, 111, 112, 113, 116, 117, 118, 123, 124, 125, 126, 127, 132, 136, 139, 140, 142, 146, 147, 148, 149, 150, 151, 158, 159, 160, 163, 164, 169, 170, 180, 181, 190, 193, 199, 203, 205, 206, 211, 212, 214], "valu": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 31, 32, 35, 42, 45, 46, 47, 50, 54, 56, 57, 59, 61, 62, 64, 69, 71, 74, 75, 77, 79, 80, 84, 90, 92, 94, 95, 100, 101, 103, 105, 107, 111, 112, 116, 117, 118, 120, 122, 123, 124, 127, 136, 137, 138, 140, 146, 147, 149, 151, 158, 159, 160, 164, 169, 170, 171, 172, 176, 181, 182, 183, 188, 189, 192, 193, 194, 197, 199, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 217], "packag": [0, 1, 148, 175, 177, 189, 195, 216, 217, 218], "ef_search": [0, 15, 16, 56, 63, 64, 65, 90, 91, 212], "max_connect": [0, 1, 10, 15, 16, 63, 64, 65, 112, 113, 117, 212], "bi": [0, 1], "direct": [0, 1, 68], "link": [0, 1], "creat": [0, 1, 11, 16, 18, 19, 20, 21, 22, 24, 25, 27, 29, 30, 31, 35, 37, 56, 57, 59, 61, 62, 68, 71, 117, 123, 124, 126, 127, 148, 149, 151, 179, 180, 181, 183, 188, 189, 190, 193, 195, 202, 204, 205, 212, 217], "everi": [0, 1, 4, 5, 16, 18, 19, 20, 21, 22, 24, 27, 31, 46, 47, 50, 56, 57, 61, 62, 117, 176, 205, 209], "new": [0, 1, 4, 5, 10, 16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 68, 71, 117, 123, 124, 127, 136, 146, 149, 151, 176, 191, 202, 203, 212, 217], "element": [0, 1, 10, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 37, 38, 39, 42, 45, 46, 51, 56, 57, 59, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 124, 127, 146, 158, 160, 178, 197, 199, 201, 202, 207, 208, 209, 211, 217, 219, 220], "n_compon": [0, 15, 16, 63, 64, 65], "output": [0, 4, 5, 8, 11, 16, 18, 19, 20, 21, 22, 24, 26, 27, 39, 46, 47, 51, 56, 57, 61, 62, 117, 124, 127, 134, 136, 139, 151, 176, 181, 183, 188, 199, 204, 214, 215, 216, 217], "pca": 0, "model": [0, 10, 16, 18, 19, 20, 21, 22, 24, 29, 31, 49, 53, 56, 57, 61, 62, 117, 124, 127, 136, 143, 145, 146, 149, 179, 180, 183, 188, 190, 191, 195, 196, 199, 204, 211, 219, 220], "should": [0, 3, 4, 5, 10, 11, 16, 18, 19, 20, 21, 22, 24, 26, 27, 32, 43, 46, 56, 57, 61, 62, 72, 117, 124, 126, 127, 134, 139, 147, 149, 176, 178, 185, 191, 194, 199, 205, 208, 211, 212, 216, 217, 218], "posit": [0, 1, 3, 4, 10, 16, 18, 20, 21, 22, 56, 57, 61, 62, 64, 69, 73, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 158, 197, 219, 220], "less": [0, 1, 5, 7, 8, 10, 151, 176, 199, 206, 211], "than": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 27, 35, 56, 57, 61, 62, 117, 124, 127, 147, 151, 183, 193, 195, 202, 205, 206, 209, 211, 214, 219, 220], "list_lik": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 16, 20, 56, 57, 61, 62, 63, 64, 65, 73, 75, 76, 90, 91, 95, 96, 101, 102, 107, 108, 112, 113, 117], "control": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 176, 184, 199, 203], "order": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 18, 19, 20, 21, 22, 24, 27, 35, 50, 56, 57, 61, 62, 117, 123, 151, 158, 185, 202], "databas": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 62, 68, 151, 176, 183, 218], "disabl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 43], "break": [0, 2, 5, 6, 7, 8, 9, 10, 176, 201], "improv": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 209, 215, 217], "perform": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 16, 18, 19, 20, 21, 22, 24, 32, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 149, 151, 179, 197, 205, 209, 216, 217, 219, 220], "true": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 18, 19, 20, 21, 22, 24, 31, 37, 39, 41, 43, 44, 45, 47, 56, 57, 59, 61, 62, 64, 65, 68, 73, 75, 76, 90, 91, 95, 96, 101, 102, 107, 108, 112, 113, 117, 123, 124, 126, 127, 136, 138, 139, 148, 149, 151, 160, 185, 187, 188, 189, 194, 195, 199, 201, 202, 203, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215], "root_id": [0, 2, 5, 7, 8, 9, 10, 15, 16, 20, 56, 57, 61, 62, 63, 64, 65, 75, 76, 90, 91, 95, 96, 101, 102, 107, 108, 112, 113, 117], "boolean": [0, 1, 2, 5, 6, 7, 8, 9, 10, 20, 56, 75, 76, 90, 91, 206, 219, 220], "flag": [0, 2, 3, 5, 6, 7, 8, 9, 10], "indic": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 136, 139, 148, 159, 184, 194, 219, 220], "whether": [0, 2, 5, 6, 7, 8, 9, 10, 16, 18, 19, 20, 21, 22, 24, 32, 56, 57, 59, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 126, 127, 134, 179, 192, 197, 203, 204, 209, 215], "tag": [0, 1, 4, 5, 7, 9, 10, 14, 16, 18, 19, 20, 21, 22, 24, 27, 31, 32, 35, 39, 56, 57, 59, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 125, 127, 134, 141, 148, 149, 150, 180, 181, 182, 183, 184, 189, 191, 194, 197, 199, 201, 205, 206, 211, 212, 219, 220], "chunk": [0, 2, 5, 7, 8, 9, 10, 14, 15, 16, 19, 20, 21, 22, 24, 50, 55, 56, 57, 61, 62, 117, 124, 125, 127, 136, 137, 141, 149, 150, 178, 179, 180, 181, 184, 188, 189, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 209, 211, 212, 213, 217, 219, 220], "level": [0, 1, 2, 3, 7, 8, 9, 10, 12, 16, 18, 19, 20, 21, 22, 24, 32, 50, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 151, 177, 178, 179, 180, 181, 191, 197, 201, 202, 209, 211, 212, 217, 219, 220], "check": [0, 3, 4, 8, 10, 12, 16, 18, 19, 20, 21, 22, 24, 27, 35, 56, 57, 59, 61, 62, 117, 160, 181, 193, 199, 202, 205, 211, 212, 214, 218], "sourc": [0, 3, 8, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 163, 164, 169, 170, 171, 172, 173, 177, 180, 210], "code": [0, 1, 2, 4, 5, 6, 8, 10, 11, 13, 16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117, 124, 127, 131, 166, 168, 190, 191, 193, 203, 205, 209, 210, 211, 217, 218], "restrict": [0, 2, 5, 6, 7, 8, 10, 59, 124, 127, 148, 177, 188, 202, 211, 214], "user": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 13, 16, 19, 22, 57, 62, 117, 124, 176, 178, 185, 191, 195, 206, 207, 208, 214], "defin": [0, 2, 3, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 39, 55, 56, 57, 61, 62, 117, 123, 126, 178, 180, 181, 183, 188, 191, 192, 193, 199, 203, 205, 206, 208, 214, 219, 220], "guidelin": [0, 2, 6, 7, 10], "provid": [0, 2, 3, 4, 6, 8, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 25, 28, 31, 32, 33, 34, 41, 45, 46, 50, 51, 52, 56, 57, 59, 61, 62, 65, 72, 75, 76, 77, 78, 81, 82, 90, 92, 101, 102, 103, 104, 108, 113, 115, 117, 124, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 143, 145, 146, 147, 148, 158, 178, 183, 189, 191, 196, 197, 199, 201, 202, 205, 209, 211, 217], "repositori": [0, 1, 190], "consid": [0, 1, 2, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 31, 32, 45, 54, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 126, 127, 134, 146, 158, 183, 189, 191, 202, 203, 205, 206, 207], "certain": [0, 2, 4, 6, 10, 16, 18, 19, 20, 21, 22, 24, 51, 56, 57, 61, 62, 117, 178, 198, 202, 214], "price": [0, 2, 4, 5, 6, 7, 8, 10, 16, 19], "want": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 16, 18, 19, 20, 21, 22, 24, 44, 47, 50, 56, 57, 61, 62, 72, 117, 124, 127, 136, 151, 176, 178, 181, 182, 183, 191, 192, 193, 194, 195, 197, 199, 201, 202, 204, 205, 209, 210, 211, 214, 216], "all": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 24, 25, 31, 32, 37, 39, 44, 45, 47, 50, 54, 55, 56, 57, 59, 61, 62, 75, 77, 90, 92, 101, 103, 117, 118, 124, 127, 132, 136, 142, 146, 147, 148, 149, 158, 160, 169, 176, 178, 181, 183, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 201, 202, 203, 205, 206, 207, 209, 213, 214, 215, 216, 217, 218], "lower": [0, 1, 2, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 199, 205], "equal": [0, 1, 2, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 25, 47, 56, 57, 61, 62, 117, 205, 206], "some": [0, 1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 118, 124, 169, 176, 177, 178, 179, 181, 183, 189, 191, 195, 198, 201, 205, 206, 208, 209, 210, 214, 215, 216, 217], "max_pric": [0, 2, 4, 5, 6, 7, 8, 10, 16], "index": [0, 1, 2, 3, 5, 6, 7, 10, 15, 16, 17, 18, 19, 20, 21, 22, 24, 28, 32, 34, 47, 52, 54, 56, 57, 61, 62, 63, 64, 69, 70, 71, 73, 74, 75, 77, 79, 80, 84, 90, 92, 94, 95, 100, 101, 103, 105, 107, 111, 112, 116, 117, 124, 127, 147, 151, 180, 183, 197, 212, 216, 217, 218, 219, 220], "numpi": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 29, 37, 39, 56, 57, 61, 62, 117, 124, 126, 127, 132, 142, 152, 153, 158, 159, 160, 181, 183, 189, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 207, 208, 212, 213, 216, 217, 218], "np": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 25, 32, 41, 56, 57, 61, 62, 117, 146, 153, 154, 156, 157, 160, 180, 181, 183, 193, 195, 199, 200, 201, 204, 205, 208, 212, 213, 214, 217], "3": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 27, 46, 56, 57, 61, 62, 117, 124, 160, 188, 189, 193, 194, 195, 199, 201, 202, 203, 205, 208, 209, 210, 213, 214, 216, 217, 218], "column": [0, 2, 4, 5, 6, 7, 8, 10, 15, 16, 18, 19, 20, 21, 22, 24, 39, 43, 56, 57, 61, 62, 63, 64, 65, 75, 76, 90, 91, 95, 96, 101, 102, 112, 113, 117, 182, 188, 189, 191, 212, 217], "float": [0, 2, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 31, 32, 41, 43, 45, 47, 56, 57, 61, 62, 64, 65, 75, 76, 77, 90, 91, 92, 95, 96, 101, 102, 103, 112, 113, 117, 124, 125, 126, 127, 132, 136, 141, 146, 149, 150, 154, 156, 157, 158, 159, 160, 169, 170, 171, 172, 197, 219, 220], "extend": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 15, 16, 17, 18, 19, 20, 21, 22, 56, 57, 61, 62, 63, 64, 69, 70, 73, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 183, 203, 205, 209, 212], "id": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 14, 16, 18, 19, 20, 21, 22, 24, 27, 31, 32, 35, 45, 47, 56, 57, 61, 62, 68, 73, 75, 77, 90, 92, 101, 103, 112, 113, 117, 124, 125, 127, 136, 139, 141, 146, 149, 150, 151, 178, 180, 181, 182, 183, 184, 188, 193, 194, 195, 197, 198, 199, 200, 201, 203, 205, 206, 208, 210, 211, 212, 213, 214, 215, 218, 219, 220], "f": [0, 2, 4, 5, 6, 7, 8, 10, 16, 19, 59, 180, 181, 184, 208, 209, 217], "r": [0, 2, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 37, 41, 55, 56, 57, 61, 62, 117, 126, 158, 183, 188, 202, 206, 210, 217], "rang": [0, 2, 4, 5, 6, 7, 8, 10, 16, 17, 18, 19, 20, 21, 22, 24, 27, 31, 45, 46, 56, 57, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 124, 127, 146, 159, 203, 205, 206, 210, 212, 217], "print": [0, 2, 4, 5, 6, 7, 8, 10, 12, 16, 18, 19, 20, 21, 22, 24, 27, 46, 47, 56, 57, 61, 62, 117, 124, 127, 139, 177, 178, 180, 181, 183, 184, 188, 189, 190, 192, 193, 194, 199, 201, 202, 203, 204, 205, 206, 208, 209, 211, 213, 214, 215, 218], "nindex": [0, 2, 5, 6, 7, 8, 10], "n": [0, 1, 2, 5, 6, 7, 8, 10, 153, 183, 217, 219, 220], "tags__pric": [0, 2, 5, 6, 7, 8, 10], "t": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 37, 38, 39, 40, 41, 42, 44, 46, 49, 50, 53, 55, 56, 57, 61, 62, 72, 117, 118, 123, 124, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 140, 142, 143, 145, 146, 147, 148, 169, 178, 183, 189, 191, 194, 195, 199, 201, 203, 204, 205, 208, 209, 211, 214, 217], "Then": [0, 2, 5, 6, 7, 8, 10, 181, 185, 204, 211, 214], "whose": [0, 2, 6, 8, 10, 124, 127, 136, 206, 216], "appli": [0, 1, 2, 6, 8, 10, 15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 32, 38, 39, 46, 50, 55, 56, 57, 59, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 136, 158, 176, 181, 183, 189, 191, 201, 205, 209, 214], "n_limit": [0, 2, 4, 5, 6, 7, 8, 10, 16], "4": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 16, 160, 188, 195, 202, 203, 205, 208, 209], "lte": [0, 2, 4, 6, 7, 16, 206], "result": [0, 2, 3, 4, 5, 6, 7, 8, 11, 16, 18, 19, 20, 21, 22, 24, 27, 31, 32, 45, 46, 50, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 134, 146, 188, 199, 201, 205, 208, 209, 211, 213, 217], "return": [0, 2, 3, 5, 6, 8, 11, 12, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 61, 62, 64, 68, 69, 71, 74, 75, 77, 79, 80, 81, 84, 90, 92, 94, 95, 96, 97, 98, 100, 101, 103, 105, 107, 110, 111, 112, 113, 116, 117, 118, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 153, 154, 156, 157, 158, 159, 160, 163, 164, 169, 171, 172, 181, 183, 192, 198, 201, 202, 205, 209, 212, 216, 217], "verifi": [0, 2, 6, 8, 10], "most": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 45, 50, 56, 57, 61, 62, 117, 124, 127, 146, 176, 180, 181, 191, 193, 194, 199, 202, 211, 216, 218], "satisfi": [0, 2, 6, 8, 10, 124, 127, 130, 132, 147], "condit": [0, 1, 2, 6, 8, 10, 59, 60], "0": [0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 16, 18, 19, 20, 21, 22, 24, 25, 30, 41, 45, 47, 48, 54, 56, 57, 61, 62, 71, 107, 108, 117, 124, 126, 127, 132, 136, 137, 146, 147, 153, 158, 159, 160, 188, 189, 190, 193, 195, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 216, 217, 218], "1": [0, 1, 2, 4, 5, 6, 7, 8, 10, 12, 16, 18, 19, 20, 21, 22, 24, 31, 45, 47, 48, 54, 55, 56, 57, 61, 62, 68, 71, 117, 123, 124, 126, 127, 132, 136, 137, 139, 146, 147, 151, 158, 159, 160, 176, 185, 188, 189, 190, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220], "2": [0, 1, 2, 4, 5, 6, 7, 8, 10, 12, 16, 18, 19, 20, 21, 22, 24, 49, 50, 54, 55, 56, 57, 59, 61, 62, 117, 124, 127, 129, 143, 153, 154, 156, 157, 160, 188, 189, 193, 194, 195, 199, 201, 202, 203, 205, 206, 208, 209, 210, 211, 214, 217, 219, 220], "up": [0, 1, 2, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 39, 56, 57, 61, 62, 117, 207, 209, 213, 216], "9": [0, 1, 2, 5, 6, 7, 8, 10, 19, 22, 160, 205], "ha": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 16, 18, 19, 20, 21, 22, 24, 31, 38, 47, 56, 57, 61, 62, 64, 69, 74, 75, 79, 90, 94, 95, 100, 101, 105, 112, 116, 117, 124, 127, 136, 139, 178, 180, 181, 182, 188, 189, 191, 194, 195, 197, 201, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 216], "we": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 151, 178, 181, 183, 184, 189, 190, 191, 194, 195, 199, 201, 202, 203, 204, 205, 207, 208, 209, 214, 215, 217, 218], "ones": [0, 2, 4, 5, 6, 7, 8, 10, 19, 179, 202], "8": [0, 1, 2, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 38, 39, 42, 56, 57, 61, 62, 117, 124, 126, 127, 130, 132, 147, 160, 193, 206, 219, 220], "must": [0, 2, 3, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 32, 56, 57, 61, 62, 72, 75, 77, 90, 92, 101, 103, 117, 199, 202, 209, 212, 219, 220], "As": [0, 1, 2, 3, 4, 5, 6, 10, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 178, 183, 193, 199, 201, 203, 205, 209, 216, 217], "an": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 32, 35, 37, 46, 47, 55, 56, 57, 59, 61, 62, 75, 77, 90, 92, 101, 103, 112, 113, 117, 120, 123, 124, 126, 127, 129, 134, 136, 137, 139, 147, 149, 176, 178, 180, 181, 183, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 205, 206, 207, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220], "let": [0, 2, 3, 4, 6, 7, 8, 10, 11, 12, 153, 177, 178, 179, 181, 183, 184, 189, 190, 191, 193, 195, 196, 197, 199, 201, 202, 204, 205, 206, 207, 208, 209, 211, 214, 217], "have": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 25, 55, 56, 57, 59, 61, 62, 117, 124, 127, 136, 158, 180, 181, 183, 184, 185, 188, 191, 194, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 213, 214, 216, 217, 218, 219, 220], "encod": [0, 2, 5, 6, 7, 8, 10, 15, 16, 18, 19, 20, 21, 22, 24, 38, 39, 42, 56, 57, 61, 62, 63, 90, 91, 117, 124, 126, 127, 130, 132, 140, 147, 148, 149, 183, 190, 219, 220], "inform": [0, 2, 4, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 39, 44, 47, 56, 57, 61, 62, 117, 151, 178, 185, 188, 189, 191, 193, 194, 195, 197, 199, 202, 203, 205, 214], "propos": [0, 2, 5, 6, 7, 8, 10], "implement": [0, 1, 2, 4, 5, 6, 7, 10, 11, 12, 16, 22, 29, 57, 62, 67, 69, 72, 74, 78, 79, 83, 84, 94, 104, 105, 109, 111, 115, 116, 117, 176, 202, 205, 207, 209, 211, 214], "7": [0, 1, 2, 4, 5, 6, 7, 8, 10, 160, 190, 203, 208, 216, 218, 219, 220], "np_queri": [0, 2, 4, 5, 6, 7, 8, 10, 19], "nqueri": [0, 2, 5, 6, 7, 8, 10], "limit": [0, 2, 3, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 31, 32, 38, 45, 56, 57, 59, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 146, 148, 183, 201, 205, 208, 217], "nembed": [0, 2, 5, 6, 7, 8, 10], "neighbour": [0, 2, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 61, 62, 117], "zip": [0, 2, 5, 6, 7, 10, 126], "tembed": [0, 2, 5, 6, 7, 8, 10], "6": [0, 1, 2, 4, 5, 6, 7, 8, 10, 158, 160, 183, 195, 202, 205, 208, 209, 217], "5": [0, 1, 2, 4, 5, 6, 7, 8, 10, 158, 160, 190, 195, 202, 203, 205, 206, 208, 209, 210, 211, 213], "one": [1, 3, 4, 5, 8, 11, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 31, 35, 45, 46, 48, 50, 55, 56, 57, 61, 62, 68, 117, 124, 126, 127, 137, 146, 158, 178, 183, 188, 189, 191, 192, 193, 194, 199, 201, 202, 204, 205, 206, 208, 209, 211, 212, 213, 215, 216, 217], "base": [1, 2, 3, 6, 7, 8, 10, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 159, 169, 170, 171, 172, 173, 175, 176, 178, 181, 183, 184, 191, 193, 202, 205, 206, 208, 214], "sift1m": 1, "dataset": [1, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 124, 126, 127, 136, 178, 181, 205], "contain": [1, 2, 3, 4, 6, 8, 10, 12, 16, 18, 19, 20, 21, 22, 24, 27, 30, 31, 32, 35, 39, 45, 50, 55, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 126, 127, 136, 139, 146, 151, 178, 181, 182, 183, 184, 189, 191, 193, 195, 199, 201, 202, 205, 207, 210, 213, 214, 216, 217, 219, 220], "object": [1, 2, 3, 4, 6, 10, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 73, 75, 76, 77, 82, 90, 91, 92, 95, 96, 97, 101, 102, 103, 107, 108, 112, 113, 114, 117, 118, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 160, 170, 172, 173, 176, 180, 185, 186, 189, 190, 191, 192, 193, 194, 196, 197, 199, 201, 206, 207, 208, 211, 215, 217], "each": [1, 3, 4, 5, 7, 9, 10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 32, 35, 45, 46, 47, 48, 55, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 126, 127, 134, 136, 137, 146, 153, 154, 156, 157, 160, 178, 179, 180, 182, 183, 184, 188, 189, 191, 192, 193, 194, 195, 197, 199, 201, 202, 205, 208, 209, 211, 212, 219, 220], "128": [1, 2, 5, 6, 7, 8, 204, 212], "l2": [1, 5, 6, 8, 10], "summar": [1, 188, 202, 211, 216], "below": [1, 4, 10, 189, 197, 198, 202, 205, 209, 211, 215, 217], "usag": [1, 3, 4, 16, 18, 19, 20, 21, 22, 24, 27, 37, 46, 56, 57, 61, 62, 117, 123, 151, 176, 211], "client": [1, 2, 3, 5, 6, 7, 8, 10, 11, 15, 16, 18, 19, 20, 21, 22, 24, 32, 56, 57, 61, 62, 63, 75, 77, 90, 92, 95, 96, 97, 98, 100, 101, 103, 117, 190, 214], "version": [1, 2, 3, 5, 6, 7, 8, 10, 72, 151, 176, 210, 211, 216, 218], "In": [1, 3, 4, 5, 10, 11, 16, 18, 19, 20, 21, 22, 24, 26, 27, 32, 37, 46, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 147, 178, 180, 182, 184, 185, 188, 189, 190, 191, 193, 195, 197, 199, 201, 203, 205, 207, 208, 211, 214, 215, 216, 217, 218, 219, 220], "18": [1, 208], "sqlite": [1, 3, 4, 14, 15, 19, 63], "weaviat": [1, 4, 14, 15, 19, 63, 218], "16": [1, 8, 10, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 90, 91, 117, 201, 209], "qdrant": [1, 4, 5, 14, 15, 63, 218], "annlit": [1, 4, 14, 15, 19, 63, 183, 212, 218], "anlit": 1, "13": 1, "elasticsearch": [1, 4, 19, 20, 218], "redi": [1, 4, 14, 15, 19, 63, 218], "focus": [1, 217], "add": [1, 10, 18, 19, 21, 149, 178, 181, 188, 198, 199, 202, 203, 205, 212], "capabl": 1, "when": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 32, 35, 37, 39, 45, 46, 47, 50, 55, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 123, 124, 126, 127, 136, 137, 146, 159, 176, 178, 181, 183, 184, 189, 192, 193, 194, 198, 199, 200, 201, 202, 204, 205, 208, 210, 211, 212, 214, 217, 219, 220], "applic": [1, 2, 6, 8, 178, 183, 217], "read": [1, 2, 3, 5, 6, 7, 8, 10, 11, 16, 18, 19, 20, 21, 22, 24, 39, 56, 57, 61, 62, 117, 124, 126, 127, 130, 132, 176, 182, 186, 187, 188, 189, 191, 193, 194, 196, 199, 203, 211, 214, 217, 218], "exist": [1, 3, 5, 8, 16, 18, 19, 20, 21, 22, 24, 26, 27, 35, 44, 46, 47, 50, 56, 57, 59, 61, 62, 117, 185, 190, 191, 198, 206, 210], "some_id": 1, "updat": [1, 2, 3, 4, 6, 10, 70, 72, 73, 149, 159, 202, 212, 217], "delet": [1, 3, 4, 9, 10, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 201, 202, 205, 212], "del": [1, 201, 202], "find": [1, 2, 4, 6, 8, 15, 16, 18, 19, 20, 21, 22, 24, 56, 57, 59, 61, 62, 63, 64, 75, 80, 85, 90, 95, 101, 112, 117, 159, 179, 183, 199, 204, 206, 209, 212, 215, 216], "search": [1, 3, 10, 11, 16, 18, 19, 20, 21, 22, 24, 32, 45, 51, 56, 57, 61, 62, 75, 77, 90, 92, 101, 102, 103, 117, 178, 179, 190, 191, 195, 197, 218, 219, 220], "filter": [1, 11, 16, 18, 19, 20, 21, 22, 24, 27, 32, 35, 45, 55, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 126, 151, 199, 202, 211], "side": [1, 2, 4, 6, 8, 16, 18, 19, 20, 21, 22, 24, 31, 32, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 147, 197, 205, 214, 217], "possibl": [1, 5, 7, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 194, 205, 216], "describ": [1, 124, 127, 148, 153, 176, 180, 193, 194, 199, 205, 206, 211], "queri": [1, 3, 4, 5, 7, 11, 16, 18, 19, 20, 21, 22, 24, 31, 32, 45, 56, 57, 60, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 139, 158, 181, 183, 212, 218], "vector": [1, 3, 16, 18, 19, 20, 21, 22, 24, 32, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 181, 183, 195, 204, 218], "approxim": [1, 2, 3, 4, 5, 6, 8, 16, 18, 19, 20, 21, 22, 24, 32, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117], "abov": [1, 3, 4, 5, 10, 11, 59, 72, 181, 189, 191, 196, 205, 208, 209, 210, 211, 217], "ar": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 25, 27, 31, 35, 37, 38, 45, 50, 55, 56, 57, 59, 61, 62, 64, 69, 72, 74, 75, 79, 90, 94, 95, 100, 101, 105, 112, 116, 117, 118, 124, 126, 127, 134, 136, 147, 148, 149, 158, 160, 169, 176, 177, 178, 179, 180, 181, 182, 183, 187, 189, 191, 193, 194, 199, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220], "often": [1, 3, 4, 10, 178, 182, 183, 195, 196, 197, 199, 209, 211, 217, 219, 220], "atom": 1, "oper": [1, 3, 4, 5, 10, 16, 18, 19, 20, 21, 22, 24, 25, 56, 57, 61, 62, 72, 117, 216, 219, 220], "high": [1, 3, 10, 12, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 177, 190, 191, 217], "api": [1, 3, 5, 7, 10, 11, 124, 127, 148, 178, 183, 187, 190, 191, 193, 194, 199, 202, 204, 207, 209, 211, 214, 217, 218], "henc": [1, 178, 180, 182, 209, 217], "understand": [1, 194, 214, 215, 217], "give": [1, 3, 4, 16, 18, 19, 20, 21, 22, 24, 38, 47, 56, 57, 61, 62, 117, 123, 178, 194, 199, 201, 209, 214, 216], "good": [1, 10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 182, 217], "estim": [1, 211], "differ": [1, 3, 4, 8, 16, 18, 19, 20, 21, 22, 24, 45, 47, 55, 56, 57, 61, 62, 117, 124, 127, 136, 137, 181, 183, 192, 194, 199, 201, 205, 206, 207, 209, 211, 217], "own": [1, 124, 127, 136, 191, 205, 206, 209, 212, 216, 217], "hnsw": [1, 2, 5, 6, 7, 8, 10, 56, 61, 90, 91, 101, 102], "algorithm": [1, 8, 10, 15, 16, 18, 19, 20, 21, 22, 24, 26, 37, 56, 57, 61, 62, 63, 90, 91, 117, 151, 178, 180, 191, 211], "paramet": [1, 2, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 35, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 61, 62, 64, 68, 69, 74, 75, 77, 79, 80, 84, 90, 92, 94, 95, 100, 101, 103, 105, 107, 111, 112, 116, 117, 118, 123, 124, 126, 127, 129, 130, 132, 133, 134, 136, 137, 139, 140, 142, 143, 145, 146, 147, 148, 149, 151, 153, 154, 156, 157, 158, 159, 160, 169, 184, 185, 187, 189, 199, 211, 212, 213, 219, 220], "build": [1, 2, 5, 6, 7, 8, 10, 11, 30, 43, 124, 127, 140, 143, 145, 180, 183, 189, 199, 201, 203, 211, 214, 217, 218], "time": [1, 2, 4, 6, 7, 8, 12, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 151, 181, 183, 184, 191, 199, 208, 211, 217], "accuraci": [1, 2, 6, 10], "higher": [1, 10, 205], "lead": [1, 4, 10, 194], "longer": [1, 4, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 124, 127, 147, 183], "better": [1, 3, 4, 16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117, 178, 200, 202, 209, 211, 216], "qualiti": 1, "m": [1, 2, 5, 6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 63, 75, 76, 90, 91, 95, 96, 101, 102, 117, 189, 201, 202, 205, 208, 216], "maximum": [1, 10, 16, 18, 19, 20, 21, 22, 24, 31, 32, 45, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 126, 127, 146, 147, 158, 188, 199, 211], "connect": [1, 4, 9, 10, 15, 57, 59, 62, 63, 107, 108, 112, 113, 117, 124, 127, 147, 210], "work": [1, 3, 4, 5, 16, 18, 19, 20, 21, 22, 24, 26, 27, 37, 46, 56, 57, 61, 62, 117, 126, 151, 178, 181, 189, 191, 193, 197, 199, 201, 202, 204, 205, 207, 208, 209, 211, 212, 214, 215, 217, 218], "intrins": [1, 212], "dimension": [1, 2, 5, 6, 8, 124, 127, 134, 136, 153, 195, 217], "while": [1, 10, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 178, 194, 198, 205, 217], "low": [1, 10, 176, 190], "ef": [1, 10, 15, 63, 112, 113, 117], "more": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 16, 18, 19, 20, 21, 22, 24, 37, 44, 50, 56, 57, 61, 62, 72, 117, 126, 176, 177, 181, 182, 183, 186, 187, 188, 189, 193, 194, 195, 199, 201, 202, 204, 205, 207, 209, 211, 214, 217, 218, 219, 220], "slower": [1, 10, 16, 18, 19, 20, 21, 22, 24, 42, 56, 57, 61, 62, 117], "interest": [1, 178, 202, 205, 212, 214, 218], "singl": [1, 2, 3, 6, 10, 12, 16, 18, 19, 20, 21, 22, 24, 27, 46, 47, 55, 56, 57, 61, 62, 72, 117, 124, 127, 139, 178, 186, 189, 199, 208, 210, 214], "six": 1, "three": [1, 4, 5, 178, 180, 183, 184, 193, 201, 202, 208, 209, 217], "measur": [1, 158], "evalu": [1, 4, 14, 15, 16, 18, 19, 20, 21, 22, 24, 29, 45, 56, 57, 58, 59, 60, 61, 62, 117, 124, 125, 127, 141, 149, 150, 152, 197, 198, 199, 207, 211, 217, 218, 219, 220], "repeatedli": [1, 4, 180], "final": [1, 3, 10, 11, 16, 18, 19, 20, 21, 22, 24, 26, 50, 56, 57, 59, 61, 62, 117, 177, 178, 181, 191, 206, 207, 214], "averag": [1, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 158, 205, 217], "report": 1, "now": [1, 3, 4, 10, 11, 12, 176, 178, 183, 190, 192, 201, 202, 203, 204, 205, 209, 211, 214, 216, 217], "elabor": 1, "our": [1, 4, 16, 19, 22, 57, 62, 117, 124, 181, 184, 188, 191, 202, 204, 205, 209], "first": [1, 4, 10, 16, 17, 18, 19, 20, 21, 22, 24, 25, 44, 47, 50, 56, 57, 59, 61, 62, 64, 69, 71, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 124, 127, 130, 148, 151, 158, 159, 160, 178, 181, 182, 183, 184, 188, 189, 191, 197, 199, 201, 202, 204, 205, 206, 209, 216, 217, 218], "statist": 1, "000": [1, 205, 209, 217], "structur": [1, 3, 10, 16, 18, 19, 20, 21, 22, 24, 31, 38, 47, 56, 57, 61, 62, 117, 124, 127, 139, 180, 181, 188, 189, 191, 192, 194, 197, 200, 205, 207, 215, 217, 218, 219, 220], "94ee6627ee7f582e5e28124e78c3d2f9": 1, "49841760378680844": 1, "703959752118305": 1, "6920759535687985": 1, "10248648858410625": 1, "k": [1, 16, 18, 19, 20, 21, 22, 24, 31, 51, 56, 57, 61, 62, 117, 158, 159, 205, 208, 218], "do": [1, 2, 3, 4, 5, 6, 8, 10, 12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 35, 44, 46, 50, 56, 57, 59, 61, 62, 72, 117, 124, 127, 136, 178, 181, 182, 183, 184, 188, 191, 192, 193, 195, 197, 199, 202, 204, 208, 209, 211, 214, 216, 218], "exhaust": [1, 10, 16, 18, 19, 20, 21, 22, 24, 32, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117], "instead": [1, 4, 5, 10, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 126, 151, 178, 188, 189, 191, 192, 193, 194, 195, 199, 201, 205, 209, 216, 217, 219, 220], "thei": [1, 3, 4, 11, 16, 18, 19, 20, 21, 22, 24, 44, 50, 56, 57, 61, 62, 72, 117, 123, 176, 180, 181, 184, 191, 193, 194, 198, 201, 202, 205, 211, 214, 216], "slowest": 1, "were": [1, 4, 202], "conduct": [1, 178, 209, 211, 217], "aw": 1, "ec2": 1, "t2": 1, "2xlarg": 1, "instanc": [1, 3, 10, 71, 123, 149], "intel": 1, "xeon": 1, "cpu": [1, 12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 31, 45, 46, 56, 57, 61, 62, 117, 124, 127, 146, 153, 156, 157, 190, 202, 204, 208, 216, 218], "e5": 1, "2676": 1, "v3": [1, 5, 10], "40ghz": 1, "python": [1, 3, 4, 16, 18, 19, 20, 21, 22, 24, 37, 42, 56, 57, 61, 62, 117, 124, 126, 127, 140, 148, 177, 187, 189, 191, 193, 195, 197, 199, 201, 202, 203, 206, 207, 209, 211, 217, 218, 219, 220], "server": [1, 2, 5, 6, 7, 8, 10, 11, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 112, 113, 117, 214, 218], "pattern": [1, 4, 12, 41, 126, 181, 193, 203, 211, 214], "them": [1, 3, 10, 12, 16, 18, 19, 20, 21, 22, 24, 26, 45, 50, 56, 57, 61, 62, 117, 124, 127, 137, 146, 176, 178, 179, 182, 183, 184, 188, 189, 190, 191, 195, 197, 199, 201, 202, 204, 205, 211, 212, 213, 214, 215, 216, 217], "offici": [1, 2, 6, 11], "docker": [1, 2, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 117, 124, 127, 146, 210, 220], "imag": [1, 2, 5, 6, 7, 8, 10, 12, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 123, 124, 127, 137, 139, 151, 179, 181, 184, 188, 189, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 209, 212, 216, 217, 218, 219, 220], "node": [1, 2, 6, 7, 59], "configur": [1, 2, 3, 5, 57, 117, 212, 215], "32": [1, 2, 6, 8, 12, 16, 18, 19, 20, 21, 22, 24, 27, 35, 46, 56, 57, 61, 62, 117, 190, 204, 209], "gb": 1, "ram": 1, "alloc": 1, "That": [1, 178, 189, 191, 193, 196, 202, 207, 217], "onli": [1, 3, 4, 7, 11, 12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 32, 37, 38, 44, 45, 46, 47, 56, 57, 59, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 126, 127, 136, 146, 148, 158, 176, 184, 188, 189, 191, 192, 193, 194, 199, 202, 203, 204, 205, 208, 209, 211, 213, 214, 217], "replica": 1, "shard": 1, "did": [1, 4], "opt": [1, 216], "cluster": 1, "becaus": [1, 4, 10, 11, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 176, 178, 190, 205, 209, 214], "mainli": [1, 59, 72, 176, 214], "aim": [1, 3, 217], "assess": 1, "1m": 1, "37": 1, "11": [1, 206, 209], "17": [1, 8], "06": 1, "05": 1, "14": [1, 185, 206], "64": [1, 2, 6, 7, 8, 12, 20, 56, 57, 61, 75, 76, 90, 91, 95, 96, 101, 102, 124, 127, 136, 178, 196, 217], "873": 1, "42": 1, "40": 1, "114": 1, "30": [1, 5, 124, 127, 148, 206], "36": 1, "12": [1, 5, 8, 176, 202, 203, 210, 214], "93": 1, "01": [1, 190], "942": 1, "51": 1, "38": [1, 8], "43": 1, "15": [1, 11, 202, 206], "977": 1, "76": 1, "39": 1, "135": 1, "75": [1, 206], "35": [1, 208], "66": 1, "256": [1, 16, 18, 19, 20, 21, 22, 24, 29, 31, 56, 57, 61, 62, 117, 124, 127, 134, 146, 181, 189, 195, 202, 208, 212, 213], "986": 1, "98": [1, 8], "111": 1, "897": 1, "134": 1, "94": 1, "34": [1, 5], "82": 1, "08": [1, 8], "960": 1, "53": 1, "148": 1, "67": 1, "24": 1, "46": 1, "988": 1, "136": 1, "90": [1, 205], "31": 1, "996": 1, "99": 1, "95": [1, 184], "905": 1, "200": [1, 5, 8, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 214], "29": 1, "965": 1, "54": [1, 185], "186": 1, "45": [1, 205, 206], "990": 1, "68": 1, "173": 1, "60": [1, 112, 113, 117, 184], "997": 1, "07": [1, 10, 154, 156, 157, 159, 181], "183": 1, "86": 1, "895": 1, "49": 1, "116": 1, "33": 1, "63": 1, "55": 1, "954": 1, "59": 1, "112": 1, "83": 1, "74": 1, "26": 1, "983": 1, "993": 1, "88": 1, "930": 1, "52": 1, "142": 1, "975": 1, "58": 1, "156": [1, 199], "41": 1, "81": 1, "147": 1, "19": 1, "87": 1, "998": 1, "144": [1, 209], "62": 1, "21": [1, 206], "946": 1, "196": 1, "20": [1, 5, 16, 18, 19, 20, 21, 22, 24, 31, 32, 45, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 146], "984": 1, "211": 1, "65": 1, "194": 1, "97": [1, 208], "72": 1, "999": 1, "25": [1, 10, 206], "204": [1, 190], "22": [1, 206], "50": [1, 112, 113, 117, 202, 206], "403": 1, "70": 1, "448": 1, "396": 1, "453": 1, "71": [1, 8], "80": 1, "995": [1, 10], "09": [1, 185], "418": 1, "456": [1, 124, 127, 136], "00": 1, "03": [1, 5], "410": 1, "459": 1, "57": 1, "974": 1, "412": 1, "48": [1, 5, 8], "462": 1, "392": 1, "27": [1, 5, 8, 124, 127, 148], "460": 1, "56": [1, 219, 220], "79": 1, "379": 1, "69": 1, "461": 1, "96": 1, "381": 1, "85": [1, 206], "982": 1, "387": 1, "77": 1, "386": 1, "463": 1, "47": 1, "92": 1, "385": 1, "84": 1, "78": 1, "393": 1, "464": 1, "969": 1, "390": 1, "992": 1, "399": 1, "458": 1, "426": 1, "91": 1, "89": 1, "389": 1, "73": 1, "397": 1, "375": 1, "871": 1, "574": 1, "939": 1, "580": 1, "44": 1, "577": 1, "639": 1, "655": 1, "61": 1, "659": 1, "23": [1, 214], "818": 1, "906": 1, "787": 1, "04": 1, "782": 1, "784": 1, "780": 1, "1022": 1, "955": 1, "1001": 1, "981": 1, "929": 1, "675": 1, "673": 1, "1297": 1, "1383": 1, "1846": 1, "1926": 1, "1364": 1, "1966": 1, "889": 1, "508": 1, "947": 1, "449": 1, "980": 1, "434": 1, "504": [1, 189], "688": 1, "953": 1, "678": 1, "719": 1, "720": 1, "902": 1, "048": 1, "958": 1, "138": 1, "077": 1, "108": [1, 8], "945": 1, "02": [1, 190], "471": 1, "976": 1, "480": 1, "527": 1, "487": 1, "790": 1, "812": 1, "861": 1, "840": 1, "959": 1, "424": 1, "987": 1, "506": 1, "408": 1, "872": 1, "563": 1, "941": 1, "991": 1, "562": 1, "754": 1, "721": 1, "775": 1, "28": [1, 219, 220], "799": 1, "1091": 1, "1196": 1, "1232": 1, "1203": 1, "896": 1, "625": 1, "626": 1, "994": 1, "921": 1, "926": 1, "1315": 1, "1489": 1, "1511": 1, "1534": [1, 190], "421": 1, "convert": [1, 11, 16, 18, 19, 20, 21, 22, 24, 37, 42, 49, 53, 56, 57, 61, 62, 64, 65, 70, 71, 75, 76, 90, 91, 95, 96, 101, 102, 112, 113, 117, 124, 127, 129, 130, 131, 134, 136, 137, 140, 142, 143, 145, 147, 148, 178, 179, 180, 182, 189, 190, 194, 211, 217], "per": [1, 5, 7, 10, 16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117, 124, 127, 148, 149, 158, 159, 188, 189, 205, 208, 209], "second": [1, 4, 16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 59, 61, 62, 117, 124, 127, 148, 151, 159, 160, 181, 191, 201, 209, 214], "dp": 1, "284": 1, "061": 1, "505": 1, "246": 1, "706": 1, "519": 1, "749": 1, "762": 1, "662": 1, "674": 1, "758": 1, "570": 1, "597": 1, "366": 1, "825": 1, "956": 1, "155": 1, "698": 1, "710": 1, "411": 1, "652": 1, "611": 1, "726": 1, "786": 1, "599": 1, "670": 1, "304": 1, "729": 1, "440": 1, "751": 1, "663": [1, 190], "695": 1, "681": 1, "648": 1, "594": 1, "540": 1, "730": 1, "483": 1, "445": 1, "671": 1, "585": 1, "003": 1, "629": 1, "725": 1, "863": 1, "915": 1, "572": 1, "747": 1, "723": 1, "657": 1, "017": 1, "882": 1, "632": 1, "500": [1, 2, 6, 10], "394": 1, "553": 1, "703": 1, "800": 1, "465": 1, "660": 1, "914": 1, "985": 1, "672": 1, "646": 1, "092": 1, "809": 1, "618": [1, 178, 181], "874": 1, "531": 1, "734": 1, "129": 1, "040": 1, "740": 1, "886": 1, "286": 1, "227": 1, "267": 1, "532": 1, "244": 1, "308": 1, "557": 1, "253": 1, "197": 1, "189": 1, "501": 1, "248": 1, "191": 1, "176": [1, 184, 211], "636": 1, "250": [1, 184], "199": 1, "162": 1, "691": 1, "245": 1, "195": 1, "172": 1, "641": [1, 178, 181], "559": 1, "263": 1, "231": 1, "166": 1, "537": 1, "653": 1, "260": 1, "190": [1, 205], "161": 1, "633": 1, "554": 1, "168": [1, 16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 117, 124, 127, 146, 210], "157": 1, "680": 1, "521": 1, "174": 1, "561": 1, "159": 1, "153": 1, "616": 1, "543": 1, "221": 1, "547": 1, "254": 1, "177": 1, "643": 1, "541": 1, "187": 1, "535": 1, "182": 1, "178": 1, "666": [1, 199], "184": 1, "635": 1, "533": 1, "251": 1, "235": 1, "160": 1, "257": 1, "682": 1, "262": 1, "165": 1, "154": 1, "647": 1, "266": 1, "163": 1, "676": 1, "524": 1, "252": 1, "685": 1, "255": [1, 178, 181, 188, 193], "687": 1, "560": 1, "226": 1, "598": 1, "261": 1, "207": 1, "436": 1, "739": 1, "205": 1, "722": 1, "241": 1, "106": 1, "416": 1, "732": 1, "103": 1, "422": [1, 214], "277": 1, "104": 1, "405": 1, "525": 1, "222": 1, "217": 1, "427": 1, "516": 1, "380": 1, "236": 1, "139": 1, "220": 1, "218": 1, "208": 1, "206": 1, "430": 1, "271": 1, "388": 1, "402": 1, "382": 1, "179": 1, "425": 1, "275": 1, "378": 1, "435": 1, "282": 1, "384": 1, "198": 1, "978": 1, "233": 1, "258": 1, "141": 1, "064": 1, "279": 1, "185": 1, "414": 1, "364": 1, "280": 1, "126": 1, "019": 1, "370": 1, "203": 1, "485": [1, 124, 127, 136], "223": 1, "409": 1, "771": 1, "224": [1, 5, 124, 127, 136, 178, 181], "417": 1, "213": 1, "118": 1, "542": 1, "216": 1, "202": 1, "318": 1, "391": 1, "143": 1, "415": 1, "733": 1, "151": 1, "169": 1, "228": 1, "133": 1, "302": 1, "113": 1, "473": 1, "229": [1, 124, 127, 136], "878": 1, "928": 1, "137": 1, "122": 1, "081": 1, "053": 1, "149": 1, "265": 1, "175": 1, "131": 1, "702": 1, "664": [1, 199, 217], "125": 1, "130": 1, "600": 1, "776": 1, "001": 1, "595": 1, "018": 1, "058": 1, "431": 1, "795": 1, "778": 1, "094": 1, "499": 1, "579": 1, "621": 1, "325": 1, "099": 1, "338": 1, "961": 1, "432": 1, "420": 1, "290": 1, "804": 1, "567": 1, "943": 1, "368": 1, "587": 1, "916": 1, "080": 1, "313": 1, "836": 1, "971": 1, "429": 1, "811": 1, "273": 1, "357": 1, "493": 1, "831": 1, "951": 1, "225": [1, 124, 127, 136], "488": 1, "596": 1, "083": 1, "575": 1, "789": 1, "065": 1, "014": 1, "612": 1, "558": 1, "060": 1, "476": [1, 209], "490": 1, "049": 1, "948": 1, "085": 1, "970": 1, "327": 1, "326": [1, 209], "079": 1, "548": 1, "760": 1, "238": 1, "438": 1, "952": 1, "306": 1, "particular": [1, 4, 16, 18, 19, 20, 21, 22, 24, 39, 56, 57, 59, 61, 62, 117, 126, 211], "chart": 1, "depict": [1, 197, 202, 217], "fraction": 1, "found": [1, 4, 10, 151, 189, 199, 211, 217], "over": [1, 4, 7, 12, 16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117, 126, 149, 176, 198, 199, 202, 205, 211, 217], "against": [1, 16, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 59, 61, 62, 117, 124, 127, 146, 195, 208], "smaller": [1, 16, 18, 19, 20, 21, 22, 24, 26, 27, 35, 37, 38, 45, 46, 56, 57, 61, 62, 117, 199, 202, 214], "upper": [1, 3, 10, 16, 18, 19, 20, 21, 22, 24, 27, 46, 56, 57, 61, 62, 117, 184], "right": [1, 4, 16, 18, 19, 20, 21, 22, 24, 31, 47, 56, 57, 59, 61, 62, 117, 124, 127, 147, 191, 195, 202, 205, 208, 209, 216], "fair": 1, "across": [1, 199, 211], "favour": 1, "benefit": [1, 191], "wa": [1, 4, 10, 149, 181, 183, 193, 202, 211, 217], "imposs": 1, "its": [1, 3, 4, 5, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 124, 127, 131, 136, 139, 147, 176, 180, 181, 182, 194, 195, 197, 199, 203, 205, 209, 211, 213, 214, 215, 217], "definit": [1, 149, 178, 214], "vari": 1, "principl": [1, 193, 199], "cover": [1, 181, 217], "offer": [1, 4, 62, 185, 187, 189, 199, 202], "therefor": [1, 3, 8, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 72, 117, 205, 217], "try": [1, 4, 11, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 126, 149, 182, 191, 199], "crud": [1, 5], "Not": [1, 5, 205, 206, 211], "just": [1, 3, 4, 10, 11, 151, 178, 189, 201, 202, 203, 205, 206, 215], "speed": [1, 2, 6, 10, 16, 18, 19, 20, 21, 22, 24, 38, 56, 57, 61, 62, 117, 207, 209, 213, 217], "also": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 16, 18, 19, 20, 21, 22, 24, 45, 47, 50, 56, 57, 61, 62, 117, 124, 158, 176, 178, 183, 184, 187, 189, 190, 191, 192, 193, 194, 197, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 214, 215, 217], "show": [1, 4, 5, 7, 10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 35, 37, 39, 44, 46, 47, 48, 56, 57, 61, 62, 117, 124, 127, 139, 146, 148, 178, 185, 190, 194, 202, 203, 211], "trade": 1, "off": [1, 4, 9, 10, 62, 107, 108, 124, 127, 147], "between": [1, 3, 4, 10, 124, 126, 127, 132, 136, 153, 154, 156, 157, 180, 182, 189, 196, 199, 206, 211, 217, 219, 220], "tune": [1, 2, 6], "your": [1, 3, 4, 5, 8, 11, 16, 18, 19, 20, 21, 22, 24, 26, 27, 39, 44, 46, 56, 57, 61, 62, 117, 124, 126, 127, 136, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 199, 204, 205, 207, 209, 210, 211, 214, 215, 216, 217, 218, 219, 220], "built": [1, 11, 16, 18, 19, 20, 21, 22, 24, 29, 31, 56, 57, 61, 62, 117, 189, 192, 194, 209, 218], "top": [1, 3, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 139, 158, 159, 178, 180, 181, 197, 201, 202, 205, 208, 212, 219, 220], "furthermor": [1, 16, 18, 19, 20, 21, 22, 24, 32, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117], "made": [1, 4, 176, 180, 199, 217], "sure": [1, 2, 3, 4, 6, 8, 16, 18, 19, 20, 21, 22, 24, 45, 47, 56, 57, 61, 62, 72, 117, 216, 218], "run": [1, 2, 4, 5, 6, 7, 10, 11, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 199, 208, 209, 210, 211, 213, 214, 215, 216, 220], "seri": 1, "support": [1, 3, 4, 5, 7, 8, 10, 11, 16, 17, 18, 19, 20, 21, 22, 24, 31, 32, 45, 56, 57, 61, 62, 64, 69, 72, 74, 75, 77, 79, 80, 84, 90, 92, 94, 95, 100, 101, 103, 105, 107, 111, 112, 116, 117, 124, 127, 129, 132, 136, 137, 146, 147, 148, 151, 160, 178, 180, 183, 187, 189, 196, 199, 202, 204, 209, 210, 211, 214, 216, 217, 218], "local": [1, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 193, 197, 210, 211, 216, 217, 218, 219, 220], "which": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 35, 37, 38, 39, 42, 44, 46, 56, 57, 59, 61, 62, 72, 117, 124, 126, 127, 130, 133, 134, 136, 139, 148, 149, 151, 176, 178, 180, 181, 183, 184, 189, 190, 191, 193, 195, 197, 199, 202, 205, 206, 209, 211, 213, 216, 217, 219, 220], "allow": [1, 3, 4, 5, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 44, 52, 56, 57, 61, 62, 117, 128, 131, 149, 176, 181, 183, 189, 191, 193, 196, 211, 217, 218], "similar": [1, 2, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117, 181, 183, 199, 201, 208, 209, 211, 217], "network": [1, 2, 5, 6, 12, 19, 190, 199, 211, 217, 218], "overhead": [1, 5, 211], "resourc": [1, 186, 187, 193, 209], "those": [1, 2, 3, 4, 6, 8, 16, 18, 19, 20, 21, 22, 24, 31, 39, 56, 57, 61, 62, 72, 117, 151, 183, 191, 205, 206], "much": [1, 16, 18, 19, 20, 21, 22, 24, 38, 56, 57, 61, 62, 117, 178, 183, 194, 195, 199, 202, 203, 214, 215, 216], "favor": [1, 176], "effici": [1, 4, 8, 10, 72, 124, 127, 130, 132, 147, 202, 207, 217, 218, 219, 220], "might": [1, 2, 4, 6, 8, 10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 35, 46, 50, 56, 57, 61, 62, 117, 181, 205], "grpc": [1, 5, 7, 16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 117, 124, 127, 146, 190, 210], "http": [1, 2, 5, 6, 7, 10, 11, 15, 16, 18, 19, 20, 21, 22, 24, 47, 48, 56, 57, 59, 61, 62, 63, 75, 76, 90, 91, 95, 96, 112, 113, 117, 124, 126, 127, 146, 148, 158, 183, 188, 189, 193, 194, 197, 209, 210, 212, 216, 219, 220], "batch": [1, 2, 3, 6, 7, 8, 10, 15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 31, 35, 45, 46, 56, 57, 61, 62, 72, 117, 124, 127, 146, 209], "re": [1, 10, 16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 61, 62, 117, 151, 176, 183, 189, 190, 191, 192, 193, 197, 199, 202, 204, 211, 214, 216], "okai": [1, 202, 209], "long": [1, 10, 20, 56, 61, 75, 76, 90, 91, 101, 102, 179, 209, 217, 219, 220], "jina": [1, 3, 16, 18, 19, 20, 21, 22, 24, 44, 48, 56, 57, 61, 62, 117, 124, 126, 127, 147, 151, 181, 185, 186, 187, 188, 189, 190, 191, 194, 206, 209, 210, 211, 212, 216, 218, 219, 220], "open": [1, 3, 11, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 126, 127, 129, 148, 177, 180, 190], "constantli": 1, "accordingli": [1, 124, 127, 132, 136, 176], "If": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 31, 32, 35, 37, 45, 46, 47, 50, 51, 56, 57, 59, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 126, 127, 136, 139, 146, 151, 158, 176, 181, 182, 183, 188, 189, 193, 194, 195, 199, 200, 201, 202, 203, 204, 205, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218], "believ": 1, "miss": [1, 123, 216, 217, 218], "optim": [1, 4, 10, 204, 215, 217, 218], "g": [1, 2, 3, 4, 6, 8, 10, 11, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 126, 191, 193, 198, 205, 210, 211, 217], "recent": [1, 4], "upstream": [1, 211], "avoid": [1, 3, 4, 12, 154, 156, 157, 159, 176, 181, 211], "unnecessari": [1, 211], "step": [1, 4, 12, 16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 61, 62, 72, 117, 178, 199, 211, 215], "feel": [1, 4, 189], "free": [1, 59, 177, 180], "rais": [1, 4, 16, 17, 18, 19, 20, 21, 22, 24, 32, 56, 57, 59, 61, 62, 64, 69, 71, 74, 75, 77, 79, 80, 84, 90, 92, 94, 95, 100, 101, 103, 105, 107, 111, 112, 116, 117, 149, 194], "pr": [1, 158], "issu": [1, 5, 151, 181, 209], "contribut": [1, 3], "incomplet": 1, "ann": [1, 3, 5, 16, 18, 19, 20, 21, 22, 24, 32, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117], "librari": [1, 59, 126, 151, 179, 199, 217, 218], "faiss": 1, "annoi": [1, 5, 214], "scann": 1, "fact": [1, 188, 189, 199], "itself": [1, 5, 10, 16, 18, 19, 20, 21, 22, 24, 27, 29, 31, 37, 40, 46, 48, 56, 57, 61, 62, 117, 124, 127, 129, 130, 131, 132, 133, 136, 137, 139, 140, 146, 147, 148, 176, 201, 203, 205, 208, 211, 214], "intern": [1, 16, 18, 19, 20, 21, 22, 24, 39, 56, 57, 61, 62, 117, 124, 127, 130], "yet": [1, 181, 217], "integr": [1, 12, 176, 190, 199, 214, 217, 218], "introduc": [1, 3, 4, 5, 176, 194, 199, 201, 214], "although": [1, 214, 217], "real": [1, 158, 178, 191, 214, 215], "life": 1, "scenario": 1, "live": [1, 4, 5, 217], "machin": [1, 57, 117, 180, 189, 195, 197, 211, 216], "potenti": [1, 209, 214], "multipl": [1, 5, 16, 18, 19, 20, 21, 22, 24, 27, 35, 47, 55, 56, 57, 61, 62, 117, 124, 127, 137, 181, 183, 193, 198, 199, 201, 202, 205, 207, 211, 217], "parallel": [1, 2, 6, 15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 45, 56, 57, 61, 62, 117, 124, 127, 146, 202, 207], "chose": 1, "keep": [1, 3, 10, 62, 72, 124, 127, 148, 191, 192, 194, 208, 218], "both": [1, 4, 8, 9, 16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 61, 62, 117, 176, 193, 194, 198, 199, 204, 205, 208, 214, 217], "process": [1, 10, 12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 46, 56, 57, 61, 62, 117, 124, 127, 129, 130, 131, 132, 133, 136, 137, 147, 148, 177, 179, 181, 191, 192, 196, 202, 205, 211, 214, 216, 217, 218], "minim": [1, 7, 202], "end": [1, 10, 16, 17, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 124, 127, 147, 197, 219, 220], "call": [1, 2, 3, 4, 6, 16, 18, 19, 20, 21, 22, 24, 31, 47, 56, 57, 61, 62, 117, 184, 189, 192, 195, 199, 202, 205, 210, 214], "underli": [1, 4], "influenc": 1, "neg": [1, 219, 220], "interfac": [1, 2, 3, 5, 6, 7, 176, 177, 199, 206, 207, 217], "spot": 1, "bottleneck": [1, 3], "thrill": 1, "know": [1, 4, 10, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 126, 191, 202, 207, 209, 211, 217], "about": [1, 2, 4, 5, 6, 7, 8, 10, 11, 176, 185, 186, 187, 188, 191, 194, 199, 201, 202, 208, 209, 211, 214, 217], "fix": [1, 124, 127, 134, 180, 211], "big": [1, 11, 12, 16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117, 123, 124, 127, 146, 202, 207, 208, 214, 217], "impact": [1, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "mean": [1, 4, 10, 11, 12, 16, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 61, 62, 117, 124, 127, 132, 136, 158, 177, 184, 187, 189, 192, 193, 195, 196, 201, 205, 208, 210, 212, 214, 216], "even": [1, 3, 4, 10, 151, 188, 205, 207, 215], "cannot": [1, 5, 149, 205], "easili": [1, 2, 3, 4, 6, 12, 180, 182, 183, 184, 190, 191, 203, 211, 214, 217], "compar": [1, 4, 11, 16, 18, 19, 20, 21, 22, 24, 31, 37, 42, 47, 56, 57, 61, 62, 117, 123, 180, 181, 189, 209], "research": 1, "showcas": [1, 190], "what": [1, 2, 4, 6, 8, 11, 178, 184, 193, 209, 214], "expect": [1, 3, 4, 10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 72, 117, 124, 127, 148, 176, 199, 201], "get": [1, 2, 3, 4, 6, 8, 10, 11, 16, 18, 19, 20, 21, 22, 24, 25, 37, 43, 48, 54, 56, 57, 61, 62, 117, 118, 123, 124, 127, 128, 131, 146, 147, 151, 160, 169, 178, 183, 193, 194, 197, 198, 199, 201, 202, 204, 206, 211, 214, 215], "without": [1, 3, 16, 18, 19, 20, 21, 22, 24, 29, 45, 51, 56, 57, 59, 61, 62, 117, 160, 189, 190, 191, 201, 202, 205, 211], "hyper": 1, "practic": [1, 11, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 191, 193, 202, 209, 211], "strongli": [1, 214], "recommend": [1, 4, 11, 16, 17, 18, 19, 20, 21, 22, 56, 57, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 124, 127, 136, 176, 187, 191, 194, 199, 214, 217, 218], "achiev": [1, 214], "hope": 1, "help": [1, 10, 28, 54, 126, 178, 191, 193, 194, 199, 214, 218], "select": [1, 11, 184, 189, 190, 201, 202, 206], "suit": [1, 180], "case": [1, 3, 4, 5, 8, 10, 16, 18, 19, 20, 21, 22, 24, 32, 37, 56, 57, 61, 62, 72, 75, 77, 90, 92, 101, 103, 117, 151, 178, 181, 187, 188, 189, 193, 199, 202, 205, 208, 211], "depend": [1, 4, 5, 10, 16, 18, 19, 20, 21, 22, 24, 32, 45, 50, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 148, 178, 184, 199, 204, 206, 208, 209, 210, 211, 213, 214, 215, 218], "desir": [1, 4, 124, 127, 136, 212], "mai": [1, 4, 11, 12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 44, 46, 56, 57, 61, 62, 117, 124, 126, 127, 130, 132, 147, 151, 178, 181, 189, 192, 197, 199, 201, 202, 203, 205, 206, 211, 213, 214, 215, 216, 217, 219, 220], "prefer": 1, "here": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 151, 176, 177, 179, 181, 183, 184, 189, 191, 193, 199, 201, 202, 203, 204, 205, 206, 211, 212, 214, 216, 217, 218], "fewer": [1, 10], "enjoi": [1, 3, 10, 191, 216], "best": [1, 4, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 124, 127, 131, 159, 182, 199, 207, 211, 212], "reason": [1, 4, 10, 191, 211, 214, 217], "sai": [1, 12, 192, 193, 199, 202, 205, 208, 209, 211, 214], "larg": [1, 9, 10, 16, 18, 19, 20, 21, 22, 24, 31, 47, 56, 57, 61, 62, 117, 124, 127, 134, 176, 179, 202, 204, 205, 208, 209, 217], "still": [1, 10, 176, 181, 189, 202, 209], "fit": [1, 3, 4, 9, 12, 59, 189, 199, 204, 205, 207, 208, 217], "great": [1, 189], "monolith": [1, 217], "save": [1, 4, 11, 15, 16, 18, 19, 20, 21, 22, 24, 36, 37, 38, 39, 40, 42, 47, 51, 56, 57, 61, 62, 70, 73, 117, 124, 127, 129, 130, 133, 136, 148, 179, 180, 208, 209, 211], "lot": [1, 7, 16, 18, 19, 20, 21, 22, 24, 39, 56, 57, 61, 62, 117, 209, 213], "unlik": [1, 195, 199], "unfortun": 1, "out": [1, 3, 11, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 35, 46, 56, 57, 59, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 151, 181, 187, 191, 195, 199, 218], "nativ": [1, 16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117, 177, 216], "nonetheless": [1, 199, 211], "togeth": [1, 10, 16, 18, 19, 20, 21, 22, 24, 25, 27, 35, 39, 56, 57, 61, 62, 117, 126, 151, 178, 202, 203], "leverag": [1, 2, 3, 4, 6, 11, 72, 183, 189, 190, 191, 192, 194, 208, 209, 210, 214], "agnost": 1, "solut": [1, 4, 190, 191, 193], "ani": [1, 4, 5, 10, 16, 18, 19, 20, 21, 22, 24, 27, 31, 35, 56, 57, 59, 61, 62, 75, 76, 90, 91, 101, 102, 117, 124, 125, 126, 127, 130, 132, 136, 140, 141, 147, 149, 151, 160, 176, 181, 188, 189, 193, 197, 201, 202, 206, 210, 212, 214, 217, 219, 220], "cours": [1, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 183, 201, 214], "includ": [1, 3, 5, 13, 59, 124, 126, 127, 136, 147, 149, 176, 180, 188, 212, 214, 217, 218], "doe": [1, 5, 8, 10, 11, 16, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 61, 62, 117, 124, 126, 127, 136, 146, 199, 206, 209], "care": [1, 4, 182, 189], "otherwis": [1, 3, 10, 11, 16, 18, 19, 20, 21, 22, 24, 32, 47, 56, 57, 59, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 129, 136, 151, 189], "option": [1, 3, 8, 10, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 31, 32, 35, 37, 39, 41, 43, 44, 45, 46, 47, 48, 51, 55, 56, 57, 61, 62, 64, 65, 69, 74, 75, 76, 77, 79, 80, 84, 90, 91, 92, 94, 95, 96, 100, 101, 102, 103, 105, 107, 108, 111, 112, 113, 116, 117, 123, 124, 125, 126, 127, 132, 136, 139, 140, 141, 142, 146, 147, 148, 149, 150, 151, 158, 159, 160, 169, 170, 171, 172, 187, 202, 209, 210, 214, 215], "compos": [2, 5, 6, 7, 8, 10, 59], "yml": [2, 5, 6, 7, 8, 10], "co": [2, 126], "environ": [2, 5, 6, 10, 151, 187, 215, 216, 218], "xpack": [2, 6], "enabl": [2, 4, 6, 8, 28, 34, 65, 76, 81, 102, 108, 113, 176, 214, 215, 216, 218], "fals": [2, 4, 6, 7, 8, 10, 11, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 31, 32, 35, 37, 41, 44, 45, 46, 47, 48, 56, 57, 59, 61, 62, 75, 76, 77, 90, 91, 92, 95, 96, 101, 102, 103, 112, 113, 117, 118, 123, 124, 126, 127, 130, 132, 134, 136, 137, 139, 146, 147, 148, 149, 151, 159, 169, 182, 184, 188, 189, 194, 201, 202, 203, 205, 206, 210, 211, 212, 213], "discoveri": [2, 6], "type": [2, 4, 5, 6, 7, 8, 11, 12, 14, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 61, 62, 64, 65, 68, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 84, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 107, 110, 111, 112, 113, 116, 117, 118, 119, 122, 124, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 153, 154, 156, 157, 158, 159, 160, 163, 164, 169, 171, 172, 175, 182, 189, 190, 191, 193, 196, 197, 199, 201, 202, 203, 205, 206, 207, 210, 211, 212, 213, 214, 217, 218], "port": [2, 5, 6, 7, 8, 10, 15, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 63, 95, 96, 101, 102, 112, 113, 117, 124, 127, 151, 210], "9200": [2, 6, 20, 75, 76], "u": [2, 5, 6, 7, 8, 10, 124, 127, 130, 132, 147, 183, 209, 210, 216], "assum": [2, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 25, 37, 56, 57, 61, 62, 117, 124, 127, 132, 136, 181, 199, 204, 208, 209], "address": [2, 5, 6, 7, 8, 10, 57, 117, 151, 194, 210], "localhost": [2, 5, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 75, 76, 90, 91, 95, 96, 101, 102, 112, 113, 117, 210], "creation": [2, 5, 6, 8, 211], "By": [2, 3, 4, 5, 6, 8, 10, 16, 18, 19, 20, 21, 22, 24, 32, 38, 39, 42, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 126, 127, 136, 177, 191, 199, 204, 205, 208, 209], "layer": [2, 6, 10, 204], "plain": [2, 6, 124, 194, 199, 208, 211], "pass": [2, 3, 4, 6, 7, 8, 9, 10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 39, 40, 46, 56, 57, 59, 61, 62, 64, 69, 74, 75, 79, 90, 94, 95, 100, 101, 105, 112, 116, 117, 124, 126, 127, 130, 136, 140, 147, 149, 176, 184, 192, 199, 205, 211, 212, 213, 217], "host": [2, 5, 6, 7, 8, 10, 15, 16, 18, 19, 20, 21, 22, 24, 47, 48, 56, 57, 61, 62, 63, 75, 76, 90, 91, 95, 96, 101, 102, 112, 113, 117, 124, 127, 146, 210], "api_id": [2, 6], "ca_cert": [2, 6], "insid": [2, 3, 4, 6, 10, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 124, 127, 136, 185, 194, 199, 202, 203, 208, 209, 210], "es_config": [2, 15, 20, 63, 75, 76], "constructor": [2, 3, 4, 6, 8, 18, 192, 194, 198, 199], "For": [2, 3, 4, 5, 6, 7, 8, 10, 13, 16, 18, 19, 20, 21, 22, 24, 29, 31, 37, 45, 56, 57, 61, 62, 117, 124, 178, 181, 182, 183, 184, 187, 188, 189, 191, 194, 195, 196, 198, 199, 202, 203, 204, 205, 206, 208, 209, 210, 211, 213, 214, 218], "exampl": [2, 6, 8, 9, 16, 18, 19, 20, 21, 22, 24, 27, 37, 46, 55, 56, 57, 61, 62, 72, 117, 123, 124, 127, 136, 151, 158, 160, 178, 179, 181, 182, 183, 184, 188, 189, 190, 191, 193, 194, 195, 196, 198, 199, 201, 202, 204, 205, 206, 209, 210, 211, 214, 215, 216, 217], "prq7je_hj4i4auh": [2, 6], "hq": [2, 6], "hanxiao": [2, 6, 178, 195], "http_ca": [2, 6], "crt": [2, 6], "certif": [2, 6], "password": [2, 6], "etc": [2, 3, 6, 160, 176, 189, 191, 207, 212, 218], "index_nam": [2, 4, 6, 8, 15, 20, 56, 61, 63, 75, 76, 90, 91, 101, 102], "previous": [2, 5, 6, 8, 10, 57, 62, 117, 176], "old_stuff": [2, 6], "_": [2, 6, 8, 16, 18, 19, 20, 21, 22, 24, 27, 46, 56, 57, 61, 62, 117, 203, 212], "1000": [2, 5, 6, 8, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 178, 180, 181, 202, 213], "da2": [2, 4, 6, 8, 203, 208], "length": [2, 4, 5, 6, 7, 8, 11, 16, 18, 19, 20, 21, 22, 24, 27, 31, 35, 56, 57, 61, 62, 117, 124, 127, 147, 182, 183, 184, 185, 188, 192, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 219, 220], "2000": [2, 6], "homogen": [2, 4, 6, 8, 11, 182, 188, 201, 202, 203, 205, 206, 210, 211, 212, 213], "common": [2, 4, 6, 8, 11, 12, 24, 36, 181, 182, 188, 189, 193, 194, 197, 199, 201, 202, 203, 205, 206, 210, 211, 212, 213, 215, 216, 217, 218], "attribut": [2, 4, 6, 8, 11, 12, 16, 18, 19, 20, 21, 22, 24, 25, 27, 31, 32, 33, 35, 47, 50, 54, 55, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 134, 138, 147, 178, 180, 181, 182, 188, 189, 192, 195, 197, 198, 199, 202, 203, 205, 206, 207, 210, 211, 212, 213, 217, 219, 220], "uniqu": [2, 3, 4, 6, 8, 11, 124, 127, 131, 182, 188, 194, 197, 201, 202, 203, 205, 206, 210, 211, 212, 213, 217, 219, 220], "empti": [2, 3, 4, 5, 6, 7, 8, 11, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 35, 47, 56, 57, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 118, 124, 127, 139, 158, 169, 182, 188, 189, 193, 195, 199, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217], "ndarrai": [2, 3, 6, 11, 12, 14, 16, 18, 19, 20, 21, 22, 24, 29, 31, 32, 37, 41, 45, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 119, 120, 124, 126, 127, 132, 134, 136, 142, 146, 148, 152, 153, 154, 156, 157, 159, 161, 163, 176, 179, 180, 181, 188, 189, 193, 195, 196, 197, 199, 204, 205, 206, 207, 208, 212, 215, 217, 219, 220], "str": [2, 3, 4, 6, 7, 8, 11, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 31, 32, 35, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 61, 62, 64, 65, 68, 71, 75, 76, 77, 80, 81, 90, 91, 92, 95, 96, 97, 98, 100, 101, 102, 103, 107, 108, 112, 113, 117, 118, 120, 123, 124, 125, 126, 127, 129, 130, 132, 133, 134, 136, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 153, 156, 157, 160, 169, 170, 171, 172, 182, 183, 188, 189, 192, 194, 201, 202, 203, 205, 206, 210, 211, 212, 213, 214, 219, 220], "14890289": [2, 6], "3168339": [2, 6], "03050802": [2, 6], "06785086": [2, 6], "94719299": [2, 6], "32490566": [2, 6], "how": [2, 3, 4, 5, 6, 7, 10, 11, 16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117, 124, 127, 136, 178, 181, 189, 191, 192, 193, 194, 197, 202, 203, 205, 207, 209, 211, 214, 216, 217], "being": [2, 3, 4, 124, 127, 148, 213], "sent": [2, 6, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "ad": [2, 4, 5, 6, 10, 11, 16, 18, 19, 20, 21, 22, 24, 31, 50, 56, 57, 61, 62, 117, 191, 192, 203, 205, 212], "addit": [2, 5, 6, 7, 11, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 64, 69, 74, 75, 79, 90, 94, 95, 100, 101, 105, 112, 116, 117, 126, 188, 189, 205, 216, 218], "kwarg": [2, 3, 5, 6, 16, 17, 18, 19, 20, 21, 22, 24, 27, 30, 31, 32, 37, 38, 39, 40, 41, 42, 44, 45, 48, 56, 57, 59, 61, 62, 64, 69, 74, 75, 77, 79, 80, 84, 90, 92, 94, 95, 100, 101, 103, 105, 107, 111, 112, 116, 117, 118, 124, 126, 127, 130, 136, 140, 146, 147, 148, 151, 158, 169, 199, 205], "method": [2, 3, 4, 5, 6, 7, 8, 10, 15, 16, 18, 19, 20, 21, 22, 24, 31, 37, 50, 55, 56, 57, 61, 62, 63, 69, 72, 74, 79, 84, 94, 101, 102, 105, 111, 116, 117, 124, 126, 127, 140, 146, 151, 158, 177, 185, 187, 189, 191, 194, 198, 199, 203, 205, 208, 211, 214], "see": [2, 3, 4, 6, 10, 11, 16, 19, 22, 57, 62, 117, 124, 151, 178, 181, 184, 187, 189, 191, 193, 194, 197, 200, 201, 202, 203, 205, 206, 207, 209, 212, 214, 215, 217], "detail": [2, 4, 6, 13, 16, 19, 22, 57, 62, 117, 124, 126, 176, 178, 182, 189, 199, 204, 214, 217], "int": [2, 3, 6, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 30, 31, 32, 35, 41, 45, 46, 47, 48, 51, 54, 56, 57, 61, 62, 64, 65, 68, 69, 74, 75, 76, 77, 79, 80, 84, 90, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 105, 107, 111, 112, 113, 116, 117, 118, 124, 125, 126, 127, 129, 131, 132, 134, 136, 137, 139, 141, 146, 147, 148, 149, 150, 151, 158, 159, 160, 169, 188, 189, 197, 202, 205, 206, 214, 219, 220], "l2_norm": 2, "thread_count": [2, 6], "chunk_siz": [2, 6], "max_chunk_byt": [2, 6], "104857600": [2, 6], "queue_siz": [2, 6], "batch_siz": [2, 3, 5, 6, 8, 12, 15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 31, 35, 45, 46, 48, 56, 57, 61, 62, 63, 75, 76, 90, 91, 101, 102, 112, 113, 117, 124, 127, 146, 202, 204, 208, 209], "overriden": [2, 6], "pre": [2, 6, 8, 16, 18, 19, 20, 21, 22, 24, 32, 45, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 149, 190, 199, 205, 211, 216], "dsl": 2, "score": [2, 3, 5, 7, 8, 10, 14, 16, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 61, 62, 117, 124, 125, 127, 141, 149, 150, 158, 175, 181, 195, 197, 199, 201, 205, 208, 211, 219, 220], "dictionari": [2, 3, 5, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 31, 54, 56, 57, 61, 62, 117, 124, 127, 147, 149, 205, 206, 212], "under": [2, 3, 4, 8, 10, 59, 158, 176, 183, 189, 191, 201, 211, 212, 216, 217], "kei": [2, 3, 4, 7, 8, 10, 16, 18, 19, 20, 21, 22, 24, 29, 31, 54, 56, 57, 59, 61, 62, 117, 123, 124, 127, 140, 147, 148, 151, 176, 179, 212, 219, 220], "addition": [2, 3, 6, 16, 57, 117, 184, 215], "knn": [2, 6], "num_candid": [2, 6], "100": [2, 5, 6, 7, 16, 18, 19, 20, 21, 22, 24, 27, 46, 56, 57, 61, 62, 117, 124, 127, 139, 180, 202, 205, 206], "Such": [2, 5, 6, 7, 8, 209, 212], "need": [2, 3, 5, 6, 7, 8, 9, 10, 11, 16, 18, 19, 20, 21, 22, 24, 31, 47, 56, 57, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 176, 178, 182, 183, 185, 187, 189, 190, 191, 192, 193, 199, 202, 204, 206, 207, 209, 211, 212, 214, 215, 216], "index_text": [2, 6, 8, 15, 20, 56, 61, 63, 75, 76, 90, 91, 101, 102], "sever": [2, 4, 6, 8, 187, 197], "pizza": [2, 6], "person": [2, 6, 59], "eat": [2, 6], "restaur": [2, 6], "pizza_doc": [2, 6], "part": [2, 3, 5, 6, 8, 11, 59, 183, 193, 199, 202], "mostli": [2, 6, 8, 10], "split": [2, 6, 8, 16, 18, 19, 20, 21, 22, 24, 27, 35, 56, 57, 59, 61, 62, 117, 183], "group": [2, 6, 8, 15, 16, 18, 19, 20, 21, 22, 24, 27, 39, 56, 57, 61, 62, 117, 126, 197, 202], "item": [2, 3, 6, 8, 16, 17, 18, 19, 20, 21, 22, 56, 57, 59, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 124, 127, 132, 158, 178, 202, 214], "specif": [2, 3, 4, 5, 6, 8, 10, 16, 18, 19, 20, 21, 22, 24, 32, 39, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 126, 176, 181, 188, 189, 191, 192, 199, 205], "tag_indic": [2, 6, 8, 15, 20, 56, 61, 63, 75, 76, 90, 91, 101, 102], "food_typ": [2, 6, 8], "italian": [2, 6, 8], "spanish": [2, 6, 8], "food": [2, 6, 8], "cheap": [2, 6, 8], "french": [2, 6, 8], "expens": [2, 6, 8, 10], "chines": [2, 6, 8], "noddl": [2, 6, 8], "quit": [2, 6, 8, 184, 214, 217], "results_cheap": [2, 6, 8], "results_italian": [2, 6, 8], "tags__food_typ": [2, 6, 8], "don": [2, 4, 6, 8, 10, 11, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 72, 117, 126, 183, 189, 191, 194, 195, 199, 204, 205, 209, 211], "make": [2, 3, 4, 6, 8, 10, 16, 18, 19, 20, 21, 22, 24, 44, 45, 47, 56, 57, 61, 62, 72, 117, 124, 127, 136, 149, 193, 194, 199, 202, 203, 205, 207, 209, 212, 216, 218], "hostnam": [2, 5, 6, 7, 10], "dict": [2, 3, 4, 6, 8, 10, 16, 18, 19, 20, 21, 22, 24, 27, 31, 32, 35, 39, 41, 44, 45, 48, 54, 56, 57, 60, 61, 62, 64, 65, 71, 75, 76, 77, 80, 81, 90, 91, 92, 95, 96, 97, 98, 101, 102, 103, 107, 108, 112, 113, 117, 123, 124, 125, 126, 127, 140, 141, 147, 148, 149, 151, 182, 189, 194, 197, 202, 206, 211, 214, 217], "cloud_id": [2, 6], "api_kei": [2, 6, 7, 15, 57, 63, 95, 96], "class": [2, 3, 4, 6, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 158, 169, 170, 171, 172, 173, 188, 190, 191, 192, 199, 201, 212, 214, 219, 220], "handl": [2, 3, 6, 8, 72, 130, 177, 180, 191, 196, 199, 214], "refresh": [2, 6], "plural": [2, 6], "compli": [2, 6], "seen": [3, 191], "previou": [3, 4, 16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117, 158, 178, 197, 211, 219, 220], "chapter": [3, 176, 189, 191, 194, 197, 199, 201, 202, 203, 206, 214, 215, 217], "sql": [3, 4, 68], "nosql": 3, "motiv": [3, 179, 217], "board": 3, "advanc": [3, 11, 28, 34, 52, 128, 177, 181, 198, 207, 216, 217, 218], "languag": [3, 5, 8, 15, 16, 18, 19, 20, 21, 22, 24, 32, 56, 57, 61, 62, 63, 75, 77, 90, 92, 101, 102, 103, 117, 181, 183, 190, 193, 206, 211], "vendor": 3, "power": [3, 29, 67, 83, 109, 201, 207], "well": [3, 10, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 176, 181, 187, 191, 194, 197, 214, 215, 216], "design": [3, 124, 127, 130, 132, 147, 188, 189, 191, 195, 199, 205, 211], "maintain": [3, 193, 199], "plug": 3, "ai": [3, 124, 151, 181, 185, 186, 187, 188, 189, 190, 194, 209, 211, 212], "ecosystem": [3, 191, 199], "hub": [3, 126, 190, 191, 210], "clip": [3, 191, 197, 218, 219, 220], "servic": [3, 11, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 191, 214, 217, 218], "finetun": [3, 191, 217], "synergi": 3, "after": [3, 5, 10, 11, 16, 18, 19, 20, 21, 22, 24, 27, 29, 46, 56, 57, 59, 61, 62, 117, 124, 127, 129, 130, 131, 132, 133, 136, 137, 146, 147, 148, 158, 178, 181, 188, 189, 204, 205, 211, 214], "extens": [3, 16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117, 151, 211, 217], "conveni": [3, 183, 187], "promis": [3, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "experi": [3, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 207, 215, 217, 218], "regular": [3, 4, 206, 219, 220], "extra": [3, 4, 16, 18, 19, 20, 21, 22, 24, 39, 40, 45, 56, 57, 61, 62, 117, 124, 127, 140, 149, 176, 199, 215, 216, 218], "learn": [3, 4, 11, 178, 180, 188, 189, 190, 191, 194, 195, 197, 202, 207, 214, 217, 218], "walk": [3, 181], "through": [3, 5, 181, 188, 191, 193, 202], "mydocstor": 3, "look": [3, 4, 124, 127, 136, 178, 181, 184, 189, 191, 211, 214, 217], "config": [3, 4, 6, 7, 8, 10, 15, 16, 19, 57, 62, 63, 95, 100, 112, 113, 117, 124, 149, 183, 212], "start": [3, 4, 16, 17, 18, 19, 20, 21, 22, 24, 47, 55, 56, 57, 61, 62, 64, 69, 71, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 124, 127, 132, 136, 185, 188, 197, 202, 219, 220], "go": [3, 181, 199, 202, 211, 219, 220], "arrai": [3, 5, 14, 124, 126, 127, 132, 144, 147, 153, 154, 156, 157, 159, 160, 175, 184, 193, 194, 195, 199, 200, 201, 206, 208, 211, 214, 217, 219, 220], "sub": [3, 16, 18, 19, 20, 21, 22, 24, 47, 55, 56, 57, 61, 62, 117, 126, 180, 183, 184, 188, 189, 191, 192, 193, 197, 198, 202, 212, 219, 220], "four": [3, 180, 209, 217, 219, 220], "file": [3, 9, 16, 18, 19, 20, 21, 22, 24, 37, 38, 39, 41, 42, 47, 56, 57, 59, 61, 62, 117, 124, 126, 127, 129, 130, 133, 136, 137, 148, 151, 176, 178, 179, 180, 183, 189, 193, 196, 197, 199, 209, 211, 213, 219, 220], "readm": [3, 183], "md": 3, "These": [3, 10, 16, 18, 19, 20, 21, 22, 24, 31, 35, 40, 56, 57, 61, 62, 72, 117, 194, 205, 207, 214, 219, 220], "consist": [3, 10, 16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 61, 62, 117, 124, 127, 139, 180, 181, 191, 197, 217, 218, 219, 220], "necessari": [3, 65, 76, 81, 102, 108, 113, 158], "anoth": [3, 4, 16, 18, 19, 20, 21, 22, 24, 26, 27, 45, 46, 56, 57, 61, 62, 117, 118, 124, 169, 188, 189, 193, 195, 196, 203, 208], "basegetsetdelmixin": [3, 63, 67, 70, 72, 78, 83, 93, 98, 104, 109, 115], "getsetdelmixin": [3, 63, 64, 67, 75, 78, 80, 83, 90, 93, 95, 98, 101, 104, 107, 109, 112, 115], "def": [3, 4, 10, 12, 16, 18, 19, 20, 21, 22, 24, 27, 46, 56, 57, 61, 62, 117, 123, 181, 183, 192, 205, 209, 214], "_get_doc_by_id": [3, 72], "self": [3, 16, 18, 19, 20, 21, 22, 24, 27, 31, 35, 45, 47, 56, 57, 59, 61, 62, 117, 118, 124, 169, 209], "_id": [3, 73], "_del_doc_by_id": [3, 72], "_set_doc_by_id": [3, 72], "_load_offset2id": 3, "_save_offset2id": 3, "five": [3, 183, 217], "correspond": [3, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 139, 151, 180, 181, 182, 183, 188, 189, 192, 193, 197, 208, 213, 215, 219, 220], "logic": [3, 4, 50, 201, 206, 214], "string": [3, 5, 8, 10, 16, 18, 19, 20, 21, 22, 24, 32, 37, 39, 42, 45, 48, 55, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 112, 113, 117, 124, 126, 127, 129, 139, 140, 146, 148, 151, 153, 193, 194, 197, 199, 201, 202, 204, 206, 211, 214, 219, 220], "essenti": 3, "ensur": [3, 4, 10, 188, 199, 209], "offset2id": [3, 63, 68, 70, 72, 73], "map": [3, 4, 15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 39, 46, 54, 56, 57, 61, 62, 75, 76, 90, 91, 117, 123, 124, 126, 127, 147, 182, 189, 191, 192, 194, 197, 209, 219, 220], "behaviour": [3, 123], "inherit": [3, 18, 21, 146, 196, 212], "howev": [3, 4, 10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 158, 176, 189, 192, 199, 202, 205, 209, 217], "adapt": 3, "_offset2id": 3, "member": [3, 10, 123], "variabl": [3, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 112, 113, 117, 151, 204, 211, 219, 220], "_list_lik": 3, "_get_offset2ids_meta": 3, "els": [3, 59, 151, 158, 190, 207], "mind": [3, 72, 191, 208], "upsert": 3, "remov": [3, 5, 15, 16, 17, 18, 19, 20, 21, 22, 56, 57, 61, 62, 63, 64, 69, 70, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 151, 199, 201, 217], "old": [3, 151, 176, 183, 217], "recommened": 3, "_get_docs_by_id": [3, 72], "_del_docs_by_id": [3, 72], "_clear_storag": [3, 72], "_set_doc_value_pair": 3, "_set_doc_value_pairs_nest": 3, "_set_docs_by_id": [3, 72], "full": [3, 4, 8, 11, 13, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 176, 178, 180, 184, 189, 191, 193, 199, 207, 211, 213, 214, 216, 217, 218], "signatur": 3, "fine": [3, 176], "grain": [3, 176], "frequent": [3, 10, 124, 127, 130, 132, 147, 194, 197, 199, 211, 217], "fulli": [3, 10, 12, 16, 18, 19, 20, 21, 22, 24, 27, 31, 35, 56, 57, 61, 62, 117, 124, 127, 136, 193, 202, 212], "gener": [3, 5, 7, 10, 14, 16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 35, 37, 41, 46, 47, 51, 56, 57, 61, 62, 72, 117, 124, 127, 136, 139, 147, 148, 149, 151, 166, 168, 176, 179, 182, 184, 193, 203, 204, 217, 219, 220], "slow": [3, 4, 12, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 72, 117, 213], "refer": [3, 5, 8, 10, 13, 16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117, 180, 189, 199, 202, 203, 210, 211], "iter": [3, 5, 16, 17, 18, 19, 20, 21, 22, 24, 27, 41, 46, 55, 56, 57, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 98, 100, 101, 105, 107, 111, 112, 116, 117, 126, 203, 209, 217], "union": [3, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 31, 32, 37, 38, 39, 41, 42, 45, 46, 56, 57, 61, 62, 64, 65, 75, 76, 77, 90, 91, 92, 95, 96, 101, 102, 103, 107, 108, 112, 113, 117, 124, 125, 126, 127, 129, 130, 133, 136, 140, 141, 146, 147, 148, 149, 153, 159], "type_check": 3, "basesequencelikemixin": [3, 63, 69, 70, 74, 79, 84, 94, 100, 105, 111, 116], "sequencelikemixin": [3, 63, 64, 69, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116], "__eq__": 3, "__contains__": 3, "x": [3, 12, 16, 18, 19, 20, 21, 22, 24, 25, 56, 57, 61, 62, 117, 123, 153, 159, 160, 176, 189, 192, 197, 199, 206, 211, 217, 219, 220], "__repr__": 3, "__add__": 3, "__len__": 3, "insert": [3, 5, 10, 15, 16, 17, 18, 19, 20, 21, 22, 56, 57, 61, 62, 63, 64, 69, 70, 73, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 212], "custom": [3, 7, 9, 16, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 61, 62, 117, 123, 188, 212], "_append": 3, "overrid": [3, 4, 5, 10, 16, 18, 19, 20, 21, 22, 24, 32, 44, 56, 57, 61, 62, 72, 117, 123, 205], "last": [3, 4, 10, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 35, 46, 47, 56, 57, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 124, 127, 136, 139, 159, 178, 182, 184, 191, 201, 202, 209], "_extend": 3, "append": [3, 4, 5, 15, 16, 17, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 63, 64, 69, 70, 73, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 184, 198, 200, 203, 205], "__iter__": 3, "reli": [3, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 198, 201, 209, 217], "come": [3, 11, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 183, 188, 199, 202, 217, 219, 220], "standard": [3, 124, 127, 136, 189, 191], "mutablesequ": [3, 17, 74], "doc": [3, 4, 5, 8, 11, 16, 18, 19, 20, 21, 22, 24, 27, 35, 46, 55, 56, 57, 59, 60, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 121, 123, 124, 126, 127, 148, 160, 163, 176, 178, 180, 181, 188, 189, 191, 192, 193, 197, 198, 204, 206, 209, 210, 211, 213, 214, 219, 220], "batch_of_doc": 3, "_config": 3, "_upload_batch": 3, "dataclass": [3, 4, 8, 14, 124, 127, 138, 175, 179, 183, 190, 192, 193, 194, 202, 212, 217], "basebackendmixin": [3, 63, 65, 70, 71, 76, 81, 91, 96, 102, 108, 113], "documentarraysourcetyp": [3, 19], "mydocstoreconfig": 3, "config1": 3, "config2": 3, "config3": 3, "backendmixin": [3, 63, 64, 65, 75, 76, 80, 81, 90, 91, 95, 96, 101, 102, 107, 108, 112, 113], "_init_storag": 3, "_doc": [3, 19, 212], "super": [3, 218], "_ensure_unique_config": 3, "config_root": 3, "config_subindex": 3, "config_join": 3, "subindex_nam": 3, "identifi": [3, 182, 194, 197, 204, 219, 220], "expos": [3, 5, 11], "argument": [3, 5, 10, 16, 17, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 124, 126, 127, 130, 136, 146, 147, 148, 149, 189, 192, 194, 199, 203, 205, 208, 211], "init_storag": 3, "pars": [3, 4, 60, 124, 127, 140, 149, 199], "either": [3, 4, 8, 10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 31, 45, 46, 55, 56, 57, 61, 62, 117, 124, 127, 136, 139, 146, 148, 153, 156, 157, 185, 193, 206, 208, 211, 215, 219, 220], "accept": [3, 188, 189, 192, 193, 205, 206, 208], "bool": [3, 7, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 31, 32, 35, 37, 39, 41, 44, 45, 46, 47, 48, 55, 56, 57, 59, 61, 62, 64, 65, 75, 76, 77, 90, 91, 92, 95, 96, 101, 102, 103, 107, 108, 112, 113, 117, 123, 124, 126, 127, 130, 132, 134, 136, 137, 138, 139, 146, 147, 148, 149, 151, 159, 160, 219, 220], "further": [3, 10, 13, 16, 19, 22, 57, 62, 117, 124, 181, 183, 188, 197, 214], "outsid": [3, 124, 127, 136], "take": [3, 4, 12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 149, 178, 190, 195, 205, 209, 214], "form": [3, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 124, 127, 130, 132, 147, 149, 211], "appropri": 3, "veri": [3, 4, 10, 12, 16, 18, 19, 20, 21, 22, 24, 38, 56, 57, 61, 62, 117, 176, 178, 183, 195, 202, 203, 209, 214, 217], "copi": [3, 19, 59, 118, 124, 149, 169, 188, 205, 208], "behavior": [3, 4, 5, 16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117, 176, 192, 194, 199, 203], "subindex": [3, 4, 16, 18, 19, 20, 21, 22, 24, 32, 45, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 179, 212], "root": [3, 16, 18, 19, 20, 21, 22, 24, 32, 50, 55, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 189, 194, 201, 202, 205], "unless": [3, 189, 211], "field": [3, 7, 10, 11, 14, 16, 18, 19, 20, 21, 22, 24, 31, 32, 39, 47, 56, 57, 59, 61, 62, 71, 75, 77, 90, 92, 101, 102, 103, 117, 118, 119, 123, 124, 126, 127, 134, 139, 147, 149, 160, 169, 182, 183, 190, 191, 192, 193, 194, 195, 197, 199, 201, 202, 206, 211, 212, 213, 215, 219, 220], "explicitli": [3, 4, 151, 199], "usual": [3, 5, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 183, 192, 195], "tabl": [3, 4, 9, 16, 18, 19, 20, 21, 22, 24, 43, 44, 56, 57, 61, 62, 68, 117, 179, 189, 202, 205, 211, 215], "table_nam": [3, 4, 9, 15, 62, 63, 107, 108, 110], "clash": 3, "actual": [3, 4, 29, 59, 72, 124, 127, 148, 181, 193, 205, 216, 219, 220], "parent": [3, 18, 179, 191, 197, 212, 214, 219, 220], "und": 3, "subindic": 3, "despit": 3, "within": [3, 8, 10, 16, 18, 19, 20, 21, 22, 24, 51, 56, 57, 61, 62, 117, 180], "typevar": [3, 123, 192], "input": [3, 4, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 31, 32, 46, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 136, 149, 151, 160, 180, 199, 201, 204, 205, 214, 217], "mydocumentstorearraytyp": 3, "findmixin": [3, 15, 24, 32, 63, 64, 66, 75, 77, 80, 82, 90, 92, 95, 97, 101, 103, 107, 112, 114], "_find_similar_vector": 3, "_find": [3, 32], "opensearcharraytyp": 3, "given": [3, 10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 31, 32, 45, 46, 47, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 126, 127, 136, 139, 146, 183, 189, 191, 192, 193, 194, 204, 206, 208, 211, 212], "closest": [3, 16, 18, 19, 20, 21, 22, 24, 32, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 181, 183, 208], "abc": [3, 24, 64, 71, 72, 75, 80, 90, 101, 107, 112], "__all__": 3, "storagemixin": [3, 16, 20, 22, 56, 57, 61, 62, 63, 64, 75, 80, 90, 95, 101, 107, 112, 117], "past": 3, "modul": [3, 10, 175, 189, 191, 205, 218], "content": [3, 16, 18, 19, 20, 21, 22, 44, 56, 57, 61, 62, 117, 125, 126, 133, 141, 175, 194, 195, 196, 197, 203], "documentarraymydocstor": 3, "__new__": [3, 20, 56, 57, 61, 117], "cl": [3, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 123], "arg": [3, 16, 17, 18, 19, 20, 21, 22, 24, 27, 30, 37, 40, 41, 44, 56, 57, 58, 59, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 124, 126, 127, 140, 146, 176], "almost": [3, 4, 191], "allmixin": [3, 15, 19, 24, 124, 127, 169, 171], "basedocumentarrai": [3, 14, 15, 17, 19], "documentarraylik": [3, 16, 18, 19, 20, 21, 22, 24, 31, 42, 56, 57, 61, 62, 117], "elif": 3, "documentarrayinmemori": [3, 11, 14, 15, 18, 21, 22, 212], "done": [3, 12, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 209, 214], "abl": [3, 11, 214], "welcom": 3, "back": [3, 4, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 46, 48, 56, 57, 61, 62, 117, 124, 127, 146, 176, 178, 179, 189, 211, 214, 216], "least": [3, 178, 202], "unit": [3, 190, 191, 193], "test_advance_index": 3, "test_sequ": 3, "test_construct": 3, "pleas": [3, 13, 16, 18, 19, 20, 21, 22, 24, 27, 37, 45, 46, 56, 57, 61, 62, 72, 117, 124, 127, 136, 158, 176, 194, 210, 214, 215, 216], "overload": 3, "readi": [3, 190, 199, 209, 211, 217, 218], "commit": [3, 4, 64, 68], "switch": [4, 178, 207, 208], "idiom": [4, 11, 191, 217, 218], "simpl": [4, 5, 10, 126, 177, 179, 189, 190, 191, 196, 198, 202, 204, 208, 209, 211, 217], "db": [4, 9, 11, 16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "multimod": [4, 8, 123, 124, 127, 188, 189, 190, 191, 194, 202, 212, 217, 218], "documentarraysqlit": [4, 14, 15, 62], "documentarraysqlite97c8c833586444a89272ff0ff4287edb": 4, "serialize_config": [4, 5, 7, 9, 10, 15, 16, 57, 62, 63, 64, 65, 95, 96, 97, 107, 108, 112, 113, 117, 212], "conn_config": [4, 9, 15, 62, 63, 107, 108], "journal_mod": [4, 9, 15, 62, 63, 107, 108], "synchron": [4, 9, 15, 62, 63, 107, 108], "modifi": [4, 16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 46, 48, 56, 57, 59, 61, 62, 117, 124, 127, 146, 194, 196, 209], "statement": 4, "properli": 4, "wai": [4, 8, 16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 61, 62, 117, 181, 184, 187, 189, 191, 194, 201, 202, 205, 207, 209, 214, 215], "unexpect": [4, 189, 194], "inaccess": 4, "procedur": [4, 209, 214], "emb": [4, 5, 10, 12, 14, 15, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 124, 127, 146, 179, 191, 193, 195, 196, 201, 208, 218], "plot_embed": [4, 15, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 204, 213, 215], "box": [4, 11, 191], "initi": [4, 10, 16, 18, 19, 20, 21, 22, 24, 51, 56, 57, 61, 62, 112, 113, 117, 124, 194], "extern": [4, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 176, 194], "two": [4, 8, 10, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 59, 61, 62, 117, 124, 127, 136, 147, 160, 181, 184, 189, 191, 198, 201, 202, 205, 206, 209, 215], "4477814032": 4, "alia": [4, 59, 71, 112, 113, 117], "choos": [4, 149, 208, 211], "style": [4, 43, 126, 180, 215], "altern": [4, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 205, 216, 218], "explicit": 4, "nest": [4, 10, 11, 16, 18, 19, 20, 21, 22, 24, 38, 55, 56, 57, 61, 62, 117, 119, 120, 124, 127, 139, 151, 179, 182, 183, 189, 191, 193, 195, 197, 200, 205, 206, 207, 214, 215, 217, 218], "modal": [4, 14, 16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117, 124, 125, 127, 141, 149, 150, 179, 189, 193, 194, 197, 199, 202, 206, 211, 212, 217, 219, 220], "load": [4, 10, 15, 16, 18, 19, 20, 21, 22, 24, 26, 36, 37, 38, 39, 40, 42, 45, 56, 57, 61, 62, 64, 68, 70, 73, 117, 124, 126, 127, 137, 146, 176, 179, 180, 181, 183, 190, 192, 199, 204, 209, 211, 217], "sqliteconfig": [4, 14, 15, 19, 62, 63, 107, 108], "cfg": 4, "test": [4, 5, 7, 8, 12, 123, 176, 188, 189, 192, 205, 206, 209, 216, 218], "flexibl": [4, 188], "error": [4, 205, 214], "prone": 4, "placehold": 4, "prototyp": [4, 11, 215], "shouldn": [4, 205], "product": [4, 5, 11, 211, 215, 217], "unnecessarili": 4, "exact": [4, 22, 62, 205], "scan": [4, 15, 57, 63, 95, 98, 178, 203], "hand": [4, 16, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 61, 62, 117, 124, 127, 146, 147, 195, 199, 205, 208], "avail": [4, 10, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 72, 117, 151, 176, 209, 216], "explan": [4, 10, 210], "doesn": [4, 10, 178, 194, 195, 203, 208], "milvu": [4, 14, 15, 19, 63], "choic": [4, 16, 18, 19, 20, 21, 22, 24, 27, 46, 56, 57, 61, 62, 117], "scale": [4, 124, 127, 136, 217], "eas": 4, "setup": 4, "One": [4, 5, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 176, 178, 182, 208, 210, 214, 217, 218], "million": [4, 12, 124, 127, 136, 199, 208, 211], "benchmark": [4, 8, 208, 211, 217], "consider": [4, 10], "think": [4, 202], "program": [4, 177, 209], "view": [4, 124, 127, 136, 178, 185], "sync": [4, 15, 16, 18, 20, 21, 22, 56, 57, 61, 62, 63, 64, 67, 70, 72, 75, 78, 80, 83, 90, 93, 95, 98, 101, 104, 107, 109, 112, 115, 117], "da1": [4, 9, 62, 203, 208], "my_index": 4, "len": [4, 183, 189, 199, 205, 209, 211, 213, 214, 217], "execut": [4, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 64, 68, 117, 204, 205], "script": 4, "yield": [4, 16, 18, 19, 20, 21, 22, 24, 26, 27, 35, 46, 55, 56, 57, 61, 62, 117, 124, 126, 127, 148, 184, 199, 203, 209, 211], "line": [4, 41, 126, 177, 178, 183, 189], "fresh": 4, "increment": 4, "seem": [4, 191, 217], "happen": [4, 209], "sinc": [4, 10, 124, 127, 136, 149, 151, 180, 181, 205, 213, 217], "didn": [4, 214], "scope": [4, 11, 197, 219, 220], "exit": [4, 5, 10, 124, 127, 148, 184], "destroi": 4, "But": [4, 178, 191, 193, 199, 201, 208], "had": [4, 183, 217], "wouldn": 4, "occur": [4, 158], "correctli": [4, 12, 205, 215], "prove": 4, "yourself": [4, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 193, 209], "comment": 4, "third": 4, "explor": [4, 180], "predict": [4, 205], "another_index": 4, "hoorai": 4, "problem": [4, 12, 178, 208, 209, 214], "point": [4, 5, 7, 124, 127, 136, 137, 139, 179, 186, 189, 193, 196, 205, 213, 215], "temp3": 4, "text": [4, 5, 7, 10, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 32, 43, 46, 56, 57, 59, 61, 62, 75, 76, 77, 90, 91, 92, 95, 96, 101, 102, 103, 117, 123, 124, 125, 126, 127, 130, 132, 134, 141, 149, 150, 179, 181, 188, 189, 191, 193, 194, 195, 196, 197, 199, 201, 203, 204, 205, 206, 210, 211, 212, 214, 217, 218, 219, 220], "hello": [4, 16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 59, 61, 62, 117, 124, 127, 146, 177, 181, 182, 183, 189, 193, 194, 199, 201, 203, 210, 211, 212, 214, 217], "realli": [4, 189, 199, 202], "date": 4, "clearli": 4, "alreadi": [4, 16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117, 185, 202, 205, 207, 213, 216], "written": [4, 16, 18, 19, 20, 21, 22, 24, 29, 31, 56, 57, 61, 62, 117, 124, 127, 146, 183, 213], "snippet": [4, 11, 190, 191, 211], "ll": [4, 189, 191, 199, 202, 203, 205, 208, 214], "simpli": [4, 10, 178, 180, 181, 188, 189, 199, 202, 207, 208, 211, 214], "put": [4, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 139, 178, 184, 188, 189, 191, 195, 217], "meta": [4, 191, 219, 220], "immedi": [4, 209], "costli": [4, 5], "consequ": 4, "block": [4, 12, 202, 205, 209, 217], "solv": [4, 5, 189, 191, 209], "prior": [4, 10], "refactor": [4, 176, 190, 217], "temp4": 4, "correct": [4, 199, 205, 211], "short": [4, 11, 176, 183], "write": [4, 182, 205, 210, 218], "row": [4, 5, 16, 18, 19, 20, 21, 22, 24, 25, 56, 57, 61, 62, 117, 153, 154, 156, 157, 159, 160, 182, 189, 208, 217], "any_store_beyond_in_memori": 4, "d": [4, 5, 7, 12, 124, 127, 139, 147, 151, 179, 188, 189, 190, 193, 194, 195, 196, 198, 199, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 214, 217, 219, 220], "slice": [4, 16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117, 202], "NOT": [4, 59, 124, 127, 136], "chang": [4, 8, 16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 61, 62, 117, 149, 178, 185, 191, 192, 194, 199, 203, 205, 212, 217], "selector": [4, 176, 188, 189, 190, 202], "offset": [4, 14, 68, 124, 125, 127, 132, 141, 149, 150, 197, 199, 202, 211, 219, 220], "along": [4, 16, 18, 19, 20, 21, 22, 24, 25, 27, 32, 35, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117], "themselv": 4, "concurr": 4, "d1": [4, 124, 193, 194, 195, 200, 203], "d2": [4, 124, 194, 195, 200], "d3": [4, 124, 194, 195, 200], "obvious": 4, "disk": [4, 10, 12, 16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117, 176, 207], "concern": 4, "overwhelm": 4, "affect": [4, 176], "On": [4, 10, 204, 215], "bright": 4, "modern": [4, 199, 214, 218], "highli": [4, 178, 191, 199, 217], "moreov": [4, 211], "resolv": [4, 11, 182], "activ": [4, 195, 204, 217], "continu": [4, 189, 191, 201, 202, 211], "pymilvu": 5, "etcd": 5, "container_nam": 5, "quai": 5, "io": [5, 14, 15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 161, 176, 177, 190, 191, 193, 199, 209, 216, 217, 218], "coreo": 5, "etcd_auto_compaction_mod": 5, "revis": [5, 217], "etcd_auto_compaction_retent": 5, "etcd_quota_backend_byt": 5, "4294967296": 5, "etcd_snapshot_count": 5, "50000": 5, "volum": 5, "docker_volume_directori": 5, "command": [5, 10, 61, 101, 102, 177], "advertis": 5, "url": [5, 11, 151, 197, 216, 219, 220], "127": [5, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "2379": 5, "listen": 5, "dir": 5, "minio": 5, "releas": [5, 176, 217], "2022": [5, 185, 211, 216], "17t06": 5, "49z": 5, "minio_access_kei": 5, "minioadmin": 5, "minio_secret_kei": 5, "minio_data": 5, "healthcheck": 5, "cmd": 5, "curl": [5, 216], "9000": 5, "health": 5, "interv": 5, "timeout": [5, 10, 124, 127, 130, 136, 147], "retri": 5, "standalon": 5, "milvusdb": 5, "v2": [5, 209, 218], "etcd_endpoint": 5, "minio_address": 5, "var": [5, 10], "lib": [5, 10], "19530": 5, "9091": 5, "depends_on": 5, "guidanc": 5, "collection_nam": [5, 7, 15, 57, 63, 95, 96, 97, 98, 100], "6333": [5, 7, 57, 95, 96], "ip": [5, 8], "jaccard": [5, 16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117, 183], "tanimoto": 5, "ham": [5, 8, 16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "superstructur": 5, "substructur": 5, "inner": [5, 72, 188], "index_typ": 5, "flat": [5, 8, 10, 202], "variant": 5, "ivf": 5, "rhnsw": 5, "index_param": 5, "efconstruct": 5, "collection_config": 5, "serial": [5, 7, 9, 10, 16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117, 124, 127, 140, 151, 182, 196, 207, 209, 214, 216, 217, 218], "consistency_level": 5, "session": 5, "strong": 5, "bound": [5, 10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 123, 184, 192, 209], "eventu": 5, "datbas": 5, "taken": 5, "download": [5, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 124, 127, 130, 151, 178, 185, 195, 211, 216], "wget": 5, "github": [5, 59], "com": [5, 59, 216], "o": [5, 6, 12, 183, 191, 202], "launch": 5, "init": [5, 7, 123, 189, 211], "4917906896": [5, 7], "express": [5, 59, 189, 191, 193, 197, 201, 203, 206, 218], "ndocumentarrai": [5, 7, 211], "suppos": [5, 181], "npoint": [5, 7], "main": [5, 181, 205, 214], "current": [5, 8, 16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 61, 62, 117, 124, 127, 136, 146, 160, 208, 218], "intial": 5, "rand": [5, 180, 204, 212], "relev": [5, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 158, 205, 219, 220], "send": [5, 16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 117, 124, 127, 146, 190, 199, 209, 214], "abil": 5, "param": [5, 10, 16, 18, 19, 20, 21, 22, 24, 44, 50, 56, 57, 59, 61, 62, 117, 124, 127, 139, 151, 153, 154, 160], "mixin": [5, 14, 15, 82, 124, 169], "metric_typ": 5, "nprobe": 5, "entir": [5, 10, 181], "awar": [5, 176, 216], "especi": [5, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 181, 183, 205, 209, 215], "mitig": 5, "context": [5, 201, 217], "manag": [5, 186, 187, 211, 216], "whenev": [5, 7, 72], "onc": [5, 16, 18, 19, 20, 21, 22, 24, 31, 50, 55, 56, 57, 61, 62, 117, 124, 127, 148, 183, 185, 195, 199, 202, 208, 212], "small": [5, 8, 10, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 124, 127, 134, 154, 156, 157, 159, 179, 183, 211], "leav": [5, 16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117], "loaded_collect": 5, "drop": [5, 10, 64, 68, 194], "replac": [5, 16, 18, 19, 20, 21, 22, 24, 51, 56, 57, 61, 62, 117, 189], "incur": 5, "signific": [5, 209], "penalti": 5, "bad": 5, "workaround": 5, "comput": [5, 10, 16, 18, 19, 20, 21, 22, 24, 29, 31, 45, 56, 57, 61, 62, 117, 124, 127, 136, 146, 153, 156, 157, 183, 197, 202, 207, 208, 211, 214, 217, 219, 220], "why": [5, 191, 199, 215, 218], "base64": [5, 124, 127, 130, 132, 140, 147, 193, 218], "represent": [5, 18, 149, 169, 171, 176, 179, 191, 194, 195, 204, 211, 217, 219, 220], "varchar": 5, "impos": 5, "entri": [5, 124, 127, 147, 159, 186], "exce": [5, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "team": 5, "columm": 5, "could": [5, 11, 16, 18, 19, 20, 21, 22, 24, 39, 44, 56, 57, 61, 62, 117, 126, 178, 181, 189, 197, 208, 209, 219, 220], "futur": 5, "elast": [6, 14, 15, 63], "opensearchproject": 6, "opensearch_config": [6, 15, 56, 63, 90, 91], "cosinesimil": [6, 56, 90, 91], "v0": [7, 16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 117, 124, 127, 146, 210], "6334": [7, 57, 95, 96], "ulimit": 7, "collect": [7, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 139, 178, 191, 205], "nofil": 7, "soft": 7, "65535": 7, "hard": [7, 178], "grpc_port": [7, 15, 57, 63, 95, 96], "prefer_grpc": [7, 15, 57, 63, 95, 96], "gprc": 7, "authent": [7, 203], "cloud": [7, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 124, 127, 137, 139, 151, 179, 185, 187, 189, 196, 215, 216, 217, 218], "ssl": [7, 8], "protocol": [7, 10, 12, 15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 37, 42, 56, 57, 61, 62, 63, 112, 113, 117, 124, 127, 140, 151, 166, 168, 176, 199, 209, 210, 211, 217], "scroll_batch_s": [7, 15, 57, 63, 95, 96, 98], "scroll": 7, "larger": [7, 16, 18, 19, 20, 21, 22, 24, 42, 56, 57, 61, 62, 117, 124, 127, 134, 183], "accur": [7, 10, 181], "full_scan_threshold": [7, 15, 57, 63, 95, 96], "kilobyt": 7, "payload": 7, "edg": [7, 10], "graph": [7, 8, 10, 160], "space": [7, 153, 180, 202], "geo": [7, 8, 57, 61, 95, 96, 101, 102], "search_param": 7, "hnsw_ef": 7, "distance_metr": 7, "_similar": 7, "euclidean_similar": 7, "redislab": 8, "redisearch": 8, "6379": [8, 61, 101, 102], "previuosli": 8, "idx": [8, 73, 184], "documentarrayredi": [8, 14, 15, 61, 104], "update_schema": [8, 15, 61, 63, 101, 102], "redis_config": [8, 15, 61, 63, 101, 102], "ef_runtim": [8, 15, 61, 63, 101, 102], "block_siz": [8, 15, 61, 63, 101, 102], "1048576": 8, "initial_cap": [8, 15, 61, 63, 101, 102], "socket_timeout": 8, "redissearch": 8, "syntax": [8, 146, 176, 188, 189, 190, 196, 202, 217], "color": [8, 12, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 136, 137, 139, 178, 180], "stock": 8, "blue": 8, "red": [8, 123, 202], "inf": 8, "192": [8, 16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 117, 124, 127, 146, 210], "integ": [8, 16, 17, 18, 19, 20, 21, 22, 56, 57, 61, 62, 64, 69, 74, 75, 76, 79, 80, 84, 90, 91, 94, 95, 96, 100, 101, 102, 105, 107, 111, 112, 116, 117, 124, 127, 147, 183, 202, 219, 220], "treat": [8, 124, 127, 129], "With": [8, 10, 16, 22, 57, 62, 117, 180, 181, 183, 191, 203, 209], "geospati": 8, "max_dist": 8, "earth": 8, "coordin": [8, 197, 219, 220], "km": 8, "brute": [8, 10], "forc": [8, 10, 16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117, 124, 127, 142, 151], "robust": 8, "hierarch": 8, "navig": 8, "world": [8, 181, 182, 183, 189, 191, 193, 194, 199, 201, 203, 211, 212, 214, 218], "configuratoin": 8, "96046447754e": 8, "token1": 8, "token2": 8, "token3": 8, "token4": 8, "rank": [8, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 158, 205], "bm25": 8, "besid": [8, 182, 206, 217], "tfidf": 8, "docnorm": 8, "dismax": 8, "docscor": 8, "scorer": 8, "reconnect": 9, "mine": [9, 62], "filenam": [9, 16, 18, 19, 20, 21, 22, 24, 26, 37, 38, 39, 42, 56, 57, 61, 62, 117, 124, 126, 127, 130, 133, 136, 151, 203, 211], "sqlite3": 9, "pragma": 9, "journal": [9, 181, 206], "mode": [9, 126, 151, 183], "video": [10, 124, 127, 179, 189, 193, 196, 197, 215, 216, 217, 218, 219, 220], "tutori": [10, 11], "8080": [10, 16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 112, 113, 117, 124, 127, 146], "scheme": [10, 197, 219, 220], "semitechnologi": 10, "restart": 10, "failur": 10, "query_defaults_limit": 10, "authentication_anonymous_access_en": 10, "persistence_data_path": 10, "default_vectorizer_modul": 10, "enable_modul": 10, "cluster_hostnam": 10, "node1": 10, "ve": [10, 183, 185, 189, 190, 191, 202, 211, 212, 217], "capit": 10, "1234": [10, 117, 204], "present": [10, 16, 17, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 64, 69, 71, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117], "squar": [10, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 154, 156, 157, 188], "chosen": [10, 151, 208], "becom": [10, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "tradeoff": 10, "timeout_config": [10, 15, 63, 112, 113, 117], "request": [10, 16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 117, 124, 127, 146, 209, 211, 216, 218], "dynamic_ef_min": [10, 15, 63, 112, 113, 117], "act": 10, "boundari": 10, "enough": [10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 205, 217], "suggest": [10, 209], "never": [10, 199], "dynamic_ef_max": [10, 15, 63, 112, 113, 117], "cap": 10, "massiv": 10, "dynamic_ef_factor": [10, 15, 63, 112, 113, 117], "determin": [10, 16, 18, 19, 20, 21, 22, 24, 31, 55, 56, 57, 61, 62, 117, 124, 127, 136, 148, 151, 158, 184, 189], "factor": 10, "vector_cache_max_object": [10, 15, 63, 112, 113, 117], "held": 10, "2m": 10, "lookup": [10, 15, 58, 60], "magnitud": 10, "cach": [10, 151], "sparingli": 10, "flat_search_cutoff": [10, 15, 63, 112, 113, 117], "absolut": 10, "threshold": 10, "cutoff": 10, "bypass": 10, "40000": 10, "turn": [10, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "cleanup_interval_second": [10, 15, 63, 112, 113, 117], "async": [10, 214], "repair": 10, "cleanup": 10, "mark": [10, 16, 18, 19, 20, 21, 22, 24, 32, 45, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 146, 183], "reassign": 10, "datapoint": 10, "typic": [10, 59], "adjust": [10, 205], "sens": [10, 124, 127, 136, 205], "down": [10, 216], "clean": [10, 214], "skip": [10, 15, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 63, 112, 113, 117, 124, 127, 139], "There": [10, 12, 181, 189, 193, 207, 209, 216, 217], "situat": 10, "meant": 10, "glue": 10, "duplic": [10, 149], "candid": 10, "worst": 10, "earli": [10, 215], "ident": [10, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 180, 194, 203, 205], "met": 10, "normal": [10, 16, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 61, 62, 117, 124, 127, 136, 139, 146, 158, 159, 178, 196, 209], "immut": 10, "And": [10, 59, 183, 214], "fast": [10, 11, 16, 19, 57, 117, 217, 218], "bert": 10, "transform": 10, "automodel": 10, "autotoken": 10, "token": [10, 16, 18, 19, 20, 21, 22, 24, 54, 56, 57, 61, 62, 117, 151, 183, 187, 190, 211], "from_pretrain": 10, "uncas": 10, "collate_fn": [10, 16, 18, 19, 20, 21, 22, 24, 29, 31, 56, 57, 61, 62, 117], "return_tensor": 10, "pt": 10, "truncat": 10, "pad": [10, 16, 18, 19, 20, 21, 22, 24, 54, 56, 57, 61, 62, 117, 124, 127, 136, 147, 183, 202], "path": [10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 37, 47, 55, 56, 57, 61, 62, 117, 124, 126, 127, 139, 149, 151, 189, 197, 201, 202, 203, 210, 212, 219, 220], "lessthanequ": 10, "valuenumb": 10, "lowerthanequ": 10, "valueint": 10, "upgrad": 10, "primit": [10, 119, 120, 189], "natur": [10, 176, 193, 201, 203], "highest": 10, "lowest": 10, "dummi": [10, 11], "word": [10, 16, 18, 19, 20, 21, 22, 24, 54, 56, 57, 61, 62, 117, 124, 127, 147, 176, 183, 191, 212, 217], "desc": 10, "asc": 10, "ascend": 10, "nearvector": 10, "combin": [10, 179, 197, 211], "sometim": [10, 124, 127, 130, 132, 147, 183, 199], "query_param": 10, "bodi": [10, 180, 214], "familiar": [10, 181, 188, 191, 213, 217], "graphql": [10, 216, 218], "goe": 10, "36840257": 10, "13973749": 10, "28994447": 10, "_addit": 10, "said": [10, 209], "theoret": 10, "anyth": [10, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 207, 208], "weaviate_certainti": 10, "someth": [10, 195], "5762787e": 10, "attach": [10, 124, 127, 148], "featureproject": 10, "classif": 10, "core": [10, 12, 209, 214, 216, 217], "page": [10, 178, 181, 185, 193], "text2vec": 10, "contextionari": 10, "respons": [10, 11, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 209, 218], "creationtimeunix": 10, "lastupdatetimeunix": 10, "tags__creationtimeunix": 10, "tags__lastupdatetimeunix": 10, "1656020204563": 10, "exactli": [11, 189, 205], "too": [11, 178, 202, 205, 207, 208, 214, 217], "verbos": 11, "rest": [11, 199, 209, 211, 214, 217], "stabl": [11, 124, 127, 148, 218], "app": [11, 214, 218], "endpoint": [11, 16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 117, 124, 127, 146, 210, 214], "schema": [11, 16, 18, 19, 20, 21, 22, 24, 49, 56, 57, 61, 62, 64, 68, 112, 113, 117, 124, 127, 143, 149, 176, 192, 197, 199, 218], "strawberri": [11, 15, 16, 18, 19, 20, 21, 22, 24, 56, 57, 61, 62, 117, 124, 127, 216, 218], "debug": [11, 151, 215], "articl": [11, 188, 189, 191, 216], "serv": [11, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 195], "introduct": [11, 176], "background": [11, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "stronli": 11, "confus": [11, 176], "matcharrai": [11, 14, 15, 16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117, 124, 127, 141, 201, 202, 205], "rememb": [11, 183, 188, 211], "fetch": [11, 193], "strawberry_typ": [11, 14, 124], "strawberrydocu": [11, 14, 16, 18, 19, 20, 21, 22, 24, 53, 56, 57, 61, 62, 117, 124, 127, 145, 150], "lambda": [11, 123, 181, 183, 189, 190, 192, 205], "to_strawberry_typ": [11, 14, 15, 16, 18, 19, 20, 21, 22, 24, 53, 56, 57, 61, 62, 117, 124, 127, 145], "notic": [11, 59, 206], "preprocess": [11, 12, 178, 190, 196, 209, 211], "toi": [11, 177, 182, 184], "py": [11, 126], "consol": [11, 211, 215], "8000": 11, "browser": [11, 187], "playground": 11, "beyond": [11, 215], "decid": [11, 124, 127, 139], "perfect": [11, 190, 218], "wrap": [11, 72, 124, 127, 138, 151, 189, 194], "asgi": 11, "graphql_app": 11, "add_rout": 11, "add_websocket_rout": 11, "tensorflow": [12, 152, 153, 193, 195, 197, 201, 204, 208, 217, 218], "paddlepaddl": [12, 193, 195, 197, 201, 204, 217, 218], "tensor": [12, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 29, 31, 47, 56, 57, 61, 62, 117, 124, 125, 127, 129, 132, 136, 137, 139, 141, 147, 148, 149, 150, 156, 157, 160, 176, 177, 178, 180, 181, 183, 184, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 204, 208, 209, 211, 215, 216, 217, 218, 219, 220], "spars": [12, 16, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 61, 62, 117, 124, 127, 134, 146, 153, 154, 160, 193, 195, 197, 201, 208, 216, 218, 219, 220], "dens": [12, 124, 127, 134, 160, 178, 193, 195, 197, 199, 201, 204, 208, 219, 220], "pickl": [12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 37, 46, 56, 57, 61, 62, 117, 124, 127, 140, 176, 199], "protobuf": [12, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 37, 42, 56, 57, 61, 62, 117, 118, 124, 126, 127, 140, 151, 169, 176, 194, 203, 209, 216, 217, 218, 219], "compress": [12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 37, 56, 57, 61, 62, 117, 124, 127, 140, 151, 199, 209, 211, 216, 217, 218], "transit": [12, 217, 218], "preserv": [12, 16, 18, 19, 20, 21, 22, 24, 27, 35, 47, 56, 57, 61, 62, 117, 124, 127, 129, 202], "paddl": [12, 16, 18, 19, 20, 21, 22, 24, 29, 31, 56, 57, 61, 62, 117, 124, 127, 146, 152, 153, 204, 208], "torch": [12, 29, 152, 153, 160, 181, 188, 190, 195, 204, 208, 216, 217, 218], "to_spars": 12, "to_tensor": 12, "save_binari": [12, 15, 16, 18, 19, 20, 21, 22, 24, 36, 37, 42, 56, 57, 61, 62, 117, 211], "gz": [12, 126], "again": [12, 205, 211, 214], "load_binari": [12, 15, 16, 18, 19, 20, 21, 22, 24, 36, 37, 56, 57, 61, 62, 117, 176, 211], "engin": [12, 15, 20, 56, 57, 61, 63, 90, 91, 117, 189, 199, 214, 217, 218], "gpu": [12, 202, 204, 210, 211, 217, 218], "intens": [12, 217], "stuff": 12, "mani": [12, 16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 61, 62, 117, 124, 127, 136, 178, 191, 211, 214, 215, 217], "pitfal": 12, "few": 12, "util": [12, 16, 18, 19, 20, 21, 22, 24, 39, 56, 57, 61, 62, 117], "drain": [12, 209], "dataload": [12, 15, 16, 18, 19, 20, 21, 22, 24, 56, 57, 61, 62, 117], "figur": [12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 47, 56, 57, 61, 62, 117, 211, 217], "illustr": [12, 198], "14gb": 12, "cpu_job": [12, 209], "sleep": [12, 209], "job": [12, 209], "gpu_job": [12, 209], "func": [12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 46, 56, 57, 61, 62, 81, 117, 151, 209], "num_work": [12, 16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 45, 46, 56, 57, 61, 62, 117, 124, 127, 146, 209], "donecpu": 12, "section": [13, 185, 189, 191, 194, 205, 207, 209, 211, 214, 216, 217], "codebas": [13, 190, 211, 217], "extract": [13, 124, 127, 136, 151, 177, 179], "docstr": 13, "guid": [13, 16, 19, 22, 57, 62, 117, 124, 176], "queryset": [14, 15], "annliteconfig": [14, 15, 16, 19, 63, 64, 65], "documentarrayannlit": [14, 15, 16, 212], "chunkarrai": [14, 15, 16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117, 124, 127, 141, 178, 201, 202, 212], "documentarrayelast": [14, 15, 20, 78], "elasticconfig": [14, 15, 19, 20, 63, 75, 76], "opensearch": [14, 15, 19, 63], "documentarrayopensearch": [14, 15, 56], "opensearchconfig": [14, 15, 19, 56, 63, 90, 91], "documentarrayqdr": [14, 15, 57], "qdrantconfig": [14, 15, 57, 63, 95, 96], "redisconfig": [14, 15, 19, 61, 63, 101, 102], "documentarrayweavi": [14, 15, 112, 113, 115, 117], "weaviateconfig": [14, 15, 19, 63, 112, 113, 117], "enum": [14, 119, 137], "documentmetadata": [14, 119, 120], "attributetyp": [14, 119, 120], "imagetyp": [14, 119, 120], "getter": [14, 25, 33, 119, 123, 190, 192, 193], "image_gett": [14, 119, 121, 123], "text_gett": [14, 119, 121, 123], "uri_gett": [14, 119, 121], "audio_gett": [14, 119, 121], "video_gett": [14, 119, 121], "mesh_gett": [14, 119, 121], "tabular_gett": [14, 119, 121], "blob_gett": [14, 119, 121], "json_gett": [14, 119, 121], "setter": [14, 25, 119, 123, 190, 192, 193], "image_sett": [14, 119, 122, 123], "text_sett": [14, 119, 122, 123], "uri_sett": [14, 119, 122], "audio_sett": [14, 119, 122], "video_sett": [14, 119, 122], "mesh_sett": [14, 119, 122], "blob_sett": [14, 119, 122], "json_sett": [14, 119, 122], "tabular_sett": [14, 119, 122], "is_multimod": [14, 119, 123, 124, 127, 138, 189], "documentdata": [14, 124, 125], "from_ndarrai": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 41, 56, 57, 61, 62, 117, 124, 126], "from_fil": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 41, 56, 57, 61, 62, 117, 124, 126, 178, 203, 209, 213], "from_csv": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 41, 56, 57, 61, 62, 117, 124, 126, 182], "from_huggingface_dataset": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 41, 56, 57, 61, 62, 117, 124, 126], "from_ndjson": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 41, 56, 57, 61, 62, 117, 124, 126], "from_lin": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 41, 56, 57, 61, 62, 117, 124, 126], "pydantic_model": [14, 124, 214], "pydanticdocu": [14, 16, 18, 19, 20, 21, 22, 24, 49, 56, 57, 61, 62, 117, 124, 127, 143, 149, 214], "strawberrydocumentinput": [14, 124, 150], "adjac": [14, 15, 16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117, 124, 125, 127, 141, 149, 150, 194, 195, 197, 198, 199, 200, 202, 205, 211, 219, 220], "blob": [14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 56, 57, 61, 62, 117, 124, 125, 127, 132, 136, 141, 149, 150, 176, 189, 192, 193, 194, 195, 196, 197, 199, 201, 211, 219, 220], "clear": [14, 15, 16, 17, 18, 19, 20, 21, 22, 56, 57, 61, 62, 63, 64, 68, 69, 70, 73, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 118, 124, 169, 198], "content_hash": [14, 124, 127, 131], "content_typ": [14, 124, 127, 141, 149, 193], "convert_blob_to_datauri": [14, 124, 127, 130, 196], "convert_blob_to_image_tensor": [14, 124, 127, 136, 196], "convert_blob_to_tensor": [14, 124, 127, 132, 196], "convert_content_to_datauri": [14, 124, 127, 131, 196], "convert_image_tensor_to_blob": [14, 124, 127, 136, 196], "convert_image_tensor_to_sliding_window": [14, 124, 127, 136, 178, 196], "convert_image_tensor_to_uri": [14, 124, 127, 136, 196], "convert_tensor_to_blob": [14, 124, 127, 132, 196], "convert_tensor_to_text": [14, 124, 127, 147, 183, 196], "convert_text_to_datauri": [14, 124, 127, 147, 196], "convert_text_to_tensor": [14, 124, 127, 147, 183, 196], "convert_uri_to_datauri": [14, 124, 127, 132, 193, 196], "copy_from": [14, 118, 124, 169, 194], "displai": [14, 124, 127, 139, 179, 180, 200], "display_point_cloud_tensor": [14, 124, 127, 139], "display_rgbd_tensor": [14, 124, 127, 139], "display_tensor": [14, 124, 127, 139], "display_uri": [14, 124, 127, 139], "display_vertices_and_fac": [14, 124, 127, 139], "embed_feature_hash": [14, 19, 22, 124, 127, 134, 181, 183, 196], "from_base64": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 37, 56, 57, 61, 62, 117, 124, 127, 140, 196, 199, 211], "from_byt": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 37, 56, 57, 61, 62, 117, 124, 127, 140, 176, 196, 199, 211], "from_dict": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 40, 42, 56, 57, 61, 62, 117, 124, 127, 140, 176, 196, 199], "from_json": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 42, 56, 57, 61, 62, 117, 124, 127, 140, 176, 196, 199, 211, 214], "from_protobuf": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 37, 56, 57, 61, 62, 117, 124, 127, 142, 196, 199, 211], "from_pydantic_model": [14, 15, 16, 18, 19, 20, 21, 22, 24, 49, 56, 57, 61, 62, 117, 124, 127, 143, 196, 211, 214], "from_strawberry_typ": [14, 15, 16, 18, 19, 20, 21, 22, 24, 53, 56, 57, 61, 62, 117, 124, 127, 145, 196], "generator_from_webcam": [14, 124, 127, 148, 184], "get_json_schema": [14, 15, 16, 18, 19, 20, 21, 22, 24, 49, 56, 57, 61, 62, 117, 124, 127, 143, 214], "get_multi_modal_attribut": [14, 124, 127, 138], "get_vocabulari": [14, 15, 16, 18, 19, 20, 21, 22, 24, 54, 56, 57, 61, 62, 117, 124, 127, 147, 183], "granular": [14, 15, 16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117, 124, 125, 127, 141, 149, 150, 178, 180, 181, 183, 188, 189, 192, 194, 197, 198, 199, 200, 202, 211, 219, 220], "load_pil_image_to_datauri": [14, 124, 127, 136], "load_uri_to_audio_tensor": [14, 124, 127, 129, 177, 196], "load_uri_to_blob": [14, 123, 124, 127, 130, 192, 196], "load_uri_to_image_tensor": [14, 124, 127, 136, 178, 193, 195, 196, 209, 212], "load_uri_to_point_cloud_tensor": [14, 124, 127, 137, 180, 196], "load_uri_to_text": [14, 124, 127, 147, 183, 193, 196], "load_uri_to_vertices_and_fac": [14, 124, 127, 137, 180], "load_uri_to_video_tensor": [14, 124, 127, 148, 184, 196], "load_uris_to_rgbd_tensor": [14, 124, 127, 137, 180], "load_vertices_and_faces_to_point_cloud": [14, 124, 127, 137], "mime_typ": [14, 124, 125, 127, 141, 149, 150, 178, 181, 183, 188, 189, 192, 193, 194, 197, 199, 201, 203, 210, 211, 219, 220], "nbyte": [14, 118, 124, 169], "non_empty_field": [14, 118, 124, 169, 193], "parent_id": [14, 124, 125, 127, 141, 149, 150, 178, 180, 181, 183, 188, 189, 192, 194, 197, 198, 199, 200, 202, 211, 212, 219, 220], "plot_matches_sprit": [14, 124, 127, 139, 213], "pop": [14, 15, 16, 17, 18, 19, 20, 21, 22, 56, 57, 61, 62, 63, 64, 69, 70, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 118, 124, 169, 193], "post": [14, 15, 16, 18, 19, 20, 21, 22, 24, 56, 57, 61, 62, 117, 124, 127, 146, 188, 191, 209, 210, 214], "save_audio_tensor_to_fil": [14, 124, 127, 129, 177, 196], "save_blob_to_fil": [14, 124, 127, 130, 196], "save_image_tensor_to_fil": [14, 124, 127, 136, 178, 184, 196], "save_uri_to_fil": [14, 124, 127, 133, 196], "save_video_tensor_to_fil": [14, 124, 127, 148, 184, 196], "set_image_tensor_channel_axi": [14, 124, 127, 136, 178, 181, 195, 196, 209], "set_image_tensor_inv_norm": [14, 124, 127, 136, 196], "set_image_tensor_norm": [14, 124, 127, 136, 178, 181, 195, 196, 209], "set_image_tensor_resampl": [14, 124, 127, 136], "set_image_tensor_shap": [14, 124, 127, 136, 178, 181, 196], "set_multi_modal_attribut": [14, 124, 127, 138], "to_base64": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 37, 56, 57, 61, 62, 117, 124, 127, 140, 199, 211], "to_byt": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 37, 56, 57, 61, 62, 117, 124, 127, 140, 176, 199, 211], "to_dict": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 42, 56, 57, 61, 62, 117, 124, 127, 140, 169, 171, 173, 176, 199, 206, 211], "to_json": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 42, 56, 57, 61, 62, 117, 124, 127, 140, 176, 199, 211, 214], "to_protobuf": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 37, 56, 57, 61, 62, 117, 124, 127, 142, 199, 211], "to_pydantic_model": [14, 15, 16, 18, 19, 20, 21, 22, 24, 49, 56, 57, 61, 62, 117, 124, 127, 143, 211, 214], "uri": [14, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 119, 120, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 136, 137, 139, 141, 147, 148, 149, 150, 177, 178, 180, 181, 183, 184, 188, 189, 190, 191, 192, 194, 195, 196, 197, 199, 200, 203, 209, 210, 211, 212, 215, 219, 220], "weight": [14, 124, 125, 127, 141, 149, 150, 158, 197, 199, 206, 211, 219, 220], "math": [14, 175, 209], "r_precis": [14, 152, 158, 205], "precision_at_k": [14, 152, 158, 205], "hit_at_k": [14, 152, 158, 205], "average_precis": [14, 152, 158, 205], "reciprocal_rank": [14, 152, 158, 205], "recall_at_k": [14, 152, 158, 205], "f1_score_at_k": [14, 152, 158, 205], "dcg_at_k": [14, 152, 158, 205], "ndcg_at_k": [14, 152, 158, 205], "helper": [14, 24, 25, 26, 29, 30, 33, 34, 35, 38, 39, 41, 46, 47, 48, 52, 63, 64, 70, 95, 107, 124, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 139, 143, 145, 147, 148, 152, 175, 183, 196], "minmax_norm": [14, 152, 159], "top_k": [14, 124, 127, 139, 152, 159, 213], "update_rows_x_mat_best": [14, 152, 159], "unravel": [14, 152, 160, 201], "ravel": [14, 152, 160], "get_array_typ": [14, 152, 160], "to_numpy_arrai": [14, 152, 160], "to_list": [14, 15, 16, 18, 19, 20, 21, 22, 24, 36, 42, 56, 57, 61, 62, 117, 152, 160, 199, 211, 217], "get_array_row": [14, 152, 160], "check_arraylike_equ": [14, 152, 160], "detach_tensor_if_pres": [14, 152, 160], "proto": [14, 149, 175], "pb": [14, 161], "pb2": [14, 161], "docarray_pb2": [14, 161, 165, 167, 199], "namedscoredata": [14, 169, 170], "namedscor": [14, 124, 125, 127, 141, 169, 181, 197], "op_nam": [14, 169, 170, 171, 172, 219, 220], "ref_id": [14, 169, 170, 171, 172, 183, 219, 220], "basedctyp": [14, 118, 124, 169, 175], "typenam": [14, 151, 175], "deprecate_bi": [14, 151, 175], "dunder_get": [14, 151, 175], "random_ident": [14, 151, 175], "random_uuid": [14, 151, 175], "download_mermaid_url": [14, 151, 175], "get_full_vers": [14, 151, 175], "get_ci_vendor": [14, 151, 175], "reset_port": [14, 151, 175], "random_port": [14, 151, 175], "cached_properti": [14, 151, 175], "compress_byt": [14, 151, 175], "decompress_byt": [14, 151, 175], "get_compress_ctx": [14, 151, 175], "dataclass_from_dict": [14, 151, 175], "protocol_and_compress_from_file_path": [14, 151, 175], "add_protocol_and_compress_to_file_path": [14, 151, 175], "filter_dict": [14, 151, 175], "check_root_id": [14, 151, 175], "login": [14, 16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 151, 175], "logout": [14, 151, 175], "contentpropertymixin": [15, 24, 25, 124, 127, 131], "delitem": [15, 24, 67, 83, 109], "delitemmixin": [15, 24, 28], "embedmixin": [15, 24, 29], "get_framework": [15, 24, 29], "emptymixin": [15, 24, 30], "evaluationmixin": [15, 24, 31], "getattr": [15, 24], "getattributemixin": [15, 24, 33], "getitem": [15, 24, 67, 83, 109], "getitemmixin": [15, 24, 34], "groupmixin": [15, 24, 27, 35], "matchmixin": [15, 24, 45], "parallelmixin": [15, 24, 27, 46], "plot": [15, 16, 18, 19, 20, 21, 22, 24, 56, 57, 61, 62, 117, 124, 127, 202, 215], "plotmixin": [15, 24, 47, 124, 127, 139], "postmixin": [15, 24, 48], "pydant": [15, 16, 18, 19, 20, 21, 22, 24, 53, 56, 57, 61, 62, 117, 124, 127, 140, 199, 211], "pydanticmixin": [15, 24, 49, 124, 127, 143], "reduc": [15, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 205], "reducemixin": [15, 24, 50], "sampl": [15, 16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 124, 126, 127, 129, 137, 180, 189], "samplemixin": [15, 24, 51], "setitem": [15, 24, 67, 83, 109], "setitemmixin": [15, 24, 52], "strawberrymixin": [15, 24, 53, 124, 127, 145], "texttoolsmixin": [15, 24, 54], "travers": [15, 16, 18, 19, 20, 21, 22, 24, 27, 35, 56, 57, 61, 62, 117, 198, 202, 217], "traversemixin": [15, 24, 55], "apply_batch": [15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 209], "batch_id": [15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 35, 56, 57, 61, 62, 117], "cloud_delet": [15, 16, 18, 19, 20, 21, 22, 24, 36, 44, 56, 57, 61, 62, 117, 185], "cloud_list": [15, 16, 18, 19, 20, 21, 22, 24, 36, 44, 56, 57, 61, 62, 117, 185], "cloud_pul": [15, 16, 18, 19, 20, 21, 22, 24, 36, 44, 56, 57, 61, 62, 117], "cloud_push": [15, 16, 18, 19, 20, 21, 22, 24, 36, 44, 56, 57, 61, 62, 117], "embed_and_evalu": [15, 16, 18, 19, 20, 21, 22, 24, 29, 31, 45, 56, 57, 61, 62, 117, 205], "flatten": [15, 16, 18, 19, 20, 21, 22, 24, 39, 55, 56, 57, 61, 62, 117, 182, 201], "from_datafram": [15, 16, 18, 19, 20, 21, 22, 24, 36, 40, 56, 57, 61, 62, 117, 211], "from_list": [15, 16, 18, 19, 20, 21, 22, 24, 36, 42, 56, 57, 61, 62, 117, 211], "load_csv": [15, 16, 18, 19, 20, 21, 22, 24, 36, 39, 56, 57, 61, 62, 117], "load_json": [15, 16, 18, 19, 20, 21, 22, 24, 36, 42, 56, 57, 61, 62, 117], "map_batch": [15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 202], "plot_image_sprit": [15, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 178, 184, 213], "pull": [15, 16, 18, 19, 20, 21, 22, 24, 36, 44, 56, 57, 61, 62, 117, 186, 211, 216, 218], "push": [15, 16, 18, 19, 20, 21, 22, 24, 36, 44, 56, 57, 61, 62, 117, 186, 209, 211, 216, 218], "reduce_al": [15, 16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 61, 62, 117], "save_csv": [15, 16, 18, 19, 20, 21, 22, 24, 36, 39, 56, 57, 61, 62, 117, 182], "save_embeddings_csv": [15, 16, 18, 19, 20, 21, 22, 24, 36, 39, 56, 57, 61, 62, 117], "save_gif": [15, 16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "save_json": [15, 16, 18, 19, 20, 21, 22, 24, 36, 37, 42, 56, 57, 61, 62, 117], "shuffl": [15, 16, 18, 19, 20, 21, 22, 24, 27, 35, 41, 46, 51, 56, 57, 61, 62, 117, 126, 205], "split_by_tag": [15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 35, 56, 57, 61, 62, 117, 202], "to_datafram": [15, 16, 18, 19, 20, 21, 22, 24, 36, 40, 56, 57, 61, 62, 117, 211], "traverse_flat": [15, 16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117], "traverse_flat_per_path": [15, 16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117], "lookuptreeelem": [15, 58, 59], "lookupnod": [15, 58, 59], "lookupleaf": [15, 58, 59], "q": [15, 58, 59, 124, 183, 195, 199, 208, 211], "lookupyerror": [15, 58, 59], "dunder_partit": [15, 58, 59], "iff": [15, 58, 59], "iff_not_non": [15, 58, 59], "guard_typ": [15, 58, 59], "guard_str": [15, 58, 59], "guard_list": [15, 58, 59], "guard_q": [15, 58, 59], "guard_it": [15, 58, 59], "parser": [15, 58, 124, 127, 140], "querypars": [15, 58, 60], "registri": [15, 63], "type_map": [15, 16, 18, 20, 21, 22, 56, 57, 61, 62, 63, 64, 65, 70, 71, 75, 76, 80, 81, 90, 91, 95, 96, 101, 102, 107, 108, 112, 113, 117], "count": [15, 16, 17, 18, 19, 20, 21, 22, 56, 57, 61, 62, 63, 64, 69, 70, 71, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 124, 127, 132, 205], "revers": [15, 16, 17, 18, 19, 20, 21, 22, 56, 57, 61, 62, 63, 64, 69, 70, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 177], "reference_doc": [15, 18, 21], "max_es_returned_doc": [15, 20, 63, 75, 78], "max_opensearch_returned_doc": [15, 56, 63, 90, 93], "collection_name_meta": [15, 57, 63, 95], "serialization_config": [15, 57, 63, 95, 98], "schema_vers": [15, 62, 63, 107, 108, 110], "dynamic_batch": [15, 63, 112, 113, 117], "factori": [16, 20, 56, 57, 61, 62, 64, 65, 75, 76, 90, 91, 95, 96, 101, 102, 107, 108, 112, 113, 117, 125], "tupl": [16, 18, 19, 20, 21, 22, 24, 31, 45, 47, 54, 56, 57, 61, 62, 64, 65, 71, 75, 76, 90, 91, 95, 96, 101, 102, 112, 113, 117, 118, 124, 127, 134, 136, 146, 147, 148, 151, 159, 160, 169, 193, 195, 197, 201, 203], "typemap": [16, 18, 20, 21, 22, 56, 57, 61, 62, 63, 64, 65, 70, 71, 75, 76, 80, 81, 90, 91, 95, 96, 101, 102, 107, 108, 112, 113, 117], "_safe_cast_int": [16, 20, 56, 64, 65, 75, 76, 90, 91, 112, 113, 117], "modif": [16, 18, 19, 20, 21, 22, 24, 27, 46, 56, 57, 61, 62, 117, 124, 127, 146, 209], "thread": [16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 124, 127, 148, 217], "multi": [16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 55, 56, 57, 61, 62, 117, 178, 179, 188, 195, 197, 209, 214, 217, 219, 220], "yourselv": [16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117], "wish": [16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117], "place": [16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 46, 50, 56, 57, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 124, 127, 130, 178, 191, 196, 202, 209], "regardless": [16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 160, 202, 209], "multiprocess": [16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 124, 127, 148], "origin": [16, 18, 19, 20, 21, 22, 24, 26, 27, 29, 35, 46, 56, 57, 59, 61, 62, 117, 124, 127, 136, 151, 183, 190, 192, 196, 197, 202, 203, 219, 220], "share": [16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117, 191, 205, 211, 217], "worker": [16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 45, 46, 56, 57, 61, 62, 117, 124, 127, 146], "system": [16, 18, 19, 20, 21, 22, 24, 26, 27, 39, 45, 46, 56, 57, 61, 62, 117, 124, 126, 127, 146, 217, 219, 220], "pool": [16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117], "ignor": [16, 18, 19, 20, 21, 22, 24, 26, 27, 32, 46, 50, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 189, 209, 210], "close": [16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 64, 68, 117, 205, 217], "show_progress": [16, 18, 19, 20, 21, 22, 24, 26, 27, 35, 44, 46, 47, 48, 56, 57, 61, 62, 117, 124, 127, 146, 185, 210, 211], "progress": [16, 18, 19, 20, 21, 22, 24, 27, 35, 37, 44, 46, 47, 56, 57, 61, 62, 117], "bar": [16, 18, 19, 20, 21, 22, 24, 27, 35, 37, 44, 46, 47, 56, 57, 61, 62, 117, 124, 194], "mini": [16, 18, 19, 20, 21, 22, 24, 27, 29, 31, 46, 56, 57, 61, 62, 117], "cake": [16, 18, 19, 20, 21, 22, 24, 27, 46, 56, 57, 61, 62, 117], "lie": [16, 18, 19, 20, 21, 22, 24, 27, 46, 56, 57, 61, 62, 117], "THE": [16, 18, 19, 20, 21, 22, 24, 27, 46, 56, 57, 59, 61, 62, 117, 181], "except": [16, 18, 19, 20, 21, 22, 24, 26, 27, 35, 46, 56, 57, 59, 61, 62, 117, 208], "divid": [16, 18, 19, 20, 21, 22, 24, 27, 35, 46, 56, 57, 61, 62, 117], "minibatch": [16, 18, 19, 20, 21, 22, 24, 27, 35, 46, 56, 57, 61, 62, 117, 209], "until": [16, 18, 19, 20, 21, 22, 24, 27, 35, 56, 57, 61, 62, 117, 209], "traversal_path": [16, 18, 19, 20, 21, 22, 24, 27, 35, 55, 56, 57, 61, 62, 117], "properti": [16, 18, 19, 20, 21, 22, 24, 25, 31, 50, 56, 57, 61, 62, 68, 71, 95, 96, 97, 98, 100, 112, 113, 117, 118, 124, 127, 131, 138, 151, 169, 171, 189, 196, 214], "byte": [16, 18, 19, 20, 21, 22, 24, 25, 37, 56, 57, 61, 62, 101, 102, 117, 118, 124, 125, 127, 129, 132, 140, 141, 151, 169, 189, 194, 197, 203, 217, 218, 219, 220], "static": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 217], "show_tabl": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 185], "classmethod": [16, 18, 19, 20, 21, 22, 24, 26, 30, 37, 38, 39, 40, 41, 42, 44, 49, 53, 56, 57, 61, 62, 117, 124, 127, 140, 142, 143, 145, 148, 149], "local_cach": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 211], "upload": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 209, 211], "public": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 185], "brand": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "later": [16, 18, 19, 20, 21, 22, 24, 26, 27, 44, 46, 50, 56, 57, 61, 62, 72, 117, 183, 192, 203, 205], "kinda": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "clipboard": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "everyon": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "anyon": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 193], "surviv": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "complic": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 179, 191, 218], "lifetim": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "atm": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "dai": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 217], "week": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117, 211], "temporari": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "transmiss": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "creator": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "icon": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "emoji": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "fff": [16, 18, 19, 20, 21, 22, 24, 44, 56, 57, 61, 62, 117], "sequenc": [16, 17, 18, 19, 20, 21, 22, 24, 25, 39, 56, 57, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 124, 127, 130, 132, 136, 147, 203, 219, 220], "documentcontenttyp": [16, 18, 19, 20, 21, 22, 24, 25, 56, 57, 61, 62, 117, 124, 125, 127, 141], "arraytyp": [16, 18, 19, 20, 21, 22, 24, 25, 31, 32, 45, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 125, 127, 141, 146, 153, 154, 160, 164], "occurr": [16, 17, 18, 19, 20, 21, 22, 56, 57, 61, 62, 64, 69, 71, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117], "callabl": [16, 18, 19, 20, 21, 22, 24, 26, 27, 31, 32, 45, 46, 55, 56, 57, 61, 62, 75, 77, 81, 90, 92, 101, 103, 117, 123, 146, 208], "perhap": [16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117], "threadpool": [16, 18, 19, 20, 21, 22, 24, 26, 27, 46, 56, 57, 61, 62, 117], "progressbar": [16, 18, 19, 20, 21, 22, 24, 26, 47, 48, 56, 57, 61, 62, 117, 124, 127, 146, 215], "embed_model": [16, 18, 19, 20, 21, 22, 24, 29, 31, 56, 57, 61, 62, 117, 124, 127, 146, 156, 157], "devic": [16, 18, 19, 20, 21, 22, 24, 29, 31, 45, 56, 57, 61, 62, 117, 124, 127, 146, 153, 156, 157, 190, 204, 208], "to_numpi": [16, 18, 19, 20, 21, 22, 24, 29, 56, 57, 61, 62, 117, 204], "fill": [16, 18, 19, 20, 21, 22, 24, 29, 31, 41, 56, 57, 61, 62, 117, 124, 126, 127, 146, 189, 194, 198, 203, 204, 209], "inplac": [16, 18, 19, 20, 21, 22, 24, 29, 56, 57, 61, 62, 117, 124, 127, 129, 130, 131, 132, 136, 139, 146, 147, 209], "directli": [16, 18, 19, 20, 21, 22, 24, 25, 29, 31, 45, 47, 56, 57, 61, 62, 117, 126, 178, 181, 188, 193, 194, 199, 202, 203, 208, 212], "anydnn": [16, 18, 19, 20, 21, 22, 24, 29, 31, 56, 57, 61, 62, 117, 146], "kera": [16, 18, 19, 20, 21, 22, 24, 29, 31, 56, 57, 61, 62, 117, 124, 127, 146, 204], "pytorch": [16, 18, 19, 20, 21, 22, 24, 29, 31, 56, 57, 61, 62, 117, 124, 127, 146, 178, 193, 195, 197, 201, 204, 208, 216], "cuda": [16, 18, 19, 20, 21, 22, 24, 29, 31, 45, 56, 57, 61, 62, 117, 124, 127, 146, 153, 156, 157, 190, 204, 208], "framework": [16, 18, 19, 20, 21, 22, 24, 29, 56, 57, 61, 62, 117, 160, 178, 199, 204, 208, 214, 217], "format": [16, 18, 19, 20, 21, 22, 24, 29, 32, 38, 39, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 126, 180, 199, 204, 205, 214, 217], "collatefntyp": [16, 18, 19, 20, 21, 22, 24, 29, 31, 56, 57, 61, 62, 117], "index_data": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 205], "ground_truth": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 205], "metric_nam": [16, 18, 19, 20, 21, 22, 24, 31, 32, 45, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 146, 205], "strict": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "label_tag": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "label": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 151, 189, 219, 220], "embed_func": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 205], "exclude_self": [16, 18, 19, 20, 21, 22, 24, 31, 32, 45, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 146, 183, 205], "use_scipi": [16, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 61, 62, 117, 124, 127, 146, 183, 208], "match_batch_s": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 205], "100000": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "query_sample_s": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 205], "thu": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "consumpt": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 211, 217], "evlauat": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "basi": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "deriv": [16, 18, 19, 20, 21, 22, 24, 31, 54, 56, 57, 59, 61, 62, 67, 72, 83, 109, 117, 124, 127, 147], "left": [16, 18, 19, 20, 21, 22, 24, 31, 43, 45, 50, 56, 57, 61, 62, 68, 117, 124, 127, 139, 146, 178, 191, 195, 197, 205, 208, 219, 220], "align": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 205], "semant": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 176, 208], "prevent": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 213], "irrelev": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "accident": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "respect": [16, 18, 19, 20, 21, 22, 24, 31, 37, 56, 57, 61, 62, 117, 149, 181, 193, 205, 216], "collat": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "b": [16, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 61, 62, 117, 124, 127, 146, 149, 151, 183, 184, 189, 190, 192, 194, 199, 202, 208, 209, 211], "min": [16, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 61, 62, 117, 124, 127, 146, 159, 217], "max": [16, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 61, 62, 117, 124, 127, 146, 159, 211, 217], "rescal": [16, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 61, 62, 117, 124, 127, 146], "scipi": [16, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 61, 62, 117, 124, 127, 134, 146, 153, 154, 160, 193, 195, 197, 201, 208, 216, 218], "matrix": [16, 18, 19, 20, 21, 22, 24, 31, 45, 56, 57, 61, 62, 117, 124, 127, 134, 146, 153, 159, 193, 195, 197, 201, 217], "keyword": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 95, 96, 117, 124, 126, 127, 130, 136, 147, 148, 149, 194, 205, 212], "infeas": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "parma": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "stack": [16, 18, 19, 20, 21, 22, 24, 25, 56, 57, 61, 62, 117], "hash_fn": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 205], "num_relevant_documents_per_label": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 205], "ground": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "truth": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117], "annot": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 123, 188, 191, 218], "hash": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 123, 124, 127, 131, 134, 179, 189, 196, 205], "recal": [16, 18, 19, 20, 21, 22, 24, 31, 56, 57, 61, 62, 117, 158, 203, 205], "total": [16, 18, 19, 20, 21, 22, 24, 31, 43, 56, 57, 61, 62, 117, 118, 124, 169, 209], "only_id": [16, 18, 19, 20, 21, 22, 24, 32, 45, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 124, 127, 146, 208], "return_root": [16, 18, 19, 20, 21, 22, 24, 32, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 212], "latter": [16, 18, 19, 20, 21, 22, 24, 32, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117, 188], "notimplementederror": [16, 18, 19, 20, 21, 22, 24, 32, 56, 57, 61, 62, 75, 77, 90, 92, 101, 103, 117], "effect": [16, 18, 19, 20, 21, 22, 24, 45, 55, 56, 57, 61, 62, 64, 69, 74, 75, 79, 90, 94, 95, 100, 101, 105, 112, 116, 117, 124, 127, 136, 146, 191, 194, 206], "_show_progress": [16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117], "noqa": [16, 18, 19, 20, 21, 22, 24, 41, 56, 57, 61, 62, 117], "dar101": [16, 18, 19, 20, 21, 22, 24, 41, 56, 57, 61, 62, 117], "dar102": [16, 18, 19, 20, 21, 22, 24, 41, 56, 57, 61, 62, 117], "dar201": [16, 18, 19, 20, 21, 22, 24, 41, 56, 57, 61, 62, 117], "df": [16, 18, 19, 20, 21, 22, 24, 40, 56, 57, 61, 62, 117, 211], "panda": [16, 18, 19, 20, 21, 22, 24, 40, 56, 57, 61, 62, 117, 182, 207, 211, 217], "datafram": [16, 18, 19, 20, 21, 22, 24, 36, 56, 57, 61, 62, 117, 182, 203, 207, 217, 218], "jsonschema": [16, 18, 19, 20, 21, 22, 24, 42, 56, 57, 61, 62, 117, 124, 127, 140, 176, 199], "pb_msg": [16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117, 124, 127, 142, 163, 164], "basemodel": [16, 18, 19, 20, 21, 22, 24, 49, 56, 57, 61, 62, 117, 124, 127, 143, 149, 214], "repres": [16, 18, 19, 20, 21, 22, 24, 39, 49, 51, 53, 55, 56, 57, 59, 61, 62, 117, 124, 126, 127, 131, 138, 143, 145, 151, 159, 160, 176, 179, 180, 181, 182, 183, 184, 189, 191, 193, 197, 201, 202, 205, 212, 217, 218, 219, 220], "indent": [16, 18, 19, 20, 21, 22, 24, 49, 56, 57, 61, 62, 117, 124, 127, 143], "json": [16, 18, 19, 20, 21, 22, 24, 36, 38, 39, 41, 49, 56, 57, 61, 62, 117, 124, 126, 127, 140, 143, 149, 181, 189, 191, 194, 203, 217, 218], "min_freq": [16, 18, 19, 20, 21, 22, 24, 54, 56, 57, 61, 62, 117], "text_attr": [16, 18, 19, 20, 21, 22, 24, 54, 56, 57, 61, 62, 117, 124, 127, 147], "vocabulari": [16, 18, 19, 20, 21, 22, 24, 54, 56, 57, 61, 62, 117, 124, 127, 147, 183], "textual": [16, 18, 19, 20, 21, 22, 24, 54, 56, 57, 61, 62, 117, 124, 127, 147, 181, 183], "minimum": [16, 18, 19, 20, 21, 22, 24, 47, 54, 56, 57, 61, 62, 117, 124, 127, 139], "frequenc": [16, 18, 19, 20, 21, 22, 24, 54, 56, 57, 61, 62, 117, 124, 127, 129, 147], "reserv": [16, 18, 19, 20, 21, 22, 24, 54, 56, 57, 61, 62, 117, 124, 127, 147, 183], "unknown": [16, 18, 19, 20, 21, 22, 24, 54, 56, 57, 61, 62, 117, 124, 127, 147, 183, 199], "stop": [16, 17, 18, 19, 20, 21, 22, 56, 57, 61, 62, 64, 69, 71, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 218], "valueerror": [16, 17, 18, 19, 20, 21, 22, 29, 56, 57, 61, 62, 64, 69, 71, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117, 205], "file_format": [16, 18, 19, 20, 21, 22, 24, 38, 56, 57, 61, 62, 117], "binari": [16, 18, 19, 20, 21, 22, 24, 36, 38, 39, 56, 57, 61, 62, 117, 124, 126, 127, 130, 132, 140, 147, 158, 176, 193, 196, 197, 199, 203, 205, 219, 220], "utf": [16, 18, 19, 20, 21, 22, 24, 38, 39, 42, 56, 57, 61, 62, 117, 124, 126, 127, 130, 132, 147, 219, 220], "csv": [16, 18, 19, 20, 21, 22, 24, 36, 38, 41, 56, 57, 61, 62, 117, 126, 179, 189, 203, 218], "textio": [16, 18, 19, 20, 21, 22, 24, 38, 39, 41, 42, 56, 57, 61, 62, 117, 126], "binaryio": [16, 18, 19, 20, 21, 22, 24, 37, 38, 56, 57, 61, 62, 117, 124, 127, 129, 130, 133, 136, 148], "human": [16, 18, 19, 20, 21, 22, 24, 37, 38, 42, 56, 57, 61, 62, 117], "readabl": [16, 18, 19, 20, 21, 22, 24, 37, 38, 42, 56, 57, 61, 62, 117, 194, 202], "compat": [16, 18, 19, 20, 21, 22, 24, 38, 56, 57, 61, 62, 117, 176, 199], "complex": [16, 18, 19, 20, 21, 22, 24, 38, 56, 57, 61, 62, 117, 181], "restor": [16, 18, 19, 20, 21, 22, 24, 38, 56, 57, 61, 62, 117], "stream": [16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117, 176, 177, 184, 217, 218], "rtype": [16, 18, 19, 20, 21, 22, 24, 37, 50, 56, 57, 61, 62, 117, 153, 154, 160], "file_nam": [16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117], "interpol": [16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117], "my_docarrai": [16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117, 211], "lz4": [16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117, 199, 211, 216, 218], "field_resolv": [16, 18, 19, 20, 21, 22, 24, 39, 41, 56, 57, 61, 62, 117, 118, 124, 126, 169, 182, 194], "darrai": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117, 124, 127, 146], "purpos": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 59, 61, 62, 117, 191, 193, 206, 217], "sqeuclidean": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117, 152, 153, 154, 156, 157, 208], "braycurti": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "canberra": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "chebyshev": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "cityblock": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "correl": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "dice": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "jensenshannon": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "kulsinski": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "mahalanobi": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "minkowski": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "rogerstanimoto": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "russellrao": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "seuclidean": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "sokalmichen": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "sokalsneath": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "wminkowski": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "yule": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117], "invert": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117, 206], "significantli": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117, 124, 127, 146, 205], "speedup": [16, 18, 19, 20, 21, 22, 24, 45, 56, 57, 61, 62, 117, 124, 127, 146, 209, 217], "titl": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 148, 183, 190, 214], "mydocumentarrai": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "image_sprit": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 213, 215], "min_image_s": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "channel_axi": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 136, 139, 178, 181, 213], "start_serv": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "image_sourc": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "exclude_fields_meta": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 213], "interact": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 139, 151, 180, 187, 213, 215], "visual": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 139, 180, 184, 193, 204, 207, 211, 215, 216, 217, 218], "projector": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 216, 218], "bind": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 214], "frontend": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "axi": [16, 18, 19, 20, 21, 22, 24, 25, 41, 47, 56, 57, 61, 62, 117, 124, 126, 127, 136, 139, 178, 209], "channel": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 136, 139, 178, 209], "info": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 136, 139], "fallback": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "exclud": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 149], "metadata": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 123, 181, 197, 213], "tsv": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 213], "canvas_s": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 139], "512": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 90, 91, 117, 212], "min_siz": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 139], "skip_empti": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 139], "show_index": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "fig_siz": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "keep_aspect_ratio": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "sprite": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 139, 179, 184, 216, 218], "ui": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 139], "canva": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 139], "who": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 189, 211, 217], "corner": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "aspect": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "ratio": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 136], "indexerror": [16, 17, 18, 19, 20, 21, 22, 56, 57, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117], "remot": [16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 117, 124, 127, 146, 193, 197, 207, 210, 219, 220], "flow": [16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 117, 124, 126, 127, 146, 218], "sandbox": [16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 117, 124, 127, 146, 210], "123": [16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 117, 124, 127, 146], "w": [16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 117, 124, 127, 136, 146, 180, 183, 206], "jinahub": [16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 117, 124, 127, 146, 210], "latest": [16, 18, 19, 20, 21, 22, 24, 48, 56, 57, 61, 62, 117, 124, 127, 146, 210, 216, 218], "merg": [16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 59, 61, 62, 117, 124, 127, 137], "prioriti": [16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 61, 62, 117, 217], "reduct": [16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 61, 62, 117], "sequenti": [16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 61, 62, 117, 204, 209], "belong": [16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 61, 62, 117, 197, 219, 220], "kept": [16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 61, 62, 117], "non": [16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 61, 62, 117, 118, 124, 127, 130, 132, 136, 139, 147, 169, 187, 194, 199, 202, 205, 209, 211, 215], "sort": [16, 18, 19, 20, 21, 22, 24, 50, 56, 57, 61, 62, 117, 151], "IN": [16, 17, 18, 19, 20, 21, 22, 56, 57, 59, 61, 62, 64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116, 117], "seed": [16, 18, 19, 20, 21, 22, 24, 51, 56, 57, 61, 62, 117, 205], "state": [16, 18, 19, 20, 21, 22, 24, 51, 56, 57, 61, 62, 117, 193], "produc": [16, 18, 19, 20, 21, 22, 24, 51, 56, 57, 61, 62, 117], "flatten_tag": [16, 18, 19, 20, 21, 22, 24, 39, 56, 57, 61, 62, 117, 182], "exclude_field": [16, 18, 19, 20, 21, 22, 24, 39, 56, 57, 61, 62, 117], "dialect": [16, 18, 19, 20, 21, 22, 24, 39, 41, 56, 57, 61, 62, 117, 126], "excel": [16, 18, 19, 20, 21, 22, 24, 39, 41, 56, 57, 61, 62, 117, 126], "with_head": [16, 18, 19, 20, 21, 22, 24, 39, 56, 57, 61, 62, 117], "tag__fieldnam": [16, 18, 19, 20, 21, 22, 24, 39, 56, 57, 61, 62, 117], "separ": [16, 18, 19, 20, 21, 22, 24, 39, 55, 56, 57, 61, 62, 117, 126, 179, 180, 182, 188, 191, 199, 202, 205], "wont": [16, 18, 19, 20, 21, 22, 24, 39, 56, 57, 61, 62, 117], "predefin": [16, 18, 19, 20, 21, 22, 24, 39, 56, 57, 61, 62, 117, 126, 197, 206], "savetxt": [16, 18, 19, 20, 21, 22, 24, 39, 56, 57, 61, 62, 117], "durat": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "size_ratio": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "inline_displai": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "gif": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "frame": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 148, 179], "millisecond": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "jupyt": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 194, 211, 218], "notebook": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 151, 180, 187, 194, 200, 206, 218], "atribut": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117], "randomli": [16, 18, 19, 20, 21, 22, 24, 51, 56, 57, 61, 62, 117, 151], "accord": [16, 18, 19, 20, 21, 22, 24, 27, 35, 56, 57, 61, 62, 117, 124, 127, 131, 153, 202], "meth": [16, 18, 19, 20, 21, 22, 24, 47, 56, 57, 61, 62, 117, 124, 127, 130, 136, 147], "newli": [16, 18, 19, 20, 21, 22, 24, 25, 56, 57, 61, 62, 117], "shape": [16, 18, 19, 20, 21, 22, 24, 25, 56, 57, 61, 62, 117, 124, 127, 136, 148, 153, 177, 178, 180, 181, 184, 189, 199, 201, 219, 220], "dtype": [16, 18, 19, 20, 21, 22, 24, 25, 56, 57, 61, 62, 117, 124, 127, 132, 147, 177, 181, 189, 195, 199, 219, 220], "_file_ctx": [16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117], "export": [16, 18, 19, 20, 21, 22, 24, 40, 56, 57, 61, 62, 117, 199, 204], "ndarray_typ": [16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117, 124, 127, 142, 163, 164, 199], "messag": [16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117, 124, 127, 142, 194, 199, 203, 211], "documentarrayproto": [16, 18, 19, 20, 21, 22, 24, 37, 56, 57, 61, 62, 117, 211], "filter_fn": [16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117], "traversablesequ": [16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117], "comma": [16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117, 188, 202], "c": [16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 59, 61, 62, 117, 124, 127, 136, 183, 184, 190, 201, 202, 212, 216, 218, 219, 220], "child": [16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 59, 61, 62, 117], "cc": [16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117, 202, 212], "mm": [16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117], "cm": [16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117, 202, 206], "reach": [16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117, 176], "fly": [16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117, 191], "traverse_flattened_per_path": [16, 18, 19, 20, 21, 22, 24, 55, 56, 57, 61, 62, 117], "abstract": [17, 19, 72, 96, 97, 98, 100], "subset": [18, 21], "doc_view": 18, "safeguard": 18, "legit": 18, "subindex_config": [19, 181, 183, 212], "milvusconfig": 19, "barrel": [19, 22], "roll": [19, 22], "scores__jaccard__valu": [19, 22], "neural": [19, 181, 190], "executor": [19, 178, 190, 191], "10000": [20, 56, 75, 78, 90, 93], "doubl": [20, 56, 59, 61, 75, 76, 90, 91, 101, 102, 151, 201, 219, 220], "documentarrayload": [24, 26, 27], "dataloadermixin": [24, 26], "lazyrequestread": [24, 36, 37], "binaryiomixin": [24, 36, 37], "commoniomixin": [24, 36, 38], "csviomixin": [24, 36, 39], "dataframeiomixin": [24, 36, 40], "from_gen": [24, 36], "fromgeneratormixin": [24, 36, 41], "jsoniomixin": [24, 36, 42], "pbar": [24, 36], "qpscolumn": [24, 36, 43], "get_pbar": [24, 36, 43], "get_progressbar": [24, 36, 43], "pushpul": [24, 36], "pushpullmixin": [24, 36, 44], "plugin": [24, 127], "__delitem__": [28, 72, 78, 104, 115], "dnn_model": 29, "dnn": [29, 195, 204], "solid": 29, "__module__": 29, "idea": [29, 190, 214, 217], "tell": [29, 189], "subclass": [32, 72], "bulk": [33, 195, 199, 201], "__getitem__": [34, 72, 78, 104, 115], "render": [36, 43, 200, 217], "get_table_column": [36, 43], "max_refresh": [36, 43], "dam": [39, 54], "recurs": [41, 126, 197, 198, 219, 220], "sampling_r": [41, 126], "read_mod": [41, 126, 203], "to_dataturi": [41, 126], "exclude_regex": [41, 126], "dataset_path": [41, 126], "filter_field": [41, 126], "datasets_kwarg": [41, 126], "fp": [41, 124, 126, 127, 148, 184], "filepath": [41, 126], "line_format": [41, 126], "text_format": 43, "justifi": 43, "markup": 43, "highlight": [43, 124, 127, 148, 217], "table_column": 43, "textcolumn": 43, "task": [43, 181, 211, 217], "transmit": 44, "children": [50, 59], "__setitem__": [52, 72, 78, 104, 115], "nlp": [54, 217], "9900": [56, 90, 91], "nmslib": [56, 90, 91], "qdrantclient": [57, 95, 96, 97, 98, 100], "add_child": [58, 59], "with_traceback": [58, 59], "naiquevin": 59, "lookupi": 59, "mit": 59, "licens": 59, "copyright": 59, "2013": 59, "vineet": 59, "naik": 59, "naikvin": 59, "gmail": 59, "permiss": 59, "herebi": 59, "grant": 59, "charg": 59, "obtain": [59, 205], "softwar": [59, 180, 184], "associ": [59, 212], "deal": [59, 202], "publish": 59, "distribut": [59, 151], "sublicens": 59, "sell": 59, "permit": 59, "whom": 59, "furnish": 59, "subject": [59, 217], "shall": [59, 209], "substanti": 59, "portion": 59, "AS": 59, "warranti": 59, "OF": 59, "kind": [59, 124, 193, 217], "OR": [59, 206], "impli": 59, "BUT": 59, "TO": 59, "merchant": 59, "FOR": 59, "AND": [59, 206], "noninfring": 59, "NO": 59, "event": [59, 124, 127, 148], "author": [59, 181, 191], "holder": 59, "BE": 59, "liabl": 59, "claim": 59, "damag": 59, "liabil": 59, "action": [59, 206, 212], "contract": 59, "tort": 59, "aris": 59, "WITH": [59, 181], "val": 59, "pair": [59, 190, 205], "variou": [59, 214], "hold": [59, 194], "text__exact": 59, "text_exact": 59, "tags__nam": 59, "tree": 59, "op": 59, "negat": 59, "eg": [59, 151], "language__neq": 59, "rubi": [59, 219, 220], "framework__startswith": 59, "language__exact": 59, "php": [59, 219, 220], "leaf": 59, "tb": 59, "__traceback__": 59, "dunderkei": [59, 151], "everyth": [59, 191, 199, 209, 211, 217], "underscor": [59, 151], "a__b__c": 59, "a__b": [59, 151], "precond": 59, "shortcut": 59, "partial": [59, 209], "commonli": 59, "precondit": 59, "mix": [59, 151, 205, 217, 218], "classinfo": 59, "textfield": [61, 101, 102], "numericfield": [61, 101, 102], "geofield": [61, 101, 102], "wal": [62, 107, 108], "simplest": [62, 178], "getsetdel": [63, 64, 70, 75, 80, 85, 90, 95, 101, 107, 112], "offsetmap": [63, 64, 68], "seqlik": [63, 64, 70, 75, 80, 85, 90, 95, 101, 107, 112], "needs_id2offset_rebuild": [63, 80, 81], "initialize_t": [63, 107, 110], "create_t": [64, 68], "extend_doc_id": [64, 68], "get_id_by_offset": [64, 68], "get_ids_by_offset": [64, 68], "get_offsets_by_id": [64, 68], "get_offset_by_id": [64, 68], "get_all_id": [64, 68], "del_at_offset": [64, 68], "insert_at_offset": [64, 68], "set_at_offset": [64, 68], "shift_offset": [64, 68], "drop_tabl": [64, 68], "dump": [64, 68, 124, 127, 140, 149, 178, 184, 196], "execute_mani": [64, 68], "kwd": [64, 69, 74, 75, 79, 80, 84, 90, 94, 95, 100, 101, 105, 107, 111, 112, 116], "in_memori": 68, "doc_id": 68, "shift_from": 68, "shift_step": 68, "data_fil": 68, "get_id": [70, 73], "delete_by_id": [70, 73], "delete_by_offset": [70, 73], "update_id": [70, 73], "9223372036854775807": 71, "_set_doc": 72, "_del_doc": 72, "_del_all_doc": 72, "wrapper": 72, "likewis": 72, "data_id": 73, "_ids_map": 73, "concret": [78, 104, 115], "container_type_nam": 110, "cur": 110, "_class_nam": [112, 113, 117], "_obj": [118, 124, 169], "unknown_fields_handl": [118, 124, 169, 194], "catch": [118, 124, 169, 194], "overwrit": [118, 124, 151, 169], "emtpi": [118, 124, 169], "consum": [118, 124, 169, 208, 209], "multi_modal_schema": [119, 120], "image_typ": [119, 120], "image_uri": [119, 120], "audio_typ": [119, 120], "video_typ": [119, 120], "mesh_typ": [119, 120], "json_typ": [119, 120], "blob_typ": [119, 120], "iterable_primit": [119, 120], "iterable_docu": [119, 120], "iterable_nest": [119, 120], "pil": [119, 120, 190], "enumer": [120, 137, 184, 209], "_source_field": [123, 192], "default_factori": [123, 189], "repr": [123, 189], "myimag": [123, 192], "my_sett": [123, 192], "my_gett": [123, 192], "mmdoc": [123, 188, 189, 190, 192], "banner": [123, 188, 189, 190, 191, 192, 202], "jpeg": [123, 124, 127, 136, 178, 188, 189, 192, 199, 203], "eq": [123, 206], "unsafe_hash": 123, "frozen": 123, "type_var_map": [123, 192], "_field": 123, "appl": [123, 178, 181, 193, 196, 199, 212], "png": [123, 124, 127, 136, 178, 181, 184, 190, 191, 193, 196, 201, 203, 212], "__bound__": 123, "covari": 123, "__covariant__": 123, "contravari": 123, "__contravariant__": 123, "_types_registri": 123, "collid": 123, "obj": [123, 124, 127, 137, 140, 149, 151, 180], "getattributesmixin": [124, 127, 128], "audio": [124, 127, 179, 189, 191, 193, 196, 197, 215, 217, 218, 219, 220], "audiodatamixin": [124, 127, 129], "blobdatamixin": [124, 127, 130], "convertmixin": [124, 127, 132], "urifilemixin": [124, 127, 133], "featurehash": [124, 127], "featurehashmixin": [124, 127, 134], "imagedatamixin": [124, 127, 136], "mesh": [124, 127, 139, 179, 189, 193, 196, 197, 216, 218], "meshenum": [124, 127, 137], "pointcloudenum": [124, 127, 137], "meshdatamixin": [124, 127, 137], "multimodalmixin": [124, 127, 138], "portingmixin": [124, 127, 140], "propertymixin": [124, 127, 141, 169, 171, 172], "protobufmixin": [124, 127, 142], "rich_embed": [124, 127], "colorboxembed": [124, 127, 144], "sugar": [124, 127, 210], "singletonsugarmixin": [124, 127, 146], "textdatamixin": [124, 127, 147], "videodatamixin": [124, 127, 148], "smart_union": [124, 149], "from_orm": [124, 149], "parse_fil": [124, 149], "parse_obj": [124, 149], "parse_raw": [124, 149], "schema_json": [124, 149], "update_forward_ref": [124, 149], "valid": [124, 126, 127, 140, 149, 189, 199, 205, 209, 211, 212, 217, 218], "structvaluetyp": 124, "basic": [124, 189, 190, 191, 197, 215, 216, 217, 218], "3d": [124, 127, 137, 179, 193, 196, 197, 215, 216, 218], "d4": [124, 194, 195], "foo": [124, 194, 209, 210], "d0": [124, 194, 195, 200], "torchvis": [124, 181, 188, 195, 204, 216], "usr": [124, 216], "jpg": [124, 151, 178, 180, 188, 195, 199, 201, 203, 209, 213], "resnet50": [124, 181, 188, 195, 204], "pretrain": [124, 127, 136, 181, 188, 195, 204], "organ": [124, 197], "charset": [124, 127, 130, 132, 147], "charact": [124, 127, 130, 132, 147, 183, 205], "regist": [124, 127, 130, 132, 147], "iana": [124, 127, 130, 132, 147], "arbitrari": [124, 127, 130, 132, 134, 147, 191, 211, 219, 220], "octet": [124, 127, 130, 132, 147], "rule": [124, 127, 130, 132, 147, 199], "7bit": [124, 127, 130, 132, 147], "bit": [124, 127, 130, 132, 147, 178, 219, 220], "ascii": [124, 127, 130, 132, 147, 219, 220], "width": [124, 127, 129, 136, 139, 197, 198, 219, 220], "height": [124, 127, 136], "_valid_": [124, 127, 132, 136], "buffer": [124, 127, 132, 166, 168, 176, 178, 193, 199, 219, 220], "effort": [124, 127, 131], "image_format": [124, 127, 136], "window_shap": [124, 127, 136, 178], "stride": [124, 127, 136, 178], "as_chunk": [124, 127, 136, 137, 178], "slide": [124, 127, 136, 178], "window": [124, 127, 136, 148, 178, 216, 218], "h": [124, 127, 136, 180, 206], "target_s": [124, 127, 136], "denot": [124, 127, 136, 188], "vertic": [124, 127, 136, 137, 139, 179, 198, 215], "horizont": [124, 127, 136, 198], "patch": [124, 127, 136], "area": [124, 127, 136, 158], "zero": [124, 126, 127, 136, 154, 156, 157, 159, 183, 203, 219, 220], "vocab": [124, 127, 147, 183], "delimit": [124, 127, 147], "max_length": [124, 127, 147, 183], "int64": [124, 127, 147, 219, 220], "1d": [124, 127, 147, 159], "build_vocab": [124, 127, 147], "cut": [124, 127, 147, 178], "begin": [124, 127, 147, 188, 205, 217], "shorter": [124, 127, 147], "datauri": [124, 126, 127, 132, 136], "from_": [124, 127, 139], "rgb": [124, 127, 136, 137, 139, 179, 215], "depth": [124, 127, 137, 139, 180, 197, 198, 202, 214, 215, 219, 220], "face": [124, 126, 127, 137, 139, 179, 215], "max_valu": [124, 127, 134], "1000000": [124, 127, 134], "trick": [124, 127, 134], "caus": [124, 127, 134], "collis": [124, 127, 134], "overal": [124, 127, 134, 181, 184], "csr_matrix": [124, 127, 134, 153, 160, 208], "bytearrai": [124, 127, 140], "height_width": [124, 127, 148], "show_window": [124, 127, 148], "window_titl": [124, 127, 148], "webcam": [124, 127, 148, 179], "exit_kei": [124, 127, 148], "exit_ev": [124, 127, 148], "opencv": [124, 127, 148], "hardwar": [124, 127, 148, 184], "camera": [124, 127, 148], "preview": [124, 127, 148], "guarante": [124, 127, 148, 217], "press": [124, 127, 148, 184], "asyncio": [124, 127, 148], "counter": [124, 127, 147], "text_field": [124, 127, 147], "pillow": [124, 127, 136, 178, 216, 218], "header": [124, 127, 136, 209], "pilimag": [124, 127, 136], "_uri_to_blob": [124, 127, 130, 136, 147], "geometri": [124, 127, 137], "attr": [124, 127, 147], "only_keyfram": [124, 127, 148, 184], "keyfram": [124, 127, 148, 184], "av": [124, 127, 148, 184, 216, 218], "pyav": [124, 127, 148], "org": [124, 127, 148, 158, 183, 193, 216], "_global": [124, 127, 148], "html": [124, 126, 127, 148, 183, 193], "inv_norm": [124, 127, 139, 213], "1920": [124, 127, 139], "invers": [124, 127, 136, 139], "float32": [124, 127, 136, 139, 177, 181, 189, 195, 204, 208, 219, 220], "uint8": [124, 127, 136, 139, 189, 211], "sample_r": [124, 127, 129], "44100": [124, 127, 129], "sample_width": [124, 127, 129], "wav": [124, 127, 129, 179, 189], "mono": [124, 127, 129], "stereo": [124, 127, 129], "frame_r": [124, 127, 148], "codec": [124, 127, 148], "h264": [124, 127, 148], "mp4": [124, 127, 148, 184], "decod": [124, 127, 148, 183], "original_channel_axi": [124, 127, 136, 181], "new_channel_axi": [124, 127, 136, 181], "move": [124, 127, 136, 189, 191, 208], "img_mean": [124, 127, 136], "406": [124, 127, 136], "img_std": [124, 127, 136], "deviat": [124, 127, 136], "std": [124, 127, 136, 208], "train": [124, 127, 136, 190, 217], "scratch": [124, 127, 136], "calcul": [124, 127, 136, 158, 205], "imagenet": [124, 127, 136], "mean_r": [124, 127, 136], "mean_g": [124, 127, 136], "mean_b": [124, 127, 136], "std_r": [124, 127, 136], "std_g": [124, 127, 136], "std_b": [124, 127, 136], "grai": [124, 127, 136], "black": [124, 127, 136, 188], "white": [124, 127, 136, 188, 189], "mnist": [124, 127, 136], "stddev": [124, 127, 136], "greyscal": [124, 127, 136], "resampl": [124, 127, 136], "dumper": [124, 127, 140], "documentproto": [124, 127, 142, 163, 199, 211], "_reference_doc": 125, "_metadata": [125, 181, 188, 219, 220], "beforehand": 126, "shell": 126, "wildcard": 126, "directori": 126, "subdirectori": 126, "rate": 126, "rb": 126, "plan": 126, "index_fil": 126, "search_fil": 126, "handler": 126, "auto": [126, 200], "hug": 126, "huggingfac": 126, "load_dataset": 126, "package_refer": 126, "loading_method": 126, "file_extens": [127, 137], "univers": [131, 196], "convers": [132, 183, 188, 196], "glb": [137, 180], "ply": [137, 180], "point_cloud_color": [137, 180], "_propertymixin": 141, "sugari": [146, 196], "_namedscor": 149, "validationerror": 149, "_fields_set": 149, "__dict__": 149, "__fields_set__": 149, "trust": 149, "deep": [149, 178, 180, 191, 194, 195, 201, 217, 218], "abstractsetintstr": 149, "mappingintstrani": 149, "preced": 149, "dictstrani": 149, "by_alia": 149, "skip_default": 149, "exclude_unset": 149, "exclude_default": 149, "exclude_non": [149, 199, 206], "models_as_dict": 149, "dumps_kwarg": 149, "suppli": [149, 219, 220], "unicod": [149, 219, 220], "utf8": 149, "allow_pickl": 149, "ref_templ": 149, "localn": 149, "forwardref": 149, "globaln": 149, "_basestrawberrydocumentinterfac": 150, "_namescoreitem": 150, "scalarwrapp": 150, "0x7fd5c6ca0c90": 150, "0x7fd5c6ca0d10": 150, "0x7fd5c6ca0c10": 150, "_namescoreiteminput": 150, "target": [151, 159], "new_fn": 151, "removed_at": 151, "deprec": 151, "old_fn_nam": 151, "_dict": 151, "fieldnam": 151, "dunderscor": 151, "referenc": 151, "referrenc": 151, "struct": [151, 219, 220], "use_uuid1": 151, "uuid": [151, 194], "mac": [151, 216, 218], "uuid1": [151, 194], "afford": 151, "increas": [151, 217], "closer": 151, "uuid4": 151, "relat": [151, 181, 197, 210, 216, 217, 218], "lost": [151, 209], "mermaid_url": 151, "suffix": 151, "svg": 151, "decor": [151, 191], "wb": 151, "klass": 151, "dikt": 151, "file_path": 151, "default_protocol": 151, "default_compress": 151, "docarray_fashion_mnist": 151, "gzip": [151, 199, 209, 211], "bin": [151, 211, 216], "account": 151, "enviro": 151, "infer": [151, 184], "log": [151, 185, 186, 187], "hubbl": [151, 209], "sparse_cosin": [152, 153, 154], "sparse_sqeuclidean": [152, 153, 154], "sparse_euclidean": [152, 153, 154], "pdist": [152, 153], "cdist": [152, 153], "x_mat": [153, 154, 156, 157, 159], "pairwis": 153, "observ": [153, 182, 184, 216], "coo_matrix": [153, 195, 201], "ndim": [153, 154, 156, 157, 160, 219, 220], "y_mat": [153, 154, 156, 157], "y": [153, 160, 197, 219, 220], "n_x": 153, "n_y": 153, "dist": 153, "j": [153, 217], "ep": [154, 156, 157, 159], "1e": [154, 156, 157, 159], "jitter": [154, 156, 157, 159], "divd": [154, 156, 157, 159], "binary_relev": [158, 205], "precis": [158, 205, 209], "fist": 158, "nonzero": [158, 219, 220], "wrong": 158, "en": 158, "wikipedia": 158, "wiki": 158, "evaluation_measures_": 158, "information_retriev": 158, "percentag": 158, "hit": [158, 178], "curv": 158, "reciproc": [158, 205], "max_rel": 158, "been": [158, 202, 214, 217], "harmon": 158, "f1": [158, 194], "discount": 158, "cumul": 158, "gain": 158, "dcg": 158, "www": [158, 183, 193], "stanford": 158, "edu": 158, "cs276": 158, "handout": 158, "evaluationnew": 158, "pdf": [158, 193], "6309": 158, "4307": 158, "ndcg": 158, "t_rang": 159, "x_rang": 159, "2d": 159, "descend": 159, "largest": 159, "biggest": [159, 217], "x_mat_best": 159, "x_inds_best": 159, "x_ind": 159, "raise_error_if_not_arrai": 160, "tf": [160, 195, 204], "num_row": 160, "sp": [160, 195, 208], "detach": 160, "read_ndarrai": [161, 163, 164], "flush_ndarrai": [161, 163, 164], "parse_proto": [161, 163], "flush_proto": [161, 163], "representmixin": [169, 171, 173], "_reference_n": 170, "subpackag": 175, "submodul": 175, "project": [176, 177, 193], "bump": 176, "minor": [176, 206], "autom": 176, "bug": 176, "track": 176, "explain": [176, 187, 189], "rational": [176, 188, 191], "behind": [176, 188, 191], "involv": [176, 181, 183], "Its": [176, 199, 217], "intention": 176, "undocu": 176, "backward": 176, "concept": [176, 217], "major": [176, 217], "wire": [176, 199, 217, 218], "migrat": 176, "ed": [176, 199], "unschema": [176, 199], "stick": 176, "archiv": 176, "acknowledg": 176, "caffe": 176, "unifi": [176, 217, 218], "terminologi": 176, "fluent": 176, "remark": [176, 211], "30833": 177, "olleh": 177, "ffmpeg": 177, "multimedia": 177, "pydub": 177, "manipul": [177, 217], "easi": [177, 182, 183, 189, 191, 194, 201, 202, 217, 218], "librosa": 177, "music": 177, "analysi": 177, "pyaudioanalysi": 177, "signal": 177, "matplotlib": [178, 216, 218], "tiff": 178, "muti_page_tiff_fil": 178, "7f907d786d6c11ec840a1e008a366d49": [178, 180, 198], "7aa4c0ba66cf6c300b7f07fdcbc2fdc8": 178, "bc94a3e3ca60352f2e4c9ab1b1bb9c22": 178, "36fe0d1daf4442ad6461c619f8bb25b7": 178, "resiz": [178, 196], "downsampl": 178, "upsampl": 178, "meet": 178, "chain": [178, 196], "feed": 178, "resnet": 178, "2489083": 178, "proc": 178, "yep": 178, "uneat": 178, "quick": [178, 193], "img": 178, "nice": [178, 183, 214], "overview": [178, 194], "rich": [178, 202, 211, 217], "salienc": 178, "krusti": 178, "burger": 178, "yellow": 178, "schoolbu": 178, "intent": 178, "guess": [178, 197, 209, 219, 220], "breakdown": 178, "simpler": 178, "approach": 178, "datatyp": 178, "792": 178, "180": 178, "7585b8aa": 178, "3826": 178, "11ec": [178, 182], "bc1a": 178, "1e008a366d48": [178, 182], "h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0": 178, "simpson": 178, "hmm": 178, "whole": [178, 209, 211, 214], "overlap": [178, 202, 211], "oversampl": 178, "segment": 179, "tool": 179, "trimesh": [180, 216, 218], "polygon": 180, "profession": 180, "commerci": 180, "uniti": 180, "blender": 180, "googl": [180, 194, 211, 215, 217, 218, 219, 220], "colab": [180, 194, 200, 211, 217, 218], "n_point": 180, "triangular": 180, "surfac": 180, "triangl": 180, "n_face": 180, "vertex": 180, "mesh_man": 180, "7f907ab26d6c11ec840a1e008a366d49": [180, 198], "7f907c106d6c11ec840a1e008a366d49": [180, 198], "assign": [180, 189, 193, 195, 201], "ifram": 180, "srcdoc": 180, "threej": 180, "viewer": 180, "500px": 180, "border": 180, "uniformli": 180, "easier": [180, 193, 199], "30000": 180, "n_sampl": 180, "plane": 180, "pixel": [180, 189], "concaten": [180, 181, 203], "due": [180, 217], "rgb_000": 180, "depth_000": 180, "tandem": 181, "comfort": 181, "cleanli": 181, "individu": [181, 205], "stand": 181, "relationship": [181, 191], "domain": [181, 189, 191, 217], "newspap": [181, 191], "main_text": 181, "cast": [181, 195, 199], "automat": [181, 193, 194, 199, 201, 205, 208, 212, 215], "7f03e397da8725aa8a2aed4a0d64f263": 181, "627c3b052b86e908b10475a4649ce49b": 181, "79e75c074aa444341baac18549930450": 181, "6861a1e3d77c3560a630dee34ba5ac7f": 181, "daili": 181, "cab4e047bc84ffb6b8b0597ff4ee0e9f": 181, "ea686d21029e4687df83a6ee31af98b2": 181, "139a5f16ab176b5c9d5088b1f2792973": 181, "f1e7527757c7dc6006fa8fa36e7b788f": 181, "2a13aee3a2ac8eadc07f43bc2dd83583": 181, "b6bcfa7000a25bd84ddcd35813c99b4c": 181, "71018fd73c13187309590e82b5255416": 181, "b6bcfa7000a25bd84ddcd35813c99b4": 181, "b335f748006204dd27bb5fa9a99a572f": 181, "7769657ae7c25227920b5ae35a2a3c31": 181, "29f1835bac77e435f00976c5cf4e97cb": 181, "bc8adb52bad51ccff3d6e7834a4b536a": 181, "29f1835bac77e435f00976c5cf4e97c": 181, "c602af33ed3f2d693a5633e53b87e19c": 181, "1ee83d2c391f078736732bb34a021587": 181, "c8fe3b8fd101bea6a4820a53d2993bdf": 181, "img_model": 181, "combine_embed": 181, "sophist": 181, "1512": 181, "tackl": [181, 191], "downstream": 181, "query_pag": 181, "pear": 181, "cou": 181, "closest_match_img": 181, "closest_match_pag": 181, "5922ee1ad0dbfe707301b573f98c5939": 181, "e6266f88f6ebcb3417358440934bcf81": 181, "defaultdict": [181, 205], "1920929e": 181, "29a0e323e2e9befcc42e9823b111f90f": 181, "175e386b1aa248f9387db46341b73e05": 181, "similarli": 181, "a0f33de91bb7d53811c7cb3015cdf1b8": 181, "float64": [181, 195, 219, 220], "01911603045476573": 181, "b9c9206422e27c8a0f1b4a4e745901ec": 181, "97cbca49aeaf0ea1f609b161dc9ec934": 181, "9183813fc38f291f353b76d4125506d6": 181, "freeli": 182, "tabular": [182, 189, 193], "usernam": [182, 211], "booker12": 182, "9012": 182, "rachel": 182, "booker": 182, "grey07": 182, "2070": 182, "laura": 182, "grei": 182, "johnson81": 182, "4081": 182, "craig": 182, "johnson": 182, "jenkins46": 182, "9346": 182, "mari": 182, "jenkin": 182, "smith79": 182, "5079": 182, "jami": 182, "smith": 182, "attempt": 182, "fail": 182, "manual": [182, 194, 195, 212], "tmp": [182, 212], "thing": [182, 184, 199, 209, 214], "english": 182, "german": 182, "hallo": 182, "welt": 182, "tag__english": 182, "tag__german": 182, "029388a4": 182, "3830": 182, "b6b2": 182, "0293968c": 182, "418de220": 182, "aad8": 182, "418dec52": 182, "inlin": [183, 193], "w3": 183, "histori": 183, "19921103": 183, "hypertext": 183, "3c128f326fbf11ec90821e008a366d49": 183, "\u0928\u092e\u0938": 183, "\u0924": 183, "\u0926": 183, "\u0928": 183, "\u092f": 183, "\u4f60\u597d\u4e16\u754c": 183, "\u3053\u3093\u306b\u3061\u306f\u4e16\u754c": 183, "\u043f\u0440\u0438\u0432\u0435\u0442": 183, "\u043c\u0438\u0440": 183, "thousand": [183, 211], "huge": 183, "finer": 183, "5a12d7a86fbf11ec99a21e008a366d49": 183, "5a12e2346fbf11ec99a21e008a366d49": 183, "5a12e2f26fbf11ec99a21e008a366d49": 183, "5a12e3886fbf11ec99a21e008a366d49": 183, "5a12e41e6fbf11ec99a21e008a366d49": 183, "5a12e4966fbf11ec99a21e008a366d49": 183, "goodby": 183, "symbol": 183, "phrase": 183, "sentenc": [183, 191], "bonu": 183, "term": 183, "she": 183, "enter": [183, 214], "room": 183, "pride": [183, 193], "prejudic": [183, 193], "gutenberg": [183, 193], "1342": [183, 193], "txt": [183, 193], "strip": 183, "scores__jaccard": 183, "staircas": 183, "breakfast": 183, "congratul": [183, 216], "air": 183, "ungraci": 183, "mr": 183, "bennet": 183, "alon": 183, "f47f7448709811ec960a1e008a366d49": 183, "6666666666666666": 183, "7142857142857143": 183, "imagin": [183, 214], "song": 183, "lyric": 183, "choru": 183, "song1_titl": 183, "macdonald": 183, "farm": 183, "song1": 183, "he": 183, "dog": [183, 190, 191], "bow": 183, "wow": 183, "everywher": 183, "song2_titl": 183, "od": 183, "die": 183, "freud": 183, "song2": 183, "sch\u00f6ner": 183, "g\u00f6tterfunken": 183, "tochter": 183, "au": 183, "elisium": 183, "wir": 183, "betreten": 183, "feuertrunken": 183, "himmlisch": 183, "dein": 183, "heiligthum": 183, "zauber": 183, "binden": 183, "wieder": 183, "der": 183, "schwerd": 183, "getheilt": 183, "bettler": 183, "werden": 183, "f\u00fcrstenbr\u00fcder": 183, "wo": 183, "sanfter": 183, "fl\u00fcgel": 183, "weilt": 183, "doc1": [183, 191, 211], "song_titl": 183, "doc2": [183, 191, 211], "bag": 183, "descriptor": 183, "build_token": 183, "token_pattern": 183, "compil": 183, "findal": 183, "bow_feature_vector": 183, "prepar": [183, 206], "n_featur": 183, "da_backend": 183, "annlite_data": 183, "death": 183, "find_song_name_from_song_snippet": 183, "similar_item": 183, "most_similar_doc": 183, "320": 184, "dim": [184, 219, 220], "got": [184, 201, 211, 214], "176x320": 184, "framer": 184, "around": [184, 209], "25fp": 184, "mov": 184, "redund": 184, "keyframe_indic": 184, "scene": 184, "first_scen": 184, "60fp": 184, "esc": 184, "head": [185, 216], "appear": 185, "visibl": 185, "successfulli": [185, 216], "my_da": 185, "15t07": 185, "256z": 185, "portal": 186, "prompt": 187, "cli": [187, 204], "blog": 188, "paragraph": [188, 212], "eaccc9c573c07f13b7ee8aa04a83c9eb": 188, "140540453339296": 188, "banner_tensor": 188, "transpos": 188, "unsqueez": [188, 190], "outer": 188, "innerdoc": 188, "outerdoc": 188, "feature_imag": [188, 189], "websit": [188, 189], "94de1bef2fc8010ff4fe86791a671c44": 188, "field1": [188, 206], "field2": 188, "nois": [188, 189, 205], "bracket": [188, 206], "nonetyp": [188, 205], "front": 188, "former": [188, 199], "deepli": 188, "nested_field1": 188, "bannerdoc": [188, 189], "columnarticl": [188, 189], "c1": [188, 202], "c2": 188, "unawar": 189, "mymultimodaldoc": 189, "avatar": 189, "Be": 189, "conflict": 189, "f3b193bbe8403c3ce1599b82f941f68a": 189, "18c7ca1c829fe819250faa4914bc45c1": 189, "1ee7fadddc23fc72365b2069f82d4bb4": 189, "is_dataclass": 189, "mmdoc1": 189, "mmdoc2": 189, "forward": [189, 208], "soundfx": 189, "90c744c5155c2356d27f8c91955f70f7": 189, "c9d71990088fb0d8db3c83a6bd35650d": 189, "22e27708288e70813673711c86f834e": 189, "05ad36dfb0c520027b18c582d205c176": 189, "63248": 189, "unannot": 189, "17c77b443471f9d752cbcc360174b65f": 189, "some_field": 189, "other_field": 189, "15725d705b6c8d7e99908d380d614fa5": 189, "48a84621d51d94383b86db89e64022a3": 189, "1cb5cc74f1f986876a0c4c87201b9a28": 189, "instruct": 189, "complet": [189, 203, 205, 217], "subsequ": 189, "52d9dcca4bc30cd0ef3b82917459cd32": 189, "04edacf582c5aa7b0bcfcf3d3e0a57bf": 189, "f5e9f105162e26d1d42ef7e2d363095a": 189, "d7d0b506f690890113e6a601ef80f8c6": 189, "75a3df4c26498d338589d2b2c20e156": 189, "cb1df29a384a6d39aa81e5af93316c4d": 189, "65cce8eb564f9ce136ff693b8ecb8f53": 189, "4dc4497d608b4f96094711e90cfb8078": 189, "f7b3aaefeab73af18f8372a594405b46": 189, "encourag": 189, "m_r": 189, "assert": [189, 192], "mutabl": 189, "builtin": 189, "scientist": [189, 214, 215, 217, 218], "intuit": [189, 191, 194, 214, 217, 218], "straightforward": [189, 191], "aka": [189, 191], "far": [190, 191, 202], "nutshel": [190, 191, 207, 214], "develop": [190, 216, 217, 218], "openai": 190, "contrast": 190, "varieti": 190, "is_avail": 190, "vit": 190, "diagram": 190, "cat": [190, 191], "no_grad": 190, "image_featur": 190, "encode_imag": 190, "text_featur": 190, "encode_text": 190, "3285e": 190, "6554e": 190, "3394e": 190, "5605e": 190, "2397e": 190, "0547": 190, "0061": 190, "0495": 190, "6638": 190, "1281": 190, "4950": 190, "1447": 190, "0225": 190, "2909": 190, "4472": 190, "3420": 190, "1798": 190, "1981": 190, "2040": 190, "1533": 190, "4514": 190, "5664": 190, "0596": 190, "m1": [190, 192, 216], "m2": [190, 192, 216], "m3": 190, "latenc": [190, 211], "scalabl": [190, 217], "microservic": [190, 199, 211, 217], "touch": 190, "v": [190, 208, 217, 218, 220], "clip_client": 190, "demo": 190, "ca": 190, "51000": 190, "3137": 190, "1458": 190, "303": 190, "8877": 190, "2546": 190, "11365": 190, "05466": 190, "005997": 190, "0498": 190, "1274": 190, "4944": 190, "1442": 190, "02275": 190, "291": 190, "4468": 190, "3416": 190, "1985": 190, "4507": 190, "0598": 190, "wparticl": 191, "headlin": 191, "flight": 191, "pet": 191, "pick": 191, "seat": 191, "anim": 191, "calm": 191, "nathan": 191, "diller": 191, "travel": 191, "destin": [191, 202], "hood": [191, 212], "beauti": 191, "spend": 191, "mixtur": 191, "card": 191, "washington": 191, "sound": [191, 202], "bbc": 191, "transfer": [191, 211, 214, 217, 218], "doc0": 191, "Or": [191, 193, 208], "jointli": 191, "redesign": [191, 217], "implicit": 191, "answer": [191, 209], "trivial": 191, "plai": [191, 215], "eleg": 191, "translat": 192, "bde1ab74306c2f63188069879e3945ac": 192, "cd594a6870a8921d7a9c6b0ec764251d": 192, "xff": 192, "xd8": 192, "xe0": 192, "x00": [192, 199, 211], "x10jfif": 192, "x01": [192, 199, 211], "x0": 192, "56810": 192, "recov": 192, "invok": 192, "im": 192, "unset": 193, "among": 193, "spmatrix": [193, 195, 197], "intermedi": [193, 199, 211, 217], "mutual": 193, "exclus": [193, 199], "7623808c6d6211ec9cf21e008a366d49": 193, "reset": 193, "clearer": 193, "grab": 193, "b4d675466d6211ecae8d1e008a366d49": 193, "2808eeb86d6311ecaddb1e008a366d49": 193, "ebook": 193, "jane": 193, "austen": 193, "anywher": 193, "wor": 193, "ivborw0kggoaaaansuheugaaaaua": 193, "aaafcayaaacnbyblaaaaheleqvqi12p4": 193, "w38giaxdibke0dhxgljnbaao": 193, "9txl0y4ohwaaaabjru5erkjggg": 193, "load_uri_to_": 193, "5dd542406d3f11eca3241e008a366d49": 194, "hex": 194, "though": [194, 205, 208], "forget": [194, 217], "autocomplet": [194, 218], "a14effee6d3e11ec8bde1e008a366d49": 194, "a14f00986d3e11ec8bde1e008a366d49": 194, "a14f01a66d3e11ec8bde1e008a366d49": 194, "a14f023c6d3e11ec8bde1e008a366d49": 194, "comfortab": 194, "idiomat": 194, "prettifi": 194, "caught": 194, "f957e84a6d4311ecbea21e008a366d49": 194, "silent": 194, "attributeerror": 194, "4479829968": 194, "piec": 195, "d5": 195, "from_dens": 195, "stai": [195, 217], "smarter": 195, "loop": [195, 199, 201, 208, 209], "00003": 195, "ten": [195, 205], "63a39fa86d6911eca6fa1e008a366d49": 195, "63a39aee6d6911eca6fa1e008a366d49": 195, "63a399d66d6911eca6fa1e008a366d49": 195, "63a39b346d6911eca6fa1e008a366d49": 195, "63a3999a6d6911eca6fa1e008a366d49": 195, "63a39a626d6911eca6fa1e008a366d49": 195, "63a397ba6d6911eca6fa1e008a366d49": 195, "63a39a1c6d6911eca6fa1e008a366d49": 195, "63a39ab26d6911eca6fa1e008a366d49": 195, "63a399046d6911eca6fa1e008a366d49": 195, "63a399546d6911eca6fa1e008a366d49": 195, "apple1": 196, "equival": 196, "hexdigest": [197, 219, 220], "raw": [197, 216, 219, 220], "cross": [197, 217, 219, 220], "mime": [197, 219, 220], "crop": [197, 219, 220], "timestamp": [197, 206, 219, 220], "comprehens": [197, 217, 218], "categor": 197, "pictur": [197, 198], "comprehend": 197, "scienc": [197, 218], "commun": [197, 205, 218], "7f907c606d6c11ec840a1e008a366d49": 198, "7f907cba6d6c11ec840a1e008a366d49": 198, "crucial": [198, 199, 211], "thank": [198, 201], "shown": [198, 205, 215], "wherea": [198, 199, 217], "receiv": [199, 205, 214], "compact": [199, 201, 211], "wonder": 199, "isn": [199, 201], "decis": [199, 217], "sake": [199, 202], "clariti": [199, 202], "webservic": [199, 211, 214], "fastapi": [199, 211, 213, 216, 218], "d_as_json": 199, "641032d677b311ecb67a1e008a366d49": 199, "null": [199, 211], "db66bc2e77b311eca5f51e008a366d49": 199, "mimetyp": 199, "aqaaaaaaaaacaaaaaaaaaamaaaaaaaaa": 199, "i8": 199, "clsname": 199, "appreci": [199, 217], "inclus": 199, "uppercas": 199, "cdbc4f7a77b411ec96ad1e008a366d49": 199, "ey": 199, "handcraft": 199, "damn": 199, "smoothli": 199, "encount": 199, "thumb": 199, "friend": [199, 211, 214, 217], "upset": 199, "probabl": [199, 201, 202], "d_byte": 199, "d_r": 199, "x80": [199, 211], "x03cdocarrai": [199, 211], "ndocument": [199, 211], "nq": [199, 211], "x81q": [199, 211], "x02x": 199, "x05": [199, 211], "x00_dataq": [199, 211], "ndocumentdata": 199, "x04": [199, 211], "x06": 199, "x0e": 199, "x00_reference_docq": 199, "x07h": 199, "x01x": 199, "x02": [199, 211], "x00idq": 199, "x08x": 199, "x005d29a9f26d5911ec88d51e008a366d49q": 199, "tx": 199, "x00parent_": 199, "3644c0fa6d5a11ecbb081e008a366d49": 199, "110": [199, 205], "deseri": [199, 211], "protcol": [199, 211], "ganjzg9jyxjyyxkuzg9jdw1lbnqkrg9jdw1lbnqkcqapgxebfxecwauaaabfzgf0yxedy2rvy2fycmf5lmrvy3vtzw50lmrhdgekrg9jdw1lbnreyxrhcneekyfxbx1xbihydgaaaf9yzwzlcmvuy2vfzg9jcqdoavgcaaaaawrxcfggaaaazmzjnty3odg3mzaymtfly2e4njmxztawogeznjzkndlxcvgjaaaacgfyzw50x2lkcqpowasaaabncmfudwxhcml0exeltlgjaaaaywrqywnlbmn5cqxowayaaabidwzmzxjxdu5ybaaaagjsb2jxdk5ycqaaag1pbwvfdhlwzxepwaoaaab0zxh0l3bsywlucrbybaaaahrlehrxevgfaaaaagvsbg9xelghaaaay29udgvudhettlggaaaad2vpz2h0crrowamaaab1cmlxfu5ybaaaahrhz3nxfk5ybgaaag9mznnldhextlgiaaaabg9jyxrpb25xge5ycqaaagvtymvkzgluz3ezxxeakesbswjla2vycaaaag1vzgfsaxr5crtowasaaabldmfsdwf0aw9uc3ectlggaaaac2nvcmvzcr1owayaaabjahvua3nxhk5ybwaaag1hdgnozxnxh051ynnilg": 199, "d_as_dict": 199, "5596c84c77b711ecafed1e008a366d49": 199, "d_proto": 199, "d66463b46d6a11ecbf891e008a366d49": 199, "e4b215106d6a11ecb28b1e008a366d49": 199, "hundr": 199, "ineffici": [199, 219, 220], "quickli": [199, 201, 203, 211], "compactli": 199, "tast": 201, "talk": 201, "element_selector": 201, "attribute_selector": 201, "scores__cosine__valu": 201, "8d41ce5c6f0d11eca2181e008a366d49": 201, "8d41cfa66f0d11eca2181e008a366d49": 201, "8d41cff66f0d11eca2181e008a366d49": 201, "Of": [201, 214], "db60ab8a6f0d11ec99511e008a366d49": 201, "db60abda6f0d11ec99511e008a366d49": 201, "db60c12e6f0d11ec99511e008a366d49": 201, "db60c1886f0d11ec99511e008a366d49": 201, "db60c4266f0d11ec99511e008a366d49": 201, "db60c46c6f0d11ec99511e008a366d49": 201, "285db6586f0e11ec99401e008a366d49": 201, "285db6b26f0e11ec99401e008a366d49": 201, "285dbff46f0e11ec99401e008a366d49": 201, "285dc0586f0e11ec99401e008a366d49": 201, "285db3606f0e11ec99401e008a366d49": 201, "285dcc746f0e11ec99401e008a366d49": 201, "285dccce6f0e11ec99401e008a366d49": 201, "285dce0e6f0e11ec99401e008a366d49": 201, "285dce5e6f0e11ec99401e008a366d49": 201, "285db4fa6f0e11ec99401e008a366d49": 201, "285dcf946f0e11ec99401e008a366d49": 201, "285dcfda6f0e11ec99401e008a366d49": 201, "285dd1066f0e11ec99401e008a366d49": 201, "285dd16a6f0e11ec99401e008a366d49": 201, "285db55e6f0e11ec99401e008a366d49": 201, "shot": [201, 211], "095cd76a6f0f11ec82211e008a366d49": 201, "095cd8d26f0f11ec82211e008a366d49": 201, "095cd92c6f0f11ec82211e008a366d49": 201, "littl": 201, "coo": 201, "matric": 201, "sp_emb": 201, "key1": 201, "tags__key1": 201, "5164d792709a11ec9ae71e008a366d49": 201, "5164d986709a11ec9ae71e008a366d49": 201, "5164d922709a11ec9ae71e008a366d49": 201, "006942970007385196": 201, "48303283924326845": 201, "3859268166910603": 201, "220446049250313e": 201, "my": [202, 205], "favorit": [202, 217], "exploit": 202, "routin": [202, 217], "a04633546e6211ec8ad31e008a366d49": 202, "af7923406e6211ecbc811e008a366d49": 202, "ellipsi": 202, "3m": 202, "excit": [202, 207], "834f14666e6511ec8e331e008a366d49": 202, "834f32846e6511ec8e331e008a366d49": 202, "4883468432": 202, "7e27fa246e6611ec9a441e008a366d49": 202, "7e27fb826e6611ec9a441e008a366d49": 202, "99851c7a6e6611ecba351e008a366d49": 202, "4874066256": 202, "No": [202, 211, 216, 217, 218], "worri": 202, "techniqu": [202, 209], "4513619088": 202, "remain": [202, 207], "earlier": 202, "path1": 202, "path2": 202, "path3": 202, "rout": 202, "mc": 202, "deeper": [202, 210], "shallow": 202, "assigend": 202, "2f94c1426ee511ecbb491e008a366d49": 202, "2f94cd9a6ee511ecbb491e008a366d49": 202, "2f94cdfe6ee511ecbb491e008a366d49": 202, "2f94c4086ee511ecbb491e008a366d49": 202, "2f94c46c6ee511ecbb491e008a366d49": 202, "intend": 202, "4912623312": 202, "4905929552": 202, "4913359824": 202, "ye": [202, 209], "liter": 202, "anymor": 202, "b_da": 202, "4887691536": 202, "4887691600": 202, "4887691408": 202, "232": 202, "categori": 202, "rv": 202, "4869273936": 202, "4876081680": 202, "4876735056": 202, "spoiler": 202, "alert": 202, "4453362704": 203, "4446140816": 203, "4866772176": 203, "da3": 203, "5024988176": 203, "4525853328": 203, "4452802192": 203, "surpris": 203, "mention": [203, 214], "glob": 203, "da_jpg": 203, "da_png": 203, "da_al": 203, "astyp": [204, 208], "mlp": 204, "onnx": [204, 217, 218], "nn": [204, 218], "linear": 204, "in_featur": 204, "out_featur": 204, "relu": 204, "preliminari": 204, "do_constant_fold": 204, "constant": [204, 211, 217], "fold": 204, "input_nam": 204, "output_nam": 204, "dynamic_ax": 204, "ax": 204, "inferencesess": 204, "onnxruntim": 204, "0506": 204, "0015": 204, "1154": 204, "1630": 204, "2376": 204, "0576": 204, "4109": 204, "0052": 204, "0027": 204, "0800": 204, "0928": 204, "1326": 204, "2256": 204, "1649": 204, "0435": 204, "2312": 204, "0068": 204, "0991": 204, "0767": 204, "0501": 204, "1393": 204, "0965": 204, "2062": 204, "my_text_model": 204, "demonstr": [205, 215], "da_origin": 205, "da_predict": 205, "da_groundtruth": 205, "therebi": 205, "noisi": 205, "recogn": 205, "p_da": 205, "g_da": 205, "42dc84b26fab11ecbc181e008a366d49": 205, "42dc98086fab11ecbc181e008a366d49": 205, "badli": 205, "proce": 205, "example_da": 205, "8166666666666667": 205, "fulfil": 205, "knowledg": 205, "nine": 205, "judgement": 205, "count_relev": 205, "sum": 205, "inspir": 205, "47368421052631576": 205, "example_queri": 205, "example_index": 205, "embedding_funct": 205, "index_da": 205, "7583333333333333": 205, "100_000": [205, 217], "footprint": 205, "emb_func": 205, "1_000": [205, 208], "13649999999999998": 205, "14245": 205, "mongodb": 206, "next": [206, 209], "uom": 206, "paper": 206, "planner": 206, "postcard": 206, "operator1": 206, "value1": 206, "dunder": 206, "tags__timestamp": 206, "substitut": 206, "curli": 206, "ne": 206, "gt": 206, "greater": [206, 219, 220], "gte": 206, "lt": 206, "nin": 206, "regex": 206, "tags__x": 206, "pprint": 206, "pretti": [206, 215, 218], "92aee5d665d0c4dd34db10d83642ad": 206, "1a9d2139b02bc1c7842ecda94b347889": 206, "tags__h": 206, "4045a9659875fd1299e482d710753de3": 206, "cf7691c445220b94b88ff116911bad24": 206, "brace": 206, "tags__w": 206, "44c6a4b18eaa005c6dbe15a28a32ebc": 206, "join": [206, 209], "claus": 206, "22985b71b6d483c31cbe507ed4d02bd1": 206, "a071faf19feac5809642e3afcd3a5878": 206, "411ecc70a71a3f00fc3259bf08c239d1": 206, "greatli": [207, 217, 218], "one_million_doc": 208, "bear": 208, "20000000298023224": 208, "5620499849319458": 208, "6763054132461548": 208, "allevi": 208, "oom": 208, "1_000_000": 208, "768": 208, "dev": [208, 216, 218], "inter": 209, "wise": 209, "manner": 209, "naiv": 209, "popular": 209, "charm": 209, "6016": 209, "peopl": [209, 217], "whatev": 209, "pipelin": 209, "024": 209, "question": 209, "1024": 209, "jump": 209, "whiteboard": 209, "anywai": 209, "awai": [209, 217], "rather": 209, "wait": 209, "cv": 209, "inevit": 209, "domin": 209, "hopefulli": 209, "shed": 209, "light": 209, "mindset": 209, "gen": 209, "_head": 209, "_get_chunk": 209, "_batch": 209, "_to_stream_byt": 209, "num_doc_in_chunk": 209, "_tail": 209, "rpc": 209, "artifact": 209, "12345": 210, "hi": 210, "alex": 210, "laptop": [210, 211], "coquitts7": 210, "syntact": 210, "wide": [210, 211], "netloc": 210, "websocket": 210, "jinaai": [210, 220], "55566": 210, "8081": 210, "anytim": [211, 218], "a677577877b611eca3811e008a366d49": 211, "a67758f477b611eca3811e008a366d49": 211, "da_r": 211, "x03": 211, "cdocarrai": 211, "fastest": 211, "portabl": [211, 217], "insecur": 211, "2gb": 211, "bz2": 211, "lzma": 211, "zlib": 211, "jan": 211, "interpret": 211, "argu": 211, "realist": 211, "unreal": 211, "rel": 211, "doc1_byt": 211, "doc2_byt": 211, "uint64": [211, 219, 220], "uint32": [211, 219, 220], "doc_byt": 211, "repeat": [211, 214, 219, 220], "da_rec": 211, "simplifi": [211, 218], "da_gener": 211, "xxxl": 211, "nut": 211, "d_str": 211, "bcjngebawhuaaad": 211, "iw": 211, "uqdpl9udnsfvomzb8m7skigrkntiyotqynzmwmzexzwnim2i1mwuwmdhhmzy2zdq5mgaep2findiahd9imtgyab0vnwuyab0fytiahh9myaadp2mzyzyahd9jodayab0fzdiaht9kmtzkaabqnjzkndkaaaaa": 211, "2571b8b66e4d11ec9f271e008a366d49": 211, "2571ba466e4d11ec9f271e008a366d49": 211, "ae55782a6e4d11ec803c1e008a366d49": 211, "ae557a146e4d11ec803c1e008a366d49": 211, "43cb93b26e4e11ec8b731e008a366d49": 211, "43cb95746e4e11ec8b731e008a366d49": 211, "heavylift": 211, "myda123": 211, "analyz": 211, "colleagu": 211, "4gb": 211, "expir": 211, "unchang": 211, "searchabl": 212, "fledg": 212, "mydocu": 212, "_imag": 212, "tmp_w1yqmpc": 212, "tmp_iar4ofr": 212, "documentarri": 212, "top_image_match": 212, "top_level_match": 212, "_root_id_": 212, "your_root_id": 212, "visualis": 213, "pydanticdocumentarrai": 214, "won": 214, "happi": 214, "difficult": 214, "isinst": 214, "web": [214, 218], "fundament": [214, 217], "openapi": [214, 218], "ref": 214, "hint": [214, 218], "create_item": 214, "create_arrai": 214, "starlett": 214, "testclient": 214, "loc": 214, "msg": 214, "type_error": 214, "reject": 214, "ever": [214, 217], "meaningless": 214, "response_model": 214, "idonli": 214, "get_item_no_embed": 214, "065a5548756211ecaa8d1e008a366d49": 214, "declar": 214, "idandmatch": 214, "get_match": 214, "get_match_id_onli": 214, "unlimit": 214, "ef82e4f4756411ecb2c01e008a366d49": 214, "ef82e6d4756411ecb2c01e008a366d49": 214, "ef82e760756411ecb2c01e008a366d49": 214, "ef82e7ec756411ecb2c01e008a366d49": 214, "degre": 214, "idmatch": 214, "response_model_exclude_non": 214, "3da6383e756511ecb7cb1e008a366d49": 214, "3da63a14756511ecb7cb1e008a366d49": 214, "3da6392e756511ecb7cb1e008a366d49": 214, "3da63b72756511ecb7cb1e008a366d49": 214, "3da639ce756511ecb7cb1e008a366d49": 214, "3da63a5a756511ecb7cb1e008a366d49": 214, "3da63ae6756511ecb7cb1e008a366d49": 214, "3da63aa0756511ecb7cb1e008a366d49": 214, "3da63b2c756511ecb7cb1e008a366d49": 214, "3da63988756511ecb7cb1e008a366d49": 214, "stage": 215, "cell": 215, "richer": 215, "broken": 215, "emul": 215, "termin": 215, "linux": [216, 218], "conda": [216, 218], "forg": [216, 218], "uvicorn": [216, 218], "demand": [216, 218], "reproduc": [216, 218], "__version__": [216, 218], "maco": 216, "chip": 216, "rosetta": 216, "unam": 216, "arm64": 216, "brew": 216, "confirm": 216, "reinstal": 216, "destruct": 216, "proceed": 216, "bash": 216, "fssl": 216, "githubusercont": 216, "sh": 216, "platform": 216, "python3": 216, "aug": 216, "libexec": 216, "pypi": 216, "fortun": 216, "mp": 216, "torchaudio": 216, "whl": 216, "nightli": 216, "unstructur": [217, 218], "media": 217, "acceler": [217, 218], "toolkit": 217, "jupyterlab": 217, "happili": 217, "extrem": 217, "maxim": 217, "de": 217, "filetyp": 217, "haven": 217, "unfair": 217, "dedic": 217, "vision": 217, "coupl": 217, "soon": 217, "hf": 217, "temporarili": 217, "resid": 217, "oppos": 217, "physic": 217, "occasion": 217, "precompil": 217, "contigu": 217, "particl": 217, "crunch": 217, "awkward": 217, "ak": 217, "toytim": 217, "timecontext": 217, "ak_arrai": 217, "from_it": 217, "004": 217, "031": 217, "known": 217, "ago": 217, "me": 217, "perspect": 217, "numer": 217, "stori": 217, "thrown": 217, "boost": 217, "usabl": 217, "independ": 217, "comparison": [217, 218], "100k": 217, "repetit": 217, "realiz": 217, "deliber": 217, "constraint": 217, "trigger": 217, "arrow_up": 218, "alpha": 218, "branch": 218, "roadmap": 218, "door": 218, "foundat": 218, "dall": 218, "discoart": 218, "powerhous": 218, "mainstream": 218, "versatil": 218, "reliabl": 218, "pycharm": 218, "quantiz": [219, 220], "cls_name": [219, 220], "java": [219, 220], "int32": [219, 220], "sint32": [219, 220], "bignum": [219, 220], "fixnum": [219, 220], "sint64": [219, 220], "uint": [219, 220], "ulong": [219, 220], "sign": [219, 220], "fixed32": [219, 220], "fixed64": [219, 220], "eight": [219, 220], "sfixed32": [219, 220], "sfixed64": [219, 220], "trueclass": [219, 220], "falseclass": [219, 220], "bytestr": [219, 220], "8bit": [219, 220], "cd": 220, "pwd": 220, "protogen": 220}, "objects": {"": [[14, 0, 0, "-", "docarray"]], "docarray": [[15, 0, 0, "-", "array"], [118, 0, 0, "-", "base"], [119, 0, 0, "-", "dataclasses"], [124, 0, 0, "-", "document"], [151, 0, 0, "-", "helper"], [152, 0, 0, "-", "math"], [161, 0, 0, "-", "proto"], [169, 0, 0, "-", "score"], [174, 0, 0, "-", "typing"]], "docarray.array": [[16, 0, 0, "-", "annlite"], [17, 0, 0, "-", "base"], [18, 0, 0, "-", "chunk"], [19, 0, 0, "-", "document"], [20, 0, 0, "-", "elastic"], [21, 0, 0, "-", "match"], [22, 0, 0, "-", "memory"], [24, 0, 0, "-", "mixins"], [56, 0, 0, "-", "opensearch"], [57, 0, 0, "-", "qdrant"], [58, 0, 0, "-", "queryset"], [61, 0, 0, "-", "redis"], [62, 0, 0, "-", "sqlite"], [63, 0, 0, "-", "storage"], [117, 0, 0, "-", "weaviate"]], "docarray.array.annlite": [[16, 1, 1, "", "AnnliteConfig"], [16, 1, 1, "", "DocumentArrayAnnlite"]], "docarray.array.annlite.AnnliteConfig": [[16, 2, 1, "", "columns"], [16, 2, 1, "", "data_path"], [16, 2, 1, "", "ef_construction"], [16, 2, 1, "", "ef_search"], [16, 2, 1, "", "list_like"], [16, 2, 1, "", "max_connection"], [16, 2, 1, "", "metric"], [16, 2, 1, "", "n_components"], [16, 2, 1, "", "n_dim"], [16, 2, 1, "", "root_id"], [16, 2, 1, "", "serialize_config"]], "docarray.array.annlite.DocumentArrayAnnlite": [[16, 2, 1, "", "TYPE_MAP"], [16, 3, 1, "", "append"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "apply_batch"], [16, 3, 1, "", "batch"], [16, 3, 1, "", "batch_ids"], [16, 4, 1, "", "blobs"], [16, 3, 1, "", "clear"], [16, 3, 1, "", "cloud_delete"], [16, 3, 1, "", "cloud_list"], [16, 3, 1, "", "cloud_pull"], [16, 3, 1, "", "cloud_push"], [16, 4, 1, "", "contents"], [16, 3, 1, "", "count"], [16, 3, 1, "", "dataloader"], [16, 3, 1, "", "embed"], [16, 3, 1, "", "embed_and_evaluate"], [16, 4, 1, "", "embeddings"], [16, 3, 1, "", "empty"], [16, 3, 1, "", "evaluate"], [16, 3, 1, "", "extend"], [16, 3, 1, "", "find"], [16, 3, 1, "", "flatten"], [16, 3, 1, "", "from_base64"], [16, 3, 1, "", "from_bytes"], [16, 3, 1, "", "from_csv"], [16, 3, 1, "", "from_dataframe"], [16, 3, 1, "", "from_dict"], [16, 3, 1, "", "from_files"], [16, 3, 1, "", "from_huggingface_datasets"], [16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_lines"], [16, 3, 1, "", "from_list"], [16, 3, 1, "", "from_ndarray"], [16, 3, 1, "", "from_ndjson"], [16, 3, 1, "", "from_protobuf"], [16, 3, 1, "", "from_pydantic_model"], [16, 3, 1, "", "from_strawberry_type"], [16, 3, 1, "", "get_json_schema"], [16, 3, 1, "", "get_vocabulary"], [16, 3, 1, "", "index"], [16, 3, 1, "", "insert"], [16, 3, 1, "", "load"], [16, 3, 1, "", "load_binary"], [16, 3, 1, "", "load_csv"], [16, 3, 1, "", "load_json"], [16, 3, 1, "", "map"], [16, 3, 1, "", "map_batch"], [16, 3, 1, "", "match"], [16, 3, 1, "", "plot_embeddings"], [16, 3, 1, "", "plot_image_sprites"], [16, 3, 1, "", "pop"], [16, 3, 1, "", "post"], [16, 3, 1, "", "pull"], [16, 3, 1, "", "push"], [16, 3, 1, "", "reduce"], [16, 3, 1, "", "reduce_all"], [16, 3, 1, "", "remove"], [16, 3, 1, "", "reverse"], [16, 3, 1, "", "sample"], [16, 3, 1, "", "save"], [16, 3, 1, "", "save_binary"], [16, 3, 1, "", "save_csv"], [16, 3, 1, "", "save_embeddings_csv"], [16, 3, 1, "", "save_gif"], [16, 3, 1, "", "save_json"], [16, 3, 1, "", "shuffle"], [16, 3, 1, "", "split_by_tag"], [16, 3, 1, "", "summary"], [16, 3, 1, "", "sync"], [16, 4, 1, "", "tensors"], [16, 4, 1, "", "texts"], [16, 3, 1, "", "to_base64"], [16, 3, 1, "", "to_bytes"], [16, 3, 1, "", "to_dataframe"], [16, 3, 1, "", "to_dict"], [16, 3, 1, "", "to_json"], [16, 3, 1, "", "to_list"], [16, 3, 1, "", "to_protobuf"], [16, 3, 1, "", "to_pydantic_model"], [16, 3, 1, "", "to_strawberry_type"], [16, 3, 1, "", "traverse"], [16, 3, 1, "", "traverse_flat"], [16, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.base": [[17, 1, 1, "", "BaseDocumentArray"]], "docarray.array.base.BaseDocumentArray": [[17, 3, 1, "", "append"], [17, 3, 1, "", "clear"], [17, 3, 1, "", "count"], [17, 3, 1, "", "extend"], [17, 3, 1, "", "index"], [17, 3, 1, "", "insert"], [17, 3, 1, "", "pop"], [17, 3, 1, "", "remove"], [17, 3, 1, "", "reverse"]], "docarray.array.chunk": [[18, 1, 1, "", "ChunkArray"]], "docarray.array.chunk.ChunkArray": [[18, 2, 1, "", "TYPE_MAP"], [18, 4, 1, "", "adjacency"], [18, 3, 1, "", "append"], [18, 3, 1, "", "apply"], [18, 3, 1, "", "apply_batch"], [18, 3, 1, "", "batch"], [18, 3, 1, "", "batch_ids"], [18, 4, 1, "", "blobs"], [18, 3, 1, "", "clear"], [18, 3, 1, "", "cloud_delete"], [18, 3, 1, "", "cloud_list"], [18, 3, 1, "", "cloud_pull"], [18, 3, 1, "", "cloud_push"], [18, 4, 1, "", "contents"], [18, 3, 1, "", "count"], [18, 3, 1, "", "dataloader"], [18, 3, 1, "", "embed"], [18, 3, 1, "", "embed_and_evaluate"], [18, 4, 1, "", "embeddings"], [18, 3, 1, "", "empty"], [18, 3, 1, "", "evaluate"], [18, 3, 1, "", "extend"], [18, 3, 1, "", "find"], [18, 3, 1, "", "flatten"], [18, 3, 1, "", "from_base64"], [18, 3, 1, "", "from_bytes"], [18, 3, 1, "", "from_csv"], [18, 3, 1, "", "from_dataframe"], [18, 3, 1, "", "from_dict"], [18, 3, 1, "", "from_files"], [18, 3, 1, "", "from_huggingface_datasets"], [18, 3, 1, "", "from_json"], [18, 3, 1, "", "from_lines"], [18, 3, 1, "", "from_list"], [18, 3, 1, "", "from_ndarray"], [18, 3, 1, "", "from_ndjson"], [18, 3, 1, "", "from_protobuf"], [18, 3, 1, "", "from_pydantic_model"], [18, 3, 1, "", "from_strawberry_type"], [18, 3, 1, "", "get_json_schema"], [18, 3, 1, "", "get_vocabulary"], [18, 4, 1, "", "granularity"], [18, 3, 1, "", "index"], [18, 3, 1, "", "insert"], [18, 3, 1, "", "load"], [18, 3, 1, "", "load_binary"], [18, 3, 1, "", "load_csv"], [18, 3, 1, "", "load_json"], [18, 3, 1, "", "map"], [18, 3, 1, "", "map_batch"], [18, 3, 1, "", "match"], [18, 3, 1, "", "plot_embeddings"], [18, 3, 1, "", "plot_image_sprites"], [18, 3, 1, "", "pop"], [18, 3, 1, "", "post"], [18, 3, 1, "", "pull"], [18, 3, 1, "", "push"], [18, 3, 1, "", "reduce"], [18, 3, 1, "", "reduce_all"], [18, 4, 1, "", "reference_doc"], [18, 3, 1, "", "remove"], [18, 3, 1, "", "reverse"], [18, 3, 1, "", "sample"], [18, 3, 1, "", "save"], [18, 3, 1, "", "save_binary"], [18, 3, 1, "", "save_csv"], [18, 3, 1, "", "save_embeddings_csv"], [18, 3, 1, "", "save_gif"], [18, 3, 1, "", "save_json"], [18, 3, 1, "", "shuffle"], [18, 3, 1, "", "split_by_tag"], [18, 3, 1, "", "summary"], [18, 3, 1, "", "sync"], [18, 4, 1, "", "tensors"], [18, 4, 1, "", "texts"], [18, 3, 1, "", "to_base64"], [18, 3, 1, "", "to_bytes"], [18, 3, 1, "", "to_dataframe"], [18, 3, 1, "", "to_dict"], [18, 3, 1, "", "to_json"], [18, 3, 1, "", "to_list"], [18, 3, 1, "", "to_protobuf"], [18, 3, 1, "", "to_pydantic_model"], [18, 3, 1, "", "to_strawberry_type"], [18, 3, 1, "", "traverse"], [18, 3, 1, "", "traverse_flat"], [18, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.document": [[19, 1, 1, "", "DocumentArray"]], "docarray.array.document.DocumentArray": [[19, 3, 1, "", "append"], [19, 3, 1, "", "apply"], [19, 3, 1, "", "apply_batch"], [19, 3, 1, "", "batch"], [19, 3, 1, "", "batch_ids"], [19, 4, 1, "", "blobs"], [19, 3, 1, "", "clear"], [19, 3, 1, "", "cloud_delete"], [19, 3, 1, "", "cloud_list"], [19, 3, 1, "", "cloud_pull"], [19, 3, 1, "", "cloud_push"], [19, 4, 1, "", "contents"], [19, 3, 1, "", "count"], [19, 3, 1, "", "dataloader"], [19, 3, 1, "", "embed"], [19, 3, 1, "", "embed_and_evaluate"], [19, 4, 1, "", "embeddings"], [19, 3, 1, "", "empty"], [19, 3, 1, "", "evaluate"], [19, 3, 1, "", "extend"], [19, 3, 1, "", "find"], [19, 3, 1, "", "flatten"], [19, 3, 1, "", "from_base64"], [19, 3, 1, "", "from_bytes"], [19, 3, 1, "", "from_csv"], [19, 3, 1, "", "from_dataframe"], [19, 3, 1, "", "from_dict"], [19, 3, 1, "", "from_files"], [19, 3, 1, "", "from_huggingface_datasets"], [19, 3, 1, "", "from_json"], [19, 3, 1, "", "from_lines"], [19, 3, 1, "", "from_list"], [19, 3, 1, "", "from_ndarray"], [19, 3, 1, "", "from_ndjson"], [19, 3, 1, "", "from_protobuf"], [19, 3, 1, "", "from_pydantic_model"], [19, 3, 1, "", "from_strawberry_type"], [19, 3, 1, "", "get_json_schema"], [19, 3, 1, "", "get_vocabulary"], [19, 3, 1, "", "index"], [19, 3, 1, "", "insert"], [19, 3, 1, "", "load"], [19, 3, 1, "", "load_binary"], [19, 3, 1, "", "load_csv"], [19, 3, 1, "", "load_json"], [19, 3, 1, "", "map"], [19, 3, 1, "", "map_batch"], [19, 3, 1, "", "match"], [19, 3, 1, "", "plot_embeddings"], [19, 3, 1, "", "plot_image_sprites"], [19, 3, 1, "", "pop"], [19, 3, 1, "", "post"], [19, 3, 1, "", "pull"], [19, 3, 1, "", "push"], [19, 3, 1, "", "reduce"], [19, 3, 1, "", "reduce_all"], [19, 3, 1, "", "remove"], [19, 3, 1, "", "reverse"], [19, 3, 1, "", "sample"], [19, 3, 1, "", "save"], [19, 3, 1, "", "save_binary"], [19, 3, 1, "", "save_csv"], [19, 3, 1, "", "save_embeddings_csv"], [19, 3, 1, "", "save_gif"], [19, 3, 1, "", "save_json"], [19, 3, 1, "", "shuffle"], [19, 3, 1, "", "split_by_tag"], [19, 3, 1, "", "summary"], [19, 4, 1, "", "tensors"], [19, 4, 1, "", "texts"], [19, 3, 1, "", "to_base64"], [19, 3, 1, "", "to_bytes"], [19, 3, 1, "", "to_dataframe"], [19, 3, 1, "", "to_dict"], [19, 3, 1, "", "to_json"], [19, 3, 1, "", "to_list"], [19, 3, 1, "", "to_protobuf"], [19, 3, 1, "", "to_pydantic_model"], [19, 3, 1, "", "to_strawberry_type"], [19, 3, 1, "", "traverse"], [19, 3, 1, "", "traverse_flat"], [19, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.elastic": [[20, 1, 1, "", "DocumentArrayElastic"], [20, 1, 1, "", "ElasticConfig"]], "docarray.array.elastic.DocumentArrayElastic": [[20, 2, 1, "", "MAX_ES_RETURNED_DOCS"], [20, 2, 1, "", "TYPE_MAP"], [20, 3, 1, "", "append"], [20, 3, 1, "", "apply"], [20, 3, 1, "", "apply_batch"], [20, 3, 1, "", "batch"], [20, 3, 1, "", "batch_ids"], [20, 4, 1, "", "blobs"], [20, 3, 1, "", "clear"], [20, 3, 1, "", "cloud_delete"], [20, 3, 1, "", "cloud_list"], [20, 3, 1, "", "cloud_pull"], [20, 3, 1, "", "cloud_push"], [20, 4, 1, "", "contents"], [20, 3, 1, "", "count"], [20, 3, 1, "", "dataloader"], [20, 3, 1, "", "embed"], [20, 3, 1, "", "embed_and_evaluate"], [20, 4, 1, "", "embeddings"], [20, 3, 1, "", "empty"], [20, 3, 1, "", "evaluate"], [20, 3, 1, "", "extend"], [20, 3, 1, "", "find"], [20, 3, 1, "", "flatten"], [20, 3, 1, "", "from_base64"], [20, 3, 1, "", "from_bytes"], [20, 3, 1, "", "from_csv"], [20, 3, 1, "", "from_dataframe"], [20, 3, 1, "", "from_dict"], [20, 3, 1, "", "from_files"], [20, 3, 1, "", "from_huggingface_datasets"], [20, 3, 1, "", "from_json"], [20, 3, 1, "", "from_lines"], [20, 3, 1, "", "from_list"], [20, 3, 1, "", "from_ndarray"], [20, 3, 1, "", "from_ndjson"], [20, 3, 1, "", "from_protobuf"], [20, 3, 1, "", "from_pydantic_model"], [20, 3, 1, "", "from_strawberry_type"], [20, 3, 1, "", "get_json_schema"], [20, 3, 1, "", "get_vocabulary"], [20, 3, 1, "", "index"], [20, 3, 1, "", "insert"], [20, 3, 1, "", "load"], [20, 3, 1, "", "load_binary"], [20, 3, 1, "", "load_csv"], [20, 3, 1, "", "load_json"], [20, 3, 1, "", "map"], [20, 3, 1, "", "map_batch"], [20, 3, 1, "", "match"], [20, 3, 1, "", "plot_embeddings"], [20, 3, 1, "", "plot_image_sprites"], [20, 3, 1, "", "pop"], [20, 3, 1, "", "post"], [20, 3, 1, "", "pull"], [20, 3, 1, "", "push"], [20, 3, 1, "", "reduce"], [20, 3, 1, "", "reduce_all"], [20, 3, 1, "", "remove"], [20, 3, 1, "", "reverse"], [20, 3, 1, "", "sample"], [20, 3, 1, "", "save"], [20, 3, 1, "", "save_binary"], [20, 3, 1, "", "save_csv"], [20, 3, 1, "", "save_embeddings_csv"], [20, 3, 1, "", "save_gif"], [20, 3, 1, "", "save_json"], [20, 3, 1, "", "shuffle"], [20, 3, 1, "", "split_by_tag"], [20, 3, 1, "", "summary"], [20, 3, 1, "", "sync"], [20, 4, 1, "", "tensors"], [20, 4, 1, "", "texts"], [20, 3, 1, "", "to_base64"], [20, 3, 1, "", "to_bytes"], [20, 3, 1, "", "to_dataframe"], [20, 3, 1, "", "to_dict"], [20, 3, 1, "", "to_json"], [20, 3, 1, "", "to_list"], [20, 3, 1, "", "to_protobuf"], [20, 3, 1, "", "to_pydantic_model"], [20, 3, 1, "", "to_strawberry_type"], [20, 3, 1, "", "traverse"], [20, 3, 1, "", "traverse_flat"], [20, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.elastic.ElasticConfig": [[20, 2, 1, "", "batch_size"], [20, 2, 1, "", "columns"], [20, 2, 1, "", "distance"], [20, 2, 1, "", "ef_construction"], [20, 2, 1, "", "es_config"], [20, 2, 1, "", "hosts"], [20, 2, 1, "", "index_name"], [20, 2, 1, "", "index_text"], [20, 2, 1, "", "list_like"], [20, 2, 1, "", "m"], [20, 2, 1, "", "n_dim"], [20, 2, 1, "", "root_id"], [20, 2, 1, "", "tag_indices"]], "docarray.array.match": [[21, 1, 1, "", "MatchArray"]], "docarray.array.match.MatchArray": [[21, 2, 1, "", "TYPE_MAP"], [21, 4, 1, "", "adjacency"], [21, 3, 1, "", "append"], [21, 3, 1, "", "apply"], [21, 3, 1, "", "apply_batch"], [21, 3, 1, "", "batch"], [21, 3, 1, "", "batch_ids"], [21, 4, 1, "", "blobs"], [21, 3, 1, "", "clear"], [21, 3, 1, "", "cloud_delete"], [21, 3, 1, "", "cloud_list"], [21, 3, 1, "", "cloud_pull"], [21, 3, 1, "", "cloud_push"], [21, 4, 1, "", "contents"], [21, 3, 1, "", "count"], [21, 3, 1, "", "dataloader"], [21, 3, 1, "", "embed"], [21, 3, 1, "", "embed_and_evaluate"], [21, 4, 1, "", "embeddings"], [21, 3, 1, "", "empty"], [21, 3, 1, "", "evaluate"], [21, 3, 1, "", "extend"], [21, 3, 1, "", "find"], [21, 3, 1, "", "flatten"], [21, 3, 1, "", "from_base64"], [21, 3, 1, "", "from_bytes"], [21, 3, 1, "", "from_csv"], [21, 3, 1, "", "from_dataframe"], [21, 3, 1, "", "from_dict"], [21, 3, 1, "", "from_files"], [21, 3, 1, "", "from_huggingface_datasets"], [21, 3, 1, "", "from_json"], [21, 3, 1, "", "from_lines"], [21, 3, 1, "", "from_list"], [21, 3, 1, "", "from_ndarray"], [21, 3, 1, "", "from_ndjson"], [21, 3, 1, "", "from_protobuf"], [21, 3, 1, "", "from_pydantic_model"], [21, 3, 1, "", "from_strawberry_type"], [21, 3, 1, "", "get_json_schema"], [21, 3, 1, "", "get_vocabulary"], [21, 4, 1, "", "granularity"], [21, 3, 1, "", "index"], [21, 3, 1, "", "insert"], [21, 3, 1, "", "load"], [21, 3, 1, "", "load_binary"], [21, 3, 1, "", "load_csv"], [21, 3, 1, "", "load_json"], [21, 3, 1, "", "map"], [21, 3, 1, "", "map_batch"], [21, 3, 1, "", "match"], [21, 3, 1, "", "plot_embeddings"], [21, 3, 1, "", "plot_image_sprites"], [21, 3, 1, "", "pop"], [21, 3, 1, "", "post"], [21, 3, 1, "", "pull"], [21, 3, 1, "", "push"], [21, 3, 1, "", "reduce"], [21, 3, 1, "", "reduce_all"], [21, 4, 1, "", "reference_doc"], [21, 3, 1, "", "remove"], [21, 3, 1, "", "reverse"], [21, 3, 1, "", "sample"], [21, 3, 1, "", "save"], [21, 3, 1, "", "save_binary"], [21, 3, 1, "", "save_csv"], [21, 3, 1, "", "save_embeddings_csv"], [21, 3, 1, "", "save_gif"], [21, 3, 1, "", "save_json"], [21, 3, 1, "", "shuffle"], [21, 3, 1, "", "split_by_tag"], [21, 3, 1, "", "summary"], [21, 3, 1, "", "sync"], [21, 4, 1, "", "tensors"], [21, 4, 1, "", "texts"], [21, 3, 1, "", "to_base64"], [21, 3, 1, "", "to_bytes"], [21, 3, 1, "", "to_dataframe"], [21, 3, 1, "", "to_dict"], [21, 3, 1, "", "to_json"], [21, 3, 1, "", "to_list"], [21, 3, 1, "", "to_protobuf"], [21, 3, 1, "", "to_pydantic_model"], [21, 3, 1, "", "to_strawberry_type"], [21, 3, 1, "", "traverse"], [21, 3, 1, "", "traverse_flat"], [21, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.memory": [[22, 1, 1, "", "DocumentArrayInMemory"]], "docarray.array.memory.DocumentArrayInMemory": [[22, 2, 1, "", "TYPE_MAP"], [22, 3, 1, "", "append"], [22, 3, 1, "", "apply"], [22, 3, 1, "", "apply_batch"], [22, 3, 1, "", "batch"], [22, 3, 1, "", "batch_ids"], [22, 4, 1, "", "blobs"], [22, 3, 1, "", "clear"], [22, 3, 1, "", "cloud_delete"], [22, 3, 1, "", "cloud_list"], [22, 3, 1, "", "cloud_pull"], [22, 3, 1, "", "cloud_push"], [22, 4, 1, "", "contents"], [22, 3, 1, "", "count"], [22, 3, 1, "", "dataloader"], [22, 3, 1, "", "embed"], [22, 3, 1, "", "embed_and_evaluate"], [22, 4, 1, "", "embeddings"], [22, 3, 1, "", "empty"], [22, 3, 1, "", "evaluate"], [22, 3, 1, "", "extend"], [22, 3, 1, "", "find"], [22, 3, 1, "", "flatten"], [22, 3, 1, "", "from_base64"], [22, 3, 1, "", "from_bytes"], [22, 3, 1, "", "from_csv"], [22, 3, 1, "", "from_dataframe"], [22, 3, 1, "", "from_dict"], [22, 3, 1, "", "from_files"], [22, 3, 1, "", "from_huggingface_datasets"], [22, 3, 1, "", "from_json"], [22, 3, 1, "", "from_lines"], [22, 3, 1, "", "from_list"], [22, 3, 1, "", "from_ndarray"], [22, 3, 1, "", "from_ndjson"], [22, 3, 1, "", "from_protobuf"], [22, 3, 1, "", "from_pydantic_model"], [22, 3, 1, "", "from_strawberry_type"], [22, 3, 1, "", "get_json_schema"], [22, 3, 1, "", "get_vocabulary"], [22, 3, 1, "", "index"], [22, 3, 1, "", "insert"], [22, 3, 1, "", "load"], [22, 3, 1, "", "load_binary"], [22, 3, 1, "", "load_csv"], [22, 3, 1, "", "load_json"], [22, 3, 1, "", "map"], [22, 3, 1, "", "map_batch"], [22, 3, 1, "", "match"], [22, 3, 1, "", "plot_embeddings"], [22, 3, 1, "", "plot_image_sprites"], [22, 3, 1, "", "pop"], [22, 3, 1, "", "post"], [22, 3, 1, "", "pull"], [22, 3, 1, "", "push"], [22, 3, 1, "", "reduce"], [22, 3, 1, "", "reduce_all"], [22, 3, 1, "", "remove"], [22, 3, 1, "", "reverse"], [22, 3, 1, "", "sample"], [22, 3, 1, "", "save"], [22, 3, 1, "", "save_binary"], [22, 3, 1, "", "save_csv"], [22, 3, 1, "", "save_embeddings_csv"], [22, 3, 1, "", "save_gif"], [22, 3, 1, "", "save_json"], [22, 3, 1, "", "shuffle"], [22, 3, 1, "", "split_by_tag"], [22, 3, 1, "", "summary"], [22, 3, 1, "", "sync"], [22, 4, 1, "", "tensors"], [22, 4, 1, "", "texts"], [22, 3, 1, "", "to_base64"], [22, 3, 1, "", "to_bytes"], [22, 3, 1, "", "to_dataframe"], [22, 3, 1, "", "to_dict"], [22, 3, 1, "", "to_json"], [22, 3, 1, "", "to_list"], [22, 3, 1, "", "to_protobuf"], [22, 3, 1, "", "to_pydantic_model"], [22, 3, 1, "", "to_strawberry_type"], [22, 3, 1, "", "traverse"], [22, 3, 1, "", "traverse_flat"], [22, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.mixins": [[24, 1, 1, "", "AllMixins"], [25, 0, 0, "-", "content"], [26, 0, 0, "-", "dataloader"], [28, 0, 0, "-", "delitem"], [29, 0, 0, "-", "embed"], [30, 0, 0, "-", "empty"], [31, 0, 0, "-", "evaluation"], [32, 0, 0, "-", "find"], [33, 0, 0, "-", "getattr"], [34, 0, 0, "-", "getitem"], [35, 0, 0, "-", "group"], [36, 0, 0, "-", "io"], [45, 0, 0, "-", "match"], [46, 0, 0, "-", "parallel"], [47, 0, 0, "-", "plot"], [48, 0, 0, "-", "post"], [49, 0, 0, "-", "pydantic"], [50, 0, 0, "-", "reduce"], [51, 0, 0, "-", "sample"], [52, 0, 0, "-", "setitem"], [53, 0, 0, "-", "strawberry"], [54, 0, 0, "-", "text"], [55, 0, 0, "-", "traverse"]], "docarray.array.mixins.AllMixins": [[24, 3, 1, "", "apply"], [24, 3, 1, "", "apply_batch"], [24, 3, 1, "", "batch"], [24, 3, 1, "", "batch_ids"], [24, 4, 1, "", "blobs"], [24, 3, 1, "", "cloud_delete"], [24, 3, 1, "", "cloud_list"], [24, 3, 1, "", "cloud_pull"], [24, 3, 1, "", "cloud_push"], [24, 4, 1, "", "contents"], [24, 3, 1, "", "dataloader"], [24, 3, 1, "", "embed"], [24, 3, 1, "", "embed_and_evaluate"], [24, 4, 1, "", "embeddings"], [24, 3, 1, "", "empty"], [24, 3, 1, "", "evaluate"], [24, 3, 1, "", "find"], [24, 3, 1, "", "flatten"], [24, 3, 1, "", "from_base64"], [24, 3, 1, "", "from_bytes"], [24, 3, 1, "", "from_csv"], [24, 3, 1, "", "from_dataframe"], [24, 3, 1, "", "from_dict"], [24, 3, 1, "", "from_files"], [24, 3, 1, "", "from_huggingface_datasets"], [24, 3, 1, "", "from_json"], [24, 3, 1, "", "from_lines"], [24, 3, 1, "", "from_list"], [24, 3, 1, "", "from_ndarray"], [24, 3, 1, "", "from_ndjson"], [24, 3, 1, "", "from_protobuf"], [24, 3, 1, "", "from_pydantic_model"], [24, 3, 1, "", "from_strawberry_type"], [24, 3, 1, "", "get_json_schema"], [24, 3, 1, "", "get_vocabulary"], [24, 3, 1, "", "load"], [24, 3, 1, "", "load_binary"], [24, 3, 1, "", "load_csv"], [24, 3, 1, "", "load_json"], [24, 3, 1, "", "map"], [24, 3, 1, "", "map_batch"], [24, 3, 1, "", "match"], [24, 3, 1, "", "plot_embeddings"], [24, 3, 1, "", "plot_image_sprites"], [24, 3, 1, "", "post"], [24, 3, 1, "", "pull"], [24, 3, 1, "", "push"], [24, 3, 1, "", "reduce"], [24, 3, 1, "", "reduce_all"], [24, 3, 1, "", "sample"], [24, 3, 1, "", "save"], [24, 3, 1, "", "save_binary"], [24, 3, 1, "", "save_csv"], [24, 3, 1, "", "save_embeddings_csv"], [24, 3, 1, "", "save_gif"], [24, 3, 1, "", "save_json"], [24, 3, 1, "", "shuffle"], [24, 3, 1, "", "split_by_tag"], [24, 3, 1, "", "summary"], [24, 4, 1, "", "tensors"], [24, 4, 1, "", "texts"], [24, 3, 1, "", "to_base64"], [24, 3, 1, "", "to_bytes"], [24, 3, 1, "", "to_dataframe"], [24, 3, 1, "", "to_dict"], [24, 3, 1, "", "to_json"], [24, 3, 1, "", "to_list"], [24, 3, 1, "", "to_protobuf"], [24, 3, 1, "", "to_pydantic_model"], [24, 3, 1, "", "to_strawberry_type"], [24, 3, 1, "", "traverse"], [24, 3, 1, "", "traverse_flat"], [24, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.mixins.content": [[25, 1, 1, "", "ContentPropertyMixin"]], "docarray.array.mixins.content.ContentPropertyMixin": [[25, 4, 1, "", "blobs"], [25, 4, 1, "", "contents"], [25, 4, 1, "", "embeddings"], [25, 4, 1, "", "tensors"], [25, 4, 1, "", "texts"]], "docarray.array.mixins.dataloader": [[26, 1, 1, "", "DataLoaderMixin"], [27, 0, 0, "-", "helper"]], "docarray.array.mixins.dataloader.DataLoaderMixin": [[26, 3, 1, "", "dataloader"]], "docarray.array.mixins.dataloader.helper": [[27, 1, 1, "", "DocumentArrayLoader"]], "docarray.array.mixins.dataloader.helper.DocumentArrayLoader": [[27, 3, 1, "", "apply"], [27, 3, 1, "", "apply_batch"], [27, 3, 1, "", "batch"], [27, 3, 1, "", "batch_ids"], [27, 3, 1, "", "map"], [27, 3, 1, "", "map_batch"], [27, 3, 1, "", "split_by_tag"]], "docarray.array.mixins.delitem": [[28, 1, 1, "", "DelItemMixin"]], "docarray.array.mixins.embed": [[29, 1, 1, "", "EmbedMixin"], [29, 5, 1, "", "get_framework"]], "docarray.array.mixins.embed.EmbedMixin": [[29, 3, 1, "", "embed"]], "docarray.array.mixins.empty": [[30, 1, 1, "", "EmptyMixin"]], "docarray.array.mixins.empty.EmptyMixin": [[30, 3, 1, "", "empty"]], "docarray.array.mixins.evaluation": [[31, 1, 1, "", "EvaluationMixin"]], "docarray.array.mixins.evaluation.EvaluationMixin": [[31, 3, 1, "", "embed_and_evaluate"], [31, 3, 1, "", "evaluate"]], "docarray.array.mixins.find": [[32, 1, 1, "", "FindMixin"]], "docarray.array.mixins.find.FindMixin": [[32, 3, 1, "", "find"]], "docarray.array.mixins.getattr": [[33, 1, 1, "", "GetAttributeMixin"]], "docarray.array.mixins.getitem": [[34, 1, 1, "", "GetItemMixin"]], "docarray.array.mixins.group": [[35, 1, 1, "", "GroupMixin"]], "docarray.array.mixins.group.GroupMixin": [[35, 3, 1, "", "batch"], [35, 3, 1, "", "batch_ids"], [35, 3, 1, "", "split_by_tag"]], "docarray.array.mixins.io": [[37, 0, 0, "-", "binary"], [38, 0, 0, "-", "common"], [39, 0, 0, "-", "csv"], [40, 0, 0, "-", "dataframe"], [41, 0, 0, "-", "from_gen"], [42, 0, 0, "-", "json"], [43, 0, 0, "-", "pbar"], [44, 0, 0, "-", "pushpull"]], "docarray.array.mixins.io.binary": [[37, 1, 1, "", "BinaryIOMixin"], [37, 1, 1, "", "LazyRequestReader"]], "docarray.array.mixins.io.binary.BinaryIOMixin": [[37, 3, 1, "", "from_base64"], [37, 3, 1, "", "from_bytes"], [37, 3, 1, "", "from_protobuf"], [37, 3, 1, "", "load_binary"], [37, 3, 1, "", "save_binary"], [37, 3, 1, "", "to_base64"], [37, 3, 1, "", "to_bytes"], [37, 3, 1, "", "to_protobuf"]], "docarray.array.mixins.io.common": [[38, 1, 1, "", "CommonIOMixin"]], "docarray.array.mixins.io.common.CommonIOMixin": [[38, 3, 1, "", "load"], [38, 3, 1, "", "save"]], "docarray.array.mixins.io.csv": [[39, 1, 1, "", "CsvIOMixin"]], "docarray.array.mixins.io.csv.CsvIOMixin": [[39, 3, 1, "", "load_csv"], [39, 3, 1, "", "save_csv"], [39, 3, 1, "", "save_embeddings_csv"]], "docarray.array.mixins.io.dataframe": [[40, 1, 1, "", "DataframeIOMixin"]], "docarray.array.mixins.io.dataframe.DataframeIOMixin": [[40, 3, 1, "", "from_dataframe"], [40, 3, 1, "", "to_dataframe"]], "docarray.array.mixins.io.from_gen": [[41, 1, 1, "", "FromGeneratorMixin"]], "docarray.array.mixins.io.from_gen.FromGeneratorMixin": [[41, 3, 1, "", "from_csv"], [41, 3, 1, "", "from_files"], [41, 3, 1, "", "from_huggingface_datasets"], [41, 3, 1, "", "from_lines"], [41, 3, 1, "", "from_ndarray"], [41, 3, 1, "", "from_ndjson"]], "docarray.array.mixins.io.json": [[42, 1, 1, "", "JsonIOMixin"]], "docarray.array.mixins.io.json.JsonIOMixin": [[42, 3, 1, "", "from_dict"], [42, 3, 1, "", "from_json"], [42, 3, 1, "", "from_list"], [42, 3, 1, "", "load_json"], [42, 3, 1, "", "save_json"], [42, 3, 1, "", "to_dict"], [42, 3, 1, "", "to_json"], [42, 3, 1, "", "to_list"]], "docarray.array.mixins.io.pbar": [[43, 1, 1, "", "QPSColumn"], [43, 5, 1, "", "get_pbar"], [43, 5, 1, "", "get_progressbar"]], "docarray.array.mixins.io.pbar.QPSColumn": [[43, 3, 1, "", "get_table_column"], [43, 2, 1, "", "max_refresh"], [43, 3, 1, "", "render"]], "docarray.array.mixins.io.pushpull": [[44, 1, 1, "", "PushPullMixin"]], "docarray.array.mixins.io.pushpull.PushPullMixin": [[44, 3, 1, "", "cloud_delete"], [44, 3, 1, "", "cloud_list"], [44, 3, 1, "", "cloud_pull"], [44, 3, 1, "", "cloud_push"], [44, 3, 1, "", "pull"], [44, 3, 1, "", "push"]], "docarray.array.mixins.match": [[45, 1, 1, "", "MatchMixin"]], "docarray.array.mixins.match.MatchMixin": [[45, 3, 1, "", "match"]], "docarray.array.mixins.parallel": [[46, 1, 1, "", "ParallelMixin"]], "docarray.array.mixins.parallel.ParallelMixin": [[46, 3, 1, "", "apply"], [46, 3, 1, "", "apply_batch"], [46, 3, 1, "", "map"], [46, 3, 1, "", "map_batch"]], "docarray.array.mixins.plot": [[47, 1, 1, "", "PlotMixin"]], "docarray.array.mixins.plot.PlotMixin": [[47, 3, 1, "", "plot_embeddings"], [47, 3, 1, "", "plot_image_sprites"], [47, 3, 1, "", "save_gif"], [47, 3, 1, "", "summary"]], "docarray.array.mixins.post": [[48, 1, 1, "", "PostMixin"]], "docarray.array.mixins.post.PostMixin": [[48, 3, 1, "", "post"]], "docarray.array.mixins.pydantic": [[49, 1, 1, "", "PydanticMixin"]], "docarray.array.mixins.pydantic.PydanticMixin": [[49, 3, 1, "", "from_pydantic_model"], [49, 3, 1, "", "get_json_schema"], [49, 3, 1, "", "to_pydantic_model"]], "docarray.array.mixins.reduce": [[50, 1, 1, "", "ReduceMixin"]], "docarray.array.mixins.reduce.ReduceMixin": [[50, 3, 1, "", "reduce"], [50, 3, 1, "", "reduce_all"]], "docarray.array.mixins.sample": [[51, 1, 1, "", "SampleMixin"]], "docarray.array.mixins.sample.SampleMixin": [[51, 3, 1, "", "sample"], [51, 3, 1, "", "shuffle"]], "docarray.array.mixins.setitem": [[52, 1, 1, "", "SetItemMixin"]], "docarray.array.mixins.strawberry": [[53, 1, 1, "", "StrawberryMixin"]], "docarray.array.mixins.strawberry.StrawberryMixin": [[53, 3, 1, "", "from_strawberry_type"], [53, 3, 1, "", "to_strawberry_type"]], "docarray.array.mixins.text": [[54, 1, 1, "", "TextToolsMixin"]], "docarray.array.mixins.text.TextToolsMixin": [[54, 3, 1, "", "get_vocabulary"]], "docarray.array.mixins.traverse": [[55, 1, 1, "", "TraverseMixin"]], "docarray.array.mixins.traverse.TraverseMixin": [[55, 3, 1, "", "flatten"], [55, 3, 1, "", "traverse"], [55, 3, 1, "", "traverse_flat"], [55, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.opensearch": [[56, 1, 1, "", "DocumentArrayOpenSearch"], [56, 1, 1, "", "OpenSearchConfig"]], "docarray.array.opensearch.DocumentArrayOpenSearch": [[56, 2, 1, "", "MAX_OPENSEARCH_RETURNED_DOCS"], [56, 2, 1, "", "TYPE_MAP"], [56, 3, 1, "", "append"], [56, 3, 1, "", "apply"], [56, 3, 1, "", "apply_batch"], [56, 3, 1, "", "batch"], [56, 3, 1, "", "batch_ids"], [56, 4, 1, "", "blobs"], [56, 3, 1, "", "clear"], [56, 3, 1, "", "cloud_delete"], [56, 3, 1, "", "cloud_list"], [56, 3, 1, "", "cloud_pull"], [56, 3, 1, "", "cloud_push"], [56, 4, 1, "", "contents"], [56, 3, 1, "", "count"], [56, 3, 1, "", "dataloader"], [56, 3, 1, "", "embed"], [56, 3, 1, "", "embed_and_evaluate"], [56, 4, 1, "", "embeddings"], [56, 3, 1, "", "empty"], [56, 3, 1, "", "evaluate"], [56, 3, 1, "", "extend"], [56, 3, 1, "", "find"], [56, 3, 1, "", "flatten"], [56, 3, 1, "", "from_base64"], [56, 3, 1, "", "from_bytes"], [56, 3, 1, "", "from_csv"], [56, 3, 1, "", "from_dataframe"], [56, 3, 1, "", "from_dict"], [56, 3, 1, "", "from_files"], [56, 3, 1, "", "from_huggingface_datasets"], [56, 3, 1, "", "from_json"], [56, 3, 1, "", "from_lines"], [56, 3, 1, "", "from_list"], [56, 3, 1, "", "from_ndarray"], [56, 3, 1, "", "from_ndjson"], [56, 3, 1, "", "from_protobuf"], [56, 3, 1, "", "from_pydantic_model"], [56, 3, 1, "", "from_strawberry_type"], [56, 3, 1, "", "get_json_schema"], [56, 3, 1, "", "get_vocabulary"], [56, 3, 1, "", "index"], [56, 3, 1, "", "insert"], [56, 3, 1, "", "load"], [56, 3, 1, "", "load_binary"], [56, 3, 1, "", "load_csv"], [56, 3, 1, "", "load_json"], [56, 3, 1, "", "map"], [56, 3, 1, "", "map_batch"], [56, 3, 1, "", "match"], [56, 3, 1, "", "plot_embeddings"], [56, 3, 1, "", "plot_image_sprites"], [56, 3, 1, "", "pop"], [56, 3, 1, "", "post"], [56, 3, 1, "", "pull"], [56, 3, 1, "", "push"], [56, 3, 1, "", "reduce"], [56, 3, 1, "", "reduce_all"], [56, 3, 1, "", "remove"], [56, 3, 1, "", "reverse"], [56, 3, 1, "", "sample"], [56, 3, 1, "", "save"], [56, 3, 1, "", "save_binary"], [56, 3, 1, "", "save_csv"], [56, 3, 1, "", "save_embeddings_csv"], [56, 3, 1, "", "save_gif"], [56, 3, 1, "", "save_json"], [56, 3, 1, "", "shuffle"], [56, 3, 1, "", "split_by_tag"], [56, 3, 1, "", "summary"], [56, 3, 1, "", "sync"], [56, 4, 1, "", "tensors"], [56, 4, 1, "", "texts"], [56, 3, 1, "", "to_base64"], [56, 3, 1, "", "to_bytes"], [56, 3, 1, "", "to_dataframe"], [56, 3, 1, "", "to_dict"], [56, 3, 1, "", "to_json"], [56, 3, 1, "", "to_list"], [56, 3, 1, "", "to_protobuf"], [56, 3, 1, "", "to_pydantic_model"], [56, 3, 1, "", "to_strawberry_type"], [56, 3, 1, "", "traverse"], [56, 3, 1, "", "traverse_flat"], [56, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.opensearch.OpenSearchConfig": [[56, 2, 1, "", "algorithm"], [56, 2, 1, "", "batch_size"], [56, 2, 1, "", "columns"], [56, 2, 1, "", "distance"], [56, 2, 1, "", "ef_construction"], [56, 2, 1, "", "ef_search"], [56, 2, 1, "", "encoder"], [56, 2, 1, "", "engine"], [56, 2, 1, "", "hosts"], [56, 2, 1, "", "index_name"], [56, 2, 1, "", "index_text"], [56, 2, 1, "", "list_like"], [56, 2, 1, "", "m"], [56, 2, 1, "", "n_dim"], [56, 2, 1, "", "opensearch_config"], [56, 2, 1, "", "root_id"], [56, 2, 1, "", "tag_indices"]], "docarray.array.qdrant": [[57, 1, 1, "", "DocumentArrayQdrant"], [57, 1, 1, "", "QdrantConfig"]], "docarray.array.qdrant.DocumentArrayQdrant": [[57, 2, 1, "", "TYPE_MAP"], [57, 3, 1, "", "append"], [57, 3, 1, "", "apply"], [57, 3, 1, "", "apply_batch"], [57, 3, 1, "", "batch"], [57, 3, 1, "", "batch_ids"], [57, 4, 1, "", "blobs"], [57, 3, 1, "", "clear"], [57, 4, 1, "", "client"], [57, 3, 1, "", "cloud_delete"], [57, 3, 1, "", "cloud_list"], [57, 3, 1, "", "cloud_pull"], [57, 3, 1, "", "cloud_push"], [57, 4, 1, "", "collection_name"], [57, 4, 1, "", "collection_name_meta"], [57, 4, 1, "", "config"], [57, 4, 1, "", "contents"], [57, 3, 1, "", "count"], [57, 3, 1, "", "dataloader"], [57, 4, 1, "", "distance"], [57, 3, 1, "", "embed"], [57, 3, 1, "", "embed_and_evaluate"], [57, 4, 1, "", "embeddings"], [57, 3, 1, "", "empty"], [57, 3, 1, "", "evaluate"], [57, 3, 1, "", "extend"], [57, 3, 1, "", "find"], [57, 3, 1, "", "flatten"], [57, 3, 1, "", "from_base64"], [57, 3, 1, "", "from_bytes"], [57, 3, 1, "", "from_csv"], [57, 3, 1, "", "from_dataframe"], [57, 3, 1, "", "from_dict"], [57, 3, 1, "", "from_files"], [57, 3, 1, "", "from_huggingface_datasets"], [57, 3, 1, "", "from_json"], [57, 3, 1, "", "from_lines"], [57, 3, 1, "", "from_list"], [57, 3, 1, "", "from_ndarray"], [57, 3, 1, "", "from_ndjson"], [57, 3, 1, "", "from_protobuf"], [57, 3, 1, "", "from_pydantic_model"], [57, 3, 1, "", "from_strawberry_type"], [57, 3, 1, "", "get_json_schema"], [57, 3, 1, "", "get_vocabulary"], [57, 3, 1, "", "index"], [57, 3, 1, "", "insert"], [57, 3, 1, "", "load"], [57, 3, 1, "", "load_binary"], [57, 3, 1, "", "load_csv"], [57, 3, 1, "", "load_json"], [57, 3, 1, "", "map"], [57, 3, 1, "", "map_batch"], [57, 3, 1, "", "match"], [57, 4, 1, "", "n_dim"], [57, 3, 1, "", "plot_embeddings"], [57, 3, 1, "", "plot_image_sprites"], [57, 3, 1, "", "pop"], [57, 3, 1, "", "post"], [57, 3, 1, "", "pull"], [57, 3, 1, "", "push"], [57, 3, 1, "", "reduce"], [57, 3, 1, "", "reduce_all"], [57, 3, 1, "", "remove"], [57, 3, 1, "", "reverse"], [57, 3, 1, "", "sample"], [57, 3, 1, "", "save"], [57, 3, 1, "", "save_binary"], [57, 3, 1, "", "save_csv"], [57, 3, 1, "", "save_embeddings_csv"], [57, 3, 1, "", "save_gif"], [57, 3, 1, "", "save_json"], [57, 3, 1, "", "scan"], [57, 4, 1, "", "scroll_batch_size"], [57, 4, 1, "", "serialization_config"], [57, 4, 1, "", "serialize_config"], [57, 3, 1, "", "shuffle"], [57, 3, 1, "", "split_by_tag"], [57, 3, 1, "", "summary"], [57, 3, 1, "", "sync"], [57, 4, 1, "", "tensors"], [57, 4, 1, "", "texts"], [57, 3, 1, "", "to_base64"], [57, 3, 1, "", "to_bytes"], [57, 3, 1, "", "to_dataframe"], [57, 3, 1, "", "to_dict"], [57, 3, 1, "", "to_json"], [57, 3, 1, "", "to_list"], [57, 3, 1, "", "to_protobuf"], [57, 3, 1, "", "to_pydantic_model"], [57, 3, 1, "", "to_strawberry_type"], [57, 3, 1, "", "traverse"], [57, 3, 1, "", "traverse_flat"], [57, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.qdrant.QdrantConfig": [[57, 2, 1, "", "api_key"], [57, 2, 1, "", "collection_name"], [57, 2, 1, "", "columns"], [57, 2, 1, "", "distance"], [57, 2, 1, "", "ef_construct"], [57, 2, 1, "", "full_scan_threshold"], [57, 2, 1, "", "grpc_port"], [57, 2, 1, "", "host"], [57, 2, 1, "", "https"], [57, 2, 1, "", "list_like"], [57, 2, 1, "", "m"], [57, 2, 1, "", "n_dim"], [57, 2, 1, "", "port"], [57, 2, 1, "", "prefer_grpc"], [57, 2, 1, "", "root_id"], [57, 2, 1, "", "scroll_batch_size"], [57, 2, 1, "", "serialize_config"]], "docarray.array.queryset": [[59, 0, 0, "-", "lookup"], [60, 0, 0, "-", "parser"]], "docarray.array.queryset.lookup": [[59, 1, 1, "", "LookupLeaf"], [59, 1, 1, "", "LookupNode"], [59, 1, 1, "", "LookupTreeElem"], [59, 6, 1, "", "LookupyError"], [59, 2, 1, "", "Q"], [59, 5, 1, "", "dunder_partition"], [59, 5, 1, "", "guard_Q"], [59, 5, 1, "", "guard_iter"], [59, 5, 1, "", "guard_list"], [59, 5, 1, "", "guard_str"], [59, 5, 1, "", "guard_type"], [59, 5, 1, "", "iff"], [59, 5, 1, "", "iff_not_none"], [59, 5, 1, "", "lookup"]], "docarray.array.queryset.lookup.LookupLeaf": [[59, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupNode": [[59, 3, 1, "", "add_child"], [59, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupTreeElem": [[59, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupyError": [[59, 2, 1, "", "args"], [59, 3, 1, "", "with_traceback"]], "docarray.array.queryset.parser": [[60, 1, 1, "", "QueryParser"]], "docarray.array.queryset.parser.QueryParser": [[60, 3, 1, "", "evaluate"]], "docarray.array.redis": [[61, 1, 1, "", "DocumentArrayRedis"], [61, 1, 1, "", "RedisConfig"]], "docarray.array.redis.DocumentArrayRedis": [[61, 2, 1, "", "TYPE_MAP"], [61, 3, 1, "", "append"], [61, 3, 1, "", "apply"], [61, 3, 1, "", "apply_batch"], [61, 3, 1, "", "batch"], [61, 3, 1, "", "batch_ids"], [61, 4, 1, "", "blobs"], [61, 3, 1, "", "clear"], [61, 3, 1, "", "cloud_delete"], [61, 3, 1, "", "cloud_list"], [61, 3, 1, "", "cloud_pull"], [61, 3, 1, "", "cloud_push"], [61, 4, 1, "", "contents"], [61, 3, 1, "", "count"], [61, 3, 1, "", "dataloader"], [61, 3, 1, "", "embed"], [61, 3, 1, "", "embed_and_evaluate"], [61, 4, 1, "", "embeddings"], [61, 3, 1, "", "empty"], [61, 3, 1, "", "evaluate"], [61, 3, 1, "", "extend"], [61, 3, 1, "", "find"], [61, 3, 1, "", "flatten"], [61, 3, 1, "", "from_base64"], [61, 3, 1, "", "from_bytes"], [61, 3, 1, "", "from_csv"], [61, 3, 1, "", "from_dataframe"], [61, 3, 1, "", "from_dict"], [61, 3, 1, "", "from_files"], [61, 3, 1, "", "from_huggingface_datasets"], [61, 3, 1, "", "from_json"], [61, 3, 1, "", "from_lines"], [61, 3, 1, "", "from_list"], [61, 3, 1, "", "from_ndarray"], [61, 3, 1, "", "from_ndjson"], [61, 3, 1, "", "from_protobuf"], [61, 3, 1, "", "from_pydantic_model"], [61, 3, 1, "", "from_strawberry_type"], [61, 3, 1, "", "get_json_schema"], [61, 3, 1, "", "get_vocabulary"], [61, 3, 1, "", "index"], [61, 3, 1, "", "insert"], [61, 3, 1, "", "load"], [61, 3, 1, "", "load_binary"], [61, 3, 1, "", "load_csv"], [61, 3, 1, "", "load_json"], [61, 3, 1, "", "map"], [61, 3, 1, "", "map_batch"], [61, 3, 1, "", "match"], [61, 3, 1, "", "plot_embeddings"], [61, 3, 1, "", "plot_image_sprites"], [61, 3, 1, "", "pop"], [61, 3, 1, "", "post"], [61, 3, 1, "", "pull"], [61, 3, 1, "", "push"], [61, 3, 1, "", "reduce"], [61, 3, 1, "", "reduce_all"], [61, 3, 1, "", "remove"], [61, 3, 1, "", "reverse"], [61, 3, 1, "", "sample"], [61, 3, 1, "", "save"], [61, 3, 1, "", "save_binary"], [61, 3, 1, "", "save_csv"], [61, 3, 1, "", "save_embeddings_csv"], [61, 3, 1, "", "save_gif"], [61, 3, 1, "", "save_json"], [61, 3, 1, "", "shuffle"], [61, 3, 1, "", "split_by_tag"], [61, 3, 1, "", "summary"], [61, 3, 1, "", "sync"], [61, 4, 1, "", "tensors"], [61, 4, 1, "", "texts"], [61, 3, 1, "", "to_base64"], [61, 3, 1, "", "to_bytes"], [61, 3, 1, "", "to_dataframe"], [61, 3, 1, "", "to_dict"], [61, 3, 1, "", "to_json"], [61, 3, 1, "", "to_list"], [61, 3, 1, "", "to_protobuf"], [61, 3, 1, "", "to_pydantic_model"], [61, 3, 1, "", "to_strawberry_type"], [61, 3, 1, "", "traverse"], [61, 3, 1, "", "traverse_flat"], [61, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.redis.RedisConfig": [[61, 2, 1, "", "batch_size"], [61, 2, 1, "", "block_size"], [61, 2, 1, "", "columns"], [61, 2, 1, "", "distance"], [61, 2, 1, "", "ef_construction"], [61, 2, 1, "", "ef_runtime"], [61, 2, 1, "", "host"], [61, 2, 1, "", "index_name"], [61, 2, 1, "", "index_text"], [61, 2, 1, "", "initial_cap"], [61, 2, 1, "", "language"], [61, 2, 1, "", "list_like"], [61, 2, 1, "", "m"], [61, 2, 1, "", "method"], [61, 2, 1, "", "n_dim"], [61, 2, 1, "", "port"], [61, 2, 1, "", "redis_config"], [61, 2, 1, "", "root_id"], [61, 2, 1, "", "tag_indices"], [61, 2, 1, "", "update_schema"]], "docarray.array.sqlite": [[62, 1, 1, "", "DocumentArraySqlite"], [62, 1, 1, "", "SqliteConfig"]], "docarray.array.sqlite.DocumentArraySqlite": [[62, 2, 1, "", "TYPE_MAP"], [62, 3, 1, "", "append"], [62, 3, 1, "", "apply"], [62, 3, 1, "", "apply_batch"], [62, 3, 1, "", "batch"], [62, 3, 1, "", "batch_ids"], [62, 4, 1, "", "blobs"], [62, 3, 1, "", "clear"], [62, 3, 1, "", "cloud_delete"], [62, 3, 1, "", "cloud_list"], [62, 3, 1, "", "cloud_pull"], [62, 3, 1, "", "cloud_push"], [62, 4, 1, "", "contents"], [62, 3, 1, "", "count"], [62, 3, 1, "", "dataloader"], [62, 3, 1, "", "embed"], [62, 3, 1, "", "embed_and_evaluate"], [62, 4, 1, "", "embeddings"], [62, 3, 1, "", "empty"], [62, 3, 1, "", "evaluate"], [62, 3, 1, "", "extend"], [62, 3, 1, "", "find"], [62, 3, 1, "", "flatten"], [62, 3, 1, "", "from_base64"], [62, 3, 1, "", "from_bytes"], [62, 3, 1, "", "from_csv"], [62, 3, 1, "", "from_dataframe"], [62, 3, 1, "", "from_dict"], [62, 3, 1, "", "from_files"], [62, 3, 1, "", "from_huggingface_datasets"], [62, 3, 1, "", "from_json"], [62, 3, 1, "", "from_lines"], [62, 3, 1, "", "from_list"], [62, 3, 1, "", "from_ndarray"], [62, 3, 1, "", "from_ndjson"], [62, 3, 1, "", "from_protobuf"], [62, 3, 1, "", "from_pydantic_model"], [62, 3, 1, "", "from_strawberry_type"], [62, 3, 1, "", "get_json_schema"], [62, 3, 1, "", "get_vocabulary"], [62, 3, 1, "", "index"], [62, 3, 1, "", "insert"], [62, 3, 1, "", "load"], [62, 3, 1, "", "load_binary"], [62, 3, 1, "", "load_csv"], [62, 3, 1, "", "load_json"], [62, 3, 1, "", "map"], [62, 3, 1, "", "map_batch"], [62, 3, 1, "", "match"], [62, 3, 1, "", "plot_embeddings"], [62, 3, 1, "", "plot_image_sprites"], [62, 3, 1, "", "pop"], [62, 3, 1, "", "post"], [62, 3, 1, "", "pull"], [62, 3, 1, "", "push"], [62, 3, 1, "", "reduce"], [62, 3, 1, "", "reduce_all"], [62, 3, 1, "", "remove"], [62, 3, 1, "", "reverse"], [62, 3, 1, "", "sample"], [62, 3, 1, "", "save"], [62, 3, 1, "", "save_binary"], [62, 3, 1, "", "save_csv"], [62, 3, 1, "", "save_embeddings_csv"], [62, 3, 1, "", "save_gif"], [62, 3, 1, "", "save_json"], [62, 2, 1, "", "schema_version"], [62, 3, 1, "", "shuffle"], [62, 3, 1, "", "split_by_tag"], [62, 3, 1, "", "summary"], [62, 3, 1, "", "sync"], [62, 4, 1, "", "tensors"], [62, 4, 1, "", "texts"], [62, 3, 1, "", "to_base64"], [62, 3, 1, "", "to_bytes"], [62, 3, 1, "", "to_dataframe"], [62, 3, 1, "", "to_dict"], [62, 3, 1, "", "to_json"], [62, 3, 1, "", "to_list"], [62, 3, 1, "", "to_protobuf"], [62, 3, 1, "", "to_pydantic_model"], [62, 3, 1, "", "to_strawberry_type"], [62, 3, 1, "", "traverse"], [62, 3, 1, "", "traverse_flat"], [62, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.sqlite.SqliteConfig": [[62, 2, 1, "", "conn_config"], [62, 2, 1, "", "connection"], [62, 2, 1, "", "journal_mode"], [62, 2, 1, "", "list_like"], [62, 2, 1, "", "root_id"], [62, 2, 1, "", "serialize_config"], [62, 2, 1, "", "synchronous"], [62, 2, 1, "", "table_name"]], "docarray.array.storage": [[64, 0, 0, "-", "annlite"], [70, 0, 0, "-", "base"], [75, 0, 0, "-", "elastic"], [80, 0, 0, "-", "memory"], [90, 0, 0, "-", "opensearch"], [95, 0, 0, "-", "qdrant"], [101, 0, 0, "-", "redis"], [106, 0, 0, "-", "registry"], [107, 0, 0, "-", "sqlite"], [112, 0, 0, "-", "weaviate"]], "docarray.array.storage.annlite": [[64, 1, 1, "", "AnnliteConfig"], [64, 1, 1, "", "StorageMixins"], [65, 0, 0, "-", "backend"], [66, 0, 0, "-", "find"], [67, 0, 0, "-", "getsetdel"], [68, 0, 0, "-", "helper"], [69, 0, 0, "-", "seqlike"]], "docarray.array.storage.annlite.AnnliteConfig": [[64, 2, 1, "", "columns"], [64, 2, 1, "", "data_path"], [64, 2, 1, "", "ef_construction"], [64, 2, 1, "", "ef_search"], [64, 2, 1, "", "list_like"], [64, 2, 1, "", "max_connection"], [64, 2, 1, "", "metric"], [64, 2, 1, "", "n_components"], [64, 2, 1, "", "n_dim"], [64, 2, 1, "", "root_id"], [64, 2, 1, "", "serialize_config"]], "docarray.array.storage.annlite.StorageMixins": [[64, 2, 1, "", "TYPE_MAP"], [64, 3, 1, "", "append"], [64, 3, 1, "", "clear"], [64, 3, 1, "", "count"], [64, 3, 1, "", "extend"], [64, 3, 1, "", "index"], [64, 3, 1, "", "insert"], [64, 3, 1, "", "pop"], [64, 3, 1, "", "remove"], [64, 3, 1, "", "reverse"], [64, 3, 1, "", "sync"]], "docarray.array.storage.annlite.backend": [[65, 1, 1, "", "AnnliteConfig"], [65, 1, 1, "", "BackendMixin"]], "docarray.array.storage.annlite.backend.AnnliteConfig": [[65, 2, 1, "", "columns"], [65, 2, 1, "", "data_path"], [65, 2, 1, "", "ef_construction"], [65, 2, 1, "", "ef_search"], [65, 2, 1, "", "list_like"], [65, 2, 1, "", "max_connection"], [65, 2, 1, "", "metric"], [65, 2, 1, "", "n_components"], [65, 2, 1, "", "n_dim"], [65, 2, 1, "", "root_id"], [65, 2, 1, "", "serialize_config"]], "docarray.array.storage.annlite.backend.BackendMixin": [[65, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.annlite.find": [[66, 1, 1, "", "FindMixin"]], "docarray.array.storage.annlite.getsetdel": [[67, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.annlite.getsetdel.GetSetDelMixin": [[67, 3, 1, "", "sync"]], "docarray.array.storage.annlite.helper": [[68, 1, 1, "", "OffsetMapping"]], "docarray.array.storage.annlite.helper.OffsetMapping": [[68, 3, 1, "", "clear"], [68, 3, 1, "", "close"], [68, 3, 1, "", "commit"], [68, 3, 1, "", "create_table"], [68, 3, 1, "", "del_at_offset"], [68, 3, 1, "", "del_at_offsets"], [68, 3, 1, "", "drop"], [68, 3, 1, "", "drop_table"], [68, 3, 1, "", "dump"], [68, 3, 1, "", "execute"], [68, 3, 1, "", "execute_many"], [68, 3, 1, "", "extend_doc_ids"], [68, 3, 1, "", "get_all_ids"], [68, 3, 1, "", "get_id_by_offset"], [68, 3, 1, "", "get_ids_by_offsets"], [68, 3, 1, "", "get_offset_by_id"], [68, 3, 1, "", "get_offsets_by_ids"], [68, 3, 1, "", "insert_at_offset"], [68, 3, 1, "", "load"], [68, 4, 1, "", "name"], [68, 4, 1, "", "schema"], [68, 3, 1, "", "set_at_offset"], [68, 3, 1, "", "shift_offset"], [68, 4, 1, "", "size"]], "docarray.array.storage.annlite.seqlike": [[69, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.annlite.seqlike.SequenceLikeMixin": [[69, 3, 1, "", "append"], [69, 3, 1, "", "clear"], [69, 3, 1, "", "count"], [69, 3, 1, "", "extend"], [69, 3, 1, "", "index"], [69, 3, 1, "", "insert"], [69, 3, 1, "", "pop"], [69, 3, 1, "", "remove"], [69, 3, 1, "", "reverse"]], "docarray.array.storage.base": [[71, 0, 0, "-", "backend"], [72, 0, 0, "-", "getsetdel"], [73, 0, 0, "-", "helper"], [74, 0, 0, "-", "seqlike"]], "docarray.array.storage.base.backend": [[71, 1, 1, "", "BaseBackendMixin"], [71, 1, 1, "", "TypeMap"]], "docarray.array.storage.base.backend.BaseBackendMixin": [[71, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.base.backend.TypeMap": [[71, 4, 1, "", "converter"], [71, 3, 1, "", "count"], [71, 3, 1, "", "index"], [71, 4, 1, "", "type"]], "docarray.array.storage.base.getsetdel": [[72, 1, 1, "", "BaseGetSetDelMixin"]], "docarray.array.storage.base.getsetdel.BaseGetSetDelMixin": [[72, 3, 1, "", "sync"]], "docarray.array.storage.base.helper": [[73, 1, 1, "", "Offset2ID"]], "docarray.array.storage.base.helper.Offset2ID": [[73, 3, 1, "", "append"], [73, 3, 1, "", "clear"], [73, 3, 1, "", "delete_by_id"], [73, 3, 1, "", "delete_by_ids"], [73, 3, 1, "", "delete_by_offset"], [73, 3, 1, "", "extend"], [73, 3, 1, "", "get_id"], [73, 3, 1, "", "index"], [73, 3, 1, "", "insert"], [73, 3, 1, "", "load"], [73, 3, 1, "", "save"], [73, 3, 1, "", "update"], [73, 3, 1, "", "update_ids"]], "docarray.array.storage.base.seqlike": [[74, 1, 1, "", "BaseSequenceLikeMixin"]], "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin": [[74, 3, 1, "", "append"], [74, 3, 1, "", "clear"], [74, 3, 1, "", "count"], [74, 3, 1, "", "extend"], [74, 3, 1, "", "index"], [74, 3, 1, "", "insert"], [74, 3, 1, "", "pop"], [74, 3, 1, "", "remove"], [74, 3, 1, "", "reverse"]], "docarray.array.storage.elastic": [[75, 1, 1, "", "ElasticConfig"], [75, 1, 1, "", "StorageMixins"], [76, 0, 0, "-", "backend"], [77, 0, 0, "-", "find"], [78, 0, 0, "-", "getsetdel"], [79, 0, 0, "-", "seqlike"]], "docarray.array.storage.elastic.ElasticConfig": [[75, 2, 1, "", "batch_size"], [75, 2, 1, "", "columns"], [75, 2, 1, "", "distance"], [75, 2, 1, "", "ef_construction"], [75, 2, 1, "", "es_config"], [75, 2, 1, "", "hosts"], [75, 2, 1, "", "index_name"], [75, 2, 1, "", "index_text"], [75, 2, 1, "", "list_like"], [75, 2, 1, "", "m"], [75, 2, 1, "", "n_dim"], [75, 2, 1, "", "root_id"], [75, 2, 1, "", "tag_indices"]], "docarray.array.storage.elastic.StorageMixins": [[75, 2, 1, "", "MAX_ES_RETURNED_DOCS"], [75, 2, 1, "", "TYPE_MAP"], [75, 3, 1, "", "append"], [75, 3, 1, "", "clear"], [75, 3, 1, "", "count"], [75, 3, 1, "", "extend"], [75, 3, 1, "", "find"], [75, 3, 1, "", "index"], [75, 3, 1, "", "insert"], [75, 3, 1, "", "pop"], [75, 3, 1, "", "remove"], [75, 3, 1, "", "reverse"], [75, 3, 1, "", "sync"]], "docarray.array.storage.elastic.backend": [[76, 1, 1, "", "BackendMixin"], [76, 1, 1, "", "ElasticConfig"]], "docarray.array.storage.elastic.backend.BackendMixin": [[76, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.elastic.backend.ElasticConfig": [[76, 2, 1, "", "batch_size"], [76, 2, 1, "", "columns"], [76, 2, 1, "", "distance"], [76, 2, 1, "", "ef_construction"], [76, 2, 1, "", "es_config"], [76, 2, 1, "", "hosts"], [76, 2, 1, "", "index_name"], [76, 2, 1, "", "index_text"], [76, 2, 1, "", "list_like"], [76, 2, 1, "", "m"], [76, 2, 1, "", "n_dim"], [76, 2, 1, "", "root_id"], [76, 2, 1, "", "tag_indices"]], "docarray.array.storage.elastic.find": [[77, 1, 1, "", "FindMixin"]], "docarray.array.storage.elastic.find.FindMixin": [[77, 3, 1, "", "find"]], "docarray.array.storage.elastic.getsetdel": [[78, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.elastic.getsetdel.GetSetDelMixin": [[78, 2, 1, "", "MAX_ES_RETURNED_DOCS"], [78, 3, 1, "", "sync"]], "docarray.array.storage.elastic.seqlike": [[79, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.elastic.seqlike.SequenceLikeMixin": [[79, 3, 1, "", "append"], [79, 3, 1, "", "clear"], [79, 3, 1, "", "count"], [79, 3, 1, "", "extend"], [79, 3, 1, "", "index"], [79, 3, 1, "", "insert"], [79, 3, 1, "", "pop"], [79, 3, 1, "", "remove"], [79, 3, 1, "", "reverse"]], "docarray.array.storage.memory": [[80, 1, 1, "", "StorageMixins"], [81, 0, 0, "-", "backend"], [82, 0, 0, "-", "find"], [83, 0, 0, "-", "getsetdel"], [84, 0, 0, "-", "seqlike"]], "docarray.array.storage.memory.StorageMixins": [[80, 2, 1, "", "TYPE_MAP"], [80, 3, 1, "", "append"], [80, 3, 1, "", "clear"], [80, 3, 1, "", "count"], [80, 3, 1, "", "extend"], [80, 3, 1, "", "index"], [80, 3, 1, "", "insert"], [80, 3, 1, "", "pop"], [80, 3, 1, "", "remove"], [80, 3, 1, "", "reverse"], [80, 3, 1, "", "sync"]], "docarray.array.storage.memory.backend": [[81, 1, 1, "", "BackendMixin"], [81, 5, 1, "", "needs_id2offset_rebuild"]], "docarray.array.storage.memory.backend.BackendMixin": [[81, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.memory.find": [[82, 1, 1, "", "FindMixin"]], "docarray.array.storage.memory.getsetdel": [[83, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.memory.getsetdel.GetSetDelMixin": [[83, 3, 1, "", "sync"]], "docarray.array.storage.memory.seqlike": [[84, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.memory.seqlike.SequenceLikeMixin": [[84, 3, 1, "", "append"], [84, 3, 1, "", "clear"], [84, 3, 1, "", "count"], [84, 3, 1, "", "extend"], [84, 3, 1, "", "index"], [84, 3, 1, "", "insert"], [84, 3, 1, "", "pop"], [84, 3, 1, "", "remove"], [84, 3, 1, "", "reverse"]], "docarray.array.storage.opensearch": [[90, 1, 1, "", "OpenSearchConfig"], [90, 1, 1, "", "StorageMixins"], [91, 0, 0, "-", "backend"], [92, 0, 0, "-", "find"], [93, 0, 0, "-", "getsetdel"], [94, 0, 0, "-", "seqlike"]], "docarray.array.storage.opensearch.OpenSearchConfig": [[90, 2, 1, "", "algorithm"], [90, 2, 1, "", "batch_size"], [90, 2, 1, "", "columns"], [90, 2, 1, "", "distance"], [90, 2, 1, "", "ef_construction"], [90, 2, 1, "", "ef_search"], [90, 2, 1, "", "encoder"], [90, 2, 1, "", "engine"], [90, 2, 1, "", "hosts"], [90, 2, 1, "", "index_name"], [90, 2, 1, "", "index_text"], [90, 2, 1, "", "list_like"], [90, 2, 1, "", "m"], [90, 2, 1, "", "n_dim"], [90, 2, 1, "", "opensearch_config"], [90, 2, 1, "", "root_id"], [90, 2, 1, "", "tag_indices"]], "docarray.array.storage.opensearch.StorageMixins": [[90, 2, 1, "", "MAX_OPENSEARCH_RETURNED_DOCS"], [90, 2, 1, "", "TYPE_MAP"], [90, 3, 1, "", "append"], [90, 3, 1, "", "clear"], [90, 3, 1, "", "count"], [90, 3, 1, "", "extend"], [90, 3, 1, "", "find"], [90, 3, 1, "", "index"], [90, 3, 1, "", "insert"], [90, 3, 1, "", "pop"], [90, 3, 1, "", "remove"], [90, 3, 1, "", "reverse"], [90, 3, 1, "", "sync"]], "docarray.array.storage.opensearch.backend": [[91, 1, 1, "", "BackendMixin"], [91, 1, 1, "", "OpenSearchConfig"]], "docarray.array.storage.opensearch.backend.BackendMixin": [[91, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.opensearch.backend.OpenSearchConfig": [[91, 2, 1, "", "algorithm"], [91, 2, 1, "", "batch_size"], [91, 2, 1, "", "columns"], [91, 2, 1, "", "distance"], [91, 2, 1, "", "ef_construction"], [91, 2, 1, "", "ef_search"], [91, 2, 1, "", "encoder"], [91, 2, 1, "", "engine"], [91, 2, 1, "", "hosts"], [91, 2, 1, "", "index_name"], [91, 2, 1, "", "index_text"], [91, 2, 1, "", "list_like"], [91, 2, 1, "", "m"], [91, 2, 1, "", "n_dim"], [91, 2, 1, "", "opensearch_config"], [91, 2, 1, "", "root_id"], [91, 2, 1, "", "tag_indices"]], "docarray.array.storage.opensearch.find": [[92, 1, 1, "", "FindMixin"]], "docarray.array.storage.opensearch.find.FindMixin": [[92, 3, 1, "", "find"]], "docarray.array.storage.opensearch.getsetdel": [[93, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.opensearch.getsetdel.GetSetDelMixin": [[93, 2, 1, "", "MAX_OPENSEARCH_RETURNED_DOCS"], [93, 3, 1, "", "sync"]], "docarray.array.storage.opensearch.seqlike": [[94, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.opensearch.seqlike.SequenceLikeMixin": [[94, 3, 1, "", "append"], [94, 3, 1, "", "clear"], [94, 3, 1, "", "count"], [94, 3, 1, "", "extend"], [94, 3, 1, "", "index"], [94, 3, 1, "", "insert"], [94, 3, 1, "", "pop"], [94, 3, 1, "", "remove"], [94, 3, 1, "", "reverse"]], "docarray.array.storage.qdrant": [[95, 1, 1, "", "QdrantConfig"], [95, 1, 1, "", "StorageMixins"], [96, 0, 0, "-", "backend"], [97, 0, 0, "-", "find"], [98, 0, 0, "-", "getsetdel"], [99, 0, 0, "-", "helper"], [100, 0, 0, "-", "seqlike"]], "docarray.array.storage.qdrant.QdrantConfig": [[95, 2, 1, "", "api_key"], [95, 2, 1, "", "collection_name"], [95, 2, 1, "", "columns"], [95, 2, 1, "", "distance"], [95, 2, 1, "", "ef_construct"], [95, 2, 1, "", "full_scan_threshold"], [95, 2, 1, "", "grpc_port"], [95, 2, 1, "", "host"], [95, 2, 1, "", "https"], [95, 2, 1, "", "list_like"], [95, 2, 1, "", "m"], [95, 2, 1, "", "n_dim"], [95, 2, 1, "", "port"], [95, 2, 1, "", "prefer_grpc"], [95, 2, 1, "", "root_id"], [95, 2, 1, "", "scroll_batch_size"], [95, 2, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.StorageMixins": [[95, 2, 1, "", "TYPE_MAP"], [95, 3, 1, "", "append"], [95, 3, 1, "", "clear"], [95, 4, 1, "", "client"], [95, 4, 1, "", "collection_name"], [95, 4, 1, "", "collection_name_meta"], [95, 4, 1, "", "config"], [95, 3, 1, "", "count"], [95, 4, 1, "", "distance"], [95, 3, 1, "", "extend"], [95, 3, 1, "", "index"], [95, 3, 1, "", "insert"], [95, 4, 1, "", "n_dim"], [95, 3, 1, "", "pop"], [95, 3, 1, "", "remove"], [95, 3, 1, "", "reverse"], [95, 3, 1, "", "scan"], [95, 4, 1, "", "scroll_batch_size"], [95, 4, 1, "", "serialization_config"], [95, 4, 1, "", "serialize_config"], [95, 3, 1, "", "sync"]], "docarray.array.storage.qdrant.backend": [[96, 1, 1, "", "BackendMixin"], [96, 1, 1, "", "QdrantConfig"]], "docarray.array.storage.qdrant.backend.BackendMixin": [[96, 2, 1, "", "TYPE_MAP"], [96, 4, 1, "", "client"], [96, 4, 1, "", "collection_name"], [96, 4, 1, "", "distance"]], "docarray.array.storage.qdrant.backend.QdrantConfig": [[96, 2, 1, "", "api_key"], [96, 2, 1, "", "collection_name"], [96, 2, 1, "", "columns"], [96, 2, 1, "", "distance"], [96, 2, 1, "", "ef_construct"], [96, 2, 1, "", "full_scan_threshold"], [96, 2, 1, "", "grpc_port"], [96, 2, 1, "", "host"], [96, 2, 1, "", "https"], [96, 2, 1, "", "list_like"], [96, 2, 1, "", "m"], [96, 2, 1, "", "n_dim"], [96, 2, 1, "", "port"], [96, 2, 1, "", "prefer_grpc"], [96, 2, 1, "", "root_id"], [96, 2, 1, "", "scroll_batch_size"], [96, 2, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.find": [[97, 1, 1, "", "FindMixin"]], "docarray.array.storage.qdrant.find.FindMixin": [[97, 4, 1, "", "client"], [97, 4, 1, "", "collection_name"], [97, 4, 1, "", "distance"], [97, 4, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.getsetdel": [[98, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin": [[98, 4, 1, "", "client"], [98, 4, 1, "", "collection_name"], [98, 4, 1, "", "n_dim"], [98, 3, 1, "", "scan"], [98, 4, 1, "", "scroll_batch_size"], [98, 4, 1, "", "serialization_config"], [98, 3, 1, "", "sync"]], "docarray.array.storage.qdrant.seqlike": [[100, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin": [[100, 3, 1, "", "append"], [100, 3, 1, "", "clear"], [100, 4, 1, "", "client"], [100, 4, 1, "", "collection_name"], [100, 4, 1, "", "config"], [100, 3, 1, "", "count"], [100, 3, 1, "", "extend"], [100, 3, 1, "", "index"], [100, 3, 1, "", "insert"], [100, 3, 1, "", "pop"], [100, 3, 1, "", "remove"], [100, 3, 1, "", "reverse"]], "docarray.array.storage.redis": [[101, 1, 1, "", "RedisConfig"], [101, 1, 1, "", "StorageMixins"], [102, 0, 0, "-", "backend"], [103, 0, 0, "-", "find"], [104, 0, 0, "-", "getsetdel"], [105, 0, 0, "-", "seqlike"]], "docarray.array.storage.redis.RedisConfig": [[101, 2, 1, "", "batch_size"], [101, 2, 1, "", "block_size"], [101, 2, 1, "", "columns"], [101, 2, 1, "", "distance"], [101, 2, 1, "", "ef_construction"], [101, 2, 1, "", "ef_runtime"], [101, 2, 1, "", "host"], [101, 2, 1, "", "index_name"], [101, 2, 1, "", "index_text"], [101, 2, 1, "", "initial_cap"], [101, 2, 1, "", "language"], [101, 2, 1, "", "list_like"], [101, 2, 1, "", "m"], [101, 2, 1, "", "method"], [101, 2, 1, "", "n_dim"], [101, 2, 1, "", "port"], [101, 2, 1, "", "redis_config"], [101, 2, 1, "", "root_id"], [101, 2, 1, "", "tag_indices"], [101, 2, 1, "", "update_schema"]], "docarray.array.storage.redis.StorageMixins": [[101, 2, 1, "", "TYPE_MAP"], [101, 3, 1, "", "append"], [101, 3, 1, "", "clear"], [101, 3, 1, "", "count"], [101, 3, 1, "", "extend"], [101, 3, 1, "", "find"], [101, 3, 1, "", "index"], [101, 3, 1, "", "insert"], [101, 3, 1, "", "pop"], [101, 3, 1, "", "remove"], [101, 3, 1, "", "reverse"], [101, 3, 1, "", "sync"]], "docarray.array.storage.redis.backend": [[102, 1, 1, "", "BackendMixin"], [102, 1, 1, "", "RedisConfig"]], "docarray.array.storage.redis.backend.BackendMixin": [[102, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.redis.backend.RedisConfig": [[102, 2, 1, "", "batch_size"], [102, 2, 1, "", "block_size"], [102, 2, 1, "", "columns"], [102, 2, 1, "", "distance"], [102, 2, 1, "", "ef_construction"], [102, 2, 1, "", "ef_runtime"], [102, 2, 1, "", "host"], [102, 2, 1, "", "index_name"], [102, 2, 1, "", "index_text"], [102, 2, 1, "", "initial_cap"], [102, 2, 1, "", "language"], [102, 2, 1, "", "list_like"], [102, 2, 1, "", "m"], [102, 2, 1, "", "method"], [102, 2, 1, "", "n_dim"], [102, 2, 1, "", "port"], [102, 2, 1, "", "redis_config"], [102, 2, 1, "", "root_id"], [102, 2, 1, "", "tag_indices"], [102, 2, 1, "", "update_schema"]], "docarray.array.storage.redis.find": [[103, 1, 1, "", "FindMixin"]], "docarray.array.storage.redis.find.FindMixin": [[103, 3, 1, "", "find"]], "docarray.array.storage.redis.getsetdel": [[104, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.redis.getsetdel.GetSetDelMixin": [[104, 3, 1, "", "sync"]], "docarray.array.storage.redis.seqlike": [[105, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.redis.seqlike.SequenceLikeMixin": [[105, 3, 1, "", "append"], [105, 3, 1, "", "clear"], [105, 3, 1, "", "count"], [105, 3, 1, "", "extend"], [105, 3, 1, "", "index"], [105, 3, 1, "", "insert"], [105, 3, 1, "", "pop"], [105, 3, 1, "", "remove"], [105, 3, 1, "", "reverse"]], "docarray.array.storage.sqlite": [[107, 1, 1, "", "SqliteConfig"], [107, 1, 1, "", "StorageMixins"], [108, 0, 0, "-", "backend"], [109, 0, 0, "-", "getsetdel"], [110, 0, 0, "-", "helper"], [111, 0, 0, "-", "seqlike"]], "docarray.array.storage.sqlite.SqliteConfig": [[107, 2, 1, "", "conn_config"], [107, 2, 1, "", "connection"], [107, 2, 1, "", "journal_mode"], [107, 2, 1, "", "list_like"], [107, 2, 1, "", "root_id"], [107, 2, 1, "", "serialize_config"], [107, 2, 1, "", "synchronous"], [107, 2, 1, "", "table_name"]], "docarray.array.storage.sqlite.StorageMixins": [[107, 2, 1, "", "TYPE_MAP"], [107, 3, 1, "", "append"], [107, 3, 1, "", "clear"], [107, 3, 1, "", "count"], [107, 3, 1, "", "extend"], [107, 3, 1, "", "index"], [107, 3, 1, "", "insert"], [107, 3, 1, "", "pop"], [107, 3, 1, "", "remove"], [107, 3, 1, "", "reverse"], [107, 2, 1, "", "schema_version"], [107, 3, 1, "", "sync"]], "docarray.array.storage.sqlite.backend": [[108, 1, 1, "", "BackendMixin"], [108, 1, 1, "", "SqliteConfig"]], "docarray.array.storage.sqlite.backend.BackendMixin": [[108, 2, 1, "", "TYPE_MAP"], [108, 2, 1, "", "schema_version"]], "docarray.array.storage.sqlite.backend.SqliteConfig": [[108, 2, 1, "", "conn_config"], [108, 2, 1, "", "connection"], [108, 2, 1, "", "journal_mode"], [108, 2, 1, "", "list_like"], [108, 2, 1, "", "root_id"], [108, 2, 1, "", "serialize_config"], [108, 2, 1, "", "synchronous"], [108, 2, 1, "", "table_name"]], "docarray.array.storage.sqlite.getsetdel": [[109, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.sqlite.getsetdel.GetSetDelMixin": [[109, 3, 1, "", "sync"]], "docarray.array.storage.sqlite.helper": [[110, 5, 1, "", "initialize_table"]], "docarray.array.storage.sqlite.seqlike": [[111, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin": [[111, 3, 1, "", "append"], [111, 3, 1, "", "clear"], [111, 3, 1, "", "count"], [111, 3, 1, "", "extend"], [111, 3, 1, "", "index"], [111, 3, 1, "", "insert"], [111, 3, 1, "", "pop"], [111, 3, 1, "", "remove"], [111, 3, 1, "", "reverse"]], "docarray.array.storage.weaviate": [[112, 1, 1, "", "StorageMixins"], [112, 1, 1, "", "WeaviateConfig"], [113, 0, 0, "-", "backend"], [114, 0, 0, "-", "find"], [115, 0, 0, "-", "getsetdel"], [116, 0, 0, "-", "seqlike"]], "docarray.array.storage.weaviate.StorageMixins": [[112, 2, 1, "", "TYPE_MAP"], [112, 3, 1, "", "append"], [112, 3, 1, "", "clear"], [112, 3, 1, "", "count"], [112, 3, 1, "", "extend"], [112, 3, 1, "", "index"], [112, 3, 1, "", "insert"], [112, 4, 1, "", "name"], [112, 3, 1, "", "pop"], [112, 3, 1, "", "remove"], [112, 3, 1, "", "reverse"], [112, 3, 1, "", "sync"]], "docarray.array.storage.weaviate.WeaviateConfig": [[112, 2, 1, "", "batch_size"], [112, 2, 1, "", "cleanup_interval_seconds"], [112, 2, 1, "", "columns"], [112, 2, 1, "", "distance"], [112, 2, 1, "", "dynamic_batching"], [112, 2, 1, "", "dynamic_ef_factor"], [112, 2, 1, "", "dynamic_ef_max"], [112, 2, 1, "", "dynamic_ef_min"], [112, 2, 1, "", "ef"], [112, 2, 1, "", "ef_construction"], [112, 2, 1, "", "flat_search_cutoff"], [112, 2, 1, "", "host"], [112, 2, 1, "", "list_like"], [112, 2, 1, "", "max_connections"], [112, 2, 1, "", "n_dim"], [112, 2, 1, "", "name"], [112, 2, 1, "", "port"], [112, 2, 1, "", "protocol"], [112, 2, 1, "", "root_id"], [112, 2, 1, "", "serialize_config"], [112, 2, 1, "", "skip"], [112, 2, 1, "", "timeout_config"], [112, 2, 1, "", "vector_cache_max_objects"]], "docarray.array.storage.weaviate.backend": [[113, 1, 1, "", "BackendMixin"], [113, 1, 1, "", "WeaviateConfig"]], "docarray.array.storage.weaviate.backend.BackendMixin": [[113, 2, 1, "", "TYPE_MAP"], [113, 4, 1, "", "name"]], "docarray.array.storage.weaviate.backend.WeaviateConfig": [[113, 2, 1, "", "batch_size"], [113, 2, 1, "", "cleanup_interval_seconds"], [113, 2, 1, "", "columns"], [113, 2, 1, "", "distance"], [113, 2, 1, "", "dynamic_batching"], [113, 2, 1, "", "dynamic_ef_factor"], [113, 2, 1, "", "dynamic_ef_max"], [113, 2, 1, "", "dynamic_ef_min"], [113, 2, 1, "", "ef"], [113, 2, 1, "", "ef_construction"], [113, 2, 1, "", "flat_search_cutoff"], [113, 2, 1, "", "host"], [113, 2, 1, "", "list_like"], [113, 2, 1, "", "max_connections"], [113, 2, 1, "", "n_dim"], [113, 2, 1, "", "name"], [113, 2, 1, "", "port"], [113, 2, 1, "", "protocol"], [113, 2, 1, "", "root_id"], [113, 2, 1, "", "serialize_config"], [113, 2, 1, "", "skip"], [113, 2, 1, "", "timeout_config"], [113, 2, 1, "", "vector_cache_max_objects"]], "docarray.array.storage.weaviate.find": [[114, 1, 1, "", "FindMixin"]], "docarray.array.storage.weaviate.getsetdel": [[115, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.weaviate.getsetdel.GetSetDelMixin": [[115, 3, 1, "", "sync"]], "docarray.array.storage.weaviate.seqlike": [[116, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin": [[116, 3, 1, "", "append"], [116, 3, 1, "", "clear"], [116, 3, 1, "", "count"], [116, 3, 1, "", "extend"], [116, 3, 1, "", "index"], [116, 3, 1, "", "insert"], [116, 3, 1, "", "pop"], [116, 3, 1, "", "remove"], [116, 3, 1, "", "reverse"]], "docarray.array.weaviate": [[117, 1, 1, "", "DocumentArrayWeaviate"], [117, 1, 1, "", "WeaviateConfig"]], "docarray.array.weaviate.DocumentArrayWeaviate": [[117, 2, 1, "", "TYPE_MAP"], [117, 3, 1, "", "append"], [117, 3, 1, "", "apply"], [117, 3, 1, "", "apply_batch"], [117, 3, 1, "", "batch"], [117, 3, 1, "", "batch_ids"], [117, 4, 1, "", "blobs"], [117, 3, 1, "", "clear"], [117, 3, 1, "", "cloud_delete"], [117, 3, 1, "", "cloud_list"], [117, 3, 1, "", "cloud_pull"], [117, 3, 1, "", "cloud_push"], [117, 4, 1, "", "contents"], [117, 3, 1, "", "count"], [117, 3, 1, "", "dataloader"], [117, 3, 1, "", "embed"], [117, 3, 1, "", "embed_and_evaluate"], [117, 4, 1, "", "embeddings"], [117, 3, 1, "", "empty"], [117, 3, 1, "", "evaluate"], [117, 3, 1, "", "extend"], [117, 3, 1, "", "find"], [117, 3, 1, "", "flatten"], [117, 3, 1, "", "from_base64"], [117, 3, 1, "", "from_bytes"], [117, 3, 1, "", "from_csv"], [117, 3, 1, "", "from_dataframe"], [117, 3, 1, "", "from_dict"], [117, 3, 1, "", "from_files"], [117, 3, 1, "", "from_huggingface_datasets"], [117, 3, 1, "", "from_json"], [117, 3, 1, "", "from_lines"], [117, 3, 1, "", "from_list"], [117, 3, 1, "", "from_ndarray"], [117, 3, 1, "", "from_ndjson"], [117, 3, 1, "", "from_protobuf"], [117, 3, 1, "", "from_pydantic_model"], [117, 3, 1, "", "from_strawberry_type"], [117, 3, 1, "", "get_json_schema"], [117, 3, 1, "", "get_vocabulary"], [117, 3, 1, "", "index"], [117, 3, 1, "", "insert"], [117, 3, 1, "", "load"], [117, 3, 1, "", "load_binary"], [117, 3, 1, "", "load_csv"], [117, 3, 1, "", "load_json"], [117, 3, 1, "", "map"], [117, 3, 1, "", "map_batch"], [117, 3, 1, "", "match"], [117, 4, 1, "", "name"], [117, 3, 1, "", "plot_embeddings"], [117, 3, 1, "", "plot_image_sprites"], [117, 3, 1, "", "pop"], [117, 3, 1, "", "post"], [117, 3, 1, "", "pull"], [117, 3, 1, "", "push"], [117, 3, 1, "", "reduce"], [117, 3, 1, "", "reduce_all"], [117, 3, 1, "", "remove"], [117, 3, 1, "", "reverse"], [117, 3, 1, "", "sample"], [117, 3, 1, "", "save"], [117, 3, 1, "", "save_binary"], [117, 3, 1, "", "save_csv"], [117, 3, 1, "", "save_embeddings_csv"], [117, 3, 1, "", "save_gif"], [117, 3, 1, "", "save_json"], [117, 3, 1, "", "shuffle"], [117, 3, 1, "", "split_by_tag"], [117, 3, 1, "", "summary"], [117, 3, 1, "", "sync"], [117, 4, 1, "", "tensors"], [117, 4, 1, "", "texts"], [117, 3, 1, "", "to_base64"], [117, 3, 1, "", "to_bytes"], [117, 3, 1, "", "to_dataframe"], [117, 3, 1, "", "to_dict"], [117, 3, 1, "", "to_json"], [117, 3, 1, "", "to_list"], [117, 3, 1, "", "to_protobuf"], [117, 3, 1, "", "to_pydantic_model"], [117, 3, 1, "", "to_strawberry_type"], [117, 3, 1, "", "traverse"], [117, 3, 1, "", "traverse_flat"], [117, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.weaviate.WeaviateConfig": [[117, 2, 1, "", "batch_size"], [117, 2, 1, "", "cleanup_interval_seconds"], [117, 2, 1, "", "columns"], [117, 2, 1, "", "distance"], [117, 2, 1, "", "dynamic_batching"], [117, 2, 1, "", "dynamic_ef_factor"], [117, 2, 1, "", "dynamic_ef_max"], [117, 2, 1, "", "dynamic_ef_min"], [117, 2, 1, "", "ef"], [117, 2, 1, "", "ef_construction"], [117, 2, 1, "", "flat_search_cutoff"], [117, 2, 1, "", "host"], [117, 2, 1, "", "list_like"], [117, 2, 1, "", "max_connections"], [117, 2, 1, "", "n_dim"], [117, 2, 1, "", "name"], [117, 2, 1, "", "port"], [117, 2, 1, "", "protocol"], [117, 2, 1, "", "root_id"], [117, 2, 1, "", "serialize_config"], [117, 2, 1, "", "skip"], [117, 2, 1, "", "timeout_config"], [117, 2, 1, "", "vector_cache_max_objects"]], "docarray.base": [[118, 1, 1, "", "BaseDCType"]], "docarray.base.BaseDCType": [[118, 3, 1, "", "clear"], [118, 3, 1, "", "copy_from"], [118, 4, 1, "", "nbytes"], [118, 4, 1, "", "non_empty_fields"], [118, 3, 1, "", "pop"]], "docarray.dataclasses": [[120, 0, 0, "-", "enums"], [121, 0, 0, "-", "getter"], [122, 0, 0, "-", "setter"], [123, 0, 0, "-", "types"]], "docarray.dataclasses.enums": [[120, 1, 1, "", "AttributeType"], [120, 1, 1, "", "DocumentMetadata"], [120, 1, 1, "", "ImageType"]], "docarray.dataclasses.enums.AttributeType": [[120, 2, 1, "", "DOCUMENT"], [120, 2, 1, "", "ITERABLE_DOCUMENT"], [120, 2, 1, "", "ITERABLE_NESTED"], [120, 2, 1, "", "ITERABLE_PRIMITIVE"], [120, 2, 1, "", "NESTED"], [120, 2, 1, "", "PRIMITIVE"]], "docarray.dataclasses.enums.DocumentMetadata": [[120, 2, 1, "", "AUDIO_TYPE"], [120, 2, 1, "", "BLOB_TYPE"], [120, 2, 1, "", "IMAGE_TYPE"], [120, 2, 1, "", "IMAGE_URI"], [120, 2, 1, "", "JSON_TYPE"], [120, 2, 1, "", "MESH_TYPE"], [120, 2, 1, "", "MULTI_MODAL_SCHEMA"], [120, 2, 1, "", "VIDEO_TYPE"]], "docarray.dataclasses.enums.ImageType": [[120, 2, 1, "", "NDARRAY"], [120, 2, 1, "", "PIL"], [120, 2, 1, "", "URI"]], "docarray.dataclasses.getter": [[121, 5, 1, "", "audio_getter"], [121, 5, 1, "", "blob_getter"], [121, 5, 1, "", "image_getter"], [121, 5, 1, "", "json_getter"], [121, 5, 1, "", "mesh_getter"], [121, 5, 1, "", "tabular_getter"], [121, 5, 1, "", "text_getter"], [121, 5, 1, "", "uri_getter"], [121, 5, 1, "", "video_getter"]], "docarray.dataclasses.setter": [[122, 5, 1, "", "audio_setter"], [122, 5, 1, "", "blob_setter"], [122, 5, 1, "", "image_setter"], [122, 5, 1, "", "json_setter"], [122, 5, 1, "", "mesh_setter"], [122, 5, 1, "", "tabular_setter"], [122, 5, 1, "", "text_setter"], [122, 5, 1, "", "uri_setter"], [122, 5, 1, "", "video_setter"]], "docarray.dataclasses.types": [[123, 5, 1, "", "dataclass"], [123, 5, 1, "", "field"], [123, 5, 1, "", "is_multimodal"]], "docarray.document": [[124, 1, 1, "", "Document"], [125, 0, 0, "-", "data"], [126, 0, 0, "-", "generators"], [127, 0, 0, "-", "mixins"], [149, 0, 0, "-", "pydantic_model"], [150, 0, 0, "-", "strawberry_type"]], "docarray.document.Document": [[124, 4, 1, "", "adjacency"], [124, 4, 1, "", "blob"], [124, 4, 1, "", "chunks"], [124, 3, 1, "", "clear"], [124, 4, 1, "", "content"], [124, 4, 1, "", "content_hash"], [124, 4, 1, "", "content_type"], [124, 3, 1, "", "convert_blob_to_datauri"], [124, 3, 1, "", "convert_blob_to_image_tensor"], [124, 3, 1, "", "convert_blob_to_tensor"], [124, 3, 1, "", "convert_content_to_datauri"], [124, 3, 1, "", "convert_image_tensor_to_blob"], [124, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [124, 3, 1, "", "convert_image_tensor_to_uri"], [124, 3, 1, "", "convert_tensor_to_blob"], [124, 3, 1, "", "convert_tensor_to_text"], [124, 3, 1, "", "convert_text_to_datauri"], [124, 3, 1, "", "convert_text_to_tensor"], [124, 3, 1, "", "convert_uri_to_datauri"], [124, 3, 1, "", "copy_from"], [124, 3, 1, "", "display"], [124, 3, 1, "", "display_point_cloud_tensor"], [124, 3, 1, "", "display_rgbd_tensor"], [124, 3, 1, "", "display_tensor"], [124, 3, 1, "", "display_uri"], [124, 3, 1, "", "display_vertices_and_faces"], [124, 3, 1, "", "embed"], [124, 3, 1, "", "embed_feature_hashing"], [124, 4, 1, "", "embedding"], [124, 4, 1, "", "evaluations"], [124, 3, 1, "", "from_base64"], [124, 3, 1, "", "from_bytes"], [124, 3, 1, "", "from_dict"], [124, 3, 1, "", "from_json"], [124, 3, 1, "", "from_protobuf"], [124, 3, 1, "", "from_pydantic_model"], [124, 3, 1, "", "from_strawberry_type"], [124, 3, 1, "", "generator_from_webcam"], [124, 3, 1, "", "get_json_schema"], [124, 3, 1, "", "get_multi_modal_attribute"], [124, 3, 1, "", "get_vocabulary"], [124, 4, 1, "", "granularity"], [124, 4, 1, "", "id"], [124, 4, 1, "", "is_multimodal"], [124, 3, 1, "", "load_pil_image_to_datauri"], [124, 3, 1, "", "load_uri_to_audio_tensor"], [124, 3, 1, "", "load_uri_to_blob"], [124, 3, 1, "", "load_uri_to_image_tensor"], [124, 3, 1, "", "load_uri_to_point_cloud_tensor"], [124, 3, 1, "", "load_uri_to_text"], [124, 3, 1, "", "load_uri_to_vertices_and_faces"], [124, 3, 1, "", "load_uri_to_video_tensor"], [124, 3, 1, "", "load_uris_to_rgbd_tensor"], [124, 3, 1, "", "load_vertices_and_faces_to_point_cloud"], [124, 4, 1, "", "location"], [124, 3, 1, "", "match"], [124, 4, 1, "", "matches"], [124, 4, 1, "", "mime_type"], [124, 4, 1, "", "modality"], [124, 4, 1, "", "nbytes"], [124, 4, 1, "", "non_empty_fields"], [124, 4, 1, "", "offset"], [124, 4, 1, "", "parent_id"], [124, 3, 1, "", "plot_matches_sprites"], [124, 3, 1, "", "pop"], [124, 3, 1, "", "post"], [124, 3, 1, "", "save_audio_tensor_to_file"], [124, 3, 1, "", "save_blob_to_file"], [124, 3, 1, "", "save_image_tensor_to_file"], [124, 3, 1, "", "save_uri_to_file"], [124, 3, 1, "", "save_video_tensor_to_file"], [124, 4, 1, "", "scores"], [124, 3, 1, "", "set_image_tensor_channel_axis"], [124, 3, 1, "", "set_image_tensor_inv_normalization"], [124, 3, 1, "", "set_image_tensor_normalization"], [124, 3, 1, "", "set_image_tensor_resample"], [124, 3, 1, "", "set_image_tensor_shape"], [124, 3, 1, "", "set_multi_modal_attribute"], [124, 3, 1, "", "summary"], [124, 4, 1, "", "tags"], [124, 4, 1, "", "tensor"], [124, 4, 1, "", "text"], [124, 3, 1, "", "to_base64"], [124, 3, 1, "", "to_bytes"], [124, 3, 1, "", "to_dict"], [124, 3, 1, "", "to_json"], [124, 3, 1, "", "to_protobuf"], [124, 3, 1, "", "to_pydantic_model"], [124, 3, 1, "", "to_strawberry_type"], [124, 4, 1, "", "uri"], [124, 4, 1, "", "weight"]], "docarray.document.data": [[125, 1, 1, "", "DocumentData"]], "docarray.document.data.DocumentData": [[125, 2, 1, "", "adjacency"], [125, 2, 1, "", "blob"], [125, 2, 1, "", "chunks"], [125, 2, 1, "", "content"], [125, 2, 1, "", "embedding"], [125, 2, 1, "", "evaluations"], [125, 2, 1, "", "granularity"], [125, 2, 1, "", "id"], [125, 2, 1, "", "location"], [125, 2, 1, "", "matches"], [125, 2, 1, "", "mime_type"], [125, 2, 1, "", "modality"], [125, 2, 1, "", "offset"], [125, 2, 1, "", "parent_id"], [125, 2, 1, "", "scores"], [125, 2, 1, "", "tags"], [125, 2, 1, "", "tensor"], [125, 2, 1, "", "text"], [125, 2, 1, "", "uri"], [125, 2, 1, "", "weight"]], "docarray.document.generators": [[126, 5, 1, "", "from_csv"], [126, 5, 1, "", "from_files"], [126, 5, 1, "", "from_huggingface_datasets"], [126, 5, 1, "", "from_lines"], [126, 5, 1, "", "from_ndarray"], [126, 5, 1, "", "from_ndjson"]], "docarray.document.mixins": [[127, 1, 1, "", "AllMixins"], [128, 0, 0, "-", "attribute"], [129, 0, 0, "-", "audio"], [130, 0, 0, "-", "blob"], [131, 0, 0, "-", "content"], [132, 0, 0, "-", "convert"], [133, 0, 0, "-", "dump"], [134, 0, 0, "-", "featurehash"], [135, 0, 0, "-", "helper"], [136, 0, 0, "-", "image"], [137, 0, 0, "-", "mesh"], [138, 0, 0, "-", "multimodal"], [139, 0, 0, "-", "plot"], [140, 0, 0, "-", "porting"], [141, 0, 0, "-", "property"], [142, 0, 0, "-", "protobuf"], [143, 0, 0, "-", "pydantic"], [144, 0, 0, "-", "rich_embedding"], [145, 0, 0, "-", "strawberry"], [146, 0, 0, "-", "sugar"], [147, 0, 0, "-", "text"], [148, 0, 0, "-", "video"]], "docarray.document.mixins.AllMixins": [[127, 4, 1, "", "adjacency"], [127, 4, 1, "", "blob"], [127, 4, 1, "", "chunks"], [127, 4, 1, "", "content"], [127, 4, 1, "", "content_hash"], [127, 4, 1, "", "content_type"], [127, 3, 1, "", "convert_blob_to_datauri"], [127, 3, 1, "", "convert_blob_to_image_tensor"], [127, 3, 1, "", "convert_blob_to_tensor"], [127, 3, 1, "", "convert_content_to_datauri"], [127, 3, 1, "", "convert_image_tensor_to_blob"], [127, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [127, 3, 1, "", "convert_image_tensor_to_uri"], [127, 3, 1, "", "convert_tensor_to_blob"], [127, 3, 1, "", "convert_tensor_to_text"], [127, 3, 1, "", "convert_text_to_datauri"], [127, 3, 1, "", "convert_text_to_tensor"], [127, 3, 1, "", "convert_uri_to_datauri"], [127, 3, 1, "", "display"], [127, 3, 1, "", "display_point_cloud_tensor"], [127, 3, 1, "", "display_rgbd_tensor"], [127, 3, 1, "", "display_tensor"], [127, 3, 1, "", "display_uri"], [127, 3, 1, "", "display_vertices_and_faces"], [127, 3, 1, "", "embed"], [127, 3, 1, "", "embed_feature_hashing"], [127, 4, 1, "", "embedding"], [127, 4, 1, "", "evaluations"], [127, 3, 1, "", "from_base64"], [127, 3, 1, "", "from_bytes"], [127, 3, 1, "", "from_dict"], [127, 3, 1, "", "from_json"], [127, 3, 1, "", "from_protobuf"], [127, 3, 1, "", "from_pydantic_model"], [127, 3, 1, "", "from_strawberry_type"], [127, 3, 1, "", "generator_from_webcam"], [127, 3, 1, "", "get_json_schema"], [127, 3, 1, "", "get_multi_modal_attribute"], [127, 3, 1, "", "get_vocabulary"], [127, 4, 1, "", "granularity"], [127, 4, 1, "", "id"], [127, 4, 1, "", "is_multimodal"], [127, 3, 1, "", "load_pil_image_to_datauri"], [127, 3, 1, "", "load_uri_to_audio_tensor"], [127, 3, 1, "", "load_uri_to_blob"], [127, 3, 1, "", "load_uri_to_image_tensor"], [127, 3, 1, "", "load_uri_to_point_cloud_tensor"], [127, 3, 1, "", "load_uri_to_text"], [127, 3, 1, "", "load_uri_to_vertices_and_faces"], [127, 3, 1, "", "load_uri_to_video_tensor"], [127, 3, 1, "", "load_uris_to_rgbd_tensor"], [127, 3, 1, "", "load_vertices_and_faces_to_point_cloud"], [127, 4, 1, "", "location"], [127, 3, 1, "", "match"], [127, 4, 1, "", "matches"], [127, 4, 1, "", "mime_type"], [127, 4, 1, "", "modality"], [127, 4, 1, "", "offset"], [127, 4, 1, "", "parent_id"], [127, 3, 1, "", "plot_matches_sprites"], [127, 3, 1, "", "post"], [127, 3, 1, "", "save_audio_tensor_to_file"], [127, 3, 1, "", "save_blob_to_file"], [127, 3, 1, "", "save_image_tensor_to_file"], [127, 3, 1, "", "save_uri_to_file"], [127, 3, 1, "", "save_video_tensor_to_file"], [127, 4, 1, "", "scores"], [127, 3, 1, "", "set_image_tensor_channel_axis"], [127, 3, 1, "", "set_image_tensor_inv_normalization"], [127, 3, 1, "", "set_image_tensor_normalization"], [127, 3, 1, "", "set_image_tensor_resample"], [127, 3, 1, "", "set_image_tensor_shape"], [127, 3, 1, "", "set_multi_modal_attribute"], [127, 3, 1, "", "summary"], [127, 4, 1, "", "tags"], [127, 4, 1, "", "tensor"], [127, 4, 1, "", "text"], [127, 3, 1, "", "to_base64"], [127, 3, 1, "", "to_bytes"], [127, 3, 1, "", "to_dict"], [127, 3, 1, "", "to_json"], [127, 3, 1, "", "to_protobuf"], [127, 3, 1, "", "to_pydantic_model"], [127, 3, 1, "", "to_strawberry_type"], [127, 4, 1, "", "uri"], [127, 4, 1, "", "weight"]], "docarray.document.mixins.attribute": [[128, 1, 1, "", "GetAttributesMixin"]], "docarray.document.mixins.audio": [[129, 1, 1, "", "AudioDataMixin"]], "docarray.document.mixins.audio.AudioDataMixin": [[129, 3, 1, "", "load_uri_to_audio_tensor"], [129, 3, 1, "", "save_audio_tensor_to_file"]], "docarray.document.mixins.blob": [[130, 1, 1, "", "BlobDataMixin"]], "docarray.document.mixins.blob.BlobDataMixin": [[130, 3, 1, "", "convert_blob_to_datauri"], [130, 3, 1, "", "load_uri_to_blob"], [130, 3, 1, "", "save_blob_to_file"]], "docarray.document.mixins.content": [[131, 1, 1, "", "ContentPropertyMixin"]], "docarray.document.mixins.content.ContentPropertyMixin": [[131, 4, 1, "", "content_hash"], [131, 3, 1, "", "convert_content_to_datauri"]], "docarray.document.mixins.convert": [[132, 1, 1, "", "ConvertMixin"]], "docarray.document.mixins.convert.ConvertMixin": [[132, 3, 1, "", "convert_blob_to_tensor"], [132, 3, 1, "", "convert_tensor_to_blob"], [132, 3, 1, "", "convert_uri_to_datauri"]], "docarray.document.mixins.dump": [[133, 1, 1, "", "UriFileMixin"]], "docarray.document.mixins.dump.UriFileMixin": [[133, 3, 1, "", "save_uri_to_file"]], "docarray.document.mixins.featurehash": [[134, 1, 1, "", "FeatureHashMixin"]], "docarray.document.mixins.featurehash.FeatureHashMixin": [[134, 3, 1, "", "embed_feature_hashing"]], "docarray.document.mixins.image": [[136, 1, 1, "", "ImageDataMixin"]], "docarray.document.mixins.image.ImageDataMixin": [[136, 3, 1, "", "convert_blob_to_image_tensor"], [136, 3, 1, "", "convert_image_tensor_to_blob"], [136, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [136, 3, 1, "", "convert_image_tensor_to_uri"], [136, 3, 1, "", "load_pil_image_to_datauri"], [136, 3, 1, "", "load_uri_to_image_tensor"], [136, 3, 1, "", "save_image_tensor_to_file"], [136, 3, 1, "", "set_image_tensor_channel_axis"], [136, 3, 1, "", "set_image_tensor_inv_normalization"], [136, 3, 1, "", "set_image_tensor_normalization"], [136, 3, 1, "", "set_image_tensor_resample"], [136, 3, 1, "", "set_image_tensor_shape"]], "docarray.document.mixins.mesh": [[137, 1, 1, "", "MeshDataMixin"], [137, 1, 1, "", "MeshEnum"], [137, 1, 1, "", "PointCloudEnum"]], "docarray.document.mixins.mesh.MeshDataMixin": [[137, 3, 1, "", "load_uri_to_point_cloud_tensor"], [137, 3, 1, "", "load_uri_to_vertices_and_faces"], [137, 3, 1, "", "load_uris_to_rgbd_tensor"], [137, 3, 1, "", "load_vertices_and_faces_to_point_cloud"]], "docarray.document.mixins.mesh.MeshEnum": [[137, 2, 1, "", "FACES"], [137, 2, 1, "", "FILE_EXTENSIONS"], [137, 2, 1, "", "VERTICES"]], "docarray.document.mixins.mesh.PointCloudEnum": [[137, 2, 1, "", "COLORS"]], "docarray.document.mixins.multimodal": [[138, 1, 1, "", "MultiModalMixin"]], "docarray.document.mixins.multimodal.MultiModalMixin": [[138, 3, 1, "", "get_multi_modal_attribute"], [138, 4, 1, "", "is_multimodal"], [138, 3, 1, "", "set_multi_modal_attribute"]], "docarray.document.mixins.plot": [[139, 1, 1, "", "PlotMixin"]], "docarray.document.mixins.plot.PlotMixin": [[139, 3, 1, "", "display"], [139, 3, 1, "", "display_point_cloud_tensor"], [139, 3, 1, "", "display_rgbd_tensor"], [139, 3, 1, "", "display_tensor"], [139, 3, 1, "", "display_uri"], [139, 3, 1, "", "display_vertices_and_faces"], [139, 3, 1, "", "plot_matches_sprites"], [139, 3, 1, "", "summary"]], "docarray.document.mixins.porting": [[140, 1, 1, "", "PortingMixin"]], "docarray.document.mixins.porting.PortingMixin": [[140, 3, 1, "", "from_base64"], [140, 3, 1, "", "from_bytes"], [140, 3, 1, "", "from_dict"], [140, 3, 1, "", "from_json"], [140, 3, 1, "", "to_base64"], [140, 3, 1, "", "to_bytes"], [140, 3, 1, "", "to_dict"], [140, 3, 1, "", "to_json"]], "docarray.document.mixins.property": [[141, 1, 1, "", "PropertyMixin"]], "docarray.document.mixins.property.PropertyMixin": [[141, 4, 1, "", "adjacency"], [141, 4, 1, "", "blob"], [141, 4, 1, "", "chunks"], [141, 4, 1, "", "content"], [141, 4, 1, "", "content_type"], [141, 4, 1, "", "embedding"], [141, 4, 1, "", "evaluations"], [141, 4, 1, "", "granularity"], [141, 4, 1, "", "id"], [141, 4, 1, "", "location"], [141, 4, 1, "", "matches"], [141, 4, 1, "", "mime_type"], [141, 4, 1, "", "modality"], [141, 4, 1, "", "offset"], [141, 4, 1, "", "parent_id"], [141, 4, 1, "", "scores"], [141, 4, 1, "", "tags"], [141, 4, 1, "", "tensor"], [141, 4, 1, "", "text"], [141, 4, 1, "", "uri"], [141, 4, 1, "", "weight"]], "docarray.document.mixins.protobuf": [[142, 1, 1, "", "ProtobufMixin"]], "docarray.document.mixins.protobuf.ProtobufMixin": [[142, 3, 1, "", "from_protobuf"], [142, 3, 1, "", "to_protobuf"]], "docarray.document.mixins.pydantic": [[143, 1, 1, "", "PydanticMixin"]], "docarray.document.mixins.pydantic.PydanticMixin": [[143, 3, 1, "", "from_pydantic_model"], [143, 3, 1, "", "get_json_schema"], [143, 3, 1, "", "to_pydantic_model"]], "docarray.document.mixins.rich_embedding": [[144, 1, 1, "", "ColorBoxEmbedding"]], "docarray.document.mixins.strawberry": [[145, 1, 1, "", "StrawberryMixin"]], "docarray.document.mixins.strawberry.StrawberryMixin": [[145, 3, 1, "", "from_strawberry_type"], [145, 3, 1, "", "to_strawberry_type"]], "docarray.document.mixins.sugar": [[146, 1, 1, "", "SingletonSugarMixin"]], "docarray.document.mixins.sugar.SingletonSugarMixin": [[146, 3, 1, "", "embed"], [146, 3, 1, "", "match"], [146, 3, 1, "", "post"]], "docarray.document.mixins.text": [[147, 1, 1, "", "TextDataMixin"]], "docarray.document.mixins.text.TextDataMixin": [[147, 3, 1, "", "convert_tensor_to_text"], [147, 3, 1, "", "convert_text_to_datauri"], [147, 3, 1, "", "convert_text_to_tensor"], [147, 3, 1, "", "get_vocabulary"], [147, 3, 1, "", "load_uri_to_text"]], "docarray.document.mixins.video": [[148, 1, 1, "", "VideoDataMixin"]], "docarray.document.mixins.video.VideoDataMixin": [[148, 3, 1, "", "generator_from_webcam"], [148, 3, 1, "", "load_uri_to_video_tensor"], [148, 3, 1, "", "save_video_tensor_to_file"]], "docarray.document.pydantic_model": [[149, 1, 1, "", "PydanticDocument"]], "docarray.document.pydantic_model.PydanticDocument": [[149, 1, 1, "", "Config"], [149, 2, 1, "", "adjacency"], [149, 2, 1, "", "blob"], [149, 2, 1, "", "chunks"], [149, 3, 1, "", "construct"], [149, 3, 1, "", "copy"], [149, 3, 1, "", "dict"], [149, 2, 1, "", "embedding"], [149, 2, 1, "", "evaluations"], [149, 3, 1, "", "from_orm"], [149, 2, 1, "", "granularity"], [149, 2, 1, "", "id"], [149, 3, 1, "", "json"], [149, 2, 1, "", "location"], [149, 2, 1, "", "matches"], [149, 2, 1, "", "mime_type"], [149, 2, 1, "", "modality"], [149, 2, 1, "", "offset"], [149, 2, 1, "", "parent_id"], [149, 3, 1, "", "parse_file"], [149, 3, 1, "", "parse_obj"], [149, 3, 1, "", "parse_raw"], [149, 3, 1, "", "schema"], [149, 3, 1, "", "schema_json"], [149, 2, 1, "", "scores"], [149, 2, 1, "", "tags"], [149, 2, 1, "", "tensor"], [149, 2, 1, "", "text"], [149, 3, 1, "", "update_forward_refs"], [149, 2, 1, "", "uri"], [149, 3, 1, "", "validate"], [149, 2, 1, "", "weight"]], "docarray.document.pydantic_model.PydanticDocument.Config": [[149, 2, 1, "", "smart_union"]], "docarray.document.strawberry_type": [[150, 1, 1, "", "StrawberryDocument"], [150, 1, 1, "", "StrawberryDocumentInput"]], "docarray.document.strawberry_type.StrawberryDocument": [[150, 2, 1, "", "adjacency"], [150, 2, 1, "", "blob"], [150, 2, 1, "", "chunks"], [150, 2, 1, "", "embedding"], [150, 2, 1, "", "evaluations"], [150, 2, 1, "", "granularity"], [150, 2, 1, "", "id"], [150, 2, 1, "", "location"], [150, 2, 1, "", "matches"], [150, 2, 1, "", "mime_type"], [150, 2, 1, "", "modality"], [150, 2, 1, "", "offset"], [150, 2, 1, "", "parent_id"], [150, 2, 1, "", "scores"], [150, 2, 1, "", "tags"], [150, 2, 1, "", "tensor"], [150, 2, 1, "", "text"], [150, 2, 1, "", "uri"], [150, 2, 1, "", "weight"]], "docarray.document.strawberry_type.StrawberryDocumentInput": [[150, 2, 1, "", "adjacency"], [150, 2, 1, "", "blob"], [150, 2, 1, "", "chunks"], [150, 2, 1, "", "embedding"], [150, 2, 1, "", "evaluations"], [150, 2, 1, "", "granularity"], [150, 2, 1, "", "id"], [150, 2, 1, "", "location"], [150, 2, 1, "", "matches"], [150, 2, 1, "", "mime_type"], [150, 2, 1, "", "modality"], [150, 2, 1, "", "offset"], [150, 2, 1, "", "parent_id"], [150, 2, 1, "", "scores"], [150, 2, 1, "", "tags"], [150, 2, 1, "", "tensor"], [150, 2, 1, "", "text"], [150, 2, 1, "", "uri"], [150, 2, 1, "", "weight"]], "docarray.helper": [[151, 5, 1, "", "add_protocol_and_compress_to_file_path"], [151, 1, 1, "", "cached_property"], [151, 5, 1, "", "check_root_id"], [151, 5, 1, "", "compress_bytes"], [151, 5, 1, "", "dataclass_from_dict"], [151, 5, 1, "", "decompress_bytes"], [151, 5, 1, "", "deprecate_by"], [151, 5, 1, "", "download_mermaid_url"], [151, 5, 1, "", "dunder_get"], [151, 5, 1, "", "filter_dict"], [151, 5, 1, "", "get_ci_vendor"], [151, 5, 1, "", "get_compress_ctx"], [151, 5, 1, "", "get_full_version"], [151, 5, 1, "", "login"], [151, 5, 1, "", "logout"], [151, 5, 1, "", "protocol_and_compress_from_file_path"], [151, 5, 1, "", "random_identity"], [151, 5, 1, "", "random_port"], [151, 5, 1, "", "random_uuid"], [151, 5, 1, "", "reset_ports"], [151, 5, 1, "", "typename"]], "docarray.math": [[153, 0, 0, "-", "distance"], [158, 0, 0, "-", "evaluation"], [159, 0, 0, "-", "helper"], [160, 0, 0, "-", "ndarray"]], "docarray.math.distance": [[153, 5, 1, "", "cdist"], [154, 0, 0, "-", "numpy"], [153, 5, 1, "", "pdist"], [156, 0, 0, "-", "tensorflow"], [157, 0, 0, "-", "torch"]], "docarray.math.distance.numpy": [[154, 5, 1, "", "cosine"], [154, 5, 1, "", "euclidean"], [154, 5, 1, "", "sparse_cosine"], [154, 5, 1, "", "sparse_euclidean"], [154, 5, 1, "", "sparse_sqeuclidean"], [154, 5, 1, "", "sqeuclidean"]], "docarray.math.distance.tensorflow": [[156, 5, 1, "", "cosine"], [156, 5, 1, "", "euclidean"], [156, 5, 1, "", "sqeuclidean"]], "docarray.math.distance.torch": [[157, 5, 1, "", "cosine"], [157, 5, 1, "", "euclidean"], [157, 5, 1, "", "sqeuclidean"]], "docarray.math.evaluation": [[158, 5, 1, "", "average_precision"], [158, 5, 1, "", "dcg_at_k"], [158, 5, 1, "", "f1_score_at_k"], [158, 5, 1, "", "hit_at_k"], [158, 5, 1, "", "ndcg_at_k"], [158, 5, 1, "", "precision_at_k"], [158, 5, 1, "", "r_precision"], [158, 5, 1, "", "recall_at_k"], [158, 5, 1, "", "reciprocal_rank"]], "docarray.math.helper": [[159, 5, 1, "", "minmax_normalize"], [159, 5, 1, "", "top_k"], [159, 5, 1, "", "update_rows_x_mat_best"]], "docarray.math.ndarray": [[160, 5, 1, "", "check_arraylike_equality"], [160, 5, 1, "", "detach_tensor_if_present"], [160, 5, 1, "", "get_array_rows"], [160, 5, 1, "", "get_array_type"], [160, 5, 1, "", "ravel"], [160, 5, 1, "", "to_list"], [160, 5, 1, "", "to_numpy_array"], [160, 5, 1, "", "unravel"]], "docarray.proto": [[162, 0, 0, "-", "docarray_pb2"], [163, 0, 0, "-", "io"], [165, 0, 0, "-", "pb"], [167, 0, 0, "-", "pb2"]], "docarray.proto.io": [[163, 5, 1, "", "flush_proto"], [164, 0, 0, "-", "ndarray"], [163, 5, 1, "", "parse_proto"]], "docarray.proto.io.ndarray": [[164, 5, 1, "", "flush_ndarray"], [164, 5, 1, "", "read_ndarray"]], "docarray.proto.pb": [[166, 0, 0, "-", "docarray_pb2"]], "docarray.proto.pb2": [[168, 0, 0, "-", "docarray_pb2"]], "docarray.score": [[169, 1, 1, "", "NamedScore"], [170, 0, 0, "-", "data"], [171, 0, 0, "-", "mixins"]], "docarray.score.NamedScore": [[169, 3, 1, "", "clear"], [169, 3, 1, "", "copy_from"], [169, 4, 1, "", "description"], [169, 4, 1, "", "nbytes"], [169, 4, 1, "", "non_empty_fields"], [169, 4, 1, "", "op_name"], [169, 3, 1, "", "pop"], [169, 4, 1, "", "ref_id"], [169, 3, 1, "", "to_dict"], [169, 4, 1, "", "value"]], "docarray.score.data": [[170, 1, 1, "", "NamedScoreData"]], "docarray.score.data.NamedScoreData": [[170, 2, 1, "", "description"], [170, 2, 1, "", "op_name"], [170, 2, 1, "", "ref_id"], [170, 2, 1, "", "value"]], "docarray.score.mixins": [[171, 1, 1, "", "AllMixins"], [172, 0, 0, "-", "property"], [173, 0, 0, "-", "representer"]], "docarray.score.mixins.AllMixins": [[171, 4, 1, "", "description"], [171, 4, 1, "", "op_name"], [171, 4, 1, "", "ref_id"], [171, 3, 1, "", "to_dict"], [171, 4, 1, "", "value"]], "docarray.score.mixins.property": [[172, 1, 1, "", "PropertyMixin"]], "docarray.score.mixins.property.PropertyMixin": [[172, 4, 1, "", "description"], [172, 4, 1, "", "op_name"], [172, 4, 1, "", "ref_id"], [172, 4, 1, "", "value"]], "docarray.score.mixins.representer": [[173, 1, 1, "", "RepresentMixin"]], "docarray.score.mixins.representer.RepresentMixin": [[173, 3, 1, "", "to_dict"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:function", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"annlit": [0, 16, 64, 65, 66, 67, 68, 69], "usag": [0, 2, 5, 6, 7, 8, 9, 10], "config": [0, 2, 5, 9, 189], "vector": [0, 2, 4, 5, 6, 7, 8, 10], "search": [0, 2, 4, 5, 6, 7, 8, 181, 183, 212], "filter": [0, 2, 4, 5, 6, 7, 8, 10, 206], "exampl": [0, 4, 5, 7, 10, 11, 177, 208], "find": [0, 3, 5, 7, 10, 32, 66, 77, 82, 87, 92, 97, 103, 114, 181, 195, 208], "onli": [0, 5, 10], "queri": [0, 2, 6, 8, 10, 205, 206, 208], "One": 1, "million": 1, "scale": 1, "benchmark": 1, "methodologi": 1, "core": 1, "task": 1, "parametr": 1, "combin": [1, 181, 206], "experi": 1, "setup": 1, "latenc": 1, "result": [1, 10, 214], "qp": 1, "recal": 1, "10": [1, 176, 177, 178, 186], "v": 1, "rational": 1, "design": [1, 217], "known": [1, 4, 5], "limit": [1, 4, 5, 214], "conclus": 1, "elasticsearch": 2, "start": [2, 5, 6, 7, 8, 10], "elast": [2, 20, 75, 76, 77, 78, 79], "servic": [2, 5, 6, 7, 8, 10, 190], "creat": [2, 3, 4, 5, 6, 7, 8, 10, 184, 185, 192], "documentarrai": [2, 3, 4, 5, 6, 7, 8, 10, 13, 176, 188, 195, 203, 207, 214, 215], "backend": [2, 3, 5, 6, 7, 8, 10, 65, 71, 76, 81, 86, 91, 96, 102, 108, 113, 176, 209], "secur": [2, 6], "connect": [2, 6], "bulk": [2, 6], "request": [2, 3, 6], "custom": [2, 6, 205], "note": [2, 6, 7, 8, 10, 212, 213], "text": [2, 6, 8, 54, 147, 183, 190], "field": [2, 5, 6, 8, 176, 188, 189, 214], "tag": [2, 6, 8, 202], "add": [3, 176], "new": [3, 192], "document": [3, 4, 5, 13, 19, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 176, 181, 183, 184, 188, 189, 194, 195, 197, 202, 203, 205, 214, 215, 219, 220], "store": [3, 4, 5, 13], "step": 3, "1": [3, 177, 178, 180, 181, 182, 183, 184, 186], "folder": 3, "2": [3, 176, 177, 178, 180, 181, 183, 184, 186], "implement": 3, "getsetdel": [3, 67, 72, 78, 83, 88, 93, 98, 104, 109, 115], "py": 3, "3": [3, 176, 177, 178, 180, 181, 183, 184, 186], "seqlik": [3, 69, 74, 79, 84, 89, 94, 100, 105, 111, 116], "4": [3, 176, 177, 178, 180, 181, 183, 184, 186], "5": [3, 176, 177, 178, 180, 181, 182, 183, 184, 186], "6": [3, 177, 178, 181, 182, 184, 186], "summar": 3, "everyth": 3, "__init__": 3, "7": [3, 177, 180, 181, 183, 184, 186], "subclass": 3, "from": [3, 184, 189, 193, 194, 199, 203, 211], "8": [3, 177, 180, 181, 183, 184, 186], "entrypoint": 3, "On": [3, 195, 216], "pull": [3, 185], "test": 3, "type": [3, 123, 174, 179, 181, 188, 192, 208, 219, 220], "hint": [3, 4], "construct": [4, 189, 194, 203, 212], "subindic": [4, 181, 212], "configur": [4, 6, 7, 8, 10], "without": 4, "specifi": 4, "index": [4, 8, 202], "featur": [4, 183], "summari": [4, 213], "persist": 4, "mutat": 4, "context": 4, "manag": [4, 185], "multipl": [4, 188, 195, 203, 206], "refer": 4, "same": 4, "out": 4, "arrai": [4, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 205], "modif": 4, "perform": [4, 181], "issu": 4, "caus": 4, "list": [4, 176, 181, 185, 188, 203, 211], "like": [4, 203], "structur": [4, 198, 202, 212], "slower": 4, "element": [4, 203], "access": [4, 181, 188, 193, 201, 202], "milvu": [5, 23, 85, 86, 87, 88, 89], "minim": 5, "advanc": [5, 189], "option": 5, "set": [5, 10], "consist": 5, "level": [5, 176, 183, 188], "batch": [5, 12, 202, 205], "size": 5, "pass": 5, "paramet": [5, 205], "collect": 5, "load": [5, 12, 177, 178, 182, 184, 193], "larg": [5, 178, 211], "tensor": 5, "outsid": 5, "embed": [5, 181, 195, 201, 213, 215], "opensearch": [6, 56, 90, 91, 92, 93, 94], "qdrant": [7, 57, 95, 96, 97, 98, 99, 100], "minimum": [7, 10], "redi": [8, 61, 101, 102, 103, 104, 105], "updat": [8, 185], "schema": [8, 214], "sqlite": [9, 62, 107, 108, 109, 110, 111], "weaviat": [10, 112, 113, 114, 115, 116, 117], "sort": 10, "certainti": 10, "includ": 10, "addit": 10, "properti": [10, 141, 172], "return": [10, 188, 208, 214], "graphql": 11, "basic": [11, 202], "integr": 11, "fastapi": [11, 214], "pytorch": 12, "deep": [12, 203], "learn": 12, "framework": 12, "map": 12, "one": 12, "shot": 12, "python": [13, 185, 216], "api": [13, 176, 185], "docarrai": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 214, 216, 217, 218, 219, 220], "dataclass": [13, 119, 120, 121, 122, 123, 176, 181, 188, 189, 191], "packag": [14, 15, 24, 26, 36, 58, 63, 64, 70, 75, 80, 85, 90, 95, 101, 107, 112, 119, 124, 127, 152, 153, 161, 163, 165, 167, 169, 171, 174, 180], "subpackag": [14, 15, 24, 63, 124, 152, 161, 169], "submodul": [14, 15, 24, 26, 36, 58, 63, 64, 70, 75, 80, 85, 90, 95, 101, 107, 112, 119, 124, 127, 152, 153, 161, 163, 165, 167, 169, 171], "modul": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174], "content": [14, 15, 24, 25, 26, 36, 58, 63, 64, 70, 75, 80, 85, 90, 95, 101, 107, 112, 119, 124, 127, 131, 152, 153, 161, 163, 165, 167, 169, 171, 174, 176, 193, 201, 215, 219, 220], "base": [17, 70, 71, 72, 73, 74, 118], "chunk": [18, 183], "match": [21, 45, 183, 205, 208, 213], "memori": [22, 80, 81, 82, 83, 84], "mixin": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 171, 172, 173], "dataload": [26, 27], "helper": [27, 68, 73, 99, 110, 135, 151, 159, 202], "delitem": 28, "emb": [29, 181, 190, 204, 205], "empti": [30, 194, 203], "evalu": [31, 158, 205], "getattr": 33, "getitem": 34, "group": 35, "io": [36, 37, 38, 39, 40, 41, 42, 43, 44, 163, 164], "binari": [37, 211], "common": 38, "csv": [39, 182], "datafram": [40, 211], "from_gen": 41, "json": [42, 176, 199, 211, 214], "pbar": 43, "pushpul": 44, "parallel": [46, 209], "plot": [47, 139, 213], "post": 48, "pydant": [49, 143, 196, 214], "reduc": 50, "sampl": [51, 202, 205], "setitem": 52, "strawberri": [53, 145, 196], "travers": 55, "queryset": [58, 59, 60], "lookup": 59, "parser": 60, "storag": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 176], "registri": 106, "enum": 120, "getter": 121, "setter": 122, "data": [125, 170, 177, 178, 179, 181, 184, 185, 193], "gener": [126, 181], "attribut": [128, 193, 194, 201], "audio": [129, 177], "blob": 130, "convert": [132, 183, 193, 196, 214], "dump": 133, "featurehash": [134, 196], "imag": [136, 178, 180, 190, 213, 215], "mesh": [137, 180], "multimod": 138, "port": [140, 196], "protobuf": [142, 196, 199, 211, 220], "rich_embed": 144, "sugar": 146, "video": [148, 184], "pydantic_model": 149, "strawberry_typ": 150, "math": [152, 153, 154, 155, 156, 157, 158, 159, 160], "distanc": [153, 154, 155, 156, 157], "numpi": 154, "paddl": 155, "tensorflow": 156, "torch": 157, "ndarrai": [160, 164, 183, 201], "proto": [161, 162, 163, 164, 165, 166, 167, 168, 219, 220], "docarray_pb2": [162, 166, 168], "pb": [165, 166], "pb2": [167, 168], "score": [169, 170, 171, 172, 173], "represent": [173, 180], "changelog": 176, "0": [176, 177, 178, 180, 181, 182, 183, 184, 186], "11": [176, 177, 178, 183, 184, 186], "chang": 176, "documentarrayinmemori": 176, "": [176, 189, 191, 194, 197, 198, 199, 202, 203, 207, 208], "contain": 176, "high": 176, "serial": [176, 199, 211], "format": [176, 211], "default": 176, "dict": [176, 199], "strategi": 176, "name": [176, 205], "svg": [177, 178, 180, 181, 182, 183, 184, 186], "version": [177, 178, 180, 181, 182, 183, 184, 186], "width": [177, 178, 180, 181, 182, 183, 184, 186], "0em": [177, 178, 180, 181, 182, 183, 184, 186], "height": [177, 178, 180, 181, 182, 183, 184, 186], "class": [177, 178, 180, 181, 182, 183, 184, 186, 189], "sd": [177, 178, 180, 181, 182, 183, 184, 186], "octicon": [177, 178, 180, 181, 182, 183, 184, 186], "unmut": 177, "viewbox": [177, 178, 180, 181, 182, 183, 184, 186], "16": [177, 178, 180, 181, 182, 183, 184, 186], "aria": [177, 178, 180, 181, 182, 183, 184, 186], "hidden": [177, 178, 180, 181, 182, 183, 184, 186], "true": [177, 178, 180, 181, 182, 183, 184, 186], "path": [177, 178, 180, 181, 182, 183, 184, 186], "fill": [177, 178, 180, 181, 182, 183, 184, 186, 195], "rule": [177, 178, 180, 181, 182, 183, 184, 186, 194], "evenodd": [177, 178, 180, 181, 182, 183, 184, 186], "d": [177, 178, 180, 181, 182, 183, 184, 186], "m7": [177, 181], "563": 177, "069a": 177, "75": [177, 178, 180, 181, 182, 183, 184, 186], "018": 177, "75v10": [177, 178], "5a": [177, 178, 181, 184], "01": [177, 178, 180, 181, 182, 183, 186], "238": 177, "57l3": 177, "472": 177, "11h1": 177, "75a1": [177, 178, 182, 184, 186], "010": [177, 181, 182], "9": [177, 183, 186], "25v": [177, 184, 186], "5c0": [177, 178, 184], "784": [177, 178, 182, 184], "5h1": [177, 182, 183], "723l3": 177, "289": 177, "82a": 177, "801": 177, "111zm6": 177, "38l4": 177, "319a": 177, "488": [177, 183], "181h": 177, "2a": [177, 184, 186], "25": [177, 178, 180, 181, 182, 184, 186], "00": [177, 178, 180, 181, 182, 183, 184, 186], "25v2": [177, 178], "138": [177, 178, 182, 184], "112": [177, 178, 182, 184], "25h2a": 177, "18l6": 177, "62v4": 177, "38zm6": 177, "096": 177, "038a": 177, "011": [177, 178, 181], "06": [177, 186], "314": [177, 186], "000": [177, 178, 184], "193": 177, "06v": 177, "001zm": 177, "121a": 177, "061": 177, "95": [177, 186], "101": [177, 183], "07l": 177, "001": [177, 180, 183, 186], "001z": 177, "wav": 177, "file": [177, 182, 184, 203], "save": [177, 182, 184], "other": [177, 202], "tool": 177, "librari": 177, "m1": 178, "25v10": 178, "25h": [178, 184], "94a": 178, "76": 178, "03": 178, "03l6": 178, "077": 178, "078a1": 178, "012": [178, 186], "412": [178, 183], "06l14": 178, "31v2": 178, "75a": [178, 182, 184], "25h1": 178, "75zm12": 178, "11h4": 178, "81l5": 178, "048": 178, "047a": 178, "344": 178, "009l4": 178, "298": 178, "889v": 178, "917a": 178, "25zm1": 178, "0014": [178, 186], "1h1": 178, "14": [178, 182], "216": [178, 182, 183, 184], "15": [178, 186], "15h12": 178, "5a1": [178, 184, 186], "0016": [178, 184, 186], "13": [178, 183, 184], "25zm5": 178, "6a": 178, "0zm7": 178, "6a2": 178, "014": 178, "0z": 178, "simpl": [178, 183], "process": [178, 190, 209, 210], "displai": [178, 215], "sprite": [178, 213, 215], "segment": [178, 183], "complic": 178, "small": 178, "ones": 178, "m8": 180, "878": [180, 181], "392a1": [180, 181], "756": [180, 181], "0l": [180, 181], "045a1": 180, "951v6": 180, "098c0": 180, "624": 180, "332": [180, 183, 186], "872": 180, "514l5": 180, "0l5": [180, 181], "045c": 180, "54": [180, 183], "313": 180, "89": 180, "514v4": 180, "951c0": 180, "514l8": 180, "392zm7": 180, "875": 180, "69a": [180, 181], "0l4": [180, 181], "63": [180, 181, 183], "685l8": 180, "133": 180, "245": 180, "375l4": 180, "685zm2": 180, "677v5": 180, "372c0": 180, "09": [180, 186], "047": [180, 186], "171": 180, "125": [180, 181], "216l4": 180, "625": 180, "683v8": 180, "432l2": 180, "677zm6": 180, "271l4": 180, "683a": 180, "216v5": 180, "677l8": 180, "432v5": 180, "516z": 180, "3d": 180, "vertic": 180, "face": [180, 217], "point": 180, "cloud": [180, 186, 211], "rgb": 180, "stack": 181, "122": 181, "003": 181, "902c": 181, "83": 181, "481": 181, "68": 181, "162l8": 181, "358a1": 181, "0l2": 181, "119": [181, 186], "456a1": 181, "162l7": 181, "392zm8": 181, "685": 181, "685a": 181, "685zm1": 181, "601": 181, "789a": 181, "025": 181, "273l5": 181, "249": [181, 183], "044a": 181, "752": 181, "298l": 181, "248": 181, "044a1": 181, "0l1": 181, "874": 181, "814a": 181, "789zm0": 181, "273": [181, 186], "025z": 181, "multi": [181, 183, 191], "modal": [181, 183, 188, 190, 191, 192], "model": [181, 214], "your": 181, "instanti": 181, "nest": [181, 188, 194, 198, 201, 202, 212], "each": 181, "parent": 181, "tabl": [182, 213, 219, 220], "m0": 182, "75c0": 182, "0h12": 182, "5c15": 182, "75v3": 182, "585a": 182, "746": 182, "83v8": 182, "085a1": 182, "0114": [182, 186], "16h6": 182, "309a": [182, 186], "748": 182, "118": [182, 186], "0h1": 182, "25v6": [182, 184], "165a": 182, "83v1": 182, "75zm1": 182, "5v7": 182, "25h5v": 182, "8h1": 182, "5zm5": 182, "5v1": 182, "25h5v5zm1": 182, "5v8h7": 182, "5h": [182, 186], "8zm8": 182, "8v1": 182, "5h7": 182, "25v5z": 182, "typographi": 183, "m6": 183, "21": [183, 186], "5l4": 183, "574": 183, "594": 183, "857": 183, "5h6": 183, "21zm": 183, "5l": [183, 186], "829": 183, "487a": 183, "423": 183, "474l5": 183, "735": 183, "332a1": 183, "302": 183, "018l": 183, "39": 183, "688a": 183, "415": 183, "496l2": 183, "10h6": 183, "71zm3": 183, "358c10": 183, "53": 183, "374": 183, "87": 183, "4c1": 183, "939": 183, "601v5": 183, "649a": 183, "448": 183, "275c13": 183, "995": 183, "12": [183, 184, 186], "82": 183, "13c": 183, "77": 183, "514": 183, "231": 183, "078": 183, "709": 183, "577": 183, "922": 183, "199": 183, "041": 183, "694": 183, "265": [183, 186], "411": 183, "887": 183, "944c11": 183, "78": 183, "88": 183, "5v": 183, "899c0": 183, "869": 183, "528": 183, "282": 183, "84": 183, "858a": 183, "32": 183, "716zm14": 183, "9h13c": 183, "881": 183, "375": 183, "22": 183, "637": 183, "444": 183, "253": 183, "217": 183, "363": 183, "806": 183, "408": 183, "155": 183, "697": 183, "896": 183, "354": 183, "732": 183, "26": [183, 186], "209": 183, "588": 183, "449": 183, "35": [183, 186], "257": 183, "495": 183, "551v9z": 183, "long": 183, "back": 183, "hash": 183, "subindex": 183, "devic": [184, 216], "camera": 184, "m16": 184, "136": 184, "643l11": 184, "425v4": 184, "009": 184, "3h": 184, "75v6": 184, "13h7": 184, "0011": 184, "675l3": 184, "864": 184, "318a": 184, "5zm": 184, "075l3": 184, "1v": 184, "85l": 184, "1v1": 184, "65zm9": 184, "75v": 184, "25h7": 184, "5z": 184, "kei": 184, "frame": 184, "extract": 184, "webcam": 184, "web": 185, "consol": 185, "push": 185, "read": [185, 210], "delet": 185, "rocket": 186, "m14": 186, "064": 186, "0a8": 186, "187": 186, "563l": 186, "459": 186, "458c": 186, "616": 186, "641": 186, "904": 186, "979h3": 186, "31a1": 186, "49": 186, "833l": 186, "607a": 186, "418": 186, "11l3": 186, "102": 186, "954c": 186, "037": 186, "051": 186, "079": 186, "124": 186, "145l2": 186, "429": 186, "428c": 186, "046": 186, "094": 186, "088": 186, "145": 186, "125l": 186, "954": 186, "102a": 186, "418l2": 186, "774": 186, "707a1": 186, "833": 186, "49v9": 186, "485c": 186, "338": 186, "288": 186, "665": 186, "59": 186, "979": 186, "904l": 186, "458": 186, "459a8": 186, "936v1": 186, "0h": 186, "186zm10": 186, "625c": 186, "177": 186, "266": 186, "175l": 186, "521": 186, "548": 186, "783": 186, "949": 186, "213v": 186, "066zm3": 186, "678": 186, "116l5": 186, "766c": 186, "058": 186, "117": 186, "178": 186, "176": 186, "266h3": 186, "213": 186, "119l": 186, "782": 186, "547zm5": 186, "493a7": 186, "063": 186, "186a": 186, "186a7": 186, "123": 186, "127l": 186, "458a15": 186, "499": 186, "02l": 186, "317": 186, "143": 186, "317a15": 186, "02": 186, "458h": 186, "002zm12": 186, "0zm": 186, "44": 186, "56a1": 186, "12c": 186, "734": 186, "73": 186, "003a": 186, "23": 186, "265c": 186, "671": 186, "103": 186, "416": 186, "005": 186, "148z": 186, "support": [186, 192, 208], "authent": 187, "login": 187, "logout": 187, "select": 188, "slice": 188, "object": [188, 203, 214], "decor": 189, "annot": 189, "behavior": 189, "us": [189, 195, 209], "what": [189, 191, 194, 197, 198, 199, 202, 203, 207, 208, 217], "next": [189, 191, 194, 197, 198, 199, 202, 203, 207], "clip": 190, "i": [191, 208, 217], "understand": 191, "problem": 191, "challeng": 191, "overrid": 192, "exist": 192, "uri": 193, "an": [194, 203], "unknown": 194, "handl": 194, "resolv": 194, "copi": [194, 203], "anoth": 194, "via": [195, 204, 205, 210], "neural": [195, 204], "network": [195, 204, 209], "nearest": [195, 208], "neighbor": [195, 208], "fluent": 196, "interfac": 196, "method": 196, "blobdata": 196, "imagedata": 196, "contentproperti": 196, "textdata": 196, "singletonsugar": 196, "audiodata": 196, "meshdata": 196, "videodata": 196, "urifil": 196, "arbitrari": 199, "byte": [199, 211], "base64": [199, 211], "visual": [200, 213], "selector": 201, "auto": 201, "ravel": 201, "dunder": 201, "syntax": [201, 206], "sugari": 201, "id": 202, "boolean": 202, "mask": 202, "flatten": 202, "handi": 202, "shuffl": 202, "split": 202, "singl": 203, "local": 203, "against": 205, "ground": 205, "truth": 205, "identifi": 205, "label": 205, "metric": 205, "function": 205, "The": 205, "max_rel": 205, "onc": 205, "wise": 205, "condit": 206, "oper": 206, "differ": 208, "between": [208, 214], "which": 208, "side": 208, "gpu": [208, 209], "when": 209, "choos": 209, "thread": 209, "map_batch": 209, "overlap": 209, "cpu": 209, "comput": 209, "why": 209, "129": 209, "128": 209, "time": 209, "extern": 210, "flow": 210, "executor": 210, "accept": 210, "scheme": 210, "more": 210, "wire": 211, "pickl": 211, "disk": 211, "stream": 211, "over": 212, "modifi": 212, "through": 212, "projector": 213, "valid": 214, "incom": 214, "respons": 214, "recurs": 214, "jupyt": 215, "notebook": 215, "colab": 215, "rich": 215, "pycharm": 215, "user": [215, 217], "instal": [216, 218], "appl": 216, "silicon": 216, "check": 216, "termin": 216, "homebrew": 216, "depend": 216, "wheel": 216, "compar": 217, "altern": 217, "hug": 217, "dataset": 217, "To": 217, "awkwardarrai": 217, "zarr": 217, "jina": 217, "welcom": 218, "protocol": [219, 220], "densendarrayproto": [219, 220], "documentarrayproto": [219, 220], "documentproto": [219, 220], "evaluationsentri": [219, 220], "scoresentri": [219, 220], "namedscoreproto": [219, 220], "ndarrayproto": [219, 220], "sparsendarrayproto": [219, 220], "scalar": [219, 220], "valu": [219, 220], "rebuild": 220}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Annlite": [[0, "annlite"]], "Usage": [[0, "usage"], [2, "usage"], [5, "usage"], [6, "usage"], [7, "usage"], [8, "usage"], [9, "usage"], [10, "usage"]], "Config": [[0, "config"], [2, "config"], [5, "config"], [9, "config"]], "Vector search with filter": [[0, "vector-search-with-filter"], [5, "vector-search-with-filter"], [7, "vector-search-with-filter"]], "Example of .find with a filter only": [[0, "example-of-find-with-a-filter-only"], [10, "example-of-find-with-a-filter-only"]], "Example of .find with query vector and filter": [[0, "example-of-find-with-query-vector-and-filter"], [10, "example-of-find-with-query-vector-and-filter"]], "One Million Scale Benchmark": [[1, "one-million-scale-benchmark"]], "Methodology": [[1, "methodology"]], "Core tasks": [[1, "core-tasks"]], "Parametric combinations": [[1, "parametric-combinations"]], "Experiment setup": [[1, "experiment-setup"]], "Latency result": [[1, "latency-result"]], "QPS result": [[1, "qps-result"]], "Recall@10 vs QPS": [[1, "recall-10-vs-qps"]], "Rationale on experiment design": [[1, "rationale-on-experiment-design"]], "Known limitations": [[1, "known-limitations"], [4, "known-limitations"]], "Conclusions": [[1, "conclusions"]], "Elasticsearch": [[2, "elasticsearch"]], "Start Elastic service": [[2, "start-elastic-service"]], "Create DocumentArray with Elasticsearch backend": [[2, "create-documentarray-with-elasticsearch-backend"]], "Secure connection": [[2, "secure-connection"], [6, "secure-connection"]], "Bulk request customization": [[2, "bulk-request-customization"], [6, "bulk-request-customization"]], "Note": [[2, null], [2, null], [2, null], [6, null], [6, null], [7, null], [8, null], [8, null], [10, null], [212, null], [213, null]], "Vector search with filter query": [[2, "vector-search-with-filter-query"], [6, "vector-search-with-filter-query"], [8, "vector-search-with-filter-query"]], "Search by filter query": [[2, "search-by-filter-query"], [6, "search-by-filter-query"], [8, "search-by-filter-query"]], "Search by .text field": [[2, "search-by-text-field"], [6, "search-by-text-field"], [8, "search-by-text-field"]], "Search by .tags field": [[2, "search-by-tags-field"], [6, "search-by-tags-field"], [8, "search-by-tags-field"]], "Add New Document Store": [[3, "add-new-document-store"]], "Step 1: create the folder": [[3, "step-1-create-the-folder"]], "Step 2: implement getsetdel.py": [[3, "step-2-implement-getsetdel-py"]], "Step 3: implement seqlike.py": [[3, "step-3-implement-seqlike-py"]], "Step 4: implement backend.py": [[3, "step-4-implement-backend-py"]], "Step 5: implement find.py": [[3, "step-5-implement-find-py"]], "Step 6: summarize everything in __init__.py.": [[3, "step-6-summarize-everything-in-init-py"]], "Step 7: subclass from DocumentArray": [[3, "step-7-subclass-from-documentarray"]], "Step 8: add entrypoint to DocumentArray": [[3, "step-8-add-entrypoint-to-documentarray"]], "On pull request: add tests and type-hint": [[3, "on-pull-request-add-tests-and-type-hint"]], "Document Store": [[4, "document-store"]], "Construct": [[4, "construct"], [189, "construct"], [194, "construct"], [203, "construct"]], "Subindices": [[4, null], [181, null]], "Construct with configuration": [[4, "construct-with-configuration"]], "Creating DocumentArrays without specifying index": [[4, null]], "Feature summary": [[4, "feature-summary"]], "Vector search example": [[4, "vector-search-example"]], "Vector search with filter example": [[4, "vector-search-with-filter-example"]], "Filter example": [[4, "filter-example"]], "Persistence, mutations and context manager": [[4, "persistence-mutations-and-context-manager"]], "Multiple references to the same document store": [[4, "multiple-references-to-the-same-document-store"]], "Out-of-array modification": [[4, "out-of-array-modification"]], "Performance issues caused by list-like structure": [[4, "performance-issues-caused-by-list-like-structure"]], "Hint": [[4, null]], "Slower element access": [[4, "slower-element-access"]], "Milvus": [[5, "milvus"]], "Start Milvus service": [[5, "start-milvus-service"]], "Create DocumentArray with Milvus backend": [[5, "create-documentarray-with-milvus-backend"]], "Minimal example": [[5, "minimal-example"]], "Example of .find with filtered vector search": [[5, "example-of-find-with-filtered-vector-search"]], "Example of .find with only a filter": [[5, "example-of-find-with-only-a-filter"]], "Advanced options": [[5, "advanced-options"]], "Setting a consistency level": [[5, "setting-a-consistency-level"]], "Setting a batch size": [[5, "setting-a-batch-size"]], "Passing search parameters": [[5, "passing-search-parameters"]], "Known limitations of the Milvus Document Store": [[5, "known-limitations-of-the-milvus-document-store"]], "Collection loading": [[5, "collection-loading"]], "Storing large tensors outside of embedding field": [[5, "storing-large-tensors-outside-of-embedding-field"]], "Opensearch": [[6, "opensearch"]], "Start Opensearch service": [[6, "start-opensearch-service"]], "Create DocumentArray with Opensearch backend": [[6, "create-documentarray-with-opensearch-backend"]], "Configuration": [[6, "configuration"], [7, "configuration"], [8, "configuration"], [10, "configuration"]], "Qdrant": [[7, "qdrant"]], "Start Qdrant service": [[7, "start-qdrant-service"]], "Create DocumentArray with Qdrant backend": [[7, "create-documentarray-with-qdrant-backend"]], "Minimum example": [[7, "minimum-example"], [10, "minimum-example"]], "Example of .find with filter": [[7, "example-of-find-with-filter"]], "Example of .filter with a filter": [[7, "example-of-filter-with-a-filter"]], "Redis": [[8, "redis"]], "Start Redis service": [[8, "start-redis-service"]], "Create DocumentArray with Redis backend": [[8, "create-documentarray-with-redis-backend"]], "Update Vector Search Indexing Schema": [[8, "update-vector-search-indexing-schema"]], "SQLite": [[9, "sqlite"]], "Weaviate": [[10, "weaviate"]], "Start Weaviate service": [[10, "start-weaviate-service"]], "Create DocumentArray with Weaviate backend": [[10, "create-documentarray-with-weaviate-backend"]], "Filtering": [[10, "filtering"]], "Sorting": [[10, "sorting"]], "Example of .find with vector and sort": [[10, "example-of-find-with-vector-and-sort"]], "Set minimum certainty on query results": [[10, "set-minimum-certainty-on-query-results"]], "Include additional properties in the return": [[10, "include-additional-properties-in-the-return"]], "GraphQL": [[11, "graphql"]], "Basic example": [[11, "basic-example"]], "Integrate with FastAPI": [[11, "integrate-with-fastapi"]], "PyTorch/Deep Learning Frameworks": [[12, "pytorch-deep-learning-frameworks"]], "Load, map, batch in one-shot": [[12, "load-map-batch-in-one-shot"]], " Python API": [[13, "python-api"]], "docarray - Document and DocumentArray": [[13, "docarray-document-and-documentarray"]], "docarray.dataclasses - Dataclass": [[13, "docarray-dataclasses-dataclass"]], "docarray.array - Document stores": [[13, "docarray-array-document-stores"]], "docarray package": [[14, "docarray-package"]], "Subpackages": [[14, "subpackages"], [15, "subpackages"], [24, "subpackages"], [63, "subpackages"], [124, "subpackages"], [152, "subpackages"], [161, "subpackages"], [169, "subpackages"]], "Submodules": [[14, "submodules"], [15, "submodules"], [24, "submodules"], [26, "submodules"], [36, "submodules"], [58, "submodules"], [63, "submodules"], [64, "submodules"], [70, "submodules"], [75, "submodules"], [80, "submodules"], [85, "submodules"], [90, "submodules"], [95, "submodules"], [101, "submodules"], [107, "submodules"], [112, "submodules"], [119, "submodules"], [124, "submodules"], [127, "submodules"], [152, "submodules"], [153, "submodules"], [161, "submodules"], [163, "submodules"], [165, "submodules"], [167, "submodules"], [169, "submodules"], [171, "submodules"]], "Module contents": [[14, "module-docarray"], [15, "module-docarray.array"], [24, "module-docarray.array.mixins"], [26, "module-docarray.array.mixins.dataloader"], [36, "module-docarray.array.mixins.io"], [58, "module-docarray.array.queryset"], [63, "module-docarray.array.storage"], [64, "module-docarray.array.storage.annlite"], [70, "module-docarray.array.storage.base"], [75, "module-docarray.array.storage.elastic"], [80, "module-docarray.array.storage.memory"], [85, "module-contents"], [90, "module-docarray.array.storage.opensearch"], [95, "module-docarray.array.storage.qdrant"], [101, "module-docarray.array.storage.redis"], [107, "module-docarray.array.storage.sqlite"], [112, "module-docarray.array.storage.weaviate"], [119, "module-docarray.dataclasses"], [124, "module-docarray.document"], [127, "module-docarray.document.mixins"], [152, "module-docarray.math"], [153, "module-docarray.math.distance"], [161, "module-docarray.proto"], [163, "module-docarray.proto.io"], [165, "module-docarray.proto.pb"], [167, "module-docarray.proto.pb2"], [169, "module-docarray.score"], [171, "module-docarray.score.mixins"], [174, "module-docarray.typing"]], "docarray.array package": [[15, "docarray-array-package"]], "docarray.array.annlite module": [[16, "module-docarray.array.annlite"]], "docarray.array.base module": [[17, "module-docarray.array.base"]], "docarray.array.chunk module": [[18, "module-docarray.array.chunk"]], "docarray.array.document module": [[19, "module-docarray.array.document"]], "docarray.array.elastic module": [[20, "module-docarray.array.elastic"]], "docarray.array.match module": [[21, "module-docarray.array.match"]], "docarray.array.memory module": [[22, "module-docarray.array.memory"]], "docarray.array.milvus module": [[23, "docarray-array-milvus-module"]], "docarray.array.mixins package": [[24, "docarray-array-mixins-package"]], "docarray.array.mixins.content module": [[25, "module-docarray.array.mixins.content"]], "docarray.array.mixins.dataloader package": [[26, "docarray-array-mixins-dataloader-package"]], "docarray.array.mixins.dataloader.helper module": [[27, "module-docarray.array.mixins.dataloader.helper"]], "docarray.array.mixins.delitem module": [[28, "module-docarray.array.mixins.delitem"]], "docarray.array.mixins.embed module": [[29, "module-docarray.array.mixins.embed"]], "docarray.array.mixins.empty module": [[30, "module-docarray.array.mixins.empty"]], "docarray.array.mixins.evaluation module": [[31, "module-docarray.array.mixins.evaluation"]], "docarray.array.mixins.find module": [[32, "module-docarray.array.mixins.find"]], "docarray.array.mixins.getattr module": [[33, "module-docarray.array.mixins.getattr"]], "docarray.array.mixins.getitem module": [[34, "module-docarray.array.mixins.getitem"]], "docarray.array.mixins.group module": [[35, "module-docarray.array.mixins.group"]], "docarray.array.mixins.io package": [[36, "docarray-array-mixins-io-package"]], "docarray.array.mixins.io.binary module": [[37, "module-docarray.array.mixins.io.binary"]], "docarray.array.mixins.io.common module": [[38, "module-docarray.array.mixins.io.common"]], "docarray.array.mixins.io.csv module": [[39, "module-docarray.array.mixins.io.csv"]], "docarray.array.mixins.io.dataframe module": [[40, "module-docarray.array.mixins.io.dataframe"]], "docarray.array.mixins.io.from_gen module": [[41, "module-docarray.array.mixins.io.from_gen"]], "docarray.array.mixins.io.json module": [[42, "module-docarray.array.mixins.io.json"]], "docarray.array.mixins.io.pbar module": [[43, "module-docarray.array.mixins.io.pbar"]], "docarray.array.mixins.io.pushpull module": [[44, "module-docarray.array.mixins.io.pushpull"]], "docarray.array.mixins.match module": [[45, "module-docarray.array.mixins.match"]], "docarray.array.mixins.parallel module": [[46, "module-docarray.array.mixins.parallel"]], "docarray.array.mixins.plot module": [[47, "module-docarray.array.mixins.plot"]], "docarray.array.mixins.post module": [[48, "module-docarray.array.mixins.post"]], "docarray.array.mixins.pydantic module": [[49, "module-docarray.array.mixins.pydantic"]], "docarray.array.mixins.reduce module": [[50, "module-docarray.array.mixins.reduce"]], "docarray.array.mixins.sample module": [[51, "module-docarray.array.mixins.sample"]], "docarray.array.mixins.setitem module": [[52, "module-docarray.array.mixins.setitem"]], "docarray.array.mixins.strawberry module": [[53, "module-docarray.array.mixins.strawberry"]], "docarray.array.mixins.text module": [[54, "module-docarray.array.mixins.text"]], "docarray.array.mixins.traverse module": [[55, "module-docarray.array.mixins.traverse"]], "docarray.array.opensearch module": [[56, "module-docarray.array.opensearch"]], "docarray.array.qdrant module": [[57, "module-docarray.array.qdrant"]], "docarray.array.queryset package": [[58, "docarray-array-queryset-package"]], "docarray.array.queryset.lookup module": [[59, "module-docarray.array.queryset.lookup"]], "docarray.array.queryset.parser module": [[60, "module-docarray.array.queryset.parser"]], "docarray.array.redis module": [[61, "module-docarray.array.redis"]], "docarray.array.sqlite module": [[62, "module-docarray.array.sqlite"]], "docarray.array.storage package": [[63, "docarray-array-storage-package"]], "docarray.array.storage.annlite package": [[64, "docarray-array-storage-annlite-package"]], "docarray.array.storage.annlite.backend module": [[65, "module-docarray.array.storage.annlite.backend"]], "docarray.array.storage.annlite.find module": [[66, "module-docarray.array.storage.annlite.find"]], "docarray.array.storage.annlite.getsetdel module": [[67, "module-docarray.array.storage.annlite.getsetdel"]], "docarray.array.storage.annlite.helper module": [[68, "module-docarray.array.storage.annlite.helper"]], "docarray.array.storage.annlite.seqlike module": [[69, "module-docarray.array.storage.annlite.seqlike"]], "docarray.array.storage.base package": [[70, "docarray-array-storage-base-package"]], "docarray.array.storage.base.backend module": [[71, "module-docarray.array.storage.base.backend"]], "docarray.array.storage.base.getsetdel module": [[72, "module-docarray.array.storage.base.getsetdel"]], "docarray.array.storage.base.helper module": [[73, "module-docarray.array.storage.base.helper"]], "docarray.array.storage.base.seqlike module": [[74, "module-docarray.array.storage.base.seqlike"]], "docarray.array.storage.elastic package": [[75, "docarray-array-storage-elastic-package"]], "docarray.array.storage.elastic.backend module": [[76, "module-docarray.array.storage.elastic.backend"]], "docarray.array.storage.elastic.find module": [[77, "module-docarray.array.storage.elastic.find"]], "docarray.array.storage.elastic.getsetdel module": [[78, "module-docarray.array.storage.elastic.getsetdel"]], "docarray.array.storage.elastic.seqlike module": [[79, "module-docarray.array.storage.elastic.seqlike"]], "docarray.array.storage.memory package": [[80, "docarray-array-storage-memory-package"]], "docarray.array.storage.memory.backend module": [[81, "module-docarray.array.storage.memory.backend"]], "docarray.array.storage.memory.find module": [[82, "module-docarray.array.storage.memory.find"]], "docarray.array.storage.memory.getsetdel module": [[83, "module-docarray.array.storage.memory.getsetdel"]], "docarray.array.storage.memory.seqlike module": [[84, "module-docarray.array.storage.memory.seqlike"]], "docarray.array.storage.milvus package": [[85, "docarray-array-storage-milvus-package"]], "docarray.array.storage.milvus.backend module": [[86, "docarray-array-storage-milvus-backend-module"]], "docarray.array.storage.milvus.find module": [[87, "docarray-array-storage-milvus-find-module"]], "docarray.array.storage.milvus.getsetdel module": [[88, "docarray-array-storage-milvus-getsetdel-module"]], "docarray.array.storage.milvus.seqlike module": [[89, "docarray-array-storage-milvus-seqlike-module"]], "docarray.array.storage.opensearch package": [[90, "docarray-array-storage-opensearch-package"]], "docarray.array.storage.opensearch.backend module": [[91, "module-docarray.array.storage.opensearch.backend"]], "docarray.array.storage.opensearch.find module": [[92, "module-docarray.array.storage.opensearch.find"]], "docarray.array.storage.opensearch.getsetdel module": [[93, "module-docarray.array.storage.opensearch.getsetdel"]], "docarray.array.storage.opensearch.seqlike module": [[94, "module-docarray.array.storage.opensearch.seqlike"]], "docarray.array.storage.qdrant package": [[95, "docarray-array-storage-qdrant-package"]], "docarray.array.storage.qdrant.backend module": [[96, "module-docarray.array.storage.qdrant.backend"]], "docarray.array.storage.qdrant.find module": [[97, "module-docarray.array.storage.qdrant.find"]], "docarray.array.storage.qdrant.getsetdel module": [[98, "module-docarray.array.storage.qdrant.getsetdel"]], "docarray.array.storage.qdrant.helper module": [[99, "module-docarray.array.storage.qdrant.helper"]], "docarray.array.storage.qdrant.seqlike module": [[100, "module-docarray.array.storage.qdrant.seqlike"]], "docarray.array.storage.redis package": [[101, "docarray-array-storage-redis-package"]], "docarray.array.storage.redis.backend module": [[102, "module-docarray.array.storage.redis.backend"]], "docarray.array.storage.redis.find module": [[103, "module-docarray.array.storage.redis.find"]], "docarray.array.storage.redis.getsetdel module": [[104, "module-docarray.array.storage.redis.getsetdel"]], "docarray.array.storage.redis.seqlike module": [[105, "module-docarray.array.storage.redis.seqlike"]], "docarray.array.storage.registry module": [[106, "module-docarray.array.storage.registry"]], "docarray.array.storage.sqlite package": [[107, "docarray-array-storage-sqlite-package"]], "docarray.array.storage.sqlite.backend module": [[108, "module-docarray.array.storage.sqlite.backend"]], "docarray.array.storage.sqlite.getsetdel module": [[109, "module-docarray.array.storage.sqlite.getsetdel"]], "docarray.array.storage.sqlite.helper module": [[110, "module-docarray.array.storage.sqlite.helper"]], "docarray.array.storage.sqlite.seqlike module": [[111, "module-docarray.array.storage.sqlite.seqlike"]], "docarray.array.storage.weaviate package": [[112, "docarray-array-storage-weaviate-package"]], "docarray.array.storage.weaviate.backend module": [[113, "module-docarray.array.storage.weaviate.backend"]], "docarray.array.storage.weaviate.find module": [[114, "module-docarray.array.storage.weaviate.find"]], "docarray.array.storage.weaviate.getsetdel module": [[115, "module-docarray.array.storage.weaviate.getsetdel"]], "docarray.array.storage.weaviate.seqlike module": [[116, "module-docarray.array.storage.weaviate.seqlike"]], "docarray.array.weaviate module": [[117, "module-docarray.array.weaviate"]], "docarray.base module": [[118, "module-docarray.base"]], "docarray.dataclasses package": [[119, "docarray-dataclasses-package"]], "docarray.dataclasses.enums module": [[120, "module-docarray.dataclasses.enums"]], "docarray.dataclasses.getter module": [[121, "module-docarray.dataclasses.getter"]], "docarray.dataclasses.setter module": [[122, "module-docarray.dataclasses.setter"]], "docarray.dataclasses.types module": [[123, "module-docarray.dataclasses.types"]], "docarray.document package": [[124, "docarray-document-package"]], "docarray.document.data module": [[125, "module-docarray.document.data"]], "docarray.document.generators module": [[126, "module-docarray.document.generators"]], "docarray.document.mixins package": [[127, "docarray-document-mixins-package"]], "docarray.document.mixins.attribute module": [[128, "module-docarray.document.mixins.attribute"]], "docarray.document.mixins.audio module": [[129, "module-docarray.document.mixins.audio"]], "docarray.document.mixins.blob module": [[130, "module-docarray.document.mixins.blob"]], "docarray.document.mixins.content module": [[131, "module-docarray.document.mixins.content"]], "docarray.document.mixins.convert module": [[132, "module-docarray.document.mixins.convert"]], "docarray.document.mixins.dump module": [[133, "module-docarray.document.mixins.dump"]], "docarray.document.mixins.featurehash module": [[134, "module-docarray.document.mixins.featurehash"]], "docarray.document.mixins.helper module": [[135, "module-docarray.document.mixins.helper"]], "docarray.document.mixins.image module": [[136, "module-docarray.document.mixins.image"]], "docarray.document.mixins.mesh module": [[137, "module-docarray.document.mixins.mesh"]], "docarray.document.mixins.multimodal module": [[138, "module-docarray.document.mixins.multimodal"]], "docarray.document.mixins.plot module": [[139, "module-docarray.document.mixins.plot"]], "docarray.document.mixins.porting module": [[140, "module-docarray.document.mixins.porting"]], "docarray.document.mixins.property module": [[141, "module-docarray.document.mixins.property"]], "docarray.document.mixins.protobuf module": [[142, "module-docarray.document.mixins.protobuf"]], "docarray.document.mixins.pydantic module": [[143, "module-docarray.document.mixins.pydantic"]], "docarray.document.mixins.rich_embedding module": [[144, "module-docarray.document.mixins.rich_embedding"]], "docarray.document.mixins.strawberry module": [[145, "module-docarray.document.mixins.strawberry"]], "docarray.document.mixins.sugar module": [[146, "module-docarray.document.mixins.sugar"]], "docarray.document.mixins.text module": [[147, "module-docarray.document.mixins.text"]], "docarray.document.mixins.video module": [[148, "module-docarray.document.mixins.video"]], "docarray.document.pydantic_model module": [[149, "module-docarray.document.pydantic_model"]], "docarray.document.strawberry_type module": [[150, "module-docarray.document.strawberry_type"]], "docarray.helper module": [[151, "module-docarray.helper"]], "docarray.math package": [[152, "docarray-math-package"]], "docarray.math.distance package": [[153, "docarray-math-distance-package"]], "docarray.math.distance.numpy module": [[154, "module-docarray.math.distance.numpy"]], "docarray.math.distance.paddle module": [[155, "docarray-math-distance-paddle-module"]], "docarray.math.distance.tensorflow module": [[156, "module-docarray.math.distance.tensorflow"]], "docarray.math.distance.torch module": [[157, "module-docarray.math.distance.torch"]], "docarray.math.evaluation module": [[158, "module-docarray.math.evaluation"]], "docarray.math.helper module": [[159, "module-docarray.math.helper"]], "docarray.math.ndarray module": [[160, "module-docarray.math.ndarray"]], "docarray.proto package": [[161, "docarray-proto-package"]], "docarray.proto.docarray_pb2 module": [[162, "module-docarray.proto.docarray_pb2"]], "docarray.proto.io package": [[163, "docarray-proto-io-package"]], "docarray.proto.io.ndarray module": [[164, "module-docarray.proto.io.ndarray"]], "docarray.proto.pb package": [[165, "docarray-proto-pb-package"]], "docarray.proto.pb.docarray_pb2 module": [[166, "module-docarray.proto.pb.docarray_pb2"]], "docarray.proto.pb2 package": [[167, "docarray-proto-pb2-package"]], "docarray.proto.pb2.docarray_pb2 module": [[168, "module-docarray.proto.pb2.docarray_pb2"]], "docarray.score package": [[169, "docarray-score-package"]], "docarray.score.data module": [[170, "module-docarray.score.data"]], "docarray.score.mixins package": [[171, "docarray-score-mixins-package"]], "docarray.score.mixins.property module": [[172, "module-docarray.score.mixins.property"]], "docarray.score.mixins.representer module": [[173, "module-docarray.score.mixins.representer"]], "docarray.typing package": [[174, "docarray-typing-package"]], "docarray": [[175, "docarray"]], "Changelog": [[176, "changelog"]], "0.11.0: change DocumentArrayInMemory\u2019s container to list": [[176, "change-documentarrayinmemory-s-container-to-list"]], "0.10.0: add high-level dataclass API to Document": [[176, "add-high-level-dataclass-api-to-document"]], "0.5.0: add storage backend to DocumentArray": [[176, "add-storage-backend-to-documentarray"]], "0.4.0: change on the DocumentArray serialization format": [[176, "change-on-the-documentarray-serialization-format"]], "0.3.0: change on the default JSON/dict serialization strategy": [[176, "change-on-the-default-json-dict-serialization-strategy"]], "0.2.0: change on the content field name": [[176, "change-on-the-content-field-name"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-unmute\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.563 2.069A.75.75 0 018 2.75v10.5a.75.75 0 01-1.238.57L3.472 11H1.75A1.75 1.75 0 010 9.25v-2.5C0 5.784.784 5 1.75 5h1.723l3.289-2.82a.75.75 0 01.801-.111zM6.5 4.38L4.238 6.319a.75.75 0 01-.488.181h-2a.25.25 0 00-.25.25v2.5c0 .138.112.25.25.25h2a.75.75 0 01.488.18L6.5 11.62V4.38zm6.096-2.038a.75.75 0 011.06 0 8 8 0 010 11.314.75.75 0 01-1.06-1.06 6.5 6.5 0 000-9.193.75.75 0 010-1.06v-.001zm-1.06 2.121a.75.75 0 10-1.061 1.061 3.5 3.5 0 010 4.95.75.75 0 101.06 1.06 5 5 0 000-7.07l.001-.001z\"></path></svg> Audio": [[177, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-unmute-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m7-563-2-069a-75-75-0-018-2-75v10-5a-75-75-0-01-1-238-57l3-472-11h1-75a1-75-1-75-0-010-9-25v-2-5c0-5-784-784-5-1-75-5h1-723l3-289-2-82a-75-75-0-01-801-111zm6-5-4-38l4-238-6-319a-75-75-0-01-488-181h-2a-25-25-0-00-25-25v2-5c0-138-112-25-25-25h2a-75-75-0-01-488-18l6-5-11-62v4-38zm6-096-2-038a-75-75-0-011-06-0-8-8-0-010-11-314-75-75-0-01-1-06-1-06-6-5-6-5-0-000-9-193-75-75-0-010-1-06v-001zm-1-06-2-121a-75-75-0-10-1-061-1-061-3-5-3-5-0-010-4-95-75-75-0-101-06-1-06-5-5-0-000-7-07l-001-001z-path-svg-audio"]], "Load .wav file": [[177, "load-wav-file"]], "Save as .wav file": [[177, "save-as-wav-file"]], "Example": [[177, "example"], [208, "example"]], "Other tools & libraries for audio data": [[177, "other-tools-libraries-for-audio-data"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-image\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M1.75 2.5a.25.25 0 00-.25.25v10.5c0 .138.112.25.25.25h.94a.76.76 0 01.03-.03l6.077-6.078a1.75 1.75 0 012.412-.06L14.5 10.31V2.75a.25.25 0 00-.25-.25H1.75zm12.5 11H4.81l5.048-5.047a.25.25 0 01.344-.009l4.298 3.889v.917a.25.25 0 01-.25.25zm1.75-.25V2.75A1.75 1.75 0 0014.25 1H1.75A1.75 1.75 0 000 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0016 13.25zM5.5 6a.5.5 0 11-1 0 .5.5 0 011 0zM7 6a2 2 0 11-4 0 2 2 0 014 0z\"></path></svg> Image": [[178, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-image-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m1-75-2-5a-25-25-0-00-25-25v10-5c0-138-112-25-25-25h-94a-76-76-0-01-03-03l6-077-6-078a1-75-1-75-0-012-412-06l14-5-10-31v2-75a-25-25-0-00-25-25h1-75zm12-5-11h4-81l5-048-5-047a-25-25-0-01-344-009l4-298-3-889v-917a-25-25-0-01-25-25zm1-75-25v2-75a1-75-1-75-0-0014-25-1h1-75a1-75-1-75-0-000-2-75v10-5c0-14-216-784-15-1-75-15h12-5a1-75-1-75-0-0016-13-25zm5-5-6a-5-5-0-11-1-0-5-5-0-011-0zm7-6a2-2-0-11-4-0-2-2-0-014-0z-path-svg-image"]], "Load image data": [[178, "load-image-data"]], "Simple image processing": [[178, "simple-image-processing"]], "Display image sprite": [[178, "display-image-sprite"], [215, "display-image-sprite"]], "Segment large complicated image into small ones": [[178, "segment-large-complicated-image-into-small-ones"]], "Data Types": [[179, "data-types"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-package\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M8.878.392a1.75 1.75 0 00-1.756 0l-5.25 3.045A1.75 1.75 0 001 4.951v6.098c0 .624.332 1.2.872 1.514l5.25 3.045a1.75 1.75 0 001.756 0l5.25-3.045c.54-.313.872-.89.872-1.514V4.951c0-.624-.332-1.2-.872-1.514L8.878.392zM7.875 1.69a.25.25 0 01.25 0l4.63 2.685L8 7.133 3.245 4.375l4.63-2.685zM2.5 5.677v5.372c0 .09.047.171.125.216l4.625 2.683V8.432L2.5 5.677zm6.25 8.271l4.625-2.683a.25.25 0 00.125-.216V5.677L8.75 8.432v5.516z\"></path></svg> 3D Mesh": [[180, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-package-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m8-878-392a1-75-1-75-0-00-1-756-0l-5-25-3-045a1-75-1-75-0-001-4-951v6-098c0-624-332-1-2-872-1-514l5-25-3-045a1-75-1-75-0-001-756-0l5-25-3-045c-54-313-872-89-872-1-514v4-951c0-624-332-1-2-872-1-514l8-878-392zm7-875-1-69a-25-25-0-01-25-0l4-63-2-685l8-7-133-3-245-4-375l4-63-2-685zm2-5-5-677v5-372c0-09-047-171-125-216l4-625-2-683v8-432l2-5-5-677zm6-25-8-271l4-625-2-683a-25-25-0-00-125-216v5-677l8-75-8-432v5-516z-path-svg-3d-mesh"]], "Vertices and faces representation": [[180, "vertices-and-faces-representation"]], "Point cloud representation": [[180, "point-cloud-representation"]], "RGB-D image representation": [[180, "rgb-d-image-representation"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-stack\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.122.392a1.75 1.75 0 011.756 0l5.003 2.902c.83.481.83 1.68 0 2.162L8.878 8.358a1.75 1.75 0 01-1.756 0L2.119 5.456a1.25 1.25 0 010-2.162L7.122.392zM8.125 1.69a.25.25 0 00-.25 0l-4.63 2.685 4.63 2.685a.25.25 0 00.25 0l4.63-2.685-4.63-2.685zM1.601 7.789a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0L1.874 8.814A.75.75 0 011.6 7.789zm0 3.5a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0l-5.248-3.044a.75.75 0 01-.273-1.025z\"></path></svg> Multi-modal": [[181, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-stack-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m7-122-392a1-75-1-75-0-011-756-0l5-003-2-902c-83-481-83-1-68-0-2-162l8-878-8-358a1-75-1-75-0-01-1-756-0l2-119-5-456a1-25-1-25-0-010-2-162l7-122-392zm8-125-1-69a-25-25-0-00-25-0l-4-63-2-685-4-63-2-685a-25-25-0-00-25-0l4-63-2-685-4-63-2-685zm1-601-7-789a-75-75-0-011-025-273l5-249-3-044a-25-25-0-00-25-0l5-249-3-044a-75-75-0-01-752-1-298l-5-248-3-044a1-75-1-75-0-01-1-756-0l1-874-8-814a-75-75-0-011-6-7-789zm0-3-5a-75-75-0-011-025-273l5-249-3-044a-25-25-0-00-25-0l5-249-3-044a-75-75-0-01-752-1-298l-5-248-3-044a1-75-1-75-0-01-1-756-0l-5-248-3-044a-75-75-0-01-273-1-025z-path-svg-multi-modal"]], "Model your data": [[181, "model-your-data"]], "Instantiate a Document": [[181, "instantiate-a-document"]], "Nested dataclasses and list types": [[181, "nested-dataclasses-and-list-types"]], "Access the data": [[181, "access-the-data"]], "Generate embeddings": [[181, "generate-embeddings"]], "Embed each modality": [[181, "embed-each-modality"]], "Embed parent Document": [[181, "embed-parent-document"]], "Perform search": [[181, "perform-search"]], "Find Document by modality embedding": [[181, "find-document-by-modality-embedding"]], "Find Document by combined embedding": [[181, "find-document-by-combined-embedding"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-table\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v3.585a.746.746 0 010 .83v8.085A1.75 1.75 0 0114.25 16H6.309a.748.748 0 01-1.118 0H1.75A1.75 1.75 0 010 14.25V6.165a.746.746 0 010-.83V1.75zM1.5 6.5v7.75c0 .138.112.25.25.25H5v-8H1.5zM5 5H1.5V1.75a.25.25 0 01.25-.25H5V5zm1.5 1.5v8h7.75a.25.25 0 00.25-.25V6.5h-8zm8-1.5h-8V1.5h7.75a.25.25 0 01.25.25V5z\"></path></svg> Table": [[182, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-table-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m0-1-75c0-784-784-0-1-75-0h12-5c15-216-0-16-784-16-1-75v3-585a-746-746-0-010-83v8-085a1-75-1-75-0-0114-25-16h6-309a-748-748-0-01-1-118-0h1-75a1-75-1-75-0-010-14-25v6-165a-746-746-0-010-83v1-75zm1-5-6-5v7-75c0-138-112-25-25-25h5v-8h1-5zm5-5h1-5v1-75a-25-25-0-01-25-25h5v5zm1-5-1-5v8h7-75a-25-25-0-00-25-25v6-5h-8zm8-1-5h-8v1-5h7-75a-25-25-0-01-25-25v5z-path-svg-table"]], "Load CSV table": [[182, "load-csv-table"]], "Save as CSV file": [[182, "save-as-csv-file"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-typography\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M6.21 8.5L4.574 3.594 2.857 8.5H6.21zm.5 1.5l.829 2.487a.75.75 0 001.423-.474L5.735 2.332a1.216 1.216 0 00-2.302-.018l-3.39 9.688a.75.75 0 001.415.496L2.332 10H6.71zm3.13-4.358C10.53 4.374 11.87 4 13 4c1.5 0 3 .939 3 2.601v5.649a.75.75 0 01-1.448.275C13.995 12.82 13.3 13 12.5 13c-.77 0-1.514-.231-2.078-.709-.577-.488-.922-1.199-.922-2.041 0-.694.265-1.411.887-1.944C11 7.78 11.88 7.5 13 7.5h1.5v-.899c0-.54-.5-1.101-1.5-1.101-.869 0-1.528.282-1.84.858a.75.75 0 11-1.32-.716zM14.5 9H13c-.881 0-1.375.22-1.637.444-.253.217-.363.5-.363.806 0 .408.155.697.39.896.249.21.63.354 1.11.354.732 0 1.26-.209 1.588-.449.35-.257.412-.495.412-.551V9z\"></path></svg> Text": [[183, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-typography-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m6-21-8-5l4-574-3-594-2-857-8-5h6-21zm-5-1-5l-829-2-487a-75-75-0-001-423-474l5-735-2-332a1-216-1-216-0-00-2-302-018l-3-39-9-688a-75-75-0-001-415-496l2-332-10h6-71zm3-13-4-358c10-53-4-374-11-87-4-13-4c1-5-0-3-939-3-2-601v5-649a-75-75-0-01-1-448-275c13-995-12-82-13-3-13-12-5-13c-77-0-1-514-231-2-078-709-577-488-922-1-199-922-2-041-0-694-265-1-411-887-1-944c11-7-78-11-88-7-5-13-7-5h1-5v-899c0-54-5-1-101-1-5-1-101-869-0-1-528-282-1-84-858a-75-75-0-11-1-32-716zm14-5-9h13c-881-0-1-375-22-1-637-444-253-217-363-5-363-806-0-408-155-697-39-896-249-21-63-354-1-11-354-732-0-1-26-209-1-588-449-35-257-412-495-412-551v9z-path-svg-text"]], "Segment long Documents": [[183, "segment-long-documents"]], "Convert text to ndarray": [[183, "convert-text-to-ndarray"]], "Convert ndarray back to text": [[183, "convert-ndarray-back-to-text"]], "Simple text matching with feature hashing": [[183, "simple-text-matching-with-feature-hashing"]], "Searching at chunk level with subindex": [[183, "searching-at-chunk-level-with-subindex"]], "Multi-modal Documents": [[183, null]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-device-camera-video\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M16 3.75a.75.75 0 00-1.136-.643L11 5.425V4.75A1.75 1.75 0 009.25 3h-7.5A1.75 1.75 0 000 4.75v6.5C0 12.216.784 13 1.75 13h7.5A1.75 1.75 0 0011 11.25v-.675l3.864 2.318A.75.75 0 0016 12.25v-8.5zm-5 5.075l3.5 2.1v-5.85l-3.5 2.1v1.65zM9.5 6.75v-2a.25.25 0 00-.25-.25h-7.5a.25.25 0 00-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-4.5z\"></path></svg> Video": [[184, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-device-camera-video-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m16-3-75a-75-75-0-00-1-136-643l11-5-425v4-75a1-75-1-75-0-009-25-3h-7-5a1-75-1-75-0-000-4-75v6-5c0-12-216-784-13-1-75-13h7-5a1-75-1-75-0-0011-11-25v-675l3-864-2-318a-75-75-0-0016-12-25v-8-5zm-5-5-075l3-5-2-1v-5-85l-3-5-2-1v1-65zm9-5-6-75v-2a-25-25-0-00-25-25h-7-5a-25-25-0-00-25-25v6-5c0-138-112-25-25-25h7-5a-25-25-0-00-25-25v-4-5z-path-svg-video"]], "Load video data": [[184, "load-video-data"]], "Key frame extraction": [[184, "key-frame-extraction"]], "Save as video file": [[184, "save-as-video-file"]], "Create Document from webcam": [[184, "create-document-from-webcam"]], "Data Management": [[185, "data-management"]], "Web Console": [[185, "web-console"]], "Python API": [[185, "python-api"]], "Push (create/update):": [[185, "push-create-update"]], "Pull (Read):": [[185, "pull-read"]], "List": [[185, "list"]], "Delete": [[185, "delete"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-rocket\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M14.064 0a8.75 8.75 0 00-6.187 2.563l-.459.458c-.314.314-.616.641-.904.979H3.31a1.75 1.75 0 00-1.49.833L.11 7.607a.75.75 0 00.418 1.11l3.102.954c.037.051.079.1.124.145l2.429 2.428c.046.046.094.088.145.125l.954 3.102a.75.75 0 001.11.418l2.774-1.707a1.75 1.75 0 00.833-1.49V9.485c.338-.288.665-.59.979-.904l.458-.459A8.75 8.75 0 0016 1.936V1.75A1.75 1.75 0 0014.25 0h-.186zM10.5 10.625c-.088.06-.177.118-.266.175l-2.35 1.521.548 1.783 1.949-1.2a.25.25 0 00.119-.213v-2.066zM3.678 8.116L5.2 5.766c.058-.09.117-.178.176-.266H3.309a.25.25 0 00-.213.119l-1.2 1.95 1.782.547zm5.26-4.493A7.25 7.25 0 0114.063 1.5h.186a.25.25 0 01.25.25v.186a7.25 7.25 0 01-2.123 5.127l-.459.458a15.21 15.21 0 01-2.499 2.02l-2.317 1.5-2.143-2.143 1.5-2.317a15.25 15.25 0 012.02-2.5l.458-.458h.002zM12 5a1 1 0 11-2 0 1 1 0 012 0zm-8.44 9.56a1.5 1.5 0 10-2.12-2.12c-.734.73-1.047 2.332-1.15 3.003a.23.23 0 00.265.265c.671-.103 2.273-.416 3.005-1.148z\"></path></svg> Cloud Support": [[186, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-rocket-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m14-064-0a8-75-8-75-0-00-6-187-2-563l-459-458c-314-314-616-641-904-979h3-31a1-75-1-75-0-00-1-49-833l-11-7-607a-75-75-0-00-418-1-11l3-102-954c-037-051-079-1-124-145l2-429-2-428c-046-046-094-088-145-125l-954-3-102a-75-75-0-001-11-418l2-774-1-707a1-75-1-75-0-00-833-1-49v9-485c-338-288-665-59-979-904l-458-459a8-75-8-75-0-0016-1-936v1-75a1-75-1-75-0-0014-25-0h-186zm10-5-10-625c-088-06-177-118-266-175l-2-35-1-521-548-1-783-1-949-1-2a-25-25-0-00-119-213v-2-066zm3-678-8-116l5-2-5-766c-058-09-117-178-176-266h3-309a-25-25-0-00-213-119l-1-2-1-95-1-782-547zm5-26-4-493a7-25-7-25-0-0114-063-1-5h-186a-25-25-0-01-25-25v-186a7-25-7-25-0-01-2-123-5-127l-459-458a15-21-15-21-0-01-2-499-2-02l-2-317-1-5-2-143-2-143-1-5-2-317a15-25-15-25-0-012-02-2-5l-458-458h-002zm12-5a1-1-0-11-2-0-1-1-0-012-0zm-8-44-9-56a1-5-1-5-0-10-2-12-2-12c-734-73-1-047-2-332-1-15-3-003a-23-23-0-00-265-265c-671-103-2-273-416-3-005-1-148z-path-svg-cloud-support"]], "Authentication": [[187, "authentication"]], "Login": [[187, "id1"]], "Logout": [[187, "logout"]], "Access Modality": [[188, "access-modality"]], "Return types": [[188, null]], "Document level access": [[188, "document-level-access"]], "Select nested fields": [[188, "select-nested-fields"], [188, "id1"]], "DocumentArray-level access": [[188, "documentarray-level-access"]], "Select multiple fields": [[188, "select-multiple-fields"]], "Slice dataclass objects": [[188, "slice-dataclass-objects"]], "Slice List[Type] fields": [[188, "slice-list-type-fields"]], "Dataclass decorator": [[189, "dataclass-decorator"]], "Annotate class fields": [[189, "annotate-class-fields"]], "Behavior of field annotation": [[189, "behavior-of-field-annotation"]], "Construct from/to Document": [[189, "construct-from-to-document"]], "Use field() for advanced configs": [[189, "use-field-for-advanced-configs"]], "What\u2019s next?": [[189, "what-s-next"], [191, "what-s-next"], [194, "what-s-next"], [197, "what-s-next"], [198, "what-s-next"], [199, "what-s-next"], [202, "what-s-next"], [203, "what-s-next"], [207, "what-s-next"]], "Process Modality": [[190, "process-modality"]], "Embed image and text with CLIP": [[190, "embed-image-and-text-with-clip"]], "Embed with CLIP-as-service": [[190, "embed-with-clip-as-service"]], "Dataclass": [[191, "dataclass"]], "What is multi-modality?": [[191, "what-is-multi-modality"]], "Understanding the problem": [[191, "understanding-the-problem"]], "Understanding the challenges": [[191, "understanding-the-challenges"]], "Support New Modality": [[192, "support-new-modality"]], "Create a new type": [[192, "create-a-new-type"]], "Override existing types": [[192, "override-existing-types"]], "Access Attributes": [[193, "access-attributes"], [201, "access-attributes"]], "Content attributes": [[193, "content-attributes"]], "Load content from a URI": [[193, "load-content-from-a-uri"]], "Convert content to data URI": [[193, null]], "Construct an empty Document": [[194, "construct-an-empty-document"]], "Construct with attributes": [[194, "construct-with-attributes"]], "Nested Document": [[194, "nested-document"]], "Unknown attribute handling": [[194, "unknown-attribute-handling"]], "Resolve unknown attributes with rules": [[194, "resolve-unknown-attributes-with-rules"]], "Copy from another Document": [[194, "copy-from-another-document"]], "Embedding": [[195, "embedding"]], "Fill embedding via neural network": [[195, "fill-embedding-via-neural-network"]], "On multiple Documents use DocumentArray": [[195, null], [195, null]], "Find nearest-neighbors": [[195, "find-nearest-neighbors"]], "Fluent Interface": [[196, "fluent-interface"]], "Methods": [[196, "methods"]], "BlobData": [[196, "blobdata"]], "ImageData": [[196, "imagedata"]], "Convert": [[196, "convert"]], "ContentProperty": [[196, "contentproperty"]], "TextData": [[196, "textdata"]], "SingletonSugar": [[196, "singletonsugar"]], "FeatureHash": [[196, "featurehash"]], "Porting": [[196, "porting"]], "Protobuf": [[196, "protobuf"]], "Pydantic": [[196, "pydantic"]], "Strawberry": [[196, "strawberry"]], "AudioData": [[196, "audiodata"]], "MeshData": [[196, "meshdata"]], "VideoData": [[196, "videodata"]], "UriFile": [[196, "urifile"]], "Document": [[197, "document"]], "Nested Structure": [[198, "nested-structure"]], "Serialization": [[199, "serialization"], [211, "serialization"]], "From/to JSON": [[199, "from-to-json"], [211, "from-to-json"]], "From/to arbitrary JSON": [[199, "from-to-arbitrary-json"]], "From/to bytes": [[199, "from-to-bytes"], [211, "from-to-bytes"]], "From/to base64": [[199, "from-to-base64"], [211, "from-to-base64"]], "From/to dict": [[199, "from-to-dict"]], "From/to Protobuf": [[199, "from-to-protobuf"], [211, "from-to-protobuf"]], "Visualization": [[200, "visualization"], [213, "visualization"]], "Attribute selector": [[201, "attribute-selector"]], "Auto-ravel on NdArray": [[201, "auto-ravel-on-ndarray"]], "Dunder syntax for nested attributes": [[201, "dunder-syntax-for-nested-attributes"]], "Content and embedding sugary attributes": [[201, "content-and-embedding-sugary-attributes"]], "Access Documents": [[202, "access-documents"]], "Basic indexing": [[202, "basic-indexing"]], "Index by Document id": [[202, "index-by-document-id"]], "Index by boolean mask": [[202, "index-by-boolean-mask"]], "Index by nested structure": [[202, "index-by-nested-structure"]], "Index by flatten": [[202, "index-by-flatten"]], "Other handy helpers": [[202, "other-handy-helpers"]], "Batching": [[202, "batching"]], "Sampling": [[202, "sampling"]], "Shuffling": [[202, "shuffling"]], "Splitting by .tags": [[202, "splitting-by-tags"]], "Construct an empty DocumentArray": [[203, "construct-an-empty-documentarray"]], "Construct with empty Documents": [[203, "construct-with-empty-documents"]], "Construct from list-like objects": [[203, "construct-from-list-like-objects"]], "Construct from multiple DocumentArray": [[203, "construct-from-multiple-documentarray"]], "Construct from a single Document": [[203, "construct-from-a-single-document"]], "Deep copy on elements": [[203, "deep-copy-on-elements"]], "Construct from local files": [[203, "construct-from-local-files"]], "Embed via Neural Network": [[204, "embed-via-neural-network"]], "Evaluate Matches": [[205, "evaluate-matches"]], "Evaluation against a ground truth array": [[205, "evaluation-against-a-ground-truth-array"]], "Document identifier": [[205, "document-identifier"]], "Evaluation via labels": [[205, "evaluation-via-labels"]], "Metric functions": [[205, "metric-functions"]], "The max_rel parameter": [[205, "the-max-rel-parameter"]], "Custom metrics": [[205, "custom-metrics"]], "Custom names": [[205, "custom-names"]], "Embed, match and evaluate at once": [[205, "embed-match-and-evaluate-at-once"]], "Batch-wise matching": [[205, "batch-wise-matching"]], "Sampling Queries": [[205, "sampling-queries"]], "Query by Conditions": [[206, "query-by-conditions"]], "filter query syntax": [[206, null]], "Filter with query operators": [[206, "filter-with-query-operators"]], "Combine multiple conditions": [[206, "combine-multiple-conditions"]], "DocumentArray": [[207, "documentarray"]], "Find Nearest Neighbors": [[208, "find-nearest-neighbors"]], "Difference between find and match": [[208, "difference-between-find-and-match"]], "Which side is the query on?": [[208, "which-side-is-the-query-on"]], "What\u2019s the query type?": [[208, "what-s-the-query-type"]], "What is the return?": [[208, "what-is-the-return"]], "GPU support": [[208, "gpu-support"]], "Parallelization": [[209, "parallelization"]], "When to choose process or thread backend?": [[209, null]], "Use map_batch() to overlap CPU & GPU computation": [[209, "use-map-batch-to-overlap-cpu-gpu-computation"]], "Why 129s? Why not 128s?": [[209, null]], "Use map_batch() to overlap CPU and network time": [[209, "use-map-batch-to-overlap-cpu-and-network-time"]], "Process via External Flow or Executor": [[210, "process-via-external-flow-or-executor"]], "Accept schemes": [[210, "accept-schemes"]], "Read more": [[210, "read-more"]], "Wire format of pickle and protobuf": [[211, "wire-format-of-pickle-and-protobuf"]], "From/to disk": [[211, "from-to-disk"]], "Stream large binary serialization from disk": [[211, "stream-large-binary-serialization-from-disk"]], "From/to list": [[211, "from-to-list"]], "From/to dataframe": [[211, "from-to-dataframe"]], "From/to cloud": [[211, "from-to-cloud"]], "Search over Nested Structure": [[212, "search-over-nested-structure"]], "Construct subindices": [[212, "construct-subindices"]], "Modify subindices": [[212, "modify-subindices"]], "Search through subindices": [[212, "search-through-subindices"]], "Summary in table": [[213, "summary-in-table"]], "Image sprites": [[213, "image-sprites"]], "Plot Matches": [[213, "plot-matches"]], "Embedding projector": [[213, "embedding-projector"]], "FastAPI/Pydantic": [[214, "fastapi-pydantic"]], "JSON Schema": [[214, "json-schema"]], "Validate incoming Document and DocumentArray objects": [[214, "validate-incoming-document-and-documentarray-objects"]], "Convert between pydantic model and DocArray objects": [[214, "convert-between-pydantic-model-and-docarray-objects"]], "Limit returned fields by response model": [[214, "limit-returned-fields-by-response-model"]], "Limit returned results recursively": [[214, "limit-returned-results-recursively"]], "Jupyter Notebook/Colab": [[215, "jupyter-notebook-colab"]], "Display Document": [[215, "display-document"]], "Display rich content": [[215, "display-rich-content"]], "Display DocumentArray": [[215, "display-documentarray"]], "Display embeddings": [[215, "display-embeddings"]], "PyCharm users": [[215, "pycharm-users"]], "Install": [[216, "install"], [218, "install"]], "On Apple Silicon": [[216, "on-apple-silicon"]], "Check terminal and device": [[216, "check-terminal-and-device"]], "Install Homebrew": [[216, "install-homebrew"]], "Install Python": [[216, "install-python"]], "Install dependencies wheels": [[216, "install-dependencies-wheels"]], "Install DocArray": [[216, "install-docarray"]], "What is DocArray?": [[217, "what-is-docarray"]], "Design": [[217, "design"]], "Comparing to Alternatives": [[217, "comparing-to-alternatives"]], "Hugging Face Datasets": [[217, "hugging-face-datasets"]], "To AwkwardArray": [[217, "to-awkwardarray"]], "To Zarr": [[217, "to-zarr"]], "To Jina Users": [[217, "to-jina-users"]], "Welcome to DocArray!": [[218, "welcome-to-docarray"]], "Protocol Documentation": [[219, "protocol-documentation"], [220, "protocol-documentation"]], "Table of Contents": [[219, "table-of-contents"], [220, "table-of-contents"]], "docarray.proto": [[219, "docarray-proto"], [220, "docarray-proto"]], "DenseNdArrayProto": [[219, "densendarrayproto"], [220, "densendarrayproto"]], "DocumentArrayProto": [[219, "documentarrayproto"], [220, "documentarrayproto"]], "DocumentProto": [[219, "documentproto"], [220, "documentproto"]], "DocumentProto.EvaluationsEntry": [[219, "documentproto-evaluationsentry"], [220, "documentproto-evaluationsentry"]], "DocumentProto.ScoresEntry": [[219, "documentproto-scoresentry"], [220, "documentproto-scoresentry"]], "NamedScoreProto": [[219, "namedscoreproto"], [220, "namedscoreproto"]], "NdArrayProto": [[219, "ndarrayproto"], [220, "ndarrayproto"]], "SparseNdArrayProto": [[219, "sparsendarrayproto"], [220, "sparsendarrayproto"]], "Scalar Value Types": [[219, "scalar-value-types"], [220, "scalar-value-types"]], "Rebuild Protobuf": [[220, "rebuild-protobuf"]]}, "indexentries": {"docarray": [[14, "module-docarray"]], "module": [[14, "module-docarray"], [15, "module-docarray.array"], [16, "module-docarray.array.annlite"], [17, "module-docarray.array.base"], [18, "module-docarray.array.chunk"], [19, "module-docarray.array.document"], [20, "module-docarray.array.elastic"], [21, "module-docarray.array.match"], [22, "module-docarray.array.memory"], [24, "module-docarray.array.mixins"], [25, "module-docarray.array.mixins.content"], [26, "module-docarray.array.mixins.dataloader"], [27, "module-docarray.array.mixins.dataloader.helper"], [28, "module-docarray.array.mixins.delitem"], [29, "module-docarray.array.mixins.embed"], [30, "module-docarray.array.mixins.empty"], [31, "module-docarray.array.mixins.evaluation"], [32, "module-docarray.array.mixins.find"], [33, "module-docarray.array.mixins.getattr"], [34, "module-docarray.array.mixins.getitem"], [35, "module-docarray.array.mixins.group"], [36, "module-docarray.array.mixins.io"], [37, "module-docarray.array.mixins.io.binary"], [38, "module-docarray.array.mixins.io.common"], [39, "module-docarray.array.mixins.io.csv"], [40, "module-docarray.array.mixins.io.dataframe"], [41, "module-docarray.array.mixins.io.from_gen"], [42, "module-docarray.array.mixins.io.json"], [43, "module-docarray.array.mixins.io.pbar"], [44, "module-docarray.array.mixins.io.pushpull"], [45, "module-docarray.array.mixins.match"], [46, "module-docarray.array.mixins.parallel"], [47, "module-docarray.array.mixins.plot"], [48, "module-docarray.array.mixins.post"], [49, "module-docarray.array.mixins.pydantic"], [50, "module-docarray.array.mixins.reduce"], [51, "module-docarray.array.mixins.sample"], [52, "module-docarray.array.mixins.setitem"], [53, "module-docarray.array.mixins.strawberry"], [54, "module-docarray.array.mixins.text"], [55, "module-docarray.array.mixins.traverse"], [56, "module-docarray.array.opensearch"], [57, "module-docarray.array.qdrant"], [58, "module-docarray.array.queryset"], [59, "module-docarray.array.queryset.lookup"], [60, "module-docarray.array.queryset.parser"], [61, "module-docarray.array.redis"], [62, "module-docarray.array.sqlite"], [63, "module-docarray.array.storage"], [64, "module-docarray.array.storage.annlite"], [65, "module-docarray.array.storage.annlite.backend"], [66, "module-docarray.array.storage.annlite.find"], [67, "module-docarray.array.storage.annlite.getsetdel"], [68, "module-docarray.array.storage.annlite.helper"], [69, "module-docarray.array.storage.annlite.seqlike"], [70, "module-docarray.array.storage.base"], [71, "module-docarray.array.storage.base.backend"], [72, "module-docarray.array.storage.base.getsetdel"], [73, "module-docarray.array.storage.base.helper"], [74, "module-docarray.array.storage.base.seqlike"], [75, "module-docarray.array.storage.elastic"], [76, "module-docarray.array.storage.elastic.backend"], [77, "module-docarray.array.storage.elastic.find"], [78, "module-docarray.array.storage.elastic.getsetdel"], [79, "module-docarray.array.storage.elastic.seqlike"], [80, "module-docarray.array.storage.memory"], [81, "module-docarray.array.storage.memory.backend"], [82, "module-docarray.array.storage.memory.find"], [83, "module-docarray.array.storage.memory.getsetdel"], [84, "module-docarray.array.storage.memory.seqlike"], [90, "module-docarray.array.storage.opensearch"], [91, "module-docarray.array.storage.opensearch.backend"], [92, "module-docarray.array.storage.opensearch.find"], [93, "module-docarray.array.storage.opensearch.getsetdel"], [94, "module-docarray.array.storage.opensearch.seqlike"], [95, "module-docarray.array.storage.qdrant"], [96, "module-docarray.array.storage.qdrant.backend"], [97, "module-docarray.array.storage.qdrant.find"], [98, "module-docarray.array.storage.qdrant.getsetdel"], [99, "module-docarray.array.storage.qdrant.helper"], [100, "module-docarray.array.storage.qdrant.seqlike"], [101, "module-docarray.array.storage.redis"], [102, "module-docarray.array.storage.redis.backend"], [103, "module-docarray.array.storage.redis.find"], [104, "module-docarray.array.storage.redis.getsetdel"], [105, "module-docarray.array.storage.redis.seqlike"], [106, "module-docarray.array.storage.registry"], [107, "module-docarray.array.storage.sqlite"], [108, "module-docarray.array.storage.sqlite.backend"], [109, "module-docarray.array.storage.sqlite.getsetdel"], [110, "module-docarray.array.storage.sqlite.helper"], [111, "module-docarray.array.storage.sqlite.seqlike"], [112, "module-docarray.array.storage.weaviate"], [113, "module-docarray.array.storage.weaviate.backend"], [114, "module-docarray.array.storage.weaviate.find"], [115, "module-docarray.array.storage.weaviate.getsetdel"], [116, "module-docarray.array.storage.weaviate.seqlike"], [117, "module-docarray.array.weaviate"], [118, "module-docarray.base"], [119, "module-docarray.dataclasses"], [120, "module-docarray.dataclasses.enums"], [121, "module-docarray.dataclasses.getter"], [122, "module-docarray.dataclasses.setter"], [123, "module-docarray.dataclasses.types"], [124, "module-docarray.document"], [125, "module-docarray.document.data"], [126, "module-docarray.document.generators"], [127, "module-docarray.document.mixins"], [128, "module-docarray.document.mixins.attribute"], [129, "module-docarray.document.mixins.audio"], [130, "module-docarray.document.mixins.blob"], [131, "module-docarray.document.mixins.content"], [132, "module-docarray.document.mixins.convert"], [133, "module-docarray.document.mixins.dump"], [134, "module-docarray.document.mixins.featurehash"], [135, "module-docarray.document.mixins.helper"], [136, "module-docarray.document.mixins.image"], [137, "module-docarray.document.mixins.mesh"], [138, "module-docarray.document.mixins.multimodal"], [139, "module-docarray.document.mixins.plot"], [140, "module-docarray.document.mixins.porting"], [141, "module-docarray.document.mixins.property"], [142, "module-docarray.document.mixins.protobuf"], [143, "module-docarray.document.mixins.pydantic"], [144, "module-docarray.document.mixins.rich_embedding"], [145, "module-docarray.document.mixins.strawberry"], [146, "module-docarray.document.mixins.sugar"], [147, "module-docarray.document.mixins.text"], [148, "module-docarray.document.mixins.video"], [149, "module-docarray.document.pydantic_model"], [150, "module-docarray.document.strawberry_type"], [151, "module-docarray.helper"], [152, "module-docarray.math"], [153, "module-docarray.math.distance"], [154, "module-docarray.math.distance.numpy"], [156, "module-docarray.math.distance.tensorflow"], [157, "module-docarray.math.distance.torch"], [158, "module-docarray.math.evaluation"], [159, "module-docarray.math.helper"], [160, "module-docarray.math.ndarray"], [161, "module-docarray.proto"], [162, "module-docarray.proto.docarray_pb2"], [163, "module-docarray.proto.io"], [164, "module-docarray.proto.io.ndarray"], [165, "module-docarray.proto.pb"], [166, "module-docarray.proto.pb.docarray_pb2"], [167, "module-docarray.proto.pb2"], [168, "module-docarray.proto.pb2.docarray_pb2"], [169, "module-docarray.score"], [170, "module-docarray.score.data"], [171, "module-docarray.score.mixins"], [172, "module-docarray.score.mixins.property"], [173, "module-docarray.score.mixins.representer"], [174, "module-docarray.typing"]], "docarray.array": [[15, "module-docarray.array"]], "annliteconfig (class in docarray.array.annlite)": [[16, "docarray.array.annlite.AnnliteConfig"]], "documentarrayannlite (class in docarray.array.annlite)": [[16, "docarray.array.annlite.DocumentArrayAnnlite"]], "type_map (docarray.array.annlite.documentarrayannlite attribute)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.TYPE_MAP"]], "append() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.append"]], "apply() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.apply"]], "apply_batch() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.apply_batch"]], "batch() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.batch"]], "batch_ids() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.batch_ids"]], "blobs (docarray.array.annlite.documentarrayannlite property)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.blobs"]], "clear() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.clear"]], "cloud_delete() (docarray.array.annlite.documentarrayannlite static method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.cloud_delete"]], "cloud_list() (docarray.array.annlite.documentarrayannlite static method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.cloud_list"]], "cloud_pull() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.cloud_pull"]], "cloud_push() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.cloud_push"]], "columns (docarray.array.annlite.annliteconfig attribute)": [[16, "docarray.array.annlite.AnnliteConfig.columns"]], "contents (docarray.array.annlite.documentarrayannlite property)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.contents"]], "count() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.count"]], "data_path (docarray.array.annlite.annliteconfig attribute)": [[16, "docarray.array.annlite.AnnliteConfig.data_path"]], "dataloader() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.dataloader"]], "docarray.array.annlite": [[16, "module-docarray.array.annlite"]], "ef_construction (docarray.array.annlite.annliteconfig attribute)": [[16, "docarray.array.annlite.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.annlite.annliteconfig attribute)": [[16, "docarray.array.annlite.AnnliteConfig.ef_search"]], "embed() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.embed"]], "embed_and_evaluate() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.embed_and_evaluate"]], "embeddings (docarray.array.annlite.documentarrayannlite property)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.embeddings"]], "empty() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.empty"]], "evaluate() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.evaluate"]], "extend() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.extend"]], "find() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.find"]], "flatten() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.flatten"]], "from_base64() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.from_base64"]], "from_bytes() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.from_bytes"]], "from_csv() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.from_csv"]], "from_dataframe() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.from_dataframe"]], "from_dict() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.from_dict"]], "from_files() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.from_files"]], "from_huggingface_datasets() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.from_huggingface_datasets"]], "from_json() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.from_json"]], "from_lines() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.from_lines"]], "from_list() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.from_list"]], "from_ndarray() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.from_ndarray"]], "from_ndjson() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.from_ndjson"]], "from_protobuf() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.from_protobuf"]], "from_pydantic_model() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.from_pydantic_model"]], "from_strawberry_type() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.from_strawberry_type"]], "get_json_schema() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.get_json_schema"]], "get_vocabulary() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.get_vocabulary"]], "index() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.index"]], "insert() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.insert"]], "list_like (docarray.array.annlite.annliteconfig attribute)": [[16, "docarray.array.annlite.AnnliteConfig.list_like"]], "load() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.load"]], "load_binary() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.load_binary"]], "load_csv() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.load_csv"]], "load_json() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.load_json"]], "map() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.map"]], "map_batch() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.map_batch"]], "match() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.match"]], "max_connection (docarray.array.annlite.annliteconfig attribute)": [[16, "docarray.array.annlite.AnnliteConfig.max_connection"]], "metric (docarray.array.annlite.annliteconfig attribute)": [[16, "docarray.array.annlite.AnnliteConfig.metric"]], "n_components (docarray.array.annlite.annliteconfig attribute)": [[16, "docarray.array.annlite.AnnliteConfig.n_components"]], "n_dim (docarray.array.annlite.annliteconfig attribute)": [[16, "docarray.array.annlite.AnnliteConfig.n_dim"]], "plot_embeddings() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.plot_embeddings"]], "plot_image_sprites() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.plot_image_sprites"]], "pop() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.pop"]], "post() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.post"]], "pull() (docarray.array.annlite.documentarrayannlite class method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.pull"]], "push() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.push"]], "reduce() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.reduce"]], "reduce_all() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.reduce_all"]], "remove() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.remove"]], "reverse() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.reverse"]], "root_id (docarray.array.annlite.annliteconfig attribute)": [[16, "docarray.array.annlite.AnnliteConfig.root_id"]], "sample() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.sample"]], "save() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.save"]], "save_binary() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.save_binary"]], "save_csv() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.save_csv"]], "save_embeddings_csv() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.save_embeddings_csv"]], "save_gif() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.save_gif"]], "save_json() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.save_json"]], "serialize_config (docarray.array.annlite.annliteconfig attribute)": [[16, "docarray.array.annlite.AnnliteConfig.serialize_config"]], "shuffle() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.shuffle"]], "split_by_tag() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.split_by_tag"]], "summary() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.summary"]], "sync() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.sync"]], "tensors (docarray.array.annlite.documentarrayannlite property)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.tensors"]], "texts (docarray.array.annlite.documentarrayannlite property)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.texts"]], "to_base64() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.to_base64"]], "to_bytes() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.to_bytes"]], "to_dataframe() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.to_dataframe"]], "to_dict() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.to_dict"]], "to_json() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.to_json"]], "to_list() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.to_list"]], "to_protobuf() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.to_protobuf"]], "to_pydantic_model() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.to_pydantic_model"]], "to_strawberry_type() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.to_strawberry_type"]], "traverse() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.traverse"]], "traverse_flat() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.traverse_flat"]], "traverse_flat_per_path() (docarray.array.annlite.documentarrayannlite method)": [[16, "docarray.array.annlite.DocumentArrayAnnlite.traverse_flat_per_path"]], "basedocumentarray (class in docarray.array.base)": [[17, "docarray.array.base.BaseDocumentArray"]], "append() (docarray.array.base.basedocumentarray method)": [[17, "docarray.array.base.BaseDocumentArray.append"]], "clear() (docarray.array.base.basedocumentarray method)": [[17, "docarray.array.base.BaseDocumentArray.clear"]], "count() (docarray.array.base.basedocumentarray method)": [[17, "docarray.array.base.BaseDocumentArray.count"]], "docarray.array.base": [[17, "module-docarray.array.base"]], "extend() (docarray.array.base.basedocumentarray method)": [[17, "docarray.array.base.BaseDocumentArray.extend"]], "index() (docarray.array.base.basedocumentarray method)": [[17, "docarray.array.base.BaseDocumentArray.index"]], "insert() (docarray.array.base.basedocumentarray method)": [[17, "docarray.array.base.BaseDocumentArray.insert"]], "pop() (docarray.array.base.basedocumentarray method)": [[17, "docarray.array.base.BaseDocumentArray.pop"]], "remove() (docarray.array.base.basedocumentarray method)": [[17, "docarray.array.base.BaseDocumentArray.remove"]], "reverse() (docarray.array.base.basedocumentarray method)": [[17, "docarray.array.base.BaseDocumentArray.reverse"]], "chunkarray (class in docarray.array.chunk)": [[18, "docarray.array.chunk.ChunkArray"]], "type_map (docarray.array.chunk.chunkarray attribute)": [[18, "docarray.array.chunk.ChunkArray.TYPE_MAP"]], "adjacency (docarray.array.chunk.chunkarray property)": [[18, "docarray.array.chunk.ChunkArray.adjacency"]], "append() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.append"]], "apply() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.apply"]], "apply_batch() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.apply_batch"]], "batch() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.batch"]], "batch_ids() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.batch_ids"]], "blobs (docarray.array.chunk.chunkarray property)": [[18, "docarray.array.chunk.ChunkArray.blobs"]], "clear() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.clear"]], "cloud_delete() (docarray.array.chunk.chunkarray static method)": [[18, "docarray.array.chunk.ChunkArray.cloud_delete"]], "cloud_list() (docarray.array.chunk.chunkarray static method)": [[18, "docarray.array.chunk.ChunkArray.cloud_list"]], "cloud_pull() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.cloud_pull"]], "cloud_push() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.cloud_push"]], "contents (docarray.array.chunk.chunkarray property)": [[18, "docarray.array.chunk.ChunkArray.contents"]], "count() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.count"]], "dataloader() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.dataloader"]], "docarray.array.chunk": [[18, "module-docarray.array.chunk"]], "embed() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.embed"]], "embed_and_evaluate() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.embed_and_evaluate"]], "embeddings (docarray.array.chunk.chunkarray property)": [[18, "docarray.array.chunk.ChunkArray.embeddings"]], "empty() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.empty"]], "evaluate() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.evaluate"]], "extend() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.extend"]], "find() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.find"]], "flatten() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.flatten"]], "from_base64() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.from_base64"]], "from_bytes() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.from_bytes"]], "from_csv() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.from_csv"]], "from_dataframe() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.from_dataframe"]], "from_dict() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.from_dict"]], "from_files() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.from_files"]], "from_huggingface_datasets() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.from_huggingface_datasets"]], "from_json() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.from_json"]], "from_lines() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.from_lines"]], "from_list() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.from_list"]], "from_ndarray() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.from_ndarray"]], "from_ndjson() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.from_ndjson"]], "from_protobuf() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.from_protobuf"]], "from_pydantic_model() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.from_strawberry_type"]], "get_json_schema() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.get_json_schema"]], "get_vocabulary() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.get_vocabulary"]], "granularity (docarray.array.chunk.chunkarray property)": [[18, "docarray.array.chunk.ChunkArray.granularity"]], "index() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.index"]], "insert() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.insert"]], "load() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.load"]], "load_binary() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.load_binary"]], "load_csv() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.load_csv"]], "load_json() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.load_json"]], "map() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.map"]], "map_batch() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.map_batch"]], "match() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.match"]], "plot_embeddings() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.plot_image_sprites"]], "pop() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.pop"]], "post() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.post"]], "pull() (docarray.array.chunk.chunkarray class method)": [[18, "docarray.array.chunk.ChunkArray.pull"]], "push() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.push"]], "reduce() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.reduce"]], "reduce_all() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.reduce_all"]], "reference_doc (docarray.array.chunk.chunkarray property)": [[18, "docarray.array.chunk.ChunkArray.reference_doc"]], "remove() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.remove"]], "reverse() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.reverse"]], "sample() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.sample"]], "save() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.save"]], "save_binary() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.save_binary"]], "save_csv() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.save_csv"]], "save_embeddings_csv() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.save_embeddings_csv"]], "save_gif() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.save_gif"]], "save_json() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.save_json"]], "shuffle() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.shuffle"]], "split_by_tag() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.split_by_tag"]], "summary() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.summary"]], "sync() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.sync"]], "tensors (docarray.array.chunk.chunkarray property)": [[18, "docarray.array.chunk.ChunkArray.tensors"]], "texts (docarray.array.chunk.chunkarray property)": [[18, "docarray.array.chunk.ChunkArray.texts"]], "to_base64() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.to_base64"]], "to_bytes() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.to_bytes"]], "to_dataframe() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.to_dataframe"]], "to_dict() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.to_dict"]], "to_json() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.to_json"]], "to_list() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.to_list"]], "to_protobuf() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.to_protobuf"]], "to_pydantic_model() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.to_strawberry_type"]], "traverse() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.traverse"]], "traverse_flat() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.chunk.chunkarray method)": [[18, "docarray.array.chunk.ChunkArray.traverse_flat_per_path"]], "documentarray (class in docarray.array.document)": [[19, "docarray.array.document.DocumentArray"]], "append() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.append"]], "apply() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.apply"]], "apply_batch() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.apply_batch"]], "batch() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.batch"]], "batch_ids() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.batch_ids"]], "blobs (docarray.array.document.documentarray property)": [[19, "docarray.array.document.DocumentArray.blobs"]], "clear() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.clear"]], "cloud_delete() (docarray.array.document.documentarray static method)": [[19, "docarray.array.document.DocumentArray.cloud_delete"]], "cloud_list() (docarray.array.document.documentarray static method)": [[19, "docarray.array.document.DocumentArray.cloud_list"]], "cloud_pull() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.cloud_pull"]], "cloud_push() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.cloud_push"]], "contents (docarray.array.document.documentarray property)": [[19, "docarray.array.document.DocumentArray.contents"]], "count() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.count"]], "dataloader() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.dataloader"]], "docarray.array.document": [[19, "module-docarray.array.document"]], "embed() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.embed"]], "embed_and_evaluate() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.embed_and_evaluate"]], "embeddings (docarray.array.document.documentarray property)": [[19, "docarray.array.document.DocumentArray.embeddings"]], "empty() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.empty"]], "evaluate() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.evaluate"]], "extend() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.extend"]], "find() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.find"]], "flatten() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.flatten"]], "from_base64() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.from_base64"]], "from_bytes() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.from_bytes"]], "from_csv() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.from_csv"]], "from_dataframe() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.from_dataframe"]], "from_dict() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.from_dict"]], "from_files() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.from_files"]], "from_huggingface_datasets() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.from_huggingface_datasets"]], "from_json() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.from_json"]], "from_lines() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.from_lines"]], "from_list() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.from_list"]], "from_ndarray() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.from_ndarray"]], "from_ndjson() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.from_ndjson"]], "from_protobuf() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.from_protobuf"]], "from_pydantic_model() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.from_strawberry_type"]], "get_json_schema() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.get_json_schema"]], "get_vocabulary() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.get_vocabulary"]], "index() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.index"]], "insert() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.insert"]], "load() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.load"]], "load_binary() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.load_binary"]], "load_csv() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.load_csv"]], "load_json() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.load_json"]], "map() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.map"]], "map_batch() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.map_batch"]], "match() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.match"]], "plot_embeddings() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.plot_image_sprites"]], "pop() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.pop"]], "post() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.post"]], "pull() (docarray.array.document.documentarray class method)": [[19, "docarray.array.document.DocumentArray.pull"]], "push() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.push"]], "reduce() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.reduce"]], "reduce_all() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.reduce_all"]], "remove() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.remove"]], "reverse() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.reverse"]], "sample() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.sample"]], "save() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.save"]], "save_binary() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.save_binary"]], "save_csv() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.save_csv"]], "save_embeddings_csv() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.save_embeddings_csv"]], "save_gif() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.save_gif"]], "save_json() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.save_json"]], "shuffle() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.shuffle"]], "split_by_tag() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.split_by_tag"]], "summary() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.summary"]], "tensors (docarray.array.document.documentarray property)": [[19, "docarray.array.document.DocumentArray.tensors"]], "texts (docarray.array.document.documentarray property)": [[19, "docarray.array.document.DocumentArray.texts"]], "to_base64() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.to_base64"]], "to_bytes() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.to_bytes"]], "to_dataframe() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.to_dataframe"]], "to_dict() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.to_dict"]], "to_json() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.to_json"]], "to_list() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.to_list"]], "to_protobuf() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.to_protobuf"]], "to_pydantic_model() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.to_strawberry_type"]], "traverse() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.traverse"]], "traverse_flat() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.document.documentarray method)": [[19, "docarray.array.document.DocumentArray.traverse_flat_per_path"]], "documentarrayelastic (class in docarray.array.elastic)": [[20, "docarray.array.elastic.DocumentArrayElastic"]], "elasticconfig (class in docarray.array.elastic)": [[20, "docarray.array.elastic.ElasticConfig"]], "max_es_returned_docs (docarray.array.elastic.documentarrayelastic attribute)": [[20, "docarray.array.elastic.DocumentArrayElastic.MAX_ES_RETURNED_DOCS"]], "type_map (docarray.array.elastic.documentarrayelastic attribute)": [[20, "docarray.array.elastic.DocumentArrayElastic.TYPE_MAP"]], "append() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.append"]], "apply() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.apply"]], "apply_batch() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.apply_batch"]], "batch() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.batch"]], "batch_ids() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.batch_ids"]], "batch_size (docarray.array.elastic.elasticconfig attribute)": [[20, "docarray.array.elastic.ElasticConfig.batch_size"]], "blobs (docarray.array.elastic.documentarrayelastic property)": [[20, "docarray.array.elastic.DocumentArrayElastic.blobs"]], "clear() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.clear"]], "cloud_delete() (docarray.array.elastic.documentarrayelastic static method)": [[20, "docarray.array.elastic.DocumentArrayElastic.cloud_delete"]], "cloud_list() (docarray.array.elastic.documentarrayelastic static method)": [[20, "docarray.array.elastic.DocumentArrayElastic.cloud_list"]], "cloud_pull() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.cloud_pull"]], "cloud_push() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.cloud_push"]], "columns (docarray.array.elastic.elasticconfig attribute)": [[20, "docarray.array.elastic.ElasticConfig.columns"]], "contents (docarray.array.elastic.documentarrayelastic property)": [[20, "docarray.array.elastic.DocumentArrayElastic.contents"]], "count() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.count"]], "dataloader() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.dataloader"]], "distance (docarray.array.elastic.elasticconfig attribute)": [[20, "docarray.array.elastic.ElasticConfig.distance"]], "docarray.array.elastic": [[20, "module-docarray.array.elastic"]], "ef_construction (docarray.array.elastic.elasticconfig attribute)": [[20, "docarray.array.elastic.ElasticConfig.ef_construction"]], "embed() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.embed"]], "embed_and_evaluate() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.embed_and_evaluate"]], "embeddings (docarray.array.elastic.documentarrayelastic property)": [[20, "docarray.array.elastic.DocumentArrayElastic.embeddings"]], "empty() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.empty"]], "es_config (docarray.array.elastic.elasticconfig attribute)": [[20, "docarray.array.elastic.ElasticConfig.es_config"]], "evaluate() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.evaluate"]], "extend() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.extend"]], "find() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.find"]], "flatten() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.flatten"]], "from_base64() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.from_base64"]], "from_bytes() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.from_bytes"]], "from_csv() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.from_csv"]], "from_dataframe() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.from_dataframe"]], "from_dict() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.from_dict"]], "from_files() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.from_files"]], "from_huggingface_datasets() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.from_huggingface_datasets"]], "from_json() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.from_json"]], "from_lines() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.from_lines"]], "from_list() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.from_list"]], "from_ndarray() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.from_ndarray"]], "from_ndjson() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.from_ndjson"]], "from_protobuf() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.from_protobuf"]], "from_pydantic_model() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.from_pydantic_model"]], "from_strawberry_type() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.from_strawberry_type"]], "get_json_schema() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.get_json_schema"]], "get_vocabulary() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.get_vocabulary"]], "hosts (docarray.array.elastic.elasticconfig attribute)": [[20, "docarray.array.elastic.ElasticConfig.hosts"]], "index() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.index"]], "index_name (docarray.array.elastic.elasticconfig attribute)": [[20, "docarray.array.elastic.ElasticConfig.index_name"]], "index_text (docarray.array.elastic.elasticconfig attribute)": [[20, "docarray.array.elastic.ElasticConfig.index_text"]], "insert() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.insert"]], "list_like (docarray.array.elastic.elasticconfig attribute)": [[20, "docarray.array.elastic.ElasticConfig.list_like"]], "load() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.load"]], "load_binary() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.load_binary"]], "load_csv() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.load_csv"]], "load_json() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.load_json"]], "m (docarray.array.elastic.elasticconfig attribute)": [[20, "docarray.array.elastic.ElasticConfig.m"]], "map() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.map"]], "map_batch() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.map_batch"]], "match() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.match"]], "n_dim (docarray.array.elastic.elasticconfig attribute)": [[20, "docarray.array.elastic.ElasticConfig.n_dim"]], "plot_embeddings() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.plot_embeddings"]], "plot_image_sprites() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.plot_image_sprites"]], "pop() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.pop"]], "post() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.post"]], "pull() (docarray.array.elastic.documentarrayelastic class method)": [[20, "docarray.array.elastic.DocumentArrayElastic.pull"]], "push() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.push"]], "reduce() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.reduce"]], "reduce_all() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.reduce_all"]], "remove() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.remove"]], "reverse() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.reverse"]], "root_id (docarray.array.elastic.elasticconfig attribute)": [[20, "docarray.array.elastic.ElasticConfig.root_id"]], "sample() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.sample"]], "save() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.save"]], "save_binary() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.save_binary"]], "save_csv() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.save_csv"]], "save_embeddings_csv() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.save_embeddings_csv"]], "save_gif() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.save_gif"]], "save_json() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.save_json"]], "shuffle() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.shuffle"]], "split_by_tag() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.split_by_tag"]], "summary() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.summary"]], "sync() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.sync"]], "tag_indices (docarray.array.elastic.elasticconfig attribute)": [[20, "docarray.array.elastic.ElasticConfig.tag_indices"]], "tensors (docarray.array.elastic.documentarrayelastic property)": [[20, "docarray.array.elastic.DocumentArrayElastic.tensors"]], "texts (docarray.array.elastic.documentarrayelastic property)": [[20, "docarray.array.elastic.DocumentArrayElastic.texts"]], "to_base64() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.to_base64"]], "to_bytes() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.to_bytes"]], "to_dataframe() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.to_dataframe"]], "to_dict() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.to_dict"]], "to_json() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.to_json"]], "to_list() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.to_list"]], "to_protobuf() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.to_protobuf"]], "to_pydantic_model() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.to_pydantic_model"]], "to_strawberry_type() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.to_strawberry_type"]], "traverse() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.traverse"]], "traverse_flat() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.traverse_flat"]], "traverse_flat_per_path() (docarray.array.elastic.documentarrayelastic method)": [[20, "docarray.array.elastic.DocumentArrayElastic.traverse_flat_per_path"]], "matcharray (class in docarray.array.match)": [[21, "docarray.array.match.MatchArray"]], "type_map (docarray.array.match.matcharray attribute)": [[21, "docarray.array.match.MatchArray.TYPE_MAP"]], "adjacency (docarray.array.match.matcharray property)": [[21, "docarray.array.match.MatchArray.adjacency"]], "append() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.append"]], "apply() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.apply"]], "apply_batch() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.apply_batch"]], "batch() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.batch"]], "batch_ids() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.batch_ids"]], "blobs (docarray.array.match.matcharray property)": [[21, "docarray.array.match.MatchArray.blobs"]], "clear() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.clear"]], "cloud_delete() (docarray.array.match.matcharray static method)": [[21, "docarray.array.match.MatchArray.cloud_delete"]], "cloud_list() (docarray.array.match.matcharray static method)": [[21, "docarray.array.match.MatchArray.cloud_list"]], "cloud_pull() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.cloud_pull"]], "cloud_push() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.cloud_push"]], "contents (docarray.array.match.matcharray property)": [[21, "docarray.array.match.MatchArray.contents"]], "count() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.count"]], "dataloader() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.dataloader"]], "docarray.array.match": [[21, "module-docarray.array.match"]], "embed() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.embed"]], "embed_and_evaluate() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.embed_and_evaluate"]], "embeddings (docarray.array.match.matcharray property)": [[21, "docarray.array.match.MatchArray.embeddings"]], "empty() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.empty"]], "evaluate() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.evaluate"]], "extend() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.extend"]], "find() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.find"]], "flatten() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.flatten"]], "from_base64() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.from_base64"]], "from_bytes() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.from_bytes"]], "from_csv() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.from_csv"]], "from_dataframe() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.from_dataframe"]], "from_dict() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.from_dict"]], "from_files() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.from_files"]], "from_huggingface_datasets() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.from_huggingface_datasets"]], "from_json() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.from_json"]], "from_lines() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.from_lines"]], "from_list() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.from_list"]], "from_ndarray() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.from_ndarray"]], "from_ndjson() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.from_ndjson"]], "from_protobuf() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.from_protobuf"]], "from_pydantic_model() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.from_strawberry_type"]], "get_json_schema() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.get_json_schema"]], "get_vocabulary() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.get_vocabulary"]], "granularity (docarray.array.match.matcharray property)": [[21, "docarray.array.match.MatchArray.granularity"]], "index() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.index"]], "insert() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.insert"]], "load() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.load"]], "load_binary() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.load_binary"]], "load_csv() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.load_csv"]], "load_json() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.load_json"]], "map() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.map"]], "map_batch() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.map_batch"]], "match() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.match"]], "plot_embeddings() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.plot_image_sprites"]], "pop() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.pop"]], "post() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.post"]], "pull() (docarray.array.match.matcharray class method)": [[21, "docarray.array.match.MatchArray.pull"]], "push() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.push"]], "reduce() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.reduce"]], "reduce_all() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.reduce_all"]], "reference_doc (docarray.array.match.matcharray property)": [[21, "docarray.array.match.MatchArray.reference_doc"]], "remove() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.remove"]], "reverse() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.reverse"]], "sample() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.sample"]], "save() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.save"]], "save_binary() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.save_binary"]], "save_csv() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.save_csv"]], "save_embeddings_csv() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.save_embeddings_csv"]], "save_gif() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.save_gif"]], "save_json() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.save_json"]], "shuffle() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.shuffle"]], "split_by_tag() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.split_by_tag"]], "summary() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.summary"]], "sync() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.sync"]], "tensors (docarray.array.match.matcharray property)": [[21, "docarray.array.match.MatchArray.tensors"]], "texts (docarray.array.match.matcharray property)": [[21, "docarray.array.match.MatchArray.texts"]], "to_base64() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.to_base64"]], "to_bytes() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.to_bytes"]], "to_dataframe() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.to_dataframe"]], "to_dict() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.to_dict"]], "to_json() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.to_json"]], "to_list() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.to_list"]], "to_protobuf() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.to_protobuf"]], "to_pydantic_model() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.to_strawberry_type"]], "traverse() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.traverse"]], "traverse_flat() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.match.matcharray method)": [[21, "docarray.array.match.MatchArray.traverse_flat_per_path"]], "documentarrayinmemory (class in docarray.array.memory)": [[22, "docarray.array.memory.DocumentArrayInMemory"]], "type_map (docarray.array.memory.documentarrayinmemory attribute)": [[22, "docarray.array.memory.DocumentArrayInMemory.TYPE_MAP"]], "append() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.append"]], "apply() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.apply"]], "apply_batch() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.apply_batch"]], "batch() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.batch"]], "batch_ids() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.batch_ids"]], "blobs (docarray.array.memory.documentarrayinmemory property)": [[22, "docarray.array.memory.DocumentArrayInMemory.blobs"]], "clear() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.clear"]], "cloud_delete() (docarray.array.memory.documentarrayinmemory static method)": [[22, "docarray.array.memory.DocumentArrayInMemory.cloud_delete"]], "cloud_list() (docarray.array.memory.documentarrayinmemory static method)": [[22, "docarray.array.memory.DocumentArrayInMemory.cloud_list"]], "cloud_pull() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.cloud_pull"]], "cloud_push() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.cloud_push"]], "contents (docarray.array.memory.documentarrayinmemory property)": [[22, "docarray.array.memory.DocumentArrayInMemory.contents"]], "count() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.count"]], "dataloader() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.dataloader"]], "docarray.array.memory": [[22, "module-docarray.array.memory"]], "embed() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.embed"]], "embed_and_evaluate() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.embed_and_evaluate"]], "embeddings (docarray.array.memory.documentarrayinmemory property)": [[22, "docarray.array.memory.DocumentArrayInMemory.embeddings"]], "empty() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.empty"]], "evaluate() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.evaluate"]], "extend() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.extend"]], "find() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.find"]], "flatten() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.flatten"]], "from_base64() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.from_base64"]], "from_bytes() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.from_bytes"]], "from_csv() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.from_csv"]], "from_dataframe() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.from_dataframe"]], "from_dict() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.from_dict"]], "from_files() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.from_files"]], "from_huggingface_datasets() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.from_huggingface_datasets"]], "from_json() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.from_json"]], "from_lines() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.from_lines"]], "from_list() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.from_list"]], "from_ndarray() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.from_ndarray"]], "from_ndjson() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.from_ndjson"]], "from_protobuf() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.from_protobuf"]], "from_pydantic_model() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.from_pydantic_model"]], "from_strawberry_type() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.from_strawberry_type"]], "get_json_schema() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.get_json_schema"]], "get_vocabulary() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.get_vocabulary"]], "index() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.index"]], "insert() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.insert"]], "load() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.load"]], "load_binary() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.load_binary"]], "load_csv() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.load_csv"]], "load_json() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.load_json"]], "map() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.map"]], "map_batch() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.map_batch"]], "match() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.match"]], "plot_embeddings() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.plot_embeddings"]], "plot_image_sprites() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.plot_image_sprites"]], "pop() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.pop"]], "post() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.post"]], "pull() (docarray.array.memory.documentarrayinmemory class method)": [[22, "docarray.array.memory.DocumentArrayInMemory.pull"]], "push() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.push"]], "reduce() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.reduce"]], "reduce_all() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.reduce_all"]], "remove() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.remove"]], "reverse() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.reverse"]], "sample() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.sample"]], "save() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.save"]], "save_binary() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.save_binary"]], "save_csv() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.save_csv"]], "save_embeddings_csv() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.save_embeddings_csv"]], "save_gif() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.save_gif"]], "save_json() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.save_json"]], "shuffle() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.shuffle"]], "split_by_tag() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.split_by_tag"]], "summary() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.summary"]], "sync() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.sync"]], "tensors (docarray.array.memory.documentarrayinmemory property)": [[22, "docarray.array.memory.DocumentArrayInMemory.tensors"]], "texts (docarray.array.memory.documentarrayinmemory property)": [[22, "docarray.array.memory.DocumentArrayInMemory.texts"]], "to_base64() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.to_base64"]], "to_bytes() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.to_bytes"]], "to_dataframe() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.to_dataframe"]], "to_dict() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.to_dict"]], "to_json() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.to_json"]], "to_list() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.to_list"]], "to_protobuf() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.to_protobuf"]], "to_pydantic_model() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.to_pydantic_model"]], "to_strawberry_type() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.to_strawberry_type"]], "traverse() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.traverse"]], "traverse_flat() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.traverse_flat"]], "traverse_flat_per_path() (docarray.array.memory.documentarrayinmemory method)": [[22, "docarray.array.memory.DocumentArrayInMemory.traverse_flat_per_path"]], "allmixins (class in docarray.array.mixins)": [[24, "docarray.array.mixins.AllMixins"]], "apply() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.apply"]], "apply_batch() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.apply_batch"]], "batch() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.batch"]], "batch_ids() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.batch_ids"]], "blobs (docarray.array.mixins.allmixins property)": [[24, "docarray.array.mixins.AllMixins.blobs"]], "cloud_delete() (docarray.array.mixins.allmixins static method)": [[24, "docarray.array.mixins.AllMixins.cloud_delete"]], "cloud_list() (docarray.array.mixins.allmixins static method)": [[24, "docarray.array.mixins.AllMixins.cloud_list"]], "cloud_pull() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.cloud_pull"]], "cloud_push() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.cloud_push"]], "contents (docarray.array.mixins.allmixins property)": [[24, "docarray.array.mixins.AllMixins.contents"]], "dataloader() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.dataloader"]], "docarray.array.mixins": [[24, "module-docarray.array.mixins"]], "embed() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.embed"]], "embed_and_evaluate() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.embed_and_evaluate"]], "embeddings (docarray.array.mixins.allmixins property)": [[24, "docarray.array.mixins.AllMixins.embeddings"]], "empty() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.empty"]], "evaluate() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.evaluate"]], "find() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.find"]], "flatten() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.flatten"]], "from_base64() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.from_base64"]], "from_bytes() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.from_bytes"]], "from_csv() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.from_csv"]], "from_dataframe() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.from_dataframe"]], "from_dict() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.from_dict"]], "from_files() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.from_files"]], "from_huggingface_datasets() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.from_huggingface_datasets"]], "from_json() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.from_json"]], "from_lines() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.from_lines"]], "from_list() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.from_list"]], "from_ndarray() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.from_ndarray"]], "from_ndjson() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.from_ndjson"]], "from_protobuf() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.from_protobuf"]], "from_pydantic_model() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.from_pydantic_model"]], "from_strawberry_type() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.from_strawberry_type"]], "get_json_schema() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.get_json_schema"]], "get_vocabulary() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.get_vocabulary"]], "load() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.load"]], "load_binary() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.load_binary"]], "load_csv() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.load_csv"]], "load_json() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.load_json"]], "map() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.map"]], "map_batch() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.map_batch"]], "match() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.match"]], "plot_embeddings() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.plot_embeddings"]], "plot_image_sprites() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.plot_image_sprites"]], "post() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.post"]], "pull() (docarray.array.mixins.allmixins class method)": [[24, "docarray.array.mixins.AllMixins.pull"]], "push() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.push"]], "reduce() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.reduce"]], "reduce_all() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.reduce_all"]], "sample() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.sample"]], "save() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.save"]], "save_binary() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.save_binary"]], "save_csv() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.save_csv"]], "save_embeddings_csv() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.save_embeddings_csv"]], "save_gif() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.save_gif"]], "save_json() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.save_json"]], "shuffle() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.shuffle"]], "split_by_tag() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.split_by_tag"]], "summary() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.summary"]], "tensors (docarray.array.mixins.allmixins property)": [[24, "docarray.array.mixins.AllMixins.tensors"]], "texts (docarray.array.mixins.allmixins property)": [[24, "docarray.array.mixins.AllMixins.texts"]], "to_base64() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.to_base64"]], "to_bytes() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.to_bytes"]], "to_dataframe() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.to_dataframe"]], "to_dict() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.to_dict"]], "to_json() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.to_json"]], "to_list() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.to_list"]], "to_protobuf() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.to_protobuf"]], "to_pydantic_model() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.to_pydantic_model"]], "to_strawberry_type() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.to_strawberry_type"]], "traverse() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.traverse"]], "traverse_flat() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.traverse_flat"]], "traverse_flat_per_path() (docarray.array.mixins.allmixins method)": [[24, "docarray.array.mixins.AllMixins.traverse_flat_per_path"]], "contentpropertymixin (class in docarray.array.mixins.content)": [[25, "docarray.array.mixins.content.ContentPropertyMixin"]], "blobs (docarray.array.mixins.content.contentpropertymixin property)": [[25, "docarray.array.mixins.content.ContentPropertyMixin.blobs"]], "contents (docarray.array.mixins.content.contentpropertymixin property)": [[25, "docarray.array.mixins.content.ContentPropertyMixin.contents"]], "docarray.array.mixins.content": [[25, "module-docarray.array.mixins.content"]], "embeddings (docarray.array.mixins.content.contentpropertymixin property)": [[25, "docarray.array.mixins.content.ContentPropertyMixin.embeddings"]], "tensors (docarray.array.mixins.content.contentpropertymixin property)": [[25, "docarray.array.mixins.content.ContentPropertyMixin.tensors"]], "texts (docarray.array.mixins.content.contentpropertymixin property)": [[25, "docarray.array.mixins.content.ContentPropertyMixin.texts"]], "dataloadermixin (class in docarray.array.mixins.dataloader)": [[26, "docarray.array.mixins.dataloader.DataLoaderMixin"]], "dataloader() (docarray.array.mixins.dataloader.dataloadermixin class method)": [[26, "docarray.array.mixins.dataloader.DataLoaderMixin.dataloader"]], "docarray.array.mixins.dataloader": [[26, "module-docarray.array.mixins.dataloader"]], "documentarrayloader (class in docarray.array.mixins.dataloader.helper)": [[27, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader"]], "apply() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[27, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.apply"]], "apply_batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[27, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.apply_batch"]], "batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[27, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.batch"]], "batch_ids() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[27, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.batch_ids"]], "docarray.array.mixins.dataloader.helper": [[27, "module-docarray.array.mixins.dataloader.helper"]], "map() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[27, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.map"]], "map_batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[27, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.map_batch"]], "split_by_tag() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[27, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.split_by_tag"]], "delitemmixin (class in docarray.array.mixins.delitem)": [[28, "docarray.array.mixins.delitem.DelItemMixin"]], "docarray.array.mixins.delitem": [[28, "module-docarray.array.mixins.delitem"]], "embedmixin (class in docarray.array.mixins.embed)": [[29, "docarray.array.mixins.embed.EmbedMixin"]], "docarray.array.mixins.embed": [[29, "module-docarray.array.mixins.embed"]], "embed() (docarray.array.mixins.embed.embedmixin method)": [[29, "docarray.array.mixins.embed.EmbedMixin.embed"]], "get_framework() (in module docarray.array.mixins.embed)": [[29, "docarray.array.mixins.embed.get_framework"]], "emptymixin (class in docarray.array.mixins.empty)": [[30, "docarray.array.mixins.empty.EmptyMixin"]], "docarray.array.mixins.empty": [[30, "module-docarray.array.mixins.empty"]], "empty() (docarray.array.mixins.empty.emptymixin class method)": [[30, "docarray.array.mixins.empty.EmptyMixin.empty"]], "evaluationmixin (class in docarray.array.mixins.evaluation)": [[31, "docarray.array.mixins.evaluation.EvaluationMixin"]], "docarray.array.mixins.evaluation": [[31, "module-docarray.array.mixins.evaluation"]], "embed_and_evaluate() (docarray.array.mixins.evaluation.evaluationmixin method)": [[31, "docarray.array.mixins.evaluation.EvaluationMixin.embed_and_evaluate"]], "evaluate() (docarray.array.mixins.evaluation.evaluationmixin method)": [[31, "docarray.array.mixins.evaluation.EvaluationMixin.evaluate"]], "findmixin (class in docarray.array.mixins.find)": [[32, "docarray.array.mixins.find.FindMixin"]], "docarray.array.mixins.find": [[32, "module-docarray.array.mixins.find"]], "find() (docarray.array.mixins.find.findmixin method)": [[32, "docarray.array.mixins.find.FindMixin.find"]], "getattributemixin (class in docarray.array.mixins.getattr)": [[33, "docarray.array.mixins.getattr.GetAttributeMixin"]], "docarray.array.mixins.getattr": [[33, "module-docarray.array.mixins.getattr"]], "getitemmixin (class in docarray.array.mixins.getitem)": [[34, "docarray.array.mixins.getitem.GetItemMixin"]], "docarray.array.mixins.getitem": [[34, "module-docarray.array.mixins.getitem"]], "groupmixin (class in docarray.array.mixins.group)": [[35, "docarray.array.mixins.group.GroupMixin"]], "batch() (docarray.array.mixins.group.groupmixin method)": [[35, "docarray.array.mixins.group.GroupMixin.batch"]], "batch_ids() (docarray.array.mixins.group.groupmixin method)": [[35, "docarray.array.mixins.group.GroupMixin.batch_ids"]], "docarray.array.mixins.group": [[35, "module-docarray.array.mixins.group"]], "split_by_tag() (docarray.array.mixins.group.groupmixin method)": [[35, "docarray.array.mixins.group.GroupMixin.split_by_tag"]], "docarray.array.mixins.io": [[36, "module-docarray.array.mixins.io"]], "binaryiomixin (class in docarray.array.mixins.io.binary)": [[37, "docarray.array.mixins.io.binary.BinaryIOMixin"]], "lazyrequestreader (class in docarray.array.mixins.io.binary)": [[37, "docarray.array.mixins.io.binary.LazyRequestReader"]], "docarray.array.mixins.io.binary": [[37, "module-docarray.array.mixins.io.binary"]], "from_base64() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[37, "docarray.array.mixins.io.binary.BinaryIOMixin.from_base64"]], "from_bytes() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[37, "docarray.array.mixins.io.binary.BinaryIOMixin.from_bytes"]], "from_protobuf() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[37, "docarray.array.mixins.io.binary.BinaryIOMixin.from_protobuf"]], "load_binary() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[37, "docarray.array.mixins.io.binary.BinaryIOMixin.load_binary"]], "save_binary() (docarray.array.mixins.io.binary.binaryiomixin method)": [[37, "docarray.array.mixins.io.binary.BinaryIOMixin.save_binary"]], "to_base64() (docarray.array.mixins.io.binary.binaryiomixin method)": [[37, "docarray.array.mixins.io.binary.BinaryIOMixin.to_base64"]], "to_bytes() (docarray.array.mixins.io.binary.binaryiomixin method)": [[37, "docarray.array.mixins.io.binary.BinaryIOMixin.to_bytes"]], "to_protobuf() (docarray.array.mixins.io.binary.binaryiomixin method)": [[37, "docarray.array.mixins.io.binary.BinaryIOMixin.to_protobuf"]], "commoniomixin (class in docarray.array.mixins.io.common)": [[38, "docarray.array.mixins.io.common.CommonIOMixin"]], "docarray.array.mixins.io.common": [[38, "module-docarray.array.mixins.io.common"]], "load() (docarray.array.mixins.io.common.commoniomixin class method)": [[38, "docarray.array.mixins.io.common.CommonIOMixin.load"]], "save() (docarray.array.mixins.io.common.commoniomixin method)": [[38, "docarray.array.mixins.io.common.CommonIOMixin.save"]], "csviomixin (class in docarray.array.mixins.io.csv)": [[39, "docarray.array.mixins.io.csv.CsvIOMixin"]], "docarray.array.mixins.io.csv": [[39, "module-docarray.array.mixins.io.csv"]], "load_csv() (docarray.array.mixins.io.csv.csviomixin class method)": [[39, "docarray.array.mixins.io.csv.CsvIOMixin.load_csv"]], "save_csv() (docarray.array.mixins.io.csv.csviomixin method)": [[39, "docarray.array.mixins.io.csv.CsvIOMixin.save_csv"]], "save_embeddings_csv() (docarray.array.mixins.io.csv.csviomixin method)": [[39, "docarray.array.mixins.io.csv.CsvIOMixin.save_embeddings_csv"]], "dataframeiomixin (class in docarray.array.mixins.io.dataframe)": [[40, "docarray.array.mixins.io.dataframe.DataframeIOMixin"]], "docarray.array.mixins.io.dataframe": [[40, "module-docarray.array.mixins.io.dataframe"]], "from_dataframe() (docarray.array.mixins.io.dataframe.dataframeiomixin class method)": [[40, "docarray.array.mixins.io.dataframe.DataframeIOMixin.from_dataframe"]], "to_dataframe() (docarray.array.mixins.io.dataframe.dataframeiomixin method)": [[40, "docarray.array.mixins.io.dataframe.DataframeIOMixin.to_dataframe"]], "fromgeneratormixin (class in docarray.array.mixins.io.from_gen)": [[41, "docarray.array.mixins.io.from_gen.FromGeneratorMixin"]], "docarray.array.mixins.io.from_gen": [[41, "module-docarray.array.mixins.io.from_gen"]], "from_csv() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[41, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_csv"]], "from_files() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[41, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_files"]], "from_huggingface_datasets() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[41, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_huggingface_datasets"]], "from_lines() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[41, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_lines"]], "from_ndarray() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[41, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_ndarray"]], "from_ndjson() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[41, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_ndjson"]], "jsoniomixin (class in docarray.array.mixins.io.json)": [[42, "docarray.array.mixins.io.json.JsonIOMixin"]], "docarray.array.mixins.io.json": [[42, "module-docarray.array.mixins.io.json"]], "from_dict() (docarray.array.mixins.io.json.jsoniomixin class method)": [[42, "docarray.array.mixins.io.json.JsonIOMixin.from_dict"]], "from_json() (docarray.array.mixins.io.json.jsoniomixin class method)": [[42, "docarray.array.mixins.io.json.JsonIOMixin.from_json"]], "from_list() (docarray.array.mixins.io.json.jsoniomixin class method)": [[42, "docarray.array.mixins.io.json.JsonIOMixin.from_list"]], "load_json() (docarray.array.mixins.io.json.jsoniomixin class method)": [[42, "docarray.array.mixins.io.json.JsonIOMixin.load_json"]], "save_json() (docarray.array.mixins.io.json.jsoniomixin method)": [[42, "docarray.array.mixins.io.json.JsonIOMixin.save_json"]], "to_dict() (docarray.array.mixins.io.json.jsoniomixin method)": [[42, "docarray.array.mixins.io.json.JsonIOMixin.to_dict"]], "to_json() (docarray.array.mixins.io.json.jsoniomixin method)": [[42, "docarray.array.mixins.io.json.JsonIOMixin.to_json"]], "to_list() (docarray.array.mixins.io.json.jsoniomixin method)": [[42, "docarray.array.mixins.io.json.JsonIOMixin.to_list"]], "qpscolumn (class in docarray.array.mixins.io.pbar)": [[43, "docarray.array.mixins.io.pbar.QPSColumn"]], "docarray.array.mixins.io.pbar": [[43, "module-docarray.array.mixins.io.pbar"]], "get_pbar() (in module docarray.array.mixins.io.pbar)": [[43, "docarray.array.mixins.io.pbar.get_pbar"]], "get_progressbar() (in module docarray.array.mixins.io.pbar)": [[43, "docarray.array.mixins.io.pbar.get_progressbar"]], "get_table_column() (docarray.array.mixins.io.pbar.qpscolumn method)": [[43, "docarray.array.mixins.io.pbar.QPSColumn.get_table_column"]], "max_refresh (docarray.array.mixins.io.pbar.qpscolumn attribute)": [[43, "docarray.array.mixins.io.pbar.QPSColumn.max_refresh"]], "render() (docarray.array.mixins.io.pbar.qpscolumn method)": [[43, "docarray.array.mixins.io.pbar.QPSColumn.render"]], "pushpullmixin (class in docarray.array.mixins.io.pushpull)": [[44, "docarray.array.mixins.io.pushpull.PushPullMixin"]], "cloud_delete() (docarray.array.mixins.io.pushpull.pushpullmixin static method)": [[44, "docarray.array.mixins.io.pushpull.PushPullMixin.cloud_delete"]], "cloud_list() (docarray.array.mixins.io.pushpull.pushpullmixin static method)": [[44, "docarray.array.mixins.io.pushpull.PushPullMixin.cloud_list"]], "cloud_pull() (docarray.array.mixins.io.pushpull.pushpullmixin class method)": [[44, "docarray.array.mixins.io.pushpull.PushPullMixin.cloud_pull"]], "cloud_push() (docarray.array.mixins.io.pushpull.pushpullmixin method)": [[44, "docarray.array.mixins.io.pushpull.PushPullMixin.cloud_push"]], "docarray.array.mixins.io.pushpull": [[44, "module-docarray.array.mixins.io.pushpull"]], "pull() (docarray.array.mixins.io.pushpull.pushpullmixin class method)": [[44, "docarray.array.mixins.io.pushpull.PushPullMixin.pull"]], "push() (docarray.array.mixins.io.pushpull.pushpullmixin method)": [[44, "docarray.array.mixins.io.pushpull.PushPullMixin.push"]], "matchmixin (class in docarray.array.mixins.match)": [[45, "docarray.array.mixins.match.MatchMixin"]], "docarray.array.mixins.match": [[45, "module-docarray.array.mixins.match"]], "match() (docarray.array.mixins.match.matchmixin method)": [[45, "docarray.array.mixins.match.MatchMixin.match"]], "parallelmixin (class in docarray.array.mixins.parallel)": [[46, "docarray.array.mixins.parallel.ParallelMixin"]], "apply() (docarray.array.mixins.parallel.parallelmixin method)": [[46, "docarray.array.mixins.parallel.ParallelMixin.apply"]], "apply_batch() (docarray.array.mixins.parallel.parallelmixin method)": [[46, "docarray.array.mixins.parallel.ParallelMixin.apply_batch"]], "docarray.array.mixins.parallel": [[46, "module-docarray.array.mixins.parallel"]], "map() (docarray.array.mixins.parallel.parallelmixin method)": [[46, "docarray.array.mixins.parallel.ParallelMixin.map"]], "map_batch() (docarray.array.mixins.parallel.parallelmixin method)": [[46, "docarray.array.mixins.parallel.ParallelMixin.map_batch"]], "plotmixin (class in docarray.array.mixins.plot)": [[47, "docarray.array.mixins.plot.PlotMixin"]], "docarray.array.mixins.plot": [[47, "module-docarray.array.mixins.plot"]], "plot_embeddings() (docarray.array.mixins.plot.plotmixin method)": [[47, "docarray.array.mixins.plot.PlotMixin.plot_embeddings"]], "plot_image_sprites() (docarray.array.mixins.plot.plotmixin method)": [[47, "docarray.array.mixins.plot.PlotMixin.plot_image_sprites"]], "save_gif() (docarray.array.mixins.plot.plotmixin method)": [[47, "docarray.array.mixins.plot.PlotMixin.save_gif"]], "summary() (docarray.array.mixins.plot.plotmixin method)": [[47, "docarray.array.mixins.plot.PlotMixin.summary"]], "postmixin (class in docarray.array.mixins.post)": [[48, "docarray.array.mixins.post.PostMixin"]], "docarray.array.mixins.post": [[48, "module-docarray.array.mixins.post"]], "post() (docarray.array.mixins.post.postmixin method)": [[48, "docarray.array.mixins.post.PostMixin.post"]], "pydanticmixin (class in docarray.array.mixins.pydantic)": [[49, "docarray.array.mixins.pydantic.PydanticMixin"]], "docarray.array.mixins.pydantic": [[49, "module-docarray.array.mixins.pydantic"]], "from_pydantic_model() (docarray.array.mixins.pydantic.pydanticmixin class method)": [[49, "docarray.array.mixins.pydantic.PydanticMixin.from_pydantic_model"]], "get_json_schema() (docarray.array.mixins.pydantic.pydanticmixin class method)": [[49, "docarray.array.mixins.pydantic.PydanticMixin.get_json_schema"]], "to_pydantic_model() (docarray.array.mixins.pydantic.pydanticmixin method)": [[49, "docarray.array.mixins.pydantic.PydanticMixin.to_pydantic_model"]], "reducemixin (class in docarray.array.mixins.reduce)": [[50, "docarray.array.mixins.reduce.ReduceMixin"]], "docarray.array.mixins.reduce": [[50, "module-docarray.array.mixins.reduce"]], "reduce() (docarray.array.mixins.reduce.reducemixin method)": [[50, "docarray.array.mixins.reduce.ReduceMixin.reduce"]], "reduce_all() (docarray.array.mixins.reduce.reducemixin method)": [[50, "docarray.array.mixins.reduce.ReduceMixin.reduce_all"]], "samplemixin (class in docarray.array.mixins.sample)": [[51, "docarray.array.mixins.sample.SampleMixin"]], "docarray.array.mixins.sample": [[51, "module-docarray.array.mixins.sample"]], "sample() (docarray.array.mixins.sample.samplemixin method)": [[51, "docarray.array.mixins.sample.SampleMixin.sample"]], "shuffle() (docarray.array.mixins.sample.samplemixin method)": [[51, "docarray.array.mixins.sample.SampleMixin.shuffle"]], "setitemmixin (class in docarray.array.mixins.setitem)": [[52, "docarray.array.mixins.setitem.SetItemMixin"]], "docarray.array.mixins.setitem": [[52, "module-docarray.array.mixins.setitem"]], "strawberrymixin (class in docarray.array.mixins.strawberry)": [[53, "docarray.array.mixins.strawberry.StrawberryMixin"]], "docarray.array.mixins.strawberry": [[53, "module-docarray.array.mixins.strawberry"]], "from_strawberry_type() (docarray.array.mixins.strawberry.strawberrymixin class method)": [[53, "docarray.array.mixins.strawberry.StrawberryMixin.from_strawberry_type"]], "to_strawberry_type() (docarray.array.mixins.strawberry.strawberrymixin method)": [[53, "docarray.array.mixins.strawberry.StrawberryMixin.to_strawberry_type"]], "texttoolsmixin (class in docarray.array.mixins.text)": [[54, "docarray.array.mixins.text.TextToolsMixin"]], "docarray.array.mixins.text": [[54, "module-docarray.array.mixins.text"]], "get_vocabulary() (docarray.array.mixins.text.texttoolsmixin method)": [[54, "docarray.array.mixins.text.TextToolsMixin.get_vocabulary"]], "traversemixin (class in docarray.array.mixins.traverse)": [[55, "docarray.array.mixins.traverse.TraverseMixin"]], "docarray.array.mixins.traverse": [[55, "module-docarray.array.mixins.traverse"]], "flatten() (docarray.array.mixins.traverse.traversemixin method)": [[55, "docarray.array.mixins.traverse.TraverseMixin.flatten"]], "traverse() (docarray.array.mixins.traverse.traversemixin method)": [[55, "docarray.array.mixins.traverse.TraverseMixin.traverse"]], "traverse_flat() (docarray.array.mixins.traverse.traversemixin method)": [[55, "docarray.array.mixins.traverse.TraverseMixin.traverse_flat"]], "traverse_flat_per_path() (docarray.array.mixins.traverse.traversemixin method)": [[55, "docarray.array.mixins.traverse.TraverseMixin.traverse_flat_per_path"]], "documentarrayopensearch (class in docarray.array.opensearch)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch"]], "max_opensearch_returned_docs (docarray.array.opensearch.documentarrayopensearch attribute)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.MAX_OPENSEARCH_RETURNED_DOCS"]], "opensearchconfig (class in docarray.array.opensearch)": [[56, "docarray.array.opensearch.OpenSearchConfig"]], "type_map (docarray.array.opensearch.documentarrayopensearch attribute)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.TYPE_MAP"]], "algorithm (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.algorithm"]], "append() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.append"]], "apply() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.apply"]], "apply_batch() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.apply_batch"]], "batch() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.batch"]], "batch_ids() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.batch_ids"]], "batch_size (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.batch_size"]], "blobs (docarray.array.opensearch.documentarrayopensearch property)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.blobs"]], "clear() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.clear"]], "cloud_delete() (docarray.array.opensearch.documentarrayopensearch static method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.cloud_delete"]], "cloud_list() (docarray.array.opensearch.documentarrayopensearch static method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.cloud_list"]], "cloud_pull() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.cloud_pull"]], "cloud_push() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.cloud_push"]], "columns (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.columns"]], "contents (docarray.array.opensearch.documentarrayopensearch property)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.contents"]], "count() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.count"]], "dataloader() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.dataloader"]], "distance (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.distance"]], "docarray.array.opensearch": [[56, "module-docarray.array.opensearch"]], "ef_construction (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.ef_construction"]], "ef_search (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.ef_search"]], "embed() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.embed"]], "embed_and_evaluate() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.embed_and_evaluate"]], "embeddings (docarray.array.opensearch.documentarrayopensearch property)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.embeddings"]], "empty() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.empty"]], "encoder (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.encoder"]], "engine (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.engine"]], "evaluate() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.evaluate"]], "extend() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.extend"]], "find() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.find"]], "flatten() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.flatten"]], "from_base64() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.from_base64"]], "from_bytes() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.from_bytes"]], "from_csv() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.from_csv"]], "from_dataframe() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.from_dataframe"]], "from_dict() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.from_dict"]], "from_files() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.from_files"]], "from_huggingface_datasets() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.from_huggingface_datasets"]], "from_json() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.from_json"]], "from_lines() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.from_lines"]], "from_list() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.from_list"]], "from_ndarray() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.from_ndarray"]], "from_ndjson() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.from_ndjson"]], "from_protobuf() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.from_protobuf"]], "from_pydantic_model() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.from_pydantic_model"]], "from_strawberry_type() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.from_strawberry_type"]], "get_json_schema() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.get_json_schema"]], "get_vocabulary() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.get_vocabulary"]], "hosts (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.hosts"]], "index() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.index"]], "index_name (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.index_name"]], "index_text (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.index_text"]], "insert() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.insert"]], "list_like (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.list_like"]], "load() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.load"]], "load_binary() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.load_binary"]], "load_csv() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.load_csv"]], "load_json() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.load_json"]], "m (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.m"]], "map() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.map"]], "map_batch() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.map_batch"]], "match() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.match"]], "n_dim (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.n_dim"]], "opensearch_config (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.opensearch_config"]], "plot_embeddings() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.plot_embeddings"]], "plot_image_sprites() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.plot_image_sprites"]], "pop() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.pop"]], "post() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.post"]], "pull() (docarray.array.opensearch.documentarrayopensearch class method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.pull"]], "push() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.push"]], "reduce() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.reduce"]], "reduce_all() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.reduce_all"]], "remove() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.remove"]], "reverse() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.reverse"]], "root_id (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.root_id"]], "sample() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.sample"]], "save() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.save"]], "save_binary() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.save_binary"]], "save_csv() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.save_csv"]], "save_embeddings_csv() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.save_embeddings_csv"]], "save_gif() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.save_gif"]], "save_json() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.save_json"]], "shuffle() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.shuffle"]], "split_by_tag() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.split_by_tag"]], "summary() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.summary"]], "sync() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.sync"]], "tag_indices (docarray.array.opensearch.opensearchconfig attribute)": [[56, "docarray.array.opensearch.OpenSearchConfig.tag_indices"]], "tensors (docarray.array.opensearch.documentarrayopensearch property)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.tensors"]], "texts (docarray.array.opensearch.documentarrayopensearch property)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.texts"]], "to_base64() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.to_base64"]], "to_bytes() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.to_bytes"]], "to_dataframe() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.to_dataframe"]], "to_dict() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.to_dict"]], "to_json() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.to_json"]], "to_list() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.to_list"]], "to_protobuf() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.to_protobuf"]], "to_pydantic_model() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.to_pydantic_model"]], "to_strawberry_type() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.to_strawberry_type"]], "traverse() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.traverse"]], "traverse_flat() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.traverse_flat"]], "traverse_flat_per_path() (docarray.array.opensearch.documentarrayopensearch method)": [[56, "docarray.array.opensearch.DocumentArrayOpenSearch.traverse_flat_per_path"]], "documentarrayqdrant (class in docarray.array.qdrant)": [[57, "docarray.array.qdrant.DocumentArrayQdrant"]], "qdrantconfig (class in docarray.array.qdrant)": [[57, "docarray.array.qdrant.QdrantConfig"]], "type_map (docarray.array.qdrant.documentarrayqdrant attribute)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.TYPE_MAP"]], "api_key (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.api_key"]], "append() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.append"]], "apply() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.apply"]], "apply_batch() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.apply_batch"]], "batch() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.batch"]], "batch_ids() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.batch_ids"]], "blobs (docarray.array.qdrant.documentarrayqdrant property)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.blobs"]], "clear() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.clear"]], "client (docarray.array.qdrant.documentarrayqdrant property)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.client"]], "cloud_delete() (docarray.array.qdrant.documentarrayqdrant static method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.cloud_delete"]], "cloud_list() (docarray.array.qdrant.documentarrayqdrant static method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.cloud_list"]], "cloud_pull() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.cloud_pull"]], "cloud_push() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.cloud_push"]], "collection_name (docarray.array.qdrant.documentarrayqdrant property)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.collection_name"]], "collection_name (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.collection_name"]], "collection_name_meta (docarray.array.qdrant.documentarrayqdrant property)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.collection_name_meta"]], "columns (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.columns"]], "config (docarray.array.qdrant.documentarrayqdrant property)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.config"]], "contents (docarray.array.qdrant.documentarrayqdrant property)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.contents"]], "count() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.count"]], "dataloader() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.dataloader"]], "distance (docarray.array.qdrant.documentarrayqdrant property)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.distance"]], "distance (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.distance"]], "docarray.array.qdrant": [[57, "module-docarray.array.qdrant"]], "ef_construct (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.ef_construct"]], "embed() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.embed"]], "embed_and_evaluate() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.embed_and_evaluate"]], "embeddings (docarray.array.qdrant.documentarrayqdrant property)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.embeddings"]], "empty() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.empty"]], "evaluate() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.evaluate"]], "extend() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.extend"]], "find() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.find"]], "flatten() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.flatten"]], "from_base64() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.from_base64"]], "from_bytes() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.from_bytes"]], "from_csv() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.from_csv"]], "from_dataframe() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.from_dataframe"]], "from_dict() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.from_dict"]], "from_files() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.from_files"]], "from_huggingface_datasets() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.from_huggingface_datasets"]], "from_json() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.from_json"]], "from_lines() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.from_lines"]], "from_list() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.from_list"]], "from_ndarray() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.from_ndarray"]], "from_ndjson() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.from_ndjson"]], "from_protobuf() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.from_protobuf"]], "from_pydantic_model() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.from_pydantic_model"]], "from_strawberry_type() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.from_strawberry_type"]], "full_scan_threshold (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.full_scan_threshold"]], "get_json_schema() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.get_json_schema"]], "get_vocabulary() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.get_vocabulary"]], "grpc_port (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.grpc_port"]], "host (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.host"]], "https (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.https"]], "index() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.index"]], "insert() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.insert"]], "list_like (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.list_like"]], "load() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.load"]], "load_binary() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.load_binary"]], "load_csv() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.load_csv"]], "load_json() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.load_json"]], "m (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.m"]], "map() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.map"]], "map_batch() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.map_batch"]], "match() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.match"]], "n_dim (docarray.array.qdrant.documentarrayqdrant property)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.n_dim"]], "n_dim (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.n_dim"]], "plot_embeddings() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.plot_embeddings"]], "plot_image_sprites() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.plot_image_sprites"]], "pop() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.pop"]], "port (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.port"]], "post() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.post"]], "prefer_grpc (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.prefer_grpc"]], "pull() (docarray.array.qdrant.documentarrayqdrant class method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.pull"]], "push() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.push"]], "reduce() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.reduce"]], "reduce_all() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.reduce_all"]], "remove() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.remove"]], "reverse() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.reverse"]], "root_id (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.root_id"]], "sample() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.sample"]], "save() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.save"]], "save_binary() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.save_binary"]], "save_csv() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.save_csv"]], "save_embeddings_csv() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.save_embeddings_csv"]], "save_gif() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.save_gif"]], "save_json() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.save_json"]], "scan() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.scan"]], "scroll_batch_size (docarray.array.qdrant.documentarrayqdrant property)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.scroll_batch_size"]], "scroll_batch_size (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.scroll_batch_size"]], "serialization_config (docarray.array.qdrant.documentarrayqdrant property)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.serialization_config"]], "serialize_config (docarray.array.qdrant.documentarrayqdrant property)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.serialize_config"]], "serialize_config (docarray.array.qdrant.qdrantconfig attribute)": [[57, "docarray.array.qdrant.QdrantConfig.serialize_config"]], "shuffle() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.shuffle"]], "split_by_tag() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.split_by_tag"]], "summary() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.summary"]], "sync() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.sync"]], "tensors (docarray.array.qdrant.documentarrayqdrant property)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.tensors"]], "texts (docarray.array.qdrant.documentarrayqdrant property)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.texts"]], "to_base64() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.to_base64"]], "to_bytes() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.to_bytes"]], "to_dataframe() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.to_dataframe"]], "to_dict() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.to_dict"]], "to_json() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.to_json"]], "to_list() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.to_list"]], "to_protobuf() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.to_protobuf"]], "to_pydantic_model() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.to_pydantic_model"]], "to_strawberry_type() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.to_strawberry_type"]], "traverse() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.traverse"]], "traverse_flat() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.traverse_flat"]], "traverse_flat_per_path() (docarray.array.qdrant.documentarrayqdrant method)": [[57, "docarray.array.qdrant.DocumentArrayQdrant.traverse_flat_per_path"]], "docarray.array.queryset": [[58, "module-docarray.array.queryset"]], "lookupleaf (class in docarray.array.queryset.lookup)": [[59, "docarray.array.queryset.lookup.LookupLeaf"]], "lookupnode (class in docarray.array.queryset.lookup)": [[59, "docarray.array.queryset.lookup.LookupNode"]], "lookuptreeelem (class in docarray.array.queryset.lookup)": [[59, "docarray.array.queryset.lookup.LookupTreeElem"]], "lookupyerror": [[59, "docarray.array.queryset.lookup.LookupyError"]], "q (in module docarray.array.queryset.lookup)": [[59, "docarray.array.queryset.lookup.Q"]], "add_child() (docarray.array.queryset.lookup.lookupnode method)": [[59, "docarray.array.queryset.lookup.LookupNode.add_child"]], "args (docarray.array.queryset.lookup.lookupyerror attribute)": [[59, "docarray.array.queryset.lookup.LookupyError.args"]], "docarray.array.queryset.lookup": [[59, "module-docarray.array.queryset.lookup"]], "dunder_partition() (in module docarray.array.queryset.lookup)": [[59, "docarray.array.queryset.lookup.dunder_partition"]], "evaluate() (docarray.array.queryset.lookup.lookupleaf method)": [[59, "docarray.array.queryset.lookup.LookupLeaf.evaluate"]], "evaluate() (docarray.array.queryset.lookup.lookupnode method)": [[59, "docarray.array.queryset.lookup.LookupNode.evaluate"]], "evaluate() (docarray.array.queryset.lookup.lookuptreeelem method)": [[59, "docarray.array.queryset.lookup.LookupTreeElem.evaluate"]], "guard_q() (in module docarray.array.queryset.lookup)": [[59, "docarray.array.queryset.lookup.guard_Q"]], "guard_iter() (in module docarray.array.queryset.lookup)": [[59, "docarray.array.queryset.lookup.guard_iter"]], "guard_list() (in module docarray.array.queryset.lookup)": [[59, "docarray.array.queryset.lookup.guard_list"]], "guard_str() (in module docarray.array.queryset.lookup)": [[59, "docarray.array.queryset.lookup.guard_str"]], "guard_type() (in module docarray.array.queryset.lookup)": [[59, "docarray.array.queryset.lookup.guard_type"]], "iff() (in module docarray.array.queryset.lookup)": [[59, "docarray.array.queryset.lookup.iff"]], "iff_not_none() (in module docarray.array.queryset.lookup)": [[59, "docarray.array.queryset.lookup.iff_not_none"]], "lookup() (in module docarray.array.queryset.lookup)": [[59, "docarray.array.queryset.lookup.lookup"]], "with_traceback() (docarray.array.queryset.lookup.lookupyerror method)": [[59, "docarray.array.queryset.lookup.LookupyError.with_traceback"]], "queryparser (class in docarray.array.queryset.parser)": [[60, "docarray.array.queryset.parser.QueryParser"]], "docarray.array.queryset.parser": [[60, "module-docarray.array.queryset.parser"]], "evaluate() (docarray.array.queryset.parser.queryparser method)": [[60, "docarray.array.queryset.parser.QueryParser.evaluate"]], "documentarrayredis (class in docarray.array.redis)": [[61, "docarray.array.redis.DocumentArrayRedis"]], "redisconfig (class in docarray.array.redis)": [[61, "docarray.array.redis.RedisConfig"]], "type_map (docarray.array.redis.documentarrayredis attribute)": [[61, "docarray.array.redis.DocumentArrayRedis.TYPE_MAP"]], "append() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.append"]], "apply() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.apply"]], "apply_batch() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.apply_batch"]], "batch() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.batch"]], "batch_ids() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.batch_ids"]], "batch_size (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.batch_size"]], "blobs (docarray.array.redis.documentarrayredis property)": [[61, "docarray.array.redis.DocumentArrayRedis.blobs"]], "block_size (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.block_size"]], "clear() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.clear"]], "cloud_delete() (docarray.array.redis.documentarrayredis static method)": [[61, "docarray.array.redis.DocumentArrayRedis.cloud_delete"]], "cloud_list() (docarray.array.redis.documentarrayredis static method)": [[61, "docarray.array.redis.DocumentArrayRedis.cloud_list"]], "cloud_pull() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.cloud_pull"]], "cloud_push() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.cloud_push"]], "columns (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.columns"]], "contents (docarray.array.redis.documentarrayredis property)": [[61, "docarray.array.redis.DocumentArrayRedis.contents"]], "count() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.count"]], "dataloader() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.dataloader"]], "distance (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.distance"]], "docarray.array.redis": [[61, "module-docarray.array.redis"]], "ef_construction (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.ef_construction"]], "ef_runtime (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.ef_runtime"]], "embed() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.embed"]], "embed_and_evaluate() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.embed_and_evaluate"]], "embeddings (docarray.array.redis.documentarrayredis property)": [[61, "docarray.array.redis.DocumentArrayRedis.embeddings"]], "empty() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.empty"]], "evaluate() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.evaluate"]], "extend() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.extend"]], "find() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.find"]], "flatten() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.flatten"]], "from_base64() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.from_base64"]], "from_bytes() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.from_bytes"]], "from_csv() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.from_csv"]], "from_dataframe() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.from_dataframe"]], "from_dict() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.from_dict"]], "from_files() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.from_files"]], "from_huggingface_datasets() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.from_huggingface_datasets"]], "from_json() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.from_json"]], "from_lines() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.from_lines"]], "from_list() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.from_list"]], "from_ndarray() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.from_ndarray"]], "from_ndjson() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.from_ndjson"]], "from_protobuf() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.from_protobuf"]], "from_pydantic_model() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.from_pydantic_model"]], "from_strawberry_type() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.from_strawberry_type"]], "get_json_schema() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.get_json_schema"]], "get_vocabulary() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.get_vocabulary"]], "host (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.host"]], "index() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.index"]], "index_name (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.index_name"]], "index_text (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.index_text"]], "initial_cap (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.initial_cap"]], "insert() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.insert"]], "language (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.language"]], "list_like (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.list_like"]], "load() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.load"]], "load_binary() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.load_binary"]], "load_csv() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.load_csv"]], "load_json() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.load_json"]], "m (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.m"]], "map() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.map"]], "map_batch() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.map_batch"]], "match() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.match"]], "method (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.method"]], "n_dim (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.n_dim"]], "plot_embeddings() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.plot_embeddings"]], "plot_image_sprites() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.plot_image_sprites"]], "pop() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.pop"]], "port (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.port"]], "post() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.post"]], "pull() (docarray.array.redis.documentarrayredis class method)": [[61, "docarray.array.redis.DocumentArrayRedis.pull"]], "push() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.push"]], "redis_config (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.redis_config"]], "reduce() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.reduce"]], "reduce_all() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.reduce_all"]], "remove() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.remove"]], "reverse() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.reverse"]], "root_id (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.root_id"]], "sample() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.sample"]], "save() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.save"]], "save_binary() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.save_binary"]], "save_csv() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.save_csv"]], "save_embeddings_csv() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.save_embeddings_csv"]], "save_gif() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.save_gif"]], "save_json() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.save_json"]], "shuffle() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.shuffle"]], "split_by_tag() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.split_by_tag"]], "summary() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.summary"]], "sync() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.sync"]], "tag_indices (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.tag_indices"]], "tensors (docarray.array.redis.documentarrayredis property)": [[61, "docarray.array.redis.DocumentArrayRedis.tensors"]], "texts (docarray.array.redis.documentarrayredis property)": [[61, "docarray.array.redis.DocumentArrayRedis.texts"]], "to_base64() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.to_base64"]], "to_bytes() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.to_bytes"]], "to_dataframe() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.to_dataframe"]], "to_dict() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.to_dict"]], "to_json() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.to_json"]], "to_list() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.to_list"]], "to_protobuf() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.to_protobuf"]], "to_pydantic_model() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.to_pydantic_model"]], "to_strawberry_type() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.to_strawberry_type"]], "traverse() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.traverse"]], "traverse_flat() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.traverse_flat"]], "traverse_flat_per_path() (docarray.array.redis.documentarrayredis method)": [[61, "docarray.array.redis.DocumentArrayRedis.traverse_flat_per_path"]], "update_schema (docarray.array.redis.redisconfig attribute)": [[61, "docarray.array.redis.RedisConfig.update_schema"]], "documentarraysqlite (class in docarray.array.sqlite)": [[62, "docarray.array.sqlite.DocumentArraySqlite"]], "sqliteconfig (class in docarray.array.sqlite)": [[62, "docarray.array.sqlite.SqliteConfig"]], "type_map (docarray.array.sqlite.documentarraysqlite attribute)": [[62, "docarray.array.sqlite.DocumentArraySqlite.TYPE_MAP"]], "append() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.append"]], "apply() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.apply"]], "apply_batch() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.apply_batch"]], "batch() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.batch"]], "batch_ids() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.batch_ids"]], "blobs (docarray.array.sqlite.documentarraysqlite property)": [[62, "docarray.array.sqlite.DocumentArraySqlite.blobs"]], "clear() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.clear"]], "cloud_delete() (docarray.array.sqlite.documentarraysqlite static method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.cloud_delete"]], "cloud_list() (docarray.array.sqlite.documentarraysqlite static method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.cloud_list"]], "cloud_pull() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.cloud_pull"]], "cloud_push() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.cloud_push"]], "conn_config (docarray.array.sqlite.sqliteconfig attribute)": [[62, "docarray.array.sqlite.SqliteConfig.conn_config"]], "connection (docarray.array.sqlite.sqliteconfig attribute)": [[62, "docarray.array.sqlite.SqliteConfig.connection"]], "contents (docarray.array.sqlite.documentarraysqlite property)": [[62, "docarray.array.sqlite.DocumentArraySqlite.contents"]], "count() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.count"]], "dataloader() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.dataloader"]], "docarray.array.sqlite": [[62, "module-docarray.array.sqlite"]], "embed() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.embed"]], "embed_and_evaluate() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.embed_and_evaluate"]], "embeddings (docarray.array.sqlite.documentarraysqlite property)": [[62, "docarray.array.sqlite.DocumentArraySqlite.embeddings"]], "empty() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.empty"]], "evaluate() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.evaluate"]], "extend() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.extend"]], "find() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.find"]], "flatten() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.flatten"]], "from_base64() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.from_base64"]], "from_bytes() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.from_bytes"]], "from_csv() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.from_csv"]], "from_dataframe() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.from_dataframe"]], "from_dict() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.from_dict"]], "from_files() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.from_files"]], "from_huggingface_datasets() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.from_huggingface_datasets"]], "from_json() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.from_json"]], "from_lines() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.from_lines"]], "from_list() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.from_list"]], "from_ndarray() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.from_ndarray"]], "from_ndjson() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.from_ndjson"]], "from_protobuf() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.from_protobuf"]], "from_pydantic_model() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.from_pydantic_model"]], "from_strawberry_type() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.from_strawberry_type"]], "get_json_schema() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.get_json_schema"]], "get_vocabulary() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.get_vocabulary"]], "index() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.index"]], "insert() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.insert"]], "journal_mode (docarray.array.sqlite.sqliteconfig attribute)": [[62, "docarray.array.sqlite.SqliteConfig.journal_mode"]], "list_like (docarray.array.sqlite.sqliteconfig attribute)": [[62, "docarray.array.sqlite.SqliteConfig.list_like"]], "load() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.load"]], "load_binary() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.load_binary"]], "load_csv() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.load_csv"]], "load_json() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.load_json"]], "map() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.map"]], "map_batch() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.map_batch"]], "match() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.match"]], "plot_embeddings() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.plot_embeddings"]], "plot_image_sprites() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.plot_image_sprites"]], "pop() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.pop"]], "post() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.post"]], "pull() (docarray.array.sqlite.documentarraysqlite class method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.pull"]], "push() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.push"]], "reduce() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.reduce"]], "reduce_all() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.reduce_all"]], "remove() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.remove"]], "reverse() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.reverse"]], "root_id (docarray.array.sqlite.sqliteconfig attribute)": [[62, "docarray.array.sqlite.SqliteConfig.root_id"]], "sample() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.sample"]], "save() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.save"]], "save_binary() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.save_binary"]], "save_csv() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.save_csv"]], "save_embeddings_csv() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.save_embeddings_csv"]], "save_gif() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.save_gif"]], "save_json() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.save_json"]], "schema_version (docarray.array.sqlite.documentarraysqlite attribute)": [[62, "docarray.array.sqlite.DocumentArraySqlite.schema_version"]], "serialize_config (docarray.array.sqlite.sqliteconfig attribute)": [[62, "docarray.array.sqlite.SqliteConfig.serialize_config"]], "shuffle() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.shuffle"]], "split_by_tag() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.split_by_tag"]], "summary() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.summary"]], "sync() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.sync"]], "synchronous (docarray.array.sqlite.sqliteconfig attribute)": [[62, "docarray.array.sqlite.SqliteConfig.synchronous"]], "table_name (docarray.array.sqlite.sqliteconfig attribute)": [[62, "docarray.array.sqlite.SqliteConfig.table_name"]], "tensors (docarray.array.sqlite.documentarraysqlite property)": [[62, "docarray.array.sqlite.DocumentArraySqlite.tensors"]], "texts (docarray.array.sqlite.documentarraysqlite property)": [[62, "docarray.array.sqlite.DocumentArraySqlite.texts"]], "to_base64() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.to_base64"]], "to_bytes() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.to_bytes"]], "to_dataframe() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.to_dataframe"]], "to_dict() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.to_dict"]], "to_json() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.to_json"]], "to_list() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.to_list"]], "to_protobuf() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.to_protobuf"]], "to_pydantic_model() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.to_pydantic_model"]], "to_strawberry_type() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.to_strawberry_type"]], "traverse() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.traverse"]], "traverse_flat() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.traverse_flat"]], "traverse_flat_per_path() (docarray.array.sqlite.documentarraysqlite method)": [[62, "docarray.array.sqlite.DocumentArraySqlite.traverse_flat_per_path"]], "docarray.array.storage": [[63, "module-docarray.array.storage"]], "annliteconfig (class in docarray.array.storage.annlite)": [[64, "docarray.array.storage.annlite.AnnliteConfig"]], "storagemixins (class in docarray.array.storage.annlite)": [[64, "docarray.array.storage.annlite.StorageMixins"]], "type_map (docarray.array.storage.annlite.storagemixins attribute)": [[64, "docarray.array.storage.annlite.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.annlite.storagemixins method)": [[64, "docarray.array.storage.annlite.StorageMixins.append"]], "clear() (docarray.array.storage.annlite.storagemixins method)": [[64, "docarray.array.storage.annlite.StorageMixins.clear"]], "columns (docarray.array.storage.annlite.annliteconfig attribute)": [[64, "docarray.array.storage.annlite.AnnliteConfig.columns"]], "count() (docarray.array.storage.annlite.storagemixins method)": [[64, "docarray.array.storage.annlite.StorageMixins.count"]], "data_path (docarray.array.storage.annlite.annliteconfig attribute)": [[64, "docarray.array.storage.annlite.AnnliteConfig.data_path"]], "docarray.array.storage.annlite": [[64, "module-docarray.array.storage.annlite"]], "ef_construction (docarray.array.storage.annlite.annliteconfig attribute)": [[64, "docarray.array.storage.annlite.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.storage.annlite.annliteconfig attribute)": [[64, "docarray.array.storage.annlite.AnnliteConfig.ef_search"]], "extend() (docarray.array.storage.annlite.storagemixins method)": [[64, "docarray.array.storage.annlite.StorageMixins.extend"]], "index() (docarray.array.storage.annlite.storagemixins method)": [[64, "docarray.array.storage.annlite.StorageMixins.index"]], "insert() (docarray.array.storage.annlite.storagemixins method)": [[64, "docarray.array.storage.annlite.StorageMixins.insert"]], "list_like (docarray.array.storage.annlite.annliteconfig attribute)": [[64, "docarray.array.storage.annlite.AnnliteConfig.list_like"]], "max_connection (docarray.array.storage.annlite.annliteconfig attribute)": [[64, "docarray.array.storage.annlite.AnnliteConfig.max_connection"]], "metric (docarray.array.storage.annlite.annliteconfig attribute)": [[64, "docarray.array.storage.annlite.AnnliteConfig.metric"]], "n_components (docarray.array.storage.annlite.annliteconfig attribute)": [[64, "docarray.array.storage.annlite.AnnliteConfig.n_components"]], "n_dim (docarray.array.storage.annlite.annliteconfig attribute)": [[64, "docarray.array.storage.annlite.AnnliteConfig.n_dim"]], "pop() (docarray.array.storage.annlite.storagemixins method)": [[64, "docarray.array.storage.annlite.StorageMixins.pop"]], "remove() (docarray.array.storage.annlite.storagemixins method)": [[64, "docarray.array.storage.annlite.StorageMixins.remove"]], "reverse() (docarray.array.storage.annlite.storagemixins method)": [[64, "docarray.array.storage.annlite.StorageMixins.reverse"]], "root_id (docarray.array.storage.annlite.annliteconfig attribute)": [[64, "docarray.array.storage.annlite.AnnliteConfig.root_id"]], "serialize_config (docarray.array.storage.annlite.annliteconfig attribute)": [[64, "docarray.array.storage.annlite.AnnliteConfig.serialize_config"]], "sync() (docarray.array.storage.annlite.storagemixins method)": [[64, "docarray.array.storage.annlite.StorageMixins.sync"]], "annliteconfig (class in docarray.array.storage.annlite.backend)": [[65, "docarray.array.storage.annlite.backend.AnnliteConfig"]], "backendmixin (class in docarray.array.storage.annlite.backend)": [[65, "docarray.array.storage.annlite.backend.BackendMixin"]], "type_map (docarray.array.storage.annlite.backend.backendmixin attribute)": [[65, "docarray.array.storage.annlite.backend.BackendMixin.TYPE_MAP"]], "columns (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[65, "docarray.array.storage.annlite.backend.AnnliteConfig.columns"]], "data_path (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[65, "docarray.array.storage.annlite.backend.AnnliteConfig.data_path"]], "docarray.array.storage.annlite.backend": [[65, "module-docarray.array.storage.annlite.backend"]], "ef_construction (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[65, "docarray.array.storage.annlite.backend.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[65, "docarray.array.storage.annlite.backend.AnnliteConfig.ef_search"]], "list_like (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[65, "docarray.array.storage.annlite.backend.AnnliteConfig.list_like"]], "max_connection (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[65, "docarray.array.storage.annlite.backend.AnnliteConfig.max_connection"]], "metric (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[65, "docarray.array.storage.annlite.backend.AnnliteConfig.metric"]], "n_components (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[65, "docarray.array.storage.annlite.backend.AnnliteConfig.n_components"]], "n_dim (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[65, "docarray.array.storage.annlite.backend.AnnliteConfig.n_dim"]], "root_id (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[65, "docarray.array.storage.annlite.backend.AnnliteConfig.root_id"]], "serialize_config (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[65, "docarray.array.storage.annlite.backend.AnnliteConfig.serialize_config"]], "findmixin (class in docarray.array.storage.annlite.find)": [[66, "docarray.array.storage.annlite.find.FindMixin"]], "docarray.array.storage.annlite.find": [[66, "module-docarray.array.storage.annlite.find"]], "getsetdelmixin (class in docarray.array.storage.annlite.getsetdel)": [[67, "docarray.array.storage.annlite.getsetdel.GetSetDelMixin"]], "docarray.array.storage.annlite.getsetdel": [[67, "module-docarray.array.storage.annlite.getsetdel"]], "sync() (docarray.array.storage.annlite.getsetdel.getsetdelmixin method)": [[67, "docarray.array.storage.annlite.getsetdel.GetSetDelMixin.sync"]], "offsetmapping (class in docarray.array.storage.annlite.helper)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping"]], "clear() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.clear"]], "close() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.close"]], "commit() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.commit"]], "create_table() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.create_table"]], "del_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.del_at_offset"]], "del_at_offsets() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.del_at_offsets"]], "docarray.array.storage.annlite.helper": [[68, "module-docarray.array.storage.annlite.helper"]], "drop() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.drop"]], "drop_table() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.drop_table"]], "dump() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.dump"]], "execute() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.execute"]], "execute_many() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.execute_many"]], "extend_doc_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.extend_doc_ids"]], "get_all_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.get_all_ids"]], "get_id_by_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.get_id_by_offset"]], "get_ids_by_offsets() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.get_ids_by_offsets"]], "get_offset_by_id() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.get_offset_by_id"]], "get_offsets_by_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.get_offsets_by_ids"]], "insert_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.insert_at_offset"]], "load() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.load"]], "name (docarray.array.storage.annlite.helper.offsetmapping property)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.name"]], "schema (docarray.array.storage.annlite.helper.offsetmapping property)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.schema"]], "set_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.set_at_offset"]], "shift_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.shift_offset"]], "size (docarray.array.storage.annlite.helper.offsetmapping property)": [[68, "docarray.array.storage.annlite.helper.OffsetMapping.size"]], "sequencelikemixin (class in docarray.array.storage.annlite.seqlike)": [[69, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[69, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[69, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[69, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.annlite.seqlike": [[69, "module-docarray.array.storage.annlite.seqlike"]], "extend() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[69, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[69, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[69, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[69, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[69, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[69, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.reverse"]], "docarray.array.storage.base": [[70, "module-docarray.array.storage.base"]], "basebackendmixin (class in docarray.array.storage.base.backend)": [[71, "docarray.array.storage.base.backend.BaseBackendMixin"]], "type_map (docarray.array.storage.base.backend.basebackendmixin attribute)": [[71, "docarray.array.storage.base.backend.BaseBackendMixin.TYPE_MAP"]], "typemap (class in docarray.array.storage.base.backend)": [[71, "docarray.array.storage.base.backend.TypeMap"]], "converter (docarray.array.storage.base.backend.typemap property)": [[71, "docarray.array.storage.base.backend.TypeMap.converter"]], "count() (docarray.array.storage.base.backend.typemap method)": [[71, "docarray.array.storage.base.backend.TypeMap.count"]], "docarray.array.storage.base.backend": [[71, "module-docarray.array.storage.base.backend"]], "index() (docarray.array.storage.base.backend.typemap method)": [[71, "docarray.array.storage.base.backend.TypeMap.index"]], "type (docarray.array.storage.base.backend.typemap property)": [[71, "docarray.array.storage.base.backend.TypeMap.type"]], "basegetsetdelmixin (class in docarray.array.storage.base.getsetdel)": [[72, "docarray.array.storage.base.getsetdel.BaseGetSetDelMixin"]], "docarray.array.storage.base.getsetdel": [[72, "module-docarray.array.storage.base.getsetdel"]], "sync() (docarray.array.storage.base.getsetdel.basegetsetdelmixin method)": [[72, "docarray.array.storage.base.getsetdel.BaseGetSetDelMixin.sync"]], "offset2id (class in docarray.array.storage.base.helper)": [[73, "docarray.array.storage.base.helper.Offset2ID"]], "append() (docarray.array.storage.base.helper.offset2id method)": [[73, "docarray.array.storage.base.helper.Offset2ID.append"]], "clear() (docarray.array.storage.base.helper.offset2id method)": [[73, "docarray.array.storage.base.helper.Offset2ID.clear"]], "delete_by_id() (docarray.array.storage.base.helper.offset2id method)": [[73, "docarray.array.storage.base.helper.Offset2ID.delete_by_id"]], "delete_by_ids() (docarray.array.storage.base.helper.offset2id method)": [[73, "docarray.array.storage.base.helper.Offset2ID.delete_by_ids"]], "delete_by_offset() (docarray.array.storage.base.helper.offset2id method)": [[73, "docarray.array.storage.base.helper.Offset2ID.delete_by_offset"]], "docarray.array.storage.base.helper": [[73, "module-docarray.array.storage.base.helper"]], "extend() (docarray.array.storage.base.helper.offset2id method)": [[73, "docarray.array.storage.base.helper.Offset2ID.extend"]], "get_id() (docarray.array.storage.base.helper.offset2id method)": [[73, "docarray.array.storage.base.helper.Offset2ID.get_id"]], "index() (docarray.array.storage.base.helper.offset2id method)": [[73, "docarray.array.storage.base.helper.Offset2ID.index"]], "insert() (docarray.array.storage.base.helper.offset2id method)": [[73, "docarray.array.storage.base.helper.Offset2ID.insert"]], "load() (docarray.array.storage.base.helper.offset2id method)": [[73, "docarray.array.storage.base.helper.Offset2ID.load"]], "save() (docarray.array.storage.base.helper.offset2id method)": [[73, "docarray.array.storage.base.helper.Offset2ID.save"]], "update() (docarray.array.storage.base.helper.offset2id method)": [[73, "docarray.array.storage.base.helper.Offset2ID.update"]], "update_ids() (docarray.array.storage.base.helper.offset2id method)": [[73, "docarray.array.storage.base.helper.Offset2ID.update_ids"]], "basesequencelikemixin (class in docarray.array.storage.base.seqlike)": [[74, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin"]], "append() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[74, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.append"]], "clear() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[74, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.clear"]], "count() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[74, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.count"]], "docarray.array.storage.base.seqlike": [[74, "module-docarray.array.storage.base.seqlike"]], "extend() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[74, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.extend"]], "index() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[74, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.index"]], "insert() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[74, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.insert"]], "pop() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[74, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.pop"]], "remove() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[74, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[74, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.reverse"]], "elasticconfig (class in docarray.array.storage.elastic)": [[75, "docarray.array.storage.elastic.ElasticConfig"]], "max_es_returned_docs (docarray.array.storage.elastic.storagemixins attribute)": [[75, "docarray.array.storage.elastic.StorageMixins.MAX_ES_RETURNED_DOCS"]], "storagemixins (class in docarray.array.storage.elastic)": [[75, "docarray.array.storage.elastic.StorageMixins"]], "type_map (docarray.array.storage.elastic.storagemixins attribute)": [[75, "docarray.array.storage.elastic.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.elastic.storagemixins method)": [[75, "docarray.array.storage.elastic.StorageMixins.append"]], "batch_size (docarray.array.storage.elastic.elasticconfig attribute)": [[75, "docarray.array.storage.elastic.ElasticConfig.batch_size"]], "clear() (docarray.array.storage.elastic.storagemixins method)": [[75, "docarray.array.storage.elastic.StorageMixins.clear"]], "columns (docarray.array.storage.elastic.elasticconfig attribute)": [[75, "docarray.array.storage.elastic.ElasticConfig.columns"]], "count() (docarray.array.storage.elastic.storagemixins method)": [[75, "docarray.array.storage.elastic.StorageMixins.count"]], "distance (docarray.array.storage.elastic.elasticconfig attribute)": [[75, "docarray.array.storage.elastic.ElasticConfig.distance"]], "docarray.array.storage.elastic": [[75, "module-docarray.array.storage.elastic"]], "ef_construction (docarray.array.storage.elastic.elasticconfig attribute)": [[75, "docarray.array.storage.elastic.ElasticConfig.ef_construction"]], "es_config (docarray.array.storage.elastic.elasticconfig attribute)": [[75, "docarray.array.storage.elastic.ElasticConfig.es_config"]], "extend() (docarray.array.storage.elastic.storagemixins method)": [[75, "docarray.array.storage.elastic.StorageMixins.extend"]], "find() (docarray.array.storage.elastic.storagemixins method)": [[75, "docarray.array.storage.elastic.StorageMixins.find"]], "hosts (docarray.array.storage.elastic.elasticconfig attribute)": [[75, "docarray.array.storage.elastic.ElasticConfig.hosts"]], "index() (docarray.array.storage.elastic.storagemixins method)": [[75, "docarray.array.storage.elastic.StorageMixins.index"]], "index_name (docarray.array.storage.elastic.elasticconfig attribute)": [[75, "docarray.array.storage.elastic.ElasticConfig.index_name"]], "index_text (docarray.array.storage.elastic.elasticconfig attribute)": [[75, "docarray.array.storage.elastic.ElasticConfig.index_text"]], "insert() (docarray.array.storage.elastic.storagemixins method)": [[75, "docarray.array.storage.elastic.StorageMixins.insert"]], "list_like (docarray.array.storage.elastic.elasticconfig attribute)": [[75, "docarray.array.storage.elastic.ElasticConfig.list_like"]], "m (docarray.array.storage.elastic.elasticconfig attribute)": [[75, "docarray.array.storage.elastic.ElasticConfig.m"]], "n_dim (docarray.array.storage.elastic.elasticconfig attribute)": [[75, "docarray.array.storage.elastic.ElasticConfig.n_dim"]], "pop() (docarray.array.storage.elastic.storagemixins method)": [[75, "docarray.array.storage.elastic.StorageMixins.pop"]], "remove() (docarray.array.storage.elastic.storagemixins method)": [[75, "docarray.array.storage.elastic.StorageMixins.remove"]], "reverse() (docarray.array.storage.elastic.storagemixins method)": [[75, "docarray.array.storage.elastic.StorageMixins.reverse"]], "root_id (docarray.array.storage.elastic.elasticconfig attribute)": [[75, "docarray.array.storage.elastic.ElasticConfig.root_id"]], "sync() (docarray.array.storage.elastic.storagemixins method)": [[75, "docarray.array.storage.elastic.StorageMixins.sync"]], "tag_indices (docarray.array.storage.elastic.elasticconfig attribute)": [[75, "docarray.array.storage.elastic.ElasticConfig.tag_indices"]], "backendmixin (class in docarray.array.storage.elastic.backend)": [[76, "docarray.array.storage.elastic.backend.BackendMixin"]], "elasticconfig (class in docarray.array.storage.elastic.backend)": [[76, "docarray.array.storage.elastic.backend.ElasticConfig"]], "type_map (docarray.array.storage.elastic.backend.backendmixin attribute)": [[76, "docarray.array.storage.elastic.backend.BackendMixin.TYPE_MAP"]], "batch_size (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[76, "docarray.array.storage.elastic.backend.ElasticConfig.batch_size"]], "columns (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[76, "docarray.array.storage.elastic.backend.ElasticConfig.columns"]], "distance (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[76, "docarray.array.storage.elastic.backend.ElasticConfig.distance"]], "docarray.array.storage.elastic.backend": [[76, "module-docarray.array.storage.elastic.backend"]], "ef_construction (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[76, "docarray.array.storage.elastic.backend.ElasticConfig.ef_construction"]], "es_config (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[76, "docarray.array.storage.elastic.backend.ElasticConfig.es_config"]], "hosts (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[76, "docarray.array.storage.elastic.backend.ElasticConfig.hosts"]], "index_name (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[76, "docarray.array.storage.elastic.backend.ElasticConfig.index_name"]], "index_text (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[76, "docarray.array.storage.elastic.backend.ElasticConfig.index_text"]], "list_like (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[76, "docarray.array.storage.elastic.backend.ElasticConfig.list_like"]], "m (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[76, "docarray.array.storage.elastic.backend.ElasticConfig.m"]], "n_dim (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[76, "docarray.array.storage.elastic.backend.ElasticConfig.n_dim"]], "root_id (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[76, "docarray.array.storage.elastic.backend.ElasticConfig.root_id"]], "tag_indices (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[76, "docarray.array.storage.elastic.backend.ElasticConfig.tag_indices"]], "findmixin (class in docarray.array.storage.elastic.find)": [[77, "docarray.array.storage.elastic.find.FindMixin"]], "docarray.array.storage.elastic.find": [[77, "module-docarray.array.storage.elastic.find"]], "find() (docarray.array.storage.elastic.find.findmixin method)": [[77, "docarray.array.storage.elastic.find.FindMixin.find"]], "getsetdelmixin (class in docarray.array.storage.elastic.getsetdel)": [[78, "docarray.array.storage.elastic.getsetdel.GetSetDelMixin"]], "max_es_returned_docs (docarray.array.storage.elastic.getsetdel.getsetdelmixin attribute)": [[78, "docarray.array.storage.elastic.getsetdel.GetSetDelMixin.MAX_ES_RETURNED_DOCS"]], "docarray.array.storage.elastic.getsetdel": [[78, "module-docarray.array.storage.elastic.getsetdel"]], "sync() (docarray.array.storage.elastic.getsetdel.getsetdelmixin method)": [[78, "docarray.array.storage.elastic.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.elastic.seqlike)": [[79, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.elastic.seqlike": [[79, "module-docarray.array.storage.elastic.seqlike"]], "extend() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.reverse"]], "storagemixins (class in docarray.array.storage.memory)": [[80, "docarray.array.storage.memory.StorageMixins"]], "type_map (docarray.array.storage.memory.storagemixins attribute)": [[80, "docarray.array.storage.memory.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.memory.storagemixins method)": [[80, "docarray.array.storage.memory.StorageMixins.append"]], "clear() (docarray.array.storage.memory.storagemixins method)": [[80, "docarray.array.storage.memory.StorageMixins.clear"]], "count() (docarray.array.storage.memory.storagemixins method)": [[80, "docarray.array.storage.memory.StorageMixins.count"]], "docarray.array.storage.memory": [[80, "module-docarray.array.storage.memory"]], "extend() (docarray.array.storage.memory.storagemixins method)": [[80, "docarray.array.storage.memory.StorageMixins.extend"]], "index() (docarray.array.storage.memory.storagemixins method)": [[80, "docarray.array.storage.memory.StorageMixins.index"]], "insert() (docarray.array.storage.memory.storagemixins method)": [[80, "docarray.array.storage.memory.StorageMixins.insert"]], "pop() (docarray.array.storage.memory.storagemixins method)": [[80, "docarray.array.storage.memory.StorageMixins.pop"]], "remove() (docarray.array.storage.memory.storagemixins method)": [[80, "docarray.array.storage.memory.StorageMixins.remove"]], "reverse() (docarray.array.storage.memory.storagemixins method)": [[80, "docarray.array.storage.memory.StorageMixins.reverse"]], "sync() (docarray.array.storage.memory.storagemixins method)": [[80, "docarray.array.storage.memory.StorageMixins.sync"]], "backendmixin (class in docarray.array.storage.memory.backend)": [[81, "docarray.array.storage.memory.backend.BackendMixin"]], "type_map (docarray.array.storage.memory.backend.backendmixin attribute)": [[81, "docarray.array.storage.memory.backend.BackendMixin.TYPE_MAP"]], "docarray.array.storage.memory.backend": [[81, "module-docarray.array.storage.memory.backend"]], "needs_id2offset_rebuild() (in module docarray.array.storage.memory.backend)": [[81, "docarray.array.storage.memory.backend.needs_id2offset_rebuild"]], "findmixin (class in docarray.array.storage.memory.find)": [[82, "docarray.array.storage.memory.find.FindMixin"]], "docarray.array.storage.memory.find": [[82, "module-docarray.array.storage.memory.find"]], "getsetdelmixin (class in docarray.array.storage.memory.getsetdel)": [[83, "docarray.array.storage.memory.getsetdel.GetSetDelMixin"]], "docarray.array.storage.memory.getsetdel": [[83, "module-docarray.array.storage.memory.getsetdel"]], "sync() (docarray.array.storage.memory.getsetdel.getsetdelmixin method)": [[83, "docarray.array.storage.memory.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.memory.seqlike)": [[84, "docarray.array.storage.memory.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.memory.seqlike": [[84, "module-docarray.array.storage.memory.seqlike"]], "extend() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[84, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.reverse"]], "max_opensearch_returned_docs (docarray.array.storage.opensearch.storagemixins attribute)": [[90, "docarray.array.storage.opensearch.StorageMixins.MAX_OPENSEARCH_RETURNED_DOCS"]], "opensearchconfig (class in docarray.array.storage.opensearch)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig"]], "storagemixins (class in docarray.array.storage.opensearch)": [[90, "docarray.array.storage.opensearch.StorageMixins"]], "type_map (docarray.array.storage.opensearch.storagemixins attribute)": [[90, "docarray.array.storage.opensearch.StorageMixins.TYPE_MAP"]], "algorithm (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.algorithm"]], "append() (docarray.array.storage.opensearch.storagemixins method)": [[90, "docarray.array.storage.opensearch.StorageMixins.append"]], "batch_size (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.batch_size"]], "clear() (docarray.array.storage.opensearch.storagemixins method)": [[90, "docarray.array.storage.opensearch.StorageMixins.clear"]], "columns (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.columns"]], "count() (docarray.array.storage.opensearch.storagemixins method)": [[90, "docarray.array.storage.opensearch.StorageMixins.count"]], "distance (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.distance"]], "docarray.array.storage.opensearch": [[90, "module-docarray.array.storage.opensearch"]], "ef_construction (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.ef_construction"]], "ef_search (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.ef_search"]], "encoder (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.encoder"]], "engine (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.engine"]], "extend() (docarray.array.storage.opensearch.storagemixins method)": [[90, "docarray.array.storage.opensearch.StorageMixins.extend"]], "find() (docarray.array.storage.opensearch.storagemixins method)": [[90, "docarray.array.storage.opensearch.StorageMixins.find"]], "hosts (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.hosts"]], "index() (docarray.array.storage.opensearch.storagemixins method)": [[90, "docarray.array.storage.opensearch.StorageMixins.index"]], "index_name (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.index_name"]], "index_text (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.index_text"]], "insert() (docarray.array.storage.opensearch.storagemixins method)": [[90, "docarray.array.storage.opensearch.StorageMixins.insert"]], "list_like (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.list_like"]], "m (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.m"]], "n_dim (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.n_dim"]], "opensearch_config (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.opensearch_config"]], "pop() (docarray.array.storage.opensearch.storagemixins method)": [[90, "docarray.array.storage.opensearch.StorageMixins.pop"]], "remove() (docarray.array.storage.opensearch.storagemixins method)": [[90, "docarray.array.storage.opensearch.StorageMixins.remove"]], "reverse() (docarray.array.storage.opensearch.storagemixins method)": [[90, "docarray.array.storage.opensearch.StorageMixins.reverse"]], "root_id (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.root_id"]], "sync() (docarray.array.storage.opensearch.storagemixins method)": [[90, "docarray.array.storage.opensearch.StorageMixins.sync"]], "tag_indices (docarray.array.storage.opensearch.opensearchconfig attribute)": [[90, "docarray.array.storage.opensearch.OpenSearchConfig.tag_indices"]], "backendmixin (class in docarray.array.storage.opensearch.backend)": [[91, "docarray.array.storage.opensearch.backend.BackendMixin"]], "opensearchconfig (class in docarray.array.storage.opensearch.backend)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig"]], "type_map (docarray.array.storage.opensearch.backend.backendmixin attribute)": [[91, "docarray.array.storage.opensearch.backend.BackendMixin.TYPE_MAP"]], "algorithm (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.algorithm"]], "batch_size (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.batch_size"]], "columns (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.columns"]], "distance (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.distance"]], "docarray.array.storage.opensearch.backend": [[91, "module-docarray.array.storage.opensearch.backend"]], "ef_construction (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.ef_construction"]], "ef_search (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.ef_search"]], "encoder (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.encoder"]], "engine (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.engine"]], "hosts (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.hosts"]], "index_name (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.index_name"]], "index_text (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.index_text"]], "list_like (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.list_like"]], "m (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.m"]], "n_dim (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.n_dim"]], "opensearch_config (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.opensearch_config"]], "root_id (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.root_id"]], "tag_indices (docarray.array.storage.opensearch.backend.opensearchconfig attribute)": [[91, "docarray.array.storage.opensearch.backend.OpenSearchConfig.tag_indices"]], "findmixin (class in docarray.array.storage.opensearch.find)": [[92, "docarray.array.storage.opensearch.find.FindMixin"]], "docarray.array.storage.opensearch.find": [[92, "module-docarray.array.storage.opensearch.find"]], "find() (docarray.array.storage.opensearch.find.findmixin method)": [[92, "docarray.array.storage.opensearch.find.FindMixin.find"]], "getsetdelmixin (class in docarray.array.storage.opensearch.getsetdel)": [[93, "docarray.array.storage.opensearch.getsetdel.GetSetDelMixin"]], "max_opensearch_returned_docs (docarray.array.storage.opensearch.getsetdel.getsetdelmixin attribute)": [[93, "docarray.array.storage.opensearch.getsetdel.GetSetDelMixin.MAX_OPENSEARCH_RETURNED_DOCS"]], "docarray.array.storage.opensearch.getsetdel": [[93, "module-docarray.array.storage.opensearch.getsetdel"]], "sync() (docarray.array.storage.opensearch.getsetdel.getsetdelmixin method)": [[93, "docarray.array.storage.opensearch.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.opensearch.seqlike)": [[94, "docarray.array.storage.opensearch.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.opensearch.seqlike.sequencelikemixin method)": [[94, "docarray.array.storage.opensearch.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.opensearch.seqlike.sequencelikemixin method)": [[94, "docarray.array.storage.opensearch.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.opensearch.seqlike.sequencelikemixin method)": [[94, "docarray.array.storage.opensearch.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.opensearch.seqlike": [[94, "module-docarray.array.storage.opensearch.seqlike"]], "extend() (docarray.array.storage.opensearch.seqlike.sequencelikemixin method)": [[94, "docarray.array.storage.opensearch.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.opensearch.seqlike.sequencelikemixin method)": [[94, "docarray.array.storage.opensearch.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.opensearch.seqlike.sequencelikemixin method)": [[94, "docarray.array.storage.opensearch.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.opensearch.seqlike.sequencelikemixin method)": [[94, "docarray.array.storage.opensearch.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.opensearch.seqlike.sequencelikemixin method)": [[94, "docarray.array.storage.opensearch.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.opensearch.seqlike.sequencelikemixin method)": [[94, "docarray.array.storage.opensearch.seqlike.SequenceLikeMixin.reverse"]], "qdrantconfig (class in docarray.array.storage.qdrant)": [[95, "docarray.array.storage.qdrant.QdrantConfig"]], "storagemixins (class in docarray.array.storage.qdrant)": [[95, "docarray.array.storage.qdrant.StorageMixins"]], "type_map (docarray.array.storage.qdrant.storagemixins attribute)": [[95, "docarray.array.storage.qdrant.StorageMixins.TYPE_MAP"]], "api_key (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.api_key"]], "append() (docarray.array.storage.qdrant.storagemixins method)": [[95, "docarray.array.storage.qdrant.StorageMixins.append"]], "clear() (docarray.array.storage.qdrant.storagemixins method)": [[95, "docarray.array.storage.qdrant.StorageMixins.clear"]], "client (docarray.array.storage.qdrant.storagemixins property)": [[95, "docarray.array.storage.qdrant.StorageMixins.client"]], "collection_name (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.collection_name"]], "collection_name (docarray.array.storage.qdrant.storagemixins property)": [[95, "docarray.array.storage.qdrant.StorageMixins.collection_name"]], "collection_name_meta (docarray.array.storage.qdrant.storagemixins property)": [[95, "docarray.array.storage.qdrant.StorageMixins.collection_name_meta"]], "columns (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.columns"]], "config (docarray.array.storage.qdrant.storagemixins property)": [[95, "docarray.array.storage.qdrant.StorageMixins.config"]], "count() (docarray.array.storage.qdrant.storagemixins method)": [[95, "docarray.array.storage.qdrant.StorageMixins.count"]], "distance (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.distance"]], "distance (docarray.array.storage.qdrant.storagemixins property)": [[95, "docarray.array.storage.qdrant.StorageMixins.distance"]], "docarray.array.storage.qdrant": [[95, "module-docarray.array.storage.qdrant"]], "ef_construct (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.ef_construct"]], "extend() (docarray.array.storage.qdrant.storagemixins method)": [[95, "docarray.array.storage.qdrant.StorageMixins.extend"]], "full_scan_threshold (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.full_scan_threshold"]], "grpc_port (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.grpc_port"]], "host (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.host"]], "https (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.https"]], "index() (docarray.array.storage.qdrant.storagemixins method)": [[95, "docarray.array.storage.qdrant.StorageMixins.index"]], "insert() (docarray.array.storage.qdrant.storagemixins method)": [[95, "docarray.array.storage.qdrant.StorageMixins.insert"]], "list_like (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.list_like"]], "m (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.m"]], "n_dim (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.n_dim"]], "n_dim (docarray.array.storage.qdrant.storagemixins property)": [[95, "docarray.array.storage.qdrant.StorageMixins.n_dim"]], "pop() (docarray.array.storage.qdrant.storagemixins method)": [[95, "docarray.array.storage.qdrant.StorageMixins.pop"]], "port (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.port"]], "prefer_grpc (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.prefer_grpc"]], "remove() (docarray.array.storage.qdrant.storagemixins method)": [[95, "docarray.array.storage.qdrant.StorageMixins.remove"]], "reverse() (docarray.array.storage.qdrant.storagemixins method)": [[95, "docarray.array.storage.qdrant.StorageMixins.reverse"]], "root_id (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.root_id"]], "scan() (docarray.array.storage.qdrant.storagemixins method)": [[95, "docarray.array.storage.qdrant.StorageMixins.scan"]], "scroll_batch_size (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.scroll_batch_size"]], "scroll_batch_size (docarray.array.storage.qdrant.storagemixins property)": [[95, "docarray.array.storage.qdrant.StorageMixins.scroll_batch_size"]], "serialization_config (docarray.array.storage.qdrant.storagemixins property)": [[95, "docarray.array.storage.qdrant.StorageMixins.serialization_config"]], "serialize_config (docarray.array.storage.qdrant.qdrantconfig attribute)": [[95, "docarray.array.storage.qdrant.QdrantConfig.serialize_config"]], "serialize_config (docarray.array.storage.qdrant.storagemixins property)": [[95, "docarray.array.storage.qdrant.StorageMixins.serialize_config"]], "sync() (docarray.array.storage.qdrant.storagemixins method)": [[95, "docarray.array.storage.qdrant.StorageMixins.sync"]], "backendmixin (class in docarray.array.storage.qdrant.backend)": [[96, "docarray.array.storage.qdrant.backend.BackendMixin"]], "qdrantconfig (class in docarray.array.storage.qdrant.backend)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig"]], "type_map (docarray.array.storage.qdrant.backend.backendmixin attribute)": [[96, "docarray.array.storage.qdrant.backend.BackendMixin.TYPE_MAP"]], "api_key (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.api_key"]], "client (docarray.array.storage.qdrant.backend.backendmixin property)": [[96, "docarray.array.storage.qdrant.backend.BackendMixin.client"]], "collection_name (docarray.array.storage.qdrant.backend.backendmixin property)": [[96, "docarray.array.storage.qdrant.backend.BackendMixin.collection_name"]], "collection_name (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.collection_name"]], "columns (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.columns"]], "distance (docarray.array.storage.qdrant.backend.backendmixin property)": [[96, "docarray.array.storage.qdrant.backend.BackendMixin.distance"]], "distance (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.distance"]], "docarray.array.storage.qdrant.backend": [[96, "module-docarray.array.storage.qdrant.backend"]], "ef_construct (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.ef_construct"]], "full_scan_threshold (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.full_scan_threshold"]], "grpc_port (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.grpc_port"]], "host (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.host"]], "https (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.https"]], "list_like (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.list_like"]], "m (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.m"]], "n_dim (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.n_dim"]], "port (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.port"]], "prefer_grpc (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.prefer_grpc"]], "root_id (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.root_id"]], "scroll_batch_size (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.scroll_batch_size"]], "serialize_config (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[96, "docarray.array.storage.qdrant.backend.QdrantConfig.serialize_config"]], "findmixin (class in docarray.array.storage.qdrant.find)": [[97, "docarray.array.storage.qdrant.find.FindMixin"]], "client (docarray.array.storage.qdrant.find.findmixin property)": [[97, "docarray.array.storage.qdrant.find.FindMixin.client"]], "collection_name (docarray.array.storage.qdrant.find.findmixin property)": [[97, "docarray.array.storage.qdrant.find.FindMixin.collection_name"]], "distance (docarray.array.storage.qdrant.find.findmixin property)": [[97, "docarray.array.storage.qdrant.find.FindMixin.distance"]], "docarray.array.storage.qdrant.find": [[97, "module-docarray.array.storage.qdrant.find"]], "serialize_config (docarray.array.storage.qdrant.find.findmixin property)": [[97, "docarray.array.storage.qdrant.find.FindMixin.serialize_config"]], "getsetdelmixin (class in docarray.array.storage.qdrant.getsetdel)": [[98, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin"]], "client (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[98, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.client"]], "collection_name (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[98, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.collection_name"]], "docarray.array.storage.qdrant.getsetdel": [[98, "module-docarray.array.storage.qdrant.getsetdel"]], "n_dim (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[98, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.n_dim"]], "scan() (docarray.array.storage.qdrant.getsetdel.getsetdelmixin method)": [[98, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.scan"]], "scroll_batch_size (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[98, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.scroll_batch_size"]], "serialization_config (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[98, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.serialization_config"]], "sync() (docarray.array.storage.qdrant.getsetdel.getsetdelmixin method)": [[98, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.sync"]], "docarray.array.storage.qdrant.helper": [[99, "module-docarray.array.storage.qdrant.helper"]], "sequencelikemixin (class in docarray.array.storage.qdrant.seqlike)": [[100, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[100, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[100, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.clear"]], "client (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[100, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.client"]], "collection_name (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[100, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.collection_name"]], "config (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[100, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.config"]], "count() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[100, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.qdrant.seqlike": [[100, "module-docarray.array.storage.qdrant.seqlike"]], "extend() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[100, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[100, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[100, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[100, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[100, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[100, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.reverse"]], "redisconfig (class in docarray.array.storage.redis)": [[101, "docarray.array.storage.redis.RedisConfig"]], "storagemixins (class in docarray.array.storage.redis)": [[101, "docarray.array.storage.redis.StorageMixins"]], "type_map (docarray.array.storage.redis.storagemixins attribute)": [[101, "docarray.array.storage.redis.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.redis.storagemixins method)": [[101, "docarray.array.storage.redis.StorageMixins.append"]], "batch_size (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.batch_size"]], "block_size (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.block_size"]], "clear() (docarray.array.storage.redis.storagemixins method)": [[101, "docarray.array.storage.redis.StorageMixins.clear"]], "columns (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.columns"]], "count() (docarray.array.storage.redis.storagemixins method)": [[101, "docarray.array.storage.redis.StorageMixins.count"]], "distance (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.distance"]], "docarray.array.storage.redis": [[101, "module-docarray.array.storage.redis"]], "ef_construction (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.ef_construction"]], "ef_runtime (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.ef_runtime"]], "extend() (docarray.array.storage.redis.storagemixins method)": [[101, "docarray.array.storage.redis.StorageMixins.extend"]], "find() (docarray.array.storage.redis.storagemixins method)": [[101, "docarray.array.storage.redis.StorageMixins.find"]], "host (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.host"]], "index() (docarray.array.storage.redis.storagemixins method)": [[101, "docarray.array.storage.redis.StorageMixins.index"]], "index_name (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.index_name"]], "index_text (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.index_text"]], "initial_cap (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.initial_cap"]], "insert() (docarray.array.storage.redis.storagemixins method)": [[101, "docarray.array.storage.redis.StorageMixins.insert"]], "language (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.language"]], "list_like (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.list_like"]], "m (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.m"]], "method (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.method"]], "n_dim (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.n_dim"]], "pop() (docarray.array.storage.redis.storagemixins method)": [[101, "docarray.array.storage.redis.StorageMixins.pop"]], "port (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.port"]], "redis_config (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.redis_config"]], "remove() (docarray.array.storage.redis.storagemixins method)": [[101, "docarray.array.storage.redis.StorageMixins.remove"]], "reverse() (docarray.array.storage.redis.storagemixins method)": [[101, "docarray.array.storage.redis.StorageMixins.reverse"]], "root_id (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.root_id"]], "sync() (docarray.array.storage.redis.storagemixins method)": [[101, "docarray.array.storage.redis.StorageMixins.sync"]], "tag_indices (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.tag_indices"]], "update_schema (docarray.array.storage.redis.redisconfig attribute)": [[101, "docarray.array.storage.redis.RedisConfig.update_schema"]], "backendmixin (class in docarray.array.storage.redis.backend)": [[102, "docarray.array.storage.redis.backend.BackendMixin"]], "redisconfig (class in docarray.array.storage.redis.backend)": [[102, "docarray.array.storage.redis.backend.RedisConfig"]], "type_map (docarray.array.storage.redis.backend.backendmixin attribute)": [[102, "docarray.array.storage.redis.backend.BackendMixin.TYPE_MAP"]], "batch_size (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.batch_size"]], "block_size (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.block_size"]], "columns (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.columns"]], "distance (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.distance"]], "docarray.array.storage.redis.backend": [[102, "module-docarray.array.storage.redis.backend"]], "ef_construction (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.ef_construction"]], "ef_runtime (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.ef_runtime"]], "host (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.host"]], "index_name (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.index_name"]], "index_text (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.index_text"]], "initial_cap (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.initial_cap"]], "language (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.language"]], "list_like (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.list_like"]], "m (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.m"]], "method (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.method"]], "n_dim (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.n_dim"]], "port (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.port"]], "redis_config (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.redis_config"]], "root_id (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.root_id"]], "tag_indices (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.tag_indices"]], "update_schema (docarray.array.storage.redis.backend.redisconfig attribute)": [[102, "docarray.array.storage.redis.backend.RedisConfig.update_schema"]], "findmixin (class in docarray.array.storage.redis.find)": [[103, "docarray.array.storage.redis.find.FindMixin"]], "docarray.array.storage.redis.find": [[103, "module-docarray.array.storage.redis.find"]], "find() (docarray.array.storage.redis.find.findmixin method)": [[103, "docarray.array.storage.redis.find.FindMixin.find"]], "getsetdelmixin (class in docarray.array.storage.redis.getsetdel)": [[104, "docarray.array.storage.redis.getsetdel.GetSetDelMixin"]], "docarray.array.storage.redis.getsetdel": [[104, "module-docarray.array.storage.redis.getsetdel"]], "sync() (docarray.array.storage.redis.getsetdel.getsetdelmixin method)": [[104, "docarray.array.storage.redis.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.redis.seqlike)": [[105, "docarray.array.storage.redis.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[105, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[105, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[105, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.redis.seqlike": [[105, "module-docarray.array.storage.redis.seqlike"]], "extend() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[105, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[105, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[105, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[105, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[105, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.redis.seqlike.sequencelikemixin method)": [[105, "docarray.array.storage.redis.seqlike.SequenceLikeMixin.reverse"]], "docarray.array.storage.registry": [[106, "module-docarray.array.storage.registry"]], "sqliteconfig (class in docarray.array.storage.sqlite)": [[107, "docarray.array.storage.sqlite.SqliteConfig"]], "storagemixins (class in docarray.array.storage.sqlite)": [[107, "docarray.array.storage.sqlite.StorageMixins"]], "type_map (docarray.array.storage.sqlite.storagemixins attribute)": [[107, "docarray.array.storage.sqlite.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.sqlite.storagemixins method)": [[107, "docarray.array.storage.sqlite.StorageMixins.append"]], "clear() (docarray.array.storage.sqlite.storagemixins method)": [[107, "docarray.array.storage.sqlite.StorageMixins.clear"]], "conn_config (docarray.array.storage.sqlite.sqliteconfig attribute)": [[107, "docarray.array.storage.sqlite.SqliteConfig.conn_config"]], "connection (docarray.array.storage.sqlite.sqliteconfig attribute)": [[107, "docarray.array.storage.sqlite.SqliteConfig.connection"]], "count() (docarray.array.storage.sqlite.storagemixins method)": [[107, "docarray.array.storage.sqlite.StorageMixins.count"]], "docarray.array.storage.sqlite": [[107, "module-docarray.array.storage.sqlite"]], "extend() (docarray.array.storage.sqlite.storagemixins method)": [[107, "docarray.array.storage.sqlite.StorageMixins.extend"]], "index() (docarray.array.storage.sqlite.storagemixins method)": [[107, "docarray.array.storage.sqlite.StorageMixins.index"]], "insert() (docarray.array.storage.sqlite.storagemixins method)": [[107, "docarray.array.storage.sqlite.StorageMixins.insert"]], "journal_mode (docarray.array.storage.sqlite.sqliteconfig attribute)": [[107, "docarray.array.storage.sqlite.SqliteConfig.journal_mode"]], "list_like (docarray.array.storage.sqlite.sqliteconfig attribute)": [[107, "docarray.array.storage.sqlite.SqliteConfig.list_like"]], "pop() (docarray.array.storage.sqlite.storagemixins method)": [[107, "docarray.array.storage.sqlite.StorageMixins.pop"]], "remove() (docarray.array.storage.sqlite.storagemixins method)": [[107, "docarray.array.storage.sqlite.StorageMixins.remove"]], "reverse() (docarray.array.storage.sqlite.storagemixins method)": [[107, "docarray.array.storage.sqlite.StorageMixins.reverse"]], "root_id (docarray.array.storage.sqlite.sqliteconfig attribute)": [[107, "docarray.array.storage.sqlite.SqliteConfig.root_id"]], "schema_version (docarray.array.storage.sqlite.storagemixins attribute)": [[107, "docarray.array.storage.sqlite.StorageMixins.schema_version"]], "serialize_config (docarray.array.storage.sqlite.sqliteconfig attribute)": [[107, "docarray.array.storage.sqlite.SqliteConfig.serialize_config"]], "sync() (docarray.array.storage.sqlite.storagemixins method)": [[107, "docarray.array.storage.sqlite.StorageMixins.sync"]], "synchronous (docarray.array.storage.sqlite.sqliteconfig attribute)": [[107, "docarray.array.storage.sqlite.SqliteConfig.synchronous"]], "table_name (docarray.array.storage.sqlite.sqliteconfig attribute)": [[107, "docarray.array.storage.sqlite.SqliteConfig.table_name"]], "backendmixin (class in docarray.array.storage.sqlite.backend)": [[108, "docarray.array.storage.sqlite.backend.BackendMixin"]], "sqliteconfig (class in docarray.array.storage.sqlite.backend)": [[108, "docarray.array.storage.sqlite.backend.SqliteConfig"]], "type_map (docarray.array.storage.sqlite.backend.backendmixin attribute)": [[108, "docarray.array.storage.sqlite.backend.BackendMixin.TYPE_MAP"]], "conn_config (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[108, "docarray.array.storage.sqlite.backend.SqliteConfig.conn_config"]], "connection (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[108, "docarray.array.storage.sqlite.backend.SqliteConfig.connection"]], "docarray.array.storage.sqlite.backend": [[108, "module-docarray.array.storage.sqlite.backend"]], "journal_mode (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[108, "docarray.array.storage.sqlite.backend.SqliteConfig.journal_mode"]], "list_like (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[108, "docarray.array.storage.sqlite.backend.SqliteConfig.list_like"]], "root_id (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[108, "docarray.array.storage.sqlite.backend.SqliteConfig.root_id"]], "schema_version (docarray.array.storage.sqlite.backend.backendmixin attribute)": [[108, "docarray.array.storage.sqlite.backend.BackendMixin.schema_version"]], "serialize_config (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[108, "docarray.array.storage.sqlite.backend.SqliteConfig.serialize_config"]], "synchronous (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[108, "docarray.array.storage.sqlite.backend.SqliteConfig.synchronous"]], "table_name (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[108, "docarray.array.storage.sqlite.backend.SqliteConfig.table_name"]], "getsetdelmixin (class in docarray.array.storage.sqlite.getsetdel)": [[109, "docarray.array.storage.sqlite.getsetdel.GetSetDelMixin"]], "docarray.array.storage.sqlite.getsetdel": [[109, "module-docarray.array.storage.sqlite.getsetdel"]], "sync() (docarray.array.storage.sqlite.getsetdel.getsetdelmixin method)": [[109, "docarray.array.storage.sqlite.getsetdel.GetSetDelMixin.sync"]], "docarray.array.storage.sqlite.helper": [[110, "module-docarray.array.storage.sqlite.helper"]], "initialize_table() (in module docarray.array.storage.sqlite.helper)": [[110, "docarray.array.storage.sqlite.helper.initialize_table"]], "sequencelikemixin (class in docarray.array.storage.sqlite.seqlike)": [[111, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[111, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[111, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[111, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.sqlite.seqlike": [[111, "module-docarray.array.storage.sqlite.seqlike"]], "extend() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[111, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[111, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[111, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[111, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[111, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[111, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.reverse"]], "storagemixins (class in docarray.array.storage.weaviate)": [[112, "docarray.array.storage.weaviate.StorageMixins"]], "type_map (docarray.array.storage.weaviate.storagemixins attribute)": [[112, "docarray.array.storage.weaviate.StorageMixins.TYPE_MAP"]], "weaviateconfig (class in docarray.array.storage.weaviate)": [[112, "docarray.array.storage.weaviate.WeaviateConfig"]], "append() (docarray.array.storage.weaviate.storagemixins method)": [[112, "docarray.array.storage.weaviate.StorageMixins.append"]], "batch_size (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.batch_size"]], "cleanup_interval_seconds (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.cleanup_interval_seconds"]], "clear() (docarray.array.storage.weaviate.storagemixins method)": [[112, "docarray.array.storage.weaviate.StorageMixins.clear"]], "columns (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.columns"]], "count() (docarray.array.storage.weaviate.storagemixins method)": [[112, "docarray.array.storage.weaviate.StorageMixins.count"]], "distance (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.distance"]], "docarray.array.storage.weaviate": [[112, "module-docarray.array.storage.weaviate"]], "dynamic_batching (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_batching"]], "dynamic_ef_factor (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.ef"]], "ef_construction (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.ef_construction"]], "extend() (docarray.array.storage.weaviate.storagemixins method)": [[112, "docarray.array.storage.weaviate.StorageMixins.extend"]], "flat_search_cutoff (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.flat_search_cutoff"]], "host (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.host"]], "index() (docarray.array.storage.weaviate.storagemixins method)": [[112, "docarray.array.storage.weaviate.StorageMixins.index"]], "insert() (docarray.array.storage.weaviate.storagemixins method)": [[112, "docarray.array.storage.weaviate.StorageMixins.insert"]], "list_like (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.list_like"]], "max_connections (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.max_connections"]], "n_dim (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.n_dim"]], "name (docarray.array.storage.weaviate.storagemixins property)": [[112, "docarray.array.storage.weaviate.StorageMixins.name"]], "name (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.name"]], "pop() (docarray.array.storage.weaviate.storagemixins method)": [[112, "docarray.array.storage.weaviate.StorageMixins.pop"]], "port (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.port"]], "protocol (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.protocol"]], "remove() (docarray.array.storage.weaviate.storagemixins method)": [[112, "docarray.array.storage.weaviate.StorageMixins.remove"]], "reverse() (docarray.array.storage.weaviate.storagemixins method)": [[112, "docarray.array.storage.weaviate.StorageMixins.reverse"]], "root_id (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.root_id"]], "serialize_config (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.serialize_config"]], "skip (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.skip"]], "sync() (docarray.array.storage.weaviate.storagemixins method)": [[112, "docarray.array.storage.weaviate.StorageMixins.sync"]], "timeout_config (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.timeout_config"]], "vector_cache_max_objects (docarray.array.storage.weaviate.weaviateconfig attribute)": [[112, "docarray.array.storage.weaviate.WeaviateConfig.vector_cache_max_objects"]], "backendmixin (class in docarray.array.storage.weaviate.backend)": [[113, "docarray.array.storage.weaviate.backend.BackendMixin"]], "type_map (docarray.array.storage.weaviate.backend.backendmixin attribute)": [[113, "docarray.array.storage.weaviate.backend.BackendMixin.TYPE_MAP"]], "weaviateconfig (class in docarray.array.storage.weaviate.backend)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig"]], "batch_size (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.batch_size"]], "cleanup_interval_seconds (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.cleanup_interval_seconds"]], "columns (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.columns"]], "distance (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.distance"]], "docarray.array.storage.weaviate.backend": [[113, "module-docarray.array.storage.weaviate.backend"]], "dynamic_batching (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_batching"]], "dynamic_ef_factor (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.ef"]], "ef_construction (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.ef_construction"]], "flat_search_cutoff (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.flat_search_cutoff"]], "host (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.host"]], "list_like (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.list_like"]], "max_connections (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.max_connections"]], "n_dim (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.n_dim"]], "name (docarray.array.storage.weaviate.backend.backendmixin property)": [[113, "docarray.array.storage.weaviate.backend.BackendMixin.name"]], "name (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.name"]], "port (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.port"]], "protocol (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.protocol"]], "root_id (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.root_id"]], "serialize_config (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.serialize_config"]], "skip (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.skip"]], "timeout_config (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.timeout_config"]], "vector_cache_max_objects (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[113, "docarray.array.storage.weaviate.backend.WeaviateConfig.vector_cache_max_objects"]], "findmixin (class in docarray.array.storage.weaviate.find)": [[114, "docarray.array.storage.weaviate.find.FindMixin"]], "docarray.array.storage.weaviate.find": [[114, "module-docarray.array.storage.weaviate.find"]], "getsetdelmixin (class in docarray.array.storage.weaviate.getsetdel)": [[115, "docarray.array.storage.weaviate.getsetdel.GetSetDelMixin"]], "docarray.array.storage.weaviate.getsetdel": [[115, "module-docarray.array.storage.weaviate.getsetdel"]], "sync() (docarray.array.storage.weaviate.getsetdel.getsetdelmixin method)": [[115, "docarray.array.storage.weaviate.getsetdel.GetSetDelMixin.sync"]], "sequencelikemixin (class in docarray.array.storage.weaviate.seqlike)": [[116, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[116, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[116, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[116, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.weaviate.seqlike": [[116, "module-docarray.array.storage.weaviate.seqlike"]], "extend() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[116, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[116, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[116, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[116, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[116, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[116, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.reverse"]], "documentarrayweaviate (class in docarray.array.weaviate)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate"]], "type_map (docarray.array.weaviate.documentarrayweaviate attribute)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.TYPE_MAP"]], "weaviateconfig (class in docarray.array.weaviate)": [[117, "docarray.array.weaviate.WeaviateConfig"]], "append() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.append"]], "apply() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.apply"]], "apply_batch() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.apply_batch"]], "batch() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.batch"]], "batch_ids() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.batch_ids"]], "batch_size (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.batch_size"]], "blobs (docarray.array.weaviate.documentarrayweaviate property)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.blobs"]], "cleanup_interval_seconds (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.cleanup_interval_seconds"]], "clear() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.clear"]], "cloud_delete() (docarray.array.weaviate.documentarrayweaviate static method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.cloud_delete"]], "cloud_list() (docarray.array.weaviate.documentarrayweaviate static method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.cloud_list"]], "cloud_pull() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.cloud_pull"]], "cloud_push() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.cloud_push"]], "columns (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.columns"]], "contents (docarray.array.weaviate.documentarrayweaviate property)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.contents"]], "count() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.count"]], "dataloader() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.dataloader"]], "distance (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.distance"]], "docarray.array.weaviate": [[117, "module-docarray.array.weaviate"]], "dynamic_batching (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.dynamic_batching"]], "dynamic_ef_factor (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.ef"]], "ef_construction (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.ef_construction"]], "embed() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.embed"]], "embed_and_evaluate() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.embed_and_evaluate"]], "embeddings (docarray.array.weaviate.documentarrayweaviate property)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.embeddings"]], "empty() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.empty"]], "evaluate() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.evaluate"]], "extend() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.extend"]], "find() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.find"]], "flat_search_cutoff (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.flat_search_cutoff"]], "flatten() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.flatten"]], "from_base64() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.from_base64"]], "from_bytes() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.from_bytes"]], "from_csv() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.from_csv"]], "from_dataframe() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.from_dataframe"]], "from_dict() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.from_dict"]], "from_files() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.from_files"]], "from_huggingface_datasets() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.from_huggingface_datasets"]], "from_json() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.from_json"]], "from_lines() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.from_lines"]], "from_list() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.from_list"]], "from_ndarray() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.from_ndarray"]], "from_ndjson() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.from_ndjson"]], "from_protobuf() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.from_protobuf"]], "from_pydantic_model() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.from_pydantic_model"]], "from_strawberry_type() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.from_strawberry_type"]], "get_json_schema() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.get_json_schema"]], "get_vocabulary() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.get_vocabulary"]], "host (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.host"]], "index() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.index"]], "insert() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.insert"]], "list_like (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.list_like"]], "load() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.load"]], "load_binary() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.load_binary"]], "load_csv() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.load_csv"]], "load_json() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.load_json"]], "map() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.map"]], "map_batch() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.map_batch"]], "match() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.match"]], "max_connections (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.max_connections"]], "n_dim (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.n_dim"]], "name (docarray.array.weaviate.documentarrayweaviate property)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.name"]], "name (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.name"]], "plot_embeddings() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.plot_embeddings"]], "plot_image_sprites() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.plot_image_sprites"]], "pop() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.pop"]], "port (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.port"]], "post() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.post"]], "protocol (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.protocol"]], "pull() (docarray.array.weaviate.documentarrayweaviate class method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.pull"]], "push() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.push"]], "reduce() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.reduce"]], "reduce_all() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.reduce_all"]], "remove() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.remove"]], "reverse() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.reverse"]], "root_id (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.root_id"]], "sample() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.sample"]], "save() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.save"]], "save_binary() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.save_binary"]], "save_csv() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.save_csv"]], "save_embeddings_csv() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.save_embeddings_csv"]], "save_gif() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.save_gif"]], "save_json() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.save_json"]], "serialize_config (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.serialize_config"]], "shuffle() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.shuffle"]], "skip (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.skip"]], "split_by_tag() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.split_by_tag"]], "summary() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.summary"]], "sync() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.sync"]], "tensors (docarray.array.weaviate.documentarrayweaviate property)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.tensors"]], "texts (docarray.array.weaviate.documentarrayweaviate property)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.texts"]], "timeout_config (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.timeout_config"]], "to_base64() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.to_base64"]], "to_bytes() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.to_bytes"]], "to_dataframe() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.to_dataframe"]], "to_dict() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.to_dict"]], "to_json() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.to_json"]], "to_list() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.to_list"]], "to_protobuf() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.to_protobuf"]], "to_pydantic_model() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.to_pydantic_model"]], "to_strawberry_type() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.to_strawberry_type"]], "traverse() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.traverse"]], "traverse_flat() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.traverse_flat"]], "traverse_flat_per_path() (docarray.array.weaviate.documentarrayweaviate method)": [[117, "docarray.array.weaviate.DocumentArrayWeaviate.traverse_flat_per_path"]], "vector_cache_max_objects (docarray.array.weaviate.weaviateconfig attribute)": [[117, "docarray.array.weaviate.WeaviateConfig.vector_cache_max_objects"]], "basedctype (class in docarray.base)": [[118, "docarray.base.BaseDCType"]], "clear() (docarray.base.basedctype method)": [[118, "docarray.base.BaseDCType.clear"]], "copy_from() (docarray.base.basedctype method)": [[118, "docarray.base.BaseDCType.copy_from"]], "docarray.base": [[118, "module-docarray.base"]], "nbytes (docarray.base.basedctype property)": [[118, "docarray.base.BaseDCType.nbytes"]], "non_empty_fields (docarray.base.basedctype property)": [[118, "docarray.base.BaseDCType.non_empty_fields"]], "pop() (docarray.base.basedctype method)": [[118, "docarray.base.BaseDCType.pop"]], "docarray.dataclasses": [[119, "module-docarray.dataclasses"]], "audio_type (docarray.dataclasses.enums.documentmetadata attribute)": [[120, "docarray.dataclasses.enums.DocumentMetadata.AUDIO_TYPE"]], "attributetype (class in docarray.dataclasses.enums)": [[120, "docarray.dataclasses.enums.AttributeType"]], "blob_type (docarray.dataclasses.enums.documentmetadata attribute)": [[120, "docarray.dataclasses.enums.DocumentMetadata.BLOB_TYPE"]], "document (docarray.dataclasses.enums.attributetype attribute)": [[120, "docarray.dataclasses.enums.AttributeType.DOCUMENT"]], "documentmetadata (class in docarray.dataclasses.enums)": [[120, "docarray.dataclasses.enums.DocumentMetadata"]], "image_type (docarray.dataclasses.enums.documentmetadata attribute)": [[120, "docarray.dataclasses.enums.DocumentMetadata.IMAGE_TYPE"]], "image_uri (docarray.dataclasses.enums.documentmetadata attribute)": [[120, "docarray.dataclasses.enums.DocumentMetadata.IMAGE_URI"]], "iterable_document (docarray.dataclasses.enums.attributetype attribute)": [[120, "docarray.dataclasses.enums.AttributeType.ITERABLE_DOCUMENT"]], "iterable_nested (docarray.dataclasses.enums.attributetype attribute)": [[120, "docarray.dataclasses.enums.AttributeType.ITERABLE_NESTED"]], "iterable_primitive (docarray.dataclasses.enums.attributetype attribute)": [[120, "docarray.dataclasses.enums.AttributeType.ITERABLE_PRIMITIVE"]], "imagetype (class in docarray.dataclasses.enums)": [[120, "docarray.dataclasses.enums.ImageType"]], "json_type (docarray.dataclasses.enums.documentmetadata attribute)": [[120, "docarray.dataclasses.enums.DocumentMetadata.JSON_TYPE"]], "mesh_type (docarray.dataclasses.enums.documentmetadata attribute)": [[120, "docarray.dataclasses.enums.DocumentMetadata.MESH_TYPE"]], "multi_modal_schema (docarray.dataclasses.enums.documentmetadata attribute)": [[120, "docarray.dataclasses.enums.DocumentMetadata.MULTI_MODAL_SCHEMA"]], "ndarray (docarray.dataclasses.enums.imagetype attribute)": [[120, "docarray.dataclasses.enums.ImageType.NDARRAY"]], "nested (docarray.dataclasses.enums.attributetype attribute)": [[120, "docarray.dataclasses.enums.AttributeType.NESTED"]], "pil (docarray.dataclasses.enums.imagetype attribute)": [[120, "docarray.dataclasses.enums.ImageType.PIL"]], "primitive (docarray.dataclasses.enums.attributetype attribute)": [[120, "docarray.dataclasses.enums.AttributeType.PRIMITIVE"]], "uri (docarray.dataclasses.enums.imagetype attribute)": [[120, "docarray.dataclasses.enums.ImageType.URI"]], "video_type (docarray.dataclasses.enums.documentmetadata attribute)": [[120, "docarray.dataclasses.enums.DocumentMetadata.VIDEO_TYPE"]], "docarray.dataclasses.enums": [[120, "module-docarray.dataclasses.enums"]], "audio_getter() (in module docarray.dataclasses.getter)": [[121, "docarray.dataclasses.getter.audio_getter"]], "blob_getter() (in module docarray.dataclasses.getter)": [[121, "docarray.dataclasses.getter.blob_getter"]], "docarray.dataclasses.getter": [[121, "module-docarray.dataclasses.getter"]], "image_getter() (in module docarray.dataclasses.getter)": [[121, "docarray.dataclasses.getter.image_getter"]], "json_getter() (in module docarray.dataclasses.getter)": [[121, "docarray.dataclasses.getter.json_getter"]], "mesh_getter() (in module docarray.dataclasses.getter)": [[121, "docarray.dataclasses.getter.mesh_getter"]], "tabular_getter() (in module docarray.dataclasses.getter)": [[121, "docarray.dataclasses.getter.tabular_getter"]], "text_getter() (in module docarray.dataclasses.getter)": [[121, "docarray.dataclasses.getter.text_getter"]], "uri_getter() (in module docarray.dataclasses.getter)": [[121, "docarray.dataclasses.getter.uri_getter"]], "video_getter() (in module docarray.dataclasses.getter)": [[121, "docarray.dataclasses.getter.video_getter"]], "audio_setter() (in module docarray.dataclasses.setter)": [[122, "docarray.dataclasses.setter.audio_setter"]], "blob_setter() (in module docarray.dataclasses.setter)": [[122, "docarray.dataclasses.setter.blob_setter"]], "docarray.dataclasses.setter": [[122, "module-docarray.dataclasses.setter"]], "image_setter() (in module docarray.dataclasses.setter)": [[122, "docarray.dataclasses.setter.image_setter"]], "json_setter() (in module docarray.dataclasses.setter)": [[122, "docarray.dataclasses.setter.json_setter"]], "mesh_setter() (in module docarray.dataclasses.setter)": [[122, "docarray.dataclasses.setter.mesh_setter"]], "tabular_setter() (in module docarray.dataclasses.setter)": [[122, "docarray.dataclasses.setter.tabular_setter"]], "text_setter() (in module docarray.dataclasses.setter)": [[122, "docarray.dataclasses.setter.text_setter"]], "uri_setter() (in module docarray.dataclasses.setter)": [[122, "docarray.dataclasses.setter.uri_setter"]], "video_setter() (in module docarray.dataclasses.setter)": [[122, "docarray.dataclasses.setter.video_setter"]], "dataclass() (in module docarray.dataclasses.types)": [[123, "docarray.dataclasses.types.dataclass"]], "docarray.dataclasses.types": [[123, "module-docarray.dataclasses.types"]], "field() (in module docarray.dataclasses.types)": [[123, "docarray.dataclasses.types.field"]], "is_multimodal() (in module docarray.dataclasses.types)": [[123, "docarray.dataclasses.types.is_multimodal"]], "document (class in docarray.document)": [[124, "docarray.document.Document"]], "adjacency (docarray.document.document property)": [[124, "docarray.document.Document.adjacency"]], "blob (docarray.document.document property)": [[124, "docarray.document.Document.blob"]], "chunks (docarray.document.document property)": [[124, "docarray.document.Document.chunks"]], "clear() (docarray.document.document method)": [[124, "docarray.document.Document.clear"]], "content (docarray.document.document property)": [[124, "docarray.document.Document.content"]], "content_hash (docarray.document.document property)": [[124, "docarray.document.Document.content_hash"]], "content_type (docarray.document.document property)": [[124, "docarray.document.Document.content_type"]], "convert_blob_to_datauri() (docarray.document.document method)": [[124, "docarray.document.Document.convert_blob_to_datauri"]], "convert_blob_to_image_tensor() (docarray.document.document method)": [[124, "docarray.document.Document.convert_blob_to_image_tensor"]], "convert_blob_to_tensor() (docarray.document.document method)": [[124, "docarray.document.Document.convert_blob_to_tensor"]], "convert_content_to_datauri() (docarray.document.document method)": [[124, "docarray.document.Document.convert_content_to_datauri"]], "convert_image_tensor_to_blob() (docarray.document.document method)": [[124, "docarray.document.Document.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.document method)": [[124, "docarray.document.Document.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.document method)": [[124, "docarray.document.Document.convert_image_tensor_to_uri"]], "convert_tensor_to_blob() (docarray.document.document method)": [[124, "docarray.document.Document.convert_tensor_to_blob"]], "convert_tensor_to_text() (docarray.document.document method)": [[124, "docarray.document.Document.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.document method)": [[124, "docarray.document.Document.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.document method)": [[124, "docarray.document.Document.convert_text_to_tensor"]], "convert_uri_to_datauri() (docarray.document.document method)": [[124, "docarray.document.Document.convert_uri_to_datauri"]], "copy_from() (docarray.document.document method)": [[124, "docarray.document.Document.copy_from"]], "display() (docarray.document.document method)": [[124, "docarray.document.Document.display"]], "display_point_cloud_tensor() (docarray.document.document method)": [[124, "docarray.document.Document.display_point_cloud_tensor"]], "display_rgbd_tensor() (docarray.document.document method)": [[124, "docarray.document.Document.display_rgbd_tensor"]], "display_tensor() (docarray.document.document method)": [[124, "docarray.document.Document.display_tensor"]], "display_uri() (docarray.document.document method)": [[124, "docarray.document.Document.display_uri"]], "display_vertices_and_faces() (docarray.document.document method)": [[124, "docarray.document.Document.display_vertices_and_faces"]], "docarray.document": [[124, "module-docarray.document"]], "embed() (docarray.document.document method)": [[124, "docarray.document.Document.embed"]], "embed_feature_hashing() (docarray.document.document method)": [[124, "docarray.document.Document.embed_feature_hashing"]], "embedding (docarray.document.document property)": [[124, "docarray.document.Document.embedding"]], "evaluations (docarray.document.document property)": [[124, "docarray.document.Document.evaluations"]], "from_base64() (docarray.document.document class method)": [[124, "docarray.document.Document.from_base64"]], "from_bytes() (docarray.document.document class method)": [[124, "docarray.document.Document.from_bytes"]], "from_dict() (docarray.document.document class method)": [[124, "docarray.document.Document.from_dict"]], "from_json() (docarray.document.document class method)": [[124, "docarray.document.Document.from_json"]], "from_protobuf() (docarray.document.document class method)": [[124, "docarray.document.Document.from_protobuf"]], "from_pydantic_model() (docarray.document.document class method)": [[124, "docarray.document.Document.from_pydantic_model"]], "from_strawberry_type() (docarray.document.document class method)": [[124, "docarray.document.Document.from_strawberry_type"]], "generator_from_webcam() (docarray.document.document class method)": [[124, "docarray.document.Document.generator_from_webcam"]], "get_json_schema() (docarray.document.document class method)": [[124, "docarray.document.Document.get_json_schema"]], "get_multi_modal_attribute() (docarray.document.document method)": [[124, "docarray.document.Document.get_multi_modal_attribute"]], "get_vocabulary() (docarray.document.document method)": [[124, "docarray.document.Document.get_vocabulary"]], "granularity (docarray.document.document property)": [[124, "docarray.document.Document.granularity"]], "id (docarray.document.document property)": [[124, "docarray.document.Document.id"]], "is_multimodal (docarray.document.document property)": [[124, "docarray.document.Document.is_multimodal"]], "load_pil_image_to_datauri() (docarray.document.document method)": [[124, "docarray.document.Document.load_pil_image_to_datauri"]], "load_uri_to_audio_tensor() (docarray.document.document method)": [[124, "docarray.document.Document.load_uri_to_audio_tensor"]], "load_uri_to_blob() (docarray.document.document method)": [[124, "docarray.document.Document.load_uri_to_blob"]], "load_uri_to_image_tensor() (docarray.document.document method)": [[124, "docarray.document.Document.load_uri_to_image_tensor"]], "load_uri_to_point_cloud_tensor() (docarray.document.document method)": [[124, "docarray.document.Document.load_uri_to_point_cloud_tensor"]], "load_uri_to_text() (docarray.document.document method)": [[124, "docarray.document.Document.load_uri_to_text"]], "load_uri_to_vertices_and_faces() (docarray.document.document method)": [[124, "docarray.document.Document.load_uri_to_vertices_and_faces"]], "load_uri_to_video_tensor() (docarray.document.document method)": [[124, "docarray.document.Document.load_uri_to_video_tensor"]], "load_uris_to_rgbd_tensor() (docarray.document.document method)": [[124, "docarray.document.Document.load_uris_to_rgbd_tensor"]], "load_vertices_and_faces_to_point_cloud() (docarray.document.document method)": [[124, "docarray.document.Document.load_vertices_and_faces_to_point_cloud"]], "location (docarray.document.document property)": [[124, "docarray.document.Document.location"]], "match() (docarray.document.document method)": [[124, "docarray.document.Document.match"]], "matches (docarray.document.document property)": [[124, "docarray.document.Document.matches"]], "mime_type (docarray.document.document property)": [[124, "docarray.document.Document.mime_type"]], "modality (docarray.document.document property)": [[124, "docarray.document.Document.modality"]], "nbytes (docarray.document.document property)": [[124, "docarray.document.Document.nbytes"]], "non_empty_fields (docarray.document.document property)": [[124, "docarray.document.Document.non_empty_fields"]], "offset (docarray.document.document property)": [[124, "docarray.document.Document.offset"]], "parent_id (docarray.document.document property)": [[124, "docarray.document.Document.parent_id"]], "plot_matches_sprites() (docarray.document.document method)": [[124, "docarray.document.Document.plot_matches_sprites"]], "pop() (docarray.document.document method)": [[124, "docarray.document.Document.pop"]], "post() (docarray.document.document method)": [[124, "docarray.document.Document.post"]], "save_audio_tensor_to_file() (docarray.document.document method)": [[124, "docarray.document.Document.save_audio_tensor_to_file"]], "save_blob_to_file() (docarray.document.document method)": [[124, "docarray.document.Document.save_blob_to_file"]], "save_image_tensor_to_file() (docarray.document.document method)": [[124, "docarray.document.Document.save_image_tensor_to_file"]], "save_uri_to_file() (docarray.document.document method)": [[124, "docarray.document.Document.save_uri_to_file"]], "save_video_tensor_to_file() (docarray.document.document method)": [[124, "docarray.document.Document.save_video_tensor_to_file"]], "scores (docarray.document.document property)": [[124, "docarray.document.Document.scores"]], "set_image_tensor_channel_axis() (docarray.document.document method)": [[124, "docarray.document.Document.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.document method)": [[124, "docarray.document.Document.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.document method)": [[124, "docarray.document.Document.set_image_tensor_normalization"]], "set_image_tensor_resample() (docarray.document.document method)": [[124, "docarray.document.Document.set_image_tensor_resample"]], "set_image_tensor_shape() (docarray.document.document method)": [[124, "docarray.document.Document.set_image_tensor_shape"]], "set_multi_modal_attribute() (docarray.document.document method)": [[124, "docarray.document.Document.set_multi_modal_attribute"]], "summary() (docarray.document.document method)": [[124, "docarray.document.Document.summary"]], "tags (docarray.document.document property)": [[124, "docarray.document.Document.tags"]], "tensor (docarray.document.document property)": [[124, "docarray.document.Document.tensor"]], "text (docarray.document.document property)": [[124, "docarray.document.Document.text"]], "to_base64() (docarray.document.document method)": [[124, "docarray.document.Document.to_base64"]], "to_bytes() (docarray.document.document method)": [[124, "docarray.document.Document.to_bytes"]], "to_dict() (docarray.document.document method)": [[124, "docarray.document.Document.to_dict"]], "to_json() (docarray.document.document method)": [[124, "docarray.document.Document.to_json"]], "to_protobuf() (docarray.document.document method)": [[124, "docarray.document.Document.to_protobuf"]], "to_pydantic_model() (docarray.document.document method)": [[124, "docarray.document.Document.to_pydantic_model"]], "to_strawberry_type() (docarray.document.document method)": [[124, "docarray.document.Document.to_strawberry_type"]], "uri (docarray.document.document property)": [[124, "docarray.document.Document.uri"]], "weight (docarray.document.document property)": [[124, "docarray.document.Document.weight"]], "documentdata (class in docarray.document.data)": [[125, "docarray.document.data.DocumentData"]], "adjacency (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.adjacency"]], "blob (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.blob"]], "chunks (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.chunks"]], "content (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.content"]], "docarray.document.data": [[125, "module-docarray.document.data"]], "embedding (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.embedding"]], "evaluations (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.evaluations"]], "granularity (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.granularity"]], "id (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.id"]], "location (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.location"]], "matches (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.matches"]], "mime_type (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.mime_type"]], "modality (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.modality"]], "offset (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.offset"]], "parent_id (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.parent_id"]], "scores (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.scores"]], "tags (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.tags"]], "tensor (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.tensor"]], "text (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.text"]], "uri (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.uri"]], "weight (docarray.document.data.documentdata attribute)": [[125, "docarray.document.data.DocumentData.weight"]], "docarray.document.generators": [[126, "module-docarray.document.generators"]], "from_csv() (in module docarray.document.generators)": [[126, "docarray.document.generators.from_csv"]], "from_files() (in module docarray.document.generators)": [[126, "docarray.document.generators.from_files"]], "from_huggingface_datasets() (in module docarray.document.generators)": [[126, "docarray.document.generators.from_huggingface_datasets"]], "from_lines() (in module docarray.document.generators)": [[126, "docarray.document.generators.from_lines"]], "from_ndarray() (in module docarray.document.generators)": [[126, "docarray.document.generators.from_ndarray"]], "from_ndjson() (in module docarray.document.generators)": [[126, "docarray.document.generators.from_ndjson"]], "allmixins (class in docarray.document.mixins)": [[127, "docarray.document.mixins.AllMixins"]], "adjacency (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.adjacency"]], "blob (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.blob"]], "chunks (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.chunks"]], "content (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.content"]], "content_hash (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.content_hash"]], "content_type (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.content_type"]], "convert_blob_to_datauri() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.convert_blob_to_datauri"]], "convert_blob_to_image_tensor() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.convert_blob_to_image_tensor"]], "convert_blob_to_tensor() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.convert_blob_to_tensor"]], "convert_content_to_datauri() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.convert_content_to_datauri"]], "convert_image_tensor_to_blob() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.convert_image_tensor_to_uri"]], "convert_tensor_to_blob() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.convert_tensor_to_blob"]], "convert_tensor_to_text() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.convert_text_to_tensor"]], "convert_uri_to_datauri() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.convert_uri_to_datauri"]], "display() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.display"]], "display_point_cloud_tensor() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.display_point_cloud_tensor"]], "display_rgbd_tensor() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.display_rgbd_tensor"]], "display_tensor() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.display_tensor"]], "display_uri() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.display_uri"]], "display_vertices_and_faces() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.display_vertices_and_faces"]], "docarray.document.mixins": [[127, "module-docarray.document.mixins"]], "embed() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.embed"]], "embed_feature_hashing() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.embed_feature_hashing"]], "embedding (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.embedding"]], "evaluations (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.evaluations"]], "from_base64() (docarray.document.mixins.allmixins class method)": [[127, "docarray.document.mixins.AllMixins.from_base64"]], "from_bytes() (docarray.document.mixins.allmixins class method)": [[127, "docarray.document.mixins.AllMixins.from_bytes"]], "from_dict() (docarray.document.mixins.allmixins class method)": [[127, "docarray.document.mixins.AllMixins.from_dict"]], "from_json() (docarray.document.mixins.allmixins class method)": [[127, "docarray.document.mixins.AllMixins.from_json"]], "from_protobuf() (docarray.document.mixins.allmixins class method)": [[127, "docarray.document.mixins.AllMixins.from_protobuf"]], "from_pydantic_model() (docarray.document.mixins.allmixins class method)": [[127, "docarray.document.mixins.AllMixins.from_pydantic_model"]], "from_strawberry_type() (docarray.document.mixins.allmixins class method)": [[127, "docarray.document.mixins.AllMixins.from_strawberry_type"]], "generator_from_webcam() (docarray.document.mixins.allmixins class method)": [[127, "docarray.document.mixins.AllMixins.generator_from_webcam"]], "get_json_schema() (docarray.document.mixins.allmixins class method)": [[127, "docarray.document.mixins.AllMixins.get_json_schema"]], "get_multi_modal_attribute() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.get_multi_modal_attribute"]], "get_vocabulary() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.get_vocabulary"]], "granularity (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.granularity"]], "id (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.id"]], "is_multimodal (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.is_multimodal"]], "load_pil_image_to_datauri() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.load_pil_image_to_datauri"]], "load_uri_to_audio_tensor() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.load_uri_to_audio_tensor"]], "load_uri_to_blob() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.load_uri_to_blob"]], "load_uri_to_image_tensor() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.load_uri_to_image_tensor"]], "load_uri_to_point_cloud_tensor() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.load_uri_to_point_cloud_tensor"]], "load_uri_to_text() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.load_uri_to_text"]], "load_uri_to_vertices_and_faces() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.load_uri_to_vertices_and_faces"]], "load_uri_to_video_tensor() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.load_uri_to_video_tensor"]], "load_uris_to_rgbd_tensor() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.load_uris_to_rgbd_tensor"]], "load_vertices_and_faces_to_point_cloud() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.load_vertices_and_faces_to_point_cloud"]], "location (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.location"]], "match() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.match"]], "matches (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.matches"]], "mime_type (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.mime_type"]], "modality (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.modality"]], "offset (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.offset"]], "parent_id (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.parent_id"]], "plot_matches_sprites() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.plot_matches_sprites"]], "post() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.post"]], "save_audio_tensor_to_file() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.save_audio_tensor_to_file"]], "save_blob_to_file() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.save_blob_to_file"]], "save_image_tensor_to_file() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.save_image_tensor_to_file"]], "save_uri_to_file() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.save_uri_to_file"]], "save_video_tensor_to_file() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.save_video_tensor_to_file"]], "scores (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.scores"]], "set_image_tensor_channel_axis() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.set_image_tensor_normalization"]], "set_image_tensor_resample() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.set_image_tensor_resample"]], "set_image_tensor_shape() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.set_image_tensor_shape"]], "set_multi_modal_attribute() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.set_multi_modal_attribute"]], "summary() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.summary"]], "tags (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.tags"]], "tensor (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.tensor"]], "text (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.text"]], "to_base64() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.to_base64"]], "to_bytes() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.to_bytes"]], "to_dict() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.to_dict"]], "to_json() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.to_json"]], "to_protobuf() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.to_protobuf"]], "to_pydantic_model() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.to_pydantic_model"]], "to_strawberry_type() (docarray.document.mixins.allmixins method)": [[127, "docarray.document.mixins.AllMixins.to_strawberry_type"]], "uri (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.uri"]], "weight (docarray.document.mixins.allmixins property)": [[127, "docarray.document.mixins.AllMixins.weight"]], "getattributesmixin (class in docarray.document.mixins.attribute)": [[128, "docarray.document.mixins.attribute.GetAttributesMixin"]], "docarray.document.mixins.attribute": [[128, "module-docarray.document.mixins.attribute"]], "audiodatamixin (class in docarray.document.mixins.audio)": [[129, "docarray.document.mixins.audio.AudioDataMixin"]], "docarray.document.mixins.audio": [[129, "module-docarray.document.mixins.audio"]], "load_uri_to_audio_tensor() (docarray.document.mixins.audio.audiodatamixin method)": [[129, "docarray.document.mixins.audio.AudioDataMixin.load_uri_to_audio_tensor"]], "save_audio_tensor_to_file() (docarray.document.mixins.audio.audiodatamixin method)": [[129, "docarray.document.mixins.audio.AudioDataMixin.save_audio_tensor_to_file"]], "blobdatamixin (class in docarray.document.mixins.blob)": [[130, "docarray.document.mixins.blob.BlobDataMixin"]], "convert_blob_to_datauri() (docarray.document.mixins.blob.blobdatamixin method)": [[130, "docarray.document.mixins.blob.BlobDataMixin.convert_blob_to_datauri"]], "docarray.document.mixins.blob": [[130, "module-docarray.document.mixins.blob"]], "load_uri_to_blob() (docarray.document.mixins.blob.blobdatamixin method)": [[130, "docarray.document.mixins.blob.BlobDataMixin.load_uri_to_blob"]], "save_blob_to_file() (docarray.document.mixins.blob.blobdatamixin method)": [[130, "docarray.document.mixins.blob.BlobDataMixin.save_blob_to_file"]], "contentpropertymixin (class in docarray.document.mixins.content)": [[131, "docarray.document.mixins.content.ContentPropertyMixin"]], "content_hash (docarray.document.mixins.content.contentpropertymixin property)": [[131, "docarray.document.mixins.content.ContentPropertyMixin.content_hash"]], "convert_content_to_datauri() (docarray.document.mixins.content.contentpropertymixin method)": [[131, "docarray.document.mixins.content.ContentPropertyMixin.convert_content_to_datauri"]], "docarray.document.mixins.content": [[131, "module-docarray.document.mixins.content"]], "convertmixin (class in docarray.document.mixins.convert)": [[132, "docarray.document.mixins.convert.ConvertMixin"]], "convert_blob_to_tensor() (docarray.document.mixins.convert.convertmixin method)": [[132, "docarray.document.mixins.convert.ConvertMixin.convert_blob_to_tensor"]], "convert_tensor_to_blob() (docarray.document.mixins.convert.convertmixin method)": [[132, "docarray.document.mixins.convert.ConvertMixin.convert_tensor_to_blob"]], "convert_uri_to_datauri() (docarray.document.mixins.convert.convertmixin method)": [[132, "docarray.document.mixins.convert.ConvertMixin.convert_uri_to_datauri"]], "docarray.document.mixins.convert": [[132, "module-docarray.document.mixins.convert"]], "urifilemixin (class in docarray.document.mixins.dump)": [[133, "docarray.document.mixins.dump.UriFileMixin"]], "docarray.document.mixins.dump": [[133, "module-docarray.document.mixins.dump"]], "save_uri_to_file() (docarray.document.mixins.dump.urifilemixin method)": [[133, "docarray.document.mixins.dump.UriFileMixin.save_uri_to_file"]], "featurehashmixin (class in docarray.document.mixins.featurehash)": [[134, "docarray.document.mixins.featurehash.FeatureHashMixin"]], "docarray.document.mixins.featurehash": [[134, "module-docarray.document.mixins.featurehash"]], "embed_feature_hashing() (docarray.document.mixins.featurehash.featurehashmixin method)": [[134, "docarray.document.mixins.featurehash.FeatureHashMixin.embed_feature_hashing"]], "docarray.document.mixins.helper": [[135, "module-docarray.document.mixins.helper"]], "imagedatamixin (class in docarray.document.mixins.image)": [[136, "docarray.document.mixins.image.ImageDataMixin"]], "convert_blob_to_image_tensor() (docarray.document.mixins.image.imagedatamixin method)": [[136, "docarray.document.mixins.image.ImageDataMixin.convert_blob_to_image_tensor"]], "convert_image_tensor_to_blob() (docarray.document.mixins.image.imagedatamixin method)": [[136, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.mixins.image.imagedatamixin method)": [[136, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.mixins.image.imagedatamixin method)": [[136, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_uri"]], "docarray.document.mixins.image": [[136, "module-docarray.document.mixins.image"]], "load_pil_image_to_datauri() (docarray.document.mixins.image.imagedatamixin method)": [[136, "docarray.document.mixins.image.ImageDataMixin.load_pil_image_to_datauri"]], "load_uri_to_image_tensor() (docarray.document.mixins.image.imagedatamixin method)": [[136, "docarray.document.mixins.image.ImageDataMixin.load_uri_to_image_tensor"]], "save_image_tensor_to_file() (docarray.document.mixins.image.imagedatamixin method)": [[136, "docarray.document.mixins.image.ImageDataMixin.save_image_tensor_to_file"]], "set_image_tensor_channel_axis() (docarray.document.mixins.image.imagedatamixin method)": [[136, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.mixins.image.imagedatamixin method)": [[136, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.mixins.image.imagedatamixin method)": [[136, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_normalization"]], "set_image_tensor_resample() (docarray.document.mixins.image.imagedatamixin method)": [[136, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_resample"]], "set_image_tensor_shape() (docarray.document.mixins.image.imagedatamixin method)": [[136, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_shape"]], "colors (docarray.document.mixins.mesh.pointcloudenum attribute)": [[137, "docarray.document.mixins.mesh.PointCloudEnum.COLORS"]], "faces (docarray.document.mixins.mesh.meshenum attribute)": [[137, "docarray.document.mixins.mesh.MeshEnum.FACES"]], "file_extensions (docarray.document.mixins.mesh.meshenum attribute)": [[137, "docarray.document.mixins.mesh.MeshEnum.FILE_EXTENSIONS"]], "meshdatamixin (class in docarray.document.mixins.mesh)": [[137, "docarray.document.mixins.mesh.MeshDataMixin"]], "meshenum (class in docarray.document.mixins.mesh)": [[137, "docarray.document.mixins.mesh.MeshEnum"]], "pointcloudenum (class in docarray.document.mixins.mesh)": [[137, "docarray.document.mixins.mesh.PointCloudEnum"]], "vertices (docarray.document.mixins.mesh.meshenum attribute)": [[137, "docarray.document.mixins.mesh.MeshEnum.VERTICES"]], "docarray.document.mixins.mesh": [[137, "module-docarray.document.mixins.mesh"]], "load_uri_to_point_cloud_tensor() (docarray.document.mixins.mesh.meshdatamixin method)": [[137, "docarray.document.mixins.mesh.MeshDataMixin.load_uri_to_point_cloud_tensor"]], "load_uri_to_vertices_and_faces() (docarray.document.mixins.mesh.meshdatamixin method)": [[137, "docarray.document.mixins.mesh.MeshDataMixin.load_uri_to_vertices_and_faces"]], "load_uris_to_rgbd_tensor() (docarray.document.mixins.mesh.meshdatamixin method)": [[137, "docarray.document.mixins.mesh.MeshDataMixin.load_uris_to_rgbd_tensor"]], "load_vertices_and_faces_to_point_cloud() (docarray.document.mixins.mesh.meshdatamixin method)": [[137, "docarray.document.mixins.mesh.MeshDataMixin.load_vertices_and_faces_to_point_cloud"]], "multimodalmixin (class in docarray.document.mixins.multimodal)": [[138, "docarray.document.mixins.multimodal.MultiModalMixin"]], "docarray.document.mixins.multimodal": [[138, "module-docarray.document.mixins.multimodal"]], "get_multi_modal_attribute() (docarray.document.mixins.multimodal.multimodalmixin method)": [[138, "docarray.document.mixins.multimodal.MultiModalMixin.get_multi_modal_attribute"]], "is_multimodal (docarray.document.mixins.multimodal.multimodalmixin property)": [[138, "docarray.document.mixins.multimodal.MultiModalMixin.is_multimodal"]], "set_multi_modal_attribute() (docarray.document.mixins.multimodal.multimodalmixin method)": [[138, "docarray.document.mixins.multimodal.MultiModalMixin.set_multi_modal_attribute"]], "plotmixin (class in docarray.document.mixins.plot)": [[139, "docarray.document.mixins.plot.PlotMixin"]], "display() (docarray.document.mixins.plot.plotmixin method)": [[139, "docarray.document.mixins.plot.PlotMixin.display"]], "display_point_cloud_tensor() (docarray.document.mixins.plot.plotmixin method)": [[139, "docarray.document.mixins.plot.PlotMixin.display_point_cloud_tensor"]], "display_rgbd_tensor() (docarray.document.mixins.plot.plotmixin method)": [[139, "docarray.document.mixins.plot.PlotMixin.display_rgbd_tensor"]], "display_tensor() (docarray.document.mixins.plot.plotmixin method)": [[139, "docarray.document.mixins.plot.PlotMixin.display_tensor"]], "display_uri() (docarray.document.mixins.plot.plotmixin method)": [[139, "docarray.document.mixins.plot.PlotMixin.display_uri"]], "display_vertices_and_faces() (docarray.document.mixins.plot.plotmixin method)": [[139, "docarray.document.mixins.plot.PlotMixin.display_vertices_and_faces"]], "docarray.document.mixins.plot": [[139, "module-docarray.document.mixins.plot"]], "plot_matches_sprites() (docarray.document.mixins.plot.plotmixin method)": [[139, "docarray.document.mixins.plot.PlotMixin.plot_matches_sprites"]], "summary() (docarray.document.mixins.plot.plotmixin method)": [[139, "docarray.document.mixins.plot.PlotMixin.summary"]], "portingmixin (class in docarray.document.mixins.porting)": [[140, "docarray.document.mixins.porting.PortingMixin"]], "docarray.document.mixins.porting": [[140, "module-docarray.document.mixins.porting"]], "from_base64() (docarray.document.mixins.porting.portingmixin class method)": [[140, "docarray.document.mixins.porting.PortingMixin.from_base64"]], "from_bytes() (docarray.document.mixins.porting.portingmixin class method)": [[140, "docarray.document.mixins.porting.PortingMixin.from_bytes"]], "from_dict() (docarray.document.mixins.porting.portingmixin class method)": [[140, "docarray.document.mixins.porting.PortingMixin.from_dict"]], "from_json() (docarray.document.mixins.porting.portingmixin class method)": [[140, "docarray.document.mixins.porting.PortingMixin.from_json"]], "to_base64() (docarray.document.mixins.porting.portingmixin method)": [[140, "docarray.document.mixins.porting.PortingMixin.to_base64"]], "to_bytes() (docarray.document.mixins.porting.portingmixin method)": [[140, "docarray.document.mixins.porting.PortingMixin.to_bytes"]], "to_dict() (docarray.document.mixins.porting.portingmixin method)": [[140, "docarray.document.mixins.porting.PortingMixin.to_dict"]], "to_json() (docarray.document.mixins.porting.portingmixin method)": [[140, "docarray.document.mixins.porting.PortingMixin.to_json"]], "propertymixin (class in docarray.document.mixins.property)": [[141, "docarray.document.mixins.property.PropertyMixin"]], "adjacency (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.adjacency"]], "blob (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.blob"]], "chunks (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.chunks"]], "content (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.content"]], "content_type (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.content_type"]], "docarray.document.mixins.property": [[141, "module-docarray.document.mixins.property"]], "embedding (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.embedding"]], "evaluations (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.evaluations"]], "granularity (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.granularity"]], "id (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.id"]], "location (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.location"]], "matches (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.matches"]], "mime_type (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.mime_type"]], "modality (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.modality"]], "offset (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.offset"]], "parent_id (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.parent_id"]], "scores (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.scores"]], "tags (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.tags"]], "tensor (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.tensor"]], "text (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.text"]], "uri (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.uri"]], "weight (docarray.document.mixins.property.propertymixin property)": [[141, "docarray.document.mixins.property.PropertyMixin.weight"]], "protobufmixin (class in docarray.document.mixins.protobuf)": [[142, "docarray.document.mixins.protobuf.ProtobufMixin"]], "docarray.document.mixins.protobuf": [[142, "module-docarray.document.mixins.protobuf"]], "from_protobuf() (docarray.document.mixins.protobuf.protobufmixin class method)": [[142, "docarray.document.mixins.protobuf.ProtobufMixin.from_protobuf"]], "to_protobuf() (docarray.document.mixins.protobuf.protobufmixin method)": [[142, "docarray.document.mixins.protobuf.ProtobufMixin.to_protobuf"]], "pydanticmixin (class in docarray.document.mixins.pydantic)": [[143, "docarray.document.mixins.pydantic.PydanticMixin"]], "docarray.document.mixins.pydantic": [[143, "module-docarray.document.mixins.pydantic"]], "from_pydantic_model() (docarray.document.mixins.pydantic.pydanticmixin class method)": [[143, "docarray.document.mixins.pydantic.PydanticMixin.from_pydantic_model"]], "get_json_schema() (docarray.document.mixins.pydantic.pydanticmixin class method)": [[143, "docarray.document.mixins.pydantic.PydanticMixin.get_json_schema"]], "to_pydantic_model() (docarray.document.mixins.pydantic.pydanticmixin method)": [[143, "docarray.document.mixins.pydantic.PydanticMixin.to_pydantic_model"]], "colorboxembedding (class in docarray.document.mixins.rich_embedding)": [[144, "docarray.document.mixins.rich_embedding.ColorBoxEmbedding"]], "docarray.document.mixins.rich_embedding": [[144, "module-docarray.document.mixins.rich_embedding"]], "strawberrymixin (class in docarray.document.mixins.strawberry)": [[145, "docarray.document.mixins.strawberry.StrawberryMixin"]], "docarray.document.mixins.strawberry": [[145, "module-docarray.document.mixins.strawberry"]], "from_strawberry_type() (docarray.document.mixins.strawberry.strawberrymixin class method)": [[145, "docarray.document.mixins.strawberry.StrawberryMixin.from_strawberry_type"]], "to_strawberry_type() (docarray.document.mixins.strawberry.strawberrymixin method)": [[145, "docarray.document.mixins.strawberry.StrawberryMixin.to_strawberry_type"]], "singletonsugarmixin (class in docarray.document.mixins.sugar)": [[146, "docarray.document.mixins.sugar.SingletonSugarMixin"]], "docarray.document.mixins.sugar": [[146, "module-docarray.document.mixins.sugar"]], "embed() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[146, "docarray.document.mixins.sugar.SingletonSugarMixin.embed"]], "match() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[146, "docarray.document.mixins.sugar.SingletonSugarMixin.match"]], "post() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[146, "docarray.document.mixins.sugar.SingletonSugarMixin.post"]], "textdatamixin (class in docarray.document.mixins.text)": [[147, "docarray.document.mixins.text.TextDataMixin"]], "convert_tensor_to_text() (docarray.document.mixins.text.textdatamixin method)": [[147, "docarray.document.mixins.text.TextDataMixin.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.mixins.text.textdatamixin method)": [[147, "docarray.document.mixins.text.TextDataMixin.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.mixins.text.textdatamixin method)": [[147, "docarray.document.mixins.text.TextDataMixin.convert_text_to_tensor"]], "docarray.document.mixins.text": [[147, "module-docarray.document.mixins.text"]], "get_vocabulary() (docarray.document.mixins.text.textdatamixin method)": [[147, "docarray.document.mixins.text.TextDataMixin.get_vocabulary"]], "load_uri_to_text() (docarray.document.mixins.text.textdatamixin method)": [[147, "docarray.document.mixins.text.TextDataMixin.load_uri_to_text"]], "videodatamixin (class in docarray.document.mixins.video)": [[148, "docarray.document.mixins.video.VideoDataMixin"]], "docarray.document.mixins.video": [[148, "module-docarray.document.mixins.video"]], "generator_from_webcam() (docarray.document.mixins.video.videodatamixin class method)": [[148, "docarray.document.mixins.video.VideoDataMixin.generator_from_webcam"]], "load_uri_to_video_tensor() (docarray.document.mixins.video.videodatamixin method)": [[148, "docarray.document.mixins.video.VideoDataMixin.load_uri_to_video_tensor"]], "save_video_tensor_to_file() (docarray.document.mixins.video.videodatamixin method)": [[148, "docarray.document.mixins.video.VideoDataMixin.save_video_tensor_to_file"]], "pydanticdocument (class in docarray.document.pydantic_model)": [[149, "docarray.document.pydantic_model.PydanticDocument"]], "pydanticdocument.config (class in docarray.document.pydantic_model)": [[149, "docarray.document.pydantic_model.PydanticDocument.Config"]], "adjacency (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.adjacency"]], "blob (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.blob"]], "chunks (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.chunks"]], "construct() (docarray.document.pydantic_model.pydanticdocument class method)": [[149, "docarray.document.pydantic_model.PydanticDocument.construct"]], "copy() (docarray.document.pydantic_model.pydanticdocument method)": [[149, "docarray.document.pydantic_model.PydanticDocument.copy"]], "dict() (docarray.document.pydantic_model.pydanticdocument method)": [[149, "docarray.document.pydantic_model.PydanticDocument.dict"]], "docarray.document.pydantic_model": [[149, "module-docarray.document.pydantic_model"]], "embedding (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.embedding"]], "evaluations (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.evaluations"]], "from_orm() (docarray.document.pydantic_model.pydanticdocument class method)": [[149, "docarray.document.pydantic_model.PydanticDocument.from_orm"]], "granularity (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.granularity"]], "id (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.id"]], "json() (docarray.document.pydantic_model.pydanticdocument method)": [[149, "docarray.document.pydantic_model.PydanticDocument.json"]], "location (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.location"]], "matches (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.matches"]], "mime_type (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.mime_type"]], "modality (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.modality"]], "offset (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.offset"]], "parent_id (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.parent_id"]], "parse_file() (docarray.document.pydantic_model.pydanticdocument class method)": [[149, "docarray.document.pydantic_model.PydanticDocument.parse_file"]], "parse_obj() (docarray.document.pydantic_model.pydanticdocument class method)": [[149, "docarray.document.pydantic_model.PydanticDocument.parse_obj"]], "parse_raw() (docarray.document.pydantic_model.pydanticdocument class method)": [[149, "docarray.document.pydantic_model.PydanticDocument.parse_raw"]], "schema() (docarray.document.pydantic_model.pydanticdocument class method)": [[149, "docarray.document.pydantic_model.PydanticDocument.schema"]], "schema_json() (docarray.document.pydantic_model.pydanticdocument class method)": [[149, "docarray.document.pydantic_model.PydanticDocument.schema_json"]], "scores (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.scores"]], "smart_union (docarray.document.pydantic_model.pydanticdocument.config attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.Config.smart_union"]], "tags (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.tags"]], "tensor (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.tensor"]], "text (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.text"]], "update_forward_refs() (docarray.document.pydantic_model.pydanticdocument class method)": [[149, "docarray.document.pydantic_model.PydanticDocument.update_forward_refs"]], "uri (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.uri"]], "validate() (docarray.document.pydantic_model.pydanticdocument class method)": [[149, "docarray.document.pydantic_model.PydanticDocument.validate"]], "weight (docarray.document.pydantic_model.pydanticdocument attribute)": [[149, "docarray.document.pydantic_model.PydanticDocument.weight"]], "strawberrydocument (class in docarray.document.strawberry_type)": [[150, "docarray.document.strawberry_type.StrawberryDocument"]], "strawberrydocumentinput (class in docarray.document.strawberry_type)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput"]], "adjacency (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.adjacency"]], "adjacency (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.adjacency"]], "blob (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.blob"]], "blob (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.blob"]], "chunks (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.chunks"]], "chunks (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.chunks"]], "docarray.document.strawberry_type": [[150, "module-docarray.document.strawberry_type"]], "embedding (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.embedding"]], "embedding (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.embedding"]], "evaluations (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.evaluations"]], "evaluations (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.evaluations"]], "granularity (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.granularity"]], "granularity (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.granularity"]], "id (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.id"]], "id (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.id"]], "location (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.location"]], "location (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.location"]], "matches (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.matches"]], "matches (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.matches"]], "mime_type (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.mime_type"]], "mime_type (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.mime_type"]], "modality (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.modality"]], "modality (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.modality"]], "offset (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.offset"]], "offset (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.offset"]], "parent_id (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.parent_id"]], "parent_id (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.parent_id"]], "scores (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.scores"]], "scores (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.scores"]], "tags (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.tags"]], "tags (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.tags"]], "tensor (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.tensor"]], "tensor (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.tensor"]], "text (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.text"]], "text (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.text"]], "uri (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.uri"]], "uri (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.uri"]], "weight (docarray.document.strawberry_type.strawberrydocument attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocument.weight"]], "weight (docarray.document.strawberry_type.strawberrydocumentinput attribute)": [[150, "docarray.document.strawberry_type.StrawberryDocumentInput.weight"]], "add_protocol_and_compress_to_file_path() (in module docarray.helper)": [[151, "docarray.helper.add_protocol_and_compress_to_file_path"]], "cached_property (class in docarray.helper)": [[151, "docarray.helper.cached_property"]], "check_root_id() (in module docarray.helper)": [[151, "docarray.helper.check_root_id"]], "compress_bytes() (in module docarray.helper)": [[151, "docarray.helper.compress_bytes"]], "dataclass_from_dict() (in module docarray.helper)": [[151, "docarray.helper.dataclass_from_dict"]], "decompress_bytes() (in module docarray.helper)": [[151, "docarray.helper.decompress_bytes"]], "deprecate_by() (in module docarray.helper)": [[151, "docarray.helper.deprecate_by"]], "docarray.helper": [[151, "module-docarray.helper"]], "download_mermaid_url() (in module docarray.helper)": [[151, "docarray.helper.download_mermaid_url"]], "dunder_get() (in module docarray.helper)": [[151, "docarray.helper.dunder_get"]], "filter_dict() (in module docarray.helper)": [[151, "docarray.helper.filter_dict"]], "get_ci_vendor() (in module docarray.helper)": [[151, "docarray.helper.get_ci_vendor"]], "get_compress_ctx() (in module docarray.helper)": [[151, "docarray.helper.get_compress_ctx"]], "get_full_version() (in module docarray.helper)": [[151, "docarray.helper.get_full_version"]], "login() (in module docarray.helper)": [[151, "docarray.helper.login"]], "logout() (in module docarray.helper)": [[151, "docarray.helper.logout"]], "protocol_and_compress_from_file_path() (in module docarray.helper)": [[151, "docarray.helper.protocol_and_compress_from_file_path"]], "random_identity() (in module docarray.helper)": [[151, "docarray.helper.random_identity"]], "random_port() (in module docarray.helper)": [[151, "docarray.helper.random_port"]], "random_uuid() (in module docarray.helper)": [[151, "docarray.helper.random_uuid"]], "reset_ports() (in module docarray.helper)": [[151, "docarray.helper.reset_ports"]], "typename() (in module docarray.helper)": [[151, "docarray.helper.typename"]], "docarray.math": [[152, "module-docarray.math"]], "cdist() (in module docarray.math.distance)": [[153, "docarray.math.distance.cdist"]], "docarray.math.distance": [[153, "module-docarray.math.distance"]], "pdist() (in module docarray.math.distance)": [[153, "docarray.math.distance.pdist"]], "cosine() (in module docarray.math.distance.numpy)": [[154, "docarray.math.distance.numpy.cosine"]], "docarray.math.distance.numpy": [[154, "module-docarray.math.distance.numpy"]], "euclidean() (in module docarray.math.distance.numpy)": [[154, "docarray.math.distance.numpy.euclidean"]], "sparse_cosine() (in module docarray.math.distance.numpy)": [[154, "docarray.math.distance.numpy.sparse_cosine"]], "sparse_euclidean() (in module docarray.math.distance.numpy)": [[154, "docarray.math.distance.numpy.sparse_euclidean"]], "sparse_sqeuclidean() (in module docarray.math.distance.numpy)": [[154, "docarray.math.distance.numpy.sparse_sqeuclidean"]], "sqeuclidean() (in module docarray.math.distance.numpy)": [[154, "docarray.math.distance.numpy.sqeuclidean"]], "cosine() (in module docarray.math.distance.tensorflow)": [[156, "docarray.math.distance.tensorflow.cosine"]], "docarray.math.distance.tensorflow": [[156, "module-docarray.math.distance.tensorflow"]], "euclidean() (in module docarray.math.distance.tensorflow)": [[156, "docarray.math.distance.tensorflow.euclidean"]], "sqeuclidean() (in module docarray.math.distance.tensorflow)": [[156, "docarray.math.distance.tensorflow.sqeuclidean"]], "cosine() (in module docarray.math.distance.torch)": [[157, "docarray.math.distance.torch.cosine"]], "docarray.math.distance.torch": [[157, "module-docarray.math.distance.torch"]], "euclidean() (in module docarray.math.distance.torch)": [[157, "docarray.math.distance.torch.euclidean"]], "sqeuclidean() (in module docarray.math.distance.torch)": [[157, "docarray.math.distance.torch.sqeuclidean"]], "average_precision() (in module docarray.math.evaluation)": [[158, "docarray.math.evaluation.average_precision"]], "dcg_at_k() (in module docarray.math.evaluation)": [[158, "docarray.math.evaluation.dcg_at_k"]], "docarray.math.evaluation": [[158, "module-docarray.math.evaluation"]], "f1_score_at_k() (in module docarray.math.evaluation)": [[158, "docarray.math.evaluation.f1_score_at_k"]], "hit_at_k() (in module docarray.math.evaluation)": [[158, "docarray.math.evaluation.hit_at_k"]], "ndcg_at_k() (in module docarray.math.evaluation)": [[158, "docarray.math.evaluation.ndcg_at_k"]], "precision_at_k() (in module docarray.math.evaluation)": [[158, "docarray.math.evaluation.precision_at_k"]], "r_precision() (in module docarray.math.evaluation)": [[158, "docarray.math.evaluation.r_precision"]], "recall_at_k() (in module docarray.math.evaluation)": [[158, "docarray.math.evaluation.recall_at_k"]], "reciprocal_rank() (in module docarray.math.evaluation)": [[158, "docarray.math.evaluation.reciprocal_rank"]], "docarray.math.helper": [[159, "module-docarray.math.helper"]], "minmax_normalize() (in module docarray.math.helper)": [[159, "docarray.math.helper.minmax_normalize"]], "top_k() (in module docarray.math.helper)": [[159, "docarray.math.helper.top_k"]], "update_rows_x_mat_best() (in module docarray.math.helper)": [[159, "docarray.math.helper.update_rows_x_mat_best"]], "check_arraylike_equality() (in module docarray.math.ndarray)": [[160, "docarray.math.ndarray.check_arraylike_equality"]], "detach_tensor_if_present() (in module docarray.math.ndarray)": [[160, "docarray.math.ndarray.detach_tensor_if_present"]], "docarray.math.ndarray": [[160, "module-docarray.math.ndarray"]], "get_array_rows() (in module docarray.math.ndarray)": [[160, "docarray.math.ndarray.get_array_rows"]], "get_array_type() (in module docarray.math.ndarray)": [[160, "docarray.math.ndarray.get_array_type"]], "ravel() (in module docarray.math.ndarray)": [[160, "docarray.math.ndarray.ravel"]], "to_list() (in module docarray.math.ndarray)": [[160, "docarray.math.ndarray.to_list"]], "to_numpy_array() (in module docarray.math.ndarray)": [[160, "docarray.math.ndarray.to_numpy_array"]], "unravel() (in module docarray.math.ndarray)": [[160, "docarray.math.ndarray.unravel"]], "docarray.proto": [[161, "module-docarray.proto"]], "docarray.proto.docarray_pb2": [[162, "module-docarray.proto.docarray_pb2"]], "docarray.proto.io": [[163, "module-docarray.proto.io"]], "flush_proto() (in module docarray.proto.io)": [[163, "docarray.proto.io.flush_proto"]], "parse_proto() (in module docarray.proto.io)": [[163, "docarray.proto.io.parse_proto"]], "docarray.proto.io.ndarray": [[164, "module-docarray.proto.io.ndarray"]], "flush_ndarray() (in module docarray.proto.io.ndarray)": [[164, "docarray.proto.io.ndarray.flush_ndarray"]], "read_ndarray() (in module docarray.proto.io.ndarray)": [[164, "docarray.proto.io.ndarray.read_ndarray"]], "docarray.proto.pb": [[165, "module-docarray.proto.pb"]], "docarray.proto.pb.docarray_pb2": [[166, "module-docarray.proto.pb.docarray_pb2"]], "docarray.proto.pb2": [[167, "module-docarray.proto.pb2"]], "docarray.proto.pb2.docarray_pb2": [[168, "module-docarray.proto.pb2.docarray_pb2"]], "namedscore (class in docarray.score)": [[169, "docarray.score.NamedScore"]], "clear() (docarray.score.namedscore method)": [[169, "docarray.score.NamedScore.clear"]], "copy_from() (docarray.score.namedscore method)": [[169, "docarray.score.NamedScore.copy_from"]], "description (docarray.score.namedscore property)": [[169, "docarray.score.NamedScore.description"]], "docarray.score": [[169, "module-docarray.score"]], "nbytes (docarray.score.namedscore property)": [[169, "docarray.score.NamedScore.nbytes"]], "non_empty_fields (docarray.score.namedscore property)": [[169, "docarray.score.NamedScore.non_empty_fields"]], "op_name (docarray.score.namedscore property)": [[169, "docarray.score.NamedScore.op_name"]], "pop() (docarray.score.namedscore method)": [[169, "docarray.score.NamedScore.pop"]], "ref_id (docarray.score.namedscore property)": [[169, "docarray.score.NamedScore.ref_id"]], "to_dict() (docarray.score.namedscore method)": [[169, "docarray.score.NamedScore.to_dict"]], "value (docarray.score.namedscore property)": [[169, "docarray.score.NamedScore.value"]], "namedscoredata (class in docarray.score.data)": [[170, "docarray.score.data.NamedScoreData"]], "description (docarray.score.data.namedscoredata attribute)": [[170, "docarray.score.data.NamedScoreData.description"]], "docarray.score.data": [[170, "module-docarray.score.data"]], "op_name (docarray.score.data.namedscoredata attribute)": [[170, "docarray.score.data.NamedScoreData.op_name"]], "ref_id (docarray.score.data.namedscoredata attribute)": [[170, "docarray.score.data.NamedScoreData.ref_id"]], "value (docarray.score.data.namedscoredata attribute)": [[170, "docarray.score.data.NamedScoreData.value"]], "allmixins (class in docarray.score.mixins)": [[171, "docarray.score.mixins.AllMixins"]], "description (docarray.score.mixins.allmixins property)": [[171, "docarray.score.mixins.AllMixins.description"]], "docarray.score.mixins": [[171, "module-docarray.score.mixins"]], "op_name (docarray.score.mixins.allmixins property)": [[171, "docarray.score.mixins.AllMixins.op_name"]], "ref_id (docarray.score.mixins.allmixins property)": [[171, "docarray.score.mixins.AllMixins.ref_id"]], "to_dict() (docarray.score.mixins.allmixins method)": [[171, "docarray.score.mixins.AllMixins.to_dict"]], "value (docarray.score.mixins.allmixins property)": [[171, "docarray.score.mixins.AllMixins.value"]], "propertymixin (class in docarray.score.mixins.property)": [[172, "docarray.score.mixins.property.PropertyMixin"]], "description (docarray.score.mixins.property.propertymixin property)": [[172, "docarray.score.mixins.property.PropertyMixin.description"]], "docarray.score.mixins.property": [[172, "module-docarray.score.mixins.property"]], "op_name (docarray.score.mixins.property.propertymixin property)": [[172, "docarray.score.mixins.property.PropertyMixin.op_name"]], "ref_id (docarray.score.mixins.property.propertymixin property)": [[172, "docarray.score.mixins.property.PropertyMixin.ref_id"]], "value (docarray.score.mixins.property.propertymixin property)": [[172, "docarray.score.mixins.property.PropertyMixin.value"]], "representmixin (class in docarray.score.mixins.representer)": [[173, "docarray.score.mixins.representer.RepresentMixin"]], "docarray.score.mixins.representer": [[173, "module-docarray.score.mixins.representer"]], "to_dict() (docarray.score.mixins.representer.representmixin method)": [[173, "docarray.score.mixins.representer.RepresentMixin.to_dict"]], "docarray.typing": [[174, "module-docarray.typing"]]}})