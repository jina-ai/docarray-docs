Search.setIndex({"docnames": ["advanced/document-store/annlite", "advanced/document-store/benchmark", "advanced/document-store/elasticsearch", "advanced/document-store/extend", "advanced/document-store/index", "advanced/document-store/qdrant", "advanced/document-store/sqlite", "advanced/document-store/subindex", "advanced/document-store/weaviate", "advanced/graphql-support/index", "advanced/torch-support/index", "api", "api/docarray", "api/docarray.array", "api/docarray.array.annlite", "api/docarray.array.base", "api/docarray.array.chunk", "api/docarray.array.document", "api/docarray.array.elastic", "api/docarray.array.match", "api/docarray.array.memory", "api/docarray.array.mixins", "api/docarray.array.mixins.content", "api/docarray.array.mixins.dataloader", "api/docarray.array.mixins.dataloader.helper", "api/docarray.array.mixins.delitem", "api/docarray.array.mixins.embed", "api/docarray.array.mixins.empty", "api/docarray.array.mixins.evaluation", "api/docarray.array.mixins.find", "api/docarray.array.mixins.getattr", "api/docarray.array.mixins.getitem", "api/docarray.array.mixins.group", "api/docarray.array.mixins.io", "api/docarray.array.mixins.io.binary", "api/docarray.array.mixins.io.common", "api/docarray.array.mixins.io.csv", "api/docarray.array.mixins.io.dataframe", "api/docarray.array.mixins.io.from_gen", "api/docarray.array.mixins.io.json", "api/docarray.array.mixins.io.pbar", "api/docarray.array.mixins.io.pushpull", "api/docarray.array.mixins.match", "api/docarray.array.mixins.parallel", "api/docarray.array.mixins.plot", "api/docarray.array.mixins.post", "api/docarray.array.mixins.pydantic", "api/docarray.array.mixins.reduce", "api/docarray.array.mixins.sample", "api/docarray.array.mixins.setitem", "api/docarray.array.mixins.strawberry", "api/docarray.array.mixins.text", "api/docarray.array.mixins.traverse", "api/docarray.array.qdrant", "api/docarray.array.queryset", "api/docarray.array.queryset.lookup", "api/docarray.array.queryset.parser", "api/docarray.array.sqlite", "api/docarray.array.storage", "api/docarray.array.storage.annlite", "api/docarray.array.storage.annlite.backend", "api/docarray.array.storage.annlite.find", "api/docarray.array.storage.annlite.getsetdel", "api/docarray.array.storage.annlite.helper", "api/docarray.array.storage.annlite.seqlike", "api/docarray.array.storage.base", "api/docarray.array.storage.base.backend", "api/docarray.array.storage.base.getsetdel", "api/docarray.array.storage.base.helper", "api/docarray.array.storage.base.seqlike", "api/docarray.array.storage.elastic", "api/docarray.array.storage.elastic.backend", "api/docarray.array.storage.elastic.find", "api/docarray.array.storage.elastic.getsetdel", "api/docarray.array.storage.elastic.seqlike", "api/docarray.array.storage.memory", "api/docarray.array.storage.memory.backend", "api/docarray.array.storage.memory.find", "api/docarray.array.storage.memory.getsetdel", "api/docarray.array.storage.memory.seqlike", "api/docarray.array.storage.qdrant", "api/docarray.array.storage.qdrant.backend", "api/docarray.array.storage.qdrant.find", "api/docarray.array.storage.qdrant.getsetdel", "api/docarray.array.storage.qdrant.helper", "api/docarray.array.storage.qdrant.seqlike", "api/docarray.array.storage.registry", "api/docarray.array.storage.sqlite", "api/docarray.array.storage.sqlite.backend", "api/docarray.array.storage.sqlite.getsetdel", "api/docarray.array.storage.sqlite.helper", "api/docarray.array.storage.sqlite.seqlike", "api/docarray.array.storage.weaviate", "api/docarray.array.storage.weaviate.backend", "api/docarray.array.storage.weaviate.find", "api/docarray.array.storage.weaviate.getsetdel", "api/docarray.array.storage.weaviate.seqlike", "api/docarray.array.weaviate", "api/docarray.base", "api/docarray.dataclasses", "api/docarray.dataclasses.getter", "api/docarray.dataclasses.setter", "api/docarray.dataclasses.types", "api/docarray.document", "api/docarray.document.data", "api/docarray.document.generators", "api/docarray.document.mixins", "api/docarray.document.mixins.attribute", "api/docarray.document.mixins.audio", "api/docarray.document.mixins.blob", "api/docarray.document.mixins.content", "api/docarray.document.mixins.convert", "api/docarray.document.mixins.dump", "api/docarray.document.mixins.featurehash", "api/docarray.document.mixins.helper", "api/docarray.document.mixins.image", "api/docarray.document.mixins.mesh", "api/docarray.document.mixins.multimodal", "api/docarray.document.mixins.plot", "api/docarray.document.mixins.porting", "api/docarray.document.mixins.property", "api/docarray.document.mixins.protobuf", "api/docarray.document.mixins.pydantic", "api/docarray.document.mixins.rich_embedding", "api/docarray.document.mixins.strawberry", "api/docarray.document.mixins.sugar", "api/docarray.document.mixins.text", "api/docarray.document.mixins.video", "api/docarray.document.pydantic_model", "api/docarray.document.strawberry_type", "api/docarray.helper", "api/docarray.math", "api/docarray.math.distance", "api/docarray.math.distance.numpy", "api/docarray.math.distance.paddle", "api/docarray.math.distance.tensorflow", "api/docarray.math.distance.torch", "api/docarray.math.evaluation", "api/docarray.math.helper", "api/docarray.math.ndarray", "api/docarray.proto", "api/docarray.proto.docarray_pb2", "api/docarray.proto.io", "api/docarray.proto.io.ndarray", "api/docarray.score", "api/docarray.score.data", "api/docarray.score.mixins", "api/docarray.score.mixins.property", "api/docarray.score.mixins.representer", "api/docarray.typing", "api/modules", "changelog/index", "datatypes/audio/index", "datatypes/image/index", "datatypes/index", "datatypes/mesh/index", "datatypes/multimodal/index", "datatypes/tabular/index", "datatypes/text/index", "datatypes/video/index", "fundamentals/dataclass/access", "fundamentals/dataclass/construct", "fundamentals/dataclass/example", "fundamentals/dataclass/index", "fundamentals/dataclass/new-type", "fundamentals/document/attribute", "fundamentals/document/construct", "fundamentals/document/embedding", "fundamentals/document/fluent-interface", "fundamentals/document/index", "fundamentals/document/nested", "fundamentals/document/serialization", "fundamentals/document/visualization", "fundamentals/documentarray/access-attributes", "fundamentals/documentarray/access-elements", "fundamentals/documentarray/construct", "fundamentals/documentarray/embedding", "fundamentals/documentarray/evaluation", "fundamentals/documentarray/find", "fundamentals/documentarray/index", "fundamentals/documentarray/matching", "fundamentals/documentarray/parallelization", "fundamentals/documentarray/post-external", "fundamentals/documentarray/serialization", "fundamentals/documentarray/visualization", "fundamentals/fastapi-support/index", "fundamentals/jina-support/index", "fundamentals/notebook-support/index", "get-started/what-is", "index", "proto/docs", "proto/index"], "filenames": ["advanced/document-store/annlite.md", "advanced/document-store/benchmark.md", "advanced/document-store/elasticsearch.md", "advanced/document-store/extend.md", "advanced/document-store/index.md", "advanced/document-store/qdrant.md", "advanced/document-store/sqlite.md", "advanced/document-store/subindex.md", "advanced/document-store/weaviate.md", "advanced/graphql-support/index.md", "advanced/torch-support/index.md", "api.rst", "api/docarray.rst", "api/docarray.array.rst", "api/docarray.array.annlite.rst", "api/docarray.array.base.rst", "api/docarray.array.chunk.rst", "api/docarray.array.document.rst", "api/docarray.array.elastic.rst", "api/docarray.array.match.rst", "api/docarray.array.memory.rst", "api/docarray.array.mixins.rst", "api/docarray.array.mixins.content.rst", "api/docarray.array.mixins.dataloader.rst", "api/docarray.array.mixins.dataloader.helper.rst", "api/docarray.array.mixins.delitem.rst", "api/docarray.array.mixins.embed.rst", "api/docarray.array.mixins.empty.rst", "api/docarray.array.mixins.evaluation.rst", "api/docarray.array.mixins.find.rst", "api/docarray.array.mixins.getattr.rst", "api/docarray.array.mixins.getitem.rst", "api/docarray.array.mixins.group.rst", "api/docarray.array.mixins.io.rst", "api/docarray.array.mixins.io.binary.rst", "api/docarray.array.mixins.io.common.rst", "api/docarray.array.mixins.io.csv.rst", "api/docarray.array.mixins.io.dataframe.rst", "api/docarray.array.mixins.io.from_gen.rst", "api/docarray.array.mixins.io.json.rst", "api/docarray.array.mixins.io.pbar.rst", "api/docarray.array.mixins.io.pushpull.rst", "api/docarray.array.mixins.match.rst", "api/docarray.array.mixins.parallel.rst", "api/docarray.array.mixins.plot.rst", "api/docarray.array.mixins.post.rst", "api/docarray.array.mixins.pydantic.rst", "api/docarray.array.mixins.reduce.rst", "api/docarray.array.mixins.sample.rst", "api/docarray.array.mixins.setitem.rst", "api/docarray.array.mixins.strawberry.rst", "api/docarray.array.mixins.text.rst", "api/docarray.array.mixins.traverse.rst", "api/docarray.array.qdrant.rst", "api/docarray.array.queryset.rst", "api/docarray.array.queryset.lookup.rst", "api/docarray.array.queryset.parser.rst", "api/docarray.array.sqlite.rst", "api/docarray.array.storage.rst", "api/docarray.array.storage.annlite.rst", "api/docarray.array.storage.annlite.backend.rst", "api/docarray.array.storage.annlite.find.rst", "api/docarray.array.storage.annlite.getsetdel.rst", "api/docarray.array.storage.annlite.helper.rst", "api/docarray.array.storage.annlite.seqlike.rst", "api/docarray.array.storage.base.rst", "api/docarray.array.storage.base.backend.rst", "api/docarray.array.storage.base.getsetdel.rst", "api/docarray.array.storage.base.helper.rst", "api/docarray.array.storage.base.seqlike.rst", "api/docarray.array.storage.elastic.rst", "api/docarray.array.storage.elastic.backend.rst", "api/docarray.array.storage.elastic.find.rst", "api/docarray.array.storage.elastic.getsetdel.rst", "api/docarray.array.storage.elastic.seqlike.rst", "api/docarray.array.storage.memory.rst", "api/docarray.array.storage.memory.backend.rst", "api/docarray.array.storage.memory.find.rst", "api/docarray.array.storage.memory.getsetdel.rst", "api/docarray.array.storage.memory.seqlike.rst", "api/docarray.array.storage.qdrant.rst", "api/docarray.array.storage.qdrant.backend.rst", "api/docarray.array.storage.qdrant.find.rst", "api/docarray.array.storage.qdrant.getsetdel.rst", "api/docarray.array.storage.qdrant.helper.rst", "api/docarray.array.storage.qdrant.seqlike.rst", "api/docarray.array.storage.registry.rst", "api/docarray.array.storage.sqlite.rst", "api/docarray.array.storage.sqlite.backend.rst", "api/docarray.array.storage.sqlite.getsetdel.rst", "api/docarray.array.storage.sqlite.helper.rst", "api/docarray.array.storage.sqlite.seqlike.rst", "api/docarray.array.storage.weaviate.rst", "api/docarray.array.storage.weaviate.backend.rst", "api/docarray.array.storage.weaviate.find.rst", "api/docarray.array.storage.weaviate.getsetdel.rst", "api/docarray.array.storage.weaviate.seqlike.rst", "api/docarray.array.weaviate.rst", "api/docarray.base.rst", "api/docarray.dataclasses.rst", "api/docarray.dataclasses.getter.rst", "api/docarray.dataclasses.setter.rst", "api/docarray.dataclasses.types.rst", "api/docarray.document.rst", "api/docarray.document.data.rst", "api/docarray.document.generators.rst", "api/docarray.document.mixins.rst", "api/docarray.document.mixins.attribute.rst", "api/docarray.document.mixins.audio.rst", "api/docarray.document.mixins.blob.rst", "api/docarray.document.mixins.content.rst", "api/docarray.document.mixins.convert.rst", "api/docarray.document.mixins.dump.rst", "api/docarray.document.mixins.featurehash.rst", "api/docarray.document.mixins.helper.rst", "api/docarray.document.mixins.image.rst", "api/docarray.document.mixins.mesh.rst", "api/docarray.document.mixins.multimodal.rst", "api/docarray.document.mixins.plot.rst", "api/docarray.document.mixins.porting.rst", "api/docarray.document.mixins.property.rst", "api/docarray.document.mixins.protobuf.rst", "api/docarray.document.mixins.pydantic.rst", "api/docarray.document.mixins.rich_embedding.rst", "api/docarray.document.mixins.strawberry.rst", "api/docarray.document.mixins.sugar.rst", "api/docarray.document.mixins.text.rst", "api/docarray.document.mixins.video.rst", "api/docarray.document.pydantic_model.rst", "api/docarray.document.strawberry_type.rst", "api/docarray.helper.rst", "api/docarray.math.rst", "api/docarray.math.distance.rst", "api/docarray.math.distance.numpy.rst", "api/docarray.math.distance.paddle.rst", "api/docarray.math.distance.tensorflow.rst", "api/docarray.math.distance.torch.rst", "api/docarray.math.evaluation.rst", "api/docarray.math.helper.rst", "api/docarray.math.ndarray.rst", "api/docarray.proto.rst", "api/docarray.proto.docarray_pb2.rst", "api/docarray.proto.io.rst", "api/docarray.proto.io.ndarray.rst", "api/docarray.score.rst", "api/docarray.score.data.rst", "api/docarray.score.mixins.rst", "api/docarray.score.mixins.property.rst", "api/docarray.score.mixins.representer.rst", "api/docarray.typing.rst", "api/modules.rst", "changelog/index.md", "datatypes/audio/index.md", "datatypes/image/index.md", "datatypes/index.md", "datatypes/mesh/index.md", "datatypes/multimodal/index.md", "datatypes/tabular/index.md", "datatypes/text/index.md", "datatypes/video/index.md", "fundamentals/dataclass/access.md", "fundamentals/dataclass/construct.md", "fundamentals/dataclass/example.md", "fundamentals/dataclass/index.md", "fundamentals/dataclass/new-type.md", "fundamentals/document/attribute.md", "fundamentals/document/construct.md", "fundamentals/document/embedding.md", "fundamentals/document/fluent-interface.md", "fundamentals/document/index.md", "fundamentals/document/nested.md", "fundamentals/document/serialization.md", "fundamentals/document/visualization.md", "fundamentals/documentarray/access-attributes.md", "fundamentals/documentarray/access-elements.md", "fundamentals/documentarray/construct.md", "fundamentals/documentarray/embedding.md", "fundamentals/documentarray/evaluation.md", "fundamentals/documentarray/find.md", "fundamentals/documentarray/index.md", "fundamentals/documentarray/matching.md", "fundamentals/documentarray/parallelization.md", "fundamentals/documentarray/post-external.md", "fundamentals/documentarray/serialization.md", "fundamentals/documentarray/visualization.md", "fundamentals/fastapi-support/index.md", "fundamentals/jina-support/index.md", "fundamentals/notebook-support/index.md", "get-started/what-is.md", "index.md", "proto/docs.md", "proto/index.md"], "titles": ["Annlite", "One Million Scale Benchmark", "Elasticsearch", "Add New Document Store", "Document Store", "Qdrant", "SQLite", "Subindices", "Weaviate", "GraphQL", "PyTorch/Deep Learning Frameworks", "<span class=\"fab fa-python\"></span> Python API", "docarray package", "docarray.array package", "docarray.array.annlite module", "docarray.array.base module", "docarray.array.chunk module", "docarray.array.document module", "docarray.array.elastic module", "docarray.array.match module", "docarray.array.memory module", "docarray.array.mixins package", "docarray.array.mixins.content module", "docarray.array.mixins.dataloader package", "docarray.array.mixins.dataloader.helper module", "docarray.array.mixins.delitem module", "docarray.array.mixins.embed module", "docarray.array.mixins.empty module", "docarray.array.mixins.evaluation module", "docarray.array.mixins.find module", "docarray.array.mixins.getattr module", "docarray.array.mixins.getitem module", "docarray.array.mixins.group module", "docarray.array.mixins.io package", "docarray.array.mixins.io.binary module", "docarray.array.mixins.io.common module", "docarray.array.mixins.io.csv module", "docarray.array.mixins.io.dataframe module", "docarray.array.mixins.io.from_gen module", "docarray.array.mixins.io.json module", "docarray.array.mixins.io.pbar module", "docarray.array.mixins.io.pushpull module", "docarray.array.mixins.match module", "docarray.array.mixins.parallel module", "docarray.array.mixins.plot module", "docarray.array.mixins.post module", "docarray.array.mixins.pydantic module", "docarray.array.mixins.reduce module", "docarray.array.mixins.sample module", "docarray.array.mixins.setitem module", "docarray.array.mixins.strawberry module", "docarray.array.mixins.text module", "docarray.array.mixins.traverse module", "docarray.array.qdrant module", "docarray.array.queryset package", "docarray.array.queryset.lookup module", "docarray.array.queryset.parser module", "docarray.array.sqlite module", "docarray.array.storage package", "docarray.array.storage.annlite package", "docarray.array.storage.annlite.backend module", "docarray.array.storage.annlite.find module", "docarray.array.storage.annlite.getsetdel module", "docarray.array.storage.annlite.helper module", "docarray.array.storage.annlite.seqlike module", "docarray.array.storage.base package", "docarray.array.storage.base.backend module", "docarray.array.storage.base.getsetdel module", "docarray.array.storage.base.helper module", "docarray.array.storage.base.seqlike module", "docarray.array.storage.elastic package", "docarray.array.storage.elastic.backend module", "docarray.array.storage.elastic.find module", "docarray.array.storage.elastic.getsetdel module", "docarray.array.storage.elastic.seqlike module", "docarray.array.storage.memory package", "docarray.array.storage.memory.backend module", "docarray.array.storage.memory.find module", "docarray.array.storage.memory.getsetdel module", "docarray.array.storage.memory.seqlike module", "docarray.array.storage.qdrant package", "docarray.array.storage.qdrant.backend module", "docarray.array.storage.qdrant.find module", "docarray.array.storage.qdrant.getsetdel module", "docarray.array.storage.qdrant.helper module", "docarray.array.storage.qdrant.seqlike module", "docarray.array.storage.registry module", "docarray.array.storage.sqlite package", "docarray.array.storage.sqlite.backend module", "docarray.array.storage.sqlite.getsetdel module", "docarray.array.storage.sqlite.helper module", "docarray.array.storage.sqlite.seqlike module", "docarray.array.storage.weaviate package", "docarray.array.storage.weaviate.backend module", "docarray.array.storage.weaviate.find module", "docarray.array.storage.weaviate.getsetdel module", "docarray.array.storage.weaviate.seqlike module", "docarray.array.weaviate module", "docarray.base module", "docarray.dataclasses package", "docarray.dataclasses.getter module", "docarray.dataclasses.setter module", "docarray.dataclasses.types module", "docarray.document package", "docarray.document.data module", "docarray.document.generators module", "docarray.document.mixins package", "docarray.document.mixins.attribute module", "docarray.document.mixins.audio module", "docarray.document.mixins.blob module", "docarray.document.mixins.content module", "docarray.document.mixins.convert module", "docarray.document.mixins.dump module", "docarray.document.mixins.featurehash module", "docarray.document.mixins.helper module", "docarray.document.mixins.image module", "docarray.document.mixins.mesh module", "docarray.document.mixins.multimodal module", "docarray.document.mixins.plot module", "docarray.document.mixins.porting module", "docarray.document.mixins.property module", "docarray.document.mixins.protobuf module", "docarray.document.mixins.pydantic module", "docarray.document.mixins.rich_embedding module", "docarray.document.mixins.strawberry module", "docarray.document.mixins.sugar module", "docarray.document.mixins.text module", "docarray.document.mixins.video module", "docarray.document.pydantic_model module", "docarray.document.strawberry_type module", "docarray.helper module", "docarray.math package", "docarray.math.distance package", "docarray.math.distance.numpy module", "docarray.math.distance.paddle module", "docarray.math.distance.tensorflow module", "docarray.math.distance.torch module", "docarray.math.evaluation module", "docarray.math.helper module", "docarray.math.ndarray module", "docarray.proto package", "docarray.proto.docarray_pb2 module", "docarray.proto.io package", "docarray.proto.io.ndarray module", "docarray.score package", "docarray.score.data module", "docarray.score.mixins package", "docarray.score.mixins.property module", "docarray.score.mixins.representer module", "docarray.typing package", "docarray", "Changelog", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-unmute\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.563 2.069A.75.75 0 018 2.75v10.5a.75.75 0 01-1.238.57L3.472 11H1.75A1.75 1.75 0 010 9.25v-2.5C0 5.784.784 5 1.75 5h1.723l3.289-2.82a.75.75 0 01.801-.111zM6.5 4.38L4.238 6.319a.75.75 0 01-.488.181h-2a.25.25 0 00-.25.25v2.5c0 .138.112.25.25.25h2a.75.75 0 01.488.18L6.5 11.62V4.38zm6.096-2.038a.75.75 0 011.06 0 8 8 0 010 11.314.75.75 0 01-1.06-1.06 6.5 6.5 0 000-9.193.75.75 0 010-1.06v-.001zm-1.06 2.121a.75.75 0 10-1.061 1.061 3.5 3.5 0 010 4.95.75.75 0 101.06 1.06 5 5 0 000-7.07l.001-.001z\"></path></svg> Audio", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-image\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M1.75 2.5a.25.25 0 00-.25.25v10.5c0 .138.112.25.25.25h.94a.76.76 0 01.03-.03l6.077-6.078a1.75 1.75 0 012.412-.06L14.5 10.31V2.75a.25.25 0 00-.25-.25H1.75zm12.5 11H4.81l5.048-5.047a.25.25 0 01.344-.009l4.298 3.889v.917a.25.25 0 01-.25.25zm1.75-.25V2.75A1.75 1.75 0 0014.25 1H1.75A1.75 1.75 0 000 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0016 13.25zM5.5 6a.5.5 0 11-1 0 .5.5 0 011 0zM7 6a2 2 0 11-4 0 2 2 0 014 0z\"></path></svg> Image", "Examples", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-package\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M8.878.392a1.75 1.75 0 00-1.756 0l-5.25 3.045A1.75 1.75 0 001 4.951v6.098c0 .624.332 1.2.872 1.514l5.25 3.045a1.75 1.75 0 001.756 0l5.25-3.045c.54-.313.872-.89.872-1.514V4.951c0-.624-.332-1.2-.872-1.514L8.878.392zM7.875 1.69a.25.25 0 01.25 0l4.63 2.685L8 7.133 3.245 4.375l4.63-2.685zM2.5 5.677v5.372c0 .09.047.171.125.216l4.625 2.683V8.432L2.5 5.677zm6.25 8.271l4.625-2.683a.25.25 0 00.125-.216V5.677L8.75 8.432v5.516z\"></path></svg> 3D Mesh", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-stack\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.122.392a1.75 1.75 0 011.756 0l5.003 2.902c.83.481.83 1.68 0 2.162L8.878 8.358a1.75 1.75 0 01-1.756 0L2.119 5.456a1.25 1.25 0 010-2.162L7.122.392zM8.125 1.69a.25.25 0 00-.25 0l-4.63 2.685 4.63 2.685a.25.25 0 00.25 0l4.63-2.685-4.63-2.685zM1.601 7.789a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0L1.874 8.814A.75.75 0 011.6 7.789zm0 3.5a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0l-5.248-3.044a.75.75 0 01-.273-1.025z\"></path></svg> Multi-modal", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-table\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v3.585a.746.746 0 010 .83v8.085A1.75 1.75 0 0114.25 16H6.309a.748.748 0 01-1.118 0H1.75A1.75 1.75 0 010 14.25V6.165a.746.746 0 010-.83V1.75zM1.5 6.5v7.75c0 .138.112.25.25.25H5v-8H1.5zM5 5H1.5V1.75a.25.25 0 01.25-.25H5V5zm1.5 1.5v8h7.75a.25.25 0 00.25-.25V6.5h-8zm8-1.5h-8V1.5h7.75a.25.25 0 01.25.25V5z\"></path></svg> Table", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-typography\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M6.21 8.5L4.574 3.594 2.857 8.5H6.21zm.5 1.5l.829 2.487a.75.75 0 001.423-.474L5.735 2.332a1.216 1.216 0 00-2.302-.018l-3.39 9.688a.75.75 0 001.415.496L2.332 10H6.71zm3.13-4.358C10.53 4.374 11.87 4 13 4c1.5 0 3 .939 3 2.601v5.649a.75.75 0 01-1.448.275C13.995 12.82 13.3 13 12.5 13c-.77 0-1.514-.231-2.078-.709-.577-.488-.922-1.199-.922-2.041 0-.694.265-1.411.887-1.944C11 7.78 11.88 7.5 13 7.5h1.5v-.899c0-.54-.5-1.101-1.5-1.101-.869 0-1.528.282-1.84.858a.75.75 0 11-1.32-.716zM14.5 9H13c-.881 0-1.375.22-1.637.444-.253.217-.363.5-.363.806 0 .408.155.697.39.896.249.21.63.354 1.11.354.732 0 1.26-.209 1.588-.449.35-.257.412-.495.412-.551V9z\"></path></svg> Text", "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-device-camera-video\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M16 3.75a.75.75 0 00-1.136-.643L11 5.425V4.75A1.75 1.75 0 009.25 3h-7.5A1.75 1.75 0 000 4.75v6.5C0 12.216.784 13 1.75 13h7.5A1.75 1.75 0 0011 11.25v-.675l3.864 2.318A.75.75 0 0016 12.25v-8.5zm-5 5.075l3.5 2.1v-5.85l-3.5 2.1v1.65zM9.5 6.75v-2a.25.25 0 00-.25-.25h-7.5a.25.25 0 00-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-4.5z\"></path></svg> Video", "Access Modality", "Construct", "Process Modality", "Dataclass", "Support New Modality", "Access Attributes", "Construct", "Embedding", "Fluent Interface", "Document", "Nested Structure", "Serialization", "Visualization", "Access Attributes", "Access Documents", "Construct", "Embed via Neural Network", "Evaluate Matches", "Query by Conditions", "DocumentArray", "Match Nearest Neighbours", "Parallelization", "Process via External Flow or Executor", "Serialization", "Visualization", "FastAPI/Pydantic", "Jina", "Jupyter Notebook/Colab", "What is DocArray?", "Welcome to DocArray!", "Protocol Documentation", "Protocol Documentation"], "terms": {"One": [0, 2, 3, 4, 5, 6, 8, 151, 153, 157, 158, 159, 161, 163, 165, 166, 169, 171, 173, 174, 175, 177, 178, 180, 181, 182, 183, 185, 186, 188], "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 29, 32, 34, 35, 36, 39, 41, 42, 43, 44, 45, 53, 57, 67, 70, 72, 97, 103, 105, 106, 115, 117, 121, 126, 127, 130, 132, 135, 136, 137, 138, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 34, 35, 36, 39, 40, 41, 42, 43, 44, 47, 51, 52, 53, 55, 57, 67, 70, 72, 97, 102, 103, 105, 106, 109, 111, 113, 115, 119, 126, 130, 137, 151, 152, 153, 156, 158, 159, 160, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191], "document": [0, 1, 2, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 32, 34, 36, 42, 43, 44, 45, 47, 48, 51, 52, 53, 55, 57, 59, 64, 69, 70, 72, 74, 75, 79, 80, 83, 85, 87, 91, 92, 96, 97, 98, 101, 102, 130, 137, 139, 142, 144, 150, 152, 153, 154, 155, 157, 159, 162, 163, 164, 165, 168, 170, 171, 172, 173, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189], "store": [0, 2, 5, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 32, 34, 36, 41, 42, 44, 53, 57, 92, 93, 97, 103, 106, 111, 115, 116, 118, 130, 151, 156, 157, 158, 159, 160, 163, 164, 165, 168, 174, 177, 179, 180, 183, 188, 189], "documentarrai": [0, 1, 4, 6, 7, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 57, 59, 64, 67, 69, 70, 72, 74, 75, 77, 79, 80, 85, 87, 91, 92, 96, 97, 103, 104, 106, 117, 125, 126, 139, 153, 154, 156, 157, 158, 162, 163, 166, 168, 169, 170, 171, 173, 174, 176, 177, 178, 180, 181, 182, 183, 184, 186, 188, 189], "It": [0, 2, 3, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 26, 28, 36, 44, 53, 55, 57, 97, 151, 153, 155, 158, 161, 162, 163, 166, 167, 171, 174, 177, 179, 181, 182, 183, 186, 188, 189], "i": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 32, 34, 35, 36, 39, 41, 42, 43, 44, 47, 48, 51, 52, 53, 55, 57, 59, 64, 66, 67, 69, 70, 72, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 102, 103, 105, 106, 108, 109, 111, 112, 115, 118, 126, 128, 130, 132, 137, 138, 139, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 190, 191], "when": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 34, 36, 42, 43, 44, 47, 52, 53, 57, 70, 72, 97, 102, 103, 105, 106, 115, 116, 138, 151, 153, 156, 158, 161, 164, 165, 166, 170, 171, 172, 173, 174, 176, 177, 179, 180, 182, 183, 185, 186, 188, 189, 190, 191], "one": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 43, 45, 47, 52, 53, 57, 63, 97, 103, 105, 106, 116, 153, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 171, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 186, 187, 188], "want": [0, 2, 3, 4, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 41, 44, 47, 53, 57, 67, 97, 103, 106, 115, 130, 151, 153, 156, 157, 158, 160, 163, 164, 165, 166, 167, 169, 171, 173, 174, 176, 177, 181, 182, 183, 185, 186], "have": [0, 1, 2, 3, 4, 5, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 52, 53, 55, 57, 97, 103, 106, 115, 137, 156, 158, 159, 160, 161, 162, 163, 166, 167, 170, 171, 172, 173, 174, 176, 177, 178, 180, 181, 185, 186, 188, 189, 190, 191], "faster": [0, 2, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 22, 34, 35, 53, 57, 97, 167, 171, 181, 189], "retriev": [0, 1, 2, 3, 4, 5, 7, 8, 14, 16, 17, 18, 19, 20, 21, 29, 41, 42, 53, 57, 70, 72, 97, 137, 138, 177], "embed": [0, 1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26, 36, 42, 44, 53, 57, 97, 103, 104, 106, 113, 120, 128, 154, 158, 160, 161, 162, 169, 171, 172, 176, 177, 178, 180, 183, 185, 188, 189, 190, 191], "e": [0, 1, 2, 3, 4, 5, 8, 9, 16, 105, 153, 163, 165, 166, 170, 171, 173, 174, 176, 177, 181, 182, 183, 188, 189], "match": [0, 1, 2, 4, 5, 7, 8, 9, 12, 13, 14, 16, 17, 18, 20, 21, 28, 29, 47, 52, 53, 55, 57, 70, 72, 97, 103, 104, 105, 106, 115, 118, 120, 125, 128, 154, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 183, 185, 188, 189, 190, 191], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 34, 36, 41, 42, 43, 44, 47, 52, 53, 55, 57, 60, 63, 70, 71, 72, 76, 88, 92, 93, 97, 98, 102, 103, 105, 106, 110, 111, 113, 115, 117, 118, 126, 128, 130, 144, 151, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "featur": [0, 1, 2, 3, 4, 5, 8, 9, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 103, 106, 113, 151, 152, 154, 155, 156, 159, 160, 161, 163, 167, 168, 171, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], "requir": [0, 2, 3, 4, 5, 8, 9, 14, 16, 17, 18, 19, 20, 21, 28, 37, 53, 55, 57, 62, 78, 89, 97, 103, 106, 113, 153, 155, 156, 159, 161, 169, 170, 171, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191], "you": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 37, 41, 42, 43, 44, 47, 53, 57, 67, 70, 72, 97, 103, 105, 106, 115, 126, 128, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], "instal": [0, 2, 5, 8, 9, 14, 37, 53, 97, 153, 155, 159, 171, 182, 183, 184, 185, 186, 187], "via": [0, 1, 2, 3, 4, 5, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 39, 41, 43, 52, 53, 57, 97, 153, 154, 155, 157, 159, 161, 163, 170, 171, 172, 173, 174, 177, 180, 183, 185, 186, 187, 188, 189], "pip": [0, 2, 5, 8, 9, 14, 53, 97, 153, 155, 159, 171, 182, 183, 184, 185, 186, 187, 189], "docarrai": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 186, 187], "instanti": [0, 2, 5, 8, 18, 53, 97, 154], "storag": [0, 1, 2, 3, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 29, 41, 53, 57, 97, 158, 188], "like": [0, 3, 4, 5, 7, 9, 14, 16, 17, 18, 19, 20, 21, 34, 38, 41, 44, 53, 57, 64, 69, 74, 79, 91, 96, 97, 103, 106, 108, 113, 115, 116, 121, 127, 133, 153, 155, 156, 158, 159, 160, 161, 165, 167, 169, 171, 173, 176, 178, 179, 180, 181, 182, 183, 185, 186, 188, 190, 191], "so": [0, 1, 3, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 41, 53, 55, 57, 97, 103, 106, 126, 153, 158, 162, 163, 164, 171, 173, 174, 177, 180, 181, 185, 186, 188], "from": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 24, 26, 29, 32, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 47, 48, 51, 53, 55, 57, 59, 64, 69, 70, 72, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 98, 102, 103, 105, 106, 109, 111, 115, 116, 118, 119, 122, 124, 125, 126, 128, 130, 137, 138, 139, 144, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 167, 168, 169, 172, 173, 174, 176, 177, 178, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191], "import": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 26, 37, 53, 57, 97, 102, 103, 139, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 188, 189], "da": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 36, 42, 51, 53, 57, 97, 151, 153, 156, 157, 158, 160, 162, 167, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 188], "n_dim": [0, 2, 4, 5, 7, 8, 13, 14, 17, 18, 53, 58, 59, 60, 70, 71, 80, 81, 83, 92, 93, 97, 103, 106, 113, 158], "10": [0, 1, 2, 3, 4, 5, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 118, 158, 159, 167, 173, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 32, 35, 41, 43, 47, 48, 51, 53, 55, 57, 59, 64, 67, 69, 70, 72, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 102, 103, 105, 106, 115, 118, 127, 130, 151, 153, 155, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 182, 183, 185, 186, 188, 189, 190, 191], "would": [0, 1, 2, 3, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 97, 158, 163, 165, 169, 173, 175, 177, 188], "same": [0, 1, 2, 3, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 32, 41, 42, 43, 44, 47, 53, 57, 70, 72, 97, 103, 106, 115, 139, 156, 158, 159, 161, 163, 166, 169, 170, 171, 173, 174, 177, 179, 183, 185, 186, 187, 189, 190, 191], "ordinari": [0, 2, 5, 8], "To": [0, 2, 3, 4, 5, 6, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 34, 42, 43, 53, 57, 97, 103, 106, 126, 151, 152, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 178, 180, 181, 183, 186, 189, 191], "access": [0, 1, 2, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97, 110, 154, 161, 163, 166, 168, 170, 178, 179, 186, 188], "formerli": [0, 2, 5, 6, 8], "persist": [0, 2, 3, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97], "specifi": [0, 1, 2, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20, 21, 24, 29, 32, 34, 42, 44, 53, 57, 70, 72, 97, 103, 105, 128, 130, 153, 161, 164, 166, 171, 174, 176, 177, 178, 180, 183, 186, 190, 191], "data_path": [0, 3, 4, 13, 14, 58, 59, 60, 63, 158], "data": [0, 1, 2, 3, 4, 8, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 23, 34, 35, 36, 39, 46, 47, 53, 57, 59, 64, 68, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 103, 105, 106, 108, 109, 111, 112, 115, 116, 118, 119, 122, 124, 126, 127, 128, 130, 138, 144, 154, 157, 158, 160, 161, 163, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "summari": [0, 2, 5, 6, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 118, 156, 157, 158, 160, 161, 164, 166, 167, 170, 172, 173, 174, 175, 177, 178, 182, 183], "note": [0, 1, 3, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 24, 32, 35, 42, 53, 57, 97, 103, 106, 113, 128, 130, 151, 153, 168, 170, 171, 174, 175, 176, 177, 180, 186, 187, 190, 191], "mandatori": [0, 5], "befor": [0, 1, 5, 9, 14, 15, 16, 17, 18, 19, 20, 21, 24, 32, 43, 53, 55, 57, 97, 128, 151, 153, 156, 158, 160, 161, 162, 163, 181, 185, 186], "backend": [0, 1, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 42, 43, 53, 57, 58, 59, 65, 67, 70, 72, 75, 80, 87, 92, 97, 171], "other": [0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 47, 53, 55, 57, 67, 70, 72, 97, 98, 103, 128, 144, 153, 154, 156, 161, 165, 167, 169, 171, 181, 183, 186, 188, 189, 190, 191], "function": [0, 1, 2, 3, 4, 5, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 34, 35, 36, 37, 38, 42, 43, 44, 45, 48, 49, 51, 52, 53, 55, 57, 59, 60, 62, 70, 71, 76, 77, 78, 88, 89, 92, 93, 97, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 122, 124, 126, 127, 128, 130, 151, 153, 156, 158, 161, 164, 165, 168, 169, 176, 177, 178, 180, 181, 186, 188, 190, 191], "behav": [0, 2, 5, 6, 8, 128, 173], "memori": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 34, 43, 53, 57, 58, 97, 156, 166, 175, 176, 179, 180, 183, 188, 189], "follow": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 29, 45, 53, 55, 57, 67, 70, 72, 97, 103, 106, 115, 118, 151, 153, 155, 156, 160, 161, 162, 163, 166, 167, 168, 169, 171, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 186, 187, 189], "set": [0, 2, 3, 5, 6, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 32, 34, 36, 41, 42, 43, 44, 47, 48, 53, 55, 57, 70, 72, 97, 102, 103, 105, 106, 107, 109, 111, 113, 115, 118, 121, 126, 128, 139, 151, 161, 163, 164, 165, 166, 167, 169, 171, 173, 174, 175, 176, 180, 181, 183, 188], "name": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 13, 14, 16, 17, 18, 19, 20, 21, 24, 26, 28, 32, 36, 41, 44, 53, 55, 57, 58, 59, 63, 92, 93, 97, 98, 103, 105, 106, 108, 127, 130, 144, 157, 160, 161, 163, 165, 173, 174, 176, 178, 182, 190, 191], "descript": [0, 2, 5, 6, 8, 12, 40, 102, 144, 145, 146, 147, 156, 160, 161, 163, 169, 170, 178, 183, 190, 191], "default": [0, 1, 2, 3, 4, 5, 6, 8, 14, 15, 16, 17, 18, 19, 20, 21, 24, 26, 29, 32, 35, 36, 39, 41, 42, 43, 48, 53, 57, 59, 64, 69, 70, 72, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 98, 102, 103, 105, 106, 111, 115, 128, 130, 144, 161, 164, 171, 176, 177, 180, 181, 182, 183, 186], "number": [0, 1, 4, 5, 6, 8, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 42, 43, 45, 48, 53, 57, 59, 64, 66, 69, 70, 72, 74, 75, 79, 80, 85, 87, 91, 92, 93, 96, 97, 98, 103, 105, 106, 111, 113, 116, 118, 130, 137, 138, 139, 144, 153, 160, 165, 177, 178, 188, 190, 191], "dimens": [0, 1, 2, 5, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 97, 103, 105, 106, 113, 138, 159, 190, 191], "alwai": [0, 5, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 44, 53, 57, 97, 139, 154, 157, 160, 161, 162, 168, 169, 171, 174, 176, 180, 190, 191], "folder": [0, 14, 16, 17, 18, 19, 20, 21, 41, 44, 53, 57, 97, 186], "where": [0, 2, 5, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 34, 41, 42, 44, 51, 53, 57, 97, 103, 106, 126, 139, 158, 159, 160, 164, 173, 174, 181, 183, 186, 188, 189], "locat": [0, 12, 103, 104, 106, 120, 128, 169, 171, 183, 190, 191], "A": [0, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 47, 48, 52, 53, 55, 56, 57, 77, 97, 103, 130, 153, 155, 158, 160, 161, 163, 165, 169, 174, 178, 180, 187, 190, 191], "random": [0, 5, 6, 7, 9, 10, 14, 16, 17, 18, 19, 20, 21, 44, 48, 53, 57, 97, 130, 166, 167, 173, 176, 177, 180, 184, 185, 188], "temp": [0, 6], "metric": [0, 1, 2, 4, 5, 8, 13, 14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 53, 57, 58, 59, 60, 70, 72, 97, 125, 132, 158, 169, 177, 180, 190, 191], "distanc": [0, 2, 5, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 58, 70, 71, 72, 80, 81, 82, 92, 93, 97, 131, 138, 180], "dure": [0, 1, 3, 5, 8, 14, 16, 17, 18, 19, 20, 21, 41, 52, 53, 57, 97, 103, 158, 166, 188], "cosin": [0, 2, 5, 8, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 59, 60, 70, 71, 72, 80, 81, 97, 125, 131, 132, 133, 135, 136, 156, 158, 173, 180], "dot": [0, 5, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 169], "euclidean": [0, 4, 5, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 131, 132, 133, 135, 136, 180], "ef_construct": [0, 1, 2, 5, 8, 13, 14, 18, 53, 58, 59, 60, 70, 71, 80, 81, 92, 93, 97], "size": [0, 1, 2, 5, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 27, 32, 35, 38, 39, 43, 44, 53, 57, 59, 63, 97, 103, 105, 106, 115, 118, 153, 155, 156, 159, 160, 178, 183], "dynam": [0, 1, 2, 8, 169, 188, 190, 191], "list": [0, 1, 2, 3, 8, 9, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 28, 29, 32, 34, 38, 39, 46, 47, 48, 50, 52, 53, 57, 59, 60, 63, 64, 69, 70, 71, 72, 74, 75, 79, 80, 81, 85, 87, 91, 92, 93, 96, 97, 103, 104, 105, 106, 120, 121, 128, 130, 137, 139, 154, 161, 165, 167, 169, 170, 171, 173, 174, 179, 180, 182, 185, 188, 189, 190, 191], "nearest": [0, 2, 3, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 70, 72, 97, 177, 178, 189], "neighbor": [0, 1, 2, 3, 8, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 70, 72, 97, 103, 106, 115], "construct": [0, 1, 2, 3, 5, 8, 103, 128, 160, 162, 163, 169, 174, 179], "none": [0, 1, 2, 3, 4, 5, 6, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 32, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 48, 52, 53, 57, 59, 60, 63, 64, 68, 69, 70, 71, 72, 74, 75, 79, 80, 81, 85, 87, 88, 90, 91, 92, 93, 96, 97, 98, 102, 103, 104, 105, 106, 111, 115, 118, 119, 121, 125, 126, 128, 130, 137, 138, 139, 142, 143, 144, 145, 156, 162, 165, 171, 175, 177, 183, 185], "valu": [0, 1, 2, 3, 4, 5, 7, 8, 9, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 32, 39, 42, 43, 44, 47, 51, 53, 55, 57, 59, 64, 66, 69, 70, 72, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 98, 101, 102, 103, 106, 117, 119, 126, 128, 130, 137, 138, 139, 143, 144, 145, 146, 147, 151, 156, 157, 158, 160, 161, 164, 165, 166, 169, 171, 173, 174, 175, 177, 178, 180, 181, 182, 183, 184, 185, 188], "packag": [0, 1, 150, 152, 161, 167, 188, 189], "ef_search": [0, 13, 14, 58, 59, 60], "max_connect": [0, 1, 8, 13, 14, 58, 59, 60, 92, 93, 97], "bi": [0, 1], "direct": [0, 1, 63], "link": [0, 1], "creat": [0, 1, 4, 7, 9, 14, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 32, 34, 53, 55, 57, 63, 66, 97, 102, 105, 128, 130, 155, 156, 158, 160, 161, 162, 165, 174, 177, 188], "everi": [0, 1, 4, 14, 16, 17, 18, 19, 20, 21, 24, 43, 44, 47, 53, 57, 97, 151, 166, 177, 181, 189], "new": [0, 1, 8, 14, 16, 17, 18, 19, 20, 21, 24, 43, 45, 53, 57, 63, 66, 97, 102, 103, 106, 115, 128, 130, 151, 163, 174, 175, 186, 188, 189], "element": [0, 1, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 34, 35, 36, 39, 42, 43, 48, 53, 55, 57, 59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 137, 139, 153, 169, 171, 173, 174, 179, 180, 181, 183, 188, 190, 191], "check": [0, 3, 4, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 55, 57, 97, 139, 156, 165, 171, 174, 177, 183, 185, 186, 189], "sourc": [0, 3, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 152, 155, 182, 186, 189], "code": [0, 1, 2, 4, 5, 8, 9, 11, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 103, 106, 110, 141, 162, 163, 165, 175, 181, 182, 183, 188, 189], "restrict": [0, 2, 5, 8, 55, 152, 160, 174, 183, 185], "user": [0, 1, 2, 3, 4, 5, 8, 9, 11, 14, 17, 20, 53, 57, 97, 103, 151, 153, 163, 167, 175, 178, 179, 180, 183, 185, 186, 189], "defin": [0, 2, 3, 5, 8, 14, 16, 17, 18, 19, 20, 21, 36, 52, 53, 57, 97, 102, 105, 153, 156, 158, 160, 163, 164, 165, 171, 175, 177, 178, 180, 185, 190, 191], "guidelin": [0, 2, 5, 8], "provid": [0, 1, 2, 3, 4, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 25, 28, 29, 30, 31, 38, 42, 43, 47, 48, 49, 53, 55, 57, 60, 67, 70, 71, 72, 73, 76, 77, 88, 93, 95, 97, 103, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 122, 124, 125, 126, 127, 153, 158, 161, 163, 168, 169, 171, 173, 174, 177, 181, 183, 188], "repositori": [0, 1, 162], "consid": [0, 1, 2, 5, 8, 14, 16, 17, 18, 19, 20, 21, 29, 42, 51, 53, 57, 70, 72, 97, 103, 105, 106, 113, 158, 161, 163, 174, 175, 178, 179, 183, 186], "certain": [0, 2, 4, 8, 14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 97, 153, 158, 170, 174, 185], "tag": [0, 1, 4, 5, 8, 12, 14, 16, 17, 18, 19, 20, 21, 24, 29, 32, 36, 53, 55, 57, 70, 72, 97, 103, 104, 106, 113, 120, 128, 156, 157, 158, 161, 163, 166, 169, 171, 173, 178, 183, 190, 191], "price": [0, 2, 4, 5, 8, 14, 17], "all": [0, 1, 2, 3, 4, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 29, 34, 36, 42, 44, 47, 51, 52, 53, 55, 57, 70, 72, 97, 98, 103, 106, 111, 115, 121, 126, 128, 137, 139, 144, 151, 153, 156, 158, 160, 161, 163, 164, 165, 167, 168, 173, 174, 175, 177, 178, 179, 181, 184, 185, 186, 187, 188, 189], "lower": [0, 2, 5, 8, 171], "equal": [0, 1, 2, 5, 8, 14, 16, 17, 18, 19, 20, 21, 22, 44, 53, 57, 97, 178], "some": [0, 1, 2, 3, 4, 8, 9, 10, 17, 20, 98, 103, 144, 151, 152, 153, 154, 156, 158, 161, 163, 167, 170, 171, 173, 175, 177, 178, 180, 181, 182, 185, 186, 187, 188], "max_pric": [0, 2, 4, 5, 8, 14], "index": [0, 1, 2, 3, 5, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 29, 31, 44, 49, 51, 53, 57, 58, 59, 64, 65, 66, 68, 69, 70, 72, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 103, 106, 126, 130, 158, 169, 188, 189, 190, 191], "numpi": [0, 2, 3, 4, 5, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 26, 34, 36, 53, 57, 97, 103, 105, 106, 111, 121, 131, 132, 135, 136, 137, 138, 139, 156, 158, 161, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 179, 180, 184, 188, 189], "np": [0, 2, 3, 4, 5, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 29, 38, 53, 57, 97, 105, 125, 132, 133, 135, 136, 139, 156, 158, 165, 167, 171, 172, 173, 176, 177, 180, 184, 185, 188], "3": [0, 1, 2, 4, 5, 8, 9, 10, 14, 17, 103, 106, 115, 139, 160, 161, 165, 166, 167, 171, 173, 174, 175, 177, 180, 181, 182, 184, 185, 186, 188, 189], "column": [0, 2, 4, 5, 8, 13, 14, 16, 17, 18, 19, 20, 21, 36, 40, 53, 57, 58, 59, 60, 70, 71, 80, 81, 92, 93, 97, 157, 160, 161, 163, 188], "float": [0, 2, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 28, 29, 38, 40, 42, 44, 53, 57, 59, 60, 70, 71, 72, 92, 93, 97, 103, 104, 105, 106, 111, 115, 120, 125, 128, 133, 135, 136, 137, 138, 139, 144, 145, 146, 147, 169, 190, 191], "extend": [0, 1, 2, 3, 4, 5, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 64, 65, 68, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 158, 175, 177, 181], "id": [0, 1, 2, 3, 4, 5, 8, 9, 12, 14, 16, 17, 18, 19, 20, 21, 24, 28, 29, 32, 42, 44, 53, 57, 63, 68, 70, 72, 92, 93, 97, 103, 104, 106, 115, 118, 120, 128, 130, 153, 156, 157, 158, 159, 160, 165, 166, 167, 169, 170, 171, 172, 173, 175, 177, 178, 180, 182, 183, 184, 185, 187, 189, 190, 191], "f": [0, 2, 4, 5, 8, 14, 17, 55, 156, 159, 180, 181, 186, 188], "r": [0, 1, 2, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 34, 38, 52, 53, 57, 97, 105, 137, 158, 160, 174, 178, 182, 186, 188], "rang": [0, 1, 2, 4, 5, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 42, 53, 57, 59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 103, 106, 115, 138, 175, 178, 182, 188], "print": [0, 2, 4, 5, 8, 10, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 118, 152, 153, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 171, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 187, 189], "nindex": [0, 2, 5, 8], "n": [0, 2, 5, 8, 132, 158, 188, 190, 191], "tags__pric": [0, 2, 5, 8], "t": [0, 1, 2, 4, 5, 8, 9, 14, 16, 17, 18, 19, 20, 21, 24, 26, 27, 34, 35, 36, 37, 38, 39, 41, 43, 46, 47, 50, 53, 57, 67, 97, 98, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 115, 116, 119, 121, 122, 124, 125, 126, 127, 144, 153, 158, 163, 166, 167, 171, 174, 177, 185, 186, 188], "Then": [0, 2, 5, 8, 156, 176, 179, 183, 185], "whose": [0, 2, 8, 103, 106, 115, 178], "than": [0, 1, 2, 3, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 57, 97, 103, 106, 126, 130, 158, 165, 167, 174, 178, 181, 183, 189, 190, 191], "appli": [0, 1, 2, 8, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 35, 36, 43, 47, 52, 53, 55, 57, 70, 72, 97, 151, 156, 158, 161, 163, 173, 181, 185, 186], "n_limit": [0, 2, 4, 5, 8, 14], "4": [0, 1, 2, 4, 5, 8, 9, 10, 14, 139, 160, 167, 174, 175, 177, 180, 181], "lte": [0, 2, 4, 5, 14, 178], "result": [0, 2, 3, 4, 5, 9, 14, 16, 17, 18, 19, 20, 21, 24, 28, 29, 42, 43, 47, 53, 57, 70, 72, 97, 103, 106, 113, 160, 171, 173, 177, 180, 181, 183, 184, 186, 188], "return": [0, 2, 3, 7, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 57, 59, 63, 64, 66, 69, 70, 72, 74, 75, 76, 79, 80, 82, 83, 85, 87, 90, 91, 92, 93, 96, 97, 98, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 146, 147, 156, 158, 164, 170, 173, 174, 181, 186, 188], "verifi": [0, 2, 8], "most": [0, 1, 2, 3, 5, 7, 8, 14, 16, 17, 18, 19, 20, 21, 42, 47, 53, 57, 97, 151, 155, 156, 163, 165, 166, 171, 174, 183, 189], "satisfi": [0, 2, 8, 103, 106, 109, 111, 126, 161], "condit": [0, 1, 2, 8, 55, 56], "0": [0, 1, 2, 4, 5, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 22, 27, 38, 42, 44, 45, 51, 53, 57, 66, 87, 88, 97, 103, 105, 106, 111, 115, 126, 132, 137, 138, 139, 160, 161, 162, 165, 167, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 188, 189], "1": [0, 1, 2, 4, 8, 10, 14, 16, 17, 18, 19, 20, 21, 42, 44, 45, 51, 52, 53, 57, 63, 66, 97, 102, 103, 105, 106, 111, 115, 118, 125, 126, 130, 137, 138, 139, 151, 160, 161, 162, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191], "2": [0, 1, 2, 4, 8, 10, 14, 16, 17, 18, 19, 20, 21, 46, 47, 51, 52, 53, 55, 57, 97, 103, 106, 108, 122, 132, 133, 135, 136, 139, 160, 161, 165, 166, 167, 171, 173, 174, 175, 177, 178, 180, 181, 182, 183, 185, 188, 189, 190, 191], "up": [0, 1, 2, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 97, 181, 186, 189], "9": [0, 1, 2, 5, 8, 17, 20, 139], "ha": [0, 1, 2, 3, 4, 5, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 35, 44, 53, 57, 97, 103, 106, 115, 118, 153, 156, 157, 158, 160, 161, 163, 167, 169, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185], "we": [0, 1, 2, 3, 4, 5, 8, 9, 10, 130, 153, 156, 158, 159, 161, 162, 163, 167, 171, 173, 174, 175, 177, 178, 179, 180, 181, 184, 185, 186, 187, 189], "ones": [0, 2, 4, 5, 8, 17, 154, 173, 174, 175, 183], "8": [0, 1, 2, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 35, 36, 39, 53, 57, 97, 103, 105, 106, 109, 111, 126, 139, 165, 177, 178, 190, 191], "must": [0, 2, 3, 5, 8, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 67, 70, 72, 97, 103, 106, 115, 171, 174, 181, 190, 191], "As": [0, 1, 2, 3, 4, 5, 8, 153, 158, 165, 171, 173, 175, 181, 186, 188], "an": [0, 1, 2, 3, 4, 5, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 32, 34, 43, 44, 52, 53, 55, 57, 70, 72, 92, 93, 97, 102, 103, 105, 106, 108, 113, 115, 118, 126, 128, 151, 153, 156, 158, 161, 162, 163, 164, 165, 168, 169, 171, 172, 173, 174, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "let": [0, 2, 3, 4, 5, 8, 9, 10, 132, 152, 153, 156, 158, 159, 161, 162, 163, 165, 167, 169, 173, 174, 176, 177, 178, 179, 180, 181, 185], "": [0, 1, 2, 3, 4, 5, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 26, 29, 41, 47, 53, 55, 57, 59, 64, 69, 70, 72, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 130, 152, 153, 156, 158, 159, 160, 162, 165, 167, 172, 173, 176, 177, 178, 180, 181, 183, 185, 186, 187, 189], "encod": [0, 2, 5, 8, 14, 16, 17, 18, 19, 20, 21, 35, 36, 39, 53, 57, 97, 103, 105, 106, 109, 111, 119, 126, 127, 128, 158, 162, 190, 191], "inform": [0, 2, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 97, 130, 153, 160, 161, 163, 165, 166, 167, 169, 171, 174, 175, 177], "propos": [0, 2, 5, 8], "implement": [0, 1, 2, 5, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 26, 28, 53, 57, 62, 64, 67, 69, 73, 74, 78, 79, 89, 91, 95, 96, 97, 151, 174, 179, 181, 183, 185], "7": [0, 1, 2, 4, 5, 8, 139, 162, 175, 180, 189, 190, 191], "np_queri": [0, 2, 4, 5, 8, 17], "nqueri": [0, 2, 5, 8], "limit": [0, 2, 3, 5, 8, 14, 16, 17, 18, 19, 20, 21, 29, 35, 42, 53, 55, 57, 70, 72, 97, 125, 158, 173, 180, 186, 188], "nembed": [0, 2, 5, 8], "neighbour": [0, 2, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 170, 177, 178, 189], "zip": [0, 2, 5, 8, 105], "tembed": [0, 2, 5, 8], "6": [0, 1, 2, 4, 5, 8, 137, 139, 158, 167, 174, 177, 180, 188], "5": [0, 1, 2, 4, 5, 8, 137, 139, 162, 167, 174, 175, 177, 178, 180, 181, 182, 183, 184, 186, 188], "randomli": [1, 14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 97, 130], "gener": [1, 3, 5, 8, 12, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 34, 38, 43, 44, 48, 53, 57, 67, 97, 103, 106, 115, 118, 126, 128, 130, 141, 151, 154, 157, 165, 175, 188, 190, 191], "uniform": 1, "distribut": [1, 55, 130], "support": [1, 3, 4, 8, 9, 14, 15, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 59, 64, 67, 69, 70, 72, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 103, 108, 111, 115, 116, 126, 127, 139, 158, 161, 168, 171, 174, 176, 181, 182, 183, 185, 188], "includ": [1, 3, 7, 11, 55, 103, 105, 106, 115, 126, 128, 151, 160, 171, 185, 186, 188, 189], "classic": [1, 189], "databas": [1, 3, 4, 6, 8, 57, 63, 130, 151, 158, 189], "vector": [1, 3, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 70, 72, 97, 156, 158, 167, 176, 189], "under": [1, 3, 4, 7, 55, 137, 151, 158, 161, 163, 173, 183, 188, 189], "api": [1, 3, 8, 9, 153, 158, 162, 163, 165, 166, 171, 174, 176, 179, 181, 183, 185, 186, 188, 189], "usag": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 102, 130, 151, 166, 183, 185], "version": [1, 2, 3, 5, 8, 67, 130, 151, 182, 183, 189], "12": [1, 151, 174, 175, 182, 185], "sqlite": [1, 3, 4, 12, 13, 17, 58], "weaviat": [1, 4, 12, 13, 17, 58, 189], "11": [1, 178, 181], "qdrant": [1, 4, 12, 13, 58, 189], "annlit": [1, 4, 5, 7, 12, 13, 17, 58, 158, 189], "anlit": 1, "elasticsearch": [1, 4, 17, 18], "focu": 1, "task": [1, 40, 156, 183, 186, 188], "add": [1, 8, 16, 17, 19, 128, 153, 156, 160, 170, 171, 174, 175, 183, 186], "read": [1, 2, 5, 8, 9, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 97, 103, 105, 106, 109, 111, 151, 157, 160, 161, 163, 165, 166, 168, 171, 175, 188, 189], "exist": [1, 3, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 41, 43, 44, 47, 53, 55, 57, 97, 162, 163, 170, 178, 182], "some_id": 1, "updat": [1, 2, 3, 4, 7, 8, 65, 67, 68, 128, 138, 174, 186, 188], "delet": [1, 3, 4, 6, 7, 8, 57, 87, 88, 173, 174], "del": [1, 173, 174], "find": [1, 2, 4, 7, 13, 14, 16, 17, 18, 19, 20, 21, 53, 55, 57, 58, 59, 70, 75, 80, 92, 97, 138, 154, 158, 171, 175, 176, 178, 181, 187], "boolean": [1, 2, 18, 70, 71, 178, 190, 191], "filter": [1, 9, 14, 16, 17, 18, 19, 20, 21, 24, 29, 32, 42, 52, 53, 57, 70, 72, 97, 105, 130, 171, 174, 183], "describ": [1, 132, 151, 165, 166, 171, 178, 180, 182, 183, 186], "queri": [1, 3, 4, 5, 7, 9, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 56, 57, 70, 72, 97, 103, 106, 118, 156, 158, 186, 189], "approxim": [1, 2, 3, 4, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 70, 72, 97, 177], "abov": [1, 3, 4, 8, 9, 55, 67, 156, 161, 163, 168, 180, 182, 183, 188], "ar": [1, 3, 4, 5, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 24, 28, 32, 34, 35, 42, 47, 52, 53, 55, 57, 67, 97, 98, 103, 105, 106, 113, 115, 126, 128, 137, 139, 144, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 165, 166, 171, 173, 174, 175, 176, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "often": [1, 3, 4, 8, 153, 157, 158, 167, 168, 169, 171, 181, 183, 185, 186, 188, 190, 191], "atom": 1, "oper": [1, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 67, 97, 190, 191], "high": [1, 3, 8, 10, 152, 162, 163, 188], "level": [1, 3, 7, 8, 10, 47, 130, 152, 154, 156, 163, 169, 173, 174, 181, 183, 188, 190, 191], "henc": [1, 153, 155, 157, 171, 181, 182, 188], "understand": [1, 4, 166, 185, 187, 188], "perform": [1, 2, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 70, 72, 97, 128, 130, 154, 169, 181, 188, 190, 191], "give": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 35, 44, 53, 57, 97, 102, 153, 166, 171, 173, 181, 185, 186], "good": [1, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 157, 188], "estim": [1, 183], "differ": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 42, 44, 52, 53, 57, 97, 103, 106, 115, 116, 156, 158, 164, 166, 171, 173, 177, 178, 181, 183, 188], "interest": [1, 7, 153, 174, 185], "singl": [1, 2, 3, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 43, 44, 52, 53, 57, 67, 97, 103, 106, 118, 153, 161, 171, 180, 182, 185, 186], "which": [1, 2, 3, 4, 6, 8, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 34, 35, 36, 39, 41, 43, 53, 55, 57, 67, 97, 103, 105, 106, 109, 112, 113, 115, 118, 127, 128, 130, 151, 153, 156, 158, 159, 161, 162, 163, 165, 166, 167, 169, 171, 174, 178, 181, 183, 184, 188, 190, 191], "mean": [1, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 103, 106, 111, 115, 137, 152, 159, 161, 164, 165, 167, 168, 173, 177, 180, 182, 185, 186], "evalu": [1, 12, 13, 14, 16, 17, 18, 19, 20, 21, 53, 54, 55, 56, 57, 97, 103, 104, 106, 120, 128, 131, 169, 170, 171, 179, 183, 188, 189, 190, 191], "time": [1, 2, 4, 5, 10, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 130, 156, 158, 159, 163, 171, 180, 183, 188], "repeatedli": 1, "report": 1, "averag": [1, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97, 137, 177, 188], "conduct": [1, 153, 177, 181, 183, 188], "end": [1, 8, 14, 15, 16, 17, 18, 19, 20, 21, 52, 53, 57, 59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 103, 106, 126, 158, 169, 190, 191], "call": [1, 2, 3, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 161, 164, 167, 171, 182, 185], "just": [1, 3, 4, 8, 9, 130, 153, 158, 161, 173, 174, 178, 187], "underli": 1, "therefor": [1, 3, 67, 188], "particular": [1, 4, 14, 16, 17, 18, 19, 20, 21, 36, 53, 55, 57, 97, 105, 183], "influenc": 1, "posit": [1, 3, 4, 8, 14, 16, 18, 19, 20, 53, 57, 59, 64, 68, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 137, 169, 190, 191], "neg": [1, 190, 191], "our": [1, 14, 17, 20, 53, 57, 97, 103, 156, 159, 160, 163, 167, 174, 176, 177, 181, 189], "interfac": [1, 2, 3, 151, 152, 171, 175, 178, 179, 188], "If": [1, 2, 3, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 32, 34, 42, 43, 44, 47, 48, 53, 55, 57, 70, 72, 97, 103, 105, 106, 115, 118, 137, 151, 156, 157, 158, 160, 161, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 180, 181, 183, 184, 185, 186, 187, 188, 189], "spot": 1, "bottleneck": 1, "thrill": 1, "know": [1, 8, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 105, 158, 163, 174, 179, 181, 183, 188, 189], "about": [1, 2, 4, 5, 8, 9, 151, 160, 161, 163, 164, 166, 171, 173, 174, 180, 186, 188, 189], "improv": [1, 4, 181, 186, 187, 188], "similar": [1, 2, 8, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 156, 158, 171, 173, 180, 181, 183, 188], "algorithm": [1, 8, 14, 16, 17, 18, 19, 20, 21, 23, 34, 53, 57, 97, 130, 153, 155, 163, 183], "In": [1, 3, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 34, 43, 53, 57, 70, 72, 97, 103, 106, 126, 155, 157, 158, 159, 160, 161, 162, 163, 165, 167, 169, 171, 173, 175, 179, 180, 183, 185, 186, 187, 188, 189, 190, 191], "onli": [1, 3, 5, 9, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 34, 35, 41, 42, 43, 44, 53, 55, 57, 70, 72, 97, 103, 105, 106, 115, 127, 151, 159, 160, 161, 163, 164, 165, 166, 171, 174, 175, 176, 177, 180, 181, 183, 185, 188], "paramet": [1, 2, 5, 7, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 32, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 57, 59, 63, 64, 69, 70, 72, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 98, 102, 103, 105, 106, 108, 109, 111, 112, 113, 115, 116, 118, 119, 121, 122, 124, 126, 127, 128, 130, 132, 133, 135, 136, 137, 138, 139, 144, 161, 171, 183, 190, 191], "ef": [1, 8, 13, 58, 92, 93, 97], "hnsw": [1, 2, 5, 8], "might": [1, 2, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 43, 47, 53, 57, 97, 156, 158], "fix": [1, 103, 106, 113, 155, 183], "big": [1, 9, 10, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 102, 158, 174, 179, 180, 185, 188, 189], "impact": 1, "even": [1, 3, 4, 8, 130, 160, 185, 187], "configur": [1, 2, 3, 5, 7, 8, 53, 97, 187], "cannot": [1, 128], "easili": [1, 2, 3, 4, 10, 157, 158, 162, 163, 165, 175, 177, 183, 185, 188], "compar": [1, 4, 9, 14, 16, 17, 18, 19, 20, 21, 28, 34, 39, 44, 53, 57, 97, 102, 155, 156, 161, 181], "research": 1, "showcas": [1, 4, 162], "what": [1, 2, 9, 153, 158, 159, 165, 181, 185, 186], "expect": [1, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 43, 53, 57, 67, 97, 151, 171, 173], "get": [1, 2, 3, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 22, 34, 40, 45, 51, 53, 57, 97, 98, 102, 103, 106, 107, 110, 126, 130, 139, 144, 153, 158, 165, 166, 169, 170, 171, 173, 174, 176, 177, 178, 183, 185, 186, 187, 189], "without": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 26, 42, 48, 53, 55, 57, 97, 139, 158, 161, 162, 163, 173, 174, 183, 186], "tune": [1, 2], "hyper": 1, "practic": [1, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 163, 165, 174, 181, 183], "strongli": [1, 185], "recommend": [1, 4, 9, 14, 15, 16, 17, 18, 19, 20, 53, 57, 59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 103, 106, 115, 151, 163, 166, 171, 183, 185, 188, 189], "them": [1, 3, 7, 10, 14, 16, 17, 18, 19, 20, 21, 23, 28, 42, 47, 53, 57, 97, 151, 153, 154, 157, 158, 159, 160, 161, 162, 163, 167, 169, 171, 173, 174, 180, 185, 186, 187, 188], "achiev": [1, 185], "qualiti": [1, 186], "tabl": [1, 3, 4, 6, 40, 63, 154, 161, 174, 183, 187], "summar": [1, 160, 174, 183, 186], "smaller": [1, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 34, 35, 42, 43, 53, 57, 97, 171, 174, 185, 189], "better": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 153, 158, 172, 174, 181, 183], "except": [1, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 43, 53, 55, 57, 97, 180], "recal": [1, 137, 175], "best": [1, 4, 7, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 103, 106, 110, 138, 157, 171, 179, 183], "each": [1, 3, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 32, 42, 43, 44, 45, 52, 53, 57, 70, 72, 97, 103, 105, 106, 113, 115, 116, 132, 133, 135, 136, 139, 153, 154, 157, 158, 159, 160, 161, 163, 164, 165, 167, 169, 171, 174, 175, 177, 180, 181, 183, 186, 190, 191], "highlight": [1, 40, 188], "bold": 1, "1m": 1, "m": [1, 2, 5, 13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 58, 70, 71, 80, 81, 97, 158, 161, 173, 174, 177, 180], "01": [1, 162], "39": 1, "43": 1, "00": [1, 186], "366": 1, "35": [1, 180], "62": 1, "31": 1, "23": [1, 185], "59": 1, "72": 1, "57": 1, "30": [1, 103, 106, 127, 178], "42": 1, "19": 1, "286": 1, "50": [1, 174, 178], "14": [1, 178], "605": 1, "51": 1, "612": 1, "33": 1, "27": 1, "94": 1, "13": [1, 8], "38": 1, "242": 1, "02": [1, 162], "307": 1, "40": 1, "85": [1, 178], "74": 1, "656": 1, "16": [1, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 173, 181], "446": 1, "77": 1, "24": [1, 186], "114": 1, "36": 1, "20": [1, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 70, 72, 97, 125, 177], "09": 1, "227": 1, "608": 1, "44": 1, "22": [1, 178], "26": 1, "208": 1, "715": 1, "15": [1, 9, 174, 178], "58": 1, "650": 1, "83": 1, "convert": [1, 9, 14, 16, 17, 18, 19, 20, 21, 34, 39, 46, 50, 53, 57, 59, 60, 65, 66, 70, 71, 92, 93, 97, 103, 106, 108, 109, 110, 113, 115, 116, 119, 121, 122, 124, 126, 127, 153, 154, 155, 157, 161, 162, 166, 183, 188], "per": [1, 5, 8, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97, 103, 106, 127, 128, 137, 138, 160, 161, 180], "second": [1, 14, 16, 17, 18, 19, 20, 21, 47, 53, 55, 57, 97, 103, 106, 127, 130, 138, 139, 156, 163, 173, 181, 185, 186, 189], "qp": 1, "dp": 1, "higher": [1, 8], "610": 1, "305": 1, "345": 1, "71": 1, "428": 1, "570": 1, "190": [1, 177], "70": 1, "3125": 1, "816": 1, "381": 1, "032": 1, "04": 1, "380": 1, "000": [1, 188], "152": 1, "216": 1, "033": 1, "34": 1, "604": 1, "664": [1, 171, 188], "241": 1, "002": 1, "90": [1, 177], "001": 1, "55": 1, "76": 1, "409": 1, "618": [1, 153, 156], "122": 1, "101": 1, "211": 1, "192": [1, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 97, 182, 186], "224": [1, 103, 106, 115, 153, 156], "125": 1, "824": 1, "769": 1, "759": 1, "106": 1, "49": 1, "448": 1, "615": 1, "48": [1, 177], "111": 1, "620": 1, "435": 1, "200": [1, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 185], "398": 1, "481": 1, "64": [1, 2, 5, 10, 18, 53, 70, 71, 80, 81, 103, 106, 115, 153, 168, 188], "now": [1, 3, 4, 8, 9, 10, 151, 153, 158, 162, 164, 173, 174, 175, 176, 177, 181, 183, 185, 186, 188], "elabor": 1, "first": [1, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 41, 44, 47, 53, 55, 57, 59, 64, 66, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 103, 106, 109, 130, 137, 138, 139, 153, 156, 157, 158, 159, 160, 161, 163, 169, 171, 173, 174, 176, 177, 178, 181, 186, 188, 189], "128": [1, 2, 5, 7, 176], "choos": [1, 4, 128, 180, 183], "two": [1, 4, 8, 55, 103, 106, 115, 126, 139, 156, 158, 159, 161, 163, 170, 173, 177, 178, 181, 187, 188], "reason": [1, 4, 8, 163, 171, 183, 185, 188], "common": [1, 2, 4, 9, 10, 21, 33, 156, 157, 160, 161, 165, 166, 169, 171, 173, 174, 175, 177, 178, 182, 183, 184, 187, 188, 189], "sme": 1, "wise": [1, 181], "break": [1, 151, 158, 173], "point": [1, 4, 5, 103, 106, 115, 116, 154, 161, 165, 168, 177, 184, 186], "product": [1, 9, 183, 186, 187, 188], "system": [1, 14, 16, 17, 18, 19, 20, 21, 23, 24, 36, 42, 43, 53, 57, 97, 105, 186, 188, 190, 191], "structur": [1, 3, 7, 8, 14, 16, 17, 18, 19, 20, 21, 28, 35, 44, 53, 57, 97, 103, 106, 118, 155, 156, 160, 161, 163, 164, 166, 169, 172, 177, 179, 187, 188, 189, 190, 191], "94ee6627ee7f582e5e28124e78c3d2f9": 1, "49841760378680844": 1, "703959752118305": 1, "6920759535687985": 1, "10248648858410625": 1, "k": [1, 14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 97, 137, 138, 177, 180, 189], "indic": [1, 2, 4, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 115, 118, 138, 160, 166, 190, 191], "do": [1, 2, 3, 4, 8, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 41, 43, 47, 53, 55, 57, 67, 97, 103, 106, 115, 153, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 171, 173, 174, 176, 177, 180, 181, 183, 184, 185, 186, 189], "exhaust": [1, 8, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 70, 72, 97], "instead": [1, 4, 8, 57, 105, 130, 160, 161, 163, 164, 165, 167, 171, 173, 181, 188, 190, 191], "thei": [1, 3, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 41, 47, 53, 57, 67, 97, 102, 151, 156, 159, 163, 165, 166, 170, 171, 173, 174, 177, 183, 185, 186], "maximum": [1, 8, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 70, 72, 97, 103, 105, 106, 126, 137, 160, 171, 183], "slowest": 1, "were": 1, "ghz": 1, "amd": 1, "ryzen": 1, "threadripp": 1, "3960x": 1, "core": [1, 8, 10, 181, 185, 188], "processor": 1, "python": [1, 3, 14, 16, 17, 18, 19, 20, 21, 34, 39, 53, 57, 97, 103, 105, 106, 119, 152, 161, 163, 165, 167, 169, 171, 173, 174, 175, 178, 179, 181, 183, 188, 189, 190, 191], "besid": [1, 157, 178, 188], "client": [1, 2, 3, 5, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 58, 70, 72, 80, 82, 83, 85, 97, 162, 185, 189], "server": [1, 2, 5, 8, 9, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 92, 93, 97, 185, 189], "pattern": [1, 4, 10, 38, 105, 156, 165, 175, 183, 185], "offici": [1, 2, 9], "docker": [1, 2, 5, 8, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 97, 182, 186, 191], "imag": [1, 2, 5, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 102, 103, 106, 118, 130, 154, 156, 159, 160, 161, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 181, 186, 188, 189, 190, 191], "node": [1, 2, 5, 55], "gb": 1, "ram": 1, "alloc": 1, "That": [1, 153, 161, 163, 165, 166, 168, 174, 179], "replica": [1, 186], "shard": 1, "did": 1, "opt": 1, "cluster": 1, "becaus": [1, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 151, 153, 162, 177, 181, 185, 186], "mainli": [1, 55, 67, 151, 185], "aim": [1, 3, 188], "assess": 1, "capabl": [1, 4], "instanc": [1, 3, 8, 66, 102, 128], "overhead": [1, 183], "come": [1, 3, 9, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 158, 160, 171, 174, 188, 190, 191], "side": [1, 2, 4, 14, 16, 17, 18, 19, 20, 21, 28, 29, 53, 57, 70, 72, 97, 103, 106, 126, 169, 177, 185, 188], "unless": [1, 3, 161, 183, 186], "specif": [1, 2, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 29, 36, 53, 57, 70, 72, 97, 105, 151, 156, 160, 161, 163, 164, 171], "more": [1, 2, 3, 4, 5, 8, 9, 14, 16, 17, 18, 19, 20, 21, 34, 41, 47, 53, 57, 67, 97, 105, 151, 152, 156, 157, 158, 160, 161, 165, 166, 167, 171, 173, 174, 176, 179, 181, 183, 184, 185, 186, 188, 189, 190, 191], "effici": [1, 4, 7, 8, 67, 103, 106, 109, 111, 126, 174, 179, 188, 189, 190, 191], "own": [1, 7, 103, 106, 115, 163, 181, 188], "By": [1, 2, 3, 8, 14, 16, 17, 18, 19, 20, 21, 29, 35, 36, 39, 53, 57, 70, 72, 97, 105, 152, 163, 171, 176, 177, 180, 181], "vendor": [1, 3], "For": [1, 2, 3, 4, 7, 8, 11, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 103, 153, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 170, 171, 174, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 189], "ann": [1, 3, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 70, 72, 97], "100": [1, 2, 5, 103, 106, 118, 174, 177, 178, 186], "control": [1, 8, 9, 151, 171, 175], "accuraci": [1, 2, 8], "bigger": 1, "lead": [1, 8, 166], "longer": [1, 4, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 103, 106, 126, 158], "accur": [1, 5, 8, 156], "slower": [1, 8, 14, 16, 17, 18, 19, 20, 21, 39, 53, 57, 97], "max": [1, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 138, 183, 188], "connect": [1, 4, 6, 8, 13, 53, 55, 57, 58, 87, 88, 92, 93, 97, 103, 106, 126, 182], "work": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 34, 43, 53, 57, 97, 105, 130, 153, 154, 156, 161, 163, 165, 169, 171, 173, 174, 176, 177, 179, 180, 181, 183, 185, 186, 187, 188, 189], "dataset": [1, 103, 105, 106, 115, 153, 156], "intrins": 1, "dimension": [1, 2, 103, 106, 113, 115, 132, 167, 188], "while": [1, 8, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 153, 161, 166, 177, 188, 189], "low": [1, 8, 151, 162], "final": [1, 3, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 47, 53, 55, 57, 97, 152, 153, 156, 163, 178, 179, 185, 186], "full": [1, 3, 4, 9, 11, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 151, 153, 155, 159, 161, 165, 171, 183, 184, 185, 188, 189], "script": 1, "avail": [1, 4, 7, 8, 67, 130, 151, 181, 186], "here": [1, 2, 3, 4, 5, 7, 8, 9, 130, 151, 152, 154, 156, 158, 159, 161, 163, 165, 171, 173, 174, 175, 176, 178, 181, 182, 183, 185, 186, 188], "fair": 1, "across": [1, 171, 183], "favour": 1, "benefit": [1, 4, 163], "wa": [1, 4, 8, 128, 156, 158, 165, 174, 183, 188], "imposs": 1, "its": [1, 3, 4, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 103, 106, 110, 115, 118, 126, 151, 156, 157, 166, 171, 175, 181, 183, 184, 185, 187, 188], "definit": [1, 128, 153, 185], "vari": 1, "base": [1, 2, 3, 5, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 138, 144, 145, 146, 147, 148, 150, 151, 153, 156, 158, 159, 163, 165, 174, 177, 178, 180, 185, 189], "principl": [1, 165, 171], "cover": [1, 156, 188], "offer": [1, 57, 161, 174], "try": [1, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 105, 128, 157, 171], "crud": 1, "measur": [1, 137], "Not": [1, 178, 183], "speed": [1, 2, 8, 14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 97, 181, 188], "also": [1, 2, 3, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 44, 47, 53, 57, 97, 103, 151, 153, 158, 159, 161, 162, 163, 164, 165, 166, 169, 171, 173, 174, 175, 178, 179, 180, 181, 182, 183, 185, 186, 188], "sinc": [1, 8, 103, 106, 115, 128, 130, 156, 188], "make": [1, 2, 3, 4, 7, 8, 14, 16, 17, 18, 19, 20, 21, 41, 42, 44, 53, 57, 67, 97, 103, 106, 115, 128, 159, 161, 165, 166, 171, 175, 177, 179, 181, 185, 186, 189], "sure": [1, 2, 3, 8, 14, 16, 17, 18, 19, 20, 21, 42, 44, 53, 57, 67, 97, 161, 181, 189], "allow": [1, 3, 4, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20, 21, 41, 49, 53, 57, 97, 107, 110, 128, 151, 156, 158, 161, 163, 165, 168, 171, 174, 177, 179, 183, 186, 188, 189], "suit": [1, 155], "case": [1, 3, 8, 14, 16, 17, 18, 19, 20, 21, 29, 34, 53, 57, 67, 70, 72, 97, 130, 156, 160, 161, 165, 171, 180, 183, 186, 189], "built": [1, 9, 14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 97, 161, 164, 166, 181, 189], "top": [1, 3, 7, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 118, 137, 138, 156, 169, 173, 174, 177, 180, 190, 191], "furthermor": [1, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 70, 72, 97], "made": [1, 151, 155, 161, 171, 188], "run": [1, 2, 4, 5, 8, 9, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 158, 180, 181, 186, 187, 191], "contain": [1, 2, 3, 4, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 27, 29, 32, 36, 42, 47, 52, 53, 57, 70, 72, 97, 103, 105, 106, 115, 118, 130, 153, 156, 157, 158, 159, 161, 163, 165, 167, 171, 173, 174, 177, 179, 182, 184, 188, 190, 191], "local": [1, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 165, 169, 182, 183, 188, 189, 190, 191], "network": [1, 2, 10, 17, 162, 171, 183, 186, 188, 189], "resourc": [1, 165, 181, 186], "those": [1, 2, 3, 4, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 67, 97, 130, 158, 163, 169, 171, 179], "much": [1, 14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 97, 153, 158, 166, 167, 171, 174, 175, 185, 187], "possibl": [1, 166, 172], "grpc": [1, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 97, 162, 182, 186], "http": [1, 2, 5, 8, 9, 14, 16, 17, 18, 19, 20, 21, 44, 45, 53, 55, 57, 70, 71, 92, 93, 97, 103, 105, 137, 158, 160, 161, 165, 166, 169, 181, 182, 186, 190, 191], "batch": [1, 2, 3, 5, 8, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 32, 42, 43, 53, 57, 67, 97, 181], "re": [1, 8, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 97, 151, 154, 158, 169, 174], "okai": [1, 174, 181, 186], "long": [1, 8, 18, 70, 71, 154, 181, 185, 188, 190, 191], "jina": [1, 3, 14, 16, 17, 18, 19, 20, 21, 41, 45, 53, 57, 97, 103, 105, 106, 126, 130, 156, 160, 161, 162, 163, 166, 178, 181, 182, 183, 189, 190, 191], "open": [1, 3, 9, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 105, 106, 108, 127, 152, 155, 162, 189], "constantli": 1, "accordingli": [1, 103, 106, 111, 115, 151], "believ": 1, "miss": [1, 102, 188, 189], "optim": [1, 4, 8, 176, 187, 188, 189], "g": [1, 2, 3, 4, 8, 9, 105, 163, 165, 170, 173, 174, 177, 182, 183, 188], "recent": 1, "upstream": [1, 183, 186], "avoid": [1, 3, 4, 10, 133, 135, 136, 138, 151, 156, 183], "unnecessari": [1, 183], "step": [1, 4, 10, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 67, 97, 153, 171, 183, 184, 185, 186, 187], "feel": [1, 4, 158, 161], "free": [1, 55, 152, 155], "rais": [1, 14, 15, 16, 17, 18, 19, 20, 21, 29, 53, 55, 57, 59, 64, 66, 69, 70, 72, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 128, 166], "pr": [1, 137], "issu": [1, 130, 156, 181], "your": [1, 3, 4, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 36, 41, 43, 53, 57, 97, 103, 105, 106, 115, 153, 154, 157, 158, 160, 161, 163, 165, 166, 171, 176, 177, 179, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191], "contribut": [1, 3], "yet": [1, 156, 158, 188], "variou": [1, 55], "milvu": 1, "current": [1, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 97, 103, 106, 115, 139], "doe": [1, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 103, 105, 106, 115, 166, 171, 175, 176, 178, 185, 186], "integr": [1, 10, 151, 162, 171, 185, 188, 189], "pinecon": 1, "soon": [1, 188], "ll": [1, 158], "onc": [1, 7, 14, 16, 17, 18, 19, 20, 21, 47, 52, 53, 57, 97, 158, 167, 171, 174, 180], "faiss": 1, "annoi": [1, 185], "scann": 1, "librari": [1, 55, 105, 130, 154, 171, 188, 189], "actual": [1, 3, 26, 55, 67, 156, 165, 190, 191], "itself": [1, 4, 8, 14, 16, 17, 18, 19, 20, 21, 26, 34, 37, 45, 53, 57, 97, 103, 106, 108, 109, 110, 111, 112, 115, 116, 118, 119, 126, 127, 151, 173, 175, 177, 180, 183, 185], "intern": [1, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 97, 103, 106, 109], "hope": [1, 181], "help": [1, 8, 25, 51, 105, 153, 163, 165, 166, 171, 185, 189], "select": [1, 9, 161, 162, 173, 174, 178], "depend": [1, 4, 8, 14, 16, 17, 18, 19, 20, 21, 29, 42, 47, 53, 57, 70, 72, 97, 153, 159, 171, 176, 180, 181, 182, 183, 184, 185, 187, 189], "need": [1, 2, 3, 5, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 151, 153, 157, 158, 161, 162, 163, 164, 165, 171, 174, 176, 178, 179, 181, 183, 185, 186, 187, 189], "mai": [1, 4, 9, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 41, 43, 53, 57, 97, 103, 105, 106, 109, 111, 126, 130, 153, 156, 158, 161, 164, 169, 171, 173, 174, 175, 177, 183, 186, 187, 188, 190, 191], "prefer": [1, 171], "fewer": [1, 8], "enjoi": [1, 3, 8, 163], "latenc": [1, 162, 183], "sai": [1, 10, 158, 164, 165, 171, 177, 180, 181, 183, 185, 186, 189], "less": [1, 8, 130, 151, 171, 178, 183], "fit": [1, 3, 4, 6, 10, 55, 161, 171, 176, 179, 180, 188], "care": [1, 157, 161], "figur": [1, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 44, 53, 57, 97, 162, 183, 188], "show": [1, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 34, 36, 41, 43, 44, 45, 53, 57, 97, 103, 106, 118, 153, 162, 166, 174, 175, 183, 186], "variat": 1, "w": [1, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 97, 103, 106, 115, 158, 178], "accord": [1, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 57, 97, 103, 106, 110, 132, 174, 180], "red": [1, 102, 174], "dash": 1, "line": [1, 38, 105, 152, 153, 158, 161, 186], "repres": [1, 14, 16, 17, 18, 19, 20, 21, 36, 46, 48, 50, 52, 53, 55, 57, 97, 103, 105, 106, 110, 117, 122, 124, 130, 138, 139, 151, 154, 156, 157, 158, 159, 161, 163, 165, 169, 173, 174, 188, 189, 190, 191], "threshold": [1, 8], "300": 1, "omit": 1, "left": [1, 14, 16, 17, 18, 19, 20, 21, 28, 40, 42, 47, 53, 57, 63, 97, 103, 106, 118, 153, 163, 167, 169, 177, 180, 186, 190, 191], "plot": [1, 13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 97, 103, 106, 174, 186, 187], "right": [1, 14, 16, 17, 18, 19, 20, 21, 28, 44, 53, 55, 57, 97, 103, 106, 126, 159, 163, 167, 177, 180, 181], "too": [1, 9, 153, 158, 174, 175, 179, 180, 185], "slow": [1, 3, 4, 10, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 67, 97], "fast": [1, 8, 9, 14, 17, 53, 97, 188, 189], "choic": 1, "append": [1, 3, 4, 13, 14, 15, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 59, 64, 65, 68, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 159, 170, 172, 175, 177], "insert": [1, 3, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 64, 65, 68, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97], "matter": 1, "moreov": [1, 4, 183], "monolith": [1, 186, 188], "fastest": [1, 183], "trade": 1, "off": [1, 4, 6, 8, 57, 87, 88, 103, 106, 126], "between": [1, 3, 4, 8, 103, 105, 106, 111, 115, 132, 133, 135, 136, 157, 161, 168, 171, 178, 183, 188, 190, 191], "term": [1, 158], "observ": [1, 132, 157, 159], "highest": [1, 8], "compos": [2, 5, 8, 55], "yml": [2, 5, 8], "co": [2, 105], "environ": [2, 8, 130, 186, 187, 189], "xpack": 2, "enabl": [2, 4, 25, 31, 60, 71, 76, 88, 93, 151, 185, 187, 189], "fals": [2, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 29, 32, 34, 38, 41, 42, 43, 44, 45, 53, 55, 57, 70, 71, 72, 97, 98, 102, 103, 105, 106, 109, 111, 113, 115, 116, 118, 125, 126, 127, 128, 130, 138, 144, 157, 160, 161, 166, 173, 174, 175, 177, 178, 182, 183, 184], "discoveri": 2, "type": [2, 4, 7, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 57, 59, 60, 63, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 79, 80, 82, 83, 85, 87, 90, 91, 92, 93, 96, 97, 98, 99, 101, 103, 105, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 130, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 146, 147, 150, 154, 157, 161, 162, 163, 165, 169, 171, 173, 174, 175, 177, 178, 179, 182, 183, 184, 185, 188, 189], "port": [2, 5, 8, 13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 80, 81, 92, 93, 97, 103, 106, 130, 182, 186], "9200": [2, 18, 70, 71], "assum": [2, 5, 8, 14, 16, 17, 18, 19, 20, 21, 22, 34, 53, 57, 97, 103, 106, 111, 115, 156, 171, 180, 181], "address": [2, 5, 8, 53, 97, 130, 166, 182, 186], "localhost": [2, 5, 8, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 70, 71, 80, 81, 92, 93, 97, 182], "creation": [2, 183], "layer": [2, 8, 176], "disabl": [2, 40], "plain": [2, 103, 166, 171, 180, 183], "pass": [2, 4, 6, 7, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 36, 37, 43, 53, 55, 57, 97, 103, 105, 106, 119, 128, 151, 164, 171, 183, 188], "host": [2, 5, 8, 13, 14, 16, 17, 18, 19, 20, 21, 44, 45, 53, 57, 58, 70, 71, 80, 81, 92, 93, 97, 182, 186], "api_id": 2, "ca_cert": 2, "insid": [2, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97, 103, 106, 115, 166, 171, 174, 175, 180, 181, 182, 185], "es_config": [2, 13, 18, 58, 70, 71], "constructor": [2, 3, 4, 16, 164, 166, 170, 171], "exampl": [2, 6, 7, 14, 16, 17, 18, 19, 20, 21, 34, 52, 53, 57, 67, 97, 102, 103, 106, 115, 130, 137, 139, 153, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 181, 182, 183, 185, 186, 187, 188], "prq7je_hj4i4auh": 2, "hq": 2, "hanxiao": [2, 153, 167], "http_ca": 2, "crt": 2, "certif": 2, "password": 2, "etc": [2, 3, 7, 139, 151, 161, 163, 179, 189], "index_nam": [2, 13, 18, 58, 70, 71], "build": [2, 5, 8, 9, 27, 40, 103, 106, 119, 122, 124, 155, 158, 161, 167, 171, 173, 175, 183, 185, 188, 189], "previous": [2, 8, 53, 57, 97, 151], "old_stuff": 2, "_": [2, 7, 175], "1000": [2, 153, 155, 156, 174, 184], "da2": [2, 175, 177, 180], "length": [2, 3, 4, 5, 9, 14, 16, 17, 18, 19, 20, 21, 24, 28, 32, 53, 57, 97, 103, 106, 126, 157, 158, 159, 160, 164, 173, 174, 175, 176, 177, 178, 182, 183, 184, 190, 191], "2000": 2, "homogen": [2, 4, 9, 157, 160, 173, 174, 175, 177, 178, 182, 183, 184], "true": [2, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 28, 34, 36, 38, 40, 41, 42, 44, 53, 55, 57, 63, 97, 102, 103, 105, 106, 115, 117, 118, 128, 130, 139, 160, 161, 166, 167, 171, 173, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187], "attribut": [2, 4, 9, 10, 14, 16, 17, 18, 19, 20, 21, 22, 24, 29, 30, 32, 44, 47, 51, 52, 53, 57, 70, 72, 97, 103, 106, 113, 117, 126, 156, 157, 160, 161, 164, 167, 169, 170, 171, 174, 175, 177, 178, 179, 182, 183, 184, 188, 190, 191], "uniqu": [2, 3, 4, 9, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97, 103, 106, 110, 157, 160, 166, 169, 173, 174, 175, 177, 178, 182, 183, 184, 188, 190, 191], "empti": [2, 3, 4, 5, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 32, 44, 53, 57, 59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 98, 103, 106, 118, 144, 157, 160, 161, 165, 167, 171, 173, 174, 176, 177, 178, 180, 181, 182, 183, 184, 185, 187, 188], "ndarrai": [2, 3, 9, 10, 12, 14, 16, 17, 18, 19, 20, 21, 26, 29, 34, 38, 53, 57, 97, 103, 105, 106, 111, 113, 115, 121, 125, 127, 131, 132, 133, 135, 136, 138, 140, 142, 151, 154, 155, 156, 160, 161, 165, 167, 168, 169, 171, 176, 177, 178, 179, 180, 187, 188, 190, 191], "str": [2, 3, 4, 9, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 32, 34, 35, 36, 38, 39, 41, 42, 43, 44, 45, 46, 51, 52, 53, 57, 59, 60, 63, 66, 70, 71, 72, 75, 76, 80, 81, 82, 83, 85, 87, 88, 92, 93, 97, 98, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 115, 118, 119, 120, 121, 122, 125, 126, 127, 128, 130, 132, 135, 136, 139, 144, 145, 146, 147, 157, 158, 160, 161, 164, 166, 173, 174, 175, 177, 178, 182, 183, 184, 185, 190, 191], "14890289": 2, "3168339": 2, "03050802": 2, "06785086": 2, "94719299": 2, "32490566": 2, "how": [2, 3, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 103, 106, 115, 153, 156, 161, 162, 163, 164, 165, 166, 169, 171, 174, 175, 179, 181, 183, 185, 186, 188, 189], "being": [2, 8], "sent": 2, "ad": [2, 8, 9, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 97, 163, 164, 175, 186], "addit": [2, 5, 9, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97, 105, 160, 161, 189], "kwarg": [2, 3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 28, 29, 34, 35, 36, 37, 38, 39, 41, 42, 45, 53, 55, 57, 69, 70, 72, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 98, 103, 105, 106, 119, 125, 137, 144, 171, 177, 186], "method": [2, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 28, 34, 47, 52, 53, 57, 64, 67, 69, 74, 79, 91, 96, 97, 103, 105, 106, 119, 125, 130, 137, 152, 161, 163, 166, 170, 171, 177, 183, 186], "see": [2, 3, 4, 7, 8, 9, 14, 17, 20, 53, 57, 97, 103, 130, 153, 156, 159, 161, 163, 165, 166, 169, 172, 173, 174, 175, 177, 178, 179, 181, 185, 187, 188, 189], "detail": [2, 4, 11, 14, 17, 20, 53, 57, 97, 103, 105, 151, 153, 157, 161, 171, 176, 185, 186, 188], "int": [2, 3, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 29, 32, 38, 42, 43, 44, 45, 48, 51, 53, 57, 59, 60, 63, 64, 69, 70, 71, 72, 74, 75, 79, 80, 81, 83, 85, 87, 91, 92, 93, 96, 97, 98, 103, 104, 105, 106, 108, 110, 111, 113, 115, 116, 118, 120, 125, 126, 127, 128, 130, 137, 138, 139, 144, 160, 161, 169, 174, 177, 178, 185, 190, 191], "l2_norm": 2, "thread_count": 2, "chunk_siz": 2, "500": [2, 8], "max_chunk_byt": 2, "104857600": 2, "queue_siz": 2, "batch_siz": [2, 10, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 32, 42, 43, 45, 53, 57, 58, 70, 71, 97, 125, 174, 176, 180, 181], "overriden": 2, "parallel": [2, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 42, 53, 57, 97, 174, 179, 186], "pre": [2, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 70, 72, 97, 128, 162, 171, 183, 186], "dsl": 2, "addition": [2, 3, 14, 53, 97], "knn": 2, "num_candid": 2, "Such": [2, 5, 7, 8, 181, 182], "leverag": [2, 3, 4, 9, 67, 158, 161, 162, 163, 164, 166, 171, 180, 181, 182, 185], "flag": 2, "index_text": [2, 13, 18, 58, 70, 71], "sever": [2, 4], "pizza": 2, "person": [2, 55], "eat": 2, "restaur": 2, "pizza_doc": 2, "part": [2, 9, 55, 158, 165, 171, 174], "mostli": [2, 8], "applic": [2, 153, 158, 186, 188], "split": [2, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 55, 57, 97, 158], "group": [2, 13, 14, 16, 17, 18, 19, 20, 21, 24, 36, 53, 57, 97, 105, 169, 174], "item": [2, 3, 14, 15, 16, 17, 18, 19, 20, 53, 55, 57, 59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 103, 106, 111, 137, 153, 174, 185], "32": [2, 10, 14, 16, 17, 18, 19, 20, 21, 24, 32, 43, 53, 57, 97, 162, 176, 181], "tag_indic": [2, 13, 18, 58, 70, 71], "food_typ": 2, "italian": 2, "spanish": 2, "food": 2, "cheap": 2, "french": 2, "expens": [2, 8], "chines": 2, "noddl": 2, "quit": [2, 159, 181, 185, 188], "results_cheap": 2, "results_italian": 2, "tags__food_typ": 2, "don": [2, 9, 67, 105, 158, 163, 166, 167, 174, 186], "hostnam": [2, 5, 8], "dict": [2, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 24, 29, 32, 36, 38, 41, 42, 45, 51, 53, 56, 57, 59, 60, 66, 70, 71, 72, 75, 76, 80, 81, 82, 83, 87, 88, 92, 93, 97, 102, 103, 104, 105, 106, 119, 120, 126, 128, 130, 157, 161, 166, 169, 174, 178, 183, 185, 188], "cloud_id": 2, "api_kei": 2, "class": [2, 3, 4, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 137, 144, 145, 146, 147, 148, 160, 162, 163, 164, 171, 173, 185, 186, 190, 191], "object": [2, 3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 68, 70, 71, 72, 77, 80, 81, 82, 87, 88, 92, 93, 94, 97, 98, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 130, 139, 145, 147, 148, 151, 161, 162, 163, 164, 165, 166, 168, 169, 171, 173, 178, 179, 180, 183, 187, 188], "whether": [2, 8, 14, 16, 17, 18, 19, 20, 21, 29, 53, 55, 57, 70, 72, 97, 103, 105, 106, 113, 154, 164, 169, 176], "handl": [2, 3, 67, 109, 152, 155, 163, 168, 171, 185, 189], "refresh": 2, "plural": 2, "compli": 2, "seen": [3, 163], "previou": [3, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 137, 153, 169, 183, 190, 191], "chapter": [3, 151, 161, 163, 166, 169, 171, 173, 174, 175, 177, 178, 185, 187, 188], "sql": [3, 63], "nosql": 3, "motiv": [3, 154, 188], "board": 3, "advanc": [3, 9, 25, 31, 49, 107, 152, 156, 170, 179, 188, 189], "languag": [3, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 70, 72, 97, 156, 158, 162, 165, 178, 183], "power": [3, 26, 62, 78, 89, 173, 179], "well": [3, 8, 151, 156, 163, 166, 169, 185, 187], "design": [3, 103, 106, 109, 111, 126, 160, 161, 163, 167, 171, 177, 183, 189], "maintain": [3, 165, 171], "plug": 3, "ai": [3, 103, 156, 160, 161, 162, 166, 181, 189], "ecosystem": [3, 163, 171, 189], "hub": [3, 105, 162, 163, 182], "clip": [3, 163, 169, 189, 190, 191], "servic": [3, 9, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 163, 185, 188, 189], "finetun": [3, 163, 188], "synergi": 3, "after": [3, 8, 9, 14, 16, 17, 18, 19, 20, 21, 26, 53, 55, 57, 97, 103, 106, 108, 109, 110, 111, 112, 115, 116, 126, 127, 137, 153, 156, 158, 160, 161, 176, 177, 183, 185, 186], "extens": [3, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 130, 183, 188], "conveni": [3, 158], "promis": [3, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97], "experi": [3, 179, 186, 187, 188, 189], "regular": [3, 4, 178, 186, 190, 191], "extra": [3, 4, 14, 16, 17, 18, 19, 20, 21, 36, 37, 42, 53, 57, 97, 103, 106, 119, 128, 151, 171, 186, 187, 189], "learn": [3, 4, 9, 153, 155, 158, 160, 161, 162, 163, 166, 167, 169, 174, 179, 185, 188, 189], "walk": [3, 156], "through": [3, 156, 158, 160, 163, 165, 174, 185], "mydocstor": 3, "look": [3, 4, 103, 106, 115, 153, 156, 159, 161, 167, 176, 177, 181, 183, 185, 188], "config": [3, 7, 13, 14, 17, 53, 57, 58, 80, 85, 92, 93, 97, 103, 128, 158], "start": [3, 14, 15, 16, 17, 18, 19, 20, 21, 44, 52, 53, 57, 59, 64, 66, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 103, 106, 111, 115, 160, 169, 174, 186, 189, 190, 191], "go": [3, 4, 156, 171, 174, 183, 185, 190, 191], "arrai": [3, 12, 103, 105, 106, 111, 115, 123, 126, 132, 133, 135, 136, 138, 139, 150, 159, 165, 166, 167, 171, 172, 173, 178, 180, 183, 185, 188, 190, 191], "sub": [3, 14, 16, 17, 18, 19, 20, 21, 44, 52, 53, 57, 97, 105, 158, 159, 160, 161, 163, 164, 165, 169, 170, 174, 190, 191], "four": [3, 188, 190, 191], "file": [3, 6, 14, 16, 17, 18, 19, 20, 21, 34, 35, 36, 38, 39, 44, 53, 55, 57, 97, 103, 105, 106, 108, 109, 112, 115, 116, 127, 130, 151, 154, 158, 161, 165, 168, 169, 171, 181, 183, 190, 191], "readm": [3, 158], "md": 3, "These": [3, 8, 14, 16, 17, 18, 19, 20, 21, 28, 32, 37, 53, 57, 67, 97, 103, 106, 115, 166, 179, 185, 190, 191], "consist": [3, 8, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 97, 155, 156, 163, 169, 188, 190, 191], "necessari": [3, 60, 71, 76, 88, 93, 161], "search": [3, 8, 9, 14, 16, 17, 18, 19, 20, 21, 29, 42, 48, 53, 57, 70, 72, 97, 153, 154, 162, 163, 167, 169, 189, 190, 191], "anoth": [3, 14, 16, 17, 18, 19, 20, 21, 23, 24, 42, 43, 53, 57, 97, 98, 103, 144, 158, 160, 161, 165, 167, 168, 175, 180], "should": [3, 4, 8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 40, 43, 53, 57, 67, 97, 103, 105, 106, 113, 118, 126, 128, 151, 153, 162, 163, 166, 167, 171, 177, 180, 181, 188, 189], "basegetsetdelmixin": [3, 58, 62, 65, 67, 73, 78, 83, 89, 95], "getsetdelmixin": [3, 58, 59, 62, 70, 73, 75, 78, 80, 83, 87, 89, 92, 95], "def": [3, 8, 10, 102, 156, 158, 164, 181, 185, 186], "_get_doc_by_id": [3, 67], "self": [3, 14, 16, 17, 18, 19, 20, 21, 24, 28, 32, 42, 44, 53, 55, 57, 97, 98, 103, 144, 181, 186], "_id": [3, 68], "_del_doc_by_id": [3, 67], "_set_doc_by_id": [3, 67], "_load_offset2id": 3, "_save_offset2id": 3, "five": [3, 158], "correspond": [3, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 130, 156, 157, 158, 160, 161, 164, 165, 169, 180, 190, 191], "logic": [3, 47, 173, 178, 185, 186], "string": [3, 8, 14, 16, 17, 18, 19, 20, 21, 29, 34, 36, 39, 42, 45, 52, 53, 57, 70, 72, 92, 93, 97, 103, 105, 106, 108, 119, 127, 130, 132, 165, 166, 169, 171, 173, 174, 176, 178, 183, 185, 190, 191], "essenti": 3, "ensur": [3, 4, 160, 171], "offset2id": [3, 58, 63, 65, 67, 68], "map": [3, 4, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 36, 43, 51, 53, 57, 70, 71, 97, 102, 103, 105, 106, 126, 157, 161, 163, 164, 166, 169, 181, 190, 191], "behaviour": [3, 102], "inherit": [3, 7, 16, 19, 125, 168], "order": [3, 8, 14, 16, 17, 18, 19, 20, 21, 24, 32, 47, 53, 57, 97, 102, 130, 137, 174], "keep": [3, 8, 57, 67, 103, 106, 127, 163, 164, 166, 180, 186], "mind": [3, 67, 163, 180], "upper": [3, 8], "upsert": 3, "remov": [3, 13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 64, 65, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 130, 171, 173, 188], "old": [3, 130, 151, 188, 189], "recommened": 3, "_get_docs_by_id": [3, 67], "_del_docs_by_id": [3, 67], "_clear_storag": [3, 67], "_set_doc_value_pair": 3, "_set_doc_value_pairs_nest": 3, "_set_docs_by_id": [3, 67], "signatur": 3, "fine": [3, 151], "grain": [3, 151], "frequent": [3, 8, 103, 106, 109, 111, 126, 166, 169, 171, 183, 188], "fulli": [3, 7, 8, 10, 14, 16, 17, 18, 19, 20, 21, 24, 28, 32, 53, 57, 97, 103, 106, 115, 165, 174], "option": [3, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 32, 34, 36, 38, 40, 41, 42, 43, 44, 45, 48, 52, 53, 57, 59, 60, 64, 69, 70, 71, 72, 74, 75, 79, 80, 81, 85, 87, 88, 91, 92, 93, 96, 97, 102, 103, 104, 105, 106, 111, 115, 118, 119, 120, 121, 125, 126, 128, 130, 137, 138, 139, 144, 145, 146, 147, 174, 182, 185, 187], "refer": [3, 8, 11, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 161, 171, 174, 175, 182, 183], "out": [3, 9, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 32, 43, 53, 55, 57, 59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 156, 163, 167, 171, 183, 189], "iter": [3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 38, 43, 52, 53, 57, 59, 64, 69, 70, 74, 75, 79, 80, 83, 85, 87, 91, 92, 96, 97, 105, 175, 181, 188], "union": [3, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 28, 29, 34, 35, 36, 38, 39, 42, 43, 53, 57, 70, 71, 72, 87, 88, 97, 103, 104, 105, 106, 108, 109, 112, 115, 119, 125, 126, 127, 128, 132, 138], "type_check": 3, "basesequencelikemixin": [3, 58, 64, 65, 69, 74, 79, 85, 91, 96], "sequencelikemixin": [3, 58, 59, 64, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96], "__eq__": 3, "__contains__": 3, "x": [3, 10, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 97, 102, 103, 106, 115, 132, 138, 139, 151, 161, 164, 169, 171, 183, 186, 188, 189, 190, 191], "__repr__": 3, "__add__": 3, "custom": [3, 6, 7, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 102, 160, 177], "_append": 3, "overrid": [3, 8, 14, 16, 17, 18, 19, 20, 21, 29, 41, 53, 57, 67, 97, 102, 177], "last": [3, 4, 8, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 32, 43, 44, 53, 57, 59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 103, 106, 115, 118, 138, 153, 157, 159, 163, 173, 174, 177, 181], "_extend": 3, "__len__": 3, "reli": [3, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 170, 173, 181, 188], "__iter__": 3, "standard": [3, 103, 106, 115, 161, 163], "mutablesequ": [3, 15, 69], "dataclass": [3, 4, 7, 12, 103, 106, 117, 150, 154, 158, 162, 164, 165, 166, 174, 188], "basebackendmixin": [3, 58, 60, 65, 66, 71, 76, 81, 88, 93], "documentarraysourcetyp": [3, 17], "mydocstoreconfig": 3, "config1": 3, "config2": 3, "config3": 3, "backendmixin": [3, 58, 59, 60, 70, 71, 75, 76, 80, 81, 87, 88, 92, 93], "_init_storag": 3, "_doc": [3, 7, 17], "super": [3, 165, 166, 189], "_ensure_unique_config": 3, "config_root": 3, "config_subindex": 3, "config_join": 3, "subindex_nam": 3, "identifi": [3, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97, 157, 166, 169, 176, 190, 191], "expos": [3, 9, 186], "argument": [3, 8, 14, 15, 16, 17, 18, 19, 20, 21, 28, 42, 53, 57, 59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 103, 105, 106, 115, 128, 161, 164, 166, 171, 175, 177, 180, 183], "init_storag": 3, "pars": [3, 4, 56, 103, 106, 119, 128, 171], "either": [3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 42, 43, 52, 53, 57, 97, 103, 106, 115, 127, 132, 135, 136, 165, 178, 180, 182, 186, 187, 190, 191], "veri": [3, 4, 8, 10, 14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 97, 151, 153, 158, 161, 167, 174, 175, 181, 185, 186, 188], "copi": [3, 17, 55, 98, 103, 128, 144, 160, 177, 180], "behavior": [3, 4, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97, 151, 164, 166, 171, 175, 177], "subindex": [3, 4, 7, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 70, 72, 97, 154], "root": [3, 14, 16, 17, 18, 19, 20, 21, 47, 52, 53, 57, 97, 161, 166, 173, 174], "field": [3, 7, 8, 9, 12, 14, 16, 17, 18, 19, 20, 21, 28, 29, 36, 53, 55, 57, 66, 70, 72, 97, 98, 99, 102, 103, 105, 106, 113, 118, 126, 128, 139, 144, 157, 158, 162, 163, 164, 165, 166, 167, 169, 171, 173, 174, 177, 178, 183, 187, 190, 191], "explicitli": [3, 130, 171], "usual": [3, 158, 164, 167], "howev": [3, 4, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 151, 161, 171, 174, 181, 188, 189], "table_nam": [3, 4, 6, 13, 57, 58, 87, 88, 90], "clash": 3, "parent": [3, 7, 16, 154, 163, 169, 185, 190, 191], "und": 3, "subindic": 3, "despit": 3, "within": [3, 8, 14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 97, 155], "typevar": [3, 102, 164], "input": [3, 4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 29, 43, 53, 57, 70, 72, 97, 103, 106, 115, 128, 130, 139, 171, 173, 176, 185, 188], "mydocumentstorearraytyp": 3, "findmixin": [3, 13, 21, 29, 58, 59, 61, 70, 72, 75, 77, 80, 82, 87, 92, 94], "_find_similar_vector": 3, "_find": [3, 29], "elasticarraytyp": 3, "given": [3, 7, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 42, 43, 44, 53, 57, 70, 72, 97, 103, 105, 106, 115, 118, 158, 161, 163, 164, 165, 166, 176, 177, 178, 180, 183], "otherwis": [3, 8, 9, 14, 16, 17, 18, 19, 20, 21, 29, 44, 53, 55, 57, 70, 72, 97, 103, 106, 108, 115, 161, 186], "closest": [3, 14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 70, 72, 97, 156, 158, 180], "abc": [3, 21, 59, 66, 67, 70, 75, 87, 92], "__all__": 3, "storagemixin": [3, 14, 18, 20, 53, 57, 58, 59, 70, 75, 80, 87, 92, 97], "past": 3, "modul": [3, 8, 150, 161, 163, 189], "content": [3, 14, 16, 17, 18, 19, 20, 41, 53, 57, 97, 104, 105, 112, 120, 150, 166, 167, 168, 169, 175, 178], "documentarraymydocstor": 3, "__new__": [3, 18, 53, 97], "cl": [3, 102], "arg": [3, 14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 34, 37, 38, 41, 53, 54, 55, 57, 59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 103, 105, 106, 119, 125, 151], "almost": [3, 4, 163], "allmixin": [3, 13, 17, 21, 103, 106, 144, 146], "basedocumentarrai": [3, 12, 13, 15, 17], "documentarraylik": [3, 14, 16, 17, 18, 19, 20, 21, 28, 39, 53, 57, 97], "elif": 3, "documentarrayinmemori": [3, 9, 12, 13, 16, 19, 20], "done": [3, 10, 165, 181, 183, 185, 186], "abl": [3, 9], "welcom": 3, "back": [3, 4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 43, 45, 53, 57, 97, 151, 153, 154, 161, 174, 183, 185, 189], "least": [3, 153, 174], "unit": [3, 162, 163, 165], "test_advance_index": 3, "test_sequ": 3, "test_construct": 3, "pleas": [3, 11, 14, 16, 17, 18, 19, 20, 21, 24, 34, 42, 43, 53, 57, 67, 97, 103, 106, 115, 151, 166, 171, 174, 182, 183, 185, 187], "overload": 3, "readi": [3, 162, 171, 181, 183, 186, 188, 189], "commit": [3, 4, 59, 63], "live": [4, 158, 188, 189], "redi": 4, "extern": [4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 151, 166, 186], "switch": [4, 153, 171, 179, 180, 186], "idiom": [4, 9, 163, 188, 189], "take": [4, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 128, 153, 158, 162, 181, 185], "simpl": [4, 8, 105, 152, 154, 161, 162, 163, 168, 170, 174, 176, 180, 181, 183, 188], "db": [4, 6, 8, 9, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "multimod": [4, 7, 102, 103, 106, 160, 161, 162, 163, 174, 188, 189], "documentarraysqlit": [4, 12, 13, 57], "documentarraysqlite97c8c833586444a89272ff0ff4287edb": 4, "serialize_config": [4, 6, 8, 13, 14, 53, 57, 58, 59, 60, 80, 81, 82, 87, 88, 92, 93, 97], "conn_config": [4, 6, 13, 57, 58, 87, 88], "journal_mod": [4, 6, 13, 57, 58, 87, 88], "synchron": [4, 6, 13, 57, 58, 87, 88], "modifi": [4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 43, 45, 53, 55, 57, 97, 166, 168, 181], "statement": 4, "context": [4, 173, 188], "manag": [4, 186], "properli": 4, "save": [4, 9, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 35, 36, 37, 39, 44, 48, 53, 57, 65, 68, 97, 103, 106, 108, 109, 112, 115, 127, 154, 180, 181, 183, 186], "unexpect": [4, 166], "yield": [4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 43, 52, 53, 57, 97, 105, 171, 175, 181, 183], "inaccess": 4, "ident": [4, 8, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97, 166, 175, 177], "emb": [4, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 97, 103, 106, 125, 154, 163, 165, 167, 168, 173, 180, 189], "plot_embed": [4, 13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 176, 184, 187], "box": [4, 9, 163], "There": [4, 8, 10, 156, 161, 165, 181, 188], "wai": [4, 7, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 97, 156, 161, 163, 166, 173, 174, 179, 181, 185, 187], "initi": [4, 8, 14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 92, 93, 97, 103, 166], "4477814032": 4, "alia": [4, 55, 66, 92, 93, 97], "style": [4, 40, 105, 186, 187], "explicit": 4, "Of": [4, 158, 173, 185], "cours": [4, 14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 158, 173, 185], "nest": [4, 7, 8, 9, 14, 16, 17, 18, 19, 20, 21, 35, 52, 53, 57, 97, 103, 106, 118, 130, 154, 157, 158, 161, 163, 165, 167, 169, 172, 177, 178, 179, 185, 187, 188, 189], "modal": [4, 7, 12, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97, 103, 104, 106, 120, 128, 154, 161, 165, 166, 169, 171, 174, 178, 183, 188, 189, 190, 191], "load": [4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 23, 33, 34, 35, 36, 37, 39, 42, 53, 57, 59, 63, 65, 68, 97, 105, 151, 154, 155, 156, 158, 162, 164, 171, 176, 181, 183, 186, 188], "former": [4, 160, 171], "sqliteconfig": [4, 12, 13, 17, 57, 58, 87, 88], "cfg": 4, "test": [4, 5, 10, 102, 151, 160, 161, 164, 181, 189], "flexibl": [4, 160], "error": [4, 177, 185], "prone": 4, "relev": [4, 137, 190, 191], "exact": [4, 20, 57, 189], "scan": [4, 13, 53, 58, 80, 83, 153, 175], "over": [4, 5, 10, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 105, 128, 151, 170, 171, 174, 177, 183, 188], "thorugh": 4, "explan": [4, 8, 182], "found": [4, 8, 130, 161, 171, 183, 185, 186, 188], "problem": [4, 10, 153, 180, 181, 185], "temp3": 4, "text": [4, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 29, 40, 53, 55, 57, 59, 60, 70, 71, 72, 97, 102, 103, 104, 105, 106, 109, 111, 113, 120, 128, 154, 156, 160, 161, 163, 165, 166, 167, 168, 169, 171, 173, 175, 176, 177, 178, 182, 183, 185, 188, 189, 190, 191], "hello": [4, 7, 14, 16, 17, 18, 19, 20, 21, 45, 53, 55, 57, 97, 103, 152, 156, 157, 158, 161, 165, 166, 171, 173, 175, 182, 183, 185, 188], "len": [4, 158, 161, 171, 181, 183, 184, 185, 188], "output": [4, 14, 16, 17, 18, 19, 20, 21, 23, 24, 36, 43, 44, 48, 53, 57, 97, 103, 106, 113, 115, 118, 130, 151, 156, 158, 160, 171, 176, 185, 186, 187, 188], "realli": [4, 161, 171], "date": 4, "sens": [4, 8, 103, 106, 115, 159, 177, 185], "speak": 4, "alreadi": [4, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97, 174, 179, 184], "written": [4, 14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 97, 158, 182, 186], "prove": 4, "snippet": [4, 9, 162, 163, 183], "increas": [4, 130, 188], "simpli": [4, 8, 153, 155, 156, 158, 160, 161, 165, 168, 171, 173, 174, 176, 177, 179, 180, 183, 185, 186], "put": [4, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 118, 153, 159, 160, 161, 163, 167, 188], "meta": [4, 163, 190, 191], "sync": 4, "immedi": [4, 181, 186], "costli": 4, "consequ": [4, 186], "block": [4, 10, 174, 181, 186, 188], "solv": [4, 161, 163, 181], "refactor": [4, 151, 162, 186, 188], "temp4": 4, "correct": [4, 171, 177, 183], "home": 4, "messag": [4, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 103, 106, 121, 166, 171, 175, 183], "write": [4, 157, 180, 186, 189], "row": [4, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 97, 132, 133, 135, 136, 138, 139, 157, 161, 180, 188], "below": [4, 8, 158, 161, 169, 170, 174, 181, 182, 183, 186, 187, 188], "ani": [4, 7, 8, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 55, 57, 70, 71, 97, 103, 105, 106, 109, 111, 115, 119, 126, 128, 130, 139, 151, 156, 160, 161, 165, 169, 173, 174, 178, 182, 185, 186, 190, 191], "any_store_beyond_in_memori": 4, "d": [4, 5, 7, 10, 103, 106, 126, 130, 160, 161, 162, 165, 166, 167, 168, 170, 171, 173, 174, 175, 177, 178, 180, 181, 182, 183, 185, 186, 188, 190, 191], "slice": [4, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97, 174], "NOT": [4, 55, 103, 106, 115], "chang": [4, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 97, 128, 153, 163, 164, 166, 171, 175, 186, 188], "solut": [4, 162, 163, 165, 189], "selector": [4, 151, 160, 161, 162, 174], "obvious": 4, "disk": [4, 8, 10, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 151, 179, 189], "concern": 4, "overwhelm": 4, "affect": [4, 151], "On": [4, 8, 158, 176, 187], "bright": 4, "modern": [4, 171, 185, 189], "highli": [4, 153, 163, 171, 183, 188], "resolv": [4, 9, 157], "activ": [4, 167, 176, 188, 189], "continu": [4, 161, 163, 173, 174, 183], "v0": [5, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 97, 182], "6333": [5, 53, 80, 81], "ulimit": 5, "lot": [5, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 97, 181], "collect": [5, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 118, 153, 163], "nofil": 5, "soft": 5, "65535": 5, "hard": [5, 153], "collection_nam": [5, 13, 53, 58, 80, 81, 82, 83, 85], "scroll_batch_s": [5, 13, 53, 58, 80, 81, 83], "scroll": 5, "larger": [5, 14, 16, 17, 18, 19, 20, 21, 39, 53, 57, 97, 103, 106, 113], "full_scan_threshold": [5, 13, 53, 58, 80, 81], "minim": [5, 174], "amount": [5, 183], "payload": 5, "edg": [5, 8], "graph": [5, 8, 139], "space": [5, 132, 174], "u": [5, 103, 106, 109, 111, 126, 158, 181, 182, 186], "init": [5, 102, 161, 183], "4917906896": 5, "ndocumentarrai": [5, 183], "kei": [5, 7, 8, 14, 16, 17, 18, 19, 20, 21, 26, 51, 53, 55, 57, 97, 102, 103, 106, 119, 126, 130, 151, 154, 190, 191], "larg": [6, 8, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 113, 151, 154, 174, 176, 180, 181, 188], "da1": [6, 57, 175, 180], "reconnect": 6, "both": [6, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 97, 151, 165, 170, 176, 180, 185, 188], "mine": [6, 57], "filenam": [6, 14, 16, 17, 18, 19, 20, 21, 23, 34, 35, 36, 39, 53, 57, 97, 103, 105, 106, 109, 112, 115, 130, 175, 183], "serial": [6, 8, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 103, 106, 119, 130, 157, 179, 181, 185, 186, 188, 189], "sqlite3": 6, "pragma": 6, "journal": [6, 156, 178], "mode": [6, 105, 130], "action": [7, 55, 178], "c": [7, 14, 16, 17, 18, 19, 20, 21, 52, 53, 55, 57, 97, 103, 106, 115, 158, 159, 162, 173, 174, 186, 189, 190, 191], "directli": [7, 14, 16, 17, 18, 19, 20, 21, 22, 44, 53, 57, 97, 105, 153, 156, 160, 165, 166, 171, 172, 174, 175, 180], "searchabl": 7, "hood": [7, 163], "fledg": 7, "combin": [7, 8, 154, 169, 183, 186], "desir": [7, 103, 106, 115], "subindex_config": [7, 17, 156, 158], "mydocu": 7, "paragraph": [7, 160], "png": [7, 102, 103, 106, 115, 153, 156, 159, 162, 163, 165, 168, 173, 175, 186], "world": [7, 156, 157, 158, 161, 163, 165, 166, 171, 173, 175, 183, 185, 189], "256": [7, 14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 97, 103, 106, 113, 125, 156, 161, 167, 174, 180, 184], "512": [7, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "chunk": [7, 12, 13, 14, 17, 18, 19, 20, 21, 47, 52, 53, 57, 97, 103, 104, 106, 115, 116, 120, 128, 153, 154, 156, 159, 160, 161, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 181, 183, 188, 190, 191], "uri": [7, 12, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 115, 116, 118, 120, 126, 127, 128, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 171, 172, 175, 181, 182, 183, 187, 190, 191], "load_uri_to_image_tensor": [7, 12, 103, 106, 115, 153, 165, 167, 168, 181, 186], "dictionari": [7, 8, 14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 97, 103, 106, 126, 128, 178], "valid": [7, 103, 105, 106, 119, 128, 161, 171, 177, 181, 183, 188, 189], "path": [7, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 34, 44, 52, 53, 57, 97, 103, 105, 106, 118, 128, 130, 161, 169, 173, 174, 175, 182, 190, 191], "cc": [7, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97, 174], "been": [7, 137, 185, 188], "modif": [7, 181], "automat": [7, 156, 165, 166, 171, 173, 187], "documentarri": 7, "rand": [7, 176], "keyword": [7, 14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97, 105, 128, 166], "top_image_match": 7, "associ": [7, 55], "parent_id": [7, 12, 103, 104, 106, 120, 128, 156, 158, 160, 161, 164, 166, 169, 170, 171, 172, 174, 183, 190, 191], "top_level_match": 7, "video": [8, 103, 106, 154, 161, 165, 168, 169, 187, 188, 189, 190, 191], "tutori": [8, 9, 189], "guid": [8, 11, 14, 17, 20, 53, 57, 97, 103, 151], "command": [8, 152], "8080": [8, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 92, 93, 97], "scheme": [8, 169, 190, 191], "semitechnologi": 8, "restart": 8, "failur": 8, "query_defaults_limit": 8, "25": [8, 178], "authentication_anonymous_access_en": 8, "persistence_data_path": 8, "var": 8, "lib": 8, "default_vectorizer_modul": 8, "enable_modul": 8, "cluster_hostnam": 8, "node1": 8, "protocol": [8, 10, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 34, 39, 53, 57, 58, 92, 93, 97, 103, 106, 119, 130, 141, 151, 171, 181, 182, 183, 186, 188], "bound": [8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 102, 164, 181], "capit": 8, "1234": [8, 97, 176], "preses": 8, "comput": [8, 14, 16, 17, 18, 19, 20, 21, 26, 28, 42, 53, 57, 97, 103, 106, 115, 132, 135, 136, 158, 169, 174, 179, 180, 183, 185, 188, 190, 191], "l2": 8, "squar": [8, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 133, 135, 136, 160], "chosen": [8, 130, 180], "becom": [8, 174], "tradeoff": 8, "timeout_config": [8, 13, 58, 92, 93, 97], "timeout": 8, "request": [8, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 97, 130, 181, 183, 186, 189], "dynamic_ef_min": [8, 13, 58, 92, 93, 97], "act": 8, "boundari": 8, "small": [8, 103, 106, 113, 133, 135, 136, 138, 154, 158, 174, 183], "enough": [8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 158, 188], "suggest": [8, 181], "never": [8, 171], "drop": [8, 59, 63, 166], "dynamic_ef_max": [8, 13, 58, 92, 93, 97], "cap": 8, "massiv": 8, "dynamic_ef_factor": [8, 13, 58, 92, 93, 97], "determin": [8, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97, 103, 106, 115, 130, 161], "factor": 8, "vector_cache_max_object": [8, 13, 58, 92, 93, 97], "held": 8, "2m": 8, "lookup": [8, 13, 54, 56], "magnitud": 8, "cach": [8, 130], "sparingli": 8, "flat_search_cutoff": [8, 13, 58, 92, 93, 97], "absolut": 8, "flat": [8, 174], "cutoff": 8, "bypass": 8, "entir": [8, 156], "brute": 8, "forc": [8, 14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 103, 106, 121], "consider": 8, "40000": 8, "turn": [8, 158], "cleanup_interval_second": [8, 13, 58, 92, 93, 97], "async": [8, 185], "process": [8, 10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 103, 106, 108, 109, 110, 111, 112, 115, 116, 126, 127, 152, 154, 156, 163, 164, 168, 174, 183, 185, 186, 188, 189], "repair": 8, "prior": 8, "cleanup": 8, "mark": [8, 14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 70, 72, 97, 158], "still": [8, 151, 156, 161, 174, 181, 189], "member": [8, 189], "reassign": 8, "datapoint": 8, "typic": [8, 55], "adjust": 8, "down": 8, "clean": [8, 185], "skip": [8, 13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 58, 92, 93, 97, 103, 106, 118], "situat": 8, "doesn": [8, 153], "meant": 8, "glue": 8, "duplic": [8, 128], "candid": 8, "worst": 8, "earli": [8, 174, 187], "exit": 8, "With": [8, 14, 20, 53, 57, 97, 156, 175, 181, 186], "met": 8, "togeth": [8, 14, 16, 17, 18, 19, 20, 21, 22, 24, 32, 36, 53, 57, 97, 105, 130, 153, 174, 175, 186], "normal": [8, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 103, 106, 115, 118, 125, 137, 138, 153, 168, 181, 186], "immut": 8, "And": [8, 55, 158, 178, 185], "bert": 8, "model": [8, 14, 16, 17, 18, 19, 20, 21, 26, 46, 50, 53, 57, 97, 103, 106, 115, 122, 124, 128, 154, 155, 158, 160, 162, 163, 167, 168, 171, 176, 183, 186, 190, 191], "transform": 8, "automodel": 8, "autotoken": 8, "token": [8, 14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 97, 158, 162, 183], "from_pretrain": 8, "uncas": 8, "collate_fn": [8, 14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 97], "return_tensor": 8, "pt": 8, "truncat": 8, "pad": [8, 14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 97, 103, 106, 115, 126, 158, 174], "lessthanequ": 8, "valuenumb": 8, "lowerthanequ": 8, "valueint": 8, "v3": 8, "upgrad": 8, "primit": [8, 161], "natur": [8, 151, 165, 173, 175], "further": [8, 11, 14, 17, 20, 53, 57, 97, 103, 156, 158, 160, 169, 185], "lowest": 8, "dummi": [8, 9], "word": [8, 14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 97, 103, 106, 126, 151, 158, 163, 174, 188], "desc": 8, "asc": 8, "ascend": 8, "nearvector": 8, "sometim": [8, 103, 106, 109, 111, 126, 158], "query_param": 8, "bodi": [8, 155, 158, 185], "familiar": [8, 156, 160, 163, 184, 188], "graphql": [8, 186, 189], "goe": 8, "36840257": 8, "13973749": 8, "28994447": 8, "_addit": 8, "said": [8, 181], "theoret": 8, "anyth": [8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 179, 180], "score": [8, 12, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 103, 104, 106, 120, 128, 137, 150, 156, 167, 169, 171, 173, 177, 180, 183, 190, 191], "weaviate_certainti": 8, "someth": [8, 167, 177, 186], "0000001": 8, "cosine_similar": 8, "0000002000000001": 8, "attach": [8, 184], "featureproject": 8, "classif": 8, "page": [8, 156, 165], "text2vec": 8, "contextionari": 8, "respons": [8, 9, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 181, 189], "param": [8, 14, 16, 17, 18, 19, 20, 21, 47, 53, 55, 57, 97, 132, 133, 139], "creationtimeunix": 8, "lastupdatetimeunix": 8, "tags__creationtimeunix": 8, "tags__lastupdatetimeunix": 8, "1656020204563": 8, "exactli": [9, 161, 186], "verbos": 9, "rest": [9, 171, 181, 183, 185, 188], "stabl": 9, "app": [9, 185, 189], "endpoint": [9, 14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 97, 182, 185, 186], "schema": [9, 14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 59, 63, 92, 93, 97, 103, 106, 122, 128, 151, 164, 169, 171, 189], "strawberri": [9, 13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 97, 103, 106, 189], "debug": [9, 130, 187], "articl": [9, 160, 161, 163], "serv": [9, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 167], "introduct": [9, 151], "background": 9, "stronli": 9, "confus": [9, 151], "matcharrai": [9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97, 103, 106, 120, 173, 174, 177], "rememb": [9, 158, 160, 183], "fetch": [9, 165], "strawberry_typ": [9, 12, 103], "strawberrydocu": [9, 103, 106, 124], "doc": [9, 14, 16, 17, 18, 19, 20, 21, 24, 32, 52, 53, 55, 56, 57, 59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 100, 102, 105, 139, 142, 151, 153, 155, 156, 160, 161, 163, 164, 165, 169, 170, 176, 178, 181, 182, 183, 184, 185, 186, 190, 191], "lambda": [9, 102, 156, 158, 161, 162, 164, 177], "to_strawberry_typ": [9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 50, 53, 57, 97, 103, 106, 124], "notic": [9, 55, 178], "could": [9, 14, 16, 17, 18, 19, 20, 21, 36, 41, 53, 57, 97, 105, 153, 156, 169, 181, 190, 191], "preprocess": [9, 10, 153, 162, 168, 181, 183], "toi": [9, 152, 157, 159], "py": [9, 105], "consol": [9, 186, 187, 189], "8000": 9, "browser": 9, "graphiql": 9, "playground": 9, "url": [9, 130, 169, 190, 191], "beyond": [9, 185, 187], "scope": [9, 169, 190, 191], "decid": 9, "perfect": [9, 162], "prototyp": [9, 187], "short": [9, 151, 158, 185], "wrap": [9, 67, 103, 106, 117, 130, 161, 166, 186], "asgi": 9, "graphql_app": 9, "add_rout": 9, "add_websocket_rout": 9, "tensorflow": [10, 131, 132, 165, 167, 169, 173, 176, 180, 188, 189], "paddlepaddl": [10, 165, 167, 169, 173, 176, 188, 189], "tensor": [10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26, 44, 53, 57, 97, 103, 104, 106, 108, 111, 115, 116, 118, 120, 126, 127, 128, 135, 136, 139, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 176, 180, 181, 183, 187, 188, 189, 190, 191], "spars": [10, 14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 103, 106, 113, 132, 133, 139, 165, 167, 169, 173, 180, 189, 190, 191], "dens": [10, 103, 106, 113, 139, 153, 165, 167, 169, 171, 173, 176, 180, 190, 191], "pickl": [10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 34, 43, 53, 57, 97, 103, 106, 119, 151, 171], "protobuf": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 34, 39, 53, 57, 97, 98, 103, 105, 106, 119, 130, 144, 151, 166, 175, 181, 188, 189, 190], "o": [10, 163, 174], "compress": [10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 34, 53, 57, 97, 103, 106, 119, 130, 171, 181, 183, 188, 189], "transit": [10, 186, 188, 189], "preserv": [10, 14, 16, 17, 18, 19, 20, 21, 24, 32, 44, 53, 57, 97, 103, 106, 108, 174], "paddl": [10, 14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 97, 131, 132, 176, 180], "torch": [10, 26, 131, 132, 139, 156, 160, 162, 167, 176, 180, 188, 189], "to_spars": 10, "to_tensor": 10, "save_binari": [10, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 39, 53, 57, 97, 183], "gz": [10, 105], "again": [10, 183, 185], "load_binari": [10, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 97, 151, 183], "engin": [10, 18, 53, 97, 161, 171, 185, 188, 189], "gpu": [10, 174, 176, 182, 183, 188, 189], "intens": [10, 188], "stuff": 10, "mani": [10, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 97, 103, 106, 115, 153, 163, 183, 185, 186, 187, 188], "pitfal": 10, "correctli": [10, 187, 189], "few": [10, 163], "cpu": [10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 42, 43, 53, 57, 97, 125, 132, 135, 136, 162, 174, 176, 180, 189], "util": [10, 14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 97], "drain": [10, 181], "dataload": [10, 13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 97], "illustr": [10, 162, 170], "million": [10, 103, 106, 115, 171, 180, 183], "color": [10, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 115, 118, 153, 186], "14gb": 10, "cpu_job": [10, 181], "sleep": [10, 181], "job": [10, 181], "gpu_job": [10, 181], "func": [10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 76, 97, 130, 181], "num_work": [10, 14, 16, 17, 18, 19, 20, 21, 23, 24, 42, 43, 53, 57, 97, 125, 181], "donecpu": 10, "section": [11, 161, 163, 166, 179, 181, 185, 188], "codebas": [11, 162, 183, 188], "extract": [11, 103, 106, 115, 130, 152, 154], "docstr": 11, "mixin": [12, 13, 77, 103, 144], "queryset": [12, 13], "annliteconfig": [12, 13, 14, 17, 58, 59, 60], "documentarrayannlit": [12, 13, 14], "chunkarrai": [12, 13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97, 103, 106, 120, 153, 173, 174], "elast": [12, 13, 58], "documentarrayelast": [12, 13, 18, 73], "elasticconfig": [12, 13, 17, 18, 58, 70, 71], "documentarrayqdr": [12, 13, 53], "qdrantconfig": [12, 13, 53, 58, 80, 81], "documentarrayweavi": [12, 13, 53, 92, 93, 95, 97], "weaviateconfig": [12, 13, 17, 58, 92, 93, 97], "getter": [12, 22, 30, 99, 102, 162, 164, 165], "image_gett": [12, 99, 100, 102], "text_gett": [12, 99, 100, 102], "audio_gett": [12, 99, 100], "video_gett": [12, 99, 100], "mesh_gett": [12, 99, 100], "tabular_gett": [12, 99, 100], "blob_gett": [12, 99, 100], "json_gett": [12, 99, 100], "setter": [12, 22, 99, 102, 162, 164, 165], "image_sett": [12, 99, 101, 102], "text_sett": [12, 99, 101, 102], "audio_sett": [12, 99, 101], "video_sett": [12, 99, 101], "mesh_sett": [12, 99, 101], "blob_sett": [12, 99, 101], "json_sett": [12, 99, 101], "tabular_sett": [12, 99, 101], "is_multimod": [12, 99, 102, 103, 106, 117, 161], "documentdata": [12, 103, 104], "from_ndarrai": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 97, 103, 105], "from_fil": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 97, 103, 105, 153, 175, 181, 184, 186], "from_csv": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 97, 103, 105, 157], "from_huggingface_dataset": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 97, 103, 105], "from_ndjson": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 97, 103, 105], "from_lin": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 38, 53, 57, 97, 103, 105], "pydantic_model": [12, 103, 185], "pydanticdocu": [12, 14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 97, 103, 106, 122, 128, 185], "adjac": [12, 13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97, 103, 104, 106, 120, 128, 166, 167, 169, 170, 171, 172, 174, 177, 183, 190, 191], "blob": [12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 97, 103, 104, 106, 111, 115, 120, 128, 151, 161, 164, 165, 166, 167, 168, 169, 171, 173, 183, 190, 191], "clear": [12, 13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 63, 64, 65, 68, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 98, 103, 144, 165, 170], "content_hash": [12, 103, 106, 110], "content_typ": [12, 103, 106, 120, 128, 165], "convert_blob_to_datauri": [12, 103, 106, 109, 168], "convert_blob_to_image_tensor": [12, 103, 106, 115, 168], "convert_blob_to_tensor": [12, 103, 106, 111, 168], "convert_content_to_datauri": [12, 103, 106, 110, 168], "convert_image_tensor_to_blob": [12, 103, 106, 115, 168], "convert_image_tensor_to_sliding_window": [12, 103, 106, 115, 153, 168], "convert_image_tensor_to_uri": [12, 103, 106, 115, 168], "convert_tensor_to_blob": [12, 103, 106, 111, 168], "convert_tensor_to_text": [12, 103, 106, 126, 158, 168], "convert_text_to_datauri": [12, 103, 106, 126, 168], "convert_text_to_tensor": [12, 103, 106, 126, 158, 168], "convert_uri_to_datauri": [12, 103, 106, 111, 168], "copy_from": [12, 98, 103, 144, 166], "displai": [12, 103, 106, 118, 154, 172], "embed_feature_hash": [12, 17, 20, 103, 106, 113, 156, 158, 168], "from_base64": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 97, 103, 106, 119, 168, 171, 183], "from_byt": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 97, 103, 106, 119, 151, 168, 171, 183], "from_dict": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 37, 39, 53, 57, 97, 103, 106, 119, 151, 168, 171], "from_json": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 97, 103, 106, 119, 151, 168, 171, 183, 185], "from_protobuf": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 97, 103, 106, 121, 168, 171, 183], "from_pydantic_model": [12, 13, 14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 97, 103, 106, 122, 168, 183, 185], "from_strawberry_typ": [12, 13, 14, 16, 17, 18, 19, 20, 21, 50, 53, 57, 97, 103, 106, 124, 168], "get_json_schema": [12, 13, 14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 97, 103, 106, 122, 185], "get_multi_modal_attribut": [12, 103, 106, 117], "get_vocabulari": [12, 13, 14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 97, 103, 106, 126, 158], "granular": [12, 13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97, 103, 104, 106, 120, 128, 156, 158, 160, 161, 164, 166, 169, 170, 171, 172, 174, 183, 190, 191], "load_pil_image_to_datauri": [12, 103, 106, 115], "load_uri_to_audio_tensor": [12, 103, 106, 108, 152, 168], "load_uri_to_blob": [12, 102, 103, 106, 109, 164, 168], "load_uri_to_point_cloud_tensor": [12, 103, 106, 116, 155, 168], "load_uri_to_text": [12, 103, 106, 126, 158, 165, 168], "load_uri_to_video_tensor": [12, 103, 106, 127, 159, 168], "mime_typ": [12, 103, 104, 106, 120, 128, 153, 156, 158, 160, 161, 164, 165, 166, 169, 171, 173, 175, 182, 183, 190, 191], "nbyte": [12, 98, 103, 144], "non_empty_field": [12, 98, 103, 144, 165], "offset": [12, 63, 103, 104, 106, 111, 120, 128, 169, 171, 174, 183, 190, 191], "plot_matches_sprit": [12, 103, 106, 118, 184], "pop": [12, 13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 64, 65, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 98, 103, 144, 165], "post": [12, 13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 97, 103, 106, 125, 160, 163, 181, 182, 185, 186], "save_audio_tensor_to_fil": [12, 103, 106, 108, 152, 168], "save_blob_to_fil": [12, 103, 106, 109, 168], "save_image_tensor_to_fil": [12, 103, 106, 115, 153, 159, 168], "save_uri_to_fil": [12, 103, 106, 112, 168], "save_video_tensor_to_fil": [12, 103, 106, 127, 159, 168], "set_image_tensor_channel_axi": [12, 103, 106, 115, 153, 156, 167, 168, 181, 186], "set_image_tensor_inv_norm": [12, 103, 106, 115, 168], "set_image_tensor_norm": [12, 103, 106, 115, 153, 156, 167, 168, 181, 186], "set_image_tensor_shap": [12, 103, 106, 115, 153, 156, 168], "set_multi_modal_attribut": [12, 103, 106, 117], "to_base64": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 97, 103, 106, 119, 171, 183], "to_byt": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 97, 103, 106, 119, 151, 171, 183], "to_dict": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 97, 103, 106, 119, 144, 146, 148, 151, 171, 178, 183], "to_json": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 97, 103, 106, 119, 151, 171, 183, 185], "to_protobuf": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 53, 57, 97, 103, 106, 121, 171, 183], "to_pydantic_model": [12, 13, 14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 97, 103, 106, 122, 183, 185], "weight": [12, 103, 104, 106, 120, 128, 137, 169, 171, 178, 183, 190, 191], "math": [12, 150, 181], "r_precis": [12, 131, 137, 177], "precision_at_k": [12, 131, 137, 177], "hit_at_k": [12, 131, 137, 177], "average_precis": [12, 131, 137, 177], "reciprocal_rank": [12, 131, 137, 177], "recall_at_k": [12, 131, 137, 177], "f1_score_at_k": [12, 131, 137, 177], "dcg_at_k": [12, 131, 137, 177], "ndcg_at_k": [12, 131, 137, 177], "helper": [12, 21, 22, 23, 26, 27, 30, 31, 32, 35, 36, 38, 43, 44, 45, 49, 58, 59, 65, 80, 87, 103, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 118, 122, 124, 126, 127, 131, 150, 158, 168], "minmax_norm": [12, 131, 138], "top_k": [12, 103, 106, 118, 131, 138, 184], "update_rows_x_mat_best": [12, 131, 138], "unravel": [12, 131, 139, 173], "ravel": [12, 131, 139], "get_array_typ": [12, 131, 139], "to_numpy_arrai": [12, 131, 139], "to_list": [12, 13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 97, 131, 139, 171, 183, 188], "get_array_row": [12, 131, 139], "check_arraylike_equ": [12, 131, 139], "detach_tensor_if_pres": [12, 131, 139], "proto": [12, 128, 150], "io": [12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 140, 151, 152, 162, 163, 165, 171, 181, 188, 189], "docarray_pb2": [12, 140, 171], "namedscoredata": [12, 144, 145], "namedscor": [12, 103, 104, 106, 120, 144, 156, 169], "op_nam": [12, 144, 145, 146, 147, 190, 191], "ref_id": [12, 144, 145, 146, 147, 158, 190, 191], "basedctyp": [12, 98, 103, 144, 150], "typenam": [12, 130, 150], "deprecate_bi": [12, 130, 150], "dunder_get": [12, 130, 150], "random_ident": [12, 130, 150], "random_uuid": [12, 130, 150], "download_mermaid_url": [12, 130, 150], "get_request_head": [12, 130, 150], "get_full_vers": [12, 130, 150], "get_ci_vendor": [12, 130, 150], "reset_port": [12, 130, 150], "random_port": [12, 130, 150], "cached_properti": [12, 130, 150], "compress_byt": [12, 130, 150], "decompress_byt": [12, 130, 150], "get_compress_ctx": [12, 130, 150], "dataclass_from_dict": [12, 130, 150], "protocol_and_compress_from_file_path": [12, 130, 150], "add_protocol_and_compress_to_file_path": [12, 130, 150], "filter_dict": [12, 130, 150], "contentpropertymixin": [13, 21, 22, 103, 106, 110], "delitem": [13, 21, 62, 78, 89], "delitemmixin": [13, 21, 25], "embedmixin": [13, 21, 26], "get_framework": [13, 21, 26], "emptymixin": [13, 21, 27], "evaluationmixin": [13, 21, 28], "getattr": [13, 21], "getattributemixin": [13, 21, 30], "getitem": [13, 21, 62, 78, 89], "getitemmixin": [13, 21, 31], "groupmixin": [13, 21, 24, 32], "matchmixin": [13, 21, 42], "parallelmixin": [13, 21, 24, 43], "plotmixin": [13, 21, 44, 103, 106, 118], "postmixin": [13, 21, 45], "pydant": [13, 14, 16, 17, 18, 19, 20, 21, 50, 53, 57, 97, 103, 106, 119, 171, 183], "pydanticmixin": [13, 21, 46, 103, 106, 122], "reduc": [13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 97], "reducemixin": [13, 21, 47], "sampl": [13, 14, 16, 17, 18, 19, 20, 21, 53, 57, 97, 103, 105, 106, 108, 116, 155, 161], "samplemixin": [13, 21, 48], "setitem": [13, 21, 62, 78, 89], "setitemmixin": [13, 21, 49], "strawberrymixin": [13, 21, 50, 103, 106, 124], "texttoolsmixin": [13, 21, 51], "travers": [13, 14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 57, 97, 170, 174, 188], "traversemixin": [13, 21, 52], "apply_batch": [13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 181], "auth_token": [13, 14, 16, 17, 18, 19, 20, 21, 33, 41, 53, 57, 97], "batch_id": [13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 53, 57, 97], "flatten": [13, 14, 16, 17, 18, 19, 20, 21, 36, 52, 53, 57, 97, 157, 173], "from_datafram": [13, 14, 16, 17, 18, 19, 20, 21, 33, 37, 53, 57, 97, 183], "from_list": [13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 97, 183], "load_csv": [13, 14, 16, 17, 18, 19, 20, 21, 33, 36, 53, 57, 97], "load_json": [13, 14, 16, 17, 18, 19, 20, 21, 33, 39, 53, 57, 97], "map_batch": [13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 174], "plot_image_sprit": [13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 153, 159, 184, 186], "pull": [13, 14, 16, 17, 18, 19, 20, 21, 33, 41, 53, 57, 97, 158, 183, 189], "push": [13, 14, 16, 17, 18, 19, 20, 21, 33, 41, 53, 57, 97, 181, 183, 186, 189], "reduce_al": [13, 14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 97], "save_csv": [13, 14, 16, 17, 18, 19, 20, 21, 33, 36, 53, 57, 97, 157], "save_embeddings_csv": [13, 14, 16, 17, 18, 19, 20, 21, 33, 36, 53, 57, 97], "save_gif": [13, 14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "save_json": [13, 14, 16, 17, 18, 19, 20, 21, 33, 34, 39, 53, 57, 97], "shuffl": [13, 14, 16, 17, 18, 19, 20, 21, 24, 32, 38, 43, 48, 53, 57, 97, 105, 177], "split_by_tag": [13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 32, 53, 57, 97, 174], "to_datafram": [13, 14, 16, 17, 18, 19, 20, 21, 33, 37, 53, 57, 97, 183], "traverse_flat": [13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97], "traverse_flat_per_path": [13, 14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97], "lookuptreeelem": [13, 54, 55], "lookupnod": [13, 54, 55], "lookupleaf": [13, 54, 55], "q": [13, 54, 55, 103, 158, 167, 171, 180, 183], "lookupyerror": [13, 54, 55], "dunder_partit": [13, 54, 55], "iff": [13, 54, 55], "iff_not_non": [13, 54, 55], "guard_typ": [13, 54, 55], "guard_str": [13, 54, 55], "guard_list": [13, 54, 55], "guard_q": [13, 54, 55], "guard_it": [13, 54, 55], "parser": [13, 54, 103, 106, 119], "querypars": [13, 54, 56], "registri": [13, 58], "type_map": [13, 14, 16, 18, 19, 20, 53, 57, 58, 59, 60, 65, 66, 70, 71, 75, 76, 80, 81, 87, 88, 92, 93, 97], "count": [13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 64, 65, 66, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 103, 106, 111], "revers": [13, 14, 15, 16, 17, 18, 19, 20, 53, 57, 58, 59, 64, 65, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 152], "reference_doc": [13, 16, 19], "max_es_returned_doc": [13, 18, 58, 70, 73], "collection_name_meta": [13, 53, 58, 80], "serialization_config": [13, 53, 58, 80, 83], "schema_vers": [13, 57, 58, 87, 88, 90], "factori": [14, 18, 53, 57, 59, 60, 70, 71, 80, 81, 87, 88, 92, 93, 97, 104], "tupl": [14, 16, 17, 18, 19, 20, 21, 42, 44, 51, 53, 57, 59, 60, 66, 70, 71, 80, 81, 92, 93, 97, 98, 103, 106, 113, 115, 125, 126, 130, 138, 139, 144, 165, 167, 169, 173, 175], "typemap": [14, 16, 18, 19, 20, 53, 57, 58, 59, 60, 65, 66, 70, 71, 75, 76, 80, 81, 87, 88, 92, 93, 97], "integ": [14, 15, 16, 17, 18, 19, 20, 53, 57, 59, 60, 64, 69, 70, 71, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 103, 106, 126, 158, 174, 190, 191], "_safe_cast_int": [14, 18, 59, 60, 70, 71, 92, 93, 97], "sequenc": [14, 15, 16, 17, 18, 19, 20, 21, 22, 36, 53, 57, 59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 103, 106, 109, 111, 115, 126, 175, 190, 191], "noqa": [14, 16, 17, 18, 19, 20, 21, 24, 38, 43, 53, 57, 97], "dar102": [14, 16, 17, 18, 19, 20, 21, 24, 38, 43, 53, 57, 97], "dar101": [14, 16, 17, 18, 19, 20, 21, 24, 38, 43, 53, 57, 97], "dar201": [14, 16, 17, 18, 19, 20, 21, 24, 38, 43, 53, 57, 97], "rtype": [14, 16, 17, 18, 19, 20, 21, 24, 34, 43, 47, 53, 57, 97, 132, 133, 139], "properti": [14, 16, 17, 18, 19, 20, 21, 22, 41, 47, 53, 57, 63, 66, 80, 82, 83, 85, 92, 93, 97, 98, 103, 106, 110, 117, 130, 144, 146, 161, 168, 185], "until": [14, 16, 17, 18, 19, 20, 21, 24, 32, 53, 57, 97, 181], "along": [14, 16, 17, 18, 19, 20, 21, 22, 24, 29, 32, 53, 57, 70, 72, 97], "traversal_path": [14, 16, 17, 18, 19, 20, 21, 24, 32, 52, 53, 57, 97], "bool": [14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 28, 29, 32, 34, 36, 38, 41, 42, 43, 44, 45, 52, 53, 55, 57, 70, 71, 72, 92, 93, 97, 102, 103, 105, 106, 109, 111, 113, 115, 116, 117, 118, 125, 126, 127, 128, 130, 138, 139, 190, 191], "divid": [14, 16, 17, 18, 19, 20, 21, 24, 32, 43, 53, 57, 97], "minibatch": [14, 16, 17, 18, 19, 20, 21, 24, 32, 43, 53, 57, 97, 181], "forwardref": [14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 32, 34, 42, 43, 46, 47, 50, 52, 53, 57, 70, 72, 97, 102, 103, 105, 106, 120, 128, 139], "byte": [14, 16, 17, 18, 19, 20, 21, 22, 34, 53, 57, 97, 98, 103, 104, 106, 108, 111, 119, 120, 130, 144, 161, 166, 169, 175, 188, 189, 190, 191], "documentcontenttyp": [14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 97, 103, 104, 106, 120], "arraytyp": [14, 16, 17, 18, 19, 20, 21, 22, 29, 53, 57, 70, 72, 97, 103, 104, 106, 120, 125, 132, 133, 139, 143], "occurr": [14, 15, 16, 17, 18, 19, 20, 53, 57, 59, 64, 66, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97], "classmethod": [14, 16, 17, 18, 19, 20, 21, 23, 27, 34, 35, 36, 37, 38, 39, 41, 46, 50, 53, 57, 97, 103, 106, 119, 121, 122, 124, 128], "thread": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 188], "pool": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97], "show_progress": [14, 16, 17, 18, 19, 20, 21, 23, 24, 41, 43, 44, 45, 53, 57, 97, 182, 183, 186], "callabl": [14, 16, 17, 18, 19, 20, 21, 23, 24, 28, 29, 42, 43, 52, 53, 57, 70, 72, 76, 97, 102, 125, 180], "place": [14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 43, 47, 53, 57, 59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 103, 106, 109, 153, 163, 168, 181], "later": [14, 16, 17, 18, 19, 20, 21, 23, 24, 41, 43, 47, 53, 57, 67, 97, 158, 164, 186], "multi": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 52, 53, 57, 97, 154, 160, 166, 167, 169, 181, 185, 188, 189, 190, 191], "perhap": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97], "yourselv": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97], "wish": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97], "regardless": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 139, 174, 181], "multiprocess": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97], "variabl": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 92, 93, 97, 130, 176, 183, 190, 191], "origin": [14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 32, 43, 53, 55, 57, 97, 103, 106, 115, 130, 158, 162, 164, 168, 169, 174, 175, 190, 191], "share": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 97, 163, 177, 183, 188], "worker": [14, 16, 17, 18, 19, 20, 21, 23, 24, 42, 43, 53, 57, 97], "ignor": [14, 16, 17, 18, 19, 20, 21, 23, 24, 29, 43, 47, 53, 57, 70, 72, 97, 161, 181, 182], "close": [14, 16, 17, 18, 19, 20, 21, 23, 24, 43, 53, 57, 59, 63, 97, 158, 177, 188], "progressbar": [14, 16, 17, 18, 19, 20, 21, 23, 44, 45, 53, 57, 97, 187], "embed_model": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 97, 125, 135, 136], "devic": [14, 16, 17, 18, 19, 20, 21, 26, 42, 53, 57, 97, 125, 132, 135, 136, 162, 176, 180], "to_numpi": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 97, 176], "fill": [14, 16, 17, 18, 19, 20, 21, 26, 28, 38, 53, 57, 97, 105, 161, 164, 166, 170, 175, 176, 181], "inplac": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 97, 103, 106, 108, 109, 110, 111, 115, 118, 126, 174, 181], "anydnn": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 97, 125], "kera": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 97, 176], "pytorch": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 97, 103, 106, 115, 153, 165, 167, 169, 173, 176, 180, 186], "cuda": [14, 16, 17, 18, 19, 20, 21, 26, 42, 53, 57, 97, 132, 135, 136, 162, 176, 180], "framework": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 97, 139, 153, 171, 176, 180, 185, 188], "format": [14, 16, 17, 18, 19, 20, 21, 26, 29, 35, 36, 53, 57, 70, 72, 97, 105, 171, 176, 185, 186, 188], "mini": [14, 16, 17, 18, 19, 20, 21, 26, 53, 57, 97], "stack": [14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 97], "hash_fn": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97, 177], "metric_nam": [14, 16, 17, 18, 19, 20, 21, 28, 29, 42, 53, 57, 70, 72, 97, 125], "strict": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97], "rank": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97, 137], "groundtruth": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97, 177], "multipl": [14, 16, 17, 18, 19, 20, 21, 24, 28, 32, 44, 52, 53, 57, 97, 103, 106, 116, 156, 158, 165, 170, 171, 173, 174, 179, 183, 186, 188], "align": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97, 177], "semant": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97, 151, 180], "prevent": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97], "irrelev": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97, 177], "accident": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97], "metric_fn": [14, 16, 17, 18, 19, 20, 21, 28, 53, 57, 97], "exclude_self": [14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 70, 72, 97, 125, 158, 177], "only_id": [14, 16, 17, 18, 19, 20, 21, 29, 42, 53, 57, 70, 72, 97, 125, 180], "latter": [14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 70, 72, 97, 160], "notimplementederror": [14, 16, 17, 18, 19, 20, 21, 29, 53, 57, 70, 72, 97], "effect": [14, 16, 17, 18, 19, 20, 21, 42, 52, 53, 57, 97, 103, 106, 115, 163, 166, 178], "_show_progress": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97], "df": [14, 16, 17, 18, 19, 20, 21, 37, 53, 57, 97, 183], "panda": [14, 16, 17, 18, 19, 20, 21, 37, 53, 57, 97, 157, 179, 183, 188], "datafram": [14, 16, 17, 18, 19, 20, 21, 33, 53, 57, 97, 157, 175, 179, 188, 189], "jsonschema": [14, 16, 17, 18, 19, 20, 21, 39, 53, 57, 97, 103, 106, 119, 151, 171], "pb_msg": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 103, 106, 121, 142, 143], "indent": [14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 97, 103, 106, 122], "json": [14, 16, 17, 18, 19, 20, 21, 33, 35, 36, 38, 46, 53, 57, 97, 103, 105, 106, 119, 122, 128, 156, 161, 163, 166, 175, 188, 189], "min_freq": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 97], "text_attr": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 97, 103, 106, 126], "vocabulari": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 97, 103, 106, 126, 158], "textual": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 97, 103, 106, 126, 156, 158], "deriv": [14, 16, 17, 18, 19, 20, 21, 51, 53, 55, 57, 62, 67, 78, 89, 97, 103, 106, 126], "minimum": [14, 16, 17, 18, 19, 20, 21, 44, 51, 53, 57, 97, 103, 106, 118], "frequenc": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 97, 103, 106, 108, 126], "reserv": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 97, 103, 106, 126, 158], "unknown": [14, 16, 17, 18, 19, 20, 21, 51, 53, 57, 97, 103, 106, 126, 158, 171], "stop": [14, 15, 16, 17, 18, 19, 20, 53, 57, 59, 64, 66, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97], "valueerror": [14, 15, 16, 17, 18, 19, 20, 26, 53, 57, 59, 64, 66, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97, 177], "present": [14, 15, 16, 17, 18, 19, 20, 21, 34, 53, 57, 59, 64, 66, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97], "file_format": [14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 97], "binari": [14, 16, 17, 18, 19, 20, 21, 33, 35, 36, 53, 57, 97, 103, 105, 106, 109, 111, 119, 126, 137, 151, 165, 168, 169, 171, 175, 190, 191], "utf": [14, 16, 17, 18, 19, 20, 21, 35, 36, 39, 53, 57, 97, 103, 105, 106, 109, 111, 126, 190, 191], "csv": [14, 16, 17, 18, 19, 20, 21, 33, 35, 38, 53, 57, 97, 105, 154, 161, 175, 189], "textio": [14, 16, 17, 18, 19, 20, 21, 35, 36, 38, 39, 53, 57, 97, 105], "binaryio": [14, 16, 17, 18, 19, 20, 21, 34, 35, 53, 57, 97, 103, 106, 108, 109, 112, 115, 127], "human": [14, 16, 17, 18, 19, 20, 21, 34, 35, 39, 53, 57, 97, 158], "readabl": [14, 16, 17, 18, 19, 20, 21, 34, 35, 39, 53, 57, 97, 166, 174], "compat": [14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 97, 151, 171], "complex": [14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 97, 156], "restor": [14, 16, 17, 18, 19, 20, 21, 35, 53, 57, 97], "stream": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 151, 152, 188, 189], "progress": [14, 16, 17, 18, 19, 20, 21, 24, 34, 41, 43, 44, 53, 57, 97], "bar": [14, 16, 17, 18, 19, 20, 21, 24, 34, 41, 43, 44, 53, 57, 97, 103, 166], "file_nam": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97], "interpol": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97], "respect": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 128, 156, 165], "my_docarrai": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 183], "lz4": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 171, 183, 189], "field_resolv": [14, 16, 17, 18, 19, 20, 21, 36, 38, 53, 57, 97, 98, 103, 105, 144, 157, 166], "darrai": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 125], "use_scipi": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 125, 158, 180], "sqeuclidean": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 131, 132, 133, 135, 136, 180], "nativ": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 152, 186], "scipi": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 103, 106, 113, 132, 133, 139, 165, 167, 169, 173, 180, 189], "braycurti": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "canberra": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "chebyshev": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "cityblock": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "correl": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "dice": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "ham": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "jaccard": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 158], "jensenshannon": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "kulsinski": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "mahalanobi": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "minkowski": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "rogerstanimoto": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "russellrao": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "seuclidean": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "sokalmichen": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "sokalsneath": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "wminkowski": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "yule": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "invert": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 178], "against": [14, 16, 17, 18, 19, 20, 21, 42, 53, 55, 57, 97, 167, 177, 180], "b": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 128, 130, 158, 159, 161, 162, 164, 166, 171, 174, 180, 181, 183], "min": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 138, 188], "rescal": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "significantli": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97], "speedup": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 181, 188], "hand": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 103, 106, 126, 167, 171, 177, 180, 189], "matrix": [14, 16, 17, 18, 19, 20, 21, 42, 53, 57, 97, 103, 106, 113, 132, 138, 165, 167, 169, 173, 188], "titl": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 158, 162, 185], "mydocumentarrai": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "image_sprit": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 184, 187], "min_image_s": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "channel_axi": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 115, 118, 153, 156, 184, 186], "start_serv": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "127": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "image_sourc": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "interact": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 184, 187], "visual": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 118, 159, 165, 176, 179, 183, 187, 188, 189], "projector": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 189], "bind": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 185], "frontend": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "axi": [14, 16, 17, 18, 19, 20, 21, 22, 38, 44, 53, 57, 97, 103, 105, 106, 115, 118, 153, 181, 186], "channel": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 115, 118, 153, 181, 189], "info": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 115, 118], "yourself": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 165, 181], "fallback": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "canvas_s": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 118], "min_siz": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 118], "skip_empti": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 118], "show_index": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "fig_siz": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "keep_aspect_ratio": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "sprite": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 118, 154, 159, 189], "ui": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 118], "canva": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 118], "who": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 161, 183, 188], "corner": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "aspect": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "ratio": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "indexerror": [14, 15, 16, 17, 18, 19, 20, 53, 57, 59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97], "remot": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 97, 165, 169, 179, 182, 186, 190, 191], "flow": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 97, 105, 186, 189], "sandbox": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 97, 182, 186], "168": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 97, 182, 186], "123": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 97], "jinahub": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 97, 182, 186], "latest": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 97, 182, 189], "send": [14, 16, 17, 18, 19, 20, 21, 45, 53, 57, 97, 162, 171, 181, 185], "local_cach": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 183], "cloud": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 116, 154, 161, 168, 186, 188, 189], "upload": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 181, 183, 186], "download": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 103, 106, 109, 130, 153, 167, 183], "public": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 186, 189], "kinda": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97], "clipboard": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97], "everyon": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97], "anyon": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 165], "surviv": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97], "complic": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 154, 163, 189], "lifetim": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 183], "atm": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97], "dai": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 158, 188], "week": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97, 183], "temporari": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97], "transmiss": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97], "creator": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97], "login": [14, 16, 17, 18, 19, 20, 21, 41, 53, 57, 97], "merg": [14, 16, 17, 18, 19, 20, 21, 47, 53, 55, 57, 97], "prioriti": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 97, 188], "reduct": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 97], "sequenti": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 97, 176, 181], "belong": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 97, 169, 190, 191], "kept": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 97], "non": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 97, 98, 103, 106, 109, 111, 115, 118, 126, 144, 166, 171, 174, 181, 183, 187], "sort": [14, 16, 17, 18, 19, 20, 21, 47, 53, 57, 97, 130], "IN": [14, 15, 16, 17, 18, 19, 20, 53, 55, 57, 59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96, 97], "seed": [14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 97], "replac": [14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 97, 161], "state": [14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 97, 165], "produc": [14, 16, 17, 18, 19, 20, 21, 48, 53, 57, 97], "flatten_tag": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 97, 157], "exclude_field": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 97], "dialect": [14, 16, 17, 18, 19, 20, 21, 36, 38, 53, 57, 97, 105], "excel": [14, 16, 17, 18, 19, 20, 21, 36, 38, 53, 57, 97, 105], "with_head": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 97], "tag__fieldnam": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 97], "separ": [14, 16, 17, 18, 19, 20, 21, 36, 52, 53, 57, 97, 105, 157, 160, 163, 171, 174, 189], "wont": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 97], "predefin": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 97, 105, 169, 178], "savetxt": [14, 16, 17, 18, 19, 20, 21, 36, 53, 57, 97], "durat": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "size_ratio": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "inline_displai": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "gif": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "frame": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 103, 106, 127, 154], "millisecond": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "jupyt": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 166, 183, 189], "notebook": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97, 166, 172, 178, 189], "atribut": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "meth": [14, 16, 17, 18, 19, 20, 21, 44, 53, 57, 97], "newli": [14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 97], "shape": [14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 97, 103, 106, 115, 132, 152, 153, 155, 156, 159, 161, 171, 173, 190, 191], "dtype": [14, 16, 17, 18, 19, 20, 21, 22, 53, 57, 97, 103, 106, 111, 126, 152, 156, 161, 167, 171, 190, 191], "_file_ctx": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97], "export": [14, 16, 17, 18, 19, 20, 21, 37, 53, 57, 97, 171, 176], "ndarray_typ": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 103, 106, 121, 142, 143, 171], "documentarrayproto": [14, 16, 17, 18, 19, 20, 21, 34, 53, 57, 97, 183], "pydanticdocumentarrai": [14, 16, 17, 18, 19, 20, 21, 46, 53, 57, 97, 185], "filter_fn": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97], "traversablesequ": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97], "leav": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97], "comma": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97, 160, 174], "child": [14, 16, 17, 18, 19, 20, 21, 52, 53, 55, 57, 97], "mm": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97], "cm": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97, 174, 178], "reach": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97, 151, 186], "fly": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97, 163], "traverse_flattened_per_path": [14, 16, 17, 18, 19, 20, 21, 52, 53, 57, 97], "abstract": [15, 17, 67, 82, 83, 85], "subset": [16, 19], "doc_view": 16, "represent": [16, 128, 144, 146, 151, 155, 163, 166, 167, 176, 183, 188, 190, 191], "safeguard": 16, "legit": 16, "cake": [17, 20], "lie": [17, 20], "barrel": [17, 20], "roll": [17, 20], "scores__jaccard__valu": [17, 20], "neural": [17, 156, 162, 189], "executor": [17, 153, 162, 163], "10000": [18, 70, 73], "doubl": [18, 55, 70, 71, 130, 173, 190, 191], "documentarrayload": [21, 23, 24], "dataloadermixin": [21, 23], "lazyrequestread": [21, 33, 34], "binaryiomixin": [21, 33, 34], "commoniomixin": [21, 33, 35], "csviomixin": [21, 33, 36], "dataframeiomixin": [21, 33, 37], "from_gen": [21, 33], "fromgeneratormixin": [21, 33, 38], "jsoniomixin": [21, 33, 39], "pbar": [21, 33], "qpscolumn": [21, 33, 40], "get_pbar": [21, 33, 40], "get_progressbar": [21, 33, 40], "pushpul": [21, 33], "pushpullmixin": [21, 33, 41], "plugin": [21, 106], "__delitem__": [25, 67, 73, 95], "dnn_model": 26, "dnn": [26, 167, 176], "solid": 26, "__module__": 26, "idea": [26, 162, 185, 188, 189], "tell": [26, 161], "subclass": [29, 67, 186], "bulk": [30, 167, 171, 173], "__getitem__": [31, 67, 73, 95], "render": [33, 40, 172, 188], "get_table_column": [33, 40], "max_refresh": [33, 40], "dam": [36, 51], "recurs": [38, 105, 169, 170, 190, 191], "sampling_r": [38, 105], "read_mod": [38, 105, 175], "to_dataturi": [38, 105], "exclude_regex": [38, 105], "dataset_path": [38, 105], "filter_field": [38, 105], "datasets_kwarg": [38, 105], "fp": [38, 105], "filepath": [38, 105], "line_format": [38, 105], "text_format": 40, "justifi": 40, "markup": 40, "table_column": 40, "textcolumn": 40, "total": [40, 98, 103, 144, 181], "transmit": 41, "threadpool": 43, "children": [47, 55], "__setitem__": [49, 67, 73, 95], "nlp": [51, 188], "machin": [53, 97, 161, 167, 169, 183], "qdrantclient": [53, 80, 82, 83, 85], "add_child": [54, 55], "with_traceback": [54, 55], "github": 55, "com": 55, "naiquevin": 55, "lookupi": 55, "mit": 55, "licens": [55, 189], "copyright": 55, "2013": 55, "vineet": 55, "naik": 55, "naikvin": 55, "gmail": 55, "permiss": 55, "herebi": 55, "grant": 55, "charg": [55, 158], "obtain": 55, "softwar": [55, 155], "deal": [55, 174, 186], "publish": 55, "sublicens": 55, "sell": 55, "permit": 55, "whom": 55, "furnish": 55, "subject": [55, 188], "shall": [55, 161, 163, 181], "substanti": 55, "portion": 55, "THE": [55, 156], "AS": 55, "warranti": 55, "OF": 55, "kind": [55, 103, 165, 188], "express": [55, 161, 163, 165, 169, 173, 175, 178, 189], "OR": [55, 178], "impli": 55, "BUT": 55, "TO": 55, "merchant": 55, "FOR": 55, "purpos": [55, 163, 165, 178, 188], "AND": [55, 178], "noninfring": 55, "NO": 55, "event": [55, 189], "author": [55, 156, 163], "holder": 55, "BE": 55, "liabl": 55, "claim": 55, "damag": 55, "liabil": 55, "contract": 55, "tort": 55, "aris": 55, "WITH": [55, 156], "val": 55, "pair": [55, 162, 177], "hold": [55, 166], "text__exact": 55, "els": [55, 130, 137, 162, 179], "text_exact": 55, "tags__nam": 55, "tree": 55, "op": 55, "negat": 55, "eg": [55, 130], "language__neq": 55, "rubi": [55, 190, 191], "framework__startswith": 55, "language__exact": 55, "php": [55, 190, 191], "leaf": 55, "tb": 55, "__traceback__": 55, "dunderkei": [55, 130], "everyth": [55, 163, 171, 183, 188], "underscor": [55, 130], "a__b__c": 55, "a__b": [55, 130], "precond": 55, "shortcut": 55, "partial": [55, 181], "commonli": 55, "precondit": 55, "mix": [55, 130, 177, 179, 188, 189], "classinfo": 55, "simplest": [57, 153], "getsetdel": [58, 59, 65, 70, 75, 80, 87, 92], "offsetmap": [58, 59, 63], "seqlik": [58, 59, 65, 70, 75, 80, 87, 92], "needs_id2offset_rebuild": [58, 75, 76], "initialize_t": [58, 87, 90], "create_t": [59, 63], "extend_doc_id": [59, 63], "get_id_by_offset": [59, 63], "get_ids_by_offset": [59, 63], "get_offsets_by_id": [59, 63], "get_offset_by_id": [59, 63], "get_all_id": [59, 63], "del_at_offset": [59, 63], "insert_at_offset": [59, 63], "set_at_offset": [59, 63], "shift_offset": [59, 63], "drop_tabl": [59, 63], "dump": [59, 63, 103, 106, 119, 128, 153, 159, 168], "execut": [59, 63, 176], "execute_mani": [59, 63], "kwd": [59, 64, 69, 70, 74, 75, 79, 80, 85, 87, 91, 92, 96], "in_memori": 63, "doc_id": 63, "shift_from": 63, "shift_step": 63, "data_fil": 63, "get_id": [65, 68], "delete_by_id": [65, 68], "delete_by_offset": [65, 68], "update_id": [65, 68], "9223372036854775807": 66, "_set_doc": 67, "_del_doc": 67, "_del_all_doc": 67, "wrapper": 67, "inner": [67, 160], "whenev": 67, "likewis": 67, "idx": [68, 159], "data_id": 68, "_ids_map": 68, "concret": [73, 95], "container_type_nam": 90, "cur": 90, "_class_nam": [92, 93, 97], "_obj": [98, 103, 144], "unknown_fields_handl": [98, 103, 144, 166], "catch": [98, 103, 144, 166], "overwrit": [98, 103, 144], "emtpi": [98, 103, 144], "consum": [98, 103, 144, 180, 181], "_source_field": [102, 164], "default_factori": [102, 161], "repr": [102, 161], "hash": [102, 103, 106, 110, 113, 154, 161, 168, 177], "metadata": [102, 156, 169], "myimag": [102, 164], "my_sett": [102, 164], "my_gett": [102, 164], "mmdoc": [102, 160, 161, 162, 164], "banner": [102, 160, 161, 162, 163, 164, 174], "jpeg": [102, 103, 106, 115, 153, 160, 161, 164, 171, 175], "eq": [102, 178], "unsafe_hash": 102, "frozen": 102, "type_var_map": [102, 164], "_field": 102, "annot": [102, 160, 163, 189], "appl": [102, 153, 156, 165, 168, 171], "_types_registri": 102, "collid": 102, "obj": [102, 103, 106, 119, 128, 130], "getattributesmixin": [103, 106, 107], "audio": [103, 106, 154, 161, 163, 165, 168, 169, 187, 188, 189, 190, 191], "audiodatamixin": [103, 106, 108], "blobdatamixin": [103, 106, 109], "convertmixin": [103, 106, 111], "urifilemixin": [103, 106, 112], "featurehash": [103, 106], "featurehashmixin": [103, 106, 113], "imagedatamixin": [103, 106, 115], "mesh": [103, 106, 154, 161, 165, 168, 169, 189], "meshdatamixin": [103, 106, 116], "multimodalmixin": [103, 106, 117], "portingmixin": [103, 106, 119], "propertymixin": [103, 106, 120, 144, 146, 147], "protobufmixin": [103, 106, 121], "rich_embed": [103, 106], "colorboxembed": [103, 106, 123], "sugar": [103, 106, 182], "singletonsugarmixin": [103, 106, 125], "textdatamixin": [103, 106, 126], "videodatamixin": [103, 106, 127], "smart_union": [103, 128], "from_orm": [103, 128], "parse_fil": [103, 128], "parse_obj": [103, 128], "parse_raw": [103, 128], "schema_json": [103, 128], "update_forward_ref": [103, 128], "structvaluetyp": [103, 104, 106, 120], "basic": [103, 161, 162, 163, 169, 177, 187, 188, 189], "3d": [103, 106, 116, 154, 165, 168, 169, 189], "d1": [103, 165, 166, 167, 172, 175], "d3": [103, 166, 167, 172], "d4": [103, 166, 167], "foo": [103, 166, 181, 182, 186], "d0": [103, 166, 167, 172], "d2": [103, 166, 167, 172], "torchvis": [103, 156, 160, 167, 176], "usr": 103, "jpg": [103, 130, 153, 160, 167, 171, 173, 175, 181, 184], "resnet50": [103, 156, 160, 167, 176], "pretrain": [103, 156, 160, 167, 176], "organ": [103, 169], "charset": [103, 106, 109, 111, 126], "base64": [103, 106, 109, 111, 119, 126, 165, 189], "charact": [103, 106, 109, 111, 126, 158, 177], "regist": [103, 106, 109, 111, 126], "iana": [103, 106, 109, 111, 126], "arbitrari": [103, 106, 109, 111, 113, 126, 163, 183, 190, 191], "octet": [103, 106, 109, 111, 126], "form": [103, 106, 109, 111, 126, 128, 160, 178, 183], "rule": [103, 106, 109, 111, 126, 171, 181], "7bit": [103, 106, 109, 111, 126], "bit": [103, 106, 109, 111, 126, 153, 173, 174, 190, 191], "ascii": [103, 106, 109, 111, 126, 190, 191], "width": [103, 106, 108, 115, 118, 169, 170, 190, 191], "height": [103, 106, 115], "_valid_": [103, 106, 111, 115], "buffer": [103, 106, 111, 141, 151, 153, 165, 171, 190, 191], "effort": [103, 106, 110, 171], "image_format": [103, 106, 115], "window_shap": [103, 106, 115, 153], "stride": [103, 106, 115, 153], "as_chunk": [103, 106, 115, 116, 153], "slide": [103, 106, 115, 153], "window": [103, 106, 115, 153, 189], "view": [103, 106, 115, 153], "h": [103, 106, 115, 178], "target_s": [103, 106, 115], "denot": [103, 106, 115, 160], "vertic": [103, 106, 115, 170, 186], "horizont": [103, 106, 115, 170, 186], "patch": [103, 106, 115], "area": [103, 106, 115, 137], "outsid": [103, 106, 115], "zero": [103, 105, 106, 115, 133, 135, 136, 138, 158, 175, 190, 191], "vocab": [103, 106, 126, 158], "delimit": [103, 106, 126], "max_length": [103, 106, 126, 158], "int64": [103, 106, 126, 190, 191], "1d": [103, 106, 126, 138], "build_vocab": [103, 106, 126], "entri": [103, 106, 126, 138], "cut": [103, 106, 126, 153], "begin": [103, 106, 126, 158, 160, 188], "shorter": [103, 106, 126], "datauri": [103, 105, 106, 111, 115], "max_valu": [103, 106, 113], "1000000": [103, 106, 113], "trick": [103, 106, 113, 185], "caus": [103, 106, 113], "collis": [103, 106, 113], "overal": [103, 106, 113, 156, 159, 186], "csr_matrix": [103, 106, 113, 132, 139, 180], "bytearrai": [103, 106, 119], "basemodel": [103, 106, 122, 128, 185], "counter": [103, 106, 126], "text_field": [103, 106, 126], "pillow": [103, 106, 115, 153, 189], "header": [103, 106, 115, 130, 181], "pilimag": [103, 106, 115], "geometri": [103, 106, 116], "attr": [103, 106, 126], "only_keyfram": [103, 106, 127, 159], "keyfram": [103, 106, 127], "inv_norm": [103, 106, 118, 184], "1920": [103, 106, 118], "invers": [103, 106, 115, 118], "float32": [103, 106, 115, 118, 152, 156, 161, 167, 176, 180, 190, 191], "uint8": [103, 106, 115, 118, 161, 183], "sample_r": [103, 106, 108], "44100": [103, 106, 108], "sample_width": [103, 106, 108], "wav": [103, 106, 108, 154, 161], "mono": [103, 106, 108], "stereo": [103, 106, 108], "treat": [103, 106, 108], "frame_r": [103, 106, 127], "codec": [103, 106, 127], "h264": [103, 106, 127], "mp4": [103, 106, 127, 159], "decod": [103, 106, 127, 158], "original_channel_axi": [103, 106, 115, 156], "new_channel_axi": [103, 106, 115, 156], "move": [103, 106, 115, 163, 186], "img_mean": [103, 106, 115], "485": [103, 106, 115], "456": [103, 106, 115], "406": [103, 106, 115], "img_std": [103, 106, 115], "229": [103, 106, 115], "225": [103, 106, 115], "deviat": [103, 106, 115], "std": [103, 106, 115, 180], "train": [103, 106, 115, 162, 188], "scratch": [103, 106, 115], "calcul": [103, 106, 115], "imagenet": [103, 106, 115], "pretrian": [103, 106, 115], "grai": [103, 106, 115], "scale": [103, 106, 115, 188, 189], "black": [103, 106, 115, 160], "white": [103, 106, 115, 160, 161], "rgb": [103, 106, 115], "mnist": [103, 106, 115], "stddev": [103, 106, 115], "greyscal": [103, 106, 115], "resampl": [103, 106, 115], "dumper": [103, 106, 119], "documentproto": [103, 106, 121, 142, 171, 183], "_reference_doc": 104, "_metadata": [104, 156, 160, 190, 191], "beforehand": 105, "shell": 105, "wildcard": 105, "directori": 105, "subdirectori": 105, "rate": 105, "rb": 105, "plan": 105, "index_fil": 105, "search_fil": 105, "handler": 105, "auto": [105, 172, 180, 189], "hug": 105, "face": [105, 188], "huggingfac": 105, "load_dataset": 105, "package_refer": 105, "loading_method": 105, "html": [105, 158, 165], "univers": [110, 168], "convers": [111, 160, 168], "_propertymixin": 120, "sugari": [125, 168], "syntax": [125, 151, 160, 161, 162, 168, 174, 182, 188], "_namedscor": 128, "validationerror": 128, "_fields_set": 128, "__dict__": 128, "__fields_set__": 128, "trust": 128, "exclud": [128, 171], "deep": [128, 153, 155, 163, 166, 167, 173, 174, 188, 189], "preced": 128, "dictstrani": 128, "by_alia": 128, "skip_default": 128, "exclude_unset": 128, "exclude_default": 128, "exclude_non": [128, 171, 178], "models_as_dict": 128, "dumps_kwarg": 128, "suppli": [128, 190, 191], "unicod": [128, 190, 191], "utf8": 128, "allow_pickl": 128, "ref_templ": 128, "localn": 128, "globaln": 128, "target": [130, 138], "new_fn": 130, "removed_at": 130, "label": [130, 161, 190, 191], "deprec": 130, "old_fn_nam": 130, "_dict": 130, "fieldnam": 130, "dunderscor": 130, "referenc": 130, "referrenc": 130, "struct": [130, 190, 191], "use_uuid1": 130, "uuid": [130, 166], "mac": [130, 189], "uuid1": [130, 166], "afford": 130, "closer": 130, "uuid4": 130, "relat": [130, 156, 169, 182, 186, 188, 189], "lost": [130, 181], "mermaid_url": 130, "suffix": 130, "svg": 130, "decor": [130, 163, 186], "wb": 130, "klass": 130, "dikt": 130, "file_path": 130, "default_protocol": 130, "default_compress": 130, "docarray_fashion_mnist": 130, "gzip": [130, 171, 181, 183], "bin": [130, 183], "sparse_cosin": [131, 132, 133], "sparse_sqeuclidean": [131, 132, 133], "sparse_euclidean": [131, 132, 133], "pdist": [131, 132], "cdist": [131, 132], "x_mat": [132, 133, 135, 136, 138], "pairwis": 132, "coo_matrix": [132, 167, 173], "ndim": [132, 133, 135, 136, 139, 190, 191], "y_mat": [132, 133, 135, 136], "y": [132, 139, 169, 190, 191], "n_x": 132, "n_y": 132, "dist": 132, "j": [132, 188], "ep": [133, 135, 136, 138], "1e": [133, 135, 136, 138], "07": [133, 135, 136, 138, 156], "jitter": [133, 135, 136, 138], "divd": [133, 135, 136, 138], "binary_relev": 137, "precis": [137, 177, 181], "nonzero": [137, 190, 191], "en": 137, "wikipedia": 137, "org": [137, 158, 165], "wiki": 137, "evaluation_measures_": 137, "information_retriev": 137, "percentag": 137, "occur": 137, "hit": [137, 153], "curv": 137, "reciproc": 137, "max_rel": [137, 177], "harmon": 137, "f1": [137, 166], "discount": 137, "cumul": 137, "gain": 137, "dcg": 137, "real": [137, 153, 163, 177, 185, 187], "www": [137, 158, 165], "stanford": 137, "edu": 137, "cs276": 137, "handout": 137, "evaluationnew": 137, "pdf": [137, 165], "6309": 137, "4307": 137, "ndcg": 137, "t_rang": 138, "x_rang": 138, "2d": 138, "descend": 138, "largest": 138, "biggest": [138, 188], "x_mat_best": 138, "x_inds_best": 138, "x_ind": 138, "raise_error_if_not_arrai": 139, "tf": [139, 167, 176], "num_row": 139, "sp": [139, 167, 180], "detach": 139, "read_ndarrai": [140, 142, 143], "flush_ndarrai": [140, 142, 143], "parse_proto": [140, 142], "flush_proto": [140, 142], "representmixin": [144, 146, 148], "_reference_n": 145, "subpackag": 150, "submodul": 150, "project": [151, 152, 165, 186], "bump": 151, "minor": [151, 178], "autom": 151, "releas": [151, 186, 188], "bug": 151, "track": 151, "explain": [151, 161], "rational": [151, 160, 163], "behind": [151, 160, 163], "introduc": [151, 166, 171, 173, 185], "involv": [151, 156, 158], "Its": [151, 171, 188], "intention": 151, "undocu": 151, "backward": 151, "concept": [151, 188], "major": [151, 188], "wire": [151, 171, 188, 189], "migrat": 151, "favor": 151, "ed": [151, 171], "unschema": [151, 171], "awar": 151, "stick": 151, "archiv": 151, "acknowledg": 151, "caffe": 151, "unifi": [151, 188], "terminologi": 151, "fluent": 151, "remark": [151, 183], "30833": 152, "olleh": 152, "program": [152, 181], "ffmpeg": 152, "multimedia": 152, "pydub": 152, "manipul": [152, 188], "easi": [152, 157, 158, 161, 163, 166, 173, 174, 186, 188, 189], "librosa": 152, "music": 152, "analysi": 152, "pyaudioanalysi": 152, "signal": 152, "matplotlib": [153, 189], "255": [153, 156, 160, 165], "641": [153, 156], "resiz": [153, 168], "downsampl": 153, "upsampl": 153, "meet": [153, 189], "chain": [153, 168], "feed": [153, 186], "resnet": 153, "2489083": 153, "proc": 153, "yep": 153, "uneat": 153, "quick": [153, 165], "img": 153, "But": [153, 158, 163, 165, 171, 173, 180, 185], "nice": [153, 158, 185], "overview": [153, 166], "rich": [153, 174, 183, 188], "salienc": 153, "krusti": 153, "burger": 153, "yellow": 153, "schoolbu": 153, "intent": 153, "guess": [153, 169, 181, 190, 191], "breakdown": 153, "simpler": 153, "approach": 153, "datatyp": 153, "792": 153, "180": 153, "three": [153, 158, 159, 165, 173, 180, 188], "7585b8aa": 153, "3826": 153, "11ec": [153, 157], "bc1a": 153, "1e008a366d48": [153, 157], "h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0h8t0": 153, "simpson": 153, "hmm": 153, "whole": [153, 181, 183, 185], "overlap": [153, 174, 183], "oversampl": 153, "segment": 154, "tool": 154, "trimesh": [155, 189], "polygon": 155, "profession": 155, "commerci": 155, "uniti": 155, "blender": 155, "repeat": [155, 183, 185, 190, 191], "uniformli": 155, "easier": [155, 165, 171], "vike": 155, "glb": 155, "pictur": [155, 169, 170, 186], "depict": [155, 169, 174, 188], "jointli": [156, 163], "comfort": 156, "cleanli": 156, "individu": [156, 177], "stand": [156, 158], "relationship": [156, 163], "domain": [156, 161, 163, 188], "suppos": 156, "newspap": [156, 163], "main": [156, 185], "main_text": 156, "cast": [156, 167, 171], "7f03e397da8725aa8a2aed4a0d64f263": 156, "627c3b052b86e908b10475a4649ce49b": 156, "79e75c074aa444341baac18549930450": 156, "6861a1e3d77c3560a630dee34ba5ac7f": 156, "daili": 156, "cab4e047bc84ffb6b8b0597ff4ee0e9f": 156, "ea686d21029e4687df83a6ee31af98b2": 156, "139a5f16ab176b5c9d5088b1f2792973": 156, "f1e7527757c7dc6006fa8fa36e7b788f": 156, "2a13aee3a2ac8eadc07f43bc2dd83583": 156, "b6bcfa7000a25bd84ddcd35813c99b4c": 156, "71018fd73c13187309590e82b5255416": 156, "b6bcfa7000a25bd84ddcd35813c99b4": 156, "b335f748006204dd27bb5fa9a99a572f": 156, "7769657ae7c25227920b5ae35a2a3c31": 156, "29f1835bac77e435f00976c5cf4e97cb": 156, "bc8adb52bad51ccff3d6e7834a4b536a": 156, "29f1835bac77e435f00976c5cf4e97c": 156, "c602af33ed3f2d693a5633e53b87e19c": 156, "1ee83d2c391f078736732bb34a021587": 156, "c8fe3b8fd101bea6a4820a53d2993bdf": 156, "img_model": 156, "combine_embed": 156, "sophist": 156, "concaten": [156, 175], "1512": 156, "tackl": [156, 163], "downstream": 156, "especi": [156, 158, 181, 187], "query_pag": 156, "pear": 156, "cou": 156, "closest_match_img": 156, "closest_match_pag": 156, "5922ee1ad0dbfe707301b573f98c5939": 156, "e6266f88f6ebcb3417358440934bcf81": 156, "defaultdict": [156, 177], "1920929e": 156, "29a0e323e2e9befcc42e9823b111f90f": 156, "175e386b1aa248f9387db46341b73e05": 156, "similarli": 156, "a0f33de91bb7d53811c7cb3015cdf1b8": 156, "float64": [156, 167, 190, 191], "01911603045476573": 156, "b9c9206422e27c8a0f1b4a4e745901ec": 156, "97cbca49aeaf0ea1f609b161dc9ec934": 156, "9183813fc38f291f353b76d4125506d6": 156, "freeli": 157, "tabular": [157, 161, 165], "usernam": 157, "booker12": 157, "9012": 157, "rachel": 157, "booker": 157, "grey07": 157, "2070": 157, "laura": 157, "grei": 157, "johnson81": 157, "4081": 157, "craig": 157, "johnson": 157, "jenkins46": 157, "9346": 157, "mari": 157, "jenkin": 157, "smith79": 157, "5079": 157, "jami": 157, "smith": 157, "attempt": 157, "fail": 157, "manual": [157, 166, 167], "tmp": 157, "thing": [157, 158, 159, 171, 181, 185, 186], "english": 157, "german": 157, "hallo": 157, "welt": 157, "tag__english": 157, "tag__german": 157, "029388a4": 157, "3830": 157, "b6b2": 157, "0293968c": 157, "418de220": 157, "aad8": 157, "418dec52": 157, "inlin": [158, 165], "w3": 158, "histori": 158, "19921103": 158, "hypertext": 158, "3c128f326fbf11ec90821e008a366d49": 158, "\u0928\u092e\u0938": 158, "\u0924": 158, "\u0926": 158, "\u0928": 158, "\u092f": 158, "\u4f60\u597d\u4e16\u754c": 158, "\u3053\u3093\u306b\u3061\u306f\u4e16\u754c": 158, "\u043f\u0440\u0438\u0432\u0435\u0442": 158, "\u043c\u0438\u0440": 158, "thousand": [158, 183], "finer": 158, "5a12d7a86fbf11ec99a21e008a366d49": 158, "5a12e2346fbf11ec99a21e008a366d49": 158, "5a12e2f26fbf11ec99a21e008a366d49": 158, "5a12e3886fbf11ec99a21e008a366d49": 158, "5a12e41e6fbf11ec99a21e008a366d49": 158, "5a12e4966fbf11ec99a21e008a366d49": 158, "goodby": 158, "symbol": 158, "phrase": 158, "sentenc": [158, 163], "bonu": 158, "procedur": [158, 181, 185], "she": 158, "enter": [158, 185], "room": 158, "pride": [158, 165], "prejudic": [158, 165], "gutenberg": [158, 165], "1342": [158, 165], "txt": [158, 165], "strip": 158, "scores__jaccard": 158, "staircas": 158, "breakfast": 158, "congratul": 158, "air": 158, "ungraci": 158, "mr": 158, "bennet": 158, "alon": 158, "f47f7448709811ec960a1e008a366d49": 158, "6666666666666666": 158, "7142857142857143": 158, "imagin": [158, 185], "lyric": 158, "song": 158, "choru": 158, "song1_titl": 158, "me": [158, 188], "song1": 158, "talk": [158, 173, 186], "awai": [158, 181, 188], "anywai": [158, 181], "todai": 158, "shy": 158, "love": 158, "ok": 158, "gone": 158, "needless": 158, "odd": 158, "stumbl": 158, "slowli": 158, "life": 158, "safe": 158, "sorri": 158, "oh": 158, "yeah": 158, "plai": [158, 163, 187], "my": [158, 174, 177], "worri": [158, 174, 186], "ve": 158, "got": [158, 159, 183, 185], "song2_titl": 158, "trooper": 158, "song2": 158, "fire": 158, "musket": 158, "wait": [158, 181], "next": [158, 178, 181, 186, 189], "attack": 158, "bugl": 158, "sound": [158, 163, 174], "battlefield": 158, "win": 158, "smell": 158, "acrid": 158, "smoke": 158, "hors": 158, "breath": 158, "plung": 158, "death": 158, "he": 158, "sweat": 158, "fear": 158, "mighti": 158, "roar": 158, "russian": 158, "gun": 158, "race": 158, "toward": 158, "wall": 158, "scream": 158, "pain": 158, "comrad": 158, "fall": 158, "hurdl": 158, "lai": 158, "ground": 158, "round": 158, "far": [158, 162, 163, 174], "won": [158, 185], "fight": 158, "hi": [158, 182], "sight": 158, "trigger": [158, 188], "blow": 158, "burst": 158, "gaze": 158, "sky": 158, "numb": 158, "throat": 158, "dry": 158, "forgotten": 158, "tear": 158, "draw": 158, "groan": 158, "doc1": [158, 163, 183], "song_titl": 158, "doc2": [158, 163, 183], "bag": 158, "descriptor": 158, "build_token": 158, "token_pattern": 158, "compil": 158, "findal": 158, "bow_feature_vector": 158, "prepar": [158, 178], "n_featur": 158, "da_backend": 158, "annlite_data": 158, "find_song_name_from_song_snippet": 158, "similar_item": 158, "most_similar_doc": 158, "Will": 158, "av": [159, 189], "250": [159, 186], "176": [159, 183], "320": 159, "dim": [159, 190, 191], "176x320": 159, "infer": 159, "framer": 159, "around": [159, 181], "25fp": 159, "mov": 159, "redund": 159, "enumer": [159, 181], "60fp": 159, "60": 159, "blog": 160, "eaccc9c573c07f13b7ee8aa04a83c9eb": 160, "140540453339296": 160, "banner_tensor": 160, "transpos": 160, "unsqueez": [160, 162], "outer": 160, "innerdoc": 160, "outerdoc": 160, "feature_imag": [160, 161], "websit": [160, 161], "94de1bef2fc8010ff4fe86791a671c44": 160, "fact": [160, 161, 171], "field1": [160, 178], "field2": 160, "nois": [160, 161, 177], "bracket": [160, 178], "nonetyp": [160, 177], "accept": [160, 161, 164, 165, 177, 178], "front": 160, "deepli": 160, "nested_field1": 160, "bannerdoc": [160, 161], "columnarticl": [160, 161], "c1": [160, 174], "c2": 160, "unawar": 161, "mymultimodaldoc": 161, "avatar": 161, "Be": 161, "assign": [161, 165, 167, 173], "conflict": 161, "guarante": [161, 188], "f3b193bbe8403c3ce1599b82f941f68a": 161, "18c7ca1c829fe819250faa4914bc45c1": 161, "504": 161, "1ee7fadddc23fc72365b2069f82d4bb4": 161, "is_dataclass": 161, "mmdoc1": 161, "mmdoc2": 161, "sequel": [161, 180], "pixel": 161, "soundfx": 161, "90c744c5155c2356d27f8c91955f70f7": 161, "c9d71990088fb0d8db3c83a6bd35650d": 161, "22e27708288e70813673711c86f834e": 161, "05ad36dfb0c520027b18c582d205c176": 161, "63248": 161, "unannot": 161, "17c77b443471f9d752cbcc360174b65f": 161, "some_field": 161, "other_field": 161, "15725d705b6c8d7e99908d380d614fa5": 161, "48a84621d51d94383b86db89e64022a3": 161, "1cb5cc74f1f986876a0c4c87201b9a28": 161, "instruct": 161, "complet": [161, 175, 177, 186, 188, 189], "52d9dcca4bc30cd0ef3b82917459cd32": 161, "04edacf582c5aa7b0bcfcf3d3e0a57bf": 161, "f5e9f105162e26d1d42ef7e2d363095a": 161, "d7d0b506f690890113e6a601ef80f8c6": 161, "75a3df4c26498d338589d2b2c20e156": 161, "cb1df29a384a6d39aa81e5af93316c4d": 161, "65cce8eb564f9ce136ff693b8ecb8f53": 161, "4dc4497d608b4f96094711e90cfb8078": 161, "f7b3aaefeab73af18f8372a594405b46": 161, "encourag": 161, "think": [161, 174], "m_r": 161, "assert": [161, 164], "mutabl": 161, "builtin": 161, "great": 161, "scientist": [161, 179, 185, 187, 188, 189], "intuit": [161, 163, 166, 185, 188, 189], "straightforward": [161, 163], "aka": [161, 163], "nutshel": [162, 163, 179, 185], "develop": [162, 186, 188, 189], "openai": 162, "contrast": 162, "varieti": 162, "pil": 162, "is_avail": 162, "vit": 162, "diagram": 162, "dog": [162, 163], "cat": [162, 163], "no_grad": 162, "image_featur": 162, "encode_imag": 162, "text_featur": 162, "encode_text": 162, "3285e": 162, "6554e": 162, "3394e": 162, "5605e": 162, "2397e": 162, "0547": 162, "0061": 162, "0495": 162, "6638": 162, "1281": 162, "4950": 162, "1447": 162, "0225": 162, "2909": 162, "4472": 162, "3420": 162, "1798": 162, "1981": 162, "2040": 162, "1533": 162, "4514": 162, "5664": 162, "0596": 162, "m1": [162, 164], "m2": [162, 164], "m3": 162, "scalabl": [162, 186, 188], "microservic": [162, 171, 183, 186, 188], "extrem": [162, 170, 188], "touch": 162, "v": [162, 180, 186, 188, 189, 191], "clip_client": 162, "demo": 162, "ca": 162, "51000": 162, "3137": 162, "1458": 162, "303": 162, "8877": 162, "2546": 162, "11365": 162, "05466": 162, "005997": 162, "0498": 162, "663": 162, "1274": 162, "4944": 162, "1442": 162, "02275": 162, "291": 162, "4468": 162, "3416": 162, "1985": 162, "204": 162, "1534": 162, "4507": 162, "0598": 162, "wparticl": 163, "headlin": 163, "flight": 163, "pet": 163, "pick": 163, "seat": 163, "anim": 163, "calm": 163, "nathan": 163, "diller": 163, "travel": 163, "destin": [163, 174], "beauti": 163, "spend": 163, "mixtur": 163, "card": 163, "washington": 163, "bbc": 163, "transfer": [163, 183, 185, 188, 189], "seem": [163, 188], "doc0": 163, "Or": [163, 186], "redesign": [163, 188], "why": [163, 171, 187, 189], "implicit": 163, "answer": [163, 181], "trivial": 163, "eleg": 163, "translat": 164, "bde1ab74306c2f63188069879e3945ac": 164, "cd594a6870a8921d7a9c6b0ec764251d": 164, "xff": 164, "xd8": 164, "xe0": 164, "x00": [164, 171, 183], "x10jfif": 164, "x01": [164, 171, 183], "x0": 164, "56810": 164, "recov": 164, "invok": 164, "im": 164, "unset": 165, "among": 165, "spmatrix": [165, 167, 169], "amp": 165, "intermedi": [165, 171, 183, 188], "mutual": 165, "exclus": 165, "7623808c6d6211ec9cf21e008a366d49": 165, "reset": 165, "grab": 165, "b4d675466d6211ecae8d1e008a366d49": 165, "2808eeb86d6311ecaddb1e008a366d49": 165, "ebook": 165, "jane": 165, "austen": 165, "anywher": 165, "wor": 165, "ivborw0kggoaaaansuheugaaaaua": 165, "aaafcayaaacnbyblaaaaheleqvqi12p4": 165, "w38giaxdibke0dhxgljnbaao": 165, "9txl0y4ohwaaaabjru5erkjggg": 165, "load_uri_to_": 165, "load_uri_to_datauri": 165, "5dd542406d3f11eca3241e008a366d49": 166, "hex": 166, "though": [166, 180], "forget": [166, 188], "autocomplet": 166, "a14effee6d3e11ec8bde1e008a366d49": 166, "a14f00986d3e11ec8bde1e008a366d49": 166, "a14f01a66d3e11ec8bde1e008a366d49": 166, "a14f023c6d3e11ec8bde1e008a366d49": 166, "comfortab": 166, "idiomat": 166, "googl": [166, 183, 187, 188, 189, 190, 191], "colab": [166, 172, 183, 188, 189], "prettifi": 166, "caught": 166, "f957e84a6d4311ecbea21e008a366d49": 166, "silent": 166, "attributeerror": 166, "4479829968": 166, "piec": 167, "d5": 167, "from_dens": 167, "unlik": [167, 171], "assig": 167, "stai": [167, 188, 189], "smarter": 167, "loop": [167, 171, 173, 180, 181], "00003": 167, "ten": [167, 177], "63a39fa86d6911eca6fa1e008a366d49": 167, "63a39aee6d6911eca6fa1e008a366d49": 167, "63a399d66d6911eca6fa1e008a366d49": 167, "63a39b346d6911eca6fa1e008a366d49": 167, "63a3999a6d6911eca6fa1e008a366d49": 167, "63a39a626d6911eca6fa1e008a366d49": 167, "63a397ba6d6911eca6fa1e008a366d49": 167, "63a39a1c6d6911eca6fa1e008a366d49": 167, "63a39ab26d6911eca6fa1e008a366d49": 167, "63a399046d6911eca6fa1e008a366d49": 167, "63a399546d6911eca6fa1e008a366d49": 167, "apple1": 168, "equival": 168, "hexdigest": [169, 190, 191], "raw": [169, 190, 191], "depth": [169, 170, 174, 185, 190, 191], "cross": [169, 188, 189, 190, 191], "mime": [169, 190, 191], "coordin": [169, 190, 191], "crop": [169, 190, 191], "timestamp": [169, 178, 190, 191], "comprehens": [169, 188, 189], "categor": 169, "comprehend": 169, "scienc": [169, 189], "commun": [169, 177, 189], "7f907d786d6c11ec840a1e008a366d49": 170, "7f907c606d6c11ec840a1e008a366d49": 170, "7f907cba6d6c11ec840a1e008a366d49": 170, "7f907ab26d6c11ec840a1e008a366d49": 170, "7f907c106d6c11ec840a1e008a366d49": 170, "crucial": [170, 171, 183], "fortun": 170, "thank": [170, 173], "shown": [170, 187], "wherea": [170, 171, 188], "receiv": [171, 177, 185], "compact": [171, 173, 183], "reader": [171, 174, 185], "wonder": 171, "aren": 171, "nonetheless": [171, 183], "decis": [171, 188], "sake": [171, 174], "clariti": [171, 174], "webservic": [171, 183, 185, 189], "fastapi": [171, 183, 184, 189], "d_as_json": 171, "641032d677b311ecb67a1e008a366d49": 171, "null": [171, 183], "db66bc2e77b311eca5f51e008a366d49": 171, "mimetyp": 171, "aqaaaaaaaaacaaaaaaaaaamaaaaaaaaa": 171, "i8": 171, "clsname": 171, "appreci": [171, 188], "uppercas": 171, "cdbc4f7a77b411ec96ad1e008a366d49": 171, "ey": 171, "handcraft": 171, "smoothli": 171, "encount": 171, "thumb": 171, "friend": [171, 183, 185, 188], "upset": 171, "ever": [171, 185, 188], "probabl": [171, 173, 174, 185, 189], "d_byte": 171, "d_r": 171, "x80": [171, 183], "x03cdocarrai": [171, 183], "ndocument": [171, 183], "nq": [171, 183], "x81q": [171, 183], "x02x": 171, "x05": [171, 183], "x00_dataq": [171, 183], "ndocumentdata": 171, "x04": [171, 183], "x06": 171, "x0e": 171, "x00_reference_docq": 171, "x07h": 171, "x01x": 171, "x02": [171, 183], "x00idq": 171, "x08x": 171, "x005d29a9f26d5911ec88d51e008a366d49q": 171, "tx": 171, "x00parent_": 171, "3644c0fa6d5a11ecbb081e008a366d49": 171, "110": [171, 177], "666": 171, "spooki": 171, "deseri": [171, 183], "protcol": [171, 183], "ganjzg9jyxjyyxkuzg9jdw1lbnqkrg9jdw1lbnqkcqapgxebfxecwauaaabfzgf0yxedy2rvy2fycmf5lmrvy3vtzw50lmrhdgekrg9jdw1lbnreyxrhcneekyfxbx1xbihydgaaaf9yzwzlcmvuy2vfzg9jcqdoavgcaaaaawrxcfggaaaazmzjnty3odg3mzaymtfly2e4njmxztawogeznjzkndlxcvgjaaaacgfyzw50x2lkcqpowasaaabncmfudwxhcml0exeltlgjaaaaywrqywnlbmn5cqxowayaaabidwzmzxjxdu5ybaaaagjsb2jxdk5ycqaaag1pbwvfdhlwzxepwaoaaab0zxh0l3bsywlucrbybaaaahrlehrxevgfaaaaagvsbg9xelghaaaay29udgvudhettlggaaaad2vpz2h0crrowamaaab1cmlxfu5ybaaaahrhz3nxfk5ybgaaag9mznnldhextlgiaaaabg9jyxrpb25xge5ycqaaagvtymvkzgluz3ezxxeakesbswjla2vycaaaag1vzgfsaxr5crtowasaaabldmfsdwf0aw9uc3ectlggaaaac2nvcmvzcr1owayaaabjahvua3nxhk5ybwaaag1hdgnozxnxh051ynnilg": 171, "156": 171, "d_as_dict": 171, "5596c84c77b711ecafed1e008a366d49": 171, "d_proto": 171, "d66463b46d6a11ecbf891e008a366d49": 171, "e4b215106d6a11ecb28b1e008a366d49": 171, "hundr": 171, "ineffici": [171, 190, 191], "tast": 173, "element_selector": 173, "attribute_selector": 173, "scores__cosine__valu": 173, "8d41ce5c6f0d11eca2181e008a366d49": 173, "8d41cfa66f0d11eca2181e008a366d49": 173, "8d41cff66f0d11eca2181e008a366d49": 173, "db60ab8a6f0d11ec99511e008a366d49": 173, "db60abda6f0d11ec99511e008a366d49": 173, "db60c12e6f0d11ec99511e008a366d49": 173, "db60c1886f0d11ec99511e008a366d49": 173, "db60c4266f0d11ec99511e008a366d49": 173, "db60c46c6f0d11ec99511e008a366d49": 173, "285db6586f0e11ec99401e008a366d49": 173, "285db6b26f0e11ec99401e008a366d49": 173, "285dbff46f0e11ec99401e008a366d49": 173, "285dc0586f0e11ec99401e008a366d49": 173, "285db3606f0e11ec99401e008a366d49": 173, "285dcc746f0e11ec99401e008a366d49": 173, "285dccce6f0e11ec99401e008a366d49": 173, "285dce0e6f0e11ec99401e008a366d49": 173, "285dce5e6f0e11ec99401e008a366d49": 173, "285db4fa6f0e11ec99401e008a366d49": 173, "285dcf946f0e11ec99401e008a366d49": 173, "285dcfda6f0e11ec99401e008a366d49": 173, "285dd1066f0e11ec99401e008a366d49": 173, "285dd16a6f0e11ec99401e008a366d49": 173, "285db55e6f0e11ec99401e008a366d49": 173, "shot": [173, 183], "095cd76a6f0f11ec82211e008a366d49": 173, "095cd8d26f0f11ec82211e008a366d49": 173, "095cd92c6f0f11ec82211e008a366d49": 173, "coo": 173, "matric": 173, "sp_emb": 173, "key1": 173, "tags__key1": 173, "5164d792709a11ec9ae71e008a366d49": 173, "5164d986709a11ec9ae71e008a366d49": 173, "5164d922709a11ec9ae71e008a366d49": 173, "006942970007385196": 173, "48303283924326845": 173, "3859268166910603": 173, "220446049250313e": 173, "quickli": [173, 175, 183], "favorit": [174, 188], "ask": 174, "coin": 174, "exploit": 174, "routin": [174, 188], "a04633546e6211ec8ad31e008a366d49": 174, "af7923406e6211ecbc811e008a366d49": 174, "ellipsi": 174, "3m": 174, "excit": [174, 179], "834f14666e6511ec8e331e008a366d49": 174, "834f32846e6511ec8e331e008a366d49": 174, "4883468432": 174, "7e27fa246e6611ec9a441e008a366d49": 174, "7e27fb826e6611ec9a441e008a366d49": 174, "99851c7a6e6611ecba351e008a366d49": 174, "4874066256": 174, "No": [174, 179, 183, 189], "techniqu": [174, 181], "4513619088": 174, "remain": [174, 179], "path1": 174, "path2": 174, "path3": 174, "rout": 174, "mc": 174, "assigend": 174, "2f94c1426ee511ecbb491e008a366d49": 174, "2f94cd9a6ee511ecbb491e008a366d49": 174, "2f94cdfe6ee511ecbb491e008a366d49": 174, "2f94c4086ee511ecbb491e008a366d49": 174, "2f94c46c6ee511ecbb491e008a366d49": 174, "circl": 174, "intend": 174, "4912623312": 174, "4905929552": 174, "4913359824": 174, "deeper": 174, "ye": [174, 181], "liter": 174, "anymor": 174, "b_da": 174, "4887691536": 174, "4887691600": 174, "4887691408": 174, "232": 174, "categori": 174, "rv": 174, "4869273936": 174, "4876081680": 174, "4876735056": 174, "spoiler": 174, "alert": 174, "4453362704": 175, "4446140816": 175, "4866772176": 175, "da3": 175, "5024988176": 175, "4525853328": 175, "4452802192": 175, "afterward": [175, 183], "surpris": 175, "authent": 175, "mention": [175, 185], "glob": 175, "da_jpg": 175, "da_png": 175, "da_al": 175, "astyp": [176, 180], "mlp": 176, "onnx": [176, 188, 189], "nn": [176, 189], "linear": 176, "in_featur": 176, "out_featur": 176, "relu": 176, "preliminari": 176, "cli": 176, "do_constant_fold": 176, "constant": [176, 183, 188], "fold": 176, "input_nam": 176, "output_nam": 176, "dynamic_ax": 176, "ax": 176, "inferencesess": 176, "onnxruntim": 176, "0506": 176, "0015": 176, "1154": 176, "1630": 176, "2376": 176, "0576": 176, "4109": 176, "0052": 176, "0027": 176, "0800": 176, "0928": 176, "1326": 176, "2256": 176, "1649": 176, "0435": 176, "2312": 176, "0068": 176, "0991": 176, "0767": 176, "0501": 176, "1393": 176, "0965": 176, "2062": 176, "my_text_model": 176, "da_predict": 177, "da_groundtruth": 177, "imperfect": 177, "predict": 177, "fake": 177, "recogn": 177, "p_da": 177, "g_da": 177, "42dc84b26fab11ecbc181e008a366d49": 177, "42dc98086fab11ecbc181e008a366d49": 177, "badli": 177, "mongodb": 178, "21": 178, "uom": 178, "paper": 178, "planner": 178, "75": 178, "postcard": 178, "45": 178, "operator1": 178, "value1": 178, "dunder": 178, "tags__timestamp": 178, "substitut": 178, "curli": 178, "ne": 178, "gt": 178, "greater": [178, 190, 191], "gte": 178, "lt": 178, "nin": 178, "regex": 178, "pprint": 178, "pretti": [178, 184, 187, 189], "92aee5d665d0c4dd34db10d83642ad": 178, "1a9d2139b02bc1c7842ecda94b347889": 178, "tags__h": 178, "4045a9659875fd1299e482d710753de3": 178, "cf7691c445220b94b88ff116911bad24": 178, "tags__w": 178, "44c6a4b18eaa005c6dbe15a28a32ebc": 178, "join": [178, 181], "claus": 178, "22985b71b6d483c31cbe507ed4d02bd1": 178, "a071faf19feac5809642e3afcd3a5878": 178, "411ecc70a71a3f00fc3259bf08c239d1": 178, "greatli": [179, 188, 189], "acceler": [179, 188, 189], "accpet": 180, "one_million_doc": 180, "rh": 180, "lh": 180, "20000000298023224": 180, "5620499849319458": 180, "6763054132461548": 180, "allevi": 180, "oom": 180, "benchmark": [180, 183, 188], "1_000_000": 180, "768": 180, "18": 180, "dev": [180, 189], "1_000": 180, "97": 180, "inter": 181, "naiv": 181, "popular": 181, "charm": 181, "6000": 181, "6016": 181, "signific": 181, "tip": 181, "happen": 181, "peopl": [181, 186, 188], "told": 181, "whatev": 181, "pipelin": 181, "1024": 181, "question": 181, "jump": 181, "whiteboard": 181, "144": 181, "rather": 181, "btw": 181, "immedid": 181, "cv": 181, "inevit": 181, "domin": 181, "476": 181, "326": 181, "shed": 181, "light": 181, "mindset": 181, "potenti": [181, 185], "gen": 181, "_head": 181, "_get_chunk": 181, "_batch": 181, "_to_stream_byt": 181, "num_doc_in_chunk": 181, "_tail": 181, "hubbl": 181, "v2": 181, "rpc": 181, "artifact": 181, "12345": [182, 186], "alex": 182, "laptop": [182, 183], "coquitts7": 182, "wide": [182, 183], "netloc": 182, "websocket": [182, 186], "jinhub": 182, "55566": 182, "8081": 182, "porcess": 182, "anytim": [183, 188, 189], "abil": 183, "a677577877b611eca3811e008a366d49": 183, "a67758f477b611eca3811e008a366d49": 183, "da_r": 183, "descrbi": 183, "x03": 183, "cdocarrai": 183, "portabl": [183, 188], "insecur": 183, "2gb": 183, "bz2": 183, "lzma": 183, "zlib": 183, "jan": 183, "2022": 183, "interpret": 183, "argu": 183, "realist": 183, "unreal": 183, "rel": 183, "doc1_byt": 183, "doc2_byt": 183, "uint64": [183, 190, 191], "uint32": [183, 190, 191], "dock_byt": 183, "dock": 183, "da_rec": 183, "simplifi": [183, 189], "consumpt": [183, 188], "da_gener": 183, "xxxl": 183, "nut": 183, "d_str": 183, "bcjngebawhuaaad": 183, "iw": 183, "uqdpl9udnsfvomzb8m7skigrkntiyotqynzmwmzexzwnim2i1mwuwmdhhmzy2zdq5mgaep2findiahd9imtgyab0vnwuyab0fytiahh9myaadp2mzyzyahd9jodayab0fzdiaht9kmtzkaabqnjzkndkaaaaa": 183, "2571b8b66e4d11ec9f271e008a366d49": 183, "2571ba466e4d11ec9f271e008a366d49": 183, "ae55782a6e4d11ec803c1e008a366d49": 183, "ae557a146e4d11ec803c1e008a366d49": 183, "43cb93b26e4e11ec8b731e008a366d49": 183, "43cb95746e4e11ec8b731e008a366d49": 183, "heavylift": 183, "myda123": 183, "analyz": 183, "colleagu": 183, "4gb": 183, "unchang": 183, "visualis": 184, "stori": [185, 188], "although": [185, 188], "happi": 185, "brainfuck": 185, "isinst": 185, "web": 185, "fundament": [185, 188], "openapi": [185, 189], "ref": 185, "hint": [185, 189], "create_item": 185, "create_arrai": 185, "starlett": 185, "testclient": 185, "422": 185, "loc": 185, "msg": 185, "type_error": 185, "reject": 185, "meaningless": 185, "response_model": 185, "idonli": 185, "get_item_no_embed": 185, "065a5548756211ecaa8d1e008a366d49": 185, "declar": 185, "idandmatch": 185, "get_match": 185, "get_match_id_onli": 185, "unlimit": 185, "ef82e4f4756411ecb2c01e008a366d49": 185, "ef82e6d4756411ecb2c01e008a366d49": 185, "ef82e760756411ecb2c01e008a366d49": 185, "ef82e7ec756411ecb2c01e008a366d49": 185, "didn": 185, "degre": 185, "idmatch": 185, "response_model_exclude_non": 185, "3da6383e756511ecb7cb1e008a366d49": 185, "3da63a14756511ecb7cb1e008a366d49": 185, "3da6392e756511ecb7cb1e008a366d49": 185, "3da63b72756511ecb7cb1e008a366d49": 185, "3da639ce756511ecb7cb1e008a366d49": 185, "3da63a5a756511ecb7cb1e008a366d49": 185, "3da63ae6756511ecb7cb1e008a366d49": 185, "3da63aa0756511ecb7cb1e008a366d49": 185, "3da63b2c756511ecb7cb1e008a366d49": 185, "3da63988756511ecb7cb1e008a366d49": 185, "focus": [186, 188], "journei": 186, "equip": 186, "independ": [186, 188], "termin": [186, 187], "preproc": 186, "slightli": 186, "myexecutor": 186, "staticmethod": 186, "26202": 186, "57050": 186, "privat": 186, "102": 186, "84": 186, "172": 186, "88": 186, "05": 186, "eta": 186, "80": 186, "show_progressbar": 186, "throughput": 186, "mp0pe477": 186, "accomplish": 186, "littl": 186, "stage": 187, "demonstr": 187, "cell": 187, "richer": 187, "broken": 187, "emul": 187, "unstructur": [188, 189], "media": 188, "toolkit": 188, "jupyterlab": 188, "happili": 188, "maxim": 188, "de": 188, "filetyp": 188, "haven": 188, "unfair": 188, "dedic": 188, "vision": 188, "coupl": 188, "hf": 188, "temporarili": 188, "resid": 188, "oppos": 188, "physic": 188, "static": 188, "occasion": 188, "precompil": 188, "contigu": 188, "particl": 188, "crunch": 188, "awkward": 188, "ak": 188, "toytim": 188, "timecontext": 188, "100_000": 188, "ak_arrai": 188, "from_it": 188, "004": 188, "031": 188, "ago": 188, "perspect": 188, "numer": 188, "throw": 188, "boost": 188, "usabl": 188, "futur": 188, "comparison": [188, 189], "100k": 188, "repetit": 188, "revis": 188, "realiz": 188, "due": 188, "deliber": 188, "constraint": 188, "door": 189, "foundat": 189, "dall": 189, "discoart": 189, "powerhous": 189, "versatil": 189, "reliabl": 189, "pycharm": 189, "altern": 189, "linux": 189, "conda": 189, "forg": 189, "seral": 189, "uvicorn": 189, "demand": 189, "reproduc": 189, "__version__": 189, "ship": 189, "vf": 189, "bootcamp": 189, "slack": 189, "chat": 189, "discuss": 189, "tuesdai": 189, "month": 189, "zoom": 189, "calendar": 189, "ical": 189, "youtub": 189, "subscrib": 189, "apach": 189, "hire": 189, "quantiz": [190, 191], "cls_name": [190, 191], "java": [190, 191], "int32": [190, 191], "sint32": [190, 191], "bignum": [190, 191], "fixnum": [190, 191], "sint64": [190, 191], "uint": [190, 191], "ulong": [190, 191], "sign": [190, 191], "fixed32": [190, 191], "28": [190, 191], "fixed64": [190, 191], "eight": [190, 191], "56": [190, 191], "sfixed32": [190, 191], "sfixed64": [190, 191], "trueclass": [190, 191], "falseclass": [190, 191], "bytestr": [190, 191], "8bit": [190, 191], "cd": 191, "pwd": 191, "jinaai": 191, "protogen": 191}, "objects": {"": [[12, 0, 0, "-", "docarray"]], "docarray": [[13, 0, 0, "-", "array"], [98, 0, 0, "-", "base"], [99, 0, 0, "-", "dataclasses"], [103, 0, 0, "-", "document"], [130, 0, 0, "-", "helper"], [131, 0, 0, "-", "math"], [140, 0, 0, "-", "proto"], [144, 0, 0, "-", "score"], [149, 0, 0, "-", "typing"]], "docarray.array": [[14, 0, 0, "-", "annlite"], [15, 0, 0, "-", "base"], [16, 0, 0, "-", "chunk"], [17, 0, 0, "-", "document"], [18, 0, 0, "-", "elastic"], [19, 0, 0, "-", "match"], [20, 0, 0, "-", "memory"], [21, 0, 0, "-", "mixins"], [53, 0, 0, "-", "qdrant"], [54, 0, 0, "-", "queryset"], [57, 0, 0, "-", "sqlite"], [58, 0, 0, "-", "storage"], [97, 0, 0, "-", "weaviate"]], "docarray.array.annlite": [[14, 1, 1, "", "AnnliteConfig"], [14, 1, 1, "", "DocumentArrayAnnlite"]], "docarray.array.annlite.AnnliteConfig": [[14, 2, 1, "", "columns"], [14, 2, 1, "", "data_path"], [14, 2, 1, "", "ef_construction"], [14, 2, 1, "", "ef_search"], [14, 2, 1, "", "max_connection"], [14, 2, 1, "", "metric"], [14, 2, 1, "", "n_dim"], [14, 2, 1, "", "serialize_config"]], "docarray.array.annlite.DocumentArrayAnnlite": [[14, 2, 1, "", "TYPE_MAP"], [14, 3, 1, "", "append"], [14, 3, 1, "", "apply"], [14, 3, 1, "", "apply_batch"], [14, 4, 1, "", "auth_token"], [14, 3, 1, "", "batch"], [14, 3, 1, "", "batch_ids"], [14, 4, 1, "", "blobs"], [14, 3, 1, "", "clear"], [14, 4, 1, "", "contents"], [14, 3, 1, "", "count"], [14, 3, 1, "", "dataloader"], [14, 3, 1, "", "embed"], [14, 4, 1, "", "embeddings"], [14, 3, 1, "", "empty"], [14, 3, 1, "", "evaluate"], [14, 3, 1, "", "extend"], [14, 3, 1, "", "find"], [14, 3, 1, "", "flatten"], [14, 3, 1, "", "from_base64"], [14, 3, 1, "", "from_bytes"], [14, 3, 1, "", "from_csv"], [14, 3, 1, "", "from_dataframe"], [14, 3, 1, "", "from_dict"], [14, 3, 1, "", "from_files"], [14, 3, 1, "", "from_huggingface_datasets"], [14, 3, 1, "", "from_json"], [14, 3, 1, "", "from_lines"], [14, 3, 1, "", "from_list"], [14, 3, 1, "", "from_ndarray"], [14, 3, 1, "", "from_ndjson"], [14, 3, 1, "", "from_protobuf"], [14, 3, 1, "", "from_pydantic_model"], [14, 3, 1, "", "from_strawberry_type"], [14, 3, 1, "", "get_json_schema"], [14, 3, 1, "", "get_vocabulary"], [14, 3, 1, "", "index"], [14, 3, 1, "", "insert"], [14, 3, 1, "", "load"], [14, 3, 1, "", "load_binary"], [14, 3, 1, "", "load_csv"], [14, 3, 1, "", "load_json"], [14, 3, 1, "", "map"], [14, 3, 1, "", "map_batch"], [14, 3, 1, "", "match"], [14, 3, 1, "", "plot_embeddings"], [14, 3, 1, "", "plot_image_sprites"], [14, 3, 1, "", "pop"], [14, 3, 1, "", "post"], [14, 3, 1, "", "pull"], [14, 3, 1, "", "push"], [14, 3, 1, "", "reduce"], [14, 3, 1, "", "reduce_all"], [14, 3, 1, "", "remove"], [14, 3, 1, "", "reverse"], [14, 3, 1, "", "sample"], [14, 3, 1, "", "save"], [14, 3, 1, "", "save_binary"], [14, 3, 1, "", "save_csv"], [14, 3, 1, "", "save_embeddings_csv"], [14, 3, 1, "", "save_gif"], [14, 3, 1, "", "save_json"], [14, 3, 1, "", "shuffle"], [14, 3, 1, "", "split_by_tag"], [14, 3, 1, "", "summary"], [14, 4, 1, "", "tensors"], [14, 4, 1, "", "texts"], [14, 3, 1, "", "to_base64"], [14, 3, 1, "", "to_bytes"], [14, 3, 1, "", "to_dataframe"], [14, 3, 1, "", "to_dict"], [14, 3, 1, "", "to_json"], [14, 3, 1, "", "to_list"], [14, 3, 1, "", "to_protobuf"], [14, 3, 1, "", "to_pydantic_model"], [14, 3, 1, "", "to_strawberry_type"], [14, 3, 1, "", "traverse"], [14, 3, 1, "", "traverse_flat"], [14, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.base": [[15, 1, 1, "", "BaseDocumentArray"]], "docarray.array.base.BaseDocumentArray": [[15, 3, 1, "", "append"], [15, 3, 1, "", "clear"], [15, 3, 1, "", "count"], [15, 3, 1, "", "extend"], [15, 3, 1, "", "index"], [15, 3, 1, "", "insert"], [15, 3, 1, "", "pop"], [15, 3, 1, "", "remove"], [15, 3, 1, "", "reverse"]], "docarray.array.chunk": [[16, 1, 1, "", "ChunkArray"]], "docarray.array.chunk.ChunkArray": [[16, 2, 1, "", "TYPE_MAP"], [16, 4, 1, "", "adjacency"], [16, 3, 1, "", "append"], [16, 3, 1, "", "apply"], [16, 3, 1, "", "apply_batch"], [16, 4, 1, "", "auth_token"], [16, 3, 1, "", "batch"], [16, 3, 1, "", "batch_ids"], [16, 4, 1, "", "blobs"], [16, 3, 1, "", "clear"], [16, 4, 1, "", "contents"], [16, 3, 1, "", "count"], [16, 3, 1, "", "dataloader"], [16, 3, 1, "", "embed"], [16, 4, 1, "", "embeddings"], [16, 3, 1, "", "empty"], [16, 3, 1, "", "evaluate"], [16, 3, 1, "", "extend"], [16, 3, 1, "", "find"], [16, 3, 1, "", "flatten"], [16, 3, 1, "", "from_base64"], [16, 3, 1, "", "from_bytes"], [16, 3, 1, "", "from_csv"], [16, 3, 1, "", "from_dataframe"], [16, 3, 1, "", "from_dict"], [16, 3, 1, "", "from_files"], [16, 3, 1, "", "from_huggingface_datasets"], [16, 3, 1, "", "from_json"], [16, 3, 1, "", "from_lines"], [16, 3, 1, "", "from_list"], [16, 3, 1, "", "from_ndarray"], [16, 3, 1, "", "from_ndjson"], [16, 3, 1, "", "from_protobuf"], [16, 3, 1, "", "from_pydantic_model"], [16, 3, 1, "", "from_strawberry_type"], [16, 3, 1, "", "get_json_schema"], [16, 3, 1, "", "get_vocabulary"], [16, 4, 1, "", "granularity"], [16, 3, 1, "", "index"], [16, 3, 1, "", "insert"], [16, 3, 1, "", "load"], [16, 3, 1, "", "load_binary"], [16, 3, 1, "", "load_csv"], [16, 3, 1, "", "load_json"], [16, 3, 1, "", "map"], [16, 3, 1, "", "map_batch"], [16, 3, 1, "", "match"], [16, 3, 1, "", "plot_embeddings"], [16, 3, 1, "", "plot_image_sprites"], [16, 3, 1, "", "pop"], [16, 3, 1, "", "post"], [16, 3, 1, "", "pull"], [16, 3, 1, "", "push"], [16, 3, 1, "", "reduce"], [16, 3, 1, "", "reduce_all"], [16, 4, 1, "", "reference_doc"], [16, 3, 1, "", "remove"], [16, 3, 1, "", "reverse"], [16, 3, 1, "", "sample"], [16, 3, 1, "", "save"], [16, 3, 1, "", "save_binary"], [16, 3, 1, "", "save_csv"], [16, 3, 1, "", "save_embeddings_csv"], [16, 3, 1, "", "save_gif"], [16, 3, 1, "", "save_json"], [16, 3, 1, "", "shuffle"], [16, 3, 1, "", "split_by_tag"], [16, 3, 1, "", "summary"], [16, 4, 1, "", "tensors"], [16, 4, 1, "", "texts"], [16, 3, 1, "", "to_base64"], [16, 3, 1, "", "to_bytes"], [16, 3, 1, "", "to_dataframe"], [16, 3, 1, "", "to_dict"], [16, 3, 1, "", "to_json"], [16, 3, 1, "", "to_list"], [16, 3, 1, "", "to_protobuf"], [16, 3, 1, "", "to_pydantic_model"], [16, 3, 1, "", "to_strawberry_type"], [16, 3, 1, "", "traverse"], [16, 3, 1, "", "traverse_flat"], [16, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.document": [[17, 1, 1, "", "DocumentArray"]], "docarray.array.document.DocumentArray": [[17, 3, 1, "", "append"], [17, 3, 1, "", "apply"], [17, 3, 1, "", "apply_batch"], [17, 4, 1, "", "auth_token"], [17, 3, 1, "", "batch"], [17, 3, 1, "", "batch_ids"], [17, 4, 1, "", "blobs"], [17, 3, 1, "", "clear"], [17, 4, 1, "", "contents"], [17, 3, 1, "", "count"], [17, 3, 1, "", "dataloader"], [17, 3, 1, "", "embed"], [17, 4, 1, "", "embeddings"], [17, 3, 1, "", "empty"], [17, 3, 1, "", "evaluate"], [17, 3, 1, "", "extend"], [17, 3, 1, "", "find"], [17, 3, 1, "", "flatten"], [17, 3, 1, "", "from_base64"], [17, 3, 1, "", "from_bytes"], [17, 3, 1, "", "from_csv"], [17, 3, 1, "", "from_dataframe"], [17, 3, 1, "", "from_dict"], [17, 3, 1, "", "from_files"], [17, 3, 1, "", "from_huggingface_datasets"], [17, 3, 1, "", "from_json"], [17, 3, 1, "", "from_lines"], [17, 3, 1, "", "from_list"], [17, 3, 1, "", "from_ndarray"], [17, 3, 1, "", "from_ndjson"], [17, 3, 1, "", "from_protobuf"], [17, 3, 1, "", "from_pydantic_model"], [17, 3, 1, "", "from_strawberry_type"], [17, 3, 1, "", "get_json_schema"], [17, 3, 1, "", "get_vocabulary"], [17, 3, 1, "", "index"], [17, 3, 1, "", "insert"], [17, 3, 1, "", "load"], [17, 3, 1, "", "load_binary"], [17, 3, 1, "", "load_csv"], [17, 3, 1, "", "load_json"], [17, 3, 1, "", "map"], [17, 3, 1, "", "map_batch"], [17, 3, 1, "", "match"], [17, 3, 1, "", "plot_embeddings"], [17, 3, 1, "", "plot_image_sprites"], [17, 3, 1, "", "pop"], [17, 3, 1, "", "post"], [17, 3, 1, "", "pull"], [17, 3, 1, "", "push"], [17, 3, 1, "", "reduce"], [17, 3, 1, "", "reduce_all"], [17, 3, 1, "", "remove"], [17, 3, 1, "", "reverse"], [17, 3, 1, "", "sample"], [17, 3, 1, "", "save"], [17, 3, 1, "", "save_binary"], [17, 3, 1, "", "save_csv"], [17, 3, 1, "", "save_embeddings_csv"], [17, 3, 1, "", "save_gif"], [17, 3, 1, "", "save_json"], [17, 3, 1, "", "shuffle"], [17, 3, 1, "", "split_by_tag"], [17, 3, 1, "", "summary"], [17, 4, 1, "", "tensors"], [17, 4, 1, "", "texts"], [17, 3, 1, "", "to_base64"], [17, 3, 1, "", "to_bytes"], [17, 3, 1, "", "to_dataframe"], [17, 3, 1, "", "to_dict"], [17, 3, 1, "", "to_json"], [17, 3, 1, "", "to_list"], [17, 3, 1, "", "to_protobuf"], [17, 3, 1, "", "to_pydantic_model"], [17, 3, 1, "", "to_strawberry_type"], [17, 3, 1, "", "traverse"], [17, 3, 1, "", "traverse_flat"], [17, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.elastic": [[18, 1, 1, "", "DocumentArrayElastic"], [18, 1, 1, "", "ElasticConfig"]], "docarray.array.elastic.DocumentArrayElastic": [[18, 2, 1, "", "MAX_ES_RETURNED_DOCS"], [18, 2, 1, "", "TYPE_MAP"], [18, 3, 1, "", "append"], [18, 3, 1, "", "apply"], [18, 3, 1, "", "apply_batch"], [18, 4, 1, "", "auth_token"], [18, 3, 1, "", "batch"], [18, 3, 1, "", "batch_ids"], [18, 4, 1, "", "blobs"], [18, 3, 1, "", "clear"], [18, 4, 1, "", "contents"], [18, 3, 1, "", "count"], [18, 3, 1, "", "dataloader"], [18, 3, 1, "", "embed"], [18, 4, 1, "", "embeddings"], [18, 3, 1, "", "empty"], [18, 3, 1, "", "evaluate"], [18, 3, 1, "", "extend"], [18, 3, 1, "", "find"], [18, 3, 1, "", "flatten"], [18, 3, 1, "", "from_base64"], [18, 3, 1, "", "from_bytes"], [18, 3, 1, "", "from_csv"], [18, 3, 1, "", "from_dataframe"], [18, 3, 1, "", "from_dict"], [18, 3, 1, "", "from_files"], [18, 3, 1, "", "from_huggingface_datasets"], [18, 3, 1, "", "from_json"], [18, 3, 1, "", "from_lines"], [18, 3, 1, "", "from_list"], [18, 3, 1, "", "from_ndarray"], [18, 3, 1, "", "from_ndjson"], [18, 3, 1, "", "from_protobuf"], [18, 3, 1, "", "from_pydantic_model"], [18, 3, 1, "", "from_strawberry_type"], [18, 3, 1, "", "get_json_schema"], [18, 3, 1, "", "get_vocabulary"], [18, 3, 1, "", "index"], [18, 3, 1, "", "insert"], [18, 3, 1, "", "load"], [18, 3, 1, "", "load_binary"], [18, 3, 1, "", "load_csv"], [18, 3, 1, "", "load_json"], [18, 3, 1, "", "map"], [18, 3, 1, "", "map_batch"], [18, 3, 1, "", "match"], [18, 3, 1, "", "plot_embeddings"], [18, 3, 1, "", "plot_image_sprites"], [18, 3, 1, "", "pop"], [18, 3, 1, "", "post"], [18, 3, 1, "", "pull"], [18, 3, 1, "", "push"], [18, 3, 1, "", "reduce"], [18, 3, 1, "", "reduce_all"], [18, 3, 1, "", "remove"], [18, 3, 1, "", "reverse"], [18, 3, 1, "", "sample"], [18, 3, 1, "", "save"], [18, 3, 1, "", "save_binary"], [18, 3, 1, "", "save_csv"], [18, 3, 1, "", "save_embeddings_csv"], [18, 3, 1, "", "save_gif"], [18, 3, 1, "", "save_json"], [18, 3, 1, "", "shuffle"], [18, 3, 1, "", "split_by_tag"], [18, 3, 1, "", "summary"], [18, 4, 1, "", "tensors"], [18, 4, 1, "", "texts"], [18, 3, 1, "", "to_base64"], [18, 3, 1, "", "to_bytes"], [18, 3, 1, "", "to_dataframe"], [18, 3, 1, "", "to_dict"], [18, 3, 1, "", "to_json"], [18, 3, 1, "", "to_list"], [18, 3, 1, "", "to_protobuf"], [18, 3, 1, "", "to_pydantic_model"], [18, 3, 1, "", "to_strawberry_type"], [18, 3, 1, "", "traverse"], [18, 3, 1, "", "traverse_flat"], [18, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.elastic.ElasticConfig": [[18, 2, 1, "", "batch_size"], [18, 2, 1, "", "columns"], [18, 2, 1, "", "distance"], [18, 2, 1, "", "ef_construction"], [18, 2, 1, "", "es_config"], [18, 2, 1, "", "hosts"], [18, 2, 1, "", "index_name"], [18, 2, 1, "", "index_text"], [18, 2, 1, "", "m"], [18, 2, 1, "", "n_dim"], [18, 2, 1, "", "tag_indices"]], "docarray.array.match": [[19, 1, 1, "", "MatchArray"]], "docarray.array.match.MatchArray": [[19, 2, 1, "", "TYPE_MAP"], [19, 4, 1, "", "adjacency"], [19, 3, 1, "", "append"], [19, 3, 1, "", "apply"], [19, 3, 1, "", "apply_batch"], [19, 4, 1, "", "auth_token"], [19, 3, 1, "", "batch"], [19, 3, 1, "", "batch_ids"], [19, 4, 1, "", "blobs"], [19, 3, 1, "", "clear"], [19, 4, 1, "", "contents"], [19, 3, 1, "", "count"], [19, 3, 1, "", "dataloader"], [19, 3, 1, "", "embed"], [19, 4, 1, "", "embeddings"], [19, 3, 1, "", "empty"], [19, 3, 1, "", "evaluate"], [19, 3, 1, "", "extend"], [19, 3, 1, "", "find"], [19, 3, 1, "", "flatten"], [19, 3, 1, "", "from_base64"], [19, 3, 1, "", "from_bytes"], [19, 3, 1, "", "from_csv"], [19, 3, 1, "", "from_dataframe"], [19, 3, 1, "", "from_dict"], [19, 3, 1, "", "from_files"], [19, 3, 1, "", "from_huggingface_datasets"], [19, 3, 1, "", "from_json"], [19, 3, 1, "", "from_lines"], [19, 3, 1, "", "from_list"], [19, 3, 1, "", "from_ndarray"], [19, 3, 1, "", "from_ndjson"], [19, 3, 1, "", "from_protobuf"], [19, 3, 1, "", "from_pydantic_model"], [19, 3, 1, "", "from_strawberry_type"], [19, 3, 1, "", "get_json_schema"], [19, 3, 1, "", "get_vocabulary"], [19, 4, 1, "", "granularity"], [19, 3, 1, "", "index"], [19, 3, 1, "", "insert"], [19, 3, 1, "", "load"], [19, 3, 1, "", "load_binary"], [19, 3, 1, "", "load_csv"], [19, 3, 1, "", "load_json"], [19, 3, 1, "", "map"], [19, 3, 1, "", "map_batch"], [19, 3, 1, "", "match"], [19, 3, 1, "", "plot_embeddings"], [19, 3, 1, "", "plot_image_sprites"], [19, 3, 1, "", "pop"], [19, 3, 1, "", "post"], [19, 3, 1, "", "pull"], [19, 3, 1, "", "push"], [19, 3, 1, "", "reduce"], [19, 3, 1, "", "reduce_all"], [19, 4, 1, "", "reference_doc"], [19, 3, 1, "", "remove"], [19, 3, 1, "", "reverse"], [19, 3, 1, "", "sample"], [19, 3, 1, "", "save"], [19, 3, 1, "", "save_binary"], [19, 3, 1, "", "save_csv"], [19, 3, 1, "", "save_embeddings_csv"], [19, 3, 1, "", "save_gif"], [19, 3, 1, "", "save_json"], [19, 3, 1, "", "shuffle"], [19, 3, 1, "", "split_by_tag"], [19, 3, 1, "", "summary"], [19, 4, 1, "", "tensors"], [19, 4, 1, "", "texts"], [19, 3, 1, "", "to_base64"], [19, 3, 1, "", "to_bytes"], [19, 3, 1, "", "to_dataframe"], [19, 3, 1, "", "to_dict"], [19, 3, 1, "", "to_json"], [19, 3, 1, "", "to_list"], [19, 3, 1, "", "to_protobuf"], [19, 3, 1, "", "to_pydantic_model"], [19, 3, 1, "", "to_strawberry_type"], [19, 3, 1, "", "traverse"], [19, 3, 1, "", "traverse_flat"], [19, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.memory": [[20, 1, 1, "", "DocumentArrayInMemory"]], "docarray.array.memory.DocumentArrayInMemory": [[20, 2, 1, "", "TYPE_MAP"], [20, 3, 1, "", "append"], [20, 3, 1, "", "apply"], [20, 3, 1, "", "apply_batch"], [20, 4, 1, "", "auth_token"], [20, 3, 1, "", "batch"], [20, 3, 1, "", "batch_ids"], [20, 4, 1, "", "blobs"], [20, 3, 1, "", "clear"], [20, 4, 1, "", "contents"], [20, 3, 1, "", "count"], [20, 3, 1, "", "dataloader"], [20, 3, 1, "", "embed"], [20, 4, 1, "", "embeddings"], [20, 3, 1, "", "empty"], [20, 3, 1, "", "evaluate"], [20, 3, 1, "", "extend"], [20, 3, 1, "", "find"], [20, 3, 1, "", "flatten"], [20, 3, 1, "", "from_base64"], [20, 3, 1, "", "from_bytes"], [20, 3, 1, "", "from_csv"], [20, 3, 1, "", "from_dataframe"], [20, 3, 1, "", "from_dict"], [20, 3, 1, "", "from_files"], [20, 3, 1, "", "from_huggingface_datasets"], [20, 3, 1, "", "from_json"], [20, 3, 1, "", "from_lines"], [20, 3, 1, "", "from_list"], [20, 3, 1, "", "from_ndarray"], [20, 3, 1, "", "from_ndjson"], [20, 3, 1, "", "from_protobuf"], [20, 3, 1, "", "from_pydantic_model"], [20, 3, 1, "", "from_strawberry_type"], [20, 3, 1, "", "get_json_schema"], [20, 3, 1, "", "get_vocabulary"], [20, 3, 1, "", "index"], [20, 3, 1, "", "insert"], [20, 3, 1, "", "load"], [20, 3, 1, "", "load_binary"], [20, 3, 1, "", "load_csv"], [20, 3, 1, "", "load_json"], [20, 3, 1, "", "map"], [20, 3, 1, "", "map_batch"], [20, 3, 1, "", "match"], [20, 3, 1, "", "plot_embeddings"], [20, 3, 1, "", "plot_image_sprites"], [20, 3, 1, "", "pop"], [20, 3, 1, "", "post"], [20, 3, 1, "", "pull"], [20, 3, 1, "", "push"], [20, 3, 1, "", "reduce"], [20, 3, 1, "", "reduce_all"], [20, 3, 1, "", "remove"], [20, 3, 1, "", "reverse"], [20, 3, 1, "", "sample"], [20, 3, 1, "", "save"], [20, 3, 1, "", "save_binary"], [20, 3, 1, "", "save_csv"], [20, 3, 1, "", "save_embeddings_csv"], [20, 3, 1, "", "save_gif"], [20, 3, 1, "", "save_json"], [20, 3, 1, "", "shuffle"], [20, 3, 1, "", "split_by_tag"], [20, 3, 1, "", "summary"], [20, 4, 1, "", "tensors"], [20, 4, 1, "", "texts"], [20, 3, 1, "", "to_base64"], [20, 3, 1, "", "to_bytes"], [20, 3, 1, "", "to_dataframe"], [20, 3, 1, "", "to_dict"], [20, 3, 1, "", "to_json"], [20, 3, 1, "", "to_list"], [20, 3, 1, "", "to_protobuf"], [20, 3, 1, "", "to_pydantic_model"], [20, 3, 1, "", "to_strawberry_type"], [20, 3, 1, "", "traverse"], [20, 3, 1, "", "traverse_flat"], [20, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.mixins": [[21, 1, 1, "", "AllMixins"], [22, 0, 0, "-", "content"], [23, 0, 0, "-", "dataloader"], [25, 0, 0, "-", "delitem"], [26, 0, 0, "-", "embed"], [27, 0, 0, "-", "empty"], [28, 0, 0, "-", "evaluation"], [29, 0, 0, "-", "find"], [30, 0, 0, "-", "getattr"], [31, 0, 0, "-", "getitem"], [32, 0, 0, "-", "group"], [33, 0, 0, "-", "io"], [42, 0, 0, "-", "match"], [43, 0, 0, "-", "parallel"], [44, 0, 0, "-", "plot"], [45, 0, 0, "-", "post"], [46, 0, 0, "-", "pydantic"], [47, 0, 0, "-", "reduce"], [48, 0, 0, "-", "sample"], [49, 0, 0, "-", "setitem"], [50, 0, 0, "-", "strawberry"], [51, 0, 0, "-", "text"], [52, 0, 0, "-", "traverse"]], "docarray.array.mixins.AllMixins": [[21, 3, 1, "", "apply"], [21, 3, 1, "", "apply_batch"], [21, 4, 1, "", "auth_token"], [21, 3, 1, "", "batch"], [21, 3, 1, "", "batch_ids"], [21, 4, 1, "", "blobs"], [21, 4, 1, "", "contents"], [21, 3, 1, "", "dataloader"], [21, 3, 1, "", "embed"], [21, 4, 1, "", "embeddings"], [21, 3, 1, "", "empty"], [21, 3, 1, "", "evaluate"], [21, 3, 1, "", "find"], [21, 3, 1, "", "flatten"], [21, 3, 1, "", "from_base64"], [21, 3, 1, "", "from_bytes"], [21, 3, 1, "", "from_csv"], [21, 3, 1, "", "from_dataframe"], [21, 3, 1, "", "from_dict"], [21, 3, 1, "", "from_files"], [21, 3, 1, "", "from_huggingface_datasets"], [21, 3, 1, "", "from_json"], [21, 3, 1, "", "from_lines"], [21, 3, 1, "", "from_list"], [21, 3, 1, "", "from_ndarray"], [21, 3, 1, "", "from_ndjson"], [21, 3, 1, "", "from_protobuf"], [21, 3, 1, "", "from_pydantic_model"], [21, 3, 1, "", "from_strawberry_type"], [21, 3, 1, "", "get_json_schema"], [21, 3, 1, "", "get_vocabulary"], [21, 3, 1, "", "load"], [21, 3, 1, "", "load_binary"], [21, 3, 1, "", "load_csv"], [21, 3, 1, "", "load_json"], [21, 3, 1, "", "map"], [21, 3, 1, "", "map_batch"], [21, 3, 1, "", "match"], [21, 3, 1, "", "plot_embeddings"], [21, 3, 1, "", "plot_image_sprites"], [21, 3, 1, "", "post"], [21, 3, 1, "", "pull"], [21, 3, 1, "", "push"], [21, 3, 1, "", "reduce"], [21, 3, 1, "", "reduce_all"], [21, 3, 1, "", "sample"], [21, 3, 1, "", "save"], [21, 3, 1, "", "save_binary"], [21, 3, 1, "", "save_csv"], [21, 3, 1, "", "save_embeddings_csv"], [21, 3, 1, "", "save_gif"], [21, 3, 1, "", "save_json"], [21, 3, 1, "", "shuffle"], [21, 3, 1, "", "split_by_tag"], [21, 3, 1, "", "summary"], [21, 4, 1, "", "tensors"], [21, 4, 1, "", "texts"], [21, 3, 1, "", "to_base64"], [21, 3, 1, "", "to_bytes"], [21, 3, 1, "", "to_dataframe"], [21, 3, 1, "", "to_dict"], [21, 3, 1, "", "to_json"], [21, 3, 1, "", "to_list"], [21, 3, 1, "", "to_protobuf"], [21, 3, 1, "", "to_pydantic_model"], [21, 3, 1, "", "to_strawberry_type"], [21, 3, 1, "", "traverse"], [21, 3, 1, "", "traverse_flat"], [21, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.mixins.content": [[22, 1, 1, "", "ContentPropertyMixin"]], "docarray.array.mixins.content.ContentPropertyMixin": [[22, 4, 1, "", "blobs"], [22, 4, 1, "", "contents"], [22, 4, 1, "", "embeddings"], [22, 4, 1, "", "tensors"], [22, 4, 1, "", "texts"]], "docarray.array.mixins.dataloader": [[23, 1, 1, "", "DataLoaderMixin"], [24, 0, 0, "-", "helper"]], "docarray.array.mixins.dataloader.DataLoaderMixin": [[23, 3, 1, "", "dataloader"]], "docarray.array.mixins.dataloader.helper": [[24, 1, 1, "", "DocumentArrayLoader"]], "docarray.array.mixins.dataloader.helper.DocumentArrayLoader": [[24, 3, 1, "", "apply"], [24, 3, 1, "", "apply_batch"], [24, 3, 1, "", "batch"], [24, 3, 1, "", "batch_ids"], [24, 3, 1, "", "map"], [24, 3, 1, "", "map_batch"], [24, 3, 1, "", "split_by_tag"]], "docarray.array.mixins.delitem": [[25, 1, 1, "", "DelItemMixin"]], "docarray.array.mixins.embed": [[26, 1, 1, "", "EmbedMixin"], [26, 5, 1, "", "get_framework"]], "docarray.array.mixins.embed.EmbedMixin": [[26, 3, 1, "", "embed"]], "docarray.array.mixins.empty": [[27, 1, 1, "", "EmptyMixin"]], "docarray.array.mixins.empty.EmptyMixin": [[27, 3, 1, "", "empty"]], "docarray.array.mixins.evaluation": [[28, 1, 1, "", "EvaluationMixin"]], "docarray.array.mixins.evaluation.EvaluationMixin": [[28, 3, 1, "", "evaluate"]], "docarray.array.mixins.find": [[29, 1, 1, "", "FindMixin"]], "docarray.array.mixins.find.FindMixin": [[29, 3, 1, "", "find"]], "docarray.array.mixins.getattr": [[30, 1, 1, "", "GetAttributeMixin"]], "docarray.array.mixins.getitem": [[31, 1, 1, "", "GetItemMixin"]], "docarray.array.mixins.group": [[32, 1, 1, "", "GroupMixin"]], "docarray.array.mixins.group.GroupMixin": [[32, 3, 1, "", "batch"], [32, 3, 1, "", "batch_ids"], [32, 3, 1, "", "split_by_tag"]], "docarray.array.mixins.io": [[34, 0, 0, "-", "binary"], [35, 0, 0, "-", "common"], [36, 0, 0, "-", "csv"], [37, 0, 0, "-", "dataframe"], [38, 0, 0, "-", "from_gen"], [39, 0, 0, "-", "json"], [40, 0, 0, "-", "pbar"], [41, 0, 0, "-", "pushpull"]], "docarray.array.mixins.io.binary": [[34, 1, 1, "", "BinaryIOMixin"], [34, 1, 1, "", "LazyRequestReader"]], "docarray.array.mixins.io.binary.BinaryIOMixin": [[34, 3, 1, "", "from_base64"], [34, 3, 1, "", "from_bytes"], [34, 3, 1, "", "from_protobuf"], [34, 3, 1, "", "load_binary"], [34, 3, 1, "", "save_binary"], [34, 3, 1, "", "to_base64"], [34, 3, 1, "", "to_bytes"], [34, 3, 1, "", "to_protobuf"]], "docarray.array.mixins.io.common": [[35, 1, 1, "", "CommonIOMixin"]], "docarray.array.mixins.io.common.CommonIOMixin": [[35, 3, 1, "", "load"], [35, 3, 1, "", "save"]], "docarray.array.mixins.io.csv": [[36, 1, 1, "", "CsvIOMixin"]], "docarray.array.mixins.io.csv.CsvIOMixin": [[36, 3, 1, "", "load_csv"], [36, 3, 1, "", "save_csv"], [36, 3, 1, "", "save_embeddings_csv"]], "docarray.array.mixins.io.dataframe": [[37, 1, 1, "", "DataframeIOMixin"]], "docarray.array.mixins.io.dataframe.DataframeIOMixin": [[37, 3, 1, "", "from_dataframe"], [37, 3, 1, "", "to_dataframe"]], "docarray.array.mixins.io.from_gen": [[38, 1, 1, "", "FromGeneratorMixin"]], "docarray.array.mixins.io.from_gen.FromGeneratorMixin": [[38, 3, 1, "", "from_csv"], [38, 3, 1, "", "from_files"], [38, 3, 1, "", "from_huggingface_datasets"], [38, 3, 1, "", "from_lines"], [38, 3, 1, "", "from_ndarray"], [38, 3, 1, "", "from_ndjson"]], "docarray.array.mixins.io.json": [[39, 1, 1, "", "JsonIOMixin"]], "docarray.array.mixins.io.json.JsonIOMixin": [[39, 3, 1, "", "from_dict"], [39, 3, 1, "", "from_json"], [39, 3, 1, "", "from_list"], [39, 3, 1, "", "load_json"], [39, 3, 1, "", "save_json"], [39, 3, 1, "", "to_dict"], [39, 3, 1, "", "to_json"], [39, 3, 1, "", "to_list"]], "docarray.array.mixins.io.pbar": [[40, 1, 1, "", "QPSColumn"], [40, 5, 1, "", "get_pbar"], [40, 5, 1, "", "get_progressbar"]], "docarray.array.mixins.io.pbar.QPSColumn": [[40, 3, 1, "", "get_table_column"], [40, 2, 1, "", "max_refresh"], [40, 3, 1, "", "render"]], "docarray.array.mixins.io.pushpull": [[41, 1, 1, "", "PushPullMixin"]], "docarray.array.mixins.io.pushpull.PushPullMixin": [[41, 4, 1, "", "auth_token"], [41, 3, 1, "", "pull"], [41, 3, 1, "", "push"]], "docarray.array.mixins.match": [[42, 1, 1, "", "MatchMixin"]], "docarray.array.mixins.match.MatchMixin": [[42, 3, 1, "", "match"]], "docarray.array.mixins.parallel": [[43, 1, 1, "", "ParallelMixin"]], "docarray.array.mixins.parallel.ParallelMixin": [[43, 3, 1, "", "apply"], [43, 3, 1, "", "apply_batch"], [43, 3, 1, "", "map"], [43, 3, 1, "", "map_batch"]], "docarray.array.mixins.plot": [[44, 1, 1, "", "PlotMixin"]], "docarray.array.mixins.plot.PlotMixin": [[44, 3, 1, "", "plot_embeddings"], [44, 3, 1, "", "plot_image_sprites"], [44, 3, 1, "", "save_gif"], [44, 3, 1, "", "summary"]], "docarray.array.mixins.post": [[45, 1, 1, "", "PostMixin"]], "docarray.array.mixins.post.PostMixin": [[45, 3, 1, "", "post"]], "docarray.array.mixins.pydantic": [[46, 1, 1, "", "PydanticMixin"]], "docarray.array.mixins.pydantic.PydanticMixin": [[46, 3, 1, "", "from_pydantic_model"], [46, 3, 1, "", "get_json_schema"], [46, 3, 1, "", "to_pydantic_model"]], "docarray.array.mixins.reduce": [[47, 1, 1, "", "ReduceMixin"]], "docarray.array.mixins.reduce.ReduceMixin": [[47, 3, 1, "", "reduce"], [47, 3, 1, "", "reduce_all"]], "docarray.array.mixins.sample": [[48, 1, 1, "", "SampleMixin"]], "docarray.array.mixins.sample.SampleMixin": [[48, 3, 1, "", "sample"], [48, 3, 1, "", "shuffle"]], "docarray.array.mixins.setitem": [[49, 1, 1, "", "SetItemMixin"]], "docarray.array.mixins.strawberry": [[50, 1, 1, "", "StrawberryMixin"]], "docarray.array.mixins.strawberry.StrawberryMixin": [[50, 3, 1, "", "from_strawberry_type"], [50, 3, 1, "", "to_strawberry_type"]], "docarray.array.mixins.text": [[51, 1, 1, "", "TextToolsMixin"]], "docarray.array.mixins.text.TextToolsMixin": [[51, 3, 1, "", "get_vocabulary"]], "docarray.array.mixins.traverse": [[52, 1, 1, "", "TraverseMixin"]], "docarray.array.mixins.traverse.TraverseMixin": [[52, 3, 1, "", "flatten"], [52, 3, 1, "", "traverse"], [52, 3, 1, "", "traverse_flat"], [52, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.qdrant": [[53, 1, 1, "", "DocumentArrayQdrant"], [53, 1, 1, "", "QdrantConfig"]], "docarray.array.qdrant.DocumentArrayQdrant": [[53, 2, 1, "", "TYPE_MAP"], [53, 3, 1, "", "append"], [53, 3, 1, "", "apply"], [53, 3, 1, "", "apply_batch"], [53, 4, 1, "", "auth_token"], [53, 3, 1, "", "batch"], [53, 3, 1, "", "batch_ids"], [53, 4, 1, "", "blobs"], [53, 3, 1, "", "clear"], [53, 4, 1, "", "client"], [53, 4, 1, "", "collection_name"], [53, 4, 1, "", "collection_name_meta"], [53, 4, 1, "", "config"], [53, 4, 1, "", "contents"], [53, 3, 1, "", "count"], [53, 3, 1, "", "dataloader"], [53, 4, 1, "", "distance"], [53, 3, 1, "", "embed"], [53, 4, 1, "", "embeddings"], [53, 3, 1, "", "empty"], [53, 3, 1, "", "evaluate"], [53, 3, 1, "", "extend"], [53, 3, 1, "", "find"], [53, 3, 1, "", "flatten"], [53, 3, 1, "", "from_base64"], [53, 3, 1, "", "from_bytes"], [53, 3, 1, "", "from_csv"], [53, 3, 1, "", "from_dataframe"], [53, 3, 1, "", "from_dict"], [53, 3, 1, "", "from_files"], [53, 3, 1, "", "from_huggingface_datasets"], [53, 3, 1, "", "from_json"], [53, 3, 1, "", "from_lines"], [53, 3, 1, "", "from_list"], [53, 3, 1, "", "from_ndarray"], [53, 3, 1, "", "from_ndjson"], [53, 3, 1, "", "from_protobuf"], [53, 3, 1, "", "from_pydantic_model"], [53, 3, 1, "", "from_strawberry_type"], [53, 3, 1, "", "get_json_schema"], [53, 3, 1, "", "get_vocabulary"], [53, 3, 1, "", "index"], [53, 3, 1, "", "insert"], [53, 3, 1, "", "load"], [53, 3, 1, "", "load_binary"], [53, 3, 1, "", "load_csv"], [53, 3, 1, "", "load_json"], [53, 3, 1, "", "map"], [53, 3, 1, "", "map_batch"], [53, 3, 1, "", "match"], [53, 4, 1, "", "n_dim"], [53, 3, 1, "", "plot_embeddings"], [53, 3, 1, "", "plot_image_sprites"], [53, 3, 1, "", "pop"], [53, 3, 1, "", "post"], [53, 3, 1, "", "pull"], [53, 3, 1, "", "push"], [53, 3, 1, "", "reduce"], [53, 3, 1, "", "reduce_all"], [53, 3, 1, "", "remove"], [53, 3, 1, "", "reverse"], [53, 3, 1, "", "sample"], [53, 3, 1, "", "save"], [53, 3, 1, "", "save_binary"], [53, 3, 1, "", "save_csv"], [53, 3, 1, "", "save_embeddings_csv"], [53, 3, 1, "", "save_gif"], [53, 3, 1, "", "save_json"], [53, 3, 1, "", "scan"], [53, 4, 1, "", "scroll_batch_size"], [53, 4, 1, "", "serialization_config"], [53, 4, 1, "", "serialize_config"], [53, 3, 1, "", "shuffle"], [53, 3, 1, "", "split_by_tag"], [53, 3, 1, "", "summary"], [53, 4, 1, "", "tensors"], [53, 4, 1, "", "texts"], [53, 3, 1, "", "to_base64"], [53, 3, 1, "", "to_bytes"], [53, 3, 1, "", "to_dataframe"], [53, 3, 1, "", "to_dict"], [53, 3, 1, "", "to_json"], [53, 3, 1, "", "to_list"], [53, 3, 1, "", "to_protobuf"], [53, 3, 1, "", "to_pydantic_model"], [53, 3, 1, "", "to_strawberry_type"], [53, 3, 1, "", "traverse"], [53, 3, 1, "", "traverse_flat"], [53, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.qdrant.QdrantConfig": [[53, 2, 1, "", "collection_name"], [53, 2, 1, "", "columns"], [53, 2, 1, "", "distance"], [53, 2, 1, "", "ef_construct"], [53, 2, 1, "", "full_scan_threshold"], [53, 2, 1, "", "host"], [53, 2, 1, "", "m"], [53, 2, 1, "", "n_dim"], [53, 2, 1, "", "port"], [53, 2, 1, "", "scroll_batch_size"], [53, 2, 1, "", "serialize_config"]], "docarray.array.queryset": [[55, 0, 0, "-", "lookup"], [56, 0, 0, "-", "parser"]], "docarray.array.queryset.lookup": [[55, 1, 1, "", "LookupLeaf"], [55, 1, 1, "", "LookupNode"], [55, 1, 1, "", "LookupTreeElem"], [55, 6, 1, "", "LookupyError"], [55, 2, 1, "", "Q"], [55, 5, 1, "", "dunder_partition"], [55, 5, 1, "", "guard_Q"], [55, 5, 1, "", "guard_iter"], [55, 5, 1, "", "guard_list"], [55, 5, 1, "", "guard_str"], [55, 5, 1, "", "guard_type"], [55, 5, 1, "", "iff"], [55, 5, 1, "", "iff_not_none"], [55, 5, 1, "", "lookup"]], "docarray.array.queryset.lookup.LookupLeaf": [[55, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupNode": [[55, 3, 1, "", "add_child"], [55, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupTreeElem": [[55, 3, 1, "", "evaluate"]], "docarray.array.queryset.lookup.LookupyError": [[55, 2, 1, "", "args"], [55, 3, 1, "", "with_traceback"]], "docarray.array.queryset.parser": [[56, 1, 1, "", "QueryParser"]], "docarray.array.queryset.parser.QueryParser": [[56, 3, 1, "", "evaluate"]], "docarray.array.sqlite": [[57, 1, 1, "", "DocumentArraySqlite"], [57, 1, 1, "", "SqliteConfig"]], "docarray.array.sqlite.DocumentArraySqlite": [[57, 2, 1, "", "TYPE_MAP"], [57, 3, 1, "", "append"], [57, 3, 1, "", "apply"], [57, 3, 1, "", "apply_batch"], [57, 4, 1, "", "auth_token"], [57, 3, 1, "", "batch"], [57, 3, 1, "", "batch_ids"], [57, 4, 1, "", "blobs"], [57, 3, 1, "", "clear"], [57, 4, 1, "", "contents"], [57, 3, 1, "", "count"], [57, 3, 1, "", "dataloader"], [57, 3, 1, "", "embed"], [57, 4, 1, "", "embeddings"], [57, 3, 1, "", "empty"], [57, 3, 1, "", "evaluate"], [57, 3, 1, "", "extend"], [57, 3, 1, "", "find"], [57, 3, 1, "", "flatten"], [57, 3, 1, "", "from_base64"], [57, 3, 1, "", "from_bytes"], [57, 3, 1, "", "from_csv"], [57, 3, 1, "", "from_dataframe"], [57, 3, 1, "", "from_dict"], [57, 3, 1, "", "from_files"], [57, 3, 1, "", "from_huggingface_datasets"], [57, 3, 1, "", "from_json"], [57, 3, 1, "", "from_lines"], [57, 3, 1, "", "from_list"], [57, 3, 1, "", "from_ndarray"], [57, 3, 1, "", "from_ndjson"], [57, 3, 1, "", "from_protobuf"], [57, 3, 1, "", "from_pydantic_model"], [57, 3, 1, "", "from_strawberry_type"], [57, 3, 1, "", "get_json_schema"], [57, 3, 1, "", "get_vocabulary"], [57, 3, 1, "", "index"], [57, 3, 1, "", "insert"], [57, 3, 1, "", "load"], [57, 3, 1, "", "load_binary"], [57, 3, 1, "", "load_csv"], [57, 3, 1, "", "load_json"], [57, 3, 1, "", "map"], [57, 3, 1, "", "map_batch"], [57, 3, 1, "", "match"], [57, 3, 1, "", "plot_embeddings"], [57, 3, 1, "", "plot_image_sprites"], [57, 3, 1, "", "pop"], [57, 3, 1, "", "post"], [57, 3, 1, "", "pull"], [57, 3, 1, "", "push"], [57, 3, 1, "", "reduce"], [57, 3, 1, "", "reduce_all"], [57, 3, 1, "", "remove"], [57, 3, 1, "", "reverse"], [57, 3, 1, "", "sample"], [57, 3, 1, "", "save"], [57, 3, 1, "", "save_binary"], [57, 3, 1, "", "save_csv"], [57, 3, 1, "", "save_embeddings_csv"], [57, 3, 1, "", "save_gif"], [57, 3, 1, "", "save_json"], [57, 2, 1, "", "schema_version"], [57, 3, 1, "", "shuffle"], [57, 3, 1, "", "split_by_tag"], [57, 3, 1, "", "summary"], [57, 4, 1, "", "tensors"], [57, 4, 1, "", "texts"], [57, 3, 1, "", "to_base64"], [57, 3, 1, "", "to_bytes"], [57, 3, 1, "", "to_dataframe"], [57, 3, 1, "", "to_dict"], [57, 3, 1, "", "to_json"], [57, 3, 1, "", "to_list"], [57, 3, 1, "", "to_protobuf"], [57, 3, 1, "", "to_pydantic_model"], [57, 3, 1, "", "to_strawberry_type"], [57, 3, 1, "", "traverse"], [57, 3, 1, "", "traverse_flat"], [57, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.sqlite.SqliteConfig": [[57, 2, 1, "", "conn_config"], [57, 2, 1, "", "connection"], [57, 2, 1, "", "journal_mode"], [57, 2, 1, "", "serialize_config"], [57, 2, 1, "", "synchronous"], [57, 2, 1, "", "table_name"]], "docarray.array.storage": [[59, 0, 0, "-", "annlite"], [65, 0, 0, "-", "base"], [70, 0, 0, "-", "elastic"], [75, 0, 0, "-", "memory"], [80, 0, 0, "-", "qdrant"], [86, 0, 0, "-", "registry"], [87, 0, 0, "-", "sqlite"], [92, 0, 0, "-", "weaviate"]], "docarray.array.storage.annlite": [[59, 1, 1, "", "AnnliteConfig"], [59, 1, 1, "", "StorageMixins"], [60, 0, 0, "-", "backend"], [61, 0, 0, "-", "find"], [62, 0, 0, "-", "getsetdel"], [63, 0, 0, "-", "helper"], [64, 0, 0, "-", "seqlike"]], "docarray.array.storage.annlite.AnnliteConfig": [[59, 2, 1, "", "columns"], [59, 2, 1, "", "data_path"], [59, 2, 1, "", "ef_construction"], [59, 2, 1, "", "ef_search"], [59, 2, 1, "", "max_connection"], [59, 2, 1, "", "metric"], [59, 2, 1, "", "n_dim"], [59, 2, 1, "", "serialize_config"]], "docarray.array.storage.annlite.StorageMixins": [[59, 2, 1, "", "TYPE_MAP"], [59, 3, 1, "", "append"], [59, 3, 1, "", "clear"], [59, 3, 1, "", "count"], [59, 3, 1, "", "extend"], [59, 3, 1, "", "index"], [59, 3, 1, "", "insert"], [59, 3, 1, "", "pop"], [59, 3, 1, "", "remove"], [59, 3, 1, "", "reverse"]], "docarray.array.storage.annlite.backend": [[60, 1, 1, "", "AnnliteConfig"], [60, 1, 1, "", "BackendMixin"]], "docarray.array.storage.annlite.backend.AnnliteConfig": [[60, 2, 1, "", "columns"], [60, 2, 1, "", "data_path"], [60, 2, 1, "", "ef_construction"], [60, 2, 1, "", "ef_search"], [60, 2, 1, "", "max_connection"], [60, 2, 1, "", "metric"], [60, 2, 1, "", "n_dim"], [60, 2, 1, "", "serialize_config"]], "docarray.array.storage.annlite.backend.BackendMixin": [[60, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.annlite.find": [[61, 1, 1, "", "FindMixin"]], "docarray.array.storage.annlite.getsetdel": [[62, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.annlite.helper": [[63, 1, 1, "", "OffsetMapping"]], "docarray.array.storage.annlite.helper.OffsetMapping": [[63, 3, 1, "", "clear"], [63, 3, 1, "", "close"], [63, 3, 1, "", "commit"], [63, 3, 1, "", "create_table"], [63, 3, 1, "", "del_at_offset"], [63, 3, 1, "", "del_at_offsets"], [63, 3, 1, "", "drop"], [63, 3, 1, "", "drop_table"], [63, 3, 1, "", "dump"], [63, 3, 1, "", "execute"], [63, 3, 1, "", "execute_many"], [63, 3, 1, "", "extend_doc_ids"], [63, 3, 1, "", "get_all_ids"], [63, 3, 1, "", "get_id_by_offset"], [63, 3, 1, "", "get_ids_by_offsets"], [63, 3, 1, "", "get_offset_by_id"], [63, 3, 1, "", "get_offsets_by_ids"], [63, 3, 1, "", "insert_at_offset"], [63, 3, 1, "", "load"], [63, 4, 1, "", "name"], [63, 4, 1, "", "schema"], [63, 3, 1, "", "set_at_offset"], [63, 3, 1, "", "shift_offset"], [63, 4, 1, "", "size"]], "docarray.array.storage.annlite.seqlike": [[64, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.annlite.seqlike.SequenceLikeMixin": [[64, 3, 1, "", "append"], [64, 3, 1, "", "clear"], [64, 3, 1, "", "count"], [64, 3, 1, "", "extend"], [64, 3, 1, "", "index"], [64, 3, 1, "", "insert"], [64, 3, 1, "", "pop"], [64, 3, 1, "", "remove"], [64, 3, 1, "", "reverse"]], "docarray.array.storage.base": [[66, 0, 0, "-", "backend"], [67, 0, 0, "-", "getsetdel"], [68, 0, 0, "-", "helper"], [69, 0, 0, "-", "seqlike"]], "docarray.array.storage.base.backend": [[66, 1, 1, "", "BaseBackendMixin"], [66, 1, 1, "", "TypeMap"]], "docarray.array.storage.base.backend.BaseBackendMixin": [[66, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.base.backend.TypeMap": [[66, 4, 1, "", "converter"], [66, 3, 1, "", "count"], [66, 3, 1, "", "index"], [66, 4, 1, "", "type"]], "docarray.array.storage.base.getsetdel": [[67, 1, 1, "", "BaseGetSetDelMixin"]], "docarray.array.storage.base.helper": [[68, 1, 1, "", "Offset2ID"]], "docarray.array.storage.base.helper.Offset2ID": [[68, 3, 1, "", "append"], [68, 3, 1, "", "clear"], [68, 3, 1, "", "delete_by_id"], [68, 3, 1, "", "delete_by_ids"], [68, 3, 1, "", "delete_by_offset"], [68, 3, 1, "", "extend"], [68, 3, 1, "", "get_id"], [68, 3, 1, "", "index"], [68, 3, 1, "", "insert"], [68, 3, 1, "", "load"], [68, 3, 1, "", "save"], [68, 3, 1, "", "update"], [68, 3, 1, "", "update_ids"]], "docarray.array.storage.base.seqlike": [[69, 1, 1, "", "BaseSequenceLikeMixin"]], "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin": [[69, 3, 1, "", "append"], [69, 3, 1, "", "clear"], [69, 3, 1, "", "count"], [69, 3, 1, "", "extend"], [69, 3, 1, "", "index"], [69, 3, 1, "", "insert"], [69, 3, 1, "", "pop"], [69, 3, 1, "", "remove"], [69, 3, 1, "", "reverse"]], "docarray.array.storage.elastic": [[70, 1, 1, "", "ElasticConfig"], [70, 1, 1, "", "StorageMixins"], [71, 0, 0, "-", "backend"], [72, 0, 0, "-", "find"], [73, 0, 0, "-", "getsetdel"], [74, 0, 0, "-", "seqlike"]], "docarray.array.storage.elastic.ElasticConfig": [[70, 2, 1, "", "batch_size"], [70, 2, 1, "", "columns"], [70, 2, 1, "", "distance"], [70, 2, 1, "", "ef_construction"], [70, 2, 1, "", "es_config"], [70, 2, 1, "", "hosts"], [70, 2, 1, "", "index_name"], [70, 2, 1, "", "index_text"], [70, 2, 1, "", "m"], [70, 2, 1, "", "n_dim"], [70, 2, 1, "", "tag_indices"]], "docarray.array.storage.elastic.StorageMixins": [[70, 2, 1, "", "MAX_ES_RETURNED_DOCS"], [70, 2, 1, "", "TYPE_MAP"], [70, 3, 1, "", "append"], [70, 3, 1, "", "clear"], [70, 3, 1, "", "count"], [70, 3, 1, "", "extend"], [70, 3, 1, "", "find"], [70, 3, 1, "", "index"], [70, 3, 1, "", "insert"], [70, 3, 1, "", "pop"], [70, 3, 1, "", "remove"], [70, 3, 1, "", "reverse"]], "docarray.array.storage.elastic.backend": [[71, 1, 1, "", "BackendMixin"], [71, 1, 1, "", "ElasticConfig"]], "docarray.array.storage.elastic.backend.BackendMixin": [[71, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.elastic.backend.ElasticConfig": [[71, 2, 1, "", "batch_size"], [71, 2, 1, "", "columns"], [71, 2, 1, "", "distance"], [71, 2, 1, "", "ef_construction"], [71, 2, 1, "", "es_config"], [71, 2, 1, "", "hosts"], [71, 2, 1, "", "index_name"], [71, 2, 1, "", "index_text"], [71, 2, 1, "", "m"], [71, 2, 1, "", "n_dim"], [71, 2, 1, "", "tag_indices"]], "docarray.array.storage.elastic.find": [[72, 1, 1, "", "FindMixin"]], "docarray.array.storage.elastic.find.FindMixin": [[72, 3, 1, "", "find"]], "docarray.array.storage.elastic.getsetdel": [[73, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.elastic.getsetdel.GetSetDelMixin": [[73, 2, 1, "", "MAX_ES_RETURNED_DOCS"]], "docarray.array.storage.elastic.seqlike": [[74, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.elastic.seqlike.SequenceLikeMixin": [[74, 3, 1, "", "append"], [74, 3, 1, "", "clear"], [74, 3, 1, "", "count"], [74, 3, 1, "", "extend"], [74, 3, 1, "", "index"], [74, 3, 1, "", "insert"], [74, 3, 1, "", "pop"], [74, 3, 1, "", "remove"], [74, 3, 1, "", "reverse"]], "docarray.array.storage.memory": [[75, 1, 1, "", "StorageMixins"], [76, 0, 0, "-", "backend"], [77, 0, 0, "-", "find"], [78, 0, 0, "-", "getsetdel"], [79, 0, 0, "-", "seqlike"]], "docarray.array.storage.memory.StorageMixins": [[75, 2, 1, "", "TYPE_MAP"], [75, 3, 1, "", "append"], [75, 3, 1, "", "clear"], [75, 3, 1, "", "count"], [75, 3, 1, "", "extend"], [75, 3, 1, "", "index"], [75, 3, 1, "", "insert"], [75, 3, 1, "", "pop"], [75, 3, 1, "", "remove"], [75, 3, 1, "", "reverse"]], "docarray.array.storage.memory.backend": [[76, 1, 1, "", "BackendMixin"], [76, 5, 1, "", "needs_id2offset_rebuild"]], "docarray.array.storage.memory.backend.BackendMixin": [[76, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.memory.find": [[77, 1, 1, "", "FindMixin"]], "docarray.array.storage.memory.getsetdel": [[78, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.memory.seqlike": [[79, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.memory.seqlike.SequenceLikeMixin": [[79, 3, 1, "", "append"], [79, 3, 1, "", "clear"], [79, 3, 1, "", "count"], [79, 3, 1, "", "extend"], [79, 3, 1, "", "index"], [79, 3, 1, "", "insert"], [79, 3, 1, "", "pop"], [79, 3, 1, "", "remove"], [79, 3, 1, "", "reverse"]], "docarray.array.storage.qdrant": [[80, 1, 1, "", "QdrantConfig"], [80, 1, 1, "", "StorageMixins"], [81, 0, 0, "-", "backend"], [82, 0, 0, "-", "find"], [83, 0, 0, "-", "getsetdel"], [84, 0, 0, "-", "helper"], [85, 0, 0, "-", "seqlike"]], "docarray.array.storage.qdrant.QdrantConfig": [[80, 2, 1, "", "collection_name"], [80, 2, 1, "", "columns"], [80, 2, 1, "", "distance"], [80, 2, 1, "", "ef_construct"], [80, 2, 1, "", "full_scan_threshold"], [80, 2, 1, "", "host"], [80, 2, 1, "", "m"], [80, 2, 1, "", "n_dim"], [80, 2, 1, "", "port"], [80, 2, 1, "", "scroll_batch_size"], [80, 2, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.StorageMixins": [[80, 2, 1, "", "TYPE_MAP"], [80, 3, 1, "", "append"], [80, 3, 1, "", "clear"], [80, 4, 1, "", "client"], [80, 4, 1, "", "collection_name"], [80, 4, 1, "", "collection_name_meta"], [80, 4, 1, "", "config"], [80, 3, 1, "", "count"], [80, 4, 1, "", "distance"], [80, 3, 1, "", "extend"], [80, 3, 1, "", "index"], [80, 3, 1, "", "insert"], [80, 4, 1, "", "n_dim"], [80, 3, 1, "", "pop"], [80, 3, 1, "", "remove"], [80, 3, 1, "", "reverse"], [80, 3, 1, "", "scan"], [80, 4, 1, "", "scroll_batch_size"], [80, 4, 1, "", "serialization_config"], [80, 4, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.backend": [[81, 1, 1, "", "BackendMixin"], [81, 1, 1, "", "QdrantConfig"]], "docarray.array.storage.qdrant.backend.BackendMixin": [[81, 2, 1, "", "TYPE_MAP"]], "docarray.array.storage.qdrant.backend.QdrantConfig": [[81, 2, 1, "", "collection_name"], [81, 2, 1, "", "columns"], [81, 2, 1, "", "distance"], [81, 2, 1, "", "ef_construct"], [81, 2, 1, "", "full_scan_threshold"], [81, 2, 1, "", "host"], [81, 2, 1, "", "m"], [81, 2, 1, "", "n_dim"], [81, 2, 1, "", "port"], [81, 2, 1, "", "scroll_batch_size"], [81, 2, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.find": [[82, 1, 1, "", "FindMixin"]], "docarray.array.storage.qdrant.find.FindMixin": [[82, 4, 1, "", "client"], [82, 4, 1, "", "collection_name"], [82, 4, 1, "", "distance"], [82, 4, 1, "", "serialize_config"]], "docarray.array.storage.qdrant.getsetdel": [[83, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin": [[83, 4, 1, "", "client"], [83, 4, 1, "", "collection_name"], [83, 4, 1, "", "n_dim"], [83, 3, 1, "", "scan"], [83, 4, 1, "", "scroll_batch_size"], [83, 4, 1, "", "serialization_config"]], "docarray.array.storage.qdrant.seqlike": [[85, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin": [[85, 3, 1, "", "append"], [85, 3, 1, "", "clear"], [85, 4, 1, "", "client"], [85, 4, 1, "", "collection_name"], [85, 4, 1, "", "config"], [85, 3, 1, "", "count"], [85, 3, 1, "", "extend"], [85, 3, 1, "", "index"], [85, 3, 1, "", "insert"], [85, 3, 1, "", "pop"], [85, 3, 1, "", "remove"], [85, 3, 1, "", "reverse"]], "docarray.array.storage.sqlite": [[87, 1, 1, "", "SqliteConfig"], [87, 1, 1, "", "StorageMixins"], [88, 0, 0, "-", "backend"], [89, 0, 0, "-", "getsetdel"], [90, 0, 0, "-", "helper"], [91, 0, 0, "-", "seqlike"]], "docarray.array.storage.sqlite.SqliteConfig": [[87, 2, 1, "", "conn_config"], [87, 2, 1, "", "connection"], [87, 2, 1, "", "journal_mode"], [87, 2, 1, "", "serialize_config"], [87, 2, 1, "", "synchronous"], [87, 2, 1, "", "table_name"]], "docarray.array.storage.sqlite.StorageMixins": [[87, 2, 1, "", "TYPE_MAP"], [87, 3, 1, "", "append"], [87, 3, 1, "", "clear"], [87, 3, 1, "", "count"], [87, 3, 1, "", "extend"], [87, 3, 1, "", "index"], [87, 3, 1, "", "insert"], [87, 3, 1, "", "pop"], [87, 3, 1, "", "remove"], [87, 3, 1, "", "reverse"], [87, 2, 1, "", "schema_version"]], "docarray.array.storage.sqlite.backend": [[88, 1, 1, "", "BackendMixin"], [88, 1, 1, "", "SqliteConfig"]], "docarray.array.storage.sqlite.backend.BackendMixin": [[88, 2, 1, "", "TYPE_MAP"], [88, 2, 1, "", "schema_version"]], "docarray.array.storage.sqlite.backend.SqliteConfig": [[88, 2, 1, "", "conn_config"], [88, 2, 1, "", "connection"], [88, 2, 1, "", "journal_mode"], [88, 2, 1, "", "serialize_config"], [88, 2, 1, "", "synchronous"], [88, 2, 1, "", "table_name"]], "docarray.array.storage.sqlite.getsetdel": [[89, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.sqlite.helper": [[90, 5, 1, "", "initialize_table"]], "docarray.array.storage.sqlite.seqlike": [[91, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin": [[91, 3, 1, "", "append"], [91, 3, 1, "", "clear"], [91, 3, 1, "", "count"], [91, 3, 1, "", "extend"], [91, 3, 1, "", "index"], [91, 3, 1, "", "insert"], [91, 3, 1, "", "pop"], [91, 3, 1, "", "remove"], [91, 3, 1, "", "reverse"]], "docarray.array.storage.weaviate": [[92, 1, 1, "", "StorageMixins"], [92, 1, 1, "", "WeaviateConfig"], [93, 0, 0, "-", "backend"], [94, 0, 0, "-", "find"], [95, 0, 0, "-", "getsetdel"], [96, 0, 0, "-", "seqlike"]], "docarray.array.storage.weaviate.StorageMixins": [[92, 2, 1, "", "TYPE_MAP"], [92, 3, 1, "", "append"], [92, 3, 1, "", "clear"], [92, 3, 1, "", "count"], [92, 3, 1, "", "extend"], [92, 3, 1, "", "index"], [92, 3, 1, "", "insert"], [92, 4, 1, "", "name"], [92, 3, 1, "", "pop"], [92, 3, 1, "", "remove"], [92, 3, 1, "", "reverse"]], "docarray.array.storage.weaviate.WeaviateConfig": [[92, 2, 1, "", "cleanup_interval_seconds"], [92, 2, 1, "", "columns"], [92, 2, 1, "", "distance"], [92, 2, 1, "", "dynamic_ef_factor"], [92, 2, 1, "", "dynamic_ef_max"], [92, 2, 1, "", "dynamic_ef_min"], [92, 2, 1, "", "ef"], [92, 2, 1, "", "ef_construction"], [92, 2, 1, "", "flat_search_cutoff"], [92, 2, 1, "", "host"], [92, 2, 1, "", "max_connections"], [92, 2, 1, "", "n_dim"], [92, 2, 1, "", "name"], [92, 2, 1, "", "port"], [92, 2, 1, "", "protocol"], [92, 2, 1, "", "serialize_config"], [92, 2, 1, "", "skip"], [92, 2, 1, "", "timeout_config"], [92, 2, 1, "", "vector_cache_max_objects"]], "docarray.array.storage.weaviate.backend": [[93, 1, 1, "", "BackendMixin"], [93, 1, 1, "", "WeaviateConfig"]], "docarray.array.storage.weaviate.backend.BackendMixin": [[93, 2, 1, "", "TYPE_MAP"], [93, 4, 1, "", "name"]], "docarray.array.storage.weaviate.backend.WeaviateConfig": [[93, 2, 1, "", "cleanup_interval_seconds"], [93, 2, 1, "", "columns"], [93, 2, 1, "", "distance"], [93, 2, 1, "", "dynamic_ef_factor"], [93, 2, 1, "", "dynamic_ef_max"], [93, 2, 1, "", "dynamic_ef_min"], [93, 2, 1, "", "ef"], [93, 2, 1, "", "ef_construction"], [93, 2, 1, "", "flat_search_cutoff"], [93, 2, 1, "", "host"], [93, 2, 1, "", "max_connections"], [93, 2, 1, "", "n_dim"], [93, 2, 1, "", "name"], [93, 2, 1, "", "port"], [93, 2, 1, "", "protocol"], [93, 2, 1, "", "serialize_config"], [93, 2, 1, "", "skip"], [93, 2, 1, "", "timeout_config"], [93, 2, 1, "", "vector_cache_max_objects"]], "docarray.array.storage.weaviate.find": [[94, 1, 1, "", "FindMixin"]], "docarray.array.storage.weaviate.getsetdel": [[95, 1, 1, "", "GetSetDelMixin"]], "docarray.array.storage.weaviate.seqlike": [[96, 1, 1, "", "SequenceLikeMixin"]], "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin": [[96, 3, 1, "", "append"], [96, 3, 1, "", "clear"], [96, 3, 1, "", "count"], [96, 3, 1, "", "extend"], [96, 3, 1, "", "index"], [96, 3, 1, "", "insert"], [96, 3, 1, "", "pop"], [96, 3, 1, "", "remove"], [96, 3, 1, "", "reverse"]], "docarray.array.weaviate": [[97, 1, 1, "", "DocumentArrayWeaviate"], [97, 1, 1, "", "WeaviateConfig"]], "docarray.array.weaviate.DocumentArrayWeaviate": [[97, 2, 1, "", "TYPE_MAP"], [97, 3, 1, "", "append"], [97, 3, 1, "", "apply"], [97, 3, 1, "", "apply_batch"], [97, 4, 1, "", "auth_token"], [97, 3, 1, "", "batch"], [97, 3, 1, "", "batch_ids"], [97, 4, 1, "", "blobs"], [97, 3, 1, "", "clear"], [97, 4, 1, "", "contents"], [97, 3, 1, "", "count"], [97, 3, 1, "", "dataloader"], [97, 3, 1, "", "embed"], [97, 4, 1, "", "embeddings"], [97, 3, 1, "", "empty"], [97, 3, 1, "", "evaluate"], [97, 3, 1, "", "extend"], [97, 3, 1, "", "find"], [97, 3, 1, "", "flatten"], [97, 3, 1, "", "from_base64"], [97, 3, 1, "", "from_bytes"], [97, 3, 1, "", "from_csv"], [97, 3, 1, "", "from_dataframe"], [97, 3, 1, "", "from_dict"], [97, 3, 1, "", "from_files"], [97, 3, 1, "", "from_huggingface_datasets"], [97, 3, 1, "", "from_json"], [97, 3, 1, "", "from_lines"], [97, 3, 1, "", "from_list"], [97, 3, 1, "", "from_ndarray"], [97, 3, 1, "", "from_ndjson"], [97, 3, 1, "", "from_protobuf"], [97, 3, 1, "", "from_pydantic_model"], [97, 3, 1, "", "from_strawberry_type"], [97, 3, 1, "", "get_json_schema"], [97, 3, 1, "", "get_vocabulary"], [97, 3, 1, "", "index"], [97, 3, 1, "", "insert"], [97, 3, 1, "", "load"], [97, 3, 1, "", "load_binary"], [97, 3, 1, "", "load_csv"], [97, 3, 1, "", "load_json"], [97, 3, 1, "", "map"], [97, 3, 1, "", "map_batch"], [97, 3, 1, "", "match"], [97, 4, 1, "", "name"], [97, 3, 1, "", "plot_embeddings"], [97, 3, 1, "", "plot_image_sprites"], [97, 3, 1, "", "pop"], [97, 3, 1, "", "post"], [97, 3, 1, "", "pull"], [97, 3, 1, "", "push"], [97, 3, 1, "", "reduce"], [97, 3, 1, "", "reduce_all"], [97, 3, 1, "", "remove"], [97, 3, 1, "", "reverse"], [97, 3, 1, "", "sample"], [97, 3, 1, "", "save"], [97, 3, 1, "", "save_binary"], [97, 3, 1, "", "save_csv"], [97, 3, 1, "", "save_embeddings_csv"], [97, 3, 1, "", "save_gif"], [97, 3, 1, "", "save_json"], [97, 3, 1, "", "shuffle"], [97, 3, 1, "", "split_by_tag"], [97, 3, 1, "", "summary"], [97, 4, 1, "", "tensors"], [97, 4, 1, "", "texts"], [97, 3, 1, "", "to_base64"], [97, 3, 1, "", "to_bytes"], [97, 3, 1, "", "to_dataframe"], [97, 3, 1, "", "to_dict"], [97, 3, 1, "", "to_json"], [97, 3, 1, "", "to_list"], [97, 3, 1, "", "to_protobuf"], [97, 3, 1, "", "to_pydantic_model"], [97, 3, 1, "", "to_strawberry_type"], [97, 3, 1, "", "traverse"], [97, 3, 1, "", "traverse_flat"], [97, 3, 1, "", "traverse_flat_per_path"]], "docarray.array.weaviate.WeaviateConfig": [[97, 2, 1, "", "cleanup_interval_seconds"], [97, 2, 1, "", "columns"], [97, 2, 1, "", "distance"], [97, 2, 1, "", "dynamic_ef_factor"], [97, 2, 1, "", "dynamic_ef_max"], [97, 2, 1, "", "dynamic_ef_min"], [97, 2, 1, "", "ef"], [97, 2, 1, "", "ef_construction"], [97, 2, 1, "", "flat_search_cutoff"], [97, 2, 1, "", "host"], [97, 2, 1, "", "max_connections"], [97, 2, 1, "", "n_dim"], [97, 2, 1, "", "name"], [97, 2, 1, "", "port"], [97, 2, 1, "", "protocol"], [97, 2, 1, "", "serialize_config"], [97, 2, 1, "", "skip"], [97, 2, 1, "", "timeout_config"], [97, 2, 1, "", "vector_cache_max_objects"]], "docarray.base": [[98, 1, 1, "", "BaseDCType"]], "docarray.base.BaseDCType": [[98, 3, 1, "", "clear"], [98, 3, 1, "", "copy_from"], [98, 4, 1, "", "nbytes"], [98, 4, 1, "", "non_empty_fields"], [98, 3, 1, "", "pop"]], "docarray.dataclasses": [[100, 0, 0, "-", "getter"], [101, 0, 0, "-", "setter"], [102, 0, 0, "-", "types"]], "docarray.dataclasses.getter": [[100, 5, 1, "", "audio_getter"], [100, 5, 1, "", "blob_getter"], [100, 5, 1, "", "image_getter"], [100, 5, 1, "", "json_getter"], [100, 5, 1, "", "mesh_getter"], [100, 5, 1, "", "tabular_getter"], [100, 5, 1, "", "text_getter"], [100, 5, 1, "", "video_getter"]], "docarray.dataclasses.setter": [[101, 5, 1, "", "audio_setter"], [101, 5, 1, "", "blob_setter"], [101, 5, 1, "", "image_setter"], [101, 5, 1, "", "json_setter"], [101, 5, 1, "", "mesh_setter"], [101, 5, 1, "", "tabular_setter"], [101, 5, 1, "", "text_setter"], [101, 5, 1, "", "video_setter"]], "docarray.dataclasses.types": [[102, 5, 1, "", "dataclass"], [102, 5, 1, "", "field"], [102, 5, 1, "", "is_multimodal"]], "docarray.document": [[103, 1, 1, "", "Document"], [104, 0, 0, "-", "data"], [105, 0, 0, "-", "generators"], [106, 0, 0, "-", "mixins"], [128, 0, 0, "-", "pydantic_model"]], "docarray.document.Document": [[103, 4, 1, "", "adjacency"], [103, 4, 1, "", "blob"], [103, 4, 1, "", "chunks"], [103, 3, 1, "", "clear"], [103, 4, 1, "", "content"], [103, 4, 1, "", "content_hash"], [103, 4, 1, "", "content_type"], [103, 3, 1, "", "convert_blob_to_datauri"], [103, 3, 1, "", "convert_blob_to_image_tensor"], [103, 3, 1, "", "convert_blob_to_tensor"], [103, 3, 1, "", "convert_content_to_datauri"], [103, 3, 1, "", "convert_image_tensor_to_blob"], [103, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [103, 3, 1, "", "convert_image_tensor_to_uri"], [103, 3, 1, "", "convert_tensor_to_blob"], [103, 3, 1, "", "convert_tensor_to_text"], [103, 3, 1, "", "convert_text_to_datauri"], [103, 3, 1, "", "convert_text_to_tensor"], [103, 3, 1, "", "convert_uri_to_datauri"], [103, 3, 1, "", "copy_from"], [103, 3, 1, "", "display"], [103, 3, 1, "", "embed"], [103, 3, 1, "", "embed_feature_hashing"], [103, 4, 1, "", "embedding"], [103, 4, 1, "", "evaluations"], [103, 3, 1, "", "from_base64"], [103, 3, 1, "", "from_bytes"], [103, 3, 1, "", "from_dict"], [103, 3, 1, "", "from_json"], [103, 3, 1, "", "from_protobuf"], [103, 3, 1, "", "from_pydantic_model"], [103, 3, 1, "", "from_strawberry_type"], [103, 3, 1, "", "get_json_schema"], [103, 3, 1, "", "get_multi_modal_attribute"], [103, 3, 1, "", "get_vocabulary"], [103, 4, 1, "", "granularity"], [103, 4, 1, "", "id"], [103, 4, 1, "", "is_multimodal"], [103, 3, 1, "", "load_pil_image_to_datauri"], [103, 3, 1, "", "load_uri_to_audio_tensor"], [103, 3, 1, "", "load_uri_to_blob"], [103, 3, 1, "", "load_uri_to_image_tensor"], [103, 3, 1, "", "load_uri_to_point_cloud_tensor"], [103, 3, 1, "", "load_uri_to_text"], [103, 3, 1, "", "load_uri_to_video_tensor"], [103, 4, 1, "", "location"], [103, 3, 1, "", "match"], [103, 4, 1, "", "matches"], [103, 4, 1, "", "mime_type"], [103, 4, 1, "", "modality"], [103, 4, 1, "", "nbytes"], [103, 4, 1, "", "non_empty_fields"], [103, 4, 1, "", "offset"], [103, 4, 1, "", "parent_id"], [103, 3, 1, "", "plot_matches_sprites"], [103, 3, 1, "", "pop"], [103, 3, 1, "", "post"], [103, 3, 1, "", "save_audio_tensor_to_file"], [103, 3, 1, "", "save_blob_to_file"], [103, 3, 1, "", "save_image_tensor_to_file"], [103, 3, 1, "", "save_uri_to_file"], [103, 3, 1, "", "save_video_tensor_to_file"], [103, 4, 1, "", "scores"], [103, 3, 1, "", "set_image_tensor_channel_axis"], [103, 3, 1, "", "set_image_tensor_inv_normalization"], [103, 3, 1, "", "set_image_tensor_normalization"], [103, 3, 1, "", "set_image_tensor_shape"], [103, 3, 1, "", "set_multi_modal_attribute"], [103, 3, 1, "", "summary"], [103, 4, 1, "", "tags"], [103, 4, 1, "", "tensor"], [103, 4, 1, "", "text"], [103, 3, 1, "", "to_base64"], [103, 3, 1, "", "to_bytes"], [103, 3, 1, "", "to_dict"], [103, 3, 1, "", "to_json"], [103, 3, 1, "", "to_protobuf"], [103, 3, 1, "", "to_pydantic_model"], [103, 3, 1, "", "to_strawberry_type"], [103, 4, 1, "", "uri"], [103, 4, 1, "", "weight"]], "docarray.document.data": [[104, 1, 1, "", "DocumentData"]], "docarray.document.data.DocumentData": [[104, 2, 1, "", "adjacency"], [104, 2, 1, "", "blob"], [104, 2, 1, "", "chunks"], [104, 2, 1, "", "content"], [104, 2, 1, "", "embedding"], [104, 2, 1, "", "evaluations"], [104, 2, 1, "", "granularity"], [104, 2, 1, "", "id"], [104, 2, 1, "", "location"], [104, 2, 1, "", "matches"], [104, 2, 1, "", "mime_type"], [104, 2, 1, "", "modality"], [104, 2, 1, "", "offset"], [104, 2, 1, "", "parent_id"], [104, 2, 1, "", "scores"], [104, 2, 1, "", "tags"], [104, 2, 1, "", "tensor"], [104, 2, 1, "", "text"], [104, 2, 1, "", "uri"], [104, 2, 1, "", "weight"]], "docarray.document.generators": [[105, 5, 1, "", "from_csv"], [105, 5, 1, "", "from_files"], [105, 5, 1, "", "from_huggingface_datasets"], [105, 5, 1, "", "from_lines"], [105, 5, 1, "", "from_ndarray"], [105, 5, 1, "", "from_ndjson"]], "docarray.document.mixins": [[106, 1, 1, "", "AllMixins"], [107, 0, 0, "-", "attribute"], [108, 0, 0, "-", "audio"], [109, 0, 0, "-", "blob"], [110, 0, 0, "-", "content"], [111, 0, 0, "-", "convert"], [112, 0, 0, "-", "dump"], [113, 0, 0, "-", "featurehash"], [114, 0, 0, "-", "helper"], [115, 0, 0, "-", "image"], [116, 0, 0, "-", "mesh"], [117, 0, 0, "-", "multimodal"], [118, 0, 0, "-", "plot"], [119, 0, 0, "-", "porting"], [120, 0, 0, "-", "property"], [121, 0, 0, "-", "protobuf"], [122, 0, 0, "-", "pydantic"], [123, 0, 0, "-", "rich_embedding"], [124, 0, 0, "-", "strawberry"], [125, 0, 0, "-", "sugar"], [126, 0, 0, "-", "text"], [127, 0, 0, "-", "video"]], "docarray.document.mixins.AllMixins": [[106, 4, 1, "", "adjacency"], [106, 4, 1, "", "blob"], [106, 4, 1, "", "chunks"], [106, 4, 1, "", "content"], [106, 4, 1, "", "content_hash"], [106, 4, 1, "", "content_type"], [106, 3, 1, "", "convert_blob_to_datauri"], [106, 3, 1, "", "convert_blob_to_image_tensor"], [106, 3, 1, "", "convert_blob_to_tensor"], [106, 3, 1, "", "convert_content_to_datauri"], [106, 3, 1, "", "convert_image_tensor_to_blob"], [106, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [106, 3, 1, "", "convert_image_tensor_to_uri"], [106, 3, 1, "", "convert_tensor_to_blob"], [106, 3, 1, "", "convert_tensor_to_text"], [106, 3, 1, "", "convert_text_to_datauri"], [106, 3, 1, "", "convert_text_to_tensor"], [106, 3, 1, "", "convert_uri_to_datauri"], [106, 3, 1, "", "display"], [106, 3, 1, "", "embed"], [106, 3, 1, "", "embed_feature_hashing"], [106, 4, 1, "", "embedding"], [106, 4, 1, "", "evaluations"], [106, 3, 1, "", "from_base64"], [106, 3, 1, "", "from_bytes"], [106, 3, 1, "", "from_dict"], [106, 3, 1, "", "from_json"], [106, 3, 1, "", "from_protobuf"], [106, 3, 1, "", "from_pydantic_model"], [106, 3, 1, "", "from_strawberry_type"], [106, 3, 1, "", "get_json_schema"], [106, 3, 1, "", "get_multi_modal_attribute"], [106, 3, 1, "", "get_vocabulary"], [106, 4, 1, "", "granularity"], [106, 4, 1, "", "id"], [106, 4, 1, "", "is_multimodal"], [106, 3, 1, "", "load_pil_image_to_datauri"], [106, 3, 1, "", "load_uri_to_audio_tensor"], [106, 3, 1, "", "load_uri_to_blob"], [106, 3, 1, "", "load_uri_to_image_tensor"], [106, 3, 1, "", "load_uri_to_point_cloud_tensor"], [106, 3, 1, "", "load_uri_to_text"], [106, 3, 1, "", "load_uri_to_video_tensor"], [106, 4, 1, "", "location"], [106, 3, 1, "", "match"], [106, 4, 1, "", "matches"], [106, 4, 1, "", "mime_type"], [106, 4, 1, "", "modality"], [106, 4, 1, "", "offset"], [106, 4, 1, "", "parent_id"], [106, 3, 1, "", "plot_matches_sprites"], [106, 3, 1, "", "post"], [106, 3, 1, "", "save_audio_tensor_to_file"], [106, 3, 1, "", "save_blob_to_file"], [106, 3, 1, "", "save_image_tensor_to_file"], [106, 3, 1, "", "save_uri_to_file"], [106, 3, 1, "", "save_video_tensor_to_file"], [106, 4, 1, "", "scores"], [106, 3, 1, "", "set_image_tensor_channel_axis"], [106, 3, 1, "", "set_image_tensor_inv_normalization"], [106, 3, 1, "", "set_image_tensor_normalization"], [106, 3, 1, "", "set_image_tensor_shape"], [106, 3, 1, "", "set_multi_modal_attribute"], [106, 3, 1, "", "summary"], [106, 4, 1, "", "tags"], [106, 4, 1, "", "tensor"], [106, 4, 1, "", "text"], [106, 3, 1, "", "to_base64"], [106, 3, 1, "", "to_bytes"], [106, 3, 1, "", "to_dict"], [106, 3, 1, "", "to_json"], [106, 3, 1, "", "to_protobuf"], [106, 3, 1, "", "to_pydantic_model"], [106, 3, 1, "", "to_strawberry_type"], [106, 4, 1, "", "uri"], [106, 4, 1, "", "weight"]], "docarray.document.mixins.attribute": [[107, 1, 1, "", "GetAttributesMixin"]], "docarray.document.mixins.audio": [[108, 1, 1, "", "AudioDataMixin"]], "docarray.document.mixins.audio.AudioDataMixin": [[108, 3, 1, "", "load_uri_to_audio_tensor"], [108, 3, 1, "", "save_audio_tensor_to_file"]], "docarray.document.mixins.blob": [[109, 1, 1, "", "BlobDataMixin"]], "docarray.document.mixins.blob.BlobDataMixin": [[109, 3, 1, "", "convert_blob_to_datauri"], [109, 3, 1, "", "load_uri_to_blob"], [109, 3, 1, "", "save_blob_to_file"]], "docarray.document.mixins.content": [[110, 1, 1, "", "ContentPropertyMixin"]], "docarray.document.mixins.content.ContentPropertyMixin": [[110, 4, 1, "", "content_hash"], [110, 3, 1, "", "convert_content_to_datauri"]], "docarray.document.mixins.convert": [[111, 1, 1, "", "ConvertMixin"]], "docarray.document.mixins.convert.ConvertMixin": [[111, 3, 1, "", "convert_blob_to_tensor"], [111, 3, 1, "", "convert_tensor_to_blob"], [111, 3, 1, "", "convert_uri_to_datauri"]], "docarray.document.mixins.dump": [[112, 1, 1, "", "UriFileMixin"]], "docarray.document.mixins.dump.UriFileMixin": [[112, 3, 1, "", "save_uri_to_file"]], "docarray.document.mixins.featurehash": [[113, 1, 1, "", "FeatureHashMixin"]], "docarray.document.mixins.featurehash.FeatureHashMixin": [[113, 3, 1, "", "embed_feature_hashing"]], "docarray.document.mixins.image": [[115, 1, 1, "", "ImageDataMixin"]], "docarray.document.mixins.image.ImageDataMixin": [[115, 3, 1, "", "convert_blob_to_image_tensor"], [115, 3, 1, "", "convert_image_tensor_to_blob"], [115, 3, 1, "", "convert_image_tensor_to_sliding_windows"], [115, 3, 1, "", "convert_image_tensor_to_uri"], [115, 3, 1, "", "load_pil_image_to_datauri"], [115, 3, 1, "", "load_uri_to_image_tensor"], [115, 3, 1, "", "save_image_tensor_to_file"], [115, 3, 1, "", "set_image_tensor_channel_axis"], [115, 3, 1, "", "set_image_tensor_inv_normalization"], [115, 3, 1, "", "set_image_tensor_normalization"], [115, 3, 1, "", "set_image_tensor_shape"]], "docarray.document.mixins.mesh": [[116, 1, 1, "", "MeshDataMixin"]], "docarray.document.mixins.mesh.MeshDataMixin": [[116, 3, 1, "", "load_uri_to_point_cloud_tensor"]], "docarray.document.mixins.multimodal": [[117, 1, 1, "", "MultiModalMixin"]], "docarray.document.mixins.multimodal.MultiModalMixin": [[117, 3, 1, "", "get_multi_modal_attribute"], [117, 4, 1, "", "is_multimodal"], [117, 3, 1, "", "set_multi_modal_attribute"]], "docarray.document.mixins.plot": [[118, 1, 1, "", "PlotMixin"]], "docarray.document.mixins.plot.PlotMixin": [[118, 3, 1, "", "display"], [118, 3, 1, "", "plot_matches_sprites"], [118, 3, 1, "", "summary"]], "docarray.document.mixins.porting": [[119, 1, 1, "", "PortingMixin"]], "docarray.document.mixins.porting.PortingMixin": [[119, 3, 1, "", "from_base64"], [119, 3, 1, "", "from_bytes"], [119, 3, 1, "", "from_dict"], [119, 3, 1, "", "from_json"], [119, 3, 1, "", "to_base64"], [119, 3, 1, "", "to_bytes"], [119, 3, 1, "", "to_dict"], [119, 3, 1, "", "to_json"]], "docarray.document.mixins.property": [[120, 1, 1, "", "PropertyMixin"]], "docarray.document.mixins.property.PropertyMixin": [[120, 4, 1, "", "adjacency"], [120, 4, 1, "", "blob"], [120, 4, 1, "", "chunks"], [120, 4, 1, "", "content"], [120, 4, 1, "", "content_type"], [120, 4, 1, "", "embedding"], [120, 4, 1, "", "evaluations"], [120, 4, 1, "", "granularity"], [120, 4, 1, "", "id"], [120, 4, 1, "", "location"], [120, 4, 1, "", "matches"], [120, 4, 1, "", "mime_type"], [120, 4, 1, "", "modality"], [120, 4, 1, "", "offset"], [120, 4, 1, "", "parent_id"], [120, 4, 1, "", "scores"], [120, 4, 1, "", "tags"], [120, 4, 1, "", "tensor"], [120, 4, 1, "", "text"], [120, 4, 1, "", "uri"], [120, 4, 1, "", "weight"]], "docarray.document.mixins.protobuf": [[121, 1, 1, "", "ProtobufMixin"]], "docarray.document.mixins.protobuf.ProtobufMixin": [[121, 3, 1, "", "from_protobuf"], [121, 3, 1, "", "to_protobuf"]], "docarray.document.mixins.pydantic": [[122, 1, 1, "", "PydanticMixin"]], "docarray.document.mixins.pydantic.PydanticMixin": [[122, 3, 1, "", "from_pydantic_model"], [122, 3, 1, "", "get_json_schema"], [122, 3, 1, "", "to_pydantic_model"]], "docarray.document.mixins.rich_embedding": [[123, 1, 1, "", "ColorBoxEmbedding"]], "docarray.document.mixins.strawberry": [[124, 1, 1, "", "StrawberryMixin"]], "docarray.document.mixins.strawberry.StrawberryMixin": [[124, 3, 1, "", "from_strawberry_type"], [124, 3, 1, "", "to_strawberry_type"]], "docarray.document.mixins.sugar": [[125, 1, 1, "", "SingletonSugarMixin"]], "docarray.document.mixins.sugar.SingletonSugarMixin": [[125, 3, 1, "", "embed"], [125, 3, 1, "", "match"], [125, 3, 1, "", "post"]], "docarray.document.mixins.text": [[126, 1, 1, "", "TextDataMixin"]], "docarray.document.mixins.text.TextDataMixin": [[126, 3, 1, "", "convert_tensor_to_text"], [126, 3, 1, "", "convert_text_to_datauri"], [126, 3, 1, "", "convert_text_to_tensor"], [126, 3, 1, "", "get_vocabulary"], [126, 3, 1, "", "load_uri_to_text"]], "docarray.document.mixins.video": [[127, 1, 1, "", "VideoDataMixin"]], "docarray.document.mixins.video.VideoDataMixin": [[127, 3, 1, "", "load_uri_to_video_tensor"], [127, 3, 1, "", "save_video_tensor_to_file"]], "docarray.document.pydantic_model": [[128, 1, 1, "", "PydanticDocument"]], "docarray.document.pydantic_model.PydanticDocument": [[128, 1, 1, "", "Config"], [128, 2, 1, "", "adjacency"], [128, 2, 1, "", "blob"], [128, 2, 1, "", "chunks"], [128, 3, 1, "", "construct"], [128, 3, 1, "", "copy"], [128, 3, 1, "", "dict"], [128, 2, 1, "", "embedding"], [128, 2, 1, "", "evaluations"], [128, 3, 1, "", "from_orm"], [128, 2, 1, "", "granularity"], [128, 2, 1, "", "id"], [128, 3, 1, "", "json"], [128, 2, 1, "", "location"], [128, 2, 1, "", "matches"], [128, 2, 1, "", "mime_type"], [128, 2, 1, "", "modality"], [128, 2, 1, "", "offset"], [128, 2, 1, "", "parent_id"], [128, 3, 1, "", "parse_file"], [128, 3, 1, "", "parse_obj"], [128, 3, 1, "", "parse_raw"], [128, 3, 1, "", "schema"], [128, 3, 1, "", "schema_json"], [128, 2, 1, "", "scores"], [128, 2, 1, "", "tags"], [128, 2, 1, "", "tensor"], [128, 2, 1, "", "text"], [128, 3, 1, "", "update_forward_refs"], [128, 2, 1, "", "uri"], [128, 3, 1, "", "validate"], [128, 2, 1, "", "weight"]], "docarray.document.pydantic_model.PydanticDocument.Config": [[128, 2, 1, "", "smart_union"]], "docarray.helper": [[130, 5, 1, "", "add_protocol_and_compress_to_file_path"], [130, 1, 1, "", "cached_property"], [130, 5, 1, "", "compress_bytes"], [130, 5, 1, "", "dataclass_from_dict"], [130, 5, 1, "", "decompress_bytes"], [130, 5, 1, "", "deprecate_by"], [130, 5, 1, "", "download_mermaid_url"], [130, 5, 1, "", "dunder_get"], [130, 5, 1, "", "filter_dict"], [130, 5, 1, "", "get_ci_vendor"], [130, 5, 1, "", "get_compress_ctx"], [130, 5, 1, "", "get_full_version"], [130, 5, 1, "", "get_request_header"], [130, 5, 1, "", "protocol_and_compress_from_file_path"], [130, 5, 1, "", "random_identity"], [130, 5, 1, "", "random_port"], [130, 5, 1, "", "random_uuid"], [130, 5, 1, "", "reset_ports"], [130, 5, 1, "", "typename"]], "docarray.math": [[132, 0, 0, "-", "distance"], [137, 0, 0, "-", "evaluation"], [138, 0, 0, "-", "helper"], [139, 0, 0, "-", "ndarray"]], "docarray.math.distance": [[132, 5, 1, "", "cdist"], [133, 0, 0, "-", "numpy"], [132, 5, 1, "", "pdist"], [135, 0, 0, "-", "tensorflow"], [136, 0, 0, "-", "torch"]], "docarray.math.distance.numpy": [[133, 5, 1, "", "cosine"], [133, 5, 1, "", "euclidean"], [133, 5, 1, "", "sparse_cosine"], [133, 5, 1, "", "sparse_euclidean"], [133, 5, 1, "", "sparse_sqeuclidean"], [133, 5, 1, "", "sqeuclidean"]], "docarray.math.distance.tensorflow": [[135, 5, 1, "", "cosine"], [135, 5, 1, "", "euclidean"], [135, 5, 1, "", "sqeuclidean"]], "docarray.math.distance.torch": [[136, 5, 1, "", "cosine"], [136, 5, 1, "", "euclidean"], [136, 5, 1, "", "sqeuclidean"]], "docarray.math.evaluation": [[137, 5, 1, "", "average_precision"], [137, 5, 1, "", "dcg_at_k"], [137, 5, 1, "", "f1_score_at_k"], [137, 5, 1, "", "hit_at_k"], [137, 5, 1, "", "ndcg_at_k"], [137, 5, 1, "", "precision_at_k"], [137, 5, 1, "", "r_precision"], [137, 5, 1, "", "recall_at_k"], [137, 5, 1, "", "reciprocal_rank"]], "docarray.math.helper": [[138, 5, 1, "", "minmax_normalize"], [138, 5, 1, "", "top_k"], [138, 5, 1, "", "update_rows_x_mat_best"]], "docarray.math.ndarray": [[139, 5, 1, "", "check_arraylike_equality"], [139, 5, 1, "", "detach_tensor_if_present"], [139, 5, 1, "", "get_array_rows"], [139, 5, 1, "", "get_array_type"], [139, 5, 1, "", "ravel"], [139, 5, 1, "", "to_list"], [139, 5, 1, "", "to_numpy_array"], [139, 5, 1, "", "unravel"]], "docarray.proto": [[141, 0, 0, "-", "docarray_pb2"], [142, 0, 0, "-", "io"]], "docarray.proto.io": [[142, 5, 1, "", "flush_proto"], [143, 0, 0, "-", "ndarray"], [142, 5, 1, "", "parse_proto"]], "docarray.proto.io.ndarray": [[143, 5, 1, "", "flush_ndarray"], [143, 5, 1, "", "read_ndarray"]], "docarray.score": [[144, 1, 1, "", "NamedScore"], [145, 0, 0, "-", "data"], [146, 0, 0, "-", "mixins"]], "docarray.score.NamedScore": [[144, 3, 1, "", "clear"], [144, 3, 1, "", "copy_from"], [144, 4, 1, "", "description"], [144, 4, 1, "", "nbytes"], [144, 4, 1, "", "non_empty_fields"], [144, 4, 1, "", "op_name"], [144, 3, 1, "", "pop"], [144, 4, 1, "", "ref_id"], [144, 3, 1, "", "to_dict"], [144, 4, 1, "", "value"]], "docarray.score.data": [[145, 1, 1, "", "NamedScoreData"]], "docarray.score.data.NamedScoreData": [[145, 2, 1, "", "description"], [145, 2, 1, "", "op_name"], [145, 2, 1, "", "ref_id"], [145, 2, 1, "", "value"]], "docarray.score.mixins": [[146, 1, 1, "", "AllMixins"], [147, 0, 0, "-", "property"], [148, 0, 0, "-", "representer"]], "docarray.score.mixins.AllMixins": [[146, 4, 1, "", "description"], [146, 4, 1, "", "op_name"], [146, 4, 1, "", "ref_id"], [146, 3, 1, "", "to_dict"], [146, 4, 1, "", "value"]], "docarray.score.mixins.property": [[147, 1, 1, "", "PropertyMixin"]], "docarray.score.mixins.property.PropertyMixin": [[147, 4, 1, "", "description"], [147, 4, 1, "", "op_name"], [147, 4, 1, "", "ref_id"], [147, 4, 1, "", "value"]], "docarray.score.mixins.representer": [[148, 1, 1, "", "RepresentMixin"]], "docarray.score.mixins.representer.RepresentMixin": [[148, 3, 1, "", "to_dict"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:property", "5": "py:function", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"annlit": [0, 14, 59, 60, 61, 62, 63, 64], "usag": [0, 2, 5, 6, 8], "config": [0, 2, 4, 5, 6, 8, 161], "vector": [0, 2, 4, 5, 8], "search": [0, 1, 2, 4, 5, 7, 156, 158], "filter": [0, 2, 4, 5, 8, 178], "exampl": [0, 4, 5, 8, 9, 152, 154, 180], "find": [0, 3, 5, 8, 29, 61, 72, 77, 82, 94, 156, 167, 180], "onli": [0, 8], "queri": [0, 2, 8, 178, 180], "One": 1, "million": 1, "scale": [1, 186], "benchmark": 1, "result": [1, 8, 185], "setup": 1, "set": [1, 8], "nearest": [1, 167, 180], "neighbour": [1, 167, 180], "rational": 1, "experi": 1, "design": [1, 188], "incomplet": 1, "store": [1, 3, 4, 7, 11], "conclus": 1, "elasticsearch": 2, "start": [2, 5, 8], "elast": [2, 18, 70, 71, 72, 73, 74], "servic": [2, 5, 8, 162, 186], "creat": [2, 3, 5, 8, 164], "documentarrai": [2, 3, 5, 8, 11, 151, 160, 167, 175, 179, 185, 187], "backend": [2, 3, 4, 5, 8, 60, 66, 71, 76, 81, 88, 93, 151, 181], "secur": 2, "connect": 2, "bulk": 2, "request": [2, 3], "custom": 2, "note": 2, "text": [2, 51, 126, 158, 162], "field": [2, 151, 160, 161, 185], "tag": [2, 174], "add": [3, 151], "new": [3, 164], "document": [3, 4, 7, 11, 17, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 151, 156, 158, 160, 161, 166, 167, 169, 174, 175, 177, 185, 187, 190, 191], "step": 3, "1": [3, 152, 153, 155, 156, 157, 158, 159], "folder": 3, "2": [3, 151, 152, 153, 155, 156, 158, 159], "implement": 3, "getsetdel": [3, 62, 67, 73, 78, 83, 89, 95], "py": 3, "3": [3, 151, 152, 153, 155, 156, 158, 159], "seqlik": [3, 64, 69, 74, 79, 85, 91, 96], "4": [3, 151, 152, 153, 155, 156, 158, 159], "5": [3, 151, 152, 153, 155, 156, 157, 158, 159], "6": [3, 152, 153, 156, 157, 159], "summar": 3, "everyth": 3, "__init__": 3, "7": [3, 152, 155, 156, 158, 159], "subclass": 3, "from": [3, 161, 165, 166, 171, 175, 183], "8": [3, 152, 155, 156, 158, 159], "entrypoint": 3, "On": [3, 167], "pull": 3, "test": 3, "type": [3, 102, 149, 156, 160, 164, 180, 190, 191], "hint": 3, "construct": [4, 7, 161, 166, 175], "subindic": [4, 7, 156], "summari": [4, 184, 186], "known": 4, "limit": [4, 185], "multipl": [4, 160, 167, 175, 178], "refer": 4, "same": 4, "storag": [4, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 151], "out": [4, 186], "arrai": [4, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 175], "modif": 4, "element": [4, 175], "access": [4, 156, 160, 165, 173, 174], "i": [4, 163, 180, 188], "slower": 4, "qdrant": [5, 53, 80, 81, 82, 83, 84, 85], "minimum": [5, 8], "sqlite": [6, 57, 87, 88, 89, 90, 91], "modifi": 7, "through": 7, "weaviat": [8, 92, 93, 94, 95, 96, 97], "sort": 8, "certainti": 8, "includ": 8, "addit": 8, "properti": [8, 120, 147], "return": [8, 160, 180, 185], "graphql": 9, "basic": [9, 174], "integr": 9, "fastapi": [9, 185], "pytorch": 10, "deep": [10, 175], "learn": 10, "framework": 10, "load": [10, 152, 153, 157, 159, 165], "map": 10, "batch": [10, 174], "one": 10, "shot": 10, "python": 11, "api": [11, 151], "docarrai": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 185, 188, 189, 190, 191], "dataclass": [11, 99, 100, 101, 102, 151, 156, 160, 161, 163], "packag": [12, 13, 21, 23, 33, 54, 58, 59, 65, 70, 75, 80, 87, 92, 99, 103, 106, 131, 132, 140, 142, 144, 146, 149, 155, 186], "subpackag": [12, 13, 21, 58, 103, 131, 140, 144], "submodul": [12, 13, 21, 23, 33, 54, 58, 59, 65, 70, 75, 80, 87, 92, 99, 103, 106, 131, 132, 140, 142, 144, 146], "modul": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], "content": [12, 13, 21, 22, 23, 33, 54, 58, 59, 65, 70, 75, 80, 87, 92, 99, 103, 106, 110, 131, 132, 140, 142, 144, 146, 149, 151, 165, 173, 187, 190, 191], "base": [15, 65, 66, 67, 68, 69, 98], "chunk": [16, 158], "match": [19, 42, 158, 177, 180, 184], "memori": [20, 75, 76, 77, 78, 79], "mixin": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 146, 147, 148], "dataload": [23, 24], "helper": [24, 63, 68, 84, 90, 114, 130, 138, 174], "delitem": 25, "emb": [26, 156, 162, 176], "empti": [27, 166, 175], "evalu": [28, 137, 177], "getattr": 30, "getitem": 31, "group": 32, "io": [33, 34, 35, 36, 37, 38, 39, 40, 41, 142, 143], "binari": [34, 183], "common": 35, "csv": [36, 157], "datafram": [37, 183], "from_gen": 38, "json": [39, 151, 171, 183, 185], "pbar": 40, "pushpul": 41, "parallel": [43, 181], "plot": [44, 118, 184], "post": 45, "pydant": [46, 122, 168, 185], "reduc": 47, "sampl": [48, 174], "setitem": 49, "strawberri": [50, 124, 168], "travers": 52, "queryset": [54, 55, 56], "lookup": 55, "parser": 56, "registri": 86, "getter": 100, "setter": 101, "data": [104, 145, 152, 153, 156, 159, 165], "gener": [105, 156], "attribut": [107, 165, 166, 173], "audio": [108, 152], "blob": 109, "convert": [111, 158, 165, 168, 185], "dump": 112, "featurehash": [113, 168], "imag": [115, 153, 162, 184, 187], "mesh": [116, 155], "multimod": 117, "port": [119, 168], "protobuf": [121, 168, 171, 183, 191], "rich_embed": 123, "sugar": 125, "video": [127, 159], "pydantic_model": 128, "strawberry_typ": 129, "math": [131, 132, 133, 134, 135, 136, 137, 138, 139], "distanc": [132, 133, 134, 135, 136], "numpi": 133, "paddl": 134, "tensorflow": 135, "torch": 136, "ndarrai": [139, 143, 158, 173], "proto": [140, 141, 142, 143, 190, 191], "docarray_pb2": 141, "score": [144, 145, 146, 147, 148], "represent": 148, "changelog": 151, "0": [151, 152, 153, 155, 156, 157, 158, 159], "11": [151, 152, 153, 158, 159], "chang": 151, "documentarrayinmemori": 151, "": [151, 161, 163, 166, 169, 170, 171, 174, 175, 179], "contain": 151, "list": [151, 156, 160, 175, 183], "10": [151, 152, 153], "high": 151, "level": [151, 158, 160], "serial": [151, 171, 183], "format": [151, 183], "default": 151, "dict": [151, 171], "strategi": 151, "name": 151, "svg": [152, 153, 155, 156, 157, 158, 159], "version": [152, 153, 155, 156, 157, 158, 159], "width": [152, 153, 155, 156, 157, 158, 159], "0em": [152, 153, 155, 156, 157, 158, 159], "height": [152, 153, 155, 156, 157, 158, 159], "class": [152, 153, 155, 156, 157, 158, 159, 161], "sd": [152, 153, 155, 156, 157, 158, 159], "octicon": [152, 153, 155, 156, 157, 158, 159], "unmut": 152, "viewbox": [152, 153, 155, 156, 157, 158, 159], "16": [152, 153, 155, 156, 157, 158, 159], "aria": [152, 153, 155, 156, 157, 158, 159], "hidden": [152, 153, 155, 156, 157, 158, 159], "true": [152, 153, 155, 156, 157, 158, 159], "path": [152, 153, 155, 156, 157, 158, 159], "fill": [152, 153, 155, 156, 157, 158, 159, 167], "rule": [152, 153, 155, 156, 157, 158, 159, 166], "evenodd": [152, 153, 155, 156, 157, 158, 159], "d": [152, 153, 155, 156, 157, 158, 159], "m7": [152, 156], "563": 152, "069a": 152, "75": [152, 153, 155, 156, 157, 158, 159], "018": 152, "75v10": [152, 153], "5a": [152, 153, 156, 159], "01": [152, 153, 155, 156, 157, 158], "238": 152, "57l3": 152, "472": 152, "11h1": 152, "75a1": [152, 153, 157, 159], "010": [152, 156, 157], "9": [152, 158], "25v": [152, 159], "5c0": [152, 153, 159], "784": [152, 153, 157, 159], "5h1": [152, 157, 158], "723l3": 152, "289": 152, "82a": 152, "801": 152, "111zm6": 152, "38l4": 152, "319a": 152, "488": [152, 158], "181h": 152, "2a": [152, 159], "25": [152, 153, 155, 156, 157, 159], "00": [152, 153, 155, 156, 157, 158, 159], "25v2": [152, 153], "138": [152, 153, 157, 159], "112": [152, 153, 157, 159], "25h2a": 152, "18l6": 152, "62v4": 152, "38zm6": 152, "096": 152, "038a": 152, "011": [152, 153, 156], "06": 152, "314": 152, "000": [152, 153, 159], "193": 152, "06v": 152, "001zm": 152, "121a": 152, "061": 152, "95": 152, "101": [152, 158], "07l": 152, "001": [152, 155, 158], "001z": 152, "wav": 152, "file": [152, 157, 159, 175], "save": [152, 157, 159], "other": [152, 174], "tool": 152, "librari": 152, "m1": 153, "25v10": 153, "25h": [153, 159], "94a": 153, "76": 153, "03": 153, "03l6": 153, "077": 153, "078a1": 153, "012": 153, "412": [153, 158], "06l14": 153, "31v2": 153, "75a": [153, 157, 159], "25h1": 153, "75zm12": 153, "11h4": 153, "81l5": 153, "048": 153, "047a": 153, "344": 153, "009l4": 153, "298": 153, "889v": 153, "917a": 153, "25zm1": 153, "0014": 153, "1h1": 153, "14": [153, 157], "216": [153, 157, 158, 159], "15": 153, "15h12": 153, "5a1": [153, 159], "0016": [153, 159], "13": [153, 158, 159], "25zm5": 153, "6a": 153, "0zm7": 153, "6a2": 153, "014": 153, "0z": 153, "simpl": [153, 158], "process": [153, 162, 181, 182], "displai": [153, 187], "sprite": [153, 184, 187], "segment": [153, 158], "larg": [153, 183], "complic": 153, "small": 153, "ones": 153, "m8": 155, "878": [155, 156], "392a1": [155, 156], "756": [155, 156], "0l": [155, 156], "045a1": 155, "951v6": 155, "098c0": 155, "624": 155, "332": [155, 158], "872": 155, "514l5": 155, "0l5": [155, 156], "045c": 155, "54": [155, 158], "313": 155, "89": 155, "514v4": 155, "951c0": 155, "514l8": 155, "392zm7": 155, "875": 155, "69a": [155, 156], "0l4": [155, 156], "63": [155, 156, 158], "685l8": 155, "133": 155, "245": 155, "375l4": 155, "685zm2": 155, "677v5": 155, "372c0": 155, "09": 155, "047": 155, "171": 155, "125": [155, 156], "216l4": 155, "625": 155, "683v8": 155, "432l2": 155, "677zm6": 155, "271l4": 155, "683a": 155, "216v5": 155, "677l8": 155, "432v5": 155, "516z": 155, "3d": 155, "point": 155, "cloud": [155, 183], "stack": 156, "122": 156, "003": 156, "902c": 156, "83": 156, "481": 156, "68": 156, "162l8": 156, "358a1": 156, "0l2": 156, "119": 156, "456a1": 156, "162l7": 156, "392zm8": 156, "685": 156, "685a": 156, "685zm1": 156, "601": 156, "789a": 156, "025": 156, "273l5": 156, "249": [156, 158], "044a": 156, "752": 156, "298l": 156, "248": 156, "044a1": 156, "0l1": 156, "874": 156, "814a": 156, "789zm0": 156, "273": 156, "025z": 156, "multi": [156, 158, 163], "modal": [156, 158, 160, 162, 163, 164], "model": [156, 185], "your": 156, "instanti": 156, "nest": [156, 160, 166, 170, 173, 174], "embed": [156, 167, 173, 184, 187], "each": 156, "parent": 156, "perform": 156, "combin": [156, 178], "tabl": [157, 184, 190, 191], "m0": 157, "75c0": 157, "0h12": 157, "5c15": 157, "75v3": 157, "585a": 157, "746": 157, "83v8": 157, "085a1": 157, "0114": 157, "16h6": 157, "309a": 157, "748": 157, "118": 157, "0h1": 157, "25v6": [157, 159], "165a": 157, "83v1": 157, "75zm1": 157, "5v7": 157, "25h5v": 157, "8h1": 157, "5zm5": 157, "5v1": 157, "25h5v5zm1": 157, "5v8h7": 157, "5h": 157, "8zm8": 157, "8v1": 157, "5h7": 157, "25v5z": 157, "typographi": 158, "m6": 158, "21": 158, "5l4": 158, "574": 158, "594": 158, "857": 158, "5h6": 158, "21zm": 158, "5l": 158, "829": 158, "487a": 158, "423": 158, "474l5": 158, "735": 158, "332a1": 158, "302": 158, "018l": 158, "39": 158, "688a": 158, "415": 158, "496l2": 158, "10h6": 158, "71zm3": 158, "358c10": 158, "53": 158, "374": 158, "87": 158, "4c1": 158, "939": 158, "601v5": 158, "649a": 158, "448": 158, "275c13": 158, "995": 158, "12": [158, 159], "82": 158, "13c": 158, "77": 158, "514": 158, "231": 158, "078": 158, "709": 158, "577": 158, "922": 158, "199": 158, "041": 158, "694": 158, "265": 158, "411": 158, "887": 158, "944c11": 158, "78": 158, "88": 158, "5v": 158, "899c0": 158, "869": 158, "528": 158, "282": 158, "84": 158, "858a": 158, "32": 158, "716zm14": 158, "9h13c": 158, "881": 158, "375": 158, "22": 158, "637": 158, "444": 158, "253": 158, "217": 158, "363": 158, "806": 158, "408": 158, "155": 158, "697": 158, "896": 158, "354": 158, "732": 158, "26": 158, "209": 158, "588": 158, "449": 158, "35": 158, "257": 158, "495": 158, "551v9z": 158, "long": 158, "back": 158, "via": [158, 162, 167, 176, 182], "featur": 158, "hash": 158, "subindex": 158, "devic": 159, "camera": 159, "m16": 159, "136": 159, "643l11": 159, "425v4": 159, "009": 159, "3h": 159, "75v6": 159, "13h7": 159, "0011": 159, "675l3": 159, "864": 159, "318a": 159, "5zm": 159, "075l3": 159, "1v": 159, "85l": 159, "1v1": 159, "65zm9": 159, "75v": 159, "25h7": 159, "5z": 159, "kei": 159, "frame": 159, "extract": 159, "select": 160, "slice": 160, "object": [160, 175, 185], "decor": 161, "annot": 161, "behavior": 161, "us": [161, 167, 181, 186], "advanc": 161, "what": [161, 163, 166, 169, 170, 171, 174, 175, 179, 180, 188], "next": [161, 163, 166, 169, 170, 171, 174, 175, 179], "clip": 162, "understand": 163, "problem": 163, "challeng": 163, "support": [164, 180, 189], "overrid": 164, "exist": 164, "uri": 165, "an": [166, 175], "unknown": 166, "handl": 166, "resolv": 166, "copi": [166, 175], "anoth": 166, "neural": [167, 176], "network": [167, 176, 181], "fluent": 168, "interfac": 168, "method": 168, "blobdata": 168, "imagedata": 168, "contentproperti": 168, "textdata": 168, "singletonsugar": 168, "audiodata": 168, "meshdata": 168, "videodata": 168, "urifil": 168, "structur": [170, 174], "arbitrari": 171, "byte": [171, 183], "base64": [171, 183], "visual": [172, 184], "selector": 173, "auto": 173, "ravel": 173, "dunder": 173, "syntax": 173, "sugari": 173, "index": 174, "id": 174, "boolean": 174, "mask": 174, "flatten": 174, "handi": 174, "shuffl": 174, "split": 174, "like": 175, "singl": 175, "local": [175, 186], "identifi": 177, "condit": 178, "oper": 178, "differ": 180, "between": [180, 185], "which": 180, "side": 180, "gpu": [180, 181], "when": 181, "choos": 181, "thread": 181, "map_batch": 181, "overlap": 181, "cpu": 181, "comput": 181, "why": 181, "129": 181, "128": 181, "time": 181, "extern": 182, "flow": 182, "executor": [182, 186], "accept": 182, "scheme": 182, "read": 182, "more": 182, "wire": 183, "pickl": 183, "disk": 183, "stream": 183, "projector": 184, "schema": 185, "valid": 185, "incom": 185, "respons": 185, "recurs": 185, "jina": [186, 188], "depend": 186, "direct": 186, "invok": 186, "hub": 186, "code": 186, "three": 186, "good": 186, "reason": 186, "A": 186, "client": 186, "server": 186, "architectur": 186, "share": 186, "reus": 186, "jupyt": 187, "notebook": 187, "colab": 187, "rich": 187, "pycharm": 187, "user": [187, 188], "compar": 188, "altern": 188, "To": 188, "huggingfac": 188, "dataset": 188, "awkwardarrai": 188, "zarr": 188, "welcom": 189, "instal": 189, "join": 189, "u": 189, "protocol": [190, 191], "densendarrayproto": [190, 191], "documentarrayproto": [190, 191], "documentproto": [190, 191], "evaluationsentri": [190, 191], "scoresentri": [190, 191], "namedscoreproto": [190, 191], "ndarrayproto": [190, 191], "sparsendarrayproto": [190, 191], "scalar": [190, 191], "valu": [190, 191], "rebuild": 191}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Annlite": [[0, "annlite"]], "Usage": [[0, "usage"], [2, "usage"], [5, "usage"], [6, "usage"], [8, "usage"]], "Config": [[0, "config"], [2, "config"], [5, "config"], [6, "config"], [8, "config"]], "Vector search with filter": [[0, "vector-search-with-filter"], [5, "vector-search-with-filter"]], "Example of .find with a filter only": [[0, "example-of-find-with-a-filter-only"], [8, "example-of-find-with-a-filter-only"]], "Example of .find with query vector and filter": [[0, "example-of-find-with-query-vector-and-filter"], [8, "example-of-find-with-query-vector-and-filter"]], "One Million Scale Benchmark": [[1, "one-million-scale-benchmark"]], "Benchmark result": [[1, "benchmark-result"]], "Benchmark setup": [[1, "benchmark-setup"]], "Settings of the nearest neighbour search": [[1, "settings-of-the-nearest-neighbour-search"]], "Rationale on the experiment design": [[1, "rationale-on-the-experiment-design"]], "Incompleteness on the stores": [[1, "incompleteness-on-the-stores"]], "Conclusion": [[1, "conclusion"]], "Elasticsearch": [[2, "elasticsearch"]], "Start Elastic service": [[2, "start-elastic-service"]], "Create DocumentArray with Elasticsearch backend": [[2, "create-documentarray-with-elasticsearch-backend"]], "Secure connection": [[2, "secure-connection"]], "Bulk request customization": [[2, "bulk-request-customization"]], "Note": [[2, null], [2, null]], "Vector search with filter query": [[2, "vector-search-with-filter-query"]], "Search by filter query": [[2, "search-by-filter-query"]], "Search by .text field": [[2, "search-by-text-field"]], "Search by .tags field": [[2, "search-by-tags-field"]], "Add New Document Store": [[3, "add-new-document-store"]], "Step 1: create the folder": [[3, "step-1-create-the-folder"]], "Step 2: implement getsetdel.py": [[3, "step-2-implement-getsetdel-py"]], "Step 3: implement seqlike.py": [[3, "step-3-implement-seqlike-py"]], "Step 4: implement backend.py": [[3, "step-4-implement-backend-py"]], "Step 5: implement find.py": [[3, "step-5-implement-find-py"]], "Step 6: summarize everything in __init__.py.": [[3, "step-6-summarize-everything-in-init-py"]], "Step 7: subclass from DocumentArray": [[3, "step-7-subclass-from-documentarray"]], "Step 8: add entrypoint to DocumentArray": [[3, "step-8-add-entrypoint-to-documentarray"]], "On pull request: add tests and type-hint": [[3, "on-pull-request-add-tests-and-type-hint"]], "Document Store": [[4, "document-store"]], "Construct": [[4, "construct"], [161, "construct"], [166, "construct"], [175, "construct"]], "Subindices": [[4, null], [7, "subindices"], [156, null]], "Construct with config": [[4, "construct-with-config"]], "Search summary": [[4, "search-summary"]], "Vector search example": [[4, "vector-search-example"]], "Vector search with filter example": [[4, "vector-search-with-filter-example"]], "Filter example": [[4, "filter-example"]], "Known limitations": [[4, "known-limitations"]], "Multiple references to the same storage backend": [[4, "multiple-references-to-the-same-storage-backend"]], "Out-of-array modification": [[4, "out-of-array-modification"]], "Elements access is slower": [[4, "elements-access-is-slower"]], "Qdrant": [[5, "qdrant"]], "Start Qdrant service": [[5, "start-qdrant-service"]], "Create DocumentArray with Qdrant backend": [[5, "create-documentarray-with-qdrant-backend"]], "Minimum example": [[5, "minimum-example"], [8, "minimum-example"]], "Example of .find with a filter": [[5, "example-of-find-with-a-filter"]], "SQLite": [[6, "sqlite"]], "Document stores": [[7, null]], "Construct subindices": [[7, "construct-subindices"]], "Modify subindices": [[7, "modify-subindices"]], "Search through subindices": [[7, "search-through-subindices"]], "Weaviate": [[8, "weaviate"]], "Start Weaviate service": [[8, "start-weaviate-service"]], "Create DocumentArray with Weaviate backend": [[8, "create-documentarray-with-weaviate-backend"]], "Filtering": [[8, "filtering"]], "Sorting": [[8, "sorting"]], "Example of .find with vector and sort": [[8, "example-of-find-with-vector-and-sort"]], "Set minimum certainty on query results": [[8, "set-minimum-certainty-on-query-results"]], "Include additional properties in the return": [[8, "include-additional-properties-in-the-return"]], "GraphQL": [[9, "graphql"]], "Basic example": [[9, "basic-example"]], "Integrate with FastAPI": [[9, "integrate-with-fastapi"]], "PyTorch/Deep Learning Frameworks": [[10, "pytorch-deep-learning-frameworks"]], "Load, map, batch in one-shot": [[10, "load-map-batch-in-one-shot"]], " Python API": [[11, "python-api"]], "docarray - Document and DocumentArray": [[11, "docarray-document-and-documentarray"]], "docarray.dataclasses - Dataclass": [[11, "docarray-dataclasses-dataclass"]], "docarray.array - Document stores": [[11, "docarray-array-document-stores"]], "docarray package": [[12, "docarray-package"]], "Subpackages": [[12, "subpackages"], [13, "subpackages"], [21, "subpackages"], [58, "subpackages"], [103, "subpackages"], [131, "subpackages"], [140, "subpackages"], [144, "subpackages"]], "Submodules": [[12, "submodules"], [13, "submodules"], [21, "submodules"], [23, "submodules"], [33, "submodules"], [54, "submodules"], [58, "submodules"], [59, "submodules"], [65, "submodules"], [70, "submodules"], [75, "submodules"], [80, "submodules"], [87, "submodules"], [92, "submodules"], [99, "submodules"], [103, "submodules"], [106, "submodules"], [131, "submodules"], [132, "submodules"], [140, "submodules"], [142, "submodules"], [144, "submodules"], [146, "submodules"]], "Module contents": [[12, "module-docarray"], [13, "module-docarray.array"], [21, "module-docarray.array.mixins"], [23, "module-docarray.array.mixins.dataloader"], [33, "module-docarray.array.mixins.io"], [54, "module-docarray.array.queryset"], [58, "module-docarray.array.storage"], [59, "module-docarray.array.storage.annlite"], [65, "module-docarray.array.storage.base"], [70, "module-docarray.array.storage.elastic"], [75, "module-docarray.array.storage.memory"], [80, "module-docarray.array.storage.qdrant"], [87, "module-docarray.array.storage.sqlite"], [92, "module-docarray.array.storage.weaviate"], [99, "module-docarray.dataclasses"], [103, "module-docarray.document"], [106, "module-docarray.document.mixins"], [131, "module-docarray.math"], [132, "module-docarray.math.distance"], [140, "module-docarray.proto"], [142, "module-docarray.proto.io"], [144, "module-docarray.score"], [146, "module-docarray.score.mixins"], [149, "module-docarray.typing"]], "docarray.array package": [[13, "docarray-array-package"]], "docarray.array.annlite module": [[14, "module-docarray.array.annlite"]], "docarray.array.base module": [[15, "module-docarray.array.base"]], "docarray.array.chunk module": [[16, "module-docarray.array.chunk"]], "docarray.array.document module": [[17, "module-docarray.array.document"]], "docarray.array.elastic module": [[18, "module-docarray.array.elastic"]], "docarray.array.match module": [[19, "module-docarray.array.match"]], "docarray.array.memory module": [[20, "module-docarray.array.memory"]], "docarray.array.mixins package": [[21, "docarray-array-mixins-package"]], "docarray.array.mixins.content module": [[22, "module-docarray.array.mixins.content"]], "docarray.array.mixins.dataloader package": [[23, "docarray-array-mixins-dataloader-package"]], "docarray.array.mixins.dataloader.helper module": [[24, "module-docarray.array.mixins.dataloader.helper"]], "docarray.array.mixins.delitem module": [[25, "module-docarray.array.mixins.delitem"]], "docarray.array.mixins.embed module": [[26, "module-docarray.array.mixins.embed"]], "docarray.array.mixins.empty module": [[27, "module-docarray.array.mixins.empty"]], "docarray.array.mixins.evaluation module": [[28, "module-docarray.array.mixins.evaluation"]], "docarray.array.mixins.find module": [[29, "module-docarray.array.mixins.find"]], "docarray.array.mixins.getattr module": [[30, "module-docarray.array.mixins.getattr"]], "docarray.array.mixins.getitem module": [[31, "module-docarray.array.mixins.getitem"]], "docarray.array.mixins.group module": [[32, "module-docarray.array.mixins.group"]], "docarray.array.mixins.io package": [[33, "docarray-array-mixins-io-package"]], "docarray.array.mixins.io.binary module": [[34, "module-docarray.array.mixins.io.binary"]], "docarray.array.mixins.io.common module": [[35, "module-docarray.array.mixins.io.common"]], "docarray.array.mixins.io.csv module": [[36, "module-docarray.array.mixins.io.csv"]], "docarray.array.mixins.io.dataframe module": [[37, "module-docarray.array.mixins.io.dataframe"]], "docarray.array.mixins.io.from_gen module": [[38, "module-docarray.array.mixins.io.from_gen"]], "docarray.array.mixins.io.json module": [[39, "module-docarray.array.mixins.io.json"]], "docarray.array.mixins.io.pbar module": [[40, "module-docarray.array.mixins.io.pbar"]], "docarray.array.mixins.io.pushpull module": [[41, "module-docarray.array.mixins.io.pushpull"]], "docarray.array.mixins.match module": [[42, "module-docarray.array.mixins.match"]], "docarray.array.mixins.parallel module": [[43, "module-docarray.array.mixins.parallel"]], "docarray.array.mixins.plot module": [[44, "module-docarray.array.mixins.plot"]], "docarray.array.mixins.post module": [[45, "module-docarray.array.mixins.post"]], "docarray.array.mixins.pydantic module": [[46, "module-docarray.array.mixins.pydantic"]], "docarray.array.mixins.reduce module": [[47, "module-docarray.array.mixins.reduce"]], "docarray.array.mixins.sample module": [[48, "module-docarray.array.mixins.sample"]], "docarray.array.mixins.setitem module": [[49, "module-docarray.array.mixins.setitem"]], "docarray.array.mixins.strawberry module": [[50, "module-docarray.array.mixins.strawberry"]], "docarray.array.mixins.text module": [[51, "module-docarray.array.mixins.text"]], "docarray.array.mixins.traverse module": [[52, "module-docarray.array.mixins.traverse"]], "docarray.array.qdrant module": [[53, "module-docarray.array.qdrant"]], "docarray.array.queryset package": [[54, "docarray-array-queryset-package"]], "docarray.array.queryset.lookup module": [[55, "module-docarray.array.queryset.lookup"]], "docarray.array.queryset.parser module": [[56, "module-docarray.array.queryset.parser"]], "docarray.array.sqlite module": [[57, "module-docarray.array.sqlite"]], "docarray.array.storage package": [[58, "docarray-array-storage-package"]], "docarray.array.storage.annlite package": [[59, "docarray-array-storage-annlite-package"]], "docarray.array.storage.annlite.backend module": [[60, "module-docarray.array.storage.annlite.backend"]], "docarray.array.storage.annlite.find module": [[61, "module-docarray.array.storage.annlite.find"]], "docarray.array.storage.annlite.getsetdel module": [[62, "module-docarray.array.storage.annlite.getsetdel"]], "docarray.array.storage.annlite.helper module": [[63, "module-docarray.array.storage.annlite.helper"]], "docarray.array.storage.annlite.seqlike module": [[64, "module-docarray.array.storage.annlite.seqlike"]], "docarray.array.storage.base package": [[65, "docarray-array-storage-base-package"]], "docarray.array.storage.base.backend module": [[66, "module-docarray.array.storage.base.backend"]], "docarray.array.storage.base.getsetdel module": [[67, "module-docarray.array.storage.base.getsetdel"]], "docarray.array.storage.base.helper module": [[68, "module-docarray.array.storage.base.helper"]], "docarray.array.storage.base.seqlike module": [[69, "module-docarray.array.storage.base.seqlike"]], "docarray.array.storage.elastic package": [[70, "docarray-array-storage-elastic-package"]], "docarray.array.storage.elastic.backend module": [[71, "module-docarray.array.storage.elastic.backend"]], "docarray.array.storage.elastic.find module": [[72, "module-docarray.array.storage.elastic.find"]], "docarray.array.storage.elastic.getsetdel module": [[73, "module-docarray.array.storage.elastic.getsetdel"]], "docarray.array.storage.elastic.seqlike module": [[74, "module-docarray.array.storage.elastic.seqlike"]], "docarray.array.storage.memory package": [[75, "docarray-array-storage-memory-package"]], "docarray.array.storage.memory.backend module": [[76, "module-docarray.array.storage.memory.backend"]], "docarray.array.storage.memory.find module": [[77, "module-docarray.array.storage.memory.find"]], "docarray.array.storage.memory.getsetdel module": [[78, "module-docarray.array.storage.memory.getsetdel"]], "docarray.array.storage.memory.seqlike module": [[79, "module-docarray.array.storage.memory.seqlike"]], "docarray.array.storage.qdrant package": [[80, "docarray-array-storage-qdrant-package"]], "docarray.array.storage.qdrant.backend module": [[81, "module-docarray.array.storage.qdrant.backend"]], "docarray.array.storage.qdrant.find module": [[82, "module-docarray.array.storage.qdrant.find"]], "docarray.array.storage.qdrant.getsetdel module": [[83, "module-docarray.array.storage.qdrant.getsetdel"]], "docarray.array.storage.qdrant.helper module": [[84, "module-docarray.array.storage.qdrant.helper"]], "docarray.array.storage.qdrant.seqlike module": [[85, "module-docarray.array.storage.qdrant.seqlike"]], "docarray.array.storage.registry module": [[86, "module-docarray.array.storage.registry"]], "docarray.array.storage.sqlite package": [[87, "docarray-array-storage-sqlite-package"]], "docarray.array.storage.sqlite.backend module": [[88, "module-docarray.array.storage.sqlite.backend"]], "docarray.array.storage.sqlite.getsetdel module": [[89, "module-docarray.array.storage.sqlite.getsetdel"]], "docarray.array.storage.sqlite.helper module": [[90, "module-docarray.array.storage.sqlite.helper"]], "docarray.array.storage.sqlite.seqlike module": [[91, "module-docarray.array.storage.sqlite.seqlike"]], "docarray.array.storage.weaviate package": [[92, "docarray-array-storage-weaviate-package"]], "docarray.array.storage.weaviate.backend module": [[93, "module-docarray.array.storage.weaviate.backend"]], "docarray.array.storage.weaviate.find module": [[94, "module-docarray.array.storage.weaviate.find"]], "docarray.array.storage.weaviate.getsetdel module": [[95, "module-docarray.array.storage.weaviate.getsetdel"]], "docarray.array.storage.weaviate.seqlike module": [[96, "module-docarray.array.storage.weaviate.seqlike"]], "docarray.array.weaviate module": [[97, "module-docarray.array.weaviate"]], "docarray.base module": [[98, "module-docarray.base"]], "docarray.dataclasses package": [[99, "docarray-dataclasses-package"]], "docarray.dataclasses.getter module": [[100, "module-docarray.dataclasses.getter"]], "docarray.dataclasses.setter module": [[101, "module-docarray.dataclasses.setter"]], "docarray.dataclasses.types module": [[102, "module-docarray.dataclasses.types"]], "docarray.document package": [[103, "docarray-document-package"]], "docarray.document.data module": [[104, "module-docarray.document.data"]], "docarray.document.generators module": [[105, "module-docarray.document.generators"]], "docarray.document.mixins package": [[106, "docarray-document-mixins-package"]], "docarray.document.mixins.attribute module": [[107, "module-docarray.document.mixins.attribute"]], "docarray.document.mixins.audio module": [[108, "module-docarray.document.mixins.audio"]], "docarray.document.mixins.blob module": [[109, "module-docarray.document.mixins.blob"]], "docarray.document.mixins.content module": [[110, "module-docarray.document.mixins.content"]], "docarray.document.mixins.convert module": [[111, "module-docarray.document.mixins.convert"]], "docarray.document.mixins.dump module": [[112, "module-docarray.document.mixins.dump"]], "docarray.document.mixins.featurehash module": [[113, "module-docarray.document.mixins.featurehash"]], "docarray.document.mixins.helper module": [[114, "module-docarray.document.mixins.helper"]], "docarray.document.mixins.image module": [[115, "module-docarray.document.mixins.image"]], "docarray.document.mixins.mesh module": [[116, "module-docarray.document.mixins.mesh"]], "docarray.document.mixins.multimodal module": [[117, "module-docarray.document.mixins.multimodal"]], "docarray.document.mixins.plot module": [[118, "module-docarray.document.mixins.plot"]], "docarray.document.mixins.porting module": [[119, "module-docarray.document.mixins.porting"]], "docarray.document.mixins.property module": [[120, "module-docarray.document.mixins.property"]], "docarray.document.mixins.protobuf module": [[121, "module-docarray.document.mixins.protobuf"]], "docarray.document.mixins.pydantic module": [[122, "module-docarray.document.mixins.pydantic"]], "docarray.document.mixins.rich_embedding module": [[123, "module-docarray.document.mixins.rich_embedding"]], "docarray.document.mixins.strawberry module": [[124, "module-docarray.document.mixins.strawberry"]], "docarray.document.mixins.sugar module": [[125, "module-docarray.document.mixins.sugar"]], "docarray.document.mixins.text module": [[126, "module-docarray.document.mixins.text"]], "docarray.document.mixins.video module": [[127, "module-docarray.document.mixins.video"]], "docarray.document.pydantic_model module": [[128, "module-docarray.document.pydantic_model"]], "docarray.document.strawberry_type module": [[129, "docarray-document-strawberry-type-module"]], "docarray.helper module": [[130, "module-docarray.helper"]], "docarray.math package": [[131, "docarray-math-package"]], "docarray.math.distance package": [[132, "docarray-math-distance-package"]], "docarray.math.distance.numpy module": [[133, "module-docarray.math.distance.numpy"]], "docarray.math.distance.paddle module": [[134, "docarray-math-distance-paddle-module"]], "docarray.math.distance.tensorflow module": [[135, "module-docarray.math.distance.tensorflow"]], "docarray.math.distance.torch module": [[136, "module-docarray.math.distance.torch"]], "docarray.math.evaluation module": [[137, "module-docarray.math.evaluation"]], "docarray.math.helper module": [[138, "module-docarray.math.helper"]], "docarray.math.ndarray module": [[139, "module-docarray.math.ndarray"]], "docarray.proto package": [[140, "docarray-proto-package"]], "docarray.proto.docarray_pb2 module": [[141, "module-docarray.proto.docarray_pb2"]], "docarray.proto.io package": [[142, "docarray-proto-io-package"]], "docarray.proto.io.ndarray module": [[143, "module-docarray.proto.io.ndarray"]], "docarray.score package": [[144, "docarray-score-package"]], "docarray.score.data module": [[145, "module-docarray.score.data"]], "docarray.score.mixins package": [[146, "docarray-score-mixins-package"]], "docarray.score.mixins.property module": [[147, "module-docarray.score.mixins.property"]], "docarray.score.mixins.representer module": [[148, "module-docarray.score.mixins.representer"]], "docarray.typing package": [[149, "docarray-typing-package"]], "docarray": [[150, "docarray"]], "Changelog": [[151, "changelog"]], "0.11.0: change DocumentArrayInMemory\u2019s container to list": [[151, "change-documentarrayinmemory-s-container-to-list"]], "0.10.0: add high-level dataclass API to Document": [[151, "add-high-level-dataclass-api-to-document"]], "0.5.0: add storage backend to DocumentArray": [[151, "add-storage-backend-to-documentarray"]], "0.4.0: change on the DocumentArray serialization format": [[151, "change-on-the-documentarray-serialization-format"]], "0.3.0: change on the default JSON/dict serialization strategy": [[151, "change-on-the-default-json-dict-serialization-strategy"]], "0.2.0: change on the content field name": [[151, "change-on-the-content-field-name"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-unmute\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.563 2.069A.75.75 0 018 2.75v10.5a.75.75 0 01-1.238.57L3.472 11H1.75A1.75 1.75 0 010 9.25v-2.5C0 5.784.784 5 1.75 5h1.723l3.289-2.82a.75.75 0 01.801-.111zM6.5 4.38L4.238 6.319a.75.75 0 01-.488.181h-2a.25.25 0 00-.25.25v2.5c0 .138.112.25.25.25h2a.75.75 0 01.488.18L6.5 11.62V4.38zm6.096-2.038a.75.75 0 011.06 0 8 8 0 010 11.314.75.75 0 01-1.06-1.06 6.5 6.5 0 000-9.193.75.75 0 010-1.06v-.001zm-1.06 2.121a.75.75 0 10-1.061 1.061 3.5 3.5 0 010 4.95.75.75 0 101.06 1.06 5 5 0 000-7.07l.001-.001z\"></path></svg> Audio": [[152, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-unmute-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m7-563-2-069a-75-75-0-018-2-75v10-5a-75-75-0-01-1-238-57l3-472-11h1-75a1-75-1-75-0-010-9-25v-2-5c0-5-784-784-5-1-75-5h1-723l3-289-2-82a-75-75-0-01-801-111zm6-5-4-38l4-238-6-319a-75-75-0-01-488-181h-2a-25-25-0-00-25-25v2-5c0-138-112-25-25-25h2a-75-75-0-01-488-18l6-5-11-62v4-38zm6-096-2-038a-75-75-0-011-06-0-8-8-0-010-11-314-75-75-0-01-1-06-1-06-6-5-6-5-0-000-9-193-75-75-0-010-1-06v-001zm-1-06-2-121a-75-75-0-10-1-061-1-061-3-5-3-5-0-010-4-95-75-75-0-101-06-1-06-5-5-0-000-7-07l-001-001z-path-svg-audio"]], "Load .wav file": [[152, "load-wav-file"]], "Save as .wav file": [[152, "save-as-wav-file"]], "Example": [[152, "example"], [180, "example"]], "Other tools & libraries for audio data": [[152, "other-tools-libraries-for-audio-data"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-image\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M1.75 2.5a.25.25 0 00-.25.25v10.5c0 .138.112.25.25.25h.94a.76.76 0 01.03-.03l6.077-6.078a1.75 1.75 0 012.412-.06L14.5 10.31V2.75a.25.25 0 00-.25-.25H1.75zm12.5 11H4.81l5.048-5.047a.25.25 0 01.344-.009l4.298 3.889v.917a.25.25 0 01-.25.25zm1.75-.25V2.75A1.75 1.75 0 0014.25 1H1.75A1.75 1.75 0 000 2.75v10.5C0 14.216.784 15 1.75 15h12.5A1.75 1.75 0 0016 13.25zM5.5 6a.5.5 0 11-1 0 .5.5 0 011 0zM7 6a2 2 0 11-4 0 2 2 0 014 0z\"></path></svg> Image": [[153, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-image-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m1-75-2-5a-25-25-0-00-25-25v10-5c0-138-112-25-25-25h-94a-76-76-0-01-03-03l6-077-6-078a1-75-1-75-0-012-412-06l14-5-10-31v2-75a-25-25-0-00-25-25h1-75zm12-5-11h4-81l5-048-5-047a-25-25-0-01-344-009l4-298-3-889v-917a-25-25-0-01-25-25zm1-75-25v2-75a1-75-1-75-0-0014-25-1h1-75a1-75-1-75-0-000-2-75v10-5c0-14-216-784-15-1-75-15h12-5a1-75-1-75-0-0016-13-25zm5-5-6a-5-5-0-11-1-0-5-5-0-011-0zm7-6a2-2-0-11-4-0-2-2-0-014-0z-path-svg-image"]], "Load image data": [[153, "load-image-data"]], "Simple image processing": [[153, "simple-image-processing"]], "Display image sprite": [[153, "display-image-sprite"], [187, "display-image-sprite"]], "Segment large complicated image into small ones": [[153, "segment-large-complicated-image-into-small-ones"]], "Examples": [[154, "examples"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-package\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M8.878.392a1.75 1.75 0 00-1.756 0l-5.25 3.045A1.75 1.75 0 001 4.951v6.098c0 .624.332 1.2.872 1.514l5.25 3.045a1.75 1.75 0 001.756 0l5.25-3.045c.54-.313.872-.89.872-1.514V4.951c0-.624-.332-1.2-.872-1.514L8.878.392zM7.875 1.69a.25.25 0 01.25 0l4.63 2.685L8 7.133 3.245 4.375l4.63-2.685zM2.5 5.677v5.372c0 .09.047.171.125.216l4.625 2.683V8.432L2.5 5.677zm6.25 8.271l4.625-2.683a.25.25 0 00.125-.216V5.677L8.75 8.432v5.516z\"></path></svg> 3D Mesh": [[155, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-package-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m8-878-392a1-75-1-75-0-00-1-756-0l-5-25-3-045a1-75-1-75-0-001-4-951v6-098c0-624-332-1-2-872-1-514l5-25-3-045a1-75-1-75-0-001-756-0l5-25-3-045c-54-313-872-89-872-1-514v4-951c0-624-332-1-2-872-1-514l8-878-392zm7-875-1-69a-25-25-0-01-25-0l4-63-2-685l8-7-133-3-245-4-375l4-63-2-685zm2-5-5-677v5-372c0-09-047-171-125-216l4-625-2-683v8-432l2-5-5-677zm6-25-8-271l4-625-2-683a-25-25-0-00-125-216v5-677l8-75-8-432v5-516z-path-svg-3d-mesh"]], "Point cloud": [[155, "point-cloud"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-stack\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7.122.392a1.75 1.75 0 011.756 0l5.003 2.902c.83.481.83 1.68 0 2.162L8.878 8.358a1.75 1.75 0 01-1.756 0L2.119 5.456a1.25 1.25 0 010-2.162L7.122.392zM8.125 1.69a.25.25 0 00-.25 0l-4.63 2.685 4.63 2.685a.25.25 0 00.25 0l4.63-2.685-4.63-2.685zM1.601 7.789a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0L1.874 8.814A.75.75 0 011.6 7.789zm0 3.5a.75.75 0 011.025-.273l5.249 3.044a.25.25 0 00.25 0l5.249-3.044a.75.75 0 01.752 1.298l-5.248 3.044a1.75 1.75 0 01-1.756 0l-5.248-3.044a.75.75 0 01-.273-1.025z\"></path></svg> Multi-modal": [[156, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-stack-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m7-122-392a1-75-1-75-0-011-756-0l5-003-2-902c-83-481-83-1-68-0-2-162l8-878-8-358a1-75-1-75-0-01-1-756-0l2-119-5-456a1-25-1-25-0-010-2-162l7-122-392zm8-125-1-69a-25-25-0-00-25-0l-4-63-2-685-4-63-2-685a-25-25-0-00-25-0l4-63-2-685-4-63-2-685zm1-601-7-789a-75-75-0-011-025-273l5-249-3-044a-25-25-0-00-25-0l5-249-3-044a-75-75-0-01-752-1-298l-5-248-3-044a1-75-1-75-0-01-1-756-0l1-874-8-814a-75-75-0-011-6-7-789zm0-3-5a-75-75-0-011-025-273l5-249-3-044a-25-25-0-00-25-0l5-249-3-044a-75-75-0-01-752-1-298l-5-248-3-044a1-75-1-75-0-01-1-756-0l-5-248-3-044a-75-75-0-01-273-1-025z-path-svg-multi-modal"]], "Model your data": [[156, "model-your-data"]], "Instantiate a Document": [[156, "instantiate-a-document"]], "Nested dataclasses and list types": [[156, "nested-dataclasses-and-list-types"]], "Access the data": [[156, "access-the-data"]], "Generate embeddings": [[156, "generate-embeddings"]], "Embed each modality": [[156, "embed-each-modality"]], "Embed parent Document": [[156, "embed-parent-document"]], "Perform search": [[156, "perform-search"]], "Find Document by modality embedding": [[156, "find-document-by-modality-embedding"]], "Find Document by combined embedding": [[156, "find-document-by-combined-embedding"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-table\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v3.585a.746.746 0 010 .83v8.085A1.75 1.75 0 0114.25 16H6.309a.748.748 0 01-1.118 0H1.75A1.75 1.75 0 010 14.25V6.165a.746.746 0 010-.83V1.75zM1.5 6.5v7.75c0 .138.112.25.25.25H5v-8H1.5zM5 5H1.5V1.75a.25.25 0 01.25-.25H5V5zm1.5 1.5v8h7.75a.25.25 0 00.25-.25V6.5h-8zm8-1.5h-8V1.5h7.75a.25.25 0 01.25.25V5z\"></path></svg> Table": [[157, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-table-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m0-1-75c0-784-784-0-1-75-0h12-5c15-216-0-16-784-16-1-75v3-585a-746-746-0-010-83v8-085a1-75-1-75-0-0114-25-16h6-309a-748-748-0-01-1-118-0h1-75a1-75-1-75-0-010-14-25v6-165a-746-746-0-010-83v1-75zm1-5-6-5v7-75c0-138-112-25-25-25h5v-8h1-5zm5-5h1-5v1-75a-25-25-0-01-25-25h5v5zm1-5-1-5v8h7-75a-25-25-0-00-25-25v6-5h-8zm8-1-5h-8v1-5h7-75a-25-25-0-01-25-25v5z-path-svg-table"]], "Load CSV table": [[157, "load-csv-table"]], "Save as CSV file": [[157, "save-as-csv-file"]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-typography\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M6.21 8.5L4.574 3.594 2.857 8.5H6.21zm.5 1.5l.829 2.487a.75.75 0 001.423-.474L5.735 2.332a1.216 1.216 0 00-2.302-.018l-3.39 9.688a.75.75 0 001.415.496L2.332 10H6.71zm3.13-4.358C10.53 4.374 11.87 4 13 4c1.5 0 3 .939 3 2.601v5.649a.75.75 0 01-1.448.275C13.995 12.82 13.3 13 12.5 13c-.77 0-1.514-.231-2.078-.709-.577-.488-.922-1.199-.922-2.041 0-.694.265-1.411.887-1.944C11 7.78 11.88 7.5 13 7.5h1.5v-.899c0-.54-.5-1.101-1.5-1.101-.869 0-1.528.282-1.84.858a.75.75 0 11-1.32-.716zM14.5 9H13c-.881 0-1.375.22-1.637.444-.253.217-.363.5-.363.806 0 .408.155.697.39.896.249.21.63.354 1.11.354.732 0 1.26-.209 1.588-.449.35-.257.412-.495.412-.551V9z\"></path></svg> Text": [[158, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-typography-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m6-21-8-5l4-574-3-594-2-857-8-5h6-21zm-5-1-5l-829-2-487a-75-75-0-001-423-474l5-735-2-332a1-216-1-216-0-00-2-302-018l-3-39-9-688a-75-75-0-001-415-496l2-332-10h6-71zm3-13-4-358c10-53-4-374-11-87-4-13-4c1-5-0-3-939-3-2-601v5-649a-75-75-0-01-1-448-275c13-995-12-82-13-3-13-12-5-13c-77-0-1-514-231-2-078-709-577-488-922-1-199-922-2-041-0-694-265-1-411-887-1-944c11-7-78-11-88-7-5-13-7-5h1-5v-899c0-54-5-1-101-1-5-1-101-869-0-1-528-282-1-84-858a-75-75-0-11-1-32-716zm14-5-9h13c-881-0-1-375-22-1-637-444-253-217-363-5-363-806-0-408-155-697-39-896-249-21-63-354-1-11-354-732-0-1-26-209-1-588-449-35-257-412-495-412-551v9z-path-svg-text"]], "Segment long documents": [[158, "segment-long-documents"]], "Convert text into ndarray": [[158, "convert-text-into-ndarray"]], "Convert ndarray back to text": [[158, "convert-ndarray-back-to-text"]], "Simple text matching via feature hashing": [[158, "simple-text-matching-via-feature-hashing"]], "Searching at chunk level with subindex": [[158, "searching-at-chunk-level-with-subindex"]], "Multi-modal Documents": [[158, null]], "<svg version=\"1.1\" width=\"1.0em\" height=\"1.0em\" class=\"sd-octicon sd-octicon-device-camera-video\" viewBox=\"0 0 16 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M16 3.75a.75.75 0 00-1.136-.643L11 5.425V4.75A1.75 1.75 0 009.25 3h-7.5A1.75 1.75 0 000 4.75v6.5C0 12.216.784 13 1.75 13h7.5A1.75 1.75 0 0011 11.25v-.675l3.864 2.318A.75.75 0 0016 12.25v-8.5zm-5 5.075l3.5 2.1v-5.85l-3.5 2.1v1.65zM9.5 6.75v-2a.25.25 0 00-.25-.25h-7.5a.25.25 0 00-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-4.5z\"></path></svg> Video": [[159, "svg-version-1-1-width-1-0em-height-1-0em-class-sd-octicon-sd-octicon-device-camera-video-viewbox-0-0-16-16-aria-hidden-true-path-fill-rule-evenodd-d-m16-3-75a-75-75-0-00-1-136-643l11-5-425v4-75a1-75-1-75-0-009-25-3h-7-5a1-75-1-75-0-000-4-75v6-5c0-12-216-784-13-1-75-13h7-5a1-75-1-75-0-0011-11-25v-675l3-864-2-318a-75-75-0-0016-12-25v-8-5zm-5-5-075l3-5-2-1v-5-85l-3-5-2-1v1-65zm9-5-6-75v-2a-25-25-0-00-25-25h-7-5a-25-25-0-00-25-25v6-5c0-138-112-25-25-25h7-5a-25-25-0-00-25-25v-4-5z-path-svg-video"]], "Load video data": [[159, "load-video-data"]], "Key frame extraction": [[159, "key-frame-extraction"]], "Save as video file": [[159, "save-as-video-file"]], "Access Modality": [[160, "access-modality"]], "Return types": [[160, null]], "Document level access": [[160, "document-level-access"]], "Select nested fields": [[160, "select-nested-fields"], [160, "id1"]], "DocumentArray level access": [[160, "documentarray-level-access"]], "Select multiple fields": [[160, "select-multiple-fields"]], "Slice dataclass objects": [[160, "slice-dataclass-objects"]], "Slice List[Type] fields": [[160, "slice-list-type-fields"]], "Dataclass decorator": [[161, "dataclass-decorator"]], "Annotate class fields": [[161, "annotate-class-fields"]], "Behavior of field annotation": [[161, "behavior-of-field-annotation"]], "Construct from/to Document": [[161, "construct-from-to-document"]], "Use field() for advanced configs": [[161, "use-field-for-advanced-configs"]], "What\u2019s next?": [[161, "what-s-next"], [166, "what-s-next"], [169, "what-s-next"], [170, "what-s-next"], [171, "what-s-next"], [174, "what-s-next"], [175, "what-s-next"], [179, "what-s-next"]], "Process Modality": [[162, "process-modality"]], "Embed image and text via CLIP": [[162, "embed-image-and-text-via-clip"]], "Embed via CLIP-as-service": [[162, "embed-via-clip-as-service"]], "Dataclass": [[163, "dataclass"]], "What is multi-modality?": [[163, "what-is-multi-modality"]], "Understanding the problem": [[163, "understanding-the-problem"]], "Understanding the challenges": [[163, "understanding-the-challenges"]], "What\u2019s next": [[163, "what-s-next"]], "Support New Modality": [[164, "support-new-modality"]], "Create new types": [[164, "create-new-types"]], "Override existing types": [[164, "override-existing-types"]], "Access Attributes": [[165, "access-attributes"], [173, "access-attributes"]], "Content attributes": [[165, "content-attributes"]], "Load content from URI": [[165, "load-content-from-uri"]], "Convert content to data URI": [[165, null]], "Construct an empty Document": [[166, "construct-an-empty-document"]], "Construct with attributes": [[166, "construct-with-attributes"]], "Nested Document": [[166, "nested-document"]], "Unknown attributes handling": [[166, "unknown-attributes-handling"]], "Resolve unknown attributes with rules": [[166, "resolve-unknown-attributes-with-rules"]], "Copy from another Document": [[166, "copy-from-another-document"]], "Embedding": [[167, "embedding"]], "Fill embedding via neural network": [[167, "fill-embedding-via-neural-network"]], "On multiple Documents use DocumentArray": [[167, null], [167, null]], "Find nearest-neighbours": [[167, "find-nearest-neighbours"]], "Fluent Interface": [[168, "fluent-interface"]], "Methods": [[168, "methods"]], "BlobData": [[168, "blobdata"]], "ImageData": [[168, "imagedata"]], "Convert": [[168, "convert"]], "ContentProperty": [[168, "contentproperty"]], "TextData": [[168, "textdata"]], "SingletonSugar": [[168, "singletonsugar"]], "FeatureHash": [[168, "featurehash"]], "Porting": [[168, "porting"]], "Protobuf": [[168, "protobuf"]], "Pydantic": [[168, "pydantic"]], "Strawberry": [[168, "strawberry"]], "AudioData": [[168, "audiodata"]], "MeshData": [[168, "meshdata"]], "VideoData": [[168, "videodata"]], "UriFile": [[168, "urifile"]], "Document": [[169, "document"]], "Nested Structure": [[170, "nested-structure"]], "Serialization": [[171, "serialization"], [183, "serialization"]], "From/to JSON": [[171, "from-to-json"], [183, "from-to-json"]], "From/to arbitrary JSON": [[171, "from-to-arbitrary-json"]], "From/to bytes": [[171, "from-to-bytes"], [183, "from-to-bytes"]], "From/to base64": [[171, "from-to-base64"], [183, "from-to-base64"]], "From/to dict": [[171, "from-to-dict"]], "From/to Protobuf": [[171, "from-to-protobuf"], [183, "from-to-protobuf"]], "Visualization": [[172, "visualization"], [184, "visualization"]], "Attribute selector": [[173, "attribute-selector"]], "Auto-ravel on NdArray": [[173, "auto-ravel-on-ndarray"]], "Dunder syntax for nested attributes": [[173, "dunder-syntax-for-nested-attributes"]], "Content and embedding sugary attributes": [[173, "content-and-embedding-sugary-attributes"]], "Access Documents": [[174, "access-documents"]], "Basic indexing": [[174, "basic-indexing"]], "Index by Document id": [[174, "index-by-document-id"]], "Index by boolean mask": [[174, "index-by-boolean-mask"]], "Index by nested structure": [[174, "index-by-nested-structure"]], "Index by flatten": [[174, "index-by-flatten"]], "Other Handy Helpers": [[174, "other-handy-helpers"]], "Batching": [[174, "batching"]], "Sampling": [[174, "sampling"]], "Shuffling": [[174, "shuffling"]], "Splitting by .tags": [[174, "splitting-by-tags"]], "Construct an empty array": [[175, "construct-an-empty-array"]], "Construct with empty Documents": [[175, "construct-with-empty-documents"]], "Construct from list-like objects": [[175, "construct-from-list-like-objects"]], "Construct from multiple DocumentArray": [[175, "construct-from-multiple-documentarray"]], "Construct from a single Document": [[175, "construct-from-a-single-document"]], "Deep copy on elements": [[175, "deep-copy-on-elements"]], "Construct from local files": [[175, "construct-from-local-files"]], "Embed via Neural Network": [[176, "embed-via-neural-network"]], "Evaluate Matches": [[177, "evaluate-matches"]], "Document identifier": [[177, "document-identifier"]], "Query by Conditions": [[178, "query-by-conditions"]], "Filter with query operators": [[178, "filter-with-query-operators"]], "Combine multiple conditions": [[178, "combine-multiple-conditions"]], "DocumentArray": [[179, "documentarray"]], "Match Nearest Neighbours": [[180, "match-nearest-neighbours"]], "Difference between find and match": [[180, "difference-between-find-and-match"]], "Which side is the query at?": [[180, "which-side-is-the-query-at"]], "What is the type of the query?": [[180, "what-is-the-type-of-the-query"]], "What is the return?": [[180, "what-is-the-return"]], "GPU support": [[180, "gpu-support"]], "Parallelization": [[181, "parallelization"]], "When to choose process or thread backend?": [[181, null]], "Use map_batch() to overlap CPU & GPU computation": [[181, "use-map-batch-to-overlap-cpu-gpu-computation"]], "Why 129s? Why not 128s": [[181, null]], "Use map_batch() to overlap CPU and network time": [[181, "use-map-batch-to-overlap-cpu-and-network-time"]], "Process via External Flow or Executor": [[182, "process-via-external-flow-or-executor"]], "Accept schemes": [[182, "accept-schemes"]], "Read more": [[182, "read-more"]], "Wire format of pickle and protobuf": [[183, "wire-format-of-pickle-and-protobuf"]], "From/to disk": [[183, "from-to-disk"]], "Stream large binary serialization from disk": [[183, "stream-large-binary-serialization-from-disk"]], "From/to list": [[183, "from-to-list"]], "From/to dataframe": [[183, "from-to-dataframe"]], "From/to cloud": [[183, "from-to-cloud"]], "Summary in table": [[184, "summary-in-table"]], "Image sprites": [[184, "image-sprites"]], "Plot Matches": [[184, "plot-matches"]], "Embedding projector": [[184, "embedding-projector"]], "FastAPI/Pydantic": [[185, "fastapi-pydantic"]], "JSON Schema": [[185, "json-schema"]], "Validate incoming Document and DocumentArray": [[185, "validate-incoming-document-and-documentarray"]], "Convert between pydantic model and DocArray objects": [[185, "convert-between-pydantic-model-and-docarray-objects"]], "Limit returned fields by response model": [[185, "limit-returned-fields-by-response-model"]], "Limit returned results recursively": [[185, "limit-returned-results-recursively"]], "Jina": [[186, "jina"]], "Package dependency": [[186, "package-dependency"]], "Direct invoke Jina/Hub Executor": [[186, "direct-invoke-jina-hub-executor"]], "Local code as a service": [[186, "local-code-as-a-service"]], "Three good reasons to use Jina": [[186, "three-good-reasons-to-use-jina"]], "A client-server architecture": [[186, "a-client-server-architecture"]], "Scale it out": [[186, "scale-it-out"]], "Share and reuse it": [[186, "share-and-reuse-it"]], "Summary": [[186, "summary"]], "Jupyter Notebook/Colab": [[187, "jupyter-notebook-colab"]], "Display Document": [[187, "display-document"]], "Display rich content": [[187, "display-rich-content"]], "Display DocumentArray": [[187, "display-documentarray"]], "Display embeddings": [[187, "display-embeddings"]], "PyCharm users": [[187, "pycharm-users"]], "What is DocArray?": [[188, "what-is-docarray"]], "Design": [[188, "design"]], "Comparing to Alternatives": [[188, "comparing-to-alternatives"]], "To Huggingface Datasets": [[188, "to-huggingface-datasets"]], "To AwkwardArray": [[188, "to-awkwardarray"]], "To Zarr": [[188, "to-zarr"]], "To Jina Users": [[188, "to-jina-users"]], "Welcome to DocArray!": [[189, "welcome-to-docarray"]], "Install": [[189, "install"]], "Support": [[189, "support"]], "Join Us": [[189, "join-us"]], "Protocol Documentation": [[190, "protocol-documentation"], [191, "protocol-documentation"]], "Table of Contents": [[190, "table-of-contents"], [191, "table-of-contents"]], "docarray.proto": [[190, "docarray-proto"], [191, "docarray-proto"]], "DenseNdArrayProto": [[190, "densendarrayproto"], [191, "densendarrayproto"]], "DocumentArrayProto": [[190, "documentarrayproto"], [191, "documentarrayproto"]], "DocumentProto": [[190, "documentproto"], [191, "documentproto"]], "DocumentProto.EvaluationsEntry": [[190, "documentproto-evaluationsentry"], [191, "documentproto-evaluationsentry"]], "DocumentProto.ScoresEntry": [[190, "documentproto-scoresentry"], [191, "documentproto-scoresentry"]], "NamedScoreProto": [[190, "namedscoreproto"], [191, "namedscoreproto"]], "NdArrayProto": [[190, "ndarrayproto"], [191, "ndarrayproto"]], "SparseNdArrayProto": [[190, "sparsendarrayproto"], [191, "sparsendarrayproto"]], "Scalar Value Types": [[190, "scalar-value-types"], [191, "scalar-value-types"]], "Rebuild Protobuf": [[191, "rebuild-protobuf"]]}, "indexentries": {"docarray": [[12, "module-docarray"]], "module": [[12, "module-docarray"], [13, "module-docarray.array"], [14, "module-docarray.array.annlite"], [15, "module-docarray.array.base"], [16, "module-docarray.array.chunk"], [17, "module-docarray.array.document"], [18, "module-docarray.array.elastic"], [19, "module-docarray.array.match"], [20, "module-docarray.array.memory"], [21, "module-docarray.array.mixins"], [22, "module-docarray.array.mixins.content"], [23, "module-docarray.array.mixins.dataloader"], [24, "module-docarray.array.mixins.dataloader.helper"], [25, "module-docarray.array.mixins.delitem"], [26, "module-docarray.array.mixins.embed"], [27, "module-docarray.array.mixins.empty"], [28, "module-docarray.array.mixins.evaluation"], [29, "module-docarray.array.mixins.find"], [30, "module-docarray.array.mixins.getattr"], [31, "module-docarray.array.mixins.getitem"], [32, "module-docarray.array.mixins.group"], [33, "module-docarray.array.mixins.io"], [34, "module-docarray.array.mixins.io.binary"], [35, "module-docarray.array.mixins.io.common"], [36, "module-docarray.array.mixins.io.csv"], [37, "module-docarray.array.mixins.io.dataframe"], [38, "module-docarray.array.mixins.io.from_gen"], [39, "module-docarray.array.mixins.io.json"], [40, "module-docarray.array.mixins.io.pbar"], [41, "module-docarray.array.mixins.io.pushpull"], [42, "module-docarray.array.mixins.match"], [43, "module-docarray.array.mixins.parallel"], [44, "module-docarray.array.mixins.plot"], [45, "module-docarray.array.mixins.post"], [46, "module-docarray.array.mixins.pydantic"], [47, "module-docarray.array.mixins.reduce"], [48, "module-docarray.array.mixins.sample"], [49, "module-docarray.array.mixins.setitem"], [50, "module-docarray.array.mixins.strawberry"], [51, "module-docarray.array.mixins.text"], [52, "module-docarray.array.mixins.traverse"], [53, "module-docarray.array.qdrant"], [54, "module-docarray.array.queryset"], [55, "module-docarray.array.queryset.lookup"], [56, "module-docarray.array.queryset.parser"], [57, "module-docarray.array.sqlite"], [58, "module-docarray.array.storage"], [59, "module-docarray.array.storage.annlite"], [60, "module-docarray.array.storage.annlite.backend"], [61, "module-docarray.array.storage.annlite.find"], [62, "module-docarray.array.storage.annlite.getsetdel"], [63, "module-docarray.array.storage.annlite.helper"], [64, "module-docarray.array.storage.annlite.seqlike"], [65, "module-docarray.array.storage.base"], [66, "module-docarray.array.storage.base.backend"], [67, "module-docarray.array.storage.base.getsetdel"], [68, "module-docarray.array.storage.base.helper"], [69, "module-docarray.array.storage.base.seqlike"], [70, "module-docarray.array.storage.elastic"], [71, "module-docarray.array.storage.elastic.backend"], [72, "module-docarray.array.storage.elastic.find"], [73, "module-docarray.array.storage.elastic.getsetdel"], [74, "module-docarray.array.storage.elastic.seqlike"], [75, "module-docarray.array.storage.memory"], [76, "module-docarray.array.storage.memory.backend"], [77, "module-docarray.array.storage.memory.find"], [78, "module-docarray.array.storage.memory.getsetdel"], [79, "module-docarray.array.storage.memory.seqlike"], [80, "module-docarray.array.storage.qdrant"], [81, "module-docarray.array.storage.qdrant.backend"], [82, "module-docarray.array.storage.qdrant.find"], [83, "module-docarray.array.storage.qdrant.getsetdel"], [84, "module-docarray.array.storage.qdrant.helper"], [85, "module-docarray.array.storage.qdrant.seqlike"], [86, "module-docarray.array.storage.registry"], [87, "module-docarray.array.storage.sqlite"], [88, "module-docarray.array.storage.sqlite.backend"], [89, "module-docarray.array.storage.sqlite.getsetdel"], [90, "module-docarray.array.storage.sqlite.helper"], [91, "module-docarray.array.storage.sqlite.seqlike"], [92, "module-docarray.array.storage.weaviate"], [93, "module-docarray.array.storage.weaviate.backend"], [94, "module-docarray.array.storage.weaviate.find"], [95, "module-docarray.array.storage.weaviate.getsetdel"], [96, "module-docarray.array.storage.weaviate.seqlike"], [97, "module-docarray.array.weaviate"], [98, "module-docarray.base"], [99, "module-docarray.dataclasses"], [100, "module-docarray.dataclasses.getter"], [101, "module-docarray.dataclasses.setter"], [102, "module-docarray.dataclasses.types"], [103, "module-docarray.document"], [104, "module-docarray.document.data"], [105, "module-docarray.document.generators"], [106, "module-docarray.document.mixins"], [107, "module-docarray.document.mixins.attribute"], [108, "module-docarray.document.mixins.audio"], [109, "module-docarray.document.mixins.blob"], [110, "module-docarray.document.mixins.content"], [111, "module-docarray.document.mixins.convert"], [112, "module-docarray.document.mixins.dump"], [113, "module-docarray.document.mixins.featurehash"], [114, "module-docarray.document.mixins.helper"], [115, "module-docarray.document.mixins.image"], [116, "module-docarray.document.mixins.mesh"], [117, "module-docarray.document.mixins.multimodal"], [118, "module-docarray.document.mixins.plot"], [119, "module-docarray.document.mixins.porting"], [120, "module-docarray.document.mixins.property"], [121, "module-docarray.document.mixins.protobuf"], [122, "module-docarray.document.mixins.pydantic"], [123, "module-docarray.document.mixins.rich_embedding"], [124, "module-docarray.document.mixins.strawberry"], [125, "module-docarray.document.mixins.sugar"], [126, "module-docarray.document.mixins.text"], [127, "module-docarray.document.mixins.video"], [128, "module-docarray.document.pydantic_model"], [130, "module-docarray.helper"], [131, "module-docarray.math"], [132, "module-docarray.math.distance"], [133, "module-docarray.math.distance.numpy"], [135, "module-docarray.math.distance.tensorflow"], [136, "module-docarray.math.distance.torch"], [137, "module-docarray.math.evaluation"], [138, "module-docarray.math.helper"], [139, "module-docarray.math.ndarray"], [140, "module-docarray.proto"], [141, "module-docarray.proto.docarray_pb2"], [142, "module-docarray.proto.io"], [143, "module-docarray.proto.io.ndarray"], [144, "module-docarray.score"], [145, "module-docarray.score.data"], [146, "module-docarray.score.mixins"], [147, "module-docarray.score.mixins.property"], [148, "module-docarray.score.mixins.representer"], [149, "module-docarray.typing"]], "docarray.array": [[13, "module-docarray.array"]], "annliteconfig (class in docarray.array.annlite)": [[14, "docarray.array.annlite.AnnliteConfig"]], "documentarrayannlite (class in docarray.array.annlite)": [[14, "docarray.array.annlite.DocumentArrayAnnlite"]], "type_map (docarray.array.annlite.documentarrayannlite attribute)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.TYPE_MAP"]], "append() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.append"]], "apply() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.apply"]], "apply_batch() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.apply_batch"]], "auth_token (docarray.array.annlite.documentarrayannlite property)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.auth_token"]], "batch() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.batch"]], "batch_ids() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.batch_ids"]], "blobs (docarray.array.annlite.documentarrayannlite property)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.blobs"]], "clear() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.clear"]], "columns (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.columns"]], "contents (docarray.array.annlite.documentarrayannlite property)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.contents"]], "count() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.count"]], "data_path (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.data_path"]], "dataloader() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.dataloader"]], "docarray.array.annlite": [[14, "module-docarray.array.annlite"]], "ef_construction (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.ef_search"]], "embed() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.embed"]], "embeddings (docarray.array.annlite.documentarrayannlite property)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.embeddings"]], "empty() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.empty"]], "evaluate() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.evaluate"]], "extend() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.extend"]], "find() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.find"]], "flatten() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.flatten"]], "from_base64() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_base64"]], "from_bytes() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_bytes"]], "from_csv() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_csv"]], "from_dataframe() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_dataframe"]], "from_dict() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_dict"]], "from_files() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_files"]], "from_huggingface_datasets() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_huggingface_datasets"]], "from_json() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_json"]], "from_lines() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_lines"]], "from_list() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_list"]], "from_ndarray() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_ndarray"]], "from_ndjson() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_ndjson"]], "from_protobuf() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_protobuf"]], "from_pydantic_model() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_pydantic_model"]], "from_strawberry_type() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.from_strawberry_type"]], "get_json_schema() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.get_json_schema"]], "get_vocabulary() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.get_vocabulary"]], "index() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.index"]], "insert() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.insert"]], "load() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.load"]], "load_binary() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.load_binary"]], "load_csv() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.load_csv"]], "load_json() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.load_json"]], "map() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.map"]], "map_batch() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.map_batch"]], "match() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.match"]], "max_connection (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.max_connection"]], "metric (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.metric"]], "n_dim (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.n_dim"]], "plot_embeddings() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.plot_embeddings"]], "plot_image_sprites() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.plot_image_sprites"]], "pop() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.pop"]], "post() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.post"]], "pull() (docarray.array.annlite.documentarrayannlite class method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.pull"]], "push() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.push"]], "reduce() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.reduce"]], "reduce_all() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.reduce_all"]], "remove() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.remove"]], "reverse() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.reverse"]], "sample() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.sample"]], "save() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save"]], "save_binary() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save_binary"]], "save_csv() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save_csv"]], "save_embeddings_csv() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save_embeddings_csv"]], "save_gif() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save_gif"]], "save_json() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.save_json"]], "serialize_config (docarray.array.annlite.annliteconfig attribute)": [[14, "docarray.array.annlite.AnnliteConfig.serialize_config"]], "shuffle() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.shuffle"]], "split_by_tag() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.split_by_tag"]], "summary() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.summary"]], "tensors (docarray.array.annlite.documentarrayannlite property)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.tensors"]], "texts (docarray.array.annlite.documentarrayannlite property)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.texts"]], "to_base64() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_base64"]], "to_bytes() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_bytes"]], "to_dataframe() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_dataframe"]], "to_dict() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_dict"]], "to_json() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_json"]], "to_list() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_list"]], "to_protobuf() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_protobuf"]], "to_pydantic_model() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_pydantic_model"]], "to_strawberry_type() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.to_strawberry_type"]], "traverse() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.traverse"]], "traverse_flat() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.traverse_flat"]], "traverse_flat_per_path() (docarray.array.annlite.documentarrayannlite method)": [[14, "docarray.array.annlite.DocumentArrayAnnlite.traverse_flat_per_path"]], "basedocumentarray (class in docarray.array.base)": [[15, "docarray.array.base.BaseDocumentArray"]], "append() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.append"]], "clear() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.clear"]], "count() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.count"]], "docarray.array.base": [[15, "module-docarray.array.base"]], "extend() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.extend"]], "index() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.index"]], "insert() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.insert"]], "pop() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.pop"]], "remove() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.remove"]], "reverse() (docarray.array.base.basedocumentarray method)": [[15, "docarray.array.base.BaseDocumentArray.reverse"]], "chunkarray (class in docarray.array.chunk)": [[16, "docarray.array.chunk.ChunkArray"]], "type_map (docarray.array.chunk.chunkarray attribute)": [[16, "docarray.array.chunk.ChunkArray.TYPE_MAP"]], "adjacency (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.adjacency"]], "append() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.append"]], "apply() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.apply"]], "apply_batch() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.apply_batch"]], "auth_token (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.auth_token"]], "batch() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.batch"]], "batch_ids() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.batch_ids"]], "blobs (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.blobs"]], "clear() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.clear"]], "contents (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.contents"]], "count() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.count"]], "dataloader() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.dataloader"]], "docarray.array.chunk": [[16, "module-docarray.array.chunk"]], "embed() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.embed"]], "embeddings (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.embeddings"]], "empty() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.empty"]], "evaluate() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.evaluate"]], "extend() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.extend"]], "find() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.find"]], "flatten() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.flatten"]], "from_base64() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_base64"]], "from_bytes() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_bytes"]], "from_csv() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_csv"]], "from_dataframe() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_dataframe"]], "from_dict() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_dict"]], "from_files() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_files"]], "from_huggingface_datasets() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_huggingface_datasets"]], "from_json() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_json"]], "from_lines() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_lines"]], "from_list() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_list"]], "from_ndarray() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_ndarray"]], "from_ndjson() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_ndjson"]], "from_protobuf() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_protobuf"]], "from_pydantic_model() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.from_strawberry_type"]], "get_json_schema() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.get_json_schema"]], "get_vocabulary() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.get_vocabulary"]], "granularity (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.granularity"]], "index() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.index"]], "insert() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.insert"]], "load() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.load"]], "load_binary() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.load_binary"]], "load_csv() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.load_csv"]], "load_json() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.load_json"]], "map() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.map"]], "map_batch() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.map_batch"]], "match() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.match"]], "plot_embeddings() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.plot_image_sprites"]], "pop() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.pop"]], "post() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.post"]], "pull() (docarray.array.chunk.chunkarray class method)": [[16, "docarray.array.chunk.ChunkArray.pull"]], "push() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.push"]], "reduce() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.reduce"]], "reduce_all() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.reduce_all"]], "reference_doc (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.reference_doc"]], "remove() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.remove"]], "reverse() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.reverse"]], "sample() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.sample"]], "save() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save"]], "save_binary() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save_binary"]], "save_csv() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save_csv"]], "save_embeddings_csv() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save_embeddings_csv"]], "save_gif() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save_gif"]], "save_json() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.save_json"]], "shuffle() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.shuffle"]], "split_by_tag() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.split_by_tag"]], "summary() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.summary"]], "tensors (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.tensors"]], "texts (docarray.array.chunk.chunkarray property)": [[16, "docarray.array.chunk.ChunkArray.texts"]], "to_base64() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_base64"]], "to_bytes() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_bytes"]], "to_dataframe() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_dataframe"]], "to_dict() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_dict"]], "to_json() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_json"]], "to_list() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_list"]], "to_protobuf() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_protobuf"]], "to_pydantic_model() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.to_strawberry_type"]], "traverse() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.traverse"]], "traverse_flat() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.chunk.chunkarray method)": [[16, "docarray.array.chunk.ChunkArray.traverse_flat_per_path"]], "documentarray (class in docarray.array.document)": [[17, "docarray.array.document.DocumentArray"]], "append() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.append"]], "apply() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.apply"]], "apply_batch() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.apply_batch"]], "auth_token (docarray.array.document.documentarray property)": [[17, "docarray.array.document.DocumentArray.auth_token"]], "batch() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.batch"]], "batch_ids() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.batch_ids"]], "blobs (docarray.array.document.documentarray property)": [[17, "docarray.array.document.DocumentArray.blobs"]], "clear() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.clear"]], "contents (docarray.array.document.documentarray property)": [[17, "docarray.array.document.DocumentArray.contents"]], "count() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.count"]], "dataloader() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.dataloader"]], "docarray.array.document": [[17, "module-docarray.array.document"]], "embed() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.embed"]], "embeddings (docarray.array.document.documentarray property)": [[17, "docarray.array.document.DocumentArray.embeddings"]], "empty() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.empty"]], "evaluate() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.evaluate"]], "extend() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.extend"]], "find() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.find"]], "flatten() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.flatten"]], "from_base64() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_base64"]], "from_bytes() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_bytes"]], "from_csv() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_csv"]], "from_dataframe() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_dataframe"]], "from_dict() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_dict"]], "from_files() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_files"]], "from_huggingface_datasets() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_huggingface_datasets"]], "from_json() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_json"]], "from_lines() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_lines"]], "from_list() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_list"]], "from_ndarray() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_ndarray"]], "from_ndjson() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_ndjson"]], "from_protobuf() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_protobuf"]], "from_pydantic_model() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.from_strawberry_type"]], "get_json_schema() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.get_json_schema"]], "get_vocabulary() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.get_vocabulary"]], "index() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.index"]], "insert() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.insert"]], "load() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.load"]], "load_binary() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.load_binary"]], "load_csv() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.load_csv"]], "load_json() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.load_json"]], "map() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.map"]], "map_batch() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.map_batch"]], "match() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.match"]], "plot_embeddings() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.plot_image_sprites"]], "pop() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.pop"]], "post() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.post"]], "pull() (docarray.array.document.documentarray class method)": [[17, "docarray.array.document.DocumentArray.pull"]], "push() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.push"]], "reduce() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.reduce"]], "reduce_all() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.reduce_all"]], "remove() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.remove"]], "reverse() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.reverse"]], "sample() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.sample"]], "save() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save"]], "save_binary() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save_binary"]], "save_csv() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save_csv"]], "save_embeddings_csv() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save_embeddings_csv"]], "save_gif() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save_gif"]], "save_json() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.save_json"]], "shuffle() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.shuffle"]], "split_by_tag() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.split_by_tag"]], "summary() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.summary"]], "tensors (docarray.array.document.documentarray property)": [[17, "docarray.array.document.DocumentArray.tensors"]], "texts (docarray.array.document.documentarray property)": [[17, "docarray.array.document.DocumentArray.texts"]], "to_base64() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_base64"]], "to_bytes() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_bytes"]], "to_dataframe() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_dataframe"]], "to_dict() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_dict"]], "to_json() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_json"]], "to_list() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_list"]], "to_protobuf() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_protobuf"]], "to_pydantic_model() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.to_strawberry_type"]], "traverse() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.traverse"]], "traverse_flat() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.document.documentarray method)": [[17, "docarray.array.document.DocumentArray.traverse_flat_per_path"]], "documentarrayelastic (class in docarray.array.elastic)": [[18, "docarray.array.elastic.DocumentArrayElastic"]], "elasticconfig (class in docarray.array.elastic)": [[18, "docarray.array.elastic.ElasticConfig"]], "max_es_returned_docs (docarray.array.elastic.documentarrayelastic attribute)": [[18, "docarray.array.elastic.DocumentArrayElastic.MAX_ES_RETURNED_DOCS"]], "type_map (docarray.array.elastic.documentarrayelastic attribute)": [[18, "docarray.array.elastic.DocumentArrayElastic.TYPE_MAP"]], "append() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.append"]], "apply() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.apply"]], "apply_batch() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.apply_batch"]], "auth_token (docarray.array.elastic.documentarrayelastic property)": [[18, "docarray.array.elastic.DocumentArrayElastic.auth_token"]], "batch() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.batch"]], "batch_ids() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.batch_ids"]], "batch_size (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.batch_size"]], "blobs (docarray.array.elastic.documentarrayelastic property)": [[18, "docarray.array.elastic.DocumentArrayElastic.blobs"]], "clear() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.clear"]], "columns (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.columns"]], "contents (docarray.array.elastic.documentarrayelastic property)": [[18, "docarray.array.elastic.DocumentArrayElastic.contents"]], "count() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.count"]], "dataloader() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.dataloader"]], "distance (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.distance"]], "docarray.array.elastic": [[18, "module-docarray.array.elastic"]], "ef_construction (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.ef_construction"]], "embed() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.embed"]], "embeddings (docarray.array.elastic.documentarrayelastic property)": [[18, "docarray.array.elastic.DocumentArrayElastic.embeddings"]], "empty() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.empty"]], "es_config (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.es_config"]], "evaluate() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.evaluate"]], "extend() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.extend"]], "find() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.find"]], "flatten() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.flatten"]], "from_base64() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_base64"]], "from_bytes() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_bytes"]], "from_csv() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_csv"]], "from_dataframe() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_dataframe"]], "from_dict() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_dict"]], "from_files() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_files"]], "from_huggingface_datasets() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_huggingface_datasets"]], "from_json() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_json"]], "from_lines() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_lines"]], "from_list() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_list"]], "from_ndarray() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_ndarray"]], "from_ndjson() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_ndjson"]], "from_protobuf() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_protobuf"]], "from_pydantic_model() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_pydantic_model"]], "from_strawberry_type() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.from_strawberry_type"]], "get_json_schema() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.get_json_schema"]], "get_vocabulary() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.get_vocabulary"]], "hosts (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.hosts"]], "index() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.index"]], "index_name (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.index_name"]], "index_text (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.index_text"]], "insert() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.insert"]], "load() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.load"]], "load_binary() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.load_binary"]], "load_csv() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.load_csv"]], "load_json() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.load_json"]], "m (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.m"]], "map() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.map"]], "map_batch() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.map_batch"]], "match() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.match"]], "n_dim (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.n_dim"]], "plot_embeddings() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.plot_embeddings"]], "plot_image_sprites() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.plot_image_sprites"]], "pop() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.pop"]], "post() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.post"]], "pull() (docarray.array.elastic.documentarrayelastic class method)": [[18, "docarray.array.elastic.DocumentArrayElastic.pull"]], "push() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.push"]], "reduce() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.reduce"]], "reduce_all() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.reduce_all"]], "remove() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.remove"]], "reverse() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.reverse"]], "sample() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.sample"]], "save() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save"]], "save_binary() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save_binary"]], "save_csv() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save_csv"]], "save_embeddings_csv() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save_embeddings_csv"]], "save_gif() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save_gif"]], "save_json() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.save_json"]], "shuffle() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.shuffle"]], "split_by_tag() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.split_by_tag"]], "summary() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.summary"]], "tag_indices (docarray.array.elastic.elasticconfig attribute)": [[18, "docarray.array.elastic.ElasticConfig.tag_indices"]], "tensors (docarray.array.elastic.documentarrayelastic property)": [[18, "docarray.array.elastic.DocumentArrayElastic.tensors"]], "texts (docarray.array.elastic.documentarrayelastic property)": [[18, "docarray.array.elastic.DocumentArrayElastic.texts"]], "to_base64() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_base64"]], "to_bytes() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_bytes"]], "to_dataframe() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_dataframe"]], "to_dict() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_dict"]], "to_json() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_json"]], "to_list() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_list"]], "to_protobuf() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_protobuf"]], "to_pydantic_model() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_pydantic_model"]], "to_strawberry_type() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.to_strawberry_type"]], "traverse() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.traverse"]], "traverse_flat() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.traverse_flat"]], "traverse_flat_per_path() (docarray.array.elastic.documentarrayelastic method)": [[18, "docarray.array.elastic.DocumentArrayElastic.traverse_flat_per_path"]], "matcharray (class in docarray.array.match)": [[19, "docarray.array.match.MatchArray"]], "type_map (docarray.array.match.matcharray attribute)": [[19, "docarray.array.match.MatchArray.TYPE_MAP"]], "adjacency (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.adjacency"]], "append() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.append"]], "apply() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.apply"]], "apply_batch() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.apply_batch"]], "auth_token (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.auth_token"]], "batch() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.batch"]], "batch_ids() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.batch_ids"]], "blobs (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.blobs"]], "clear() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.clear"]], "contents (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.contents"]], "count() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.count"]], "dataloader() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.dataloader"]], "docarray.array.match": [[19, "module-docarray.array.match"]], "embed() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.embed"]], "embeddings (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.embeddings"]], "empty() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.empty"]], "evaluate() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.evaluate"]], "extend() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.extend"]], "find() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.find"]], "flatten() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.flatten"]], "from_base64() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_base64"]], "from_bytes() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_bytes"]], "from_csv() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_csv"]], "from_dataframe() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_dataframe"]], "from_dict() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_dict"]], "from_files() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_files"]], "from_huggingface_datasets() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_huggingface_datasets"]], "from_json() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_json"]], "from_lines() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_lines"]], "from_list() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_list"]], "from_ndarray() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_ndarray"]], "from_ndjson() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_ndjson"]], "from_protobuf() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_protobuf"]], "from_pydantic_model() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_pydantic_model"]], "from_strawberry_type() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.from_strawberry_type"]], "get_json_schema() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.get_json_schema"]], "get_vocabulary() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.get_vocabulary"]], "granularity (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.granularity"]], "index() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.index"]], "insert() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.insert"]], "load() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.load"]], "load_binary() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.load_binary"]], "load_csv() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.load_csv"]], "load_json() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.load_json"]], "map() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.map"]], "map_batch() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.map_batch"]], "match() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.match"]], "plot_embeddings() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.plot_embeddings"]], "plot_image_sprites() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.plot_image_sprites"]], "pop() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.pop"]], "post() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.post"]], "pull() (docarray.array.match.matcharray class method)": [[19, "docarray.array.match.MatchArray.pull"]], "push() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.push"]], "reduce() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.reduce"]], "reduce_all() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.reduce_all"]], "reference_doc (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.reference_doc"]], "remove() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.remove"]], "reverse() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.reverse"]], "sample() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.sample"]], "save() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save"]], "save_binary() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save_binary"]], "save_csv() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save_csv"]], "save_embeddings_csv() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save_embeddings_csv"]], "save_gif() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save_gif"]], "save_json() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.save_json"]], "shuffle() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.shuffle"]], "split_by_tag() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.split_by_tag"]], "summary() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.summary"]], "tensors (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.tensors"]], "texts (docarray.array.match.matcharray property)": [[19, "docarray.array.match.MatchArray.texts"]], "to_base64() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_base64"]], "to_bytes() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_bytes"]], "to_dataframe() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_dataframe"]], "to_dict() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_dict"]], "to_json() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_json"]], "to_list() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_list"]], "to_protobuf() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_protobuf"]], "to_pydantic_model() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_pydantic_model"]], "to_strawberry_type() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.to_strawberry_type"]], "traverse() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.traverse"]], "traverse_flat() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.traverse_flat"]], "traverse_flat_per_path() (docarray.array.match.matcharray method)": [[19, "docarray.array.match.MatchArray.traverse_flat_per_path"]], "documentarrayinmemory (class in docarray.array.memory)": [[20, "docarray.array.memory.DocumentArrayInMemory"]], "type_map (docarray.array.memory.documentarrayinmemory attribute)": [[20, "docarray.array.memory.DocumentArrayInMemory.TYPE_MAP"]], "append() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.append"]], "apply() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.apply"]], "apply_batch() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.apply_batch"]], "auth_token (docarray.array.memory.documentarrayinmemory property)": [[20, "docarray.array.memory.DocumentArrayInMemory.auth_token"]], "batch() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.batch"]], "batch_ids() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.batch_ids"]], "blobs (docarray.array.memory.documentarrayinmemory property)": [[20, "docarray.array.memory.DocumentArrayInMemory.blobs"]], "clear() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.clear"]], "contents (docarray.array.memory.documentarrayinmemory property)": [[20, "docarray.array.memory.DocumentArrayInMemory.contents"]], "count() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.count"]], "dataloader() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.dataloader"]], "docarray.array.memory": [[20, "module-docarray.array.memory"]], "embed() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.embed"]], "embeddings (docarray.array.memory.documentarrayinmemory property)": [[20, "docarray.array.memory.DocumentArrayInMemory.embeddings"]], "empty() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.empty"]], "evaluate() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.evaluate"]], "extend() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.extend"]], "find() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.find"]], "flatten() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.flatten"]], "from_base64() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_base64"]], "from_bytes() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_bytes"]], "from_csv() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_csv"]], "from_dataframe() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_dataframe"]], "from_dict() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_dict"]], "from_files() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_files"]], "from_huggingface_datasets() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_huggingface_datasets"]], "from_json() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_json"]], "from_lines() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_lines"]], "from_list() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_list"]], "from_ndarray() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_ndarray"]], "from_ndjson() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_ndjson"]], "from_protobuf() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_protobuf"]], "from_pydantic_model() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_pydantic_model"]], "from_strawberry_type() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.from_strawberry_type"]], "get_json_schema() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.get_json_schema"]], "get_vocabulary() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.get_vocabulary"]], "index() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.index"]], "insert() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.insert"]], "load() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.load"]], "load_binary() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.load_binary"]], "load_csv() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.load_csv"]], "load_json() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.load_json"]], "map() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.map"]], "map_batch() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.map_batch"]], "match() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.match"]], "plot_embeddings() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.plot_embeddings"]], "plot_image_sprites() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.plot_image_sprites"]], "pop() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.pop"]], "post() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.post"]], "pull() (docarray.array.memory.documentarrayinmemory class method)": [[20, "docarray.array.memory.DocumentArrayInMemory.pull"]], "push() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.push"]], "reduce() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.reduce"]], "reduce_all() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.reduce_all"]], "remove() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.remove"]], "reverse() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.reverse"]], "sample() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.sample"]], "save() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save"]], "save_binary() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save_binary"]], "save_csv() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save_csv"]], "save_embeddings_csv() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save_embeddings_csv"]], "save_gif() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save_gif"]], "save_json() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.save_json"]], "shuffle() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.shuffle"]], "split_by_tag() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.split_by_tag"]], "summary() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.summary"]], "tensors (docarray.array.memory.documentarrayinmemory property)": [[20, "docarray.array.memory.DocumentArrayInMemory.tensors"]], "texts (docarray.array.memory.documentarrayinmemory property)": [[20, "docarray.array.memory.DocumentArrayInMemory.texts"]], "to_base64() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_base64"]], "to_bytes() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_bytes"]], "to_dataframe() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_dataframe"]], "to_dict() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_dict"]], "to_json() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_json"]], "to_list() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_list"]], "to_protobuf() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_protobuf"]], "to_pydantic_model() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_pydantic_model"]], "to_strawberry_type() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.to_strawberry_type"]], "traverse() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.traverse"]], "traverse_flat() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.traverse_flat"]], "traverse_flat_per_path() (docarray.array.memory.documentarrayinmemory method)": [[20, "docarray.array.memory.DocumentArrayInMemory.traverse_flat_per_path"]], "allmixins (class in docarray.array.mixins)": [[21, "docarray.array.mixins.AllMixins"]], "apply() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.apply"]], "apply_batch() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.apply_batch"]], "auth_token (docarray.array.mixins.allmixins property)": [[21, "docarray.array.mixins.AllMixins.auth_token"]], "batch() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.batch"]], "batch_ids() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.batch_ids"]], "blobs (docarray.array.mixins.allmixins property)": [[21, "docarray.array.mixins.AllMixins.blobs"]], "contents (docarray.array.mixins.allmixins property)": [[21, "docarray.array.mixins.AllMixins.contents"]], "dataloader() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.dataloader"]], "docarray.array.mixins": [[21, "module-docarray.array.mixins"]], "embed() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.embed"]], "embeddings (docarray.array.mixins.allmixins property)": [[21, "docarray.array.mixins.AllMixins.embeddings"]], "empty() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.empty"]], "evaluate() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.evaluate"]], "find() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.find"]], "flatten() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.flatten"]], "from_base64() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_base64"]], "from_bytes() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_bytes"]], "from_csv() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_csv"]], "from_dataframe() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_dataframe"]], "from_dict() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_dict"]], "from_files() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_files"]], "from_huggingface_datasets() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_huggingface_datasets"]], "from_json() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_json"]], "from_lines() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_lines"]], "from_list() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_list"]], "from_ndarray() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_ndarray"]], "from_ndjson() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_ndjson"]], "from_protobuf() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_protobuf"]], "from_pydantic_model() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_pydantic_model"]], "from_strawberry_type() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.from_strawberry_type"]], "get_json_schema() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.get_json_schema"]], "get_vocabulary() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.get_vocabulary"]], "load() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.load"]], "load_binary() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.load_binary"]], "load_csv() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.load_csv"]], "load_json() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.load_json"]], "map() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.map"]], "map_batch() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.map_batch"]], "match() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.match"]], "plot_embeddings() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.plot_embeddings"]], "plot_image_sprites() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.plot_image_sprites"]], "post() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.post"]], "pull() (docarray.array.mixins.allmixins class method)": [[21, "docarray.array.mixins.AllMixins.pull"]], "push() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.push"]], "reduce() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.reduce"]], "reduce_all() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.reduce_all"]], "sample() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.sample"]], "save() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save"]], "save_binary() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save_binary"]], "save_csv() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save_csv"]], "save_embeddings_csv() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save_embeddings_csv"]], "save_gif() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save_gif"]], "save_json() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.save_json"]], "shuffle() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.shuffle"]], "split_by_tag() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.split_by_tag"]], "summary() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.summary"]], "tensors (docarray.array.mixins.allmixins property)": [[21, "docarray.array.mixins.AllMixins.tensors"]], "texts (docarray.array.mixins.allmixins property)": [[21, "docarray.array.mixins.AllMixins.texts"]], "to_base64() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_base64"]], "to_bytes() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_bytes"]], "to_dataframe() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_dataframe"]], "to_dict() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_dict"]], "to_json() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_json"]], "to_list() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_list"]], "to_protobuf() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_protobuf"]], "to_pydantic_model() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_pydantic_model"]], "to_strawberry_type() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.to_strawberry_type"]], "traverse() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.traverse"]], "traverse_flat() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.traverse_flat"]], "traverse_flat_per_path() (docarray.array.mixins.allmixins method)": [[21, "docarray.array.mixins.AllMixins.traverse_flat_per_path"]], "contentpropertymixin (class in docarray.array.mixins.content)": [[22, "docarray.array.mixins.content.ContentPropertyMixin"]], "blobs (docarray.array.mixins.content.contentpropertymixin property)": [[22, "docarray.array.mixins.content.ContentPropertyMixin.blobs"]], "contents (docarray.array.mixins.content.contentpropertymixin property)": [[22, "docarray.array.mixins.content.ContentPropertyMixin.contents"]], "docarray.array.mixins.content": [[22, "module-docarray.array.mixins.content"]], "embeddings (docarray.array.mixins.content.contentpropertymixin property)": [[22, "docarray.array.mixins.content.ContentPropertyMixin.embeddings"]], "tensors (docarray.array.mixins.content.contentpropertymixin property)": [[22, "docarray.array.mixins.content.ContentPropertyMixin.tensors"]], "texts (docarray.array.mixins.content.contentpropertymixin property)": [[22, "docarray.array.mixins.content.ContentPropertyMixin.texts"]], "dataloadermixin (class in docarray.array.mixins.dataloader)": [[23, "docarray.array.mixins.dataloader.DataLoaderMixin"]], "dataloader() (docarray.array.mixins.dataloader.dataloadermixin class method)": [[23, "docarray.array.mixins.dataloader.DataLoaderMixin.dataloader"]], "docarray.array.mixins.dataloader": [[23, "module-docarray.array.mixins.dataloader"]], "documentarrayloader (class in docarray.array.mixins.dataloader.helper)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader"]], "apply() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.apply"]], "apply_batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.apply_batch"]], "batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.batch"]], "batch_ids() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.batch_ids"]], "docarray.array.mixins.dataloader.helper": [[24, "module-docarray.array.mixins.dataloader.helper"]], "map() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.map"]], "map_batch() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.map_batch"]], "split_by_tag() (docarray.array.mixins.dataloader.helper.documentarrayloader method)": [[24, "docarray.array.mixins.dataloader.helper.DocumentArrayLoader.split_by_tag"]], "delitemmixin (class in docarray.array.mixins.delitem)": [[25, "docarray.array.mixins.delitem.DelItemMixin"]], "docarray.array.mixins.delitem": [[25, "module-docarray.array.mixins.delitem"]], "embedmixin (class in docarray.array.mixins.embed)": [[26, "docarray.array.mixins.embed.EmbedMixin"]], "docarray.array.mixins.embed": [[26, "module-docarray.array.mixins.embed"]], "embed() (docarray.array.mixins.embed.embedmixin method)": [[26, "docarray.array.mixins.embed.EmbedMixin.embed"]], "get_framework() (in module docarray.array.mixins.embed)": [[26, "docarray.array.mixins.embed.get_framework"]], "emptymixin (class in docarray.array.mixins.empty)": [[27, "docarray.array.mixins.empty.EmptyMixin"]], "docarray.array.mixins.empty": [[27, "module-docarray.array.mixins.empty"]], "empty() (docarray.array.mixins.empty.emptymixin class method)": [[27, "docarray.array.mixins.empty.EmptyMixin.empty"]], "evaluationmixin (class in docarray.array.mixins.evaluation)": [[28, "docarray.array.mixins.evaluation.EvaluationMixin"]], "docarray.array.mixins.evaluation": [[28, "module-docarray.array.mixins.evaluation"]], "evaluate() (docarray.array.mixins.evaluation.evaluationmixin method)": [[28, "docarray.array.mixins.evaluation.EvaluationMixin.evaluate"]], "findmixin (class in docarray.array.mixins.find)": [[29, "docarray.array.mixins.find.FindMixin"]], "docarray.array.mixins.find": [[29, "module-docarray.array.mixins.find"]], "find() (docarray.array.mixins.find.findmixin method)": [[29, "docarray.array.mixins.find.FindMixin.find"]], "getattributemixin (class in docarray.array.mixins.getattr)": [[30, "docarray.array.mixins.getattr.GetAttributeMixin"]], "docarray.array.mixins.getattr": [[30, "module-docarray.array.mixins.getattr"]], "getitemmixin (class in docarray.array.mixins.getitem)": [[31, "docarray.array.mixins.getitem.GetItemMixin"]], "docarray.array.mixins.getitem": [[31, "module-docarray.array.mixins.getitem"]], "groupmixin (class in docarray.array.mixins.group)": [[32, "docarray.array.mixins.group.GroupMixin"]], "batch() (docarray.array.mixins.group.groupmixin method)": [[32, "docarray.array.mixins.group.GroupMixin.batch"]], "batch_ids() (docarray.array.mixins.group.groupmixin method)": [[32, "docarray.array.mixins.group.GroupMixin.batch_ids"]], "docarray.array.mixins.group": [[32, "module-docarray.array.mixins.group"]], "split_by_tag() (docarray.array.mixins.group.groupmixin method)": [[32, "docarray.array.mixins.group.GroupMixin.split_by_tag"]], "docarray.array.mixins.io": [[33, "module-docarray.array.mixins.io"]], "binaryiomixin (class in docarray.array.mixins.io.binary)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin"]], "lazyrequestreader (class in docarray.array.mixins.io.binary)": [[34, "docarray.array.mixins.io.binary.LazyRequestReader"]], "docarray.array.mixins.io.binary": [[34, "module-docarray.array.mixins.io.binary"]], "from_base64() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.from_base64"]], "from_bytes() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.from_bytes"]], "from_protobuf() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.from_protobuf"]], "load_binary() (docarray.array.mixins.io.binary.binaryiomixin class method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.load_binary"]], "save_binary() (docarray.array.mixins.io.binary.binaryiomixin method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.save_binary"]], "to_base64() (docarray.array.mixins.io.binary.binaryiomixin method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.to_base64"]], "to_bytes() (docarray.array.mixins.io.binary.binaryiomixin method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.to_bytes"]], "to_protobuf() (docarray.array.mixins.io.binary.binaryiomixin method)": [[34, "docarray.array.mixins.io.binary.BinaryIOMixin.to_protobuf"]], "commoniomixin (class in docarray.array.mixins.io.common)": [[35, "docarray.array.mixins.io.common.CommonIOMixin"]], "docarray.array.mixins.io.common": [[35, "module-docarray.array.mixins.io.common"]], "load() (docarray.array.mixins.io.common.commoniomixin class method)": [[35, "docarray.array.mixins.io.common.CommonIOMixin.load"]], "save() (docarray.array.mixins.io.common.commoniomixin method)": [[35, "docarray.array.mixins.io.common.CommonIOMixin.save"]], "csviomixin (class in docarray.array.mixins.io.csv)": [[36, "docarray.array.mixins.io.csv.CsvIOMixin"]], "docarray.array.mixins.io.csv": [[36, "module-docarray.array.mixins.io.csv"]], "load_csv() (docarray.array.mixins.io.csv.csviomixin class method)": [[36, "docarray.array.mixins.io.csv.CsvIOMixin.load_csv"]], "save_csv() (docarray.array.mixins.io.csv.csviomixin method)": [[36, "docarray.array.mixins.io.csv.CsvIOMixin.save_csv"]], "save_embeddings_csv() (docarray.array.mixins.io.csv.csviomixin method)": [[36, "docarray.array.mixins.io.csv.CsvIOMixin.save_embeddings_csv"]], "dataframeiomixin (class in docarray.array.mixins.io.dataframe)": [[37, "docarray.array.mixins.io.dataframe.DataframeIOMixin"]], "docarray.array.mixins.io.dataframe": [[37, "module-docarray.array.mixins.io.dataframe"]], "from_dataframe() (docarray.array.mixins.io.dataframe.dataframeiomixin class method)": [[37, "docarray.array.mixins.io.dataframe.DataframeIOMixin.from_dataframe"]], "to_dataframe() (docarray.array.mixins.io.dataframe.dataframeiomixin method)": [[37, "docarray.array.mixins.io.dataframe.DataframeIOMixin.to_dataframe"]], "fromgeneratormixin (class in docarray.array.mixins.io.from_gen)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin"]], "docarray.array.mixins.io.from_gen": [[38, "module-docarray.array.mixins.io.from_gen"]], "from_csv() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_csv"]], "from_files() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_files"]], "from_huggingface_datasets() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_huggingface_datasets"]], "from_lines() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_lines"]], "from_ndarray() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_ndarray"]], "from_ndjson() (docarray.array.mixins.io.from_gen.fromgeneratormixin class method)": [[38, "docarray.array.mixins.io.from_gen.FromGeneratorMixin.from_ndjson"]], "jsoniomixin (class in docarray.array.mixins.io.json)": [[39, "docarray.array.mixins.io.json.JsonIOMixin"]], "docarray.array.mixins.io.json": [[39, "module-docarray.array.mixins.io.json"]], "from_dict() (docarray.array.mixins.io.json.jsoniomixin class method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.from_dict"]], "from_json() (docarray.array.mixins.io.json.jsoniomixin class method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.from_json"]], "from_list() (docarray.array.mixins.io.json.jsoniomixin class method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.from_list"]], "load_json() (docarray.array.mixins.io.json.jsoniomixin class method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.load_json"]], "save_json() (docarray.array.mixins.io.json.jsoniomixin method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.save_json"]], "to_dict() (docarray.array.mixins.io.json.jsoniomixin method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.to_dict"]], "to_json() (docarray.array.mixins.io.json.jsoniomixin method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.to_json"]], "to_list() (docarray.array.mixins.io.json.jsoniomixin method)": [[39, "docarray.array.mixins.io.json.JsonIOMixin.to_list"]], "qpscolumn (class in docarray.array.mixins.io.pbar)": [[40, "docarray.array.mixins.io.pbar.QPSColumn"]], "docarray.array.mixins.io.pbar": [[40, "module-docarray.array.mixins.io.pbar"]], "get_pbar() (in module docarray.array.mixins.io.pbar)": [[40, "docarray.array.mixins.io.pbar.get_pbar"]], "get_progressbar() (in module docarray.array.mixins.io.pbar)": [[40, "docarray.array.mixins.io.pbar.get_progressbar"]], "get_table_column() (docarray.array.mixins.io.pbar.qpscolumn method)": [[40, "docarray.array.mixins.io.pbar.QPSColumn.get_table_column"]], "max_refresh (docarray.array.mixins.io.pbar.qpscolumn attribute)": [[40, "docarray.array.mixins.io.pbar.QPSColumn.max_refresh"]], "render() (docarray.array.mixins.io.pbar.qpscolumn method)": [[40, "docarray.array.mixins.io.pbar.QPSColumn.render"]], "pushpullmixin (class in docarray.array.mixins.io.pushpull)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin"]], "auth_token (docarray.array.mixins.io.pushpull.pushpullmixin property)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin.auth_token"]], "docarray.array.mixins.io.pushpull": [[41, "module-docarray.array.mixins.io.pushpull"]], "pull() (docarray.array.mixins.io.pushpull.pushpullmixin class method)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin.pull"]], "push() (docarray.array.mixins.io.pushpull.pushpullmixin method)": [[41, "docarray.array.mixins.io.pushpull.PushPullMixin.push"]], "matchmixin (class in docarray.array.mixins.match)": [[42, "docarray.array.mixins.match.MatchMixin"]], "docarray.array.mixins.match": [[42, "module-docarray.array.mixins.match"]], "match() (docarray.array.mixins.match.matchmixin method)": [[42, "docarray.array.mixins.match.MatchMixin.match"]], "parallelmixin (class in docarray.array.mixins.parallel)": [[43, "docarray.array.mixins.parallel.ParallelMixin"]], "apply() (docarray.array.mixins.parallel.parallelmixin method)": [[43, "docarray.array.mixins.parallel.ParallelMixin.apply"]], "apply_batch() (docarray.array.mixins.parallel.parallelmixin method)": [[43, "docarray.array.mixins.parallel.ParallelMixin.apply_batch"]], "docarray.array.mixins.parallel": [[43, "module-docarray.array.mixins.parallel"]], "map() (docarray.array.mixins.parallel.parallelmixin method)": [[43, "docarray.array.mixins.parallel.ParallelMixin.map"]], "map_batch() (docarray.array.mixins.parallel.parallelmixin method)": [[43, "docarray.array.mixins.parallel.ParallelMixin.map_batch"]], "plotmixin (class in docarray.array.mixins.plot)": [[44, "docarray.array.mixins.plot.PlotMixin"]], "docarray.array.mixins.plot": [[44, "module-docarray.array.mixins.plot"]], "plot_embeddings() (docarray.array.mixins.plot.plotmixin method)": [[44, "docarray.array.mixins.plot.PlotMixin.plot_embeddings"]], "plot_image_sprites() (docarray.array.mixins.plot.plotmixin method)": [[44, "docarray.array.mixins.plot.PlotMixin.plot_image_sprites"]], "save_gif() (docarray.array.mixins.plot.plotmixin method)": [[44, "docarray.array.mixins.plot.PlotMixin.save_gif"]], "summary() (docarray.array.mixins.plot.plotmixin method)": [[44, "docarray.array.mixins.plot.PlotMixin.summary"]], "postmixin (class in docarray.array.mixins.post)": [[45, "docarray.array.mixins.post.PostMixin"]], "docarray.array.mixins.post": [[45, "module-docarray.array.mixins.post"]], "post() (docarray.array.mixins.post.postmixin method)": [[45, "docarray.array.mixins.post.PostMixin.post"]], "pydanticmixin (class in docarray.array.mixins.pydantic)": [[46, "docarray.array.mixins.pydantic.PydanticMixin"]], "docarray.array.mixins.pydantic": [[46, "module-docarray.array.mixins.pydantic"]], "from_pydantic_model() (docarray.array.mixins.pydantic.pydanticmixin class method)": [[46, "docarray.array.mixins.pydantic.PydanticMixin.from_pydantic_model"]], "get_json_schema() (docarray.array.mixins.pydantic.pydanticmixin class method)": [[46, "docarray.array.mixins.pydantic.PydanticMixin.get_json_schema"]], "to_pydantic_model() (docarray.array.mixins.pydantic.pydanticmixin method)": [[46, "docarray.array.mixins.pydantic.PydanticMixin.to_pydantic_model"]], "reducemixin (class in docarray.array.mixins.reduce)": [[47, "docarray.array.mixins.reduce.ReduceMixin"]], "docarray.array.mixins.reduce": [[47, "module-docarray.array.mixins.reduce"]], "reduce() (docarray.array.mixins.reduce.reducemixin method)": [[47, "docarray.array.mixins.reduce.ReduceMixin.reduce"]], "reduce_all() (docarray.array.mixins.reduce.reducemixin method)": [[47, "docarray.array.mixins.reduce.ReduceMixin.reduce_all"]], "samplemixin (class in docarray.array.mixins.sample)": [[48, "docarray.array.mixins.sample.SampleMixin"]], "docarray.array.mixins.sample": [[48, "module-docarray.array.mixins.sample"]], "sample() (docarray.array.mixins.sample.samplemixin method)": [[48, "docarray.array.mixins.sample.SampleMixin.sample"]], "shuffle() (docarray.array.mixins.sample.samplemixin method)": [[48, "docarray.array.mixins.sample.SampleMixin.shuffle"]], "setitemmixin (class in docarray.array.mixins.setitem)": [[49, "docarray.array.mixins.setitem.SetItemMixin"]], "docarray.array.mixins.setitem": [[49, "module-docarray.array.mixins.setitem"]], "strawberrymixin (class in docarray.array.mixins.strawberry)": [[50, "docarray.array.mixins.strawberry.StrawberryMixin"]], "docarray.array.mixins.strawberry": [[50, "module-docarray.array.mixins.strawberry"]], "from_strawberry_type() (docarray.array.mixins.strawberry.strawberrymixin class method)": [[50, "docarray.array.mixins.strawberry.StrawberryMixin.from_strawberry_type"]], "to_strawberry_type() (docarray.array.mixins.strawberry.strawberrymixin method)": [[50, "docarray.array.mixins.strawberry.StrawberryMixin.to_strawberry_type"]], "texttoolsmixin (class in docarray.array.mixins.text)": [[51, "docarray.array.mixins.text.TextToolsMixin"]], "docarray.array.mixins.text": [[51, "module-docarray.array.mixins.text"]], "get_vocabulary() (docarray.array.mixins.text.texttoolsmixin method)": [[51, "docarray.array.mixins.text.TextToolsMixin.get_vocabulary"]], "traversemixin (class in docarray.array.mixins.traverse)": [[52, "docarray.array.mixins.traverse.TraverseMixin"]], "docarray.array.mixins.traverse": [[52, "module-docarray.array.mixins.traverse"]], "flatten() (docarray.array.mixins.traverse.traversemixin method)": [[52, "docarray.array.mixins.traverse.TraverseMixin.flatten"]], "traverse() (docarray.array.mixins.traverse.traversemixin method)": [[52, "docarray.array.mixins.traverse.TraverseMixin.traverse"]], "traverse_flat() (docarray.array.mixins.traverse.traversemixin method)": [[52, "docarray.array.mixins.traverse.TraverseMixin.traverse_flat"]], "traverse_flat_per_path() (docarray.array.mixins.traverse.traversemixin method)": [[52, "docarray.array.mixins.traverse.TraverseMixin.traverse_flat_per_path"]], "documentarrayqdrant (class in docarray.array.qdrant)": [[53, "docarray.array.qdrant.DocumentArrayQdrant"]], "qdrantconfig (class in docarray.array.qdrant)": [[53, "docarray.array.qdrant.QdrantConfig"]], "type_map (docarray.array.qdrant.documentarrayqdrant attribute)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.TYPE_MAP"]], "append() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.append"]], "apply() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.apply"]], "apply_batch() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.apply_batch"]], "auth_token (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.auth_token"]], "batch() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.batch"]], "batch_ids() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.batch_ids"]], "blobs (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.blobs"]], "clear() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.clear"]], "client (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.client"]], "collection_name (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.collection_name"]], "collection_name (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.collection_name"]], "collection_name_meta (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.collection_name_meta"]], "columns (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.columns"]], "config (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.config"]], "contents (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.contents"]], "count() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.count"]], "dataloader() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.dataloader"]], "distance (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.distance"]], "distance (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.distance"]], "docarray.array.qdrant": [[53, "module-docarray.array.qdrant"]], "ef_construct (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.ef_construct"]], "embed() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.embed"]], "embeddings (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.embeddings"]], "empty() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.empty"]], "evaluate() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.evaluate"]], "extend() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.extend"]], "find() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.find"]], "flatten() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.flatten"]], "from_base64() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_base64"]], "from_bytes() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_bytes"]], "from_csv() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_csv"]], "from_dataframe() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_dataframe"]], "from_dict() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_dict"]], "from_files() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_files"]], "from_huggingface_datasets() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_huggingface_datasets"]], "from_json() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_json"]], "from_lines() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_lines"]], "from_list() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_list"]], "from_ndarray() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_ndarray"]], "from_ndjson() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_ndjson"]], "from_protobuf() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_protobuf"]], "from_pydantic_model() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_pydantic_model"]], "from_strawberry_type() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.from_strawberry_type"]], "full_scan_threshold (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.full_scan_threshold"]], "get_json_schema() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.get_json_schema"]], "get_vocabulary() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.get_vocabulary"]], "host (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.host"]], "index() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.index"]], "insert() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.insert"]], "load() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.load"]], "load_binary() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.load_binary"]], "load_csv() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.load_csv"]], "load_json() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.load_json"]], "m (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.m"]], "map() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.map"]], "map_batch() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.map_batch"]], "match() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.match"]], "n_dim (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.n_dim"]], "n_dim (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.n_dim"]], "plot_embeddings() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.plot_embeddings"]], "plot_image_sprites() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.plot_image_sprites"]], "pop() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.pop"]], "port (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.port"]], "post() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.post"]], "pull() (docarray.array.qdrant.documentarrayqdrant class method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.pull"]], "push() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.push"]], "reduce() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.reduce"]], "reduce_all() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.reduce_all"]], "remove() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.remove"]], "reverse() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.reverse"]], "sample() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.sample"]], "save() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save"]], "save_binary() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save_binary"]], "save_csv() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save_csv"]], "save_embeddings_csv() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save_embeddings_csv"]], "save_gif() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save_gif"]], "save_json() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.save_json"]], "scan() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.scan"]], "scroll_batch_size (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.scroll_batch_size"]], "scroll_batch_size (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.scroll_batch_size"]], "serialization_config (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.serialization_config"]], "serialize_config (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.serialize_config"]], "serialize_config (docarray.array.qdrant.qdrantconfig attribute)": [[53, "docarray.array.qdrant.QdrantConfig.serialize_config"]], "shuffle() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.shuffle"]], "split_by_tag() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.split_by_tag"]], "summary() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.summary"]], "tensors (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.tensors"]], "texts (docarray.array.qdrant.documentarrayqdrant property)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.texts"]], "to_base64() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_base64"]], "to_bytes() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_bytes"]], "to_dataframe() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_dataframe"]], "to_dict() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_dict"]], "to_json() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_json"]], "to_list() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_list"]], "to_protobuf() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_protobuf"]], "to_pydantic_model() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_pydantic_model"]], "to_strawberry_type() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.to_strawberry_type"]], "traverse() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.traverse"]], "traverse_flat() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.traverse_flat"]], "traverse_flat_per_path() (docarray.array.qdrant.documentarrayqdrant method)": [[53, "docarray.array.qdrant.DocumentArrayQdrant.traverse_flat_per_path"]], "docarray.array.queryset": [[54, "module-docarray.array.queryset"]], "lookupleaf (class in docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.LookupLeaf"]], "lookupnode (class in docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.LookupNode"]], "lookuptreeelem (class in docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.LookupTreeElem"]], "lookupyerror": [[55, "docarray.array.queryset.lookup.LookupyError"]], "q (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.Q"]], "add_child() (docarray.array.queryset.lookup.lookupnode method)": [[55, "docarray.array.queryset.lookup.LookupNode.add_child"]], "args (docarray.array.queryset.lookup.lookupyerror attribute)": [[55, "docarray.array.queryset.lookup.LookupyError.args"]], "docarray.array.queryset.lookup": [[55, "module-docarray.array.queryset.lookup"]], "dunder_partition() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.dunder_partition"]], "evaluate() (docarray.array.queryset.lookup.lookupleaf method)": [[55, "docarray.array.queryset.lookup.LookupLeaf.evaluate"]], "evaluate() (docarray.array.queryset.lookup.lookupnode method)": [[55, "docarray.array.queryset.lookup.LookupNode.evaluate"]], "evaluate() (docarray.array.queryset.lookup.lookuptreeelem method)": [[55, "docarray.array.queryset.lookup.LookupTreeElem.evaluate"]], "guard_q() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.guard_Q"]], "guard_iter() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.guard_iter"]], "guard_list() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.guard_list"]], "guard_str() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.guard_str"]], "guard_type() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.guard_type"]], "iff() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.iff"]], "iff_not_none() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.iff_not_none"]], "lookup() (in module docarray.array.queryset.lookup)": [[55, "docarray.array.queryset.lookup.lookup"]], "with_traceback() (docarray.array.queryset.lookup.lookupyerror method)": [[55, "docarray.array.queryset.lookup.LookupyError.with_traceback"]], "queryparser (class in docarray.array.queryset.parser)": [[56, "docarray.array.queryset.parser.QueryParser"]], "docarray.array.queryset.parser": [[56, "module-docarray.array.queryset.parser"]], "evaluate() (docarray.array.queryset.parser.queryparser method)": [[56, "docarray.array.queryset.parser.QueryParser.evaluate"]], "documentarraysqlite (class in docarray.array.sqlite)": [[57, "docarray.array.sqlite.DocumentArraySqlite"]], "sqliteconfig (class in docarray.array.sqlite)": [[57, "docarray.array.sqlite.SqliteConfig"]], "type_map (docarray.array.sqlite.documentarraysqlite attribute)": [[57, "docarray.array.sqlite.DocumentArraySqlite.TYPE_MAP"]], "append() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.append"]], "apply() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.apply"]], "apply_batch() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.apply_batch"]], "auth_token (docarray.array.sqlite.documentarraysqlite property)": [[57, "docarray.array.sqlite.DocumentArraySqlite.auth_token"]], "batch() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.batch"]], "batch_ids() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.batch_ids"]], "blobs (docarray.array.sqlite.documentarraysqlite property)": [[57, "docarray.array.sqlite.DocumentArraySqlite.blobs"]], "clear() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.clear"]], "conn_config (docarray.array.sqlite.sqliteconfig attribute)": [[57, "docarray.array.sqlite.SqliteConfig.conn_config"]], "connection (docarray.array.sqlite.sqliteconfig attribute)": [[57, "docarray.array.sqlite.SqliteConfig.connection"]], "contents (docarray.array.sqlite.documentarraysqlite property)": [[57, "docarray.array.sqlite.DocumentArraySqlite.contents"]], "count() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.count"]], "dataloader() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.dataloader"]], "docarray.array.sqlite": [[57, "module-docarray.array.sqlite"]], "embed() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.embed"]], "embeddings (docarray.array.sqlite.documentarraysqlite property)": [[57, "docarray.array.sqlite.DocumentArraySqlite.embeddings"]], "empty() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.empty"]], "evaluate() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.evaluate"]], "extend() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.extend"]], "find() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.find"]], "flatten() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.flatten"]], "from_base64() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.from_base64"]], "from_bytes() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.from_bytes"]], "from_csv() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.from_csv"]], "from_dataframe() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.from_dataframe"]], "from_dict() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.from_dict"]], "from_files() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.from_files"]], "from_huggingface_datasets() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.from_huggingface_datasets"]], "from_json() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.from_json"]], "from_lines() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.from_lines"]], "from_list() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.from_list"]], "from_ndarray() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.from_ndarray"]], "from_ndjson() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.from_ndjson"]], "from_protobuf() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.from_protobuf"]], "from_pydantic_model() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.from_pydantic_model"]], "from_strawberry_type() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.from_strawberry_type"]], "get_json_schema() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.get_json_schema"]], "get_vocabulary() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.get_vocabulary"]], "index() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.index"]], "insert() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.insert"]], "journal_mode (docarray.array.sqlite.sqliteconfig attribute)": [[57, "docarray.array.sqlite.SqliteConfig.journal_mode"]], "load() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.load"]], "load_binary() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.load_binary"]], "load_csv() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.load_csv"]], "load_json() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.load_json"]], "map() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.map"]], "map_batch() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.map_batch"]], "match() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.match"]], "plot_embeddings() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.plot_embeddings"]], "plot_image_sprites() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.plot_image_sprites"]], "pop() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.pop"]], "post() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.post"]], "pull() (docarray.array.sqlite.documentarraysqlite class method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.pull"]], "push() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.push"]], "reduce() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.reduce"]], "reduce_all() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.reduce_all"]], "remove() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.remove"]], "reverse() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.reverse"]], "sample() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.sample"]], "save() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.save"]], "save_binary() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.save_binary"]], "save_csv() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.save_csv"]], "save_embeddings_csv() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.save_embeddings_csv"]], "save_gif() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.save_gif"]], "save_json() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.save_json"]], "schema_version (docarray.array.sqlite.documentarraysqlite attribute)": [[57, "docarray.array.sqlite.DocumentArraySqlite.schema_version"]], "serialize_config (docarray.array.sqlite.sqliteconfig attribute)": [[57, "docarray.array.sqlite.SqliteConfig.serialize_config"]], "shuffle() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.shuffle"]], "split_by_tag() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.split_by_tag"]], "summary() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.summary"]], "synchronous (docarray.array.sqlite.sqliteconfig attribute)": [[57, "docarray.array.sqlite.SqliteConfig.synchronous"]], "table_name (docarray.array.sqlite.sqliteconfig attribute)": [[57, "docarray.array.sqlite.SqliteConfig.table_name"]], "tensors (docarray.array.sqlite.documentarraysqlite property)": [[57, "docarray.array.sqlite.DocumentArraySqlite.tensors"]], "texts (docarray.array.sqlite.documentarraysqlite property)": [[57, "docarray.array.sqlite.DocumentArraySqlite.texts"]], "to_base64() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.to_base64"]], "to_bytes() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.to_bytes"]], "to_dataframe() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.to_dataframe"]], "to_dict() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.to_dict"]], "to_json() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.to_json"]], "to_list() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.to_list"]], "to_protobuf() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.to_protobuf"]], "to_pydantic_model() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.to_pydantic_model"]], "to_strawberry_type() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.to_strawberry_type"]], "traverse() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.traverse"]], "traverse_flat() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.traverse_flat"]], "traverse_flat_per_path() (docarray.array.sqlite.documentarraysqlite method)": [[57, "docarray.array.sqlite.DocumentArraySqlite.traverse_flat_per_path"]], "docarray.array.storage": [[58, "module-docarray.array.storage"]], "annliteconfig (class in docarray.array.storage.annlite)": [[59, "docarray.array.storage.annlite.AnnliteConfig"]], "storagemixins (class in docarray.array.storage.annlite)": [[59, "docarray.array.storage.annlite.StorageMixins"]], "type_map (docarray.array.storage.annlite.storagemixins attribute)": [[59, "docarray.array.storage.annlite.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.annlite.storagemixins method)": [[59, "docarray.array.storage.annlite.StorageMixins.append"]], "clear() (docarray.array.storage.annlite.storagemixins method)": [[59, "docarray.array.storage.annlite.StorageMixins.clear"]], "columns (docarray.array.storage.annlite.annliteconfig attribute)": [[59, "docarray.array.storage.annlite.AnnliteConfig.columns"]], "count() (docarray.array.storage.annlite.storagemixins method)": [[59, "docarray.array.storage.annlite.StorageMixins.count"]], "data_path (docarray.array.storage.annlite.annliteconfig attribute)": [[59, "docarray.array.storage.annlite.AnnliteConfig.data_path"]], "docarray.array.storage.annlite": [[59, "module-docarray.array.storage.annlite"]], "ef_construction (docarray.array.storage.annlite.annliteconfig attribute)": [[59, "docarray.array.storage.annlite.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.storage.annlite.annliteconfig attribute)": [[59, "docarray.array.storage.annlite.AnnliteConfig.ef_search"]], "extend() (docarray.array.storage.annlite.storagemixins method)": [[59, "docarray.array.storage.annlite.StorageMixins.extend"]], "index() (docarray.array.storage.annlite.storagemixins method)": [[59, "docarray.array.storage.annlite.StorageMixins.index"]], "insert() (docarray.array.storage.annlite.storagemixins method)": [[59, "docarray.array.storage.annlite.StorageMixins.insert"]], "max_connection (docarray.array.storage.annlite.annliteconfig attribute)": [[59, "docarray.array.storage.annlite.AnnliteConfig.max_connection"]], "metric (docarray.array.storage.annlite.annliteconfig attribute)": [[59, "docarray.array.storage.annlite.AnnliteConfig.metric"]], "n_dim (docarray.array.storage.annlite.annliteconfig attribute)": [[59, "docarray.array.storage.annlite.AnnliteConfig.n_dim"]], "pop() (docarray.array.storage.annlite.storagemixins method)": [[59, "docarray.array.storage.annlite.StorageMixins.pop"]], "remove() (docarray.array.storage.annlite.storagemixins method)": [[59, "docarray.array.storage.annlite.StorageMixins.remove"]], "reverse() (docarray.array.storage.annlite.storagemixins method)": [[59, "docarray.array.storage.annlite.StorageMixins.reverse"]], "serialize_config (docarray.array.storage.annlite.annliteconfig attribute)": [[59, "docarray.array.storage.annlite.AnnliteConfig.serialize_config"]], "annliteconfig (class in docarray.array.storage.annlite.backend)": [[60, "docarray.array.storage.annlite.backend.AnnliteConfig"]], "backendmixin (class in docarray.array.storage.annlite.backend)": [[60, "docarray.array.storage.annlite.backend.BackendMixin"]], "type_map (docarray.array.storage.annlite.backend.backendmixin attribute)": [[60, "docarray.array.storage.annlite.backend.BackendMixin.TYPE_MAP"]], "columns (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.backend.AnnliteConfig.columns"]], "data_path (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.backend.AnnliteConfig.data_path"]], "docarray.array.storage.annlite.backend": [[60, "module-docarray.array.storage.annlite.backend"]], "ef_construction (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.backend.AnnliteConfig.ef_construction"]], "ef_search (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.backend.AnnliteConfig.ef_search"]], "max_connection (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.backend.AnnliteConfig.max_connection"]], "metric (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.backend.AnnliteConfig.metric"]], "n_dim (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.backend.AnnliteConfig.n_dim"]], "serialize_config (docarray.array.storage.annlite.backend.annliteconfig attribute)": [[60, "docarray.array.storage.annlite.backend.AnnliteConfig.serialize_config"]], "findmixin (class in docarray.array.storage.annlite.find)": [[61, "docarray.array.storage.annlite.find.FindMixin"]], "docarray.array.storage.annlite.find": [[61, "module-docarray.array.storage.annlite.find"]], "getsetdelmixin (class in docarray.array.storage.annlite.getsetdel)": [[62, "docarray.array.storage.annlite.getsetdel.GetSetDelMixin"]], "docarray.array.storage.annlite.getsetdel": [[62, "module-docarray.array.storage.annlite.getsetdel"]], "offsetmapping (class in docarray.array.storage.annlite.helper)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping"]], "clear() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.clear"]], "close() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.close"]], "commit() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.commit"]], "create_table() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.create_table"]], "del_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.del_at_offset"]], "del_at_offsets() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.del_at_offsets"]], "docarray.array.storage.annlite.helper": [[63, "module-docarray.array.storage.annlite.helper"]], "drop() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.drop"]], "drop_table() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.drop_table"]], "dump() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.dump"]], "execute() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.execute"]], "execute_many() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.execute_many"]], "extend_doc_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.extend_doc_ids"]], "get_all_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.get_all_ids"]], "get_id_by_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.get_id_by_offset"]], "get_ids_by_offsets() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.get_ids_by_offsets"]], "get_offset_by_id() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.get_offset_by_id"]], "get_offsets_by_ids() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.get_offsets_by_ids"]], "insert_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.insert_at_offset"]], "load() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.load"]], "name (docarray.array.storage.annlite.helper.offsetmapping property)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.name"]], "schema (docarray.array.storage.annlite.helper.offsetmapping property)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.schema"]], "set_at_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.set_at_offset"]], "shift_offset() (docarray.array.storage.annlite.helper.offsetmapping method)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.shift_offset"]], "size (docarray.array.storage.annlite.helper.offsetmapping property)": [[63, "docarray.array.storage.annlite.helper.OffsetMapping.size"]], "sequencelikemixin (class in docarray.array.storage.annlite.seqlike)": [[64, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[64, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[64, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[64, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.annlite.seqlike": [[64, "module-docarray.array.storage.annlite.seqlike"]], "extend() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[64, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[64, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[64, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[64, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[64, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.annlite.seqlike.sequencelikemixin method)": [[64, "docarray.array.storage.annlite.seqlike.SequenceLikeMixin.reverse"]], "docarray.array.storage.base": [[65, "module-docarray.array.storage.base"]], "basebackendmixin (class in docarray.array.storage.base.backend)": [[66, "docarray.array.storage.base.backend.BaseBackendMixin"]], "type_map (docarray.array.storage.base.backend.basebackendmixin attribute)": [[66, "docarray.array.storage.base.backend.BaseBackendMixin.TYPE_MAP"]], "typemap (class in docarray.array.storage.base.backend)": [[66, "docarray.array.storage.base.backend.TypeMap"]], "converter (docarray.array.storage.base.backend.typemap property)": [[66, "docarray.array.storage.base.backend.TypeMap.converter"]], "count() (docarray.array.storage.base.backend.typemap method)": [[66, "docarray.array.storage.base.backend.TypeMap.count"]], "docarray.array.storage.base.backend": [[66, "module-docarray.array.storage.base.backend"]], "index() (docarray.array.storage.base.backend.typemap method)": [[66, "docarray.array.storage.base.backend.TypeMap.index"]], "type (docarray.array.storage.base.backend.typemap property)": [[66, "docarray.array.storage.base.backend.TypeMap.type"]], "basegetsetdelmixin (class in docarray.array.storage.base.getsetdel)": [[67, "docarray.array.storage.base.getsetdel.BaseGetSetDelMixin"]], "docarray.array.storage.base.getsetdel": [[67, "module-docarray.array.storage.base.getsetdel"]], "offset2id (class in docarray.array.storage.base.helper)": [[68, "docarray.array.storage.base.helper.Offset2ID"]], "append() (docarray.array.storage.base.helper.offset2id method)": [[68, "docarray.array.storage.base.helper.Offset2ID.append"]], "clear() (docarray.array.storage.base.helper.offset2id method)": [[68, "docarray.array.storage.base.helper.Offset2ID.clear"]], "delete_by_id() (docarray.array.storage.base.helper.offset2id method)": [[68, "docarray.array.storage.base.helper.Offset2ID.delete_by_id"]], "delete_by_ids() (docarray.array.storage.base.helper.offset2id method)": [[68, "docarray.array.storage.base.helper.Offset2ID.delete_by_ids"]], "delete_by_offset() (docarray.array.storage.base.helper.offset2id method)": [[68, "docarray.array.storage.base.helper.Offset2ID.delete_by_offset"]], "docarray.array.storage.base.helper": [[68, "module-docarray.array.storage.base.helper"]], "extend() (docarray.array.storage.base.helper.offset2id method)": [[68, "docarray.array.storage.base.helper.Offset2ID.extend"]], "get_id() (docarray.array.storage.base.helper.offset2id method)": [[68, "docarray.array.storage.base.helper.Offset2ID.get_id"]], "index() (docarray.array.storage.base.helper.offset2id method)": [[68, "docarray.array.storage.base.helper.Offset2ID.index"]], "insert() (docarray.array.storage.base.helper.offset2id method)": [[68, "docarray.array.storage.base.helper.Offset2ID.insert"]], "load() (docarray.array.storage.base.helper.offset2id method)": [[68, "docarray.array.storage.base.helper.Offset2ID.load"]], "save() (docarray.array.storage.base.helper.offset2id method)": [[68, "docarray.array.storage.base.helper.Offset2ID.save"]], "update() (docarray.array.storage.base.helper.offset2id method)": [[68, "docarray.array.storage.base.helper.Offset2ID.update"]], "update_ids() (docarray.array.storage.base.helper.offset2id method)": [[68, "docarray.array.storage.base.helper.Offset2ID.update_ids"]], "basesequencelikemixin (class in docarray.array.storage.base.seqlike)": [[69, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin"]], "append() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[69, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.append"]], "clear() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[69, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.clear"]], "count() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[69, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.count"]], "docarray.array.storage.base.seqlike": [[69, "module-docarray.array.storage.base.seqlike"]], "extend() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[69, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.extend"]], "index() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[69, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.index"]], "insert() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[69, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.insert"]], "pop() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[69, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.pop"]], "remove() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[69, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.base.seqlike.basesequencelikemixin method)": [[69, "docarray.array.storage.base.seqlike.BaseSequenceLikeMixin.reverse"]], "elasticconfig (class in docarray.array.storage.elastic)": [[70, "docarray.array.storage.elastic.ElasticConfig"]], "max_es_returned_docs (docarray.array.storage.elastic.storagemixins attribute)": [[70, "docarray.array.storage.elastic.StorageMixins.MAX_ES_RETURNED_DOCS"]], "storagemixins (class in docarray.array.storage.elastic)": [[70, "docarray.array.storage.elastic.StorageMixins"]], "type_map (docarray.array.storage.elastic.storagemixins attribute)": [[70, "docarray.array.storage.elastic.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.elastic.storagemixins method)": [[70, "docarray.array.storage.elastic.StorageMixins.append"]], "batch_size (docarray.array.storage.elastic.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.ElasticConfig.batch_size"]], "clear() (docarray.array.storage.elastic.storagemixins method)": [[70, "docarray.array.storage.elastic.StorageMixins.clear"]], "columns (docarray.array.storage.elastic.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.ElasticConfig.columns"]], "count() (docarray.array.storage.elastic.storagemixins method)": [[70, "docarray.array.storage.elastic.StorageMixins.count"]], "distance (docarray.array.storage.elastic.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.ElasticConfig.distance"]], "docarray.array.storage.elastic": [[70, "module-docarray.array.storage.elastic"]], "ef_construction (docarray.array.storage.elastic.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.ElasticConfig.ef_construction"]], "es_config (docarray.array.storage.elastic.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.ElasticConfig.es_config"]], "extend() (docarray.array.storage.elastic.storagemixins method)": [[70, "docarray.array.storage.elastic.StorageMixins.extend"]], "find() (docarray.array.storage.elastic.storagemixins method)": [[70, "docarray.array.storage.elastic.StorageMixins.find"]], "hosts (docarray.array.storage.elastic.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.ElasticConfig.hosts"]], "index() (docarray.array.storage.elastic.storagemixins method)": [[70, "docarray.array.storage.elastic.StorageMixins.index"]], "index_name (docarray.array.storage.elastic.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.ElasticConfig.index_name"]], "index_text (docarray.array.storage.elastic.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.ElasticConfig.index_text"]], "insert() (docarray.array.storage.elastic.storagemixins method)": [[70, "docarray.array.storage.elastic.StorageMixins.insert"]], "m (docarray.array.storage.elastic.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.ElasticConfig.m"]], "n_dim (docarray.array.storage.elastic.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.ElasticConfig.n_dim"]], "pop() (docarray.array.storage.elastic.storagemixins method)": [[70, "docarray.array.storage.elastic.StorageMixins.pop"]], "remove() (docarray.array.storage.elastic.storagemixins method)": [[70, "docarray.array.storage.elastic.StorageMixins.remove"]], "reverse() (docarray.array.storage.elastic.storagemixins method)": [[70, "docarray.array.storage.elastic.StorageMixins.reverse"]], "tag_indices (docarray.array.storage.elastic.elasticconfig attribute)": [[70, "docarray.array.storage.elastic.ElasticConfig.tag_indices"]], "backendmixin (class in docarray.array.storage.elastic.backend)": [[71, "docarray.array.storage.elastic.backend.BackendMixin"]], "elasticconfig (class in docarray.array.storage.elastic.backend)": [[71, "docarray.array.storage.elastic.backend.ElasticConfig"]], "type_map (docarray.array.storage.elastic.backend.backendmixin attribute)": [[71, "docarray.array.storage.elastic.backend.BackendMixin.TYPE_MAP"]], "batch_size (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.backend.ElasticConfig.batch_size"]], "columns (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.backend.ElasticConfig.columns"]], "distance (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.backend.ElasticConfig.distance"]], "docarray.array.storage.elastic.backend": [[71, "module-docarray.array.storage.elastic.backend"]], "ef_construction (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.backend.ElasticConfig.ef_construction"]], "es_config (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.backend.ElasticConfig.es_config"]], "hosts (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.backend.ElasticConfig.hosts"]], "index_name (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.backend.ElasticConfig.index_name"]], "index_text (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.backend.ElasticConfig.index_text"]], "m (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.backend.ElasticConfig.m"]], "n_dim (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.backend.ElasticConfig.n_dim"]], "tag_indices (docarray.array.storage.elastic.backend.elasticconfig attribute)": [[71, "docarray.array.storage.elastic.backend.ElasticConfig.tag_indices"]], "findmixin (class in docarray.array.storage.elastic.find)": [[72, "docarray.array.storage.elastic.find.FindMixin"]], "docarray.array.storage.elastic.find": [[72, "module-docarray.array.storage.elastic.find"]], "find() (docarray.array.storage.elastic.find.findmixin method)": [[72, "docarray.array.storage.elastic.find.FindMixin.find"]], "getsetdelmixin (class in docarray.array.storage.elastic.getsetdel)": [[73, "docarray.array.storage.elastic.getsetdel.GetSetDelMixin"]], "max_es_returned_docs (docarray.array.storage.elastic.getsetdel.getsetdelmixin attribute)": [[73, "docarray.array.storage.elastic.getsetdel.GetSetDelMixin.MAX_ES_RETURNED_DOCS"]], "docarray.array.storage.elastic.getsetdel": [[73, "module-docarray.array.storage.elastic.getsetdel"]], "sequencelikemixin (class in docarray.array.storage.elastic.seqlike)": [[74, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[74, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[74, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[74, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.elastic.seqlike": [[74, "module-docarray.array.storage.elastic.seqlike"]], "extend() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[74, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[74, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[74, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[74, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[74, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.elastic.seqlike.sequencelikemixin method)": [[74, "docarray.array.storage.elastic.seqlike.SequenceLikeMixin.reverse"]], "storagemixins (class in docarray.array.storage.memory)": [[75, "docarray.array.storage.memory.StorageMixins"]], "type_map (docarray.array.storage.memory.storagemixins attribute)": [[75, "docarray.array.storage.memory.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.memory.storagemixins method)": [[75, "docarray.array.storage.memory.StorageMixins.append"]], "clear() (docarray.array.storage.memory.storagemixins method)": [[75, "docarray.array.storage.memory.StorageMixins.clear"]], "count() (docarray.array.storage.memory.storagemixins method)": [[75, "docarray.array.storage.memory.StorageMixins.count"]], "docarray.array.storage.memory": [[75, "module-docarray.array.storage.memory"]], "extend() (docarray.array.storage.memory.storagemixins method)": [[75, "docarray.array.storage.memory.StorageMixins.extend"]], "index() (docarray.array.storage.memory.storagemixins method)": [[75, "docarray.array.storage.memory.StorageMixins.index"]], "insert() (docarray.array.storage.memory.storagemixins method)": [[75, "docarray.array.storage.memory.StorageMixins.insert"]], "pop() (docarray.array.storage.memory.storagemixins method)": [[75, "docarray.array.storage.memory.StorageMixins.pop"]], "remove() (docarray.array.storage.memory.storagemixins method)": [[75, "docarray.array.storage.memory.StorageMixins.remove"]], "reverse() (docarray.array.storage.memory.storagemixins method)": [[75, "docarray.array.storage.memory.StorageMixins.reverse"]], "backendmixin (class in docarray.array.storage.memory.backend)": [[76, "docarray.array.storage.memory.backend.BackendMixin"]], "type_map (docarray.array.storage.memory.backend.backendmixin attribute)": [[76, "docarray.array.storage.memory.backend.BackendMixin.TYPE_MAP"]], "docarray.array.storage.memory.backend": [[76, "module-docarray.array.storage.memory.backend"]], "needs_id2offset_rebuild() (in module docarray.array.storage.memory.backend)": [[76, "docarray.array.storage.memory.backend.needs_id2offset_rebuild"]], "findmixin (class in docarray.array.storage.memory.find)": [[77, "docarray.array.storage.memory.find.FindMixin"]], "docarray.array.storage.memory.find": [[77, "module-docarray.array.storage.memory.find"]], "getsetdelmixin (class in docarray.array.storage.memory.getsetdel)": [[78, "docarray.array.storage.memory.getsetdel.GetSetDelMixin"]], "docarray.array.storage.memory.getsetdel": [[78, "module-docarray.array.storage.memory.getsetdel"]], "sequencelikemixin (class in docarray.array.storage.memory.seqlike)": [[79, "docarray.array.storage.memory.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.memory.seqlike": [[79, "module-docarray.array.storage.memory.seqlike"]], "extend() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.memory.seqlike.sequencelikemixin method)": [[79, "docarray.array.storage.memory.seqlike.SequenceLikeMixin.reverse"]], "qdrantconfig (class in docarray.array.storage.qdrant)": [[80, "docarray.array.storage.qdrant.QdrantConfig"]], "storagemixins (class in docarray.array.storage.qdrant)": [[80, "docarray.array.storage.qdrant.StorageMixins"]], "type_map (docarray.array.storage.qdrant.storagemixins attribute)": [[80, "docarray.array.storage.qdrant.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.qdrant.storagemixins method)": [[80, "docarray.array.storage.qdrant.StorageMixins.append"]], "clear() (docarray.array.storage.qdrant.storagemixins method)": [[80, "docarray.array.storage.qdrant.StorageMixins.clear"]], "client (docarray.array.storage.qdrant.storagemixins property)": [[80, "docarray.array.storage.qdrant.StorageMixins.client"]], "collection_name (docarray.array.storage.qdrant.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.QdrantConfig.collection_name"]], "collection_name (docarray.array.storage.qdrant.storagemixins property)": [[80, "docarray.array.storage.qdrant.StorageMixins.collection_name"]], "collection_name_meta (docarray.array.storage.qdrant.storagemixins property)": [[80, "docarray.array.storage.qdrant.StorageMixins.collection_name_meta"]], "columns (docarray.array.storage.qdrant.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.QdrantConfig.columns"]], "config (docarray.array.storage.qdrant.storagemixins property)": [[80, "docarray.array.storage.qdrant.StorageMixins.config"]], "count() (docarray.array.storage.qdrant.storagemixins method)": [[80, "docarray.array.storage.qdrant.StorageMixins.count"]], "distance (docarray.array.storage.qdrant.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.QdrantConfig.distance"]], "distance (docarray.array.storage.qdrant.storagemixins property)": [[80, "docarray.array.storage.qdrant.StorageMixins.distance"]], "docarray.array.storage.qdrant": [[80, "module-docarray.array.storage.qdrant"]], "ef_construct (docarray.array.storage.qdrant.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.QdrantConfig.ef_construct"]], "extend() (docarray.array.storage.qdrant.storagemixins method)": [[80, "docarray.array.storage.qdrant.StorageMixins.extend"]], "full_scan_threshold (docarray.array.storage.qdrant.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.QdrantConfig.full_scan_threshold"]], "host (docarray.array.storage.qdrant.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.QdrantConfig.host"]], "index() (docarray.array.storage.qdrant.storagemixins method)": [[80, "docarray.array.storage.qdrant.StorageMixins.index"]], "insert() (docarray.array.storage.qdrant.storagemixins method)": [[80, "docarray.array.storage.qdrant.StorageMixins.insert"]], "m (docarray.array.storage.qdrant.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.QdrantConfig.m"]], "n_dim (docarray.array.storage.qdrant.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.QdrantConfig.n_dim"]], "n_dim (docarray.array.storage.qdrant.storagemixins property)": [[80, "docarray.array.storage.qdrant.StorageMixins.n_dim"]], "pop() (docarray.array.storage.qdrant.storagemixins method)": [[80, "docarray.array.storage.qdrant.StorageMixins.pop"]], "port (docarray.array.storage.qdrant.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.QdrantConfig.port"]], "remove() (docarray.array.storage.qdrant.storagemixins method)": [[80, "docarray.array.storage.qdrant.StorageMixins.remove"]], "reverse() (docarray.array.storage.qdrant.storagemixins method)": [[80, "docarray.array.storage.qdrant.StorageMixins.reverse"]], "scan() (docarray.array.storage.qdrant.storagemixins method)": [[80, "docarray.array.storage.qdrant.StorageMixins.scan"]], "scroll_batch_size (docarray.array.storage.qdrant.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.QdrantConfig.scroll_batch_size"]], "scroll_batch_size (docarray.array.storage.qdrant.storagemixins property)": [[80, "docarray.array.storage.qdrant.StorageMixins.scroll_batch_size"]], "serialization_config (docarray.array.storage.qdrant.storagemixins property)": [[80, "docarray.array.storage.qdrant.StorageMixins.serialization_config"]], "serialize_config (docarray.array.storage.qdrant.qdrantconfig attribute)": [[80, "docarray.array.storage.qdrant.QdrantConfig.serialize_config"]], "serialize_config (docarray.array.storage.qdrant.storagemixins property)": [[80, "docarray.array.storage.qdrant.StorageMixins.serialize_config"]], "backendmixin (class in docarray.array.storage.qdrant.backend)": [[81, "docarray.array.storage.qdrant.backend.BackendMixin"]], "qdrantconfig (class in docarray.array.storage.qdrant.backend)": [[81, "docarray.array.storage.qdrant.backend.QdrantConfig"]], "type_map (docarray.array.storage.qdrant.backend.backendmixin attribute)": [[81, "docarray.array.storage.qdrant.backend.BackendMixin.TYPE_MAP"]], "collection_name (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.backend.QdrantConfig.collection_name"]], "columns (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.backend.QdrantConfig.columns"]], "distance (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.backend.QdrantConfig.distance"]], "docarray.array.storage.qdrant.backend": [[81, "module-docarray.array.storage.qdrant.backend"]], "ef_construct (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.backend.QdrantConfig.ef_construct"]], "full_scan_threshold (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.backend.QdrantConfig.full_scan_threshold"]], "host (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.backend.QdrantConfig.host"]], "m (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.backend.QdrantConfig.m"]], "n_dim (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.backend.QdrantConfig.n_dim"]], "port (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.backend.QdrantConfig.port"]], "scroll_batch_size (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.backend.QdrantConfig.scroll_batch_size"]], "serialize_config (docarray.array.storage.qdrant.backend.qdrantconfig attribute)": [[81, "docarray.array.storage.qdrant.backend.QdrantConfig.serialize_config"]], "findmixin (class in docarray.array.storage.qdrant.find)": [[82, "docarray.array.storage.qdrant.find.FindMixin"]], "client (docarray.array.storage.qdrant.find.findmixin property)": [[82, "docarray.array.storage.qdrant.find.FindMixin.client"]], "collection_name (docarray.array.storage.qdrant.find.findmixin property)": [[82, "docarray.array.storage.qdrant.find.FindMixin.collection_name"]], "distance (docarray.array.storage.qdrant.find.findmixin property)": [[82, "docarray.array.storage.qdrant.find.FindMixin.distance"]], "docarray.array.storage.qdrant.find": [[82, "module-docarray.array.storage.qdrant.find"]], "serialize_config (docarray.array.storage.qdrant.find.findmixin property)": [[82, "docarray.array.storage.qdrant.find.FindMixin.serialize_config"]], "getsetdelmixin (class in docarray.array.storage.qdrant.getsetdel)": [[83, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin"]], "client (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[83, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.client"]], "collection_name (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[83, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.collection_name"]], "docarray.array.storage.qdrant.getsetdel": [[83, "module-docarray.array.storage.qdrant.getsetdel"]], "n_dim (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[83, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.n_dim"]], "scan() (docarray.array.storage.qdrant.getsetdel.getsetdelmixin method)": [[83, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.scan"]], "scroll_batch_size (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[83, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.scroll_batch_size"]], "serialization_config (docarray.array.storage.qdrant.getsetdel.getsetdelmixin property)": [[83, "docarray.array.storage.qdrant.getsetdel.GetSetDelMixin.serialization_config"]], "docarray.array.storage.qdrant.helper": [[84, "module-docarray.array.storage.qdrant.helper"]], "sequencelikemixin (class in docarray.array.storage.qdrant.seqlike)": [[85, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[85, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[85, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.clear"]], "client (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[85, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.client"]], "collection_name (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[85, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.collection_name"]], "config (docarray.array.storage.qdrant.seqlike.sequencelikemixin property)": [[85, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.config"]], "count() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[85, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.qdrant.seqlike": [[85, "module-docarray.array.storage.qdrant.seqlike"]], "extend() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[85, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[85, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[85, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[85, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[85, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.qdrant.seqlike.sequencelikemixin method)": [[85, "docarray.array.storage.qdrant.seqlike.SequenceLikeMixin.reverse"]], "docarray.array.storage.registry": [[86, "module-docarray.array.storage.registry"]], "sqliteconfig (class in docarray.array.storage.sqlite)": [[87, "docarray.array.storage.sqlite.SqliteConfig"]], "storagemixins (class in docarray.array.storage.sqlite)": [[87, "docarray.array.storage.sqlite.StorageMixins"]], "type_map (docarray.array.storage.sqlite.storagemixins attribute)": [[87, "docarray.array.storage.sqlite.StorageMixins.TYPE_MAP"]], "append() (docarray.array.storage.sqlite.storagemixins method)": [[87, "docarray.array.storage.sqlite.StorageMixins.append"]], "clear() (docarray.array.storage.sqlite.storagemixins method)": [[87, "docarray.array.storage.sqlite.StorageMixins.clear"]], "conn_config (docarray.array.storage.sqlite.sqliteconfig attribute)": [[87, "docarray.array.storage.sqlite.SqliteConfig.conn_config"]], "connection (docarray.array.storage.sqlite.sqliteconfig attribute)": [[87, "docarray.array.storage.sqlite.SqliteConfig.connection"]], "count() (docarray.array.storage.sqlite.storagemixins method)": [[87, "docarray.array.storage.sqlite.StorageMixins.count"]], "docarray.array.storage.sqlite": [[87, "module-docarray.array.storage.sqlite"]], "extend() (docarray.array.storage.sqlite.storagemixins method)": [[87, "docarray.array.storage.sqlite.StorageMixins.extend"]], "index() (docarray.array.storage.sqlite.storagemixins method)": [[87, "docarray.array.storage.sqlite.StorageMixins.index"]], "insert() (docarray.array.storage.sqlite.storagemixins method)": [[87, "docarray.array.storage.sqlite.StorageMixins.insert"]], "journal_mode (docarray.array.storage.sqlite.sqliteconfig attribute)": [[87, "docarray.array.storage.sqlite.SqliteConfig.journal_mode"]], "pop() (docarray.array.storage.sqlite.storagemixins method)": [[87, "docarray.array.storage.sqlite.StorageMixins.pop"]], "remove() (docarray.array.storage.sqlite.storagemixins method)": [[87, "docarray.array.storage.sqlite.StorageMixins.remove"]], "reverse() (docarray.array.storage.sqlite.storagemixins method)": [[87, "docarray.array.storage.sqlite.StorageMixins.reverse"]], "schema_version (docarray.array.storage.sqlite.storagemixins attribute)": [[87, "docarray.array.storage.sqlite.StorageMixins.schema_version"]], "serialize_config (docarray.array.storage.sqlite.sqliteconfig attribute)": [[87, "docarray.array.storage.sqlite.SqliteConfig.serialize_config"]], "synchronous (docarray.array.storage.sqlite.sqliteconfig attribute)": [[87, "docarray.array.storage.sqlite.SqliteConfig.synchronous"]], "table_name (docarray.array.storage.sqlite.sqliteconfig attribute)": [[87, "docarray.array.storage.sqlite.SqliteConfig.table_name"]], "backendmixin (class in docarray.array.storage.sqlite.backend)": [[88, "docarray.array.storage.sqlite.backend.BackendMixin"]], "sqliteconfig (class in docarray.array.storage.sqlite.backend)": [[88, "docarray.array.storage.sqlite.backend.SqliteConfig"]], "type_map (docarray.array.storage.sqlite.backend.backendmixin attribute)": [[88, "docarray.array.storage.sqlite.backend.BackendMixin.TYPE_MAP"]], "conn_config (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[88, "docarray.array.storage.sqlite.backend.SqliteConfig.conn_config"]], "connection (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[88, "docarray.array.storage.sqlite.backend.SqliteConfig.connection"]], "docarray.array.storage.sqlite.backend": [[88, "module-docarray.array.storage.sqlite.backend"]], "journal_mode (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[88, "docarray.array.storage.sqlite.backend.SqliteConfig.journal_mode"]], "schema_version (docarray.array.storage.sqlite.backend.backendmixin attribute)": [[88, "docarray.array.storage.sqlite.backend.BackendMixin.schema_version"]], "serialize_config (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[88, "docarray.array.storage.sqlite.backend.SqliteConfig.serialize_config"]], "synchronous (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[88, "docarray.array.storage.sqlite.backend.SqliteConfig.synchronous"]], "table_name (docarray.array.storage.sqlite.backend.sqliteconfig attribute)": [[88, "docarray.array.storage.sqlite.backend.SqliteConfig.table_name"]], "getsetdelmixin (class in docarray.array.storage.sqlite.getsetdel)": [[89, "docarray.array.storage.sqlite.getsetdel.GetSetDelMixin"]], "docarray.array.storage.sqlite.getsetdel": [[89, "module-docarray.array.storage.sqlite.getsetdel"]], "docarray.array.storage.sqlite.helper": [[90, "module-docarray.array.storage.sqlite.helper"]], "initialize_table() (in module docarray.array.storage.sqlite.helper)": [[90, "docarray.array.storage.sqlite.helper.initialize_table"]], "sequencelikemixin (class in docarray.array.storage.sqlite.seqlike)": [[91, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.sqlite.seqlike": [[91, "module-docarray.array.storage.sqlite.seqlike"]], "extend() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.sqlite.seqlike.sequencelikemixin method)": [[91, "docarray.array.storage.sqlite.seqlike.SequenceLikeMixin.reverse"]], "storagemixins (class in docarray.array.storage.weaviate)": [[92, "docarray.array.storage.weaviate.StorageMixins"]], "type_map (docarray.array.storage.weaviate.storagemixins attribute)": [[92, "docarray.array.storage.weaviate.StorageMixins.TYPE_MAP"]], "weaviateconfig (class in docarray.array.storage.weaviate)": [[92, "docarray.array.storage.weaviate.WeaviateConfig"]], "append() (docarray.array.storage.weaviate.storagemixins method)": [[92, "docarray.array.storage.weaviate.StorageMixins.append"]], "cleanup_interval_seconds (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.cleanup_interval_seconds"]], "clear() (docarray.array.storage.weaviate.storagemixins method)": [[92, "docarray.array.storage.weaviate.StorageMixins.clear"]], "columns (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.columns"]], "count() (docarray.array.storage.weaviate.storagemixins method)": [[92, "docarray.array.storage.weaviate.StorageMixins.count"]], "distance (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.distance"]], "docarray.array.storage.weaviate": [[92, "module-docarray.array.storage.weaviate"]], "dynamic_ef_factor (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.ef"]], "ef_construction (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.ef_construction"]], "extend() (docarray.array.storage.weaviate.storagemixins method)": [[92, "docarray.array.storage.weaviate.StorageMixins.extend"]], "flat_search_cutoff (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.flat_search_cutoff"]], "host (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.host"]], "index() (docarray.array.storage.weaviate.storagemixins method)": [[92, "docarray.array.storage.weaviate.StorageMixins.index"]], "insert() (docarray.array.storage.weaviate.storagemixins method)": [[92, "docarray.array.storage.weaviate.StorageMixins.insert"]], "max_connections (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.max_connections"]], "n_dim (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.n_dim"]], "name (docarray.array.storage.weaviate.storagemixins property)": [[92, "docarray.array.storage.weaviate.StorageMixins.name"]], "name (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.name"]], "pop() (docarray.array.storage.weaviate.storagemixins method)": [[92, "docarray.array.storage.weaviate.StorageMixins.pop"]], "port (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.port"]], "protocol (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.protocol"]], "remove() (docarray.array.storage.weaviate.storagemixins method)": [[92, "docarray.array.storage.weaviate.StorageMixins.remove"]], "reverse() (docarray.array.storage.weaviate.storagemixins method)": [[92, "docarray.array.storage.weaviate.StorageMixins.reverse"]], "serialize_config (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.serialize_config"]], "skip (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.skip"]], "timeout_config (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.timeout_config"]], "vector_cache_max_objects (docarray.array.storage.weaviate.weaviateconfig attribute)": [[92, "docarray.array.storage.weaviate.WeaviateConfig.vector_cache_max_objects"]], "backendmixin (class in docarray.array.storage.weaviate.backend)": [[93, "docarray.array.storage.weaviate.backend.BackendMixin"]], "type_map (docarray.array.storage.weaviate.backend.backendmixin attribute)": [[93, "docarray.array.storage.weaviate.backend.BackendMixin.TYPE_MAP"]], "weaviateconfig (class in docarray.array.storage.weaviate.backend)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig"]], "cleanup_interval_seconds (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.cleanup_interval_seconds"]], "columns (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.columns"]], "distance (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.distance"]], "docarray.array.storage.weaviate.backend": [[93, "module-docarray.array.storage.weaviate.backend"]], "dynamic_ef_factor (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.ef"]], "ef_construction (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.ef_construction"]], "flat_search_cutoff (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.flat_search_cutoff"]], "host (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.host"]], "max_connections (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.max_connections"]], "n_dim (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.n_dim"]], "name (docarray.array.storage.weaviate.backend.backendmixin property)": [[93, "docarray.array.storage.weaviate.backend.BackendMixin.name"]], "name (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.name"]], "port (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.port"]], "protocol (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.protocol"]], "serialize_config (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.serialize_config"]], "skip (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.skip"]], "timeout_config (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.timeout_config"]], "vector_cache_max_objects (docarray.array.storage.weaviate.backend.weaviateconfig attribute)": [[93, "docarray.array.storage.weaviate.backend.WeaviateConfig.vector_cache_max_objects"]], "findmixin (class in docarray.array.storage.weaviate.find)": [[94, "docarray.array.storage.weaviate.find.FindMixin"]], "docarray.array.storage.weaviate.find": [[94, "module-docarray.array.storage.weaviate.find"]], "getsetdelmixin (class in docarray.array.storage.weaviate.getsetdel)": [[95, "docarray.array.storage.weaviate.getsetdel.GetSetDelMixin"]], "docarray.array.storage.weaviate.getsetdel": [[95, "module-docarray.array.storage.weaviate.getsetdel"]], "sequencelikemixin (class in docarray.array.storage.weaviate.seqlike)": [[96, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin"]], "append() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[96, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.append"]], "clear() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[96, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.clear"]], "count() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[96, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.count"]], "docarray.array.storage.weaviate.seqlike": [[96, "module-docarray.array.storage.weaviate.seqlike"]], "extend() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[96, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.extend"]], "index() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[96, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.index"]], "insert() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[96, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.insert"]], "pop() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[96, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.pop"]], "remove() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[96, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.remove"]], "reverse() (docarray.array.storage.weaviate.seqlike.sequencelikemixin method)": [[96, "docarray.array.storage.weaviate.seqlike.SequenceLikeMixin.reverse"]], "documentarrayweaviate (class in docarray.array.weaviate)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate"]], "type_map (docarray.array.weaviate.documentarrayweaviate attribute)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.TYPE_MAP"]], "weaviateconfig (class in docarray.array.weaviate)": [[97, "docarray.array.weaviate.WeaviateConfig"]], "append() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.append"]], "apply() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.apply"]], "apply_batch() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.apply_batch"]], "auth_token (docarray.array.weaviate.documentarrayweaviate property)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.auth_token"]], "batch() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.batch"]], "batch_ids() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.batch_ids"]], "blobs (docarray.array.weaviate.documentarrayweaviate property)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.blobs"]], "cleanup_interval_seconds (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.cleanup_interval_seconds"]], "clear() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.clear"]], "columns (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.columns"]], "contents (docarray.array.weaviate.documentarrayweaviate property)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.contents"]], "count() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.count"]], "dataloader() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.dataloader"]], "distance (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.distance"]], "docarray.array.weaviate": [[97, "module-docarray.array.weaviate"]], "dynamic_ef_factor (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_factor"]], "dynamic_ef_max (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_max"]], "dynamic_ef_min (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.dynamic_ef_min"]], "ef (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.ef"]], "ef_construction (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.ef_construction"]], "embed() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.embed"]], "embeddings (docarray.array.weaviate.documentarrayweaviate property)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.embeddings"]], "empty() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.empty"]], "evaluate() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.evaluate"]], "extend() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.extend"]], "find() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.find"]], "flat_search_cutoff (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.flat_search_cutoff"]], "flatten() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.flatten"]], "from_base64() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.from_base64"]], "from_bytes() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.from_bytes"]], "from_csv() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.from_csv"]], "from_dataframe() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.from_dataframe"]], "from_dict() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.from_dict"]], "from_files() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.from_files"]], "from_huggingface_datasets() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.from_huggingface_datasets"]], "from_json() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.from_json"]], "from_lines() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.from_lines"]], "from_list() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.from_list"]], "from_ndarray() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.from_ndarray"]], "from_ndjson() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.from_ndjson"]], "from_protobuf() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.from_protobuf"]], "from_pydantic_model() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.from_pydantic_model"]], "from_strawberry_type() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.from_strawberry_type"]], "get_json_schema() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.get_json_schema"]], "get_vocabulary() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.get_vocabulary"]], "host (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.host"]], "index() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.index"]], "insert() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.insert"]], "load() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.load"]], "load_binary() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.load_binary"]], "load_csv() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.load_csv"]], "load_json() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.load_json"]], "map() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.map"]], "map_batch() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.map_batch"]], "match() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.match"]], "max_connections (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.max_connections"]], "n_dim (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.n_dim"]], "name (docarray.array.weaviate.documentarrayweaviate property)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.name"]], "name (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.name"]], "plot_embeddings() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.plot_embeddings"]], "plot_image_sprites() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.plot_image_sprites"]], "pop() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.pop"]], "port (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.port"]], "post() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.post"]], "protocol (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.protocol"]], "pull() (docarray.array.weaviate.documentarrayweaviate class method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.pull"]], "push() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.push"]], "reduce() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.reduce"]], "reduce_all() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.reduce_all"]], "remove() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.remove"]], "reverse() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.reverse"]], "sample() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.sample"]], "save() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.save"]], "save_binary() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.save_binary"]], "save_csv() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.save_csv"]], "save_embeddings_csv() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.save_embeddings_csv"]], "save_gif() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.save_gif"]], "save_json() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.save_json"]], "serialize_config (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.serialize_config"]], "shuffle() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.shuffle"]], "skip (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.skip"]], "split_by_tag() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.split_by_tag"]], "summary() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.summary"]], "tensors (docarray.array.weaviate.documentarrayweaviate property)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.tensors"]], "texts (docarray.array.weaviate.documentarrayweaviate property)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.texts"]], "timeout_config (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.timeout_config"]], "to_base64() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.to_base64"]], "to_bytes() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.to_bytes"]], "to_dataframe() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.to_dataframe"]], "to_dict() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.to_dict"]], "to_json() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.to_json"]], "to_list() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.to_list"]], "to_protobuf() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.to_protobuf"]], "to_pydantic_model() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.to_pydantic_model"]], "to_strawberry_type() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.to_strawberry_type"]], "traverse() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.traverse"]], "traverse_flat() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.traverse_flat"]], "traverse_flat_per_path() (docarray.array.weaviate.documentarrayweaviate method)": [[97, "docarray.array.weaviate.DocumentArrayWeaviate.traverse_flat_per_path"]], "vector_cache_max_objects (docarray.array.weaviate.weaviateconfig attribute)": [[97, "docarray.array.weaviate.WeaviateConfig.vector_cache_max_objects"]], "basedctype (class in docarray.base)": [[98, "docarray.base.BaseDCType"]], "clear() (docarray.base.basedctype method)": [[98, "docarray.base.BaseDCType.clear"]], "copy_from() (docarray.base.basedctype method)": [[98, "docarray.base.BaseDCType.copy_from"]], "docarray.base": [[98, "module-docarray.base"]], "nbytes (docarray.base.basedctype property)": [[98, "docarray.base.BaseDCType.nbytes"]], "non_empty_fields (docarray.base.basedctype property)": [[98, "docarray.base.BaseDCType.non_empty_fields"]], "pop() (docarray.base.basedctype method)": [[98, "docarray.base.BaseDCType.pop"]], "docarray.dataclasses": [[99, "module-docarray.dataclasses"]], "audio_getter() (in module docarray.dataclasses.getter)": [[100, "docarray.dataclasses.getter.audio_getter"]], "blob_getter() (in module docarray.dataclasses.getter)": [[100, "docarray.dataclasses.getter.blob_getter"]], "docarray.dataclasses.getter": [[100, "module-docarray.dataclasses.getter"]], "image_getter() (in module docarray.dataclasses.getter)": [[100, "docarray.dataclasses.getter.image_getter"]], "json_getter() (in module docarray.dataclasses.getter)": [[100, "docarray.dataclasses.getter.json_getter"]], "mesh_getter() (in module docarray.dataclasses.getter)": [[100, "docarray.dataclasses.getter.mesh_getter"]], "tabular_getter() (in module docarray.dataclasses.getter)": [[100, "docarray.dataclasses.getter.tabular_getter"]], "text_getter() (in module docarray.dataclasses.getter)": [[100, "docarray.dataclasses.getter.text_getter"]], "video_getter() (in module docarray.dataclasses.getter)": [[100, "docarray.dataclasses.getter.video_getter"]], "audio_setter() (in module docarray.dataclasses.setter)": [[101, "docarray.dataclasses.setter.audio_setter"]], "blob_setter() (in module docarray.dataclasses.setter)": [[101, "docarray.dataclasses.setter.blob_setter"]], "docarray.dataclasses.setter": [[101, "module-docarray.dataclasses.setter"]], "image_setter() (in module docarray.dataclasses.setter)": [[101, "docarray.dataclasses.setter.image_setter"]], "json_setter() (in module docarray.dataclasses.setter)": [[101, "docarray.dataclasses.setter.json_setter"]], "mesh_setter() (in module docarray.dataclasses.setter)": [[101, "docarray.dataclasses.setter.mesh_setter"]], "tabular_setter() (in module docarray.dataclasses.setter)": [[101, "docarray.dataclasses.setter.tabular_setter"]], "text_setter() (in module docarray.dataclasses.setter)": [[101, "docarray.dataclasses.setter.text_setter"]], "video_setter() (in module docarray.dataclasses.setter)": [[101, "docarray.dataclasses.setter.video_setter"]], "dataclass() (in module docarray.dataclasses.types)": [[102, "docarray.dataclasses.types.dataclass"]], "docarray.dataclasses.types": [[102, "module-docarray.dataclasses.types"]], "field() (in module docarray.dataclasses.types)": [[102, "docarray.dataclasses.types.field"]], "is_multimodal() (in module docarray.dataclasses.types)": [[102, "docarray.dataclasses.types.is_multimodal"]], "document (class in docarray.document)": [[103, "docarray.document.Document"]], "adjacency (docarray.document.document property)": [[103, "docarray.document.Document.adjacency"]], "blob (docarray.document.document property)": [[103, "docarray.document.Document.blob"]], "chunks (docarray.document.document property)": [[103, "docarray.document.Document.chunks"]], "clear() (docarray.document.document method)": [[103, "docarray.document.Document.clear"]], "content (docarray.document.document property)": [[103, "docarray.document.Document.content"]], "content_hash (docarray.document.document property)": [[103, "docarray.document.Document.content_hash"]], "content_type (docarray.document.document property)": [[103, "docarray.document.Document.content_type"]], "convert_blob_to_datauri() (docarray.document.document method)": [[103, "docarray.document.Document.convert_blob_to_datauri"]], "convert_blob_to_image_tensor() (docarray.document.document method)": [[103, "docarray.document.Document.convert_blob_to_image_tensor"]], "convert_blob_to_tensor() (docarray.document.document method)": [[103, "docarray.document.Document.convert_blob_to_tensor"]], "convert_content_to_datauri() (docarray.document.document method)": [[103, "docarray.document.Document.convert_content_to_datauri"]], "convert_image_tensor_to_blob() (docarray.document.document method)": [[103, "docarray.document.Document.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.document method)": [[103, "docarray.document.Document.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.document method)": [[103, "docarray.document.Document.convert_image_tensor_to_uri"]], "convert_tensor_to_blob() (docarray.document.document method)": [[103, "docarray.document.Document.convert_tensor_to_blob"]], "convert_tensor_to_text() (docarray.document.document method)": [[103, "docarray.document.Document.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.document method)": [[103, "docarray.document.Document.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.document method)": [[103, "docarray.document.Document.convert_text_to_tensor"]], "convert_uri_to_datauri() (docarray.document.document method)": [[103, "docarray.document.Document.convert_uri_to_datauri"]], "copy_from() (docarray.document.document method)": [[103, "docarray.document.Document.copy_from"]], "display() (docarray.document.document method)": [[103, "docarray.document.Document.display"]], "docarray.document": [[103, "module-docarray.document"]], "embed() (docarray.document.document method)": [[103, "docarray.document.Document.embed"]], "embed_feature_hashing() (docarray.document.document method)": [[103, "docarray.document.Document.embed_feature_hashing"]], "embedding (docarray.document.document property)": [[103, "docarray.document.Document.embedding"]], "evaluations (docarray.document.document property)": [[103, "docarray.document.Document.evaluations"]], "from_base64() (docarray.document.document class method)": [[103, "docarray.document.Document.from_base64"]], "from_bytes() (docarray.document.document class method)": [[103, "docarray.document.Document.from_bytes"]], "from_dict() (docarray.document.document class method)": [[103, "docarray.document.Document.from_dict"]], "from_json() (docarray.document.document class method)": [[103, "docarray.document.Document.from_json"]], "from_protobuf() (docarray.document.document class method)": [[103, "docarray.document.Document.from_protobuf"]], "from_pydantic_model() (docarray.document.document class method)": [[103, "docarray.document.Document.from_pydantic_model"]], "from_strawberry_type() (docarray.document.document class method)": [[103, "docarray.document.Document.from_strawberry_type"]], "get_json_schema() (docarray.document.document class method)": [[103, "docarray.document.Document.get_json_schema"]], "get_multi_modal_attribute() (docarray.document.document method)": [[103, "docarray.document.Document.get_multi_modal_attribute"]], "get_vocabulary() (docarray.document.document method)": [[103, "docarray.document.Document.get_vocabulary"]], "granularity (docarray.document.document property)": [[103, "docarray.document.Document.granularity"]], "id (docarray.document.document property)": [[103, "docarray.document.Document.id"]], "is_multimodal (docarray.document.document property)": [[103, "docarray.document.Document.is_multimodal"]], "load_pil_image_to_datauri() (docarray.document.document method)": [[103, "docarray.document.Document.load_pil_image_to_datauri"]], "load_uri_to_audio_tensor() (docarray.document.document method)": [[103, "docarray.document.Document.load_uri_to_audio_tensor"]], "load_uri_to_blob() (docarray.document.document method)": [[103, "docarray.document.Document.load_uri_to_blob"]], "load_uri_to_image_tensor() (docarray.document.document method)": [[103, "docarray.document.Document.load_uri_to_image_tensor"]], "load_uri_to_point_cloud_tensor() (docarray.document.document method)": [[103, "docarray.document.Document.load_uri_to_point_cloud_tensor"]], "load_uri_to_text() (docarray.document.document method)": [[103, "docarray.document.Document.load_uri_to_text"]], "load_uri_to_video_tensor() (docarray.document.document method)": [[103, "docarray.document.Document.load_uri_to_video_tensor"]], "location (docarray.document.document property)": [[103, "docarray.document.Document.location"]], "match() (docarray.document.document method)": [[103, "docarray.document.Document.match"]], "matches (docarray.document.document property)": [[103, "docarray.document.Document.matches"]], "mime_type (docarray.document.document property)": [[103, "docarray.document.Document.mime_type"]], "modality (docarray.document.document property)": [[103, "docarray.document.Document.modality"]], "nbytes (docarray.document.document property)": [[103, "docarray.document.Document.nbytes"]], "non_empty_fields (docarray.document.document property)": [[103, "docarray.document.Document.non_empty_fields"]], "offset (docarray.document.document property)": [[103, "docarray.document.Document.offset"]], "parent_id (docarray.document.document property)": [[103, "docarray.document.Document.parent_id"]], "plot_matches_sprites() (docarray.document.document method)": [[103, "docarray.document.Document.plot_matches_sprites"]], "pop() (docarray.document.document method)": [[103, "docarray.document.Document.pop"]], "post() (docarray.document.document method)": [[103, "docarray.document.Document.post"]], "save_audio_tensor_to_file() (docarray.document.document method)": [[103, "docarray.document.Document.save_audio_tensor_to_file"]], "save_blob_to_file() (docarray.document.document method)": [[103, "docarray.document.Document.save_blob_to_file"]], "save_image_tensor_to_file() (docarray.document.document method)": [[103, "docarray.document.Document.save_image_tensor_to_file"]], "save_uri_to_file() (docarray.document.document method)": [[103, "docarray.document.Document.save_uri_to_file"]], "save_video_tensor_to_file() (docarray.document.document method)": [[103, "docarray.document.Document.save_video_tensor_to_file"]], "scores (docarray.document.document property)": [[103, "docarray.document.Document.scores"]], "set_image_tensor_channel_axis() (docarray.document.document method)": [[103, "docarray.document.Document.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.document method)": [[103, "docarray.document.Document.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.document method)": [[103, "docarray.document.Document.set_image_tensor_normalization"]], "set_image_tensor_shape() (docarray.document.document method)": [[103, "docarray.document.Document.set_image_tensor_shape"]], "set_multi_modal_attribute() (docarray.document.document method)": [[103, "docarray.document.Document.set_multi_modal_attribute"]], "summary() (docarray.document.document method)": [[103, "docarray.document.Document.summary"]], "tags (docarray.document.document property)": [[103, "docarray.document.Document.tags"]], "tensor (docarray.document.document property)": [[103, "docarray.document.Document.tensor"]], "text (docarray.document.document property)": [[103, "docarray.document.Document.text"]], "to_base64() (docarray.document.document method)": [[103, "docarray.document.Document.to_base64"]], "to_bytes() (docarray.document.document method)": [[103, "docarray.document.Document.to_bytes"]], "to_dict() (docarray.document.document method)": [[103, "docarray.document.Document.to_dict"]], "to_json() (docarray.document.document method)": [[103, "docarray.document.Document.to_json"]], "to_protobuf() (docarray.document.document method)": [[103, "docarray.document.Document.to_protobuf"]], "to_pydantic_model() (docarray.document.document method)": [[103, "docarray.document.Document.to_pydantic_model"]], "to_strawberry_type() (docarray.document.document method)": [[103, "docarray.document.Document.to_strawberry_type"]], "uri (docarray.document.document property)": [[103, "docarray.document.Document.uri"]], "weight (docarray.document.document property)": [[103, "docarray.document.Document.weight"]], "documentdata (class in docarray.document.data)": [[104, "docarray.document.data.DocumentData"]], "adjacency (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.adjacency"]], "blob (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.blob"]], "chunks (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.chunks"]], "content (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.content"]], "docarray.document.data": [[104, "module-docarray.document.data"]], "embedding (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.embedding"]], "evaluations (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.evaluations"]], "granularity (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.granularity"]], "id (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.id"]], "location (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.location"]], "matches (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.matches"]], "mime_type (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.mime_type"]], "modality (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.modality"]], "offset (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.offset"]], "parent_id (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.parent_id"]], "scores (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.scores"]], "tags (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.tags"]], "tensor (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.tensor"]], "text (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.text"]], "uri (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.uri"]], "weight (docarray.document.data.documentdata attribute)": [[104, "docarray.document.data.DocumentData.weight"]], "docarray.document.generators": [[105, "module-docarray.document.generators"]], "from_csv() (in module docarray.document.generators)": [[105, "docarray.document.generators.from_csv"]], "from_files() (in module docarray.document.generators)": [[105, "docarray.document.generators.from_files"]], "from_huggingface_datasets() (in module docarray.document.generators)": [[105, "docarray.document.generators.from_huggingface_datasets"]], "from_lines() (in module docarray.document.generators)": [[105, "docarray.document.generators.from_lines"]], "from_ndarray() (in module docarray.document.generators)": [[105, "docarray.document.generators.from_ndarray"]], "from_ndjson() (in module docarray.document.generators)": [[105, "docarray.document.generators.from_ndjson"]], "allmixins (class in docarray.document.mixins)": [[106, "docarray.document.mixins.AllMixins"]], "adjacency (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.adjacency"]], "blob (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.blob"]], "chunks (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.chunks"]], "content (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.content"]], "content_hash (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.content_hash"]], "content_type (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.content_type"]], "convert_blob_to_datauri() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.convert_blob_to_datauri"]], "convert_blob_to_image_tensor() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.convert_blob_to_image_tensor"]], "convert_blob_to_tensor() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.convert_blob_to_tensor"]], "convert_content_to_datauri() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.convert_content_to_datauri"]], "convert_image_tensor_to_blob() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.convert_image_tensor_to_uri"]], "convert_tensor_to_blob() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.convert_tensor_to_blob"]], "convert_tensor_to_text() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.convert_text_to_tensor"]], "convert_uri_to_datauri() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.convert_uri_to_datauri"]], "display() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.display"]], "docarray.document.mixins": [[106, "module-docarray.document.mixins"]], "embed() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.embed"]], "embed_feature_hashing() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.embed_feature_hashing"]], "embedding (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.embedding"]], "evaluations (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.evaluations"]], "from_base64() (docarray.document.mixins.allmixins class method)": [[106, "docarray.document.mixins.AllMixins.from_base64"]], "from_bytes() (docarray.document.mixins.allmixins class method)": [[106, "docarray.document.mixins.AllMixins.from_bytes"]], "from_dict() (docarray.document.mixins.allmixins class method)": [[106, "docarray.document.mixins.AllMixins.from_dict"]], "from_json() (docarray.document.mixins.allmixins class method)": [[106, "docarray.document.mixins.AllMixins.from_json"]], "from_protobuf() (docarray.document.mixins.allmixins class method)": [[106, "docarray.document.mixins.AllMixins.from_protobuf"]], "from_pydantic_model() (docarray.document.mixins.allmixins class method)": [[106, "docarray.document.mixins.AllMixins.from_pydantic_model"]], "from_strawberry_type() (docarray.document.mixins.allmixins class method)": [[106, "docarray.document.mixins.AllMixins.from_strawberry_type"]], "get_json_schema() (docarray.document.mixins.allmixins class method)": [[106, "docarray.document.mixins.AllMixins.get_json_schema"]], "get_multi_modal_attribute() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.get_multi_modal_attribute"]], "get_vocabulary() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.get_vocabulary"]], "granularity (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.granularity"]], "id (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.id"]], "is_multimodal (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.is_multimodal"]], "load_pil_image_to_datauri() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.load_pil_image_to_datauri"]], "load_uri_to_audio_tensor() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.load_uri_to_audio_tensor"]], "load_uri_to_blob() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.load_uri_to_blob"]], "load_uri_to_image_tensor() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.load_uri_to_image_tensor"]], "load_uri_to_point_cloud_tensor() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.load_uri_to_point_cloud_tensor"]], "load_uri_to_text() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.load_uri_to_text"]], "load_uri_to_video_tensor() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.load_uri_to_video_tensor"]], "location (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.location"]], "match() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.match"]], "matches (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.matches"]], "mime_type (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.mime_type"]], "modality (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.modality"]], "offset (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.offset"]], "parent_id (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.parent_id"]], "plot_matches_sprites() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.plot_matches_sprites"]], "post() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.post"]], "save_audio_tensor_to_file() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.save_audio_tensor_to_file"]], "save_blob_to_file() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.save_blob_to_file"]], "save_image_tensor_to_file() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.save_image_tensor_to_file"]], "save_uri_to_file() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.save_uri_to_file"]], "save_video_tensor_to_file() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.save_video_tensor_to_file"]], "scores (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.scores"]], "set_image_tensor_channel_axis() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.set_image_tensor_normalization"]], "set_image_tensor_shape() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.set_image_tensor_shape"]], "set_multi_modal_attribute() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.set_multi_modal_attribute"]], "summary() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.summary"]], "tags (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.tags"]], "tensor (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.tensor"]], "text (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.text"]], "to_base64() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.to_base64"]], "to_bytes() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.to_bytes"]], "to_dict() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.to_dict"]], "to_json() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.to_json"]], "to_protobuf() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.to_protobuf"]], "to_pydantic_model() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.to_pydantic_model"]], "to_strawberry_type() (docarray.document.mixins.allmixins method)": [[106, "docarray.document.mixins.AllMixins.to_strawberry_type"]], "uri (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.uri"]], "weight (docarray.document.mixins.allmixins property)": [[106, "docarray.document.mixins.AllMixins.weight"]], "getattributesmixin (class in docarray.document.mixins.attribute)": [[107, "docarray.document.mixins.attribute.GetAttributesMixin"]], "docarray.document.mixins.attribute": [[107, "module-docarray.document.mixins.attribute"]], "audiodatamixin (class in docarray.document.mixins.audio)": [[108, "docarray.document.mixins.audio.AudioDataMixin"]], "docarray.document.mixins.audio": [[108, "module-docarray.document.mixins.audio"]], "load_uri_to_audio_tensor() (docarray.document.mixins.audio.audiodatamixin method)": [[108, "docarray.document.mixins.audio.AudioDataMixin.load_uri_to_audio_tensor"]], "save_audio_tensor_to_file() (docarray.document.mixins.audio.audiodatamixin method)": [[108, "docarray.document.mixins.audio.AudioDataMixin.save_audio_tensor_to_file"]], "blobdatamixin (class in docarray.document.mixins.blob)": [[109, "docarray.document.mixins.blob.BlobDataMixin"]], "convert_blob_to_datauri() (docarray.document.mixins.blob.blobdatamixin method)": [[109, "docarray.document.mixins.blob.BlobDataMixin.convert_blob_to_datauri"]], "docarray.document.mixins.blob": [[109, "module-docarray.document.mixins.blob"]], "load_uri_to_blob() (docarray.document.mixins.blob.blobdatamixin method)": [[109, "docarray.document.mixins.blob.BlobDataMixin.load_uri_to_blob"]], "save_blob_to_file() (docarray.document.mixins.blob.blobdatamixin method)": [[109, "docarray.document.mixins.blob.BlobDataMixin.save_blob_to_file"]], "contentpropertymixin (class in docarray.document.mixins.content)": [[110, "docarray.document.mixins.content.ContentPropertyMixin"]], "content_hash (docarray.document.mixins.content.contentpropertymixin property)": [[110, "docarray.document.mixins.content.ContentPropertyMixin.content_hash"]], "convert_content_to_datauri() (docarray.document.mixins.content.contentpropertymixin method)": [[110, "docarray.document.mixins.content.ContentPropertyMixin.convert_content_to_datauri"]], "docarray.document.mixins.content": [[110, "module-docarray.document.mixins.content"]], "convertmixin (class in docarray.document.mixins.convert)": [[111, "docarray.document.mixins.convert.ConvertMixin"]], "convert_blob_to_tensor() (docarray.document.mixins.convert.convertmixin method)": [[111, "docarray.document.mixins.convert.ConvertMixin.convert_blob_to_tensor"]], "convert_tensor_to_blob() (docarray.document.mixins.convert.convertmixin method)": [[111, "docarray.document.mixins.convert.ConvertMixin.convert_tensor_to_blob"]], "convert_uri_to_datauri() (docarray.document.mixins.convert.convertmixin method)": [[111, "docarray.document.mixins.convert.ConvertMixin.convert_uri_to_datauri"]], "docarray.document.mixins.convert": [[111, "module-docarray.document.mixins.convert"]], "urifilemixin (class in docarray.document.mixins.dump)": [[112, "docarray.document.mixins.dump.UriFileMixin"]], "docarray.document.mixins.dump": [[112, "module-docarray.document.mixins.dump"]], "save_uri_to_file() (docarray.document.mixins.dump.urifilemixin method)": [[112, "docarray.document.mixins.dump.UriFileMixin.save_uri_to_file"]], "featurehashmixin (class in docarray.document.mixins.featurehash)": [[113, "docarray.document.mixins.featurehash.FeatureHashMixin"]], "docarray.document.mixins.featurehash": [[113, "module-docarray.document.mixins.featurehash"]], "embed_feature_hashing() (docarray.document.mixins.featurehash.featurehashmixin method)": [[113, "docarray.document.mixins.featurehash.FeatureHashMixin.embed_feature_hashing"]], "docarray.document.mixins.helper": [[114, "module-docarray.document.mixins.helper"]], "imagedatamixin (class in docarray.document.mixins.image)": [[115, "docarray.document.mixins.image.ImageDataMixin"]], "convert_blob_to_image_tensor() (docarray.document.mixins.image.imagedatamixin method)": [[115, "docarray.document.mixins.image.ImageDataMixin.convert_blob_to_image_tensor"]], "convert_image_tensor_to_blob() (docarray.document.mixins.image.imagedatamixin method)": [[115, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_blob"]], "convert_image_tensor_to_sliding_windows() (docarray.document.mixins.image.imagedatamixin method)": [[115, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_sliding_windows"]], "convert_image_tensor_to_uri() (docarray.document.mixins.image.imagedatamixin method)": [[115, "docarray.document.mixins.image.ImageDataMixin.convert_image_tensor_to_uri"]], "docarray.document.mixins.image": [[115, "module-docarray.document.mixins.image"]], "load_pil_image_to_datauri() (docarray.document.mixins.image.imagedatamixin method)": [[115, "docarray.document.mixins.image.ImageDataMixin.load_pil_image_to_datauri"]], "load_uri_to_image_tensor() (docarray.document.mixins.image.imagedatamixin method)": [[115, "docarray.document.mixins.image.ImageDataMixin.load_uri_to_image_tensor"]], "save_image_tensor_to_file() (docarray.document.mixins.image.imagedatamixin method)": [[115, "docarray.document.mixins.image.ImageDataMixin.save_image_tensor_to_file"]], "set_image_tensor_channel_axis() (docarray.document.mixins.image.imagedatamixin method)": [[115, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_channel_axis"]], "set_image_tensor_inv_normalization() (docarray.document.mixins.image.imagedatamixin method)": [[115, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_inv_normalization"]], "set_image_tensor_normalization() (docarray.document.mixins.image.imagedatamixin method)": [[115, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_normalization"]], "set_image_tensor_shape() (docarray.document.mixins.image.imagedatamixin method)": [[115, "docarray.document.mixins.image.ImageDataMixin.set_image_tensor_shape"]], "meshdatamixin (class in docarray.document.mixins.mesh)": [[116, "docarray.document.mixins.mesh.MeshDataMixin"]], "docarray.document.mixins.mesh": [[116, "module-docarray.document.mixins.mesh"]], "load_uri_to_point_cloud_tensor() (docarray.document.mixins.mesh.meshdatamixin method)": [[116, "docarray.document.mixins.mesh.MeshDataMixin.load_uri_to_point_cloud_tensor"]], "multimodalmixin (class in docarray.document.mixins.multimodal)": [[117, "docarray.document.mixins.multimodal.MultiModalMixin"]], "docarray.document.mixins.multimodal": [[117, "module-docarray.document.mixins.multimodal"]], "get_multi_modal_attribute() (docarray.document.mixins.multimodal.multimodalmixin method)": [[117, "docarray.document.mixins.multimodal.MultiModalMixin.get_multi_modal_attribute"]], "is_multimodal (docarray.document.mixins.multimodal.multimodalmixin property)": [[117, "docarray.document.mixins.multimodal.MultiModalMixin.is_multimodal"]], "set_multi_modal_attribute() (docarray.document.mixins.multimodal.multimodalmixin method)": [[117, "docarray.document.mixins.multimodal.MultiModalMixin.set_multi_modal_attribute"]], "plotmixin (class in docarray.document.mixins.plot)": [[118, "docarray.document.mixins.plot.PlotMixin"]], "display() (docarray.document.mixins.plot.plotmixin method)": [[118, "docarray.document.mixins.plot.PlotMixin.display"]], "docarray.document.mixins.plot": [[118, "module-docarray.document.mixins.plot"]], "plot_matches_sprites() (docarray.document.mixins.plot.plotmixin method)": [[118, "docarray.document.mixins.plot.PlotMixin.plot_matches_sprites"]], "summary() (docarray.document.mixins.plot.plotmixin method)": [[118, "docarray.document.mixins.plot.PlotMixin.summary"]], "portingmixin (class in docarray.document.mixins.porting)": [[119, "docarray.document.mixins.porting.PortingMixin"]], "docarray.document.mixins.porting": [[119, "module-docarray.document.mixins.porting"]], "from_base64() (docarray.document.mixins.porting.portingmixin class method)": [[119, "docarray.document.mixins.porting.PortingMixin.from_base64"]], "from_bytes() (docarray.document.mixins.porting.portingmixin class method)": [[119, "docarray.document.mixins.porting.PortingMixin.from_bytes"]], "from_dict() (docarray.document.mixins.porting.portingmixin class method)": [[119, "docarray.document.mixins.porting.PortingMixin.from_dict"]], "from_json() (docarray.document.mixins.porting.portingmixin class method)": [[119, "docarray.document.mixins.porting.PortingMixin.from_json"]], "to_base64() (docarray.document.mixins.porting.portingmixin method)": [[119, "docarray.document.mixins.porting.PortingMixin.to_base64"]], "to_bytes() (docarray.document.mixins.porting.portingmixin method)": [[119, "docarray.document.mixins.porting.PortingMixin.to_bytes"]], "to_dict() (docarray.document.mixins.porting.portingmixin method)": [[119, "docarray.document.mixins.porting.PortingMixin.to_dict"]], "to_json() (docarray.document.mixins.porting.portingmixin method)": [[119, "docarray.document.mixins.porting.PortingMixin.to_json"]], "propertymixin (class in docarray.document.mixins.property)": [[120, "docarray.document.mixins.property.PropertyMixin"]], "adjacency (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.adjacency"]], "blob (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.blob"]], "chunks (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.chunks"]], "content (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.content"]], "content_type (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.content_type"]], "docarray.document.mixins.property": [[120, "module-docarray.document.mixins.property"]], "embedding (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.embedding"]], "evaluations (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.evaluations"]], "granularity (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.granularity"]], "id (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.id"]], "location (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.location"]], "matches (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.matches"]], "mime_type (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.mime_type"]], "modality (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.modality"]], "offset (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.offset"]], "parent_id (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.parent_id"]], "scores (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.scores"]], "tags (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.tags"]], "tensor (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.tensor"]], "text (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.text"]], "uri (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.uri"]], "weight (docarray.document.mixins.property.propertymixin property)": [[120, "docarray.document.mixins.property.PropertyMixin.weight"]], "protobufmixin (class in docarray.document.mixins.protobuf)": [[121, "docarray.document.mixins.protobuf.ProtobufMixin"]], "docarray.document.mixins.protobuf": [[121, "module-docarray.document.mixins.protobuf"]], "from_protobuf() (docarray.document.mixins.protobuf.protobufmixin class method)": [[121, "docarray.document.mixins.protobuf.ProtobufMixin.from_protobuf"]], "to_protobuf() (docarray.document.mixins.protobuf.protobufmixin method)": [[121, "docarray.document.mixins.protobuf.ProtobufMixin.to_protobuf"]], "pydanticmixin (class in docarray.document.mixins.pydantic)": [[122, "docarray.document.mixins.pydantic.PydanticMixin"]], "docarray.document.mixins.pydantic": [[122, "module-docarray.document.mixins.pydantic"]], "from_pydantic_model() (docarray.document.mixins.pydantic.pydanticmixin class method)": [[122, "docarray.document.mixins.pydantic.PydanticMixin.from_pydantic_model"]], "get_json_schema() (docarray.document.mixins.pydantic.pydanticmixin class method)": [[122, "docarray.document.mixins.pydantic.PydanticMixin.get_json_schema"]], "to_pydantic_model() (docarray.document.mixins.pydantic.pydanticmixin method)": [[122, "docarray.document.mixins.pydantic.PydanticMixin.to_pydantic_model"]], "colorboxembedding (class in docarray.document.mixins.rich_embedding)": [[123, "docarray.document.mixins.rich_embedding.ColorBoxEmbedding"]], "docarray.document.mixins.rich_embedding": [[123, "module-docarray.document.mixins.rich_embedding"]], "strawberrymixin (class in docarray.document.mixins.strawberry)": [[124, "docarray.document.mixins.strawberry.StrawberryMixin"]], "docarray.document.mixins.strawberry": [[124, "module-docarray.document.mixins.strawberry"]], "from_strawberry_type() (docarray.document.mixins.strawberry.strawberrymixin class method)": [[124, "docarray.document.mixins.strawberry.StrawberryMixin.from_strawberry_type"]], "to_strawberry_type() (docarray.document.mixins.strawberry.strawberrymixin method)": [[124, "docarray.document.mixins.strawberry.StrawberryMixin.to_strawberry_type"]], "singletonsugarmixin (class in docarray.document.mixins.sugar)": [[125, "docarray.document.mixins.sugar.SingletonSugarMixin"]], "docarray.document.mixins.sugar": [[125, "module-docarray.document.mixins.sugar"]], "embed() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[125, "docarray.document.mixins.sugar.SingletonSugarMixin.embed"]], "match() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[125, "docarray.document.mixins.sugar.SingletonSugarMixin.match"]], "post() (docarray.document.mixins.sugar.singletonsugarmixin method)": [[125, "docarray.document.mixins.sugar.SingletonSugarMixin.post"]], "textdatamixin (class in docarray.document.mixins.text)": [[126, "docarray.document.mixins.text.TextDataMixin"]], "convert_tensor_to_text() (docarray.document.mixins.text.textdatamixin method)": [[126, "docarray.document.mixins.text.TextDataMixin.convert_tensor_to_text"]], "convert_text_to_datauri() (docarray.document.mixins.text.textdatamixin method)": [[126, "docarray.document.mixins.text.TextDataMixin.convert_text_to_datauri"]], "convert_text_to_tensor() (docarray.document.mixins.text.textdatamixin method)": [[126, "docarray.document.mixins.text.TextDataMixin.convert_text_to_tensor"]], "docarray.document.mixins.text": [[126, "module-docarray.document.mixins.text"]], "get_vocabulary() (docarray.document.mixins.text.textdatamixin method)": [[126, "docarray.document.mixins.text.TextDataMixin.get_vocabulary"]], "load_uri_to_text() (docarray.document.mixins.text.textdatamixin method)": [[126, "docarray.document.mixins.text.TextDataMixin.load_uri_to_text"]], "videodatamixin (class in docarray.document.mixins.video)": [[127, "docarray.document.mixins.video.VideoDataMixin"]], "docarray.document.mixins.video": [[127, "module-docarray.document.mixins.video"]], "load_uri_to_video_tensor() (docarray.document.mixins.video.videodatamixin method)": [[127, "docarray.document.mixins.video.VideoDataMixin.load_uri_to_video_tensor"]], "save_video_tensor_to_file() (docarray.document.mixins.video.videodatamixin method)": [[127, "docarray.document.mixins.video.VideoDataMixin.save_video_tensor_to_file"]], "pydanticdocument (class in docarray.document.pydantic_model)": [[128, "docarray.document.pydantic_model.PydanticDocument"]], "pydanticdocument.config (class in docarray.document.pydantic_model)": [[128, "docarray.document.pydantic_model.PydanticDocument.Config"]], "adjacency (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.adjacency"]], "blob (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.blob"]], "chunks (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.chunks"]], "construct() (docarray.document.pydantic_model.pydanticdocument class method)": [[128, "docarray.document.pydantic_model.PydanticDocument.construct"]], "copy() (docarray.document.pydantic_model.pydanticdocument method)": [[128, "docarray.document.pydantic_model.PydanticDocument.copy"]], "dict() (docarray.document.pydantic_model.pydanticdocument method)": [[128, "docarray.document.pydantic_model.PydanticDocument.dict"]], "docarray.document.pydantic_model": [[128, "module-docarray.document.pydantic_model"]], "embedding (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.embedding"]], "evaluations (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.evaluations"]], "from_orm() (docarray.document.pydantic_model.pydanticdocument class method)": [[128, "docarray.document.pydantic_model.PydanticDocument.from_orm"]], "granularity (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.granularity"]], "id (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.id"]], "json() (docarray.document.pydantic_model.pydanticdocument method)": [[128, "docarray.document.pydantic_model.PydanticDocument.json"]], "location (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.location"]], "matches (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.matches"]], "mime_type (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.mime_type"]], "modality (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.modality"]], "offset (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.offset"]], "parent_id (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.parent_id"]], "parse_file() (docarray.document.pydantic_model.pydanticdocument class method)": [[128, "docarray.document.pydantic_model.PydanticDocument.parse_file"]], "parse_obj() (docarray.document.pydantic_model.pydanticdocument class method)": [[128, "docarray.document.pydantic_model.PydanticDocument.parse_obj"]], "parse_raw() (docarray.document.pydantic_model.pydanticdocument class method)": [[128, "docarray.document.pydantic_model.PydanticDocument.parse_raw"]], "schema() (docarray.document.pydantic_model.pydanticdocument class method)": [[128, "docarray.document.pydantic_model.PydanticDocument.schema"]], "schema_json() (docarray.document.pydantic_model.pydanticdocument class method)": [[128, "docarray.document.pydantic_model.PydanticDocument.schema_json"]], "scores (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.scores"]], "smart_union (docarray.document.pydantic_model.pydanticdocument.config attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.Config.smart_union"]], "tags (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.tags"]], "tensor (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.tensor"]], "text (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.text"]], "update_forward_refs() (docarray.document.pydantic_model.pydanticdocument class method)": [[128, "docarray.document.pydantic_model.PydanticDocument.update_forward_refs"]], "uri (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.uri"]], "validate() (docarray.document.pydantic_model.pydanticdocument class method)": [[128, "docarray.document.pydantic_model.PydanticDocument.validate"]], "weight (docarray.document.pydantic_model.pydanticdocument attribute)": [[128, "docarray.document.pydantic_model.PydanticDocument.weight"]], "add_protocol_and_compress_to_file_path() (in module docarray.helper)": [[130, "docarray.helper.add_protocol_and_compress_to_file_path"]], "cached_property (class in docarray.helper)": [[130, "docarray.helper.cached_property"]], "compress_bytes() (in module docarray.helper)": [[130, "docarray.helper.compress_bytes"]], "dataclass_from_dict() (in module docarray.helper)": [[130, "docarray.helper.dataclass_from_dict"]], "decompress_bytes() (in module docarray.helper)": [[130, "docarray.helper.decompress_bytes"]], "deprecate_by() (in module docarray.helper)": [[130, "docarray.helper.deprecate_by"]], "docarray.helper": [[130, "module-docarray.helper"]], "download_mermaid_url() (in module docarray.helper)": [[130, "docarray.helper.download_mermaid_url"]], "dunder_get() (in module docarray.helper)": [[130, "docarray.helper.dunder_get"]], "filter_dict() (in module docarray.helper)": [[130, "docarray.helper.filter_dict"]], "get_ci_vendor() (in module docarray.helper)": [[130, "docarray.helper.get_ci_vendor"]], "get_compress_ctx() (in module docarray.helper)": [[130, "docarray.helper.get_compress_ctx"]], "get_full_version() (in module docarray.helper)": [[130, "docarray.helper.get_full_version"]], "get_request_header() (in module docarray.helper)": [[130, "docarray.helper.get_request_header"]], "protocol_and_compress_from_file_path() (in module docarray.helper)": [[130, "docarray.helper.protocol_and_compress_from_file_path"]], "random_identity() (in module docarray.helper)": [[130, "docarray.helper.random_identity"]], "random_port() (in module docarray.helper)": [[130, "docarray.helper.random_port"]], "random_uuid() (in module docarray.helper)": [[130, "docarray.helper.random_uuid"]], "reset_ports() (in module docarray.helper)": [[130, "docarray.helper.reset_ports"]], "typename() (in module docarray.helper)": [[130, "docarray.helper.typename"]], "docarray.math": [[131, "module-docarray.math"]], "cdist() (in module docarray.math.distance)": [[132, "docarray.math.distance.cdist"]], "docarray.math.distance": [[132, "module-docarray.math.distance"]], "pdist() (in module docarray.math.distance)": [[132, "docarray.math.distance.pdist"]], "cosine() (in module docarray.math.distance.numpy)": [[133, "docarray.math.distance.numpy.cosine"]], "docarray.math.distance.numpy": [[133, "module-docarray.math.distance.numpy"]], "euclidean() (in module docarray.math.distance.numpy)": [[133, "docarray.math.distance.numpy.euclidean"]], "sparse_cosine() (in module docarray.math.distance.numpy)": [[133, "docarray.math.distance.numpy.sparse_cosine"]], "sparse_euclidean() (in module docarray.math.distance.numpy)": [[133, "docarray.math.distance.numpy.sparse_euclidean"]], "sparse_sqeuclidean() (in module docarray.math.distance.numpy)": [[133, "docarray.math.distance.numpy.sparse_sqeuclidean"]], "sqeuclidean() (in module docarray.math.distance.numpy)": [[133, "docarray.math.distance.numpy.sqeuclidean"]], "cosine() (in module docarray.math.distance.tensorflow)": [[135, "docarray.math.distance.tensorflow.cosine"]], "docarray.math.distance.tensorflow": [[135, "module-docarray.math.distance.tensorflow"]], "euclidean() (in module docarray.math.distance.tensorflow)": [[135, "docarray.math.distance.tensorflow.euclidean"]], "sqeuclidean() (in module docarray.math.distance.tensorflow)": [[135, "docarray.math.distance.tensorflow.sqeuclidean"]], "cosine() (in module docarray.math.distance.torch)": [[136, "docarray.math.distance.torch.cosine"]], "docarray.math.distance.torch": [[136, "module-docarray.math.distance.torch"]], "euclidean() (in module docarray.math.distance.torch)": [[136, "docarray.math.distance.torch.euclidean"]], "sqeuclidean() (in module docarray.math.distance.torch)": [[136, "docarray.math.distance.torch.sqeuclidean"]], "average_precision() (in module docarray.math.evaluation)": [[137, "docarray.math.evaluation.average_precision"]], "dcg_at_k() (in module docarray.math.evaluation)": [[137, "docarray.math.evaluation.dcg_at_k"]], "docarray.math.evaluation": [[137, "module-docarray.math.evaluation"]], "f1_score_at_k() (in module docarray.math.evaluation)": [[137, "docarray.math.evaluation.f1_score_at_k"]], "hit_at_k() (in module docarray.math.evaluation)": [[137, "docarray.math.evaluation.hit_at_k"]], "ndcg_at_k() (in module docarray.math.evaluation)": [[137, "docarray.math.evaluation.ndcg_at_k"]], "precision_at_k() (in module docarray.math.evaluation)": [[137, "docarray.math.evaluation.precision_at_k"]], "r_precision() (in module docarray.math.evaluation)": [[137, "docarray.math.evaluation.r_precision"]], "recall_at_k() (in module docarray.math.evaluation)": [[137, "docarray.math.evaluation.recall_at_k"]], "reciprocal_rank() (in module docarray.math.evaluation)": [[137, "docarray.math.evaluation.reciprocal_rank"]], "docarray.math.helper": [[138, "module-docarray.math.helper"]], "minmax_normalize() (in module docarray.math.helper)": [[138, "docarray.math.helper.minmax_normalize"]], "top_k() (in module docarray.math.helper)": [[138, "docarray.math.helper.top_k"]], "update_rows_x_mat_best() (in module docarray.math.helper)": [[138, "docarray.math.helper.update_rows_x_mat_best"]], "check_arraylike_equality() (in module docarray.math.ndarray)": [[139, "docarray.math.ndarray.check_arraylike_equality"]], "detach_tensor_if_present() (in module docarray.math.ndarray)": [[139, "docarray.math.ndarray.detach_tensor_if_present"]], "docarray.math.ndarray": [[139, "module-docarray.math.ndarray"]], "get_array_rows() (in module docarray.math.ndarray)": [[139, "docarray.math.ndarray.get_array_rows"]], "get_array_type() (in module docarray.math.ndarray)": [[139, "docarray.math.ndarray.get_array_type"]], "ravel() (in module docarray.math.ndarray)": [[139, "docarray.math.ndarray.ravel"]], "to_list() (in module docarray.math.ndarray)": [[139, "docarray.math.ndarray.to_list"]], "to_numpy_array() (in module docarray.math.ndarray)": [[139, "docarray.math.ndarray.to_numpy_array"]], "unravel() (in module docarray.math.ndarray)": [[139, "docarray.math.ndarray.unravel"]], "docarray.proto": [[140, "module-docarray.proto"]], "docarray.proto.docarray_pb2": [[141, "module-docarray.proto.docarray_pb2"]], "docarray.proto.io": [[142, "module-docarray.proto.io"]], "flush_proto() (in module docarray.proto.io)": [[142, "docarray.proto.io.flush_proto"]], "parse_proto() (in module docarray.proto.io)": [[142, "docarray.proto.io.parse_proto"]], "docarray.proto.io.ndarray": [[143, "module-docarray.proto.io.ndarray"]], "flush_ndarray() (in module docarray.proto.io.ndarray)": [[143, "docarray.proto.io.ndarray.flush_ndarray"]], "read_ndarray() (in module docarray.proto.io.ndarray)": [[143, "docarray.proto.io.ndarray.read_ndarray"]], "namedscore (class in docarray.score)": [[144, "docarray.score.NamedScore"]], "clear() (docarray.score.namedscore method)": [[144, "docarray.score.NamedScore.clear"]], "copy_from() (docarray.score.namedscore method)": [[144, "docarray.score.NamedScore.copy_from"]], "description (docarray.score.namedscore property)": [[144, "docarray.score.NamedScore.description"]], "docarray.score": [[144, "module-docarray.score"]], "nbytes (docarray.score.namedscore property)": [[144, "docarray.score.NamedScore.nbytes"]], "non_empty_fields (docarray.score.namedscore property)": [[144, "docarray.score.NamedScore.non_empty_fields"]], "op_name (docarray.score.namedscore property)": [[144, "docarray.score.NamedScore.op_name"]], "pop() (docarray.score.namedscore method)": [[144, "docarray.score.NamedScore.pop"]], "ref_id (docarray.score.namedscore property)": [[144, "docarray.score.NamedScore.ref_id"]], "to_dict() (docarray.score.namedscore method)": [[144, "docarray.score.NamedScore.to_dict"]], "value (docarray.score.namedscore property)": [[144, "docarray.score.NamedScore.value"]], "namedscoredata (class in docarray.score.data)": [[145, "docarray.score.data.NamedScoreData"]], "description (docarray.score.data.namedscoredata attribute)": [[145, "docarray.score.data.NamedScoreData.description"]], "docarray.score.data": [[145, "module-docarray.score.data"]], "op_name (docarray.score.data.namedscoredata attribute)": [[145, "docarray.score.data.NamedScoreData.op_name"]], "ref_id (docarray.score.data.namedscoredata attribute)": [[145, "docarray.score.data.NamedScoreData.ref_id"]], "value (docarray.score.data.namedscoredata attribute)": [[145, "docarray.score.data.NamedScoreData.value"]], "allmixins (class in docarray.score.mixins)": [[146, "docarray.score.mixins.AllMixins"]], "description (docarray.score.mixins.allmixins property)": [[146, "docarray.score.mixins.AllMixins.description"]], "docarray.score.mixins": [[146, "module-docarray.score.mixins"]], "op_name (docarray.score.mixins.allmixins property)": [[146, "docarray.score.mixins.AllMixins.op_name"]], "ref_id (docarray.score.mixins.allmixins property)": [[146, "docarray.score.mixins.AllMixins.ref_id"]], "to_dict() (docarray.score.mixins.allmixins method)": [[146, "docarray.score.mixins.AllMixins.to_dict"]], "value (docarray.score.mixins.allmixins property)": [[146, "docarray.score.mixins.AllMixins.value"]], "propertymixin (class in docarray.score.mixins.property)": [[147, "docarray.score.mixins.property.PropertyMixin"]], "description (docarray.score.mixins.property.propertymixin property)": [[147, "docarray.score.mixins.property.PropertyMixin.description"]], "docarray.score.mixins.property": [[147, "module-docarray.score.mixins.property"]], "op_name (docarray.score.mixins.property.propertymixin property)": [[147, "docarray.score.mixins.property.PropertyMixin.op_name"]], "ref_id (docarray.score.mixins.property.propertymixin property)": [[147, "docarray.score.mixins.property.PropertyMixin.ref_id"]], "value (docarray.score.mixins.property.propertymixin property)": [[147, "docarray.score.mixins.property.PropertyMixin.value"]], "representmixin (class in docarray.score.mixins.representer)": [[148, "docarray.score.mixins.representer.RepresentMixin"]], "docarray.score.mixins.representer": [[148, "module-docarray.score.mixins.representer"]], "to_dict() (docarray.score.mixins.representer.representmixin method)": [[148, "docarray.score.mixins.representer.RepresentMixin.to_dict"]], "docarray.typing": [[149, "module-docarray.typing"]]}})